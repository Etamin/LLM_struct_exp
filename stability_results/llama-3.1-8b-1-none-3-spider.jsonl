
{"result": "SELECT COUNT(\"Singer_ID\") FROM singer", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(*) FROM singer", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC", "match": {"match": true, "result": [["Joe Sharp", "Netherlands", 52], ["John Nizinik", "France", 43], ["Rose White", "France", 41], ["Timbaland", "United States", 32], ["Justin Brown", "France", 29], ["Tribal King", "France", 25]]}}
{"result": "SELECT Name, Country, Age \nFROM singer \nORDER BY Age DESC;", "match": {"match": true, "result": [["Joe Sharp", "Netherlands", 52], ["John Nizinik", "France", 43], ["Rose White", "France", 41], ["Timbaland", "United States", 32], ["Justin Brown", "France", 29], ["Tribal King", "France", 25]]}}
{"result": "SELECT AVG(Age) , MIN(Age) , MAX(Age) \nFROM singer \nWHERE Country = 'France';", "match": {"match": true, "result": [[34.5, 25, 43]]}}
{"result": "SELECT AVG(\"Age\") , MIN(\"Age\") , MAX(\"Age\") \nFROM singer \nWHERE \"Country\" = 'France';", "match": {"match": true, "result": [[34.5, 25, 43]]}}
{"result": "SELECT T1.Name, T1.`Song_Name`, T1.`Song_release_year` \nFROM singer AS T1 \nINNER JOIN \nsinger_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID \nINNER JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID \nORDER BY T1.Age \nLIMIT 1;", "match": {"match": false, "result": [["Tribal King", "Love", "2016"]], "gt": [["Love", "2016"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name, T1.Song_Name, T1.Song_release_year \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID \nJOIN concert AS T3 ON T2.concert_ID = T3.concert_ID \nWHERE T1.Age = (SELECT MIN(T1.Age) FROM singer AS T1);", "match": {"match": false, "result": [["Tribal King", "Love", "2016"], ["Tribal King", "Love", "2016"]], "gt": [["Love", "2016"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T1.Country \nFROM singer AS T1 \nWHERE T1.Age > 20", "match": {"match": true, "result": [["Netherlands"], ["United States"], ["France"]]}}
{"result": "SELECT DISTINCT Country \nFROM singer \nWHERE Age > 20", "match": {"match": true, "result": [["Netherlands"], ["United States"], ["France"]]}}
{"result": "SELECT Country, COUNT(Singer_ID) FROM singer GROUP BY Country", "match": {"match": true, "result": [["France", 4], ["Netherlands", 1], ["United States", 1]]}}
{"result": "SELECT COUNT(Singer_ID), Country \nFROM singer \nGROUP BY Country", "match": {"match": false, "result": [[4, "France"], [1, "Netherlands"], [1, "United States"]], "gt": [["France", 4], ["Netherlands", 1], ["United States", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Song_Name \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID \nJOIN concert AS T3 ON T2.concert_ID = T3.concert_ID \nJOIN stadium AS T4 ON T3.Stadium_ID = T4.Stadium_ID \nWHERE T1.Age > (SELECT AVG(Age) FROM singer);", "match": {"match": false, "result": [["Gentleman"], ["Gentleman"], ["Sun"]], "gt": [["You"], ["Sun"], ["Gentleman"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.`Song_Name` FROM singer AS T1\nJOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID\nJOIN concert AS T3 ON T2.concert_ID = T3.concert_ID\nJOIN stadium AS T4 ON T3.Stadium_ID = T4.Stadium_ID\nJOIN (\n  SELECT Singer_ID, AVG(Age) AS avg_age\n  FROM singer\n  GROUP BY Singer_ID\n) AS T5 ON T1.Singer_ID = T5.Singer_ID\nWHERE T1.`Age` > T5.avg_age", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Song_Name"}}
{"result": "SELECT \"Location\", \"Name\" FROM \"stadium\" WHERE \"Capacity\" BETWEEN 5000 AND 10000", "match": {"match": true, "result": []}}
{"result": "SELECT Location, Name \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000;", "match": {"match": true, "result": []}}
{"result": "SELECT MAX(Capacity), AVG(Average) FROM stadium", "match": {"match": false, "result": [[52500, 917.8888888888889]], "gt": [[52500, 730]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(Capacity) , MAX(Capacity) FROM stadium", "match": {"match": true, "result": [[10621.666666666666, 52500]]}}
{"result": "SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1", "match": {"match": true, "result": [["Stark's Park", 10104]]}}
{"result": "SELECT Name, Capacity \nFROM stadium \nORDER BY Average DESC \nLIMIT 1;", "match": {"match": true, "result": [["Stark's Park", 10104]]}}
{"result": "SELECT COUNT(*) \nFROM concert \nWHERE YEAR = '2014' OR YEAR = '2015'", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(concert_ID) \nFROM concert \nWHERE YEAR = '2014' OR YEAR = '2015';", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT T1.Name, COUNT(T2.concert_ID) \nFROM stadium AS T1 \nJOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nGROUP BY T1.Name", "match": {"match": false, "result": [["Balmoor", 1], ["Glebe Park", 1], ["Recreation Park", 1], ["Somerset Park", 2], ["Stark's Park", 1]], "gt": [["Stark's Park", 1], ["Glebe Park", 1], ["Somerset Park", 2], ["Recreation Park", 1], ["Balmoor", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.Name, COUNT(ci.singer_id) \nFROM concert c \nJOIN singer_in_concert ci ON c.concert_ID = ci.concert_ID \nJOIN stadium s ON c.Stadium_ID = s.Stadium_ID \nGROUP BY s.Name", "match": {"match": false, "result": [["Balmoor", 2], ["Glebe Park", 1], ["Recreation Park", 1], ["Somerset Park", 3], ["Stark's Park", 3]], "gt": [["Stark's Park", 1], ["Glebe Park", 1], ["Somerset Park", 2], ["Recreation Park", 1], ["Balmoor", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name, T1.Capacity\nFROM stadium AS T1\nJOIN (\n  SELECT T2.Stadium_ID, COUNT(T2.concert_ID) as num\n  FROM concert AS T2\n  WHERE T2.Year > '2014'\n  GROUP BY T2.Stadium_ID\n  ORDER BY num DESC\n  LIMIT 1\n) AS T3\nON T1.Stadium_ID = T3.Stadium_ID", "match": {"match": false, "result": [["Balmoor", 4000]], "gt": [["Somerset Park", 11998]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name, T1.Capacity \nFROM stadium AS T1 \nJOIN (\n  SELECT Stadium_ID, COUNT(concert_ID) as cnt\n  FROM singer_in_concert\n  JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID\n  WHERE YEAR > '2013'\n  GROUP BY Stadium_ID\n  ORDER BY cnt DESC\n  LIMIT 1\n) AS T2 \nON T1.Stadium_ID = T2.Stadium_ID", "match": {"match": false, "error": "Query execution failed with error: ambiguous column name: concert_ID"}}
{"result": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1", "match": {"match": true, "result": [["2015"]]}}
{"result": "SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(Year) DESC LIMIT 1", "match": {"match": true, "result": [["2015"]]}}
{"result": "SELECT Name \nFROM stadium \nWHERE Stadium_ID NOT IN (\n  SELECT Stadium_ID \n  FROM concert\n);", "match": {"match": true, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"]]}}
{"result": "SELECT T1.Name FROM stadium AS T1 \nLEFT JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nWHERE T2.Stadium_ID IS NULL", "match": {"match": true, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"]]}}
{"result": "SELECT T1.Country \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID \nWHERE T1.Age > 40 INTERSECT \nSELECT T1.Country \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID \nWHERE T1.Age < 30;", "match": {"match": true, "result": [["France"]]}}
{"result": "SELECT Name \nFROM stadium \nWHERE Stadium_ID NOT IN (\n  SELECT Stadium_ID \n  FROM concert \n  WHERE YEAR = '2014'\n);", "match": {"match": false, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"], ["Recreation Park"], ["Balmoor"]], "gt": [["Balmoor"], ["Bayview Stadium"], ["Forthbank Stadium"], ["Gayfield Park"], ["Hampden Park"], ["Recreation Park"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name \nFROM stadium AS T1 \nLEFT JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nWHERE T2.concert_Id IS NULL OR T2.Year != '2014'", "match": {"match": false, "result": [["Somerset Park"], ["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"], ["Recreation Park"], ["Balmoor"]], "gt": [["Balmoor"], ["Bayview Stadium"], ["Forthbank Stadium"], ["Gayfield Park"], ["Hampden Park"], ["Recreation Park"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT C.concert_Name, C.Theme, COUNT(S.Singer_ID) AS Number_of_singers \nFROM concert C \nJOIN singer_in_concert SIC ON C.concert_ID = SIC.concert_ID \nJOIN singer S ON SIC.Singer_ID = S.Singer_ID \nGROUP BY C.concert_Name, C.Theme", "match": {"match": false, "result": [["Auditions", "Free choice", 3], ["Home Visits", "Bleeding Love", 1], ["Super bootcamp", "Free choice 2", 2], ["Week 1", "Happy Tonight", 2], ["Week 1", "Wide Awake", 1], ["Week 2", "Party All Night", 1]], "gt": [["Auditions", "Free choice", 3], ["Super bootcamp", "Free choice 2", 2], ["Home Visits", "Bleeding Love", 1], ["Week 1", "Wide Awake", 1], ["Week 1", "Happy Tonight", 2], ["Week 2", "Party All Night", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.concert_Name, T1.Theme, COUNT(T2.Singer_ID) FROM concert AS T1 INNER JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID GROUP BY T1.concert_ID", "match": {"match": true, "result": [["Auditions", "Free choice", 3], ["Super bootcamp", "Free choice 2", 2], ["Home Visits", "Bleeding Love", 1], ["Week 1", "Wide Awake", 1], ["Week 1", "Happy Tonight", 2], ["Week 2", "Party All Night", 1]]}}
{"result": "SELECT T1.`Name`, COUNT(T2.`concert_ID`) \nFROM `singer` AS T1 \nJOIN `singer_in_concert` AS T2 ON T1.`Singer_ID` = T2.`Singer_ID` \nGROUP BY T1.`Name`", "match": {"match": false, "result": [["John Nizinik", 2], ["Justin Brown", 3], ["Rose White", 1], ["Timbaland", 2], ["Tribal King", 2]], "gt": [["Timbaland", 2], ["Justin Brown", 3], ["Rose White", 1], ["John Nizinik", 2], ["Tribal King", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name, COUNT(T2.concert_ID) \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID \nGROUP BY T1.Name", "match": {"match": false, "result": [["John Nizinik", 2], ["Justin Brown", 3], ["Rose White", 1], ["Timbaland", 2], ["Tribal King", 2]], "gt": [["Timbaland", 2], ["Justin Brown", 3], ["Rose White", 1], ["John Nizinik", 2], ["Tribal King", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Name \nFROM concert AS T1 \nJOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID \nJOIN singer AS T3 ON T2.Singer_ID = T3.Singer_ID \nWHERE T1.year = '2014';", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Name"}}
{"result": "SELECT T3.Name \nFROM concert AS T1 \nJOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID \nJOIN singer AS T3 ON T3.Singer_ID = T2.Singer_ID \nWHERE T1.Year = '2014';", "match": {"match": true, "result": [["Timbaland"], ["Justin Brown"], ["John Nizinik"], ["Justin Brown"], ["Tribal King"], ["Rose White"]]}}
{"result": "SELECT T1.Name, T1.Country \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID \nJOIN concert AS T3 ON T2.concert_ID = T3.concert_ID \nJOIN singer AS T4 ON T3.Stadium_ID = T4.Singer_ID", "match": {"match": false, "result": [["Timbaland", "United States"], ["Justin Brown", "France"], ["John Nizinik", "France"], ["Justin Brown", "France"], ["Tribal King", "France"], ["John Nizinik", "France"]], "gt": [["Justin Brown", "France"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name, Country \nFROM singer \nWHERE Singer_ID IN (SELECT Singer_ID \n                    FROM singer \n                    WHERE Song_Name LIKE '%Hey%');", "match": {"match": true, "result": [["Justin Brown", "France"]]}}
{"result": "SELECT T2.Location, T2.Name \nFROM concert AS T1 \nJOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nWHERE T1.Year = '2014' AND T1.Year = '2015'", "match": {"match": false, "result": [], "gt": [["Somerset Park", "Ayr United"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Location, T2.Name \nFROM concert AS T1 \nJOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nWHERE T1.Year = '2014' INTERSECT \nSELECT T2.Location, T2.Name \nFROM concert AS T1 \nJOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nWHERE T1.Year = '2015';", "match": {"match": false, "result": [["Ayr United", "Somerset Park"]], "gt": [["Somerset Park", "Ayr United"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(T1.concert_ID) FROM concert AS T1 \nINNER JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nORDER BY T2.Capacity DESC LIMIT 1", "match": {"match": false, "result": [[6]], "gt": [[0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(T1.concert_ID) \nFROM concert AS T1 \nINNER JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nWHERE T2.Capacity = ( SELECT MAX(Capacity) FROM stadium );", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(*) \nFROM Pets \nWHERE weight > 10;", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(*) \nFROM Pets \nWHERE weight > 10;", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT T2.weight \nFROM Pets AS T1 INNER JOIN Has_Pet AS T2 ON T1.PetID = T2.PetID \nWHERE T1.PetType = 'dog' AND T1.pet_age = ( SELECT MIN(T1.pet_age) FROM Pets AS T1 INNER JOIN Has_Pet AS T2 ON T1.PetID = T2.PetID WHERE T1.PetType = 'dog' );", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.weight"}}
{"result": "SELECT T2.weight \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'dog' \nORDER BY T1.Age ASC LIMIT 1", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.weight"}}
{"result": "SELECT PetType, MAX(weight) \nFROM Pets \nGROUP BY PetType", "match": {"match": false, "result": [["cat", 12.0], ["dog", 13.4]], "gt": [[12.0, "cat"], [13.4, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT PetType, MAX(weight) FROM Pets GROUP BY PetType", "match": {"match": false, "result": [["cat", 12.0], ["dog", 13.4]], "gt": [[12.0, "cat"], [13.4, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) \nFROM Student AS S\nJOIN Has_Pet AS HP ON S.StuID = HP.StuID\nJOIN Pets AS P ON HP.PetID = P.PetID\nWHERE S.Age > 20", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(T1.PetID) \nFROM Pets AS T1 \nJOIN Has_Pet AS T2 ON T1.PetID = T2.PetID \nJOIN Student AS T3 ON T2.StuID = T3.StuID \nWHERE T3.Age > 20", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(P.PetID) \nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nJOIN Pets P ON HP.PetID = P.PetID\nWHERE S.Sex = 'F' AND P.PetType = 'dog'", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(*) \nFROM Student AS S \nJOIN Has_Pet AS HP ON S.StuID = HP.StuID \nJOIN Pets AS P ON HP.PetID = P.PetID \nWHERE S.Sex = 'F' AND P.PetType = 'Dog';", "match": {"match": false, "result": [[0]], "gt": [[2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT PetType) AS DISTINCT_PET_TYPES \nFROM Pets", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(DISTINCT PetType) FROM Pets", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType IN ('cat', 'dog');", "match": {"match": false, "result": [["Linda"], ["Tracy"], ["Tracy"]], "gt": [["Linda"], ["Tracy"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Fname \nFROM Student AS T1 \nINNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nINNER JOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType IN ('Cat', 'Dog');", "match": {"match": false, "result": [], "gt": [["Linda"], ["Tracy"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Fname \nFROM Student \nWHERE StuID IN (\n  SELECT StuID \n  FROM Has_Pet \n  WHERE PetID IN (\n    SELECT PetID \n    FROM Pets \n    WHERE PetType = 'cat'\n  )\n  INTERSECT\n  SELECT StuID \n  FROM Has_Pet \n  WHERE PetID IN (\n    SELECT PetID \n    FROM Pets \n    WHERE PetType = 'dog'\n  )\n)", "match": {"match": true, "result": []}}
{"result": "SELECT s.Fname \nFROM Student s \nJOIN Has_Pet hp ON s.StuID = hp.StuID \nJOIN Pets p ON hp.PetID = p.PetID \nGROUP BY s.Fname \nHAVING COUNT(CASE WHEN p.PetType = 'cat' THEN p.PetType END) > 0 \nAND COUNT(CASE WHEN p.PetType = 'dog' THEN p.PetType END) > 0", "match": {"match": true, "result": []}}
{"result": "SELECT T1.Major, T1.Age \nFROM Student AS T1 \nLEFT JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nLEFT JOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType != 'cat'", "match": {"match": false, "result": [[600, 19], [600, 19]], "gt": [[600, 19], [600, 21], [600, 20], [600, 26], [600, 18], [600, 18], [600, 20], [600, 19], [600, 17], [600, 22], [600, 20], [600, 18], [600, 16], [600, 17], [600, 27], [600, 20], [600, 18], [520, 22], [520, 19], [540, 17], [520, 20], [540, 18], [520, 18], [520, 19], [520, 18], [550, 20], [100, 17], [550, 21], [550, 20], [550, 20], [550, 18], [50, 18], [50, 26]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Major, T1.Age\nFROM Student AS T1\nLEFT JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID\nLEFT JOIN Pets AS T3 ON T2.PetID = T3.PetID\nWHERE T3.PetType != 'Cat'", "match": {"match": false, "result": [[600, 18], [600, 19], [600, 19]], "gt": [[600, 19], [600, 21], [600, 20], [600, 26], [600, 18], [600, 18], [600, 20], [600, 19], [600, 17], [600, 22], [600, 20], [600, 18], [600, 16], [600, 17], [600, 27], [600, 20], [600, 18], [520, 22], [520, 19], [540, 17], [520, 20], [540, 18], [520, 18], [520, 19], [520, 18], [550, 20], [100, 17], [550, 21], [550, 20], [550, 20], [550, 18], [50, 18], [50, 26]], "error": "Query result does not match ground truth."}}
{"result": "SELECT StuID \nFROM Student \nWHERE StuID NOT IN (\n  SELECT StuID \n  FROM Has_Pet \n  WHERE PetID IN (\n    SELECT PetID \n    FROM Pets \n    WHERE PetType = 'cat'\n  )\n)", "match": {"match": true, "result": [[1002], [1003], [1004], [1005], [1006], [1007], [1008], [1009], [1010], [1011], [1012], [1014], [1015], [1016], [1017], [1018], [1019], [1020], [1021], [1022], [1023], [1024], [1025], [1026], [1027], [1028], [1029], [1030], [1031], [1032], [1033], [1034], [1035]]}}
{"result": "SELECT StuID \nFROM Student \nWHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'));", "match": {"match": true, "result": [[1002], [1003], [1004], [1005], [1006], [1007], [1008], [1009], [1010], [1011], [1012], [1014], [1015], [1016], [1017], [1018], [1019], [1020], [1021], [1022], [1023], [1024], [1025], [1026], [1027], [1028], [1029], [1030], [1031], [1032], [1033], [1034], [1035]]}}
{"result": "SELECT T1.Fname, T1.Age \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'Dog' \nAND T2.PetID NOT IN (SELECT PetID FROM Pets WHERE PetType = 'Cat')", "match": {"match": false, "result": [], "gt": [["Tracy", 19], ["Tracy", 19]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Fname FROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType = 'dog' AND Pets.PetType != 'cat'", "match": {"match": false, "result": [["Tracy"], ["Tracy"]], "gt": [["Tracy", 19], ["Tracy", 19]], "error": "Query result does not match ground truth."}}
{"result": "SELECT PetType, weight \nFROM Pets \nWHERE pet_age = (SELECT MIN(pet_age) FROM Pets);", "match": {"match": true, "result": [["dog", 9.3]]}}
{"result": "SELECT PetType, weight FROM Pets ORDER BY pet_age LIMIT 1", "match": {"match": true, "result": [["dog", 9.3]]}}
{"result": "SELECT PetID, weight \nFROM Pets \nWHERE pet_age > 1;", "match": {"match": true, "result": [[2001, 12.0], [2002, 13.4]]}}
{"result": "SELECT PetID, weight \nFROM Pets \nWHERE pet_age > 1;", "match": {"match": true, "result": [[2001, 12.0], [2002, 13.4]]}}
{"result": "SELECT PetType, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age \nFROM Pets \nGROUP BY PetType", "match": {"match": false, "result": [["cat", 3.0, 3], ["dog", 1.5, 2]], "gt": [[3.0, 3, "cat"], [1.5, 2, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT PetType, AVG(pet_age) AS AverageAge, MAX(pet_age) AS MaxAge \nFROM Pets \nGROUP BY PetType", "match": {"match": false, "result": [["cat", 3.0, 3], ["dog", 1.5, 2]], "gt": [[3.0, 3, "cat"], [1.5, 2, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(weight) ,  PetType \nFROM Pets GROUP BY PetType", "match": {"match": true, "result": [[12.0, "cat"], [11.350000000000001, "dog"]]}}
{"result": "SELECT PetType, AVG(weight) AS average_weight\nFROM Pets\nGROUP BY PetType;", "match": {"match": false, "result": [["cat", 12.0], ["dog", 11.350000000000001]], "gt": [[12.0, "cat"], [11.350000000000001, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Fname, T2.Age FROM Has_Pet \nINNER JOIN Student AS T2 ON Has_Pet.StuID = T2.StuID", "match": {"match": false, "result": [["Linda", 18], ["Tracy", 19], ["Tracy", 19]], "gt": [["Linda", 18], ["Tracy", 19]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT Fname, Age\nFROM Student\nWHERE StuID IN (SELECT StuID FROM Has_Pet);", "match": {"match": true, "result": [["Linda", 18], ["Tracy", 19]]}}
{"result": "SELECT T1.PetID \nFROM Has_Pet AS T1 \nJOIN Student AS T2 ON T1.StuID = T2.StuID \nWHERE T2.LName = 'Smith';", "match": {"match": true, "result": [[2001]]}}
{"result": "SELECT T2.PetID \nFROM Student AS T1 \nINNER JOIN Has_Pet AS T2 \nON T1.StuID = T2.StuID \nWHERE T1.LName = 'Smith';", "match": {"match": true, "result": [[2001]]}}
{"result": "SELECT StuID, COUNT(*) as NumPets FROM Has_Pet GROUP BY StuID", "match": {"match": false, "result": [[1001, 1], [1002, 2]], "gt": [[1, 1001], [2, 1002]], "error": "Query result does not match ground truth."}}
{"result": "SELECT StuID, COUNT(PetID) FROM Has_Pet GROUP BY StuID", "match": {"match": false, "result": [[1001, 1], [1002, 2]], "gt": [[1, 1001], [2, 1002]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Fname, T1.Sex \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nGROUP BY T1.Fname, T1.Sex \nHAVING COUNT(T2.PetID) > 1", "match": {"match": true, "result": [["Tracy", "F"]]}}
{"result": "SELECT T1.Fname, T1.Sex \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nGROUP BY T1.StuID \nHAVING COUNT(T2.StuID)  >  1;", "match": {"match": true, "result": [["Tracy", "F"]]}}
{"result": "SELECT S.LName \nFROM Student S \nJOIN Has_Pet HP ON S.StuID = HP.StuID \nJOIN Pets P ON HP.PetID = P.PetID \nWHERE P.pet_age = 3 AND P.PetType = 'Cat';", "match": {"match": false, "result": [], "gt": [["Smith"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT LName \nFROM Student \nWHERE StuID IN (\n  SELECT StuID \n  FROM Has_Pet \n  JOIN Pets ON Has_Pet.PetID = Pets.PetID \n  WHERE Pets.PetType = 'Cat' AND Pets.pet_age = 3);", "match": {"match": false, "result": [], "gt": [["Smith"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(Age) \nFROM Student \nWHERE StuID NOT IN (SELECT StuID FROM Has_Pet);", "match": {"match": true, "result": [[19.625]]}}
{"result": "SELECT AVG(Age) \nFROM Student \nWHERE StuID NOT IN (SELECT StuID FROM Has_Pet);", "match": {"match": true, "result": [[19.625]]}}
{"result": "SELECT COUNT(Employee_ID) FROM employee", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT COUNT(Employee_ID) FROM employee", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT Name FROM employee ORDER BY Age ASC", "match": {"match": true, "result": [["George Chuter"], ["Andrew Sheridan"], ["Lee Mears"], ["Tim Payne"], ["Matt Stevens"], ["Jason Hobson"], ["Steve Borthwick"], ["Louis Deacon"], ["Phil Vickery"], ["Mark Regan"]]}}
{"result": "SELECT Name FROM employee ORDER BY Age ASC", "match": {"match": true, "result": [["George Chuter"], ["Andrew Sheridan"], ["Lee Mears"], ["Tim Payne"], ["Matt Stevens"], ["Jason Hobson"], ["Steve Borthwick"], ["Louis Deacon"], ["Phil Vickery"], ["Mark Regan"]]}}
{"result": "SELECT City, COUNT(Employee_ID) AS NumberOfEmployees FROM employee GROUP BY City", "match": {"match": false, "result": [["Bath", 3], ["Bristol", 3], ["Leicester", 1], ["Sale", 1], ["Wasps", 2]], "gt": [[3, "Bath"], [3, "Bristol"], [1, "Leicester"], [1, "Sale"], [2, "Wasps"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT City, COUNT(*) FROM employee GROUP BY City", "match": {"match": false, "result": [["Bath", 3], ["Bristol", 3], ["Leicester", 1], ["Sale", 1], ["Wasps", 2]], "gt": [[3, "Bath"], [3, "Bristol"], [1, "Leicester"], [1, "Sale"], [2, "Wasps"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT City \nFROM employee \nWHERE Age < 30 \nGROUP BY City \nHAVING COUNT(Employee_ID) > 1", "match": {"match": true, "result": [["Bath"]]}}
{"result": "SELECT T1.City FROM employee AS T1\nINNER JOIN (\n  SELECT City, COUNT(*) as Count\n  FROM employee\n  WHERE Age < 30\n  GROUP BY City\n  HAVING COUNT(*) > 1\n) AS T2\nON T1.City = T2.City", "match": {"match": false, "result": [["Bath"], ["Bath"], ["Bath"]], "gt": [["Bath"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT LOCATION, COUNT(*) FROM shop GROUP BY LOCATION", "match": {"match": false, "result": [["Espoo", 1], ["Helsinki", 1], ["Jakobstad", 1], ["Kotka", 1], ["Kuopio", 1], ["Lahti", 1], ["Mariehamn", 1], ["Turku", 1], ["Valkeakoski", 1]], "gt": [[1, "Espoo"], [1, "Helsinki"], [1, "Jakobstad"], [1, "Kotka"], [1, "Kuopio"], [1, "Lahti"], [1, "Mariehamn"], [1, "Turku"], [1, "Valkeakoski"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Location, COUNT(*) FROM shop GROUP BY Location", "match": {"match": false, "result": [["Espoo", 1], ["Helsinki", 1], ["Jakobstad", 1], ["Kotka", 1], ["Kuopio", 1], ["Lahti", 1], ["Mariehamn", 1], ["Turku", 1], ["Valkeakoski", 1]], "gt": [[1, "Espoo"], [1, "Helsinki"], [1, "Jakobstad"], [1, "Kotka"], [1, "Kuopio"], [1, "Lahti"], [1, "Mariehamn"], [1, "Turku"], [1, "Valkeakoski"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Manager_name, T1.District \nFROM shop AS T1 \nJOIN ( SELECT Shop_ID, MAX(Number_products) AS max_products \n       FROM shop \n       GROUP BY Shop_ID ) AS T2 \nON T1.Shop_ID = T2.Shop_ID", "match": {"match": false, "result": [["Olli Huttunen", "Tehtaan kentt\u00e4"], ["Antti Muurinen", "Finnair Stadium"], ["Mika Lehkosuo", "Tapiolan Urheilupuisto"], ["Job Dragtsma", "Veritas Stadion"], ["Mika Laurikainen", "Jakobstads Centralplan"], ["Tommi Kautonen", "Arto Tolsa Areena"], ["Kai Nyyss\u00f6nen", "Magnum Areena"], ["Ilkka M\u00e4kel\u00e4", "Lahden Stadion"], ["Pekka Lyyski", "Wikl\u00f6f Holding Arena"]], "gt": [["Ilkka M\u00e4kel\u00e4", "Lahden Stadion"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Manager_name, T2.District \nFROM shop AS T1 \nJOIN employee AS T2 \nON T1.Manager_name = T2.Name \nWHERE T1.Number_products = (SELECT MAX(Number_products) FROM shop)", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Manager_name"}}
{"result": "SELECT MIN(Number_products) , MAX(Number_products) \nFROM shop", "match": {"match": true, "result": [[1600, 15000]]}}
{"result": "SELECT MIN(Number_products) , MAX(Number_products) FROM shop", "match": {"match": true, "result": [[1600, 15000]]}}
{"result": "SELECT Name, Location, District \nFROM shop \nORDER BY Number_products DESC", "match": {"match": true, "result": [["FC Lahti", "Lahti", "Lahden Stadion"], ["HJK", "Helsinki", "Finnair Stadium"], ["FC Inter", "Turku", "Veritas Stadion"], ["FC Honka", "Espoo", "Tapiolan Urheilupuisto"], ["FF Jaro", "Jakobstad", "Jakobstads Centralplan"], ["FC KooTeePee", "Kotka", "Arto Tolsa Areena"], ["FC Haka", "Valkeakoski", "Tehtaan kentt\u00e4"], ["KuPS", "Kuopio", "Magnum Areena"], ["IFK Mariehamn", "Mariehamn", "Wikl\u00f6f Holding Arena"]]}}
{"result": "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC", "match": {"match": true, "result": [["FC Lahti", "Lahti", "Lahden Stadion"], ["HJK", "Helsinki", "Finnair Stadium"], ["FC Inter", "Turku", "Veritas Stadion"], ["FC Honka", "Espoo", "Tapiolan Urheilupuisto"], ["FF Jaro", "Jakobstad", "Jakobstads Centralplan"], ["FC KooTeePee", "Kotka", "Arto Tolsa Areena"], ["FC Haka", "Valkeakoski", "Tehtaan kentt\u00e4"], ["KuPS", "Kuopio", "Magnum Areena"], ["IFK Mariehamn", "Mariehamn", "Wikl\u00f6f Holding Arena"]]}}
{"result": "SELECT Name \nFROM shop \nWHERE Number_products > (SELECT AVG(Number_products) FROM shop);", "match": {"match": true, "result": [["HJK"], ["FC Inter"], ["FC Lahti"]]}}
{"result": "SELECT Name \nFROM shop \nWHERE Number_products > (SELECT AVG(Number_products) FROM shop);", "match": {"match": true, "result": [["HJK"], ["FC Inter"], ["FC Lahti"]]}}
{"result": "SELECT e.Name \nFROM employee e \nINNER JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID \nGROUP BY ev.Employee_ID \nORDER BY COUNT(*) DESC \nLIMIT 1", "match": {"match": true, "result": [["George Chuter"]]}}
{"result": "SELECT T1.Name \nFROM employee AS T1 \nJOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID \nGROUP BY T1.Name \nORDER BY COUNT(T2.Employee_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [["George Chuter"]]}}
{"result": "SELECT T2.Name \nFROM evaluation AS T1 \nINNER JOIN employee AS T2 ON T1.Employee_ID = T2.Employee_ID \nWHERE T1.Bonus = ( SELECT MAX(Bonus) FROM evaluation WHERE Bonus < 10000 );", "match": {"match": true, "result": [["Louis Deacon"]]}}
{"result": "SELECT T2.Name \nFROM evaluation AS T1 \nJOIN employee AS T2 ON T1.`Employee_ID` = T2.`Employee_ID` \nWHERE T1.Bonus = (SELECT MAX(Bonus) FROM evaluation)", "match": {"match": true, "result": [["Louis Deacon"]]}}
{"result": "SELECT Name FROM employee \nWHERE Employee_ID NOT IN (\n  SELECT Employee_ID FROM evaluation\n);", "match": {"match": true, "result": [["Mark Regan"], ["Tim Payne"], ["Andrew Sheridan"], ["Phil Vickery"], ["Steve Borthwick"]]}}
{"result": "SELECT Name \nFROM employee \nWHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);", "match": {"match": true, "result": [["Mark Regan"], ["Tim Payne"], ["Andrew Sheridan"], ["Phil Vickery"], ["Steve Borthwick"]]}}
{"result": "SELECT T1.Name \nFROM shop AS T1 \nJOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID \nGROUP BY T2.Shop_ID \nORDER BY COUNT(T2.Employee_ID) DESC \nLIMIT 1;", "match": {"match": true, "result": [["FC Haka"]]}}
{"result": "SELECT T1.Name \nFROM shop AS T1 \nJOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID \nGROUP BY T1.Name \nORDER BY COUNT(T1.Name) DESC \nLIMIT 1", "match": {"match": true, "result": [["FC Haka"]]}}
{"result": "SELECT Name \nFROM shop \nWHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring);", "match": {"match": true, "result": [["FC Honka"], ["KuPS"], ["IFK Mariehamn"]]}}
{"result": "SELECT T2.Name FROM hiring AS T1 \nLEFT JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID \nWHERE T1.Shop_ID IS NULL", "match": {"match": false, "result": [], "gt": [["FC Honka"], ["KuPS"], ["IFK Mariehamn"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name, COUNT(*) \nFROM shop AS T1 \nINNER JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID \nGROUP BY T1.Shop_ID, T1.Name", "match": {"match": false, "result": [["FC Haka", 2], ["HJK", 1], ["FC Inter", 1], ["FF Jaro", 1], ["FC KooTeePee", 1], ["FC Lahti", 1]], "gt": [[2, "FC Haka"], [1, "FC Inter"], [1, "FC KooTeePee"], [1, "FC Lahti"], [1, "FF Jaro"], [1, "HJK"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name, COUNT(T2.Employee_ID) \nFROM shop AS T1 \nJOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID \nGROUP BY T1.Name", "match": {"match": false, "result": [["FC Haka", 2], ["FC Inter", 1], ["FC KooTeePee", 1], ["FC Lahti", 1], ["FF Jaro", 1], ["HJK", 1]], "gt": [[2, "FC Haka"], [1, "FC Inter"], [1, "FC KooTeePee"], [1, "FC Lahti"], [1, "FF Jaro"], [1, "HJK"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT SUM(Bonus) FROM evaluation", "match": {"match": true, "result": [[19500.0]]}}
{"result": "SELECT SUM(Bonus) FROM evaluation", "match": {"match": true, "result": [[19500.0]]}}
{"result": "SELECT * FROM `hiring`;", "match": {"match": true, "result": [[1, 1, "2009", "T"], [1, 2, "2003", "T"], [8, 3, "2011", "F"], [4, 4, "2012", "T"], [5, 5, "2013", "T"], [2, 6, "2010", "F"], [6, 7, "2008", "T"]]}}
{"result": "SELECT * FROM hiring", "match": {"match": true, "result": [[1, 1, "2009", "T"], [1, 2, "2003", "T"], [8, 3, "2011", "F"], [4, 4, "2012", "T"], [5, 5, "2013", "T"], [2, 6, "2010", "F"], [6, 7, "2008", "T"]]}}
{"result": "SELECT District \nFROM shop \nWHERE Number_products < 3000 AND Number_products > 10000", "match": {"match": true, "result": []}}
{"result": "SELECT T2.District \nFROM shop AS T1 \nJOIN shop AS T2 \nON T1.District = T2.District \nWHERE T1.Number_products < 3000 \nAND T2.Number_products > 10000", "match": {"match": true, "result": []}}
{"result": "SELECT COUNT(DISTINCT Location) FROM shop", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(DISTINCT Location) FROM shop", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(T1.Document_ID) FROM Documents AS T1", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(Document_ID) \nFROM Documents", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT Document_ID, Document_Name, Document_Description FROM Documents;", "match": {"match": true, "result": [[0, "Introduction of OS", "n"], [1, "Understanding DB", "y"], [3, "Summer Show", "u"], [76, "Robbin CV", "y"], [80, "Welcome to NY", "h"], [82, "Data base", "w"], [2394, "Customer reviews", "y"], [3830, "Do not panic", "k"], [33930, "How Google people work", "z"], [50123, "Learning French", "r"], [651512, "How to write a CV", "f"], [801801, "How to read a book", "w"], [3540024, "Palm reading", "y"], [16514113, "A history of Arts", "h"], [385906526, "About Korea", "b"]]}}
{"result": "SELECT Document_ID, Document_Name, Document_Description \nFROM Documents;", "match": {"match": true, "result": [[0, "Introduction of OS", "n"], [1, "Understanding DB", "y"], [3, "Summer Show", "u"], [76, "Robbin CV", "y"], [80, "Welcome to NY", "h"], [82, "Data base", "w"], [2394, "Customer reviews", "y"], [3830, "Do not panic", "k"], [33930, "How Google people work", "z"], [50123, "Learning French", "r"], [651512, "How to write a CV", "f"], [801801, "How to read a book", "w"], [3540024, "Palm reading", "y"], [16514113, "A history of Arts", "h"], [385906526, "About Korea", "b"]]}}
{"result": "SELECT Document_Name, Template_ID\nFROM Documents\nWHERE Document_Description LIKE '%w%';", "match": {"match": true, "result": [["Data base", 11], ["How to read a book", 4]]}}
{"result": "SELECT T1.Document_ID, T2.Document_Name \nFROM Documents T1 \nJOIN Paragraphs T3 ON T1.Document_ID = T3.Document_ID\nJOIN Documents T2 ON T1.Template_ID = T2.Template_ID\nWHERE T1.Document_Description LIKE '%w%';", "match": {"match": false, "result": [], "gt": [["Data base", 11], ["How to read a book", 4]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Document_ID, T3.Template_ID, T2.Document_Description\nFROM Documents T2\nINNER JOIN Templates T3 ON T2.Template_ID = T3.Template_ID\nWHERE T2.Document_Name = 'Robbin CV'", "match": {"match": true, "result": [[76, 20, "y"]]}}
{"result": "SELECT D.Document_ID, T.Template_ID, D.Document_Description\nFROM Documents D\nJOIN Templates T ON D.Template_ID = T.Template_ID\nWHERE D.Document_Name = 'Robbin CV';", "match": {"match": true, "result": [[76, 20, "y"]]}}
{"result": "SELECT COUNT(DISTINCT T2.Template_ID) \nFROM Documents D \nJOIN Templates T2 ON D.Template_ID = T2.Template_ID", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT COUNT(DISTINCT Template_ID) FROM Documents", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT COUNT(DISTINCT Document_ID) \nFROM Documents \nWHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT');", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(DISTINCT T1.Document_ID) \nFROM Documents T1 \nJOIN Templates T2 ON T1.Template_ID = T2.Template_ID \nJOIN Ref_Template_Types T3 ON T2.Template_Type_Code = T3.Template_Type_Code \nWHERE T3.Template_Type_Description = 'PPT';", "match": {"match": false, "result": [[0]], "gt": [[3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Template_ID, COUNT(T2.Document_ID) as Num_Documents \nFROM Templates T1 \nJOIN Documents T2 ON T1.Template_ID = T2.Template_ID \nGROUP BY T1.Template_ID", "match": {"match": true, "result": [[1, 1], [4, 1], [6, 1], [7, 1], [8, 1], [10, 1], [11, 2], [14, 2], [20, 1], [21, 1], [22, 1], [25, 2]]}}
{"result": "SELECT Template_ID, COUNT(Document_ID) AS Frequency\nFROM Documents\nGROUP BY Template_ID", "match": {"match": true, "result": [[1, 1], [4, 1], [6, 1], [7, 1], [8, 1], [10, 1], [11, 2], [14, 2], [20, 1], [21, 1], [22, 1], [25, 2]]}}
{"result": "SELECT T.Template_ID, RT.Template_Type_Code\nFROM Templates T\nJOIN Documents D ON T.Template_ID = D.Template_ID\nJOIN (\n  SELECT Template_ID, COUNT(Document_ID) as DocumentCount\n  FROM Documents\n  GROUP BY Template_ID\n) AS D2 ON D.Template_ID = D2.Template_ID\nJOIN (\n  SELECT Template_ID, MAX(DocumentCount) as MaxDocumentCount\n  FROM (\n    SELECT Template_ID, COUNT(Document_ID) as DocumentCount\n    FROM Documents\n    GROUP BY Template_ID\n  ) AS D3\n  GROUP BY MAX(DocumentCount)\n) AS D4 ON D2.DocumentCount = D4.MaxDocumentCount\nJOIN Ref_Template_Types RT ON T.Template_Type_Code = RT.Template_Type_Code", "match": {"match": false, "error": "Query execution failed with error: aggregate functions are not allowed in the GROUP BY clause"}}
{"result": "SELECT T.Template_Type_Code, COUNT(D.Template_ID) as Count\nFROM Templates T\nJOIN Documents D ON T.Template_ID = D.Template_ID\nGROUP BY T.Template_Type_Code\nORDER BY Count DESC\nLIMIT 1", "match": {"match": false, "result": [["BK", 5]], "gt": [[25, "PP"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.Template_ID \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID \nGROUP BY T.Template_ID \nHAVING COUNT(D.Template_ID) > 1", "match": {"match": true, "result": [[11], [14], [25]]}}
{"result": "SELECT T.Template_ID \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID \nGROUP BY T.Template_ID \nHAVING COUNT(D.Template_ID)  >  1", "match": {"match": true, "result": [[11], [14], [25]]}}
{"result": "SELECT T.Template_ID\nFROM Templates T\nLEFT JOIN Documents D ON T.Template_ID = D.Template_ID\nWHERE D.Document_ID IS NULL;", "match": {"match": true, "result": [[0], [9], [15], [16], [18], [19], [23], [24]]}}
{"result": "SELECT T.Template_ID \nFROM Templates T \nLEFT JOIN Documents D ON T.Template_ID = D.Template_ID \nWHERE D.Template_ID IS NULL", "match": {"match": true, "result": [[0], [9], [15], [16], [18], [19], [23], [24]]}}
{"result": "SELECT COUNT(Template_ID) FROM Templates", "match": {"match": true, "result": [[20]]}}
{"result": "SELECT COUNT(Template_ID) FROM Templates", "match": {"match": true, "result": [[20]]}}
{"result": "SELECT Template_ID, Version_Number, Template_Type_Code \nFROM Templates;", "match": {"match": true, "result": [[0, 5, "PP"], [1, 9, "PP"], [4, 4, "BK"], [6, 2, "PPT"], [7, 8, "PPT"], [8, 3, "BK"], [9, 2, "BK"], [10, 1, "PPT"], [11, 6, "BK"], [14, 7, "AD"], [15, 9, "CV"], [16, 5, "CV"], [18, 5, "PP"], [19, 7, "AD"], [20, 6, "BK"], [21, 9, "AD"], [22, 0, "PP"], [23, 2, "BK"], [24, 8, "PP"], [25, 5, "PP"]]}}
{"result": "```sql\nSELECT \n  Template_ID, \n  Version_Number, \n  Template_Type_Code\nFROM \n  Templates;\n```", "match": {"match": true, "result": [[0, 5, "PP"], [1, 9, "PP"], [4, 4, "BK"], [6, 2, "PPT"], [7, 8, "PPT"], [8, 3, "BK"], [9, 2, "BK"], [10, 1, "PPT"], [11, 6, "BK"], [14, 7, "AD"], [15, 9, "CV"], [16, 5, "CV"], [18, 5, "PP"], [19, 7, "AD"], [20, 6, "BK"], [21, 9, "AD"], [22, 0, "PP"], [23, 2, "BK"], [24, 8, "PP"], [25, 5, "PP"]]}}
{"result": "SELECT DISTINCT Template_Type_Code \nFROM Templates", "match": {"match": true, "result": [["PP"], ["BK"], ["PPT"], ["AD"], ["CV"]]}}
{"result": "SELECT DISTINCT Template_Type_Code \nFROM Ref_Template_Types", "match": {"match": false, "result": [["AD"], ["BK"], ["CV"], ["PP"], ["PPT"]], "gt": [["PP"], ["BK"], ["PPT"], ["AD"], ["CV"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Template_ID \nFROM Templates \nWHERE Template_Type_Code IN ('PP', 'PPT');", "match": {"match": true, "result": [[0], [1], [6], [7], [10], [18], [22], [24], [25]]}}
{"result": "SELECT Template_ID \nFROM Templates \nWHERE Template_Type_Code IN ('PP', 'PPT');", "match": {"match": true, "result": [[0], [1], [6], [7], [10], [18], [22], [24], [25]]}}
{"result": "SELECT COUNT(Template_ID) \nFROM Templates \nWHERE Template_Type_Code = 'CV';", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(Template_ID) \nFROM Templates \nWHERE Template_Type_Code = 'CV';", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT Version_Number, Template_Type_Code \nFROM Templates \nWHERE Version_Number > 5", "match": {"match": true, "result": [[9, "PP"], [8, "PPT"], [6, "BK"], [7, "AD"], [9, "CV"], [7, "AD"], [6, "BK"], [9, "AD"], [8, "PP"]]}}
{"result": "SELECT Version_Number, Template_Type_Code \nFROM Templates \nWHERE Version_Number > 5;", "match": {"match": true, "result": [[9, "PP"], [8, "PPT"], [6, "BK"], [7, "AD"], [9, "CV"], [7, "AD"], [6, "BK"], [9, "AD"], [8, "PP"]]}}
{"result": "SELECT \n  Template_Type_Code, \n  COUNT(Template_ID) as Number_Of_Templates \nFROM \n  Templates \nGROUP BY \n  Template_Type_Code;", "match": {"match": true, "result": [["AD", 3], ["BK", 6], ["CV", 2], ["PP", 6], ["PPT", 3]]}}
{"result": "SELECT Template_Type_Code, COUNT(Template_ID) as Total_Templates \nFROM Templates \nGROUP BY Template_Type_Code", "match": {"match": true, "result": [["AD", 3], ["BK", 6], ["CV", 2], ["PP", 6], ["PPT", 3]]}}
{"result": "SELECT Template_Type_Code, COUNT(DISTINCT Template_ID) as Count\nFROM Templates\nGROUP BY Template_Type_Code\nORDER BY Count DESC\nLIMIT 1", "match": {"match": false, "result": [["PP", 6]], "gt": [["PP"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    Template_Type_Code\nFROM \n    (\n        SELECT \n            Template_Type_Code, COUNT(*) as Count\n        FROM \n            Templates\n        GROUP BY \n            Template_Type_Code\n    ) T\nWHERE \n    Count = (\n        SELECT \n            MAX(Count)\n        FROM \n            (\n                SELECT \n                    Template_Type_Code, COUNT(*) as Count\n                FROM \n                    Templates\n                GROUP BY \n                    Template_Type_Code\n            ) T\n    )", "match": {"match": false, "result": [["BK"], ["PP"]], "gt": [["PP"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T.Template_Type_Code \nFROM Templates T \nJOIN Ref_Template_Types RT ON T.Template_Type_Code = RT.Template_Type_Code \nGROUP BY T.Template_Type_Code \nHAVING COUNT(T.Template_ID) < 3", "match": {"match": true, "result": [["CV"]]}}
{"result": "SELECT \n    T1.Template_Type_Code\nFROM \n    Ref_Template_Types AS T1\nJOIN \n    Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code\nGROUP BY \n    T1.Template_Type_Code\nHAVING \n    COUNT(T2.Template_ID) < 3;", "match": {"match": true, "result": [["CV"]]}}
{"result": "SELECT MIN(Version_Number), Template_Type_Code \nFROM Templates;", "match": {"match": true, "result": [[0, "PP"]]}}
{"result": "SELECT T1.Template_Type_Code, MIN(T2.Version_Number) \nFROM Ref_Template_Types T1 \nINNER JOIN Templates T2 ON T1.Template_Type_Code = T2.Template_Type_Code;", "match": {"match": false, "result": [["PP", 0]], "gt": [[0, "PP"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.Template_Type_Code \nFROM Templates T \nINNER JOIN Documents D ON T.Template_ID = D.Template_ID \nWHERE D.Document_Name = 'Data base';", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT T.Template_Type_Code \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID \nWHERE D.Document_Name = 'Data base'", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT D.Document_Name \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID \nJOIN Ref_Template_Types RT ON T.Template_Type_Code = RT.Template_Type_Code \nWHERE RT.Template_Type_Code = 'BK';", "match": {"match": true, "result": [["Robbin CV"], ["Data base"], ["How to read a book"], ["Palm reading"], ["About Korea"]]}}
{"result": "SELECT DISTINCT T1.Document_Name \nFROM Documents T1 \nINNER JOIN Templates T2 ON T1.Template_ID = T2.Template_ID \nWHERE T2.Template_Type_Code = 'BK'", "match": {"match": true, "result": [["Robbin CV"], ["Data base"], ["How to read a book"], ["Palm reading"], ["About Korea"]]}}
{"result": "SELECT \n    rt.Template_Type_Code, \n    COUNT(d.Document_ID) as Document_Count\nFROM \n    Ref_Template_Types rt\nJOIN \n    Templates t ON rt.Template_Type_Code = t.Template_Type_Code\nJOIN \n    Documents d ON t.Template_ID = d.Template_ID\nGROUP BY \n    rt.Template_Type_Code", "match": {"match": true, "result": [["AD", 3], ["BK", 5], ["PP", 4], ["PPT", 3]]}}
{"result": "SELECT T1.Template_Type_Code, COUNT(T3.Document_ID) \nFROM Ref_Template_Types AS T1 \nLEFT JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code \nLEFT JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID \nGROUP BY T1.Template_Type_Code", "match": {"match": false, "result": [["AD", 3], ["BK", 5], ["CV", 0], ["PP", 4], ["PPT", 3]], "gt": [["AD", 3], ["BK", 5], ["PP", 4], ["PPT", 3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n  t.Template_Type_Code, \n  COUNT(DISTINCT d.Document_ID) AS document_count\nFROM \n  Templates t\n  JOIN Documents d ON t.Template_ID = d.Template_ID\nGROUP BY \n  t.Template_Type_Code\nORDER BY \n  document_count DESC\nLIMIT 1;", "match": {"match": false, "result": [["BK", 5]], "gt": [["BK"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Template_Type_Code\nFROM Ref_Template_Types AS T1\nJOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code\nJOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID\nGROUP BY T1.Template_Type_Code\nORDER BY COUNT(T3.Document_ID) DESC\nLIMIT 1", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT Template_Type_Code \nFROM Ref_Template_Types \nWHERE Template_Type_Code NOT IN (\n  SELECT T.Template_Type_Code \n  FROM Templates T \n  JOIN Documents D ON T.Template_ID = D.Template_ID\n);", "match": {"match": true, "result": [["CV"]]}}
{"result": "SELECT Template_Type_Code \nFROM Ref_Template_Types \nWHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Documents);", "match": {"match": false, "result": [], "gt": [["CV"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Template_Type_Code, Template_Type_Description \nFROM Ref_Template_Types;", "match": {"match": true, "result": [["PPT", "Presentation"], ["CV", "CV"], ["AD", "Advertisement"], ["PP", "Paper"], ["BK", "Book"]]}}
{"result": "SELECT Template_Type_Code, Template_Type_Description \nFROM Ref_Template_Types;", "match": {"match": true, "result": [["PPT", "Presentation"], ["CV", "CV"], ["AD", "Advertisement"], ["PP", "Paper"], ["BK", "Book"]]}}
{"result": "SELECT Template_Type_Description \nFROM Ref_Template_Types \nWHERE Template_Type_Code = 'AD';", "match": {"match": true, "result": [["Advertisement"]]}}
{"result": "SELECT Template_Type_Description \nFROM Ref_Template_Types \nWHERE Template_Type_Code = 'AD';", "match": {"match": true, "result": [["Advertisement"]]}}
{"result": "SELECT Template_Type_Code\nFROM Ref_Template_Types\nWHERE Template_Type_Description = 'Book'", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT Template_Type_Code \nFROM Ref_Template_Types \nWHERE Template_Type_Description = 'Book';", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT DISTINCT TTT.Template_Type_Description \nFROM Ref_Template_Types TTT \nJOIN Templates TT ON TTT.Template_Type_Code = TT.Template_Type_Code \nJOIN Documents D ON TT.Template_ID = D.Template_ID", "match": {"match": true, "result": [["Presentation"], ["Paper"], ["Book"], ["Advertisement"]]}}
{"result": "SELECT DISTINCT T.Template_Type_Description \nFROM Templates T\nJOIN Documents D ON T.Template_ID = D.Template_ID", "match": {"match": false, "error": "Query execution failed with error: no such column: T.Template_Type_Description"}}
{"result": "SELECT T.Template_ID \nFROM Templates T \nJOIN Ref_Template_Types TT ON T.Template_Type_Code = TT.Template_Type_Code \nWHERE TT.Template_Type_Description = 'Presentation';", "match": {"match": true, "result": [[6], [7], [10]]}}
{"result": "SELECT T.TEMPLATE_ID \nFROM Templates T \nJOIN Ref_Template_Types RT ON T.Template_Type_Code = RT.Template_Type_Code \nWHERE RT.Template_Type_Description = 'Presentation';", "match": {"match": true, "result": [[6], [7], [10]]}}
{"result": "SELECT COUNT(Paragraph_ID) FROM Paragraphs", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) FROM Paragraphs", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(Paragraph_ID) \nFROM Paragraphs \nWHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show');", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(*) \nFROM Paragraphs p \nJOIN Documents d ON p.Document_ID = d.Document_ID \nWHERE d.Document_Name = 'Summer Show';", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT Paragraph_ID, Paragraph_Text, Other_Details\nFROM Paragraphs\nWHERE Paragraph_Text = 'Korea ';", "match": {"match": false, "result": [], "gt": [[null], [null]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Template_Details, T2.Paragraph_Text \nFROM Templates T1 \nJOIN Documents T2 ON T1.Template_ID = T2.Template_ID \nJOIN Paragraphs T3 ON T2.Document_ID = T3.Document_ID \nWHERE T3.Paragraph_Text LIKE '%Korea%';", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Paragraph_Text"}}
{"result": "SELECT Paragraph_ID, Paragraph_Text \nFROM Paragraphs \nJOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID \nWHERE Documents.Document_Name = 'Welcome to NY';", "match": {"match": true, "result": [[16615, "Japan"], [608931827, "Micronesia"]]}}
{"result": "SELECT P.Paragraph_ID, P.Paragraph_Text \nFROM Paragraphs P \nJOIN Documents D ON P.Document_ID = D.Document_ID \nWHERE D.Document_Name = 'Welcome to NY';", "match": {"match": true, "result": [[16615, "Japan"], [608931827, "Micronesia"]]}}
{"result": "SELECT P.Paragraph_Text \nFROM Paragraphs P \nJOIN Documents D ON P.Document_ID = D.Document_ID \nWHERE D.Document_Name = 'Customer reviews'", "match": {"match": true, "result": [["Korea"], ["Ukraine"], ["Korea"]]}}
{"result": "SELECT Paragraph_Text \nFROM Paragraphs \nJOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID \nWHERE Documents.Document_Name = 'Customer reviews';", "match": {"match": true, "result": [["Korea"], ["Ukraine"], ["Korea"]]}}
{"result": "SELECT Document_ID, COUNT(Paragraph_ID) AS NumberOfParagraphs\nFROM Paragraphs\nGROUP BY Document_ID\nORDER BY Document_ID;", "match": {"match": true, "result": [[3, 1], [80, 2], [2394, 3], [3830, 1], [33930, 1], [50123, 1], [651512, 2], [3540024, 1], [16514113, 2], [385906526, 1]]}}
{"result": "SELECT Document_ID, COUNT(*) \nFROM Paragraphs \nGROUP BY Document_ID \nORDER BY Document_ID", "match": {"match": true, "result": [[3, 1], [80, 2], [2394, 3], [3830, 1], [33930, 1], [50123, 1], [651512, 2], [3540024, 1], [16514113, 2], [385906526, 1]]}}
{"result": "SELECT \n    D.Document_ID, \n    D.Document_Name, \n    COUNT(P.Paragraph_ID) AS Number_of_Paragraphs\nFROM \n    Documents D\nLEFT JOIN \n    Paragraphs P ON D.Document_ID = P.Document_ID\nGROUP BY \n    D.Document_ID, D.Document_Name", "match": {"match": false, "result": [[0, "Introduction of OS", 0], [1, "Understanding DB", 0], [3, "Summer Show", 1], [76, "Robbin CV", 0], [80, "Welcome to NY", 2], [82, "Data base", 0], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [801801, "How to read a book", 0], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "gt": [[3, "Summer Show", 1], [80, "Welcome to NY", 2], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    D.Document_ID, \n    D.Document_Name, \n    COUNT(P.Paragraph_ID) AS Number_Of_Paragraphs\nFROM \n    Documents D \nLEFT JOIN \n    Paragraphs P ON D.Document_ID = P.Document_ID\nGROUP BY \n    D.Document_ID, \n    D.Document_Name;", "match": {"match": false, "result": [[0, "Introduction of OS", 0], [1, "Understanding DB", 0], [3, "Summer Show", 1], [76, "Robbin CV", 0], [80, "Welcome to NY", 2], [82, "Data base", 0], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [801801, "How to read a book", 0], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "gt": [[3, "Summer Show", 1], [80, "Welcome to NY", 2], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Document_ID \nFROM Paragraphs \nGROUP BY Document_ID \nHAVING COUNT(Parcel_ID) >= 2", "match": {"match": false, "error": "Query execution failed with error: no such column: Parcel_ID"}}
{"result": "SELECT DISTINCT T1.Document_ID\nFROM Documents AS T1\nJOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID\nGROUP BY T1.Document_ID\nHAVING COUNT(T2.Paragraph_ID) >= 2", "match": {"match": true, "result": [[80], [2394], [651512], [16514113]]}}
{"result": "SELECT \n  D.Document_ID, \n  D.Document_Name, \n  COUNT(P.Paragraph_ID) AS paragraph_count\nFROM \n  Documents D\n  JOIN Paragraphs P ON D.Document_ID = P.Document_ID\nGROUP BY \n  D.Document_ID, \n  D.Document_Name\nORDER BY \n  paragraph_count DESC\nLIMIT 1;", "match": {"match": false, "result": [[2394, "Customer reviews", 3]], "gt": [[2394, "Customer reviews"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Document_ID, T2.Document_Name\nFROM Paragraphs AS T1\nJOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID\nGROUP BY T2.Document_ID, T2.Document_Name\nORDER BY COUNT(T1.Paragraph_ID) DESC\nLIMIT 1;", "match": {"match": true, "result": [[2394, "Customer reviews"]]}}
{"result": "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(Document_ID) ASC LIMIT 1", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT T1.Document_ID \nFROM Documents T1 \nJOIN Paragraphs T2 ON T1.Document_ID = T2.Document_ID \nGROUP BY T1.Document_ID \nORDER BY COUNT(T2.Paragraph_ID) ASC \nLIMIT 1", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT \n    T1.Document_ID \nFROM \n    Paragraphs AS T1 \nGROUP BY \n    T1.Document_ID \nHAVING \n    COUNT(T1.Paragraph_ID) BETWEEN 1 AND 2", "match": {"match": true, "result": [[3], [80], [3830], [33930], [50123], [651512], [3540024], [16514113], [385906526]]}}
{"result": "SELECT Document_ID\nFROM Paragraphs\nGROUP BY Document_ID\nHAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2", "match": {"match": true, "result": [[3], [80], [3830], [33930], [50123], [651512], [3540024], [16514113], [385906526]]}}
{"result": "SELECT Document_ID \nFROM Paragraphs \nWHERE Paragraph_Text IN ('Brazil', 'Ireland');", "match": {"match": false, "result": [[16514113], [16514113]], "gt": [[16514113]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Document_ID \nFROM Paragraphs \nWHERE Paragraph_Text = 'Brazil' \nINTERSECT \nSELECT Document_ID \nFROM Paragraphs \nWHERE Paragraph_Text = 'Ireland';", "match": {"match": true, "result": [[16514113]]}}
{"result": "SELECT COUNT(Teacher_ID) FROM teacher", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT COUNT(Teacher_ID) FROM teacher", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT Name \nFROM teacher \nORDER BY Age ASC", "match": {"match": true, "result": [["Vicente Carretero"], ["Gustaaf Deloor"], ["Joseph Huts"], ["John Deloor"], ["Lucy Wong"], ["Anne Walker"], ["Kearsley Brown"]]}}
{"result": "SELECT Name FROM teacher ORDER BY Age ASC", "match": {"match": true, "result": [["Vicente Carretero"], ["Gustaaf Deloor"], ["Joseph Huts"], ["John Deloor"], ["Lucy Wong"], ["Anne Walker"], ["Kearsley Brown"]]}}
{"result": "SELECT `Age`, `Hometown` FROM `teacher`", "match": {"match": true, "result": [["32", "Blackrod Urban District"], ["29", "Bolton County Borough"], ["26", "Farnworth Municipal Borough"], ["33", "Horwich Urban District"], ["45", "Kearsley Urban District"], ["41", "Little Lever Urban District"], ["39", "Turton Urban District"]]}}
{"result": "SELECT `Age`, `Hometown` FROM `teacher`", "match": {"match": true, "result": [["32", "Blackrod Urban District"], ["29", "Bolton County Borough"], ["26", "Farnworth Municipal Borough"], ["33", "Horwich Urban District"], ["45", "Kearsley Urban District"], ["41", "Little Lever Urban District"], ["39", "Turton Urban District"]]}}
{"result": "SELECT Name \nFROM teacher \nWHERE Hometown != 'Little Lever Urban District';", "match": {"match": false, "result": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Lucy Wong"]], "gt": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Anne Walker"], ["Lucy Wong"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name \nFROM teacher \nWHERE Hometown != 'Little Lever Urban District'", "match": {"match": false, "result": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Lucy Wong"]], "gt": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Anne Walker"], ["Lucy Wong"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name \nFROM teacher \nWHERE Age = '32' OR Age = '33'", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT Name FROM teacher WHERE Age = '32' OR Age = '33'", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)", "match": {"match": true, "result": [["Farnworth Municipal Borough"]]}}
{"result": "SELECT Hometown FROM teacher WHERE Age = ( SELECT MIN(Age) FROM teacher );", "match": {"match": true, "result": [["Farnworth Municipal Borough"]]}}
{"result": "SELECT Hometown, COUNT(Teacher_ID) FROM teacher GROUP BY Hometown", "match": {"match": true, "result": [["Blackrod Urban District", 1], ["Bolton County Borough", 1], ["Farnworth Municipal Borough", 1], ["Horwich Urban District", 1], ["Kearsley Urban District", 1], ["Little Lever Urban District", 1], ["Turton Urban District", 1]]}}
{"result": "SELECT COUNT(Teacher_ID) , Hometown FROM teacher GROUP BY Hometown", "match": {"match": false, "result": [[1, "Blackrod Urban District"], [1, "Bolton County Borough"], [1, "Farnworth Municipal Borough"], [1, "Horwich Urban District"], [1, "Kearsley Urban District"], [1, "Little Lever Urban District"], [1, "Turton Urban District"]], "gt": [["Blackrod Urban District", 1], ["Bolton County Borough", 1], ["Farnworth Municipal Borough", 1], ["Horwich Urban District", 1], ["Kearsley Urban District", 1], ["Little Lever Urban District", 1], ["Turton Urban District", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(Teacher_ID) DESC LIMIT 1", "match": {"match": true, "result": [["Turton Urban District"]]}}
{"result": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(Hometown) DESC LIMIT 1", "match": {"match": true, "result": [["Turton Urban District"]]}}
{"result": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Name)  >= 2", "match": {"match": true, "result": []}}
{"result": "SELECT Hometown \nFROM teacher \nGROUP BY Hometown \nHAVING COUNT(Teacher_ID) >= 2", "match": {"match": true, "result": []}}
{"result": "SELECT T1.Name, T2.Course \nFROM teacher AS T1 \nJOIN course_arrange AS T3 ON T1.Teacher_ID = T3.Teacher_ID \nJOIN course AS T2 ON T2.Course_ID = T3.Course_ID", "match": {"match": true, "result": [["Kearsley Brown", "Math"], ["Vicente Carretero", "Math"], ["Gustaaf Deloor", "Science"], ["Anne Walker", "History"], ["Anne Walker", "Bible"], ["Lucy Wong", "Music"]]}}
{"result": "SELECT T1.Name, T2.Course \nFROM teacher AS T1 \nJOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nJOIN course AS T3 ON T2.Course_ID = T3.Course_ID", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Course"}}
{"result": "SELECT DISTINCT T2.Name, T1.Course \nFROM course_arrange AS T1 \nJOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nORDER BY T2.Name ASC", "match": {"match": false, "error": "Query execution failed with error: no such column: T1.Course"}}
{"result": "SELECT teacher.name, course.`Course` \nFROM course_arrange \nJOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID \nJOIN course ON course_arrange.Course_ID = course.Course_ID \nORDER BY teacher.name ASC;", "match": {"match": true, "result": [["Anne Walker", "History"], ["Anne Walker", "Bible"], ["Gustaaf Deloor", "Science"], ["Kearsley Brown", "Math"], ["Lucy Wong", "Music"], ["Vicente Carretero", "Math"]]}}
{"result": "SELECT t.Name \nFROM course c \nJOIN course_arrange ca ON c.Course_ID = ca.Course_ID \nJOIN teacher t ON ca.Teacher_ID = t.Teacher_ID \nJOIN ( SELECT Course_ID FROM course WHERE Course = 'Math' ) m ON c.Course_ID = m.Course_ID;", "match": {"match": true, "result": [["Kearsley Brown"], ["Vicente Carretero"]]}}
{"result": "SELECT T2.Name \nFROM course_arrange AS T1 \nJOIN course AS T2 ON T1.Course_ID = T2.Course_ID \nJOIN teacher AS T3 ON T1_teacher_ID = T3.Teacher_ID \nWHERE T2.Course = 'Math'", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Name"}}
{"result": "SELECT T1.Name, COUNT(T2.Course_ID) as Course_Num \nFROM teacher T1 \nJOIN course_arrange T2 ON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T1.Name;", "match": {"match": true, "result": [["Anne Walker", 2], ["Gustaaf Deloor", 1], ["Kearsley Brown", 1], ["Lucy Wong", 1], ["Vicente Carretero", 1]]}}
{"result": "SELECT T1.Name, COUNT(T2.Course_ID) \nFROM teacher AS T1 \nJOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T1.Name", "match": {"match": true, "result": [["Anne Walker", 2], ["Gustaaf Deloor", 1], ["Kearsley Brown", 1], ["Lucy Wong", 1], ["Vicente Carretero", 1]]}}
{"result": "SELECT t.Name \nFROM teacher t \nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID \nGROUP BY t.Name \nHAVING COUNT(ca.Course_ID) >= 2", "match": {"match": true, "result": [["Anne Walker"]]}}
{"result": "SELECT T2.Name \nFROM course_arrange AS T1 \nJOIN teacher AS T2 \nON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T2.Name \nHAVING COUNT(T2.Name) >= 2", "match": {"match": true, "result": [["Anne Walker"]]}}
{"result": "SELECT Name \nFROM teacher \nWHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange);", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT Name \nFROM teacher \nWHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange);", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT COUNT(*) \nFROM visitor \nWHERE Age < 30;", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC", "match": {"match": true, "result": [["Gonzalo Higua\u00edn "], ["Fernando Gago"], ["Guti Midfielder"]]}}
{"result": "SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4;", "match": {"match": true, "result": [[36.0]]}}
{"result": "SELECT Name, Level_of_membership \nFROM visitor \nWHERE Level_of_membership > 4 \nORDER BY Age DESC", "match": {"match": true, "result": [["Fernando Gago", 6], ["Gonzalo Higua\u00edn ", 8], ["Guti Midfielder", 5]]}}
{"result": "SELECT Museum_ID, Name \nFROM museum \nORDER BY Num_of_Staff DESC \nLIMIT 1;", "match": {"match": true, "result": [[1, "Plaza Museum"]]}}
{"result": "SELECT AVG(`Num_of_Staff`) \nFROM `museum` \nWHERE `Open_Year` < '2009';", "match": {"match": true, "result": [[31.333333333333332]]}}
{"result": "SELECT Open_Year, Num_of_Staff \nFROM museum \nWHERE Name = 'Plaza Museum';", "match": {"match": false, "result": [["2000", 62]], "gt": [[62, "2000"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name \nFROM museum \nWHERE Num_of_Staff > ( SELECT MIN(Num_of_Staff) \n                      FROM museum \n                      WHERE Open_Year > '2010' );", "match": {"match": true, "result": [["Plaza Museum"], ["Capital Plaza Museum"], ["Jefferson Development Museum"]]}}
{"result": "SELECT T1.ID, T1.Name, T1.Age \nFROM visitor AS T1 \nJOIN visit AS T2 ON T1.ID = T2.visitor_ID \nGROUP BY T1.ID, T1.Name, T1.Age \nHAVING COUNT(T2.Museum_ID) > 1;", "match": {"match": true, "result": [[3, "Arjen Robben", 27], [5, "Fernando Gago", 36], [6, "Rafael van der Vaart", 25]]}}
{"result": "SELECT T1.ID, T1.Name, T1.Level_of_membership \nFROM visitor AS T1 \nJOIN visit AS T2 ON T1.ID = T2.visitor_ID \nGROUP BY T1.ID \nORDER BY T2.Total_spent DESC \nLIMIT 1", "match": {"match": false, "result": [[3, "Arjen Robben", 1]], "gt": [["3", "Arjen Robben", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT M.`Museum_ID`, M.`Name` \nFROM museum M \nJOIN visit V ON M.`Museum_ID` = V.`Museum_ID` \nGROUP BY M.`Museum_ID` \nORDER BY COUNT(V.`Museum_ID`) DESC \nLIMIT 1;", "match": {"match": true, "result": [[2, "Capital Plaza Museum"]]}}
{"result": "SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit);", "match": {"match": true, "result": [["Jefferson Development Museum"], ["RiverPark Museum"], ["Place Tower Museum"], ["Central City District Residential Museum"]]}}
{"result": "SELECT T1.Name, T1.Age \nFROM visitor AS T1 \nJOIN visit AS T2 ON T1.ID = T2.visitor_ID \nORDER BY T2.Num_of_Ticket DESC \nLIMIT 1;", "match": {"match": true, "result": [["Arjen Robben", 27]]}}
{"result": "SELECT AVG(Num_of_Ticket) as average_tickets, MAX(Num_of_Ticket) as max_tickets \nFROM visit", "match": {"match": true, "result": [[10.5, 24]]}}
{"result": "SELECT SUM(T2.Total_spent) \nFROM visitor AS T1 \nJOIN visit AS T2 ON T1.ID = T2.visitor_ID \nWHERE T1.Level_of_membership = 1", "match": {"match": true, "result": [[570.84]]}}
{"result": "SELECT Name \nFROM visit AS v1 \nJOIN visit AS v2 \nON v1.visitor_ID = v2.visitor_ID \nJOIN museum AS m1 \nON v1.Museum_ID = m1.Museum_ID \nJOIN museum AS m2 \nON v2.Museum_ID = m2.Museum_ID \nWHERE m1.Open_Year < '2009' \nAND m2.Open_Year > '2011'", "match": {"match": false, "error": "Query execution failed with error: ambiguous column name: Name"}}
{"result": "SELECT COUNT(visited.visitor_ID) \nFROM visit visited\nWHERE visited.Museum_ID NOT IN (\n  SELECT museum.Museum_ID \n  FROM museum \n  WHERE STRFTIME('%Y', Open_Year) > '2010'\n)", "match": {"match": false, "result": [[6]], "gt": [[3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(Museum_ID) \nFROM museum \nWHERE Open_Year > '2013' OR Open_Year < '2008';", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(name) \nFROM ship \nWHERE disposition_of_ship = 'Captured';", "match": {"match": true, "result": [[4]]}}
{"result": "SELECT name, tonnage FROM ship ORDER BY name DESC", "match": {"match": true, "result": [["Three Brothers", "t"], ["Mary", "t"], ["Lettice", "t"], ["HMS Avon", "391"], ["HMS Atalanta", "225"], ["Bon Accord", "t"], ["Bacchus", "t"]]}}
{"result": "SELECT name, date, result FROM battle", "match": {"match": false, "result": [["Battle of Adrianople", "14 April 1205", "Bulgarian victory"], ["Battle of Serres", "June 1205", "Bulgarian victory"], ["Battle of Rusion", "31 January 1206", "Bulgarian victory"], ["Battle of Rodosto", "February 1206", "Bulgarian victory"], ["Battle of Messinopolis", "4 September 1207", "Bulgarian victory"], ["Battle of Boruy", "June 1205", "Bulgarian victory"], ["Battle of Philippopolis", "31 June 1208", "Latin victory"], ["Siege of Constantinople", "1235", "Two Year Truce"]], "gt": [["Battle of Adrianople", "14 April 1205"], ["Battle of Serres", "June 1205"], ["Battle of Rusion", "31 January 1206"], ["Battle of Rodosto", "February 1206"], ["Battle of Messinopolis", "4 September 1207"], ["Battle of Boruy", "June 1205"], ["Battle of Philippopolis", "31 June 1208"], ["Siege of Constantinople", "1235"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT min(killed), max(killed) FROM death", "match": {"match": false, "result": [[0, 29]], "gt": [[29, 0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(injured) FROM death", "match": {"match": true, "result": [[1.0769230769230769]]}}
{"result": "SELECT killed, injured FROM death WHERE caused_by_ship_id IN (\n  SELECT id FROM ship WHERE tonnage = 't'\n);", "match": {"match": true, "result": [[8, 0], [3, 0], [25, 0], [2, 0], [0, 0], [4, 5], [0, 0], [29, 0], [0, 0], [0, 0], [14, 0]]}}
{"result": "SELECT T1.name, T1.result \nFROM battle AS T1 \nWHERE T1.bulgarian_commander != 'Boril'", "match": {"match": true, "result": [["Battle of Adrianople", "Bulgarian victory"], ["Battle of Serres", "Bulgarian victory"], ["Battle of Rusion", "Bulgarian victory"], ["Battle of Rodosto", "Bulgarian victory"], ["Battle of Messinopolis", "Bulgarian victory"], ["Siege of Constantinople", "Two Year Truce"]]}}
{"result": "SELECT DISTINCT T2.id, T2.name \nFROM ship AS T1 \nJOIN battle AS T2 ON T1.lost_in_battle = T2.id \nWHERE T1.ship_type = 'Brig'", "match": {"match": true, "result": [[8, "Siege of Constantinople"], [7, "Battle of Philippopolis"], [6, "Battle of Boruy"], [5, "Battle of Messinopolis"], [4, "Battle of Rodosto"]]}}
{"result": "SELECT T1.id, T1.name \nFROM battle AS T1 \nJOIN death AS T2 ON T1.id = T2.caused_by_ship_id \nGROUP BY T1.id \nHAVING SUM(T2.killed) > 10", "match": {"match": false, "result": [[1, "Battle of Adrianople"], [3, "Battle of Rusion"], [5, "Battle of Messinopolis"]], "gt": [[5, "Battle of Messinopolis"], [6, "Battle of Boruy"], [8, "Siege of Constantinople"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.id, T1.name, SUM(T2.injured) AS total_injured\nFROM ship AS T1\nJOIN death AS T2 ON T1.id = T2.caused_by_ship_id\nGROUP BY T1.id, T1.name\nORDER BY total_injured DESC\nLIMIT 1;", "match": {"match": false, "result": [[4, "HMS Avon", 9]], "gt": [[5, "Three Brothers"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'", "match": {"match": true, "result": [["Battle of Adrianople"]]}}
{"result": "SELECT COUNT(DISTINCT result) FROM battle", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(*) \nFROM battle \nWHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225');", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT T2.date, T2.name \nFROM ship AS T1 \nJOIN battle AS T2 ON T1.lost_in_battle = T2.id \nWHERE T1.name = 'Lettice' OR T1.name = 'HMS Atalanta'", "match": {"match": false, "result": [["1235", "Siege of Constantinople"], ["1235", "Siege of Constantinople"]], "gt": [["Siege of Constantinople", "1235"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.name, T1.result, T1.bulgarian_commander \nFROM battle AS T1 \nLEFT JOIN ship AS T2 ON T1.id = T2.lost_in_battle \nWHERE T2.location != 'English Channel'", "match": {"match": false, "result": [["Battle of Messinopolis", "Bulgarian victory", "Unknown"], ["Siege of Constantinople", "Two Year Truce", "Ivan Asen II"]], "gt": [["Battle of Adrianople", "Bulgarian victory", "Kaloyan"], ["Battle of Rusion", "Bulgarian victory", "Kaloyan"], ["Battle of Serres", "Bulgarian victory", "Kaloyan"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT note FROM death WHERE note LIKE '%East%'", "match": {"match": true, "result": [["East Champaran, Bihar"]]}}
{"result": "SELECT line_1, line_2 FROM Addresses", "match": {"match": true, "result": [["2294 Grant Square Apt. 235", "Apt. 370"], ["3999 Aufderhar Ways Suite 593", "Apt. 388"], ["67942 Carlotta Ferry Apt. 686", "Apt. 583"], ["0144 Lamar Plaza Apt. 346", "Suite 703"], ["858 Peggie Bypass Suite 212", "Apt. 335"], ["16998 Mraz Lodge", "Apt. 689"], ["193 Marlin Brook", "Apt. 406"], ["202 Hessel Views Apt. 468", "Apt. 305"], ["0643 Muller Vista", "Suite 383"], ["7081 Eda Center", "Suite 830"], ["9283 Schulist Falls Apt. 037", "Suite 239"], ["979 Haag Shores Suite 656", "Apt. 468"], ["492 Wilkinson Route", "Suite 865"], ["186 Evan Motorway Apt. 409", "Suite 079"], ["74046 Metz Walk Apt. 113", "Suite 674"]]}}
{"result": "SELECT line_1, line_2 FROM Addresses", "match": {"match": true, "result": [["2294 Grant Square Apt. 235", "Apt. 370"], ["3999 Aufderhar Ways Suite 593", "Apt. 388"], ["67942 Carlotta Ferry Apt. 686", "Apt. 583"], ["0144 Lamar Plaza Apt. 346", "Suite 703"], ["858 Peggie Bypass Suite 212", "Apt. 335"], ["16998 Mraz Lodge", "Apt. 689"], ["193 Marlin Brook", "Apt. 406"], ["202 Hessel Views Apt. 468", "Apt. 305"], ["0643 Muller Vista", "Suite 383"], ["7081 Eda Center", "Suite 830"], ["9283 Schulist Falls Apt. 037", "Suite 239"], ["979 Haag Shores Suite 656", "Apt. 468"], ["492 Wilkinson Route", "Suite 865"], ["186 Evan Motorway Apt. 409", "Suite 079"], ["74046 Metz Walk Apt. 113", "Suite 674"]]}}
{"result": "SELECT COUNT(*) FROM Courses", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) FROM Courses", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT T1.course_description \nFROM Courses AS T1 \nWHERE T1.course_name = 'Math Course';", "match": {"match": false, "result": [], "gt": [["q"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.course_description \nFROM Sections AS T1 \nJOIN Courses AS T2 ON T1.course_id = T2.course_id \nWHERE T1.section_name LIKE 'Math%';", "match": {"match": false, "result": [], "gt": [["q"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT `zip_postcode` \nFROM `Addresses` \nWHERE `city` = 'Port Chelsea';", "match": {"match": true, "result": [["148"]]}}
{"result": "SELECT zip_postcode \nFROM Addresses \nWHERE city = 'Port Chelsea'", "match": {"match": true, "result": [["148"]]}}
{"result": "SELECT department_name, department_id \nFROM Departments \nGROUP BY department_id \nORDER BY COUNT(degree_program_id) DESC \nLIMIT 1", "match": {"match": false, "error": "Query execution failed with error: no such column: degree_program_id"}}
{"result": "SELECT department_id, department_name \nFROM Departments \nWHERE department_id = (SELECT department_id \n                       FROM Degree_Programs \n                       GROUP BY department_id \n                       ORDER BY COUNT(degree_program_id) DESC \n                       LIMIT 1);", "match": {"match": false, "result": [[8, "statistics"]], "gt": [["statistics", 8]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) \nFROM Degree_Programs;", "match": {"match": false, "result": [[15]], "gt": [[10]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT department_id) \nFROM Degree_Programs", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(*) \nFROM `Degree_Programs` \nJOIN `Departments` ON `Degree_Programs`.`department_id` = `Departments`.`department_id` \nWHERE `Departments`.`department_name` = 'Engineering'", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(*) \nFROM Degree_Programs \nJOIN Departments ON Degree_Programs.department_id = Departments.department_id \nWHERE Departments.department_name = 'Engineering'", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT T1.section_name, T1.section_description \nFROM Sections AS T1", "match": {"match": true, "result": [["a", "non"], ["b", "voluptatem"], ["c", "qui"], ["d", "voluptas"], ["e", "ex"], ["f", "doloremque"], ["g", "provident"], ["h", "et"], ["j", "quis"], ["k", "nesciunt"], ["l", "ad"], ["o", "et"], ["p", "facilis"], ["u", "reprehenderit"], ["y", "qui"]]}}
{"result": "SELECT section_name, section_description \nFROM Sections", "match": {"match": true, "result": [["a", "non"], ["b", "voluptatem"], ["c", "qui"], ["d", "voluptas"], ["e", "ex"], ["f", "doloremque"], ["g", "provident"], ["h", "et"], ["j", "quis"], ["k", "nesciunt"], ["l", "ad"], ["o", "et"], ["p", "facilis"], ["u", "reprehenderit"], ["y", "qui"]]}}
{"result": "SELECT T1.course_id, T1.course_name\nFROM Courses AS T1\nJOIN Sections AS T2 ON T1.course_id = T2.course_id\nGROUP BY T1.course_id, T1.course_name\nHAVING COUNT(T2.section_id) <= 2;", "match": {"match": false, "result": [[1, "ds"], [2, "math"], [4, "en"], [5, "fr"], [6, "la"], [7, "cal"], [8, "nlp"], [9, "dl"], [10, "ml"], [12, "db"], [14, "pl"]], "gt": [["ds", 1], ["math", 2], ["en", 4], ["fr", 5], ["la", 6], ["cal", 7], ["nlp", 8], ["dl", 9], ["ml", 10], ["db", 12], ["pl", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.course_name, T1.course_id \nFROM Courses AS T1 \nJOIN Sections AS T2 ON T1.course_id = T2.course_id \nGROUP BY T1.course_id \nHAVING COUNT(T2.section_id) < 2", "match": {"match": false, "result": [["math", 2], ["en", 4], ["la", 6], ["cal", 7], ["dl", 9], ["ml", 10], ["db", 12]], "gt": [["ds", 1], ["math", 2], ["en", 4], ["fr", 5], ["la", 6], ["cal", 7], ["nlp", 8], ["dl", 9], ["ml", 10], ["db", 12], ["pl", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT section_name \nFROM Sections \nORDER BY section_name DESC", "match": {"match": true, "result": [["y"], ["u"], ["p"], ["o"], ["l"], ["k"], ["j"], ["h"], ["g"], ["f"], ["e"], ["d"], ["c"], ["b"], ["a"]]}}
{"result": "SELECT section_name \nFROM Sections \nORDER BY section_name DESC", "match": {"match": true, "result": [["y"], ["u"], ["p"], ["o"], ["l"], ["k"], ["j"], ["h"], ["g"], ["f"], ["e"], ["d"], ["c"], ["b"], ["a"]]}}
{"result": "SELECT T.semester_id, T.semester_name \nFROM (\n  SELECT \n    T3.semester_id, \n    T3.semester_name, \n    COUNT(T1.student_id) AS student_count\n  FROM Student_Enrolment T1 \n  JOIN Semesters T2 ON T1.semester_id = T2.semester_id \n  JOIN Degree_Programs T3 ON T1.degree_program_id = T3.degree_program_id \n  GROUP BY T3.semester_id, T3.semester_name\n) T \nORDER BY T.student_count DESC \nLIMIT 1", "match": {"match": false, "error": "Query execution failed with error: no such column: T3.semester_id"}}
{"result": "SELECT \n  T1.semester_name, \n  T2.semester_id \nFROM \n  Semesters T1 \nJOIN \n  ( SELECT semester_id, COUNT(student_id) as student_count \n    FROM Student_Enrolment \n    GROUP BY semester_id \n    ORDER BY student_count DESC \n    LIMIT 1 \n  ) T2 \nON T1.semester_id = T2.semester_id", "match": {"match": true, "result": [["summer 2010", 2]]}}
{"result": "SELECT department_description \nFROM Departments \nWHERE department_name LIKE '%the computer%';", "match": {"match": false, "result": [], "gt": [["error"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT department_description \nFROM Departments \nWHERE department_name LIKE '%computer%'", "match": {"match": true, "result": [["error"]]}}
{"result": "SELECT T1.first_name, T1.middle_name, T1.last_name, T2.degree_program_id \nFROM Students AS T1 \nJOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id \nGROUP BY T2.student_id, T2.degree_program_id \nHAVING COUNT(DISTINCT T2.degree_program_id) = 2;", "match": {"match": false, "result": [], "gt": [["Jarvis", "Aaliyah", "Carroll", 4], ["Reva", "Golda", "Osinski", 9], ["Jordy", "Osborne", "Rempel", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.first_name, T2.middle_name, T2.last_name, T2.student_id \nFROM Student_Enrolment AS T1 \nJOIN Students AS T2 ON T2.student_id = T1.student_id \nWHERE T1.degree_program_id IN ( SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id HAVING COUNT(degree_program_id) = 2 )", "match": {"match": false, "result": [["Jordy", "Osborne", "Rempel", 14], ["Reva", "Golda", "Osinski", 9], ["Frida", "Aisha", "Huel", 7], ["Reva", "Golda", "Osinski", 9], ["Frida", "Aisha", "Huel", 7], ["Jarvis", "Aaliyah", "Carroll", 4], ["Stanford", "Mona", "Rogahn", 6], ["Stanford", "Mona", "Rogahn", 6]], "gt": [["Jarvis", "Aaliyah", "Carroll", 4], ["Reva", "Golda", "Osinski", 9], ["Jordy", "Osborne", "Rempel", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT S.first_name, S.middle_name, S.last_name \nFROM Students S \nJOIN Student_Enrolment SE ON S.student_id = SE.student_id \nJOIN Degree_Programs DP ON SE.degree_program_id = DP.degree_program_id \nWHERE DP.degree_summary_name = 'Bachelor';", "match": {"match": false, "result": [["Reva", "Golda", "Osinski"], ["Frida", "Aisha", "Huel"], ["Reva", "Golda", "Osinski"], ["Jarvis", "Aaliyah", "Carroll"], ["Frida", "Aisha", "Huel"], ["Jarvis", "Aaliyah", "Carroll"], ["Milton", "Vaughn", "Christiansen"], ["Stanford", "Mona", "Rogahn"]], "gt": [["Reva", "Golda", "Osinski"], ["Frida", "Aisha", "Huel"], ["Jarvis", "Aaliyah", "Carroll"], ["Milton", "Vaughn", "Christiansen"], ["Stanford", "Mona", "Rogahn"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T1.first_name, T1.middle_name, T1.last_name \nFROM Students AS T1 \nJOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id \nJOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id \nWHERE T3.degree_summary_name = 'Bachelors'", "match": {"match": false, "result": [], "gt": [["Reva", "Golda", "Osinski"], ["Frida", "Aisha", "Huel"], ["Jarvis", "Aaliyah", "Carroll"], ["Milton", "Vaughn", "Christiansen"], ["Stanford", "Mona", "Rogahn"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.degree_summary_name \nFROM (\n  SELECT degree_program_id, COUNT(*) as enrollment_count \n  FROM Student_Enrolment \n  GROUP BY degree_program_id \n) AS T \nORDER BY enrollment_count DESC \nLIMIT 1", "match": {"match": false, "error": "Query execution failed with error: no such column: T.degree_summary_name"}}
{"result": "```sql\nSELECT \n    dp.degree_summary_name, \n    COUNT(se.student_id) as total_students_enrolled\nFROM \n    Student_Enrolment se\nJOIN \n    Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nGROUP BY \n    dp.degree_summary_name\nORDER BY \n    total_students_enrolled DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [["Bachelor", 8]], "gt": [["Bachelor"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.degree_summary_name \nFROM Degree_Programs AS T1 \nJOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id \nGROUP BY T1.degree_program_id \nORDER BY COUNT(T2.student_id) DESC \nLIMIT 1", "match": {"match": false, "result": [["Bachelor"]], "gt": [[9, "Bachelor"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT D.degree_summary_name \nFROM Degree_Programs D\nJOIN Student_Enrolment SE ON D.degree_program_id = SE.degree_program_id\nGROUP BY D.degree_summary_name\nORDER BY COUNT(DISTINCT SE.student_id) DESC\nLIMIT 1;\n\nThis SQL query returns the degree summary name that has the most students enrolled. \n\nNote: If there are multiple degree programs with the same maximum number of students, this query will return one of them.", "match": {"match": false, "error": "Query execution failed with error: You can only execute one statement at a time."}}
{"result": "SELECT \n    s.student_id, \n    s.first_name, \n    s.middle_name, \n    s.last_name, \n    COUNT(se.enrolment_id) as num_enrollments\nFROM \n    Students s\nJOIN \n    Student_Enrolment se ON s.student_id = se.student_id\nGROUP BY \n    s.student_id, s.first_name, s.middle_name, s.last_name\nORDER BY \n    num_enrollments DESC\nLIMIT 1", "match": {"match": false, "error": "Query execution failed with error: no such column: se.enrolment_id"}}
{"result": "SELECT \n  S.first_name, \n  S.middle_name, \n  S.last_name, \n  S.student_id, \n  COUNT(SE.degree_program_id) as num_enrollments\nFROM \n  Students S\nJOIN \n  Student_Enrolment SE ON S.student_id = SE.student_id\nGROUP BY \n  S.student_id\nORDER BY \n  COUNT(SE.degree_program_id) DESC\nLIMIT 1", "match": {"match": false, "result": [["Frida", "Aisha", "Huel", 7, 3]], "gt": [[7, "Frida", "Aisha", "Huel", 3, 7]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.semester_name \nFROM Semesters AS T1 \nLEFT JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id \nWHERE T2.semester_id IS NULL;", "match": {"match": true, "result": [["fall 2010"], ["spring 2013"], ["spring 2014"], ["spring 2016"], ["spring 2017"], ["winter 2018"]]}}
{"result": "SELECT T2.semester_name \nFROM Student_Enrolment AS T1 \nLEFT JOIN Semesters AS T2 ON T2.semester_id = T1.semester_id \nLEFT JOIN Student_Enrolment_Courses AS T3 ON T3.student_enrolment_id = T1.student_enrolment_id \nWHERE T3.student_course_id IS NULL", "match": {"match": false, "result": [["fall 2018"], ["summer 2010"], ["spring 2015"], ["fall 2018"], ["summer 2010"], ["winter 2010"]], "gt": [["fall 2010"], ["spring 2013"], ["spring 2014"], ["spring 2016"], ["spring 2017"], ["winter 2018"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.course_name \nFROM Student_Enrolment_Courses AS T1 \nJOIN Courses AS T2 ON T1.course_id = T2.course_id", "match": {"match": false, "result": [["la"], ["la"], ["pl"], ["ai"], ["math"], ["ml"], ["math"], ["pl"], ["os"], ["en"], ["ml"], ["nlp"], ["rs"], ["rs"], ["db"]], "gt": [["la"], ["pl"], ["ai"], ["math"], ["ml"], ["os"], ["en"], ["nlp"], ["rs"], ["db"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T3.course_name FROM Student_Enrolment_Courses AS T1 \nJOIN Student_Enrolment AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id \nJOIN Courses AS T3 ON T1.course_id = T3.course_id GROUP BY T3.course_id HAVING COUNT(T1.student_enrolment_id) > 0", "match": {"match": false, "result": [["math"], ["os"], ["en"], ["la"], ["nlp"], ["ml"], ["ai"], ["db"], ["rs"], ["pl"]], "gt": [["la"], ["pl"], ["ai"], ["math"], ["ml"], ["os"], ["en"], ["nlp"], ["rs"], ["db"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT C.course_name, COUNT(*) as total_enrollments\nFROM Student_Enrolment_SE \nJOIN Student_Enrolment_Courses SEC ON Student_Enrolment_SE.student_enrolment_id = SEC.student_enrolment_id\nJOIN Courses C ON SEC.course_id = C.course_id\nGROUP BY C.course_name\nORDER BY total_enrollments DESC\nLIMIT 1", "match": {"match": false, "error": "Query execution failed with error: no such table: Student_Enrolment_SE"}}
{"result": "SELECT t1.course_name \nFROM Courses t1 \nJOIN Student_Enrolment_Courses t2 ON t1.course_id = t2.course_id \nJOIN Student_Enrolment t3 ON t2.student_enrolment_id = t3.student_enrolment_id \nGROUP BY t1.course_name \nORDER BY COUNT(t2.student_course_id) DESC \nLIMIT 1;", "match": {"match": true, "result": [["rs"]]}}
{"result": "SELECT T1.last_name FROM Students AS T1 \nINNER JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id \nWHERE T2.state_province_county = 'North Carolina' \nAND T1.student_id NOT IN ( SELECT student_id FROM Student_Enrolment );", "match": {"match": false, "result": [], "gt": [["Gleichner"], ["Weimann"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.last_name \nFROM Students AS T1 \nINNER JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id \nWHERE T2.state_province_county = 'North Carolina' \nAND T1.student_id NOT IN (SELECT T1.student_id \n                           FROM Student_Enrolment AS T1 \n                           INNER JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id);", "match": {"match": false, "result": [], "gt": [["Gleichner"], ["Weimann"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.transcript_id, T1.transcript_date \nFROM Transcripts AS T1 \nJOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id \nGROUP BY T1.transcript_id \nHAVING COUNT(T1.transcript_id) >= 2", "match": {"match": false, "result": [[5, "2013-06-30 13:01:40"], [6, "2010-12-13 10:55:15"], [8, "1975-05-06 12:04:47"], [15, "1998-11-22 12:18:29"]], "gt": [["2013-06-30 13:01:40", 5], ["2010-12-13 10:55:15", 6], ["1975-05-06 12:04:47", 8], ["1998-11-22 12:18:29", 15]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.transcript_date, T2.transcript_id\nFROM Student_Enrolment_Courses AS T1\nJOIN Transcripts AS T2 ON T1.student_course_id = T2.transcript_id\nGROUP BY T2.transcript_id\nHAVING COUNT(T1.student_course_id) >= 2", "match": {"match": false, "result": [], "gt": [["2013-06-30 13:01:40", 5], ["2010-12-13 10:55:15", 6], ["1975-05-06 12:04:47", 8], ["1998-11-22 12:18:29", 15]], "error": "Query result does not match ground truth."}}
{"result": "SELECT cell_mobile_number \nFROM Students \nWHERE first_name = 'Timmothy' AND last_name = 'Ward';", "match": {"match": true, "result": [["(096)889-8954x524"]]}}
{"result": "SELECT `cell_mobile_number` \nFROM `Students` \nWHERE `first_name` = 'Timmothy' AND `last_name` = 'Ward';", "match": {"match": false, "result": [["(096)889-8954x524"]], "gt": [], "error": "Query result does not match ground truth."}}
{"result": "SELECT first_name, middle_name, last_name \nFROM Students \nWHERE date_first_registered = (SELECT MIN(date_first_registered) \n                              FROM Students);", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT first_name, middle_name, last_name \nFROM Students \nWHERE date_first_registered = (SELECT MIN(date_first_registered) FROM Students)", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT first_name, middle_name, last_name \nFROM Students \nWHERE date_first_registered = (SELECT MIN(date_first_registered) \n                              FROM Students)", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT S.`first_name`, S.`middle_name`, S.`last_name`\nFROM Students S\nJOIN Student_Enrolment SE ON S.`student_id` = SE.`student_id`\nJOIN Degree_Programs DP ON SE.`degree_program_id` = DP.`degree_program_id`\nORDER BY S.`date_first_registered` ASC\nLIMIT 1", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT DISTINCT T1.first_name \nFROM Students AS T1 \nINNER JOIN Addresses AS T2 ON T1.current_address_id != T2.address_id AND T1.permanent_address_id = T2.address_id", "match": {"match": true, "result": [["Timmothy"], ["Hobart"], ["Warren"], ["Jarvis"], ["Stanford"], ["Frida"], ["Delaney"], ["Reva"], ["Helga"], ["Gregg"], ["Orrin"], ["Deon"], ["Jordy"], ["Jett"]]}}
{"result": "SELECT first_name \nFROM Students \nWHERE permanent_address_id != current_address_id;", "match": {"match": true, "result": [["Timmothy"], ["Hobart"], ["Warren"], ["Jarvis"], ["Stanford"], ["Frida"], ["Delaney"], ["Reva"], ["Helga"], ["Gregg"], ["Orrin"], ["Deon"], ["Jordy"], ["Jett"]]}}
{"result": "SELECT T1.address_id, T1.line_1, T1.line_2, T1.line_3 \nFROM Addresses T1 \nJOIN Students T2 ON T1.address_id = T2.current_address_id \nGROUP BY T1.address_id \nORDER BY COUNT(T2.student_id) DESC \nLIMIT 1", "match": {"match": false, "result": [[9, "0643 Muller Vista", "Suite 383", null]], "gt": [[9, "0643 Muller Vista", "Suite 383"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.address_id, T1.line_1, T1.line_2 \nFROM Addresses AS T1 \nJOIN Students AS T2 ON T1.address_id = T2.current_address_id OR T1.address_id = T2.permanent_address_id \nGROUP BY T1.address_id \nORDER BY COUNT(T2.student_id) DESC \nLIMIT 1", "match": {"match": true, "result": [[9, "0643 Muller Vista", "Suite 383"]]}}
{"result": "SELECT CAST(SUM(transcript_date) AS DATETIME) / COUNT(*), semester.semester_name \nFROM Transcripts \nJOIN Student_Enrolment ON Student_Enrolment.student_id = Transcripts.student_id \nJOIN Student_Enrolment_Courses ON Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id \nJOIN Semesters ON Semesters.semester_id = Student_Enrolment.semester_id \nGROUP BY semester.semester_name;", "match": {"match": false, "error": "Query execution failed with error: no such column: semester.semester_name"}}
{"result": "SELECT AVG(`transcript_date`) FROM `Transcripts`", "match": {"match": true, "result": [[1989.9333333333334]]}}
{"result": "SELECT T1.transcript_date, T1.other_details \nFROM Transcripts AS T1 \nWHERE T1.transcript_date = ( SELECT MIN(transcript_date) \n                            FROM Transcripts );", "match": {"match": true, "result": [["1975-05-06 12:04:47", null]]}}
{"result": "SELECT MIN(`transcript_date`) AS earliest_transcript_date, `other_details`\nFROM `Transcripts`", "match": {"match": true, "result": [["1975-05-06 12:04:47", null]]}}
{"result": "SELECT COUNT(`transcript_id`) FROM `Transcripts`", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) FROM Transcripts", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT MAX(transcript_date) FROM Transcripts", "match": {"match": true, "result": [["2013-06-30 13:01:40"]]}}
{"result": "SELECT MAX(transcript_date) FROM Transcripts", "match": {"match": true, "result": [["2013-06-30 13:01:40"]]}}
{"result": "SELECT COUNT(T1.student_course_id) , T1.student_course_id\nFROM Transcript_Contents AS T1\nJOIN Student_Enrolment_Courses AS T2 ON T1.student_course_id = T2.student_course_id", "match": {"match": false, "result": [[15, 0]], "gt": [[4, 0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) AS max_transcripts, TEC.student_enrolment_id\nFROM Student_Enrolment_Courses SEC\nJOIN Transcript_Contents TC ON SEC.student_course_id = TC.student_course_id\nJOIN Transcript_Contents TEC ON SEC.student_course_id = TEC.student_course_id\nGROUP BY TEC.student_enrolment_id\nORDER BY COUNT(*) DESC\nLIMIT 1", "match": {"match": false, "error": "Query execution failed with error: no such column: TEC.student_enrolment_id"}}
{"result": "SELECT T1.transcript_date, T1.transcript_id \nFROM Transcripts AS T1 \nJOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id \nORDER BY COUNT(T2.student_course_id) ASC LIMIT 1", "match": {"match": false, "error": "Query execution failed with error: misuse of aggregate: COUNT()"}}
{"result": "SELECT t1.transcript_id, t1.transcript_date \nFROM Transcripts t1 \nJOIN Transcript_Contents t2 ON t1.transcript_id = t2.transcript_id \nGROUP BY t1.transcript_id \nORDER BY COUNT(t2.student_course_id) ASC \nLIMIT 1", "match": {"match": false, "result": [[2, "1975-10-28 15:16:51"]], "gt": [["1975-10-28 15:16:51", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T1.semester_name \nFROM Semesters AS T1 \nJOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id \nJOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id", "match": {"match": false, "result": [["fall 2018"], ["summer 2010"], ["spring 2019"], ["spring 2010"], ["spring 2015"], ["spring 2018"], ["spring 2012"], ["winter 2010"]], "gt": [[13]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T3.semester_id \nFROM Degree_Programs AS T1 \nJOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id \nJOIN Semesters AS T3 ON T2.semester_id = T3.semester_id \nWHERE T1.degree_summary_name IN ('Masters', 'Bachelors')", "match": {"match": false, "result": [], "gt": [[13]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT current_address_id) FROM Students", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT DISTINCT T1.line_1, T1.line_2, T1.line_3, T1.city, T1.zip_postcode, T1.state_province_county, T1.country \nFROM Addresses T1 \nJOIN Students T2 ON T1.address_id = T2.current_address_id \nWHERE T2.date_left IS NULL", "match": {"match": false, "result": [], "gt": [[9]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    first_name,\n    middle_name,\n    last_name,\n    email_address,\n    cell_mobile_number,\n    ssn\nFROM \n    Students\nORDER BY \n    last_name DESC, \n    middle_name DESC, \n    first_name DESC", "match": {"match": false, "result": [["Deon", "Brooklyn", "Weimann", "jhuel@example.com", "(213)445-0399x85208", "68095"], ["Timmothy", "Anna", "Ward", "erwin.zboncak@example.com", "(096)889-8954x524", "965"], ["Gregg", "Mossie", "Schuppe", "nbruen@example.org", "(462)246-7921", "494"], ["Stanford", "Mona", "Rogahn", "skassulke@example.net", "436.613.7683", "248"], ["Jordy", "Osborne", "Rempel", "gracie29@example.com", "(605)919-3594x3661", "34458427"], ["Reva", "Golda", "Osinski", "qo'kon@example.com", "(507)365-8405", "39"], ["Helga", "Cleve", "Mohr", "nya.lesch@example.net", "677.401.9382", "43"], ["Orrin", "Neal", "Kemmer", "beth42@example.org", "(982)153-1469x1733", "6274274"], ["Jett", "Alberta", "Jaskolski", "mya88@example.org", "877.549.9067x8723", "156"], ["Frida", "Aisha", "Huel", "baumbach.lucious@example.org", "1-879-796-8987x164", "668"], ["Warren", "Violet", "Gleichner", "johns.unique@example.net", "07661787471", "3"], ["Milton", "Vaughn", "Christiansen", "lhartmann@example.org", "171-642-5684", ""], ["Jarvis", "Aaliyah", "Carroll", "jillian26@example.net", "09700166582", "141072406"], ["Hobart", "Lorenz", "Balistreri", "swift.kolby@example.com", "1-009-710-5151", "304246"], ["Delaney", "Judd", "Ankunding", "dell43@example.net", "03174364122", "402"]], "gt": [["voluptatem"], ["rerum"], ["quia"], ["qui"], ["omnis"], ["omnis"], ["non"], ["nesciunt"], ["laborum"], ["facilis"], ["et"], ["dolorum"], ["autem"], ["atque"], ["assumenda"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT other_student_details \nFROM Students \nORDER BY first_name DESC, last_name DESC;", "match": {"match": false, "result": [["facilis"], ["quia"], ["qui"], ["nesciunt"], ["non"], ["laborum"], ["et"], ["omnis"], ["atque"], ["autem"], ["rerum"], ["omnis"], ["dolorum"], ["assumenda"], ["voluptatem"]], "gt": [["voluptatem"], ["rerum"], ["quia"], ["qui"], ["omnis"], ["omnis"], ["non"], ["nesciunt"], ["laborum"], ["facilis"], ["et"], ["dolorum"], ["autem"], ["atque"], ["assumenda"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT * FROM `Sections` WHERE `section_name` = 'h'", "match": {"match": false, "result": [[8, 14, "h", "et", null]], "gt": [["et"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT `section_description` \nFROM `Sections` \nWHERE `section_name` = 'h';", "match": {"match": true, "result": [["et"]]}}
{"result": "SELECT DISTINCT T1.first_name \nFROM Students AS T1 \nINNER JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id \nWHERE T2.country = 'Haiti' \nOR T1.cell_mobile_number = '09700166582'", "match": {"match": false, "result": [["Hobart"], ["Warren"], ["Jarvis"], ["Delaney"]], "gt": [["Jarvis"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT first_name \nFROM Students \nWHERE permanent_address_id IN (SELECT address_id \n                                FROM Addresses \n                                WHERE country = 'Haiti') \nOR cell_mobile_number = '09700166582'", "match": {"match": false, "result": [["Hobart"], ["Warren"], ["Jarvis"], ["Delaney"]], "gt": [["Jarvis"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Title FROM Cartoon ORDER BY Title ASC", "match": {"match": true, "result": [["Dawn of the Dead Man!"], ["Day of the Dark Knight!"], ["Deep Cover for Batman!"], ["Enter the Outsiders!"], ["Evil Under the Sea!"], ["Fall of the Blue Beetle!"], ["Invasion of the Secret Santas!"], ["Journey to the Center of the Bat!"], ["Return of the Fearsome Fangs!"], ["Terror on Dinosaur Island!"], ["The Eyes of Despero!"], ["The Rise of the Blue Beetle!"]]}}
{"result": "SELECT Title \nFROM Cartoon \nORDER BY Title ASC", "match": {"match": true, "result": [["Dawn of the Dead Man!"], ["Day of the Dark Knight!"], ["Deep Cover for Batman!"], ["Enter the Outsiders!"], ["Evil Under the Sea!"], ["Fall of the Blue Beetle!"], ["Invasion of the Secret Santas!"], ["Journey to the Center of the Bat!"], ["Return of the Fearsome Fangs!"], ["Terror on Dinosaur Island!"], ["The Eyes of Despero!"], ["The Rise of the Blue Beetle!"]]}}
{"result": "SELECT * FROM Cartoon WHERE Directed_by = 'Ben Jones'", "match": {"match": false, "result": [[1.0, "The Rise of the Blue Beetle!", "Ben Jones", "Michael Jelenic", "November14,2008", 101.0, "700"], [4.0, "Day of the Dark Knight!", "Ben Jones", "J. M. DeMatteis", "January2,2009", 104.0, "704"], [7.0, "Dawn of the Dead Man!", "Ben Jones", "Steven Melching", "January16,2009", 107.0, "707"], [10.0, "The Eyes of Despero!", "Ben Jones", "J. M. DeMatteis", "February6,2009", 110.0, "728"]], "gt": [["The Rise of the Blue Beetle!"], ["Day of the Dark Knight!"], ["Dawn of the Dead Man!"], ["The Eyes of Despero!"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Day of the Dark Knight!"], ["Dawn of the Dead Man!"], ["The Eyes of Despero!"]]}}
{"result": "SELECT COUNT(id) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(id) \nFROM Cartoon \nWHERE Written_by = 'Joseph Kuhr';", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT T1.Title, T1.Directed_by FROM Cartoon AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id ORDER BY T1.Original_air_date", "match": {"match": true, "result": [["Invasion of the Secret Santas!", "Brandon Vietti"], ["Evil Under the Sea!", "Michael Chang"], ["Return of the Fearsome Fangs!", "Brandon Vietti"], ["Deep Cover for Batman!", "Michael Chang"], ["The Eyes of Despero!", "Ben Jones"], ["Dawn of the Dead Man!", "Ben Jones"], ["Day of the Dark Knight!", "Ben Jones"], ["Fall of the Blue Beetle!", "Brandon Vietti"], ["Journey to the Center of the Bat!", "Michael Chang"], ["Enter the Outsiders!", "Michael Chang"], ["The Rise of the Blue Beetle!", "Ben Jones"], ["Terror on Dinosaur Island!", "Brandon Vietti"]]}}
{"result": "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date", "match": {"match": true, "result": [["Invasion of the Secret Santas!", "Brandon Vietti"], ["Evil Under the Sea!", "Michael Chang"], ["Return of the Fearsome Fangs!", "Brandon Vietti"], ["Deep Cover for Batman!", "Michael Chang"], ["The Eyes of Despero!", "Ben Jones"], ["Dawn of the Dead Man!", "Ben Jones"], ["Day of the Dark Knight!", "Ben Jones"], ["Fall of the Blue Beetle!", "Brandon Vietti"], ["Journey to the Center of the Bat!", "Michael Chang"], ["Enter the Outsiders!", "Michael Chang"], ["The Rise of the Blue Beetle!", "Ben Jones"], ["Terror on Dinosaur Island!", "Brandon Vietti"]]}}
{"result": "SELECT Title \nFROM Cartoon \nWHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Terror on Dinosaur Island!"], ["Day of the Dark Knight!"], ["Invasion of the Secret Santas!"], ["Dawn of the Dead Man!"], ["Fall of the Blue Beetle!"], ["The Eyes of Despero!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT Title \nFROM Cartoon \nWHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Terror on Dinosaur Island!"], ["Day of the Dark Knight!"], ["Invasion of the Secret Santas!"], ["Dawn of the Dead Man!"], ["Fall of the Blue Beetle!"], ["The Eyes of Despero!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT Country, COUNT(id) \nFROM TV_Channel \nGROUP BY Country \nORDER BY COUNT(id) DESC", "match": {"match": false, "result": [["Italy", 12], ["United Kingdom", 2], ["Poland", 1]], "gt": [["Italy", 12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Country, COUNT(id) \nFROM TV_Channel \nGROUP BY Country \nORDER BY COUNT(id) DESC \nLIMIT 1", "match": {"match": true, "result": [["Italy", 12]]}}
{"result": "SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel", "match": {"match": true, "result": [[15, 1]]}}
{"result": "SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel", "match": {"match": true, "result": [[15, 1]]}}
{"result": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'", "match": {"match": true, "result": [["music"]]}}
{"result": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';", "match": {"match": true, "result": [["music"]]}}
{"result": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'", "match": {"match": true, "result": [["Sky Famiglia"]]}}
{"result": "SELECT T2.Package_Option \nFROM TV_Channel AS T1 \nJOIN TV_series AS T2 ON T1.id = T2.Channel \nWHERE T1.series_name = 'Sky Radio';", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Package_Option"}}
{"result": "SELECT COUNT(id) FROM TV_Channel WHERE Language = 'English'", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(id) FROM TV_Channel WHERE Language = 'English'", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Language, COUNT(Language) as count \nFROM TV_Channel \nGROUP BY Language \nORDER BY COUNT(Language) ASC", "match": {"match": false, "result": [["English", 3], ["Italian", 12]], "gt": [["English", 3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Language, COUNT(Language) FROM TV_Channel GROUP BY Language ORDER BY COUNT(Language) LIMIT 1", "match": {"match": true, "result": [["English", 3]]}}
{"result": "SELECT Language, COUNT(id) FROM TV_Channel GROUP BY Language;", "match": {"match": true, "result": [["English", 3], ["Italian", 12]]}}
{"result": "SELECT Language, COUNT(id) FROM TV_Channel GROUP BY Language", "match": {"match": true, "result": [["English", 3], ["Italian", 12]]}}
{"result": "SELECT T1.series_name \nFROM TV_Channel AS T1\nJOIN Cartoon AS T2 ON T1.id = T2.Channel \nWHERE T2.Title = 'The Rise of the Blue Beetle!';", "match": {"match": true, "result": [["Sky Radio"]]}}
{"result": "SELECT T1.series_name \nFROM TV_Channel AS T1\nJOIN Cartoon AS T2 ON T2.Channel = T1.id\nWHERE T2.Title = 'The Rise of the Blue Beetle';", "match": {"match": false, "result": [], "gt": [["Sky Radio"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Title \nFROM \"TV_Channel\" AS T1 \nINNER JOIN \"Cartoon\" AS T2 \nON T1.id = T2.Channel \nWHERE T1.series_name = 'Sky Radio';", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT T1.Title \nFROM Cartoon AS T1 \nJOIN TV_Channel AS T2 \nON T1.Channel = T2.id \nWHERE T2.`series_name` = 'Sky Radio'", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT T2.Episode FROM TV_Channel AS T1 INNER JOIN TV_series AS T2 ON T2.Channel = T1.id ORDER BY T2.Rating", "match": {"match": true, "result": [["The Hanged Man"], ["Double Down"], ["Home By Another Way"], ["Keepers"], ["Emily"], ["Blowback"], ["The Legend of Dylan McCleen"], ["Winterland"], ["The Year of the Rabbit"], ["Game Three"], ["Friendly Skies"], ["A Love of a Lifetime"]]}}
{"result": "SELECT Episode, Rating FROM `TV_series` ORDER BY Rating DESC", "match": {"match": false, "result": [["A Love of a Lifetime", "5.8"], ["Friendly Skies", "5.3"], ["Game Three", "4.4"], ["The Year of the Rabbit", "4.3"], ["Winterland", "4.0"], ["The Legend of Dylan McCleen", "3.8"], ["Keepers", "3.7"], ["Emily", "3.7"], ["Blowback", "3.7"], ["Home By Another Way", "3.5"], ["Double Down", "3.4"], ["The Hanged Man", "3.0"]], "gt": [["The Hanged Man"], ["Double Down"], ["Home By Another Way"], ["Keepers"], ["Emily"], ["Blowback"], ["The Legend of Dylan McCleen"], ["Winterland"], ["The Year of the Rabbit"], ["Game Three"], ["Friendly Skies"], ["A Love of a Lifetime"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Episode, T2.Rating\nFROM TV_Channel AS T1\nINNER JOIN TV_series AS T2\nON T1.id = T2.Channel\nORDER BY T2.Rating DESC\nLIMIT 3", "match": {"match": true, "result": [["A Love of a Lifetime", "5.8"], ["Friendly Skies", "5.3"], ["Game Three", "4.4"]]}}
{"result": "SELECT TOP 3 Rating, id FROM TV_series ORDER BY CAST(REPLACE(Rating, ',', '') AS REAL) DESC", "match": {"match": false, "error": "Query execution failed with error: near \"3\": syntax error"}}
{"result": "SELECT MIN (Share) ,  MAX (Share) FROM TV_series", "match": {"match": false, "result": [[5.0, 9.0]], "gt": [[9.0, 5.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(`Share`) ,  MIN(`Share`) FROM TV_series", "match": {"match": true, "result": [[9.0, 5.0]]}}
{"result": "SELECT Air_Date FROM `TV_series` WHERE Episode = 'A Love of a Lifetime'", "match": {"match": true, "result": [["September 24, 2007"]]}}
{"result": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'", "match": {"match": true, "result": [["September 24, 2007"]]}}
{"result": "SELECT T2.Weekly_Rank \nFROM TV_Channel AS T1 \nINNER JOIN TV_series AS T2 \nON T1.id = T2.Channel \nWHERE T2.Episode = 'A Love of a Lifetime';", "match": {"match": true, "result": [[43.0]]}}
{"result": "SELECT T2.Weekly_Rank \nFROM TV_Channel AS T1 \nINNER JOIN TV_series AS T2 \nON T1.id = T2.Channel \nWHERE T2.Episode = 'A Love of a Lifetime';", "match": {"match": true, "result": [[43.0]]}}
{"result": "SELECT T2.series_name FROM TV_series AS T1 \nINNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id \nWHERE T1.Episode = 'A Love of a Lifetime'", "match": {"match": true, "result": [["Sky Radio"]]}}
{"result": "SELECT T2.`series_name` \nFROM `TV_series` AS T1 \nINNER JOIN `TV_Channel` AS T2 \nON T1.`Channel` = T2.`id` \nWHERE T1.`Episode` = 'A Love of a Lifetime';", "match": {"match": true, "result": [["Sky Radio"]]}}
{"result": "SELECT T2.Episode \nFROM TV_Channel AS T1 \nJOIN TV_series AS T2 ON T1.id = T2.Channel \nWHERE T1.`series_name` = 'Sky Radio';", "match": {"match": true, "result": [["A Love of a Lifetime"], ["Keepers"]]}}
{"result": "SELECT T1.Episode \nFROM \"TV_series\" AS T1 \nWHERE T1.Channel = ( SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio' );", "match": {"match": true, "result": [["A Love of a Lifetime"], ["Keepers"]]}}
{"result": "SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by", "match": {"match": false, "result": [["Ben Jones", 4], ["Brandon Vietti", 4], ["Michael Chang", 4]], "gt": [[4, "Ben Jones"], [4, "Brandon Vietti"], [4, "Michael Chang"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Directed_by, COUNT(T1.id) \nFROM Cartoon \nGROUP BY T1.Directed_by", "match": {"match": false, "error": "Query execution failed with error: no such column: T1.Directed_by"}}
{"result": "SELECT T1.`Production_code`, T1.`Channel`\nFROM Cartoon AS T1\nJOIN ( SELECT Channel, MAX(`Original_air_date`) AS max_date\n       FROM Cartoon\n       GROUP BY Channel ) AS T2\nON T1.Channel = T2.Channel AND T1.`Original_air_date` = T2.max_date", "match": {"match": false, "result": [[101.0, "700"], [102.0, "701"], [103.0, "703"], [104.0, "704"], [105.0, "705"], [106.0, "706"], [108.0, "708"], [109.0, "707"], [110.0, "728"]], "gt": [[102.0, "701"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.id, T1.production_code, T2.channel \nFROM Cartoon AS T1 \nINNER JOIN TV_Channel AS T2 \nON T1.Channel = T2.id \nORDER BY T1.`Original_air_date` DESC \nLIMIT 1", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.channel"}}
{"result": "SELECT `Package_Option`, `series_name` FROM \"TV_Channel\" WHERE `Hight_definition_TV` = 'Yes'", "match": {"match": false, "result": [], "gt": [["Sky Famiglia + Sky HD", "MTV Live HD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.`Package_Option`, T1.`series_name` \nFROM `TV_Channel` AS T1 \nJOIN `TV_series` AS T2 ON T1.id = T2.Channel \nWHERE T1.`Hight_definition_TV` = 'Yes';", "match": {"match": false, "result": [], "gt": [["Sky Famiglia + Sky HD", "MTV Live HD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.`Country` FROM TV_Channel AS T1\nJOIN Cartoon AS T2 ON T1.id = T2.Channel\nWHERE T2.Written_by = 'Todd Casey'", "match": {"match": true, "result": [["United Kingdom"], ["Italy"]]}}
{"result": "SELECT T2.`Country` \nFROM Cartoon AS T1 \nJOIN TV_Channel AS T2 \nON T1.Channel = T2.id \nWHERE T1.Written_by = 'Todd Casey'", "match": {"match": true, "result": [["United Kingdom"], ["Italy"]]}}
{"result": "SELECT T1.Country \nFROM TV_Channel AS T1 \nLEFT JOIN Cartoon AS T2 \nON T1.id = T2.Channel \nWHERE T2.Written_by IS NULL", "match": {"match": false, "result": [["Poland"], ["Italy"], ["Italy"], ["Italy"], ["Italy"], ["Italy"]], "gt": [["Poland"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T2.Country \nFROM Cartoon AS T1 \nINNER JOIN TV_Channel AS T2 \nON T1.Channel = T2.id \nWHERE T1.Written_by != 'Todd Casey'", "match": {"match": false, "result": [["Italy"], ["United Kingdom"]], "gt": [["Poland"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.`series_name`, T1.`Country` \nFROM `TV_Channel` AS T1 \nJOIN Cartoon AS T2 ON T1.id = T2.Channel \nWHERE T2.`Directed_by` IN ('Ben Jones', 'Michael Chang');", "match": {"match": false, "result": [["Sky Radio", "Italy"], ["Music Box Italia", "Italy"], ["MTV Hits", "Italy"], ["MTV Rocks", "United Kingdom"], ["MTV Dance", "United Kingdom"], ["MTV Dance", "United Kingdom"], ["Classica", "Italy"], ["MTV Dance", "United Kingdom"]], "gt": [["MTV Dance", "United Kingdom"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.series_name, T1.Country \nFROM TV_Channel AS T1 \nJOIN Cartoon AS T2 ON T1.id = T2.Channel \nWHERE T2.Directed_by = 'Ben Jones' OR T2.Directed_by = 'Michael Chang'", "match": {"match": false, "result": [["Sky Radio", "Italy"], ["Music Box Italia", "Italy"], ["MTV Hits", "Italy"], ["MTV Rocks", "United Kingdom"], ["MTV Dance", "United Kingdom"], ["MTV Dance", "United Kingdom"], ["Classica", "Italy"], ["MTV Dance", "United Kingdom"]], "gt": [["MTV Dance", "United Kingdom"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT `Pixel_aspect_ratio_PAR`, `Country` FROM `TV_Channel` WHERE `Language` != 'English'", "match": {"match": true, "result": [["4:3", "Italy"], ["4:3", "Italy"], ["4:3 / 16:9", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3", "Italy"], ["4:3", "Italy"]]}}
{"result": "SELECT Pixel_aspect_ratio_PAR, Country \nFROM TV_Channel \nWHERE Language != 'English';", "match": {"match": true, "result": [["4:3", "Italy"], ["4:3", "Italy"], ["4:3 / 16:9", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3", "Italy"], ["4:3", "Italy"]]}}
{"result": "SELECT T.id \nFROM ( \n  SELECT Country, COUNT(id) AS cnt \n  FROM TV_Channel \n  GROUP BY Country \n) AS T \nJOIN TV_Channel ON T.Country = TV_Channel.Country \nGROUP BY T.Country \nHAVING COUNT(T.id) > 2", "match": {"match": false, "error": "Query execution failed with error: no such column: T.id"}}
{"result": "SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(id) > 2", "match": {"match": false, "result": [], "gt": [["700"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT id \nFROM TV_Channel \nWHERE id NOT IN (\n  SELECT Channel \n  FROM Cartoon \n  WHERE Directed_by = 'Ben Jones'\n);", "match": {"match": true, "result": [["701"], ["703"], ["705"], ["706"], ["708"], ["709"], ["713"], ["714"], ["715"], ["717"], ["719"]]}}
{"result": "SELECT id \nFROM TV_Channel \nWHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones');", "match": {"match": true, "result": [["701"], ["703"], ["705"], ["706"], ["708"], ["709"], ["713"], ["714"], ["715"], ["717"], ["719"]]}}
{"result": "SELECT T1.Package_Option \nFROM TV_Channel AS T1 \nLEFT JOIN Cartoon AS T2 ON T1.id = T2.Channel \nWHERE T2.Directed_by IS NULL OR T2.Directed_by != 'Ben Jones'", "match": {"match": false, "result": [["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["no ( FTV )"], ["Sky Famiglia + Sky HD"], ["no ( FTV )"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"]], "gt": [["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["no ( FTV )"], ["Sky Famiglia + Sky HD"], ["no ( FTV )"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Package_Option \nFROM TV_Channel AS T1 \nLEFT JOIN Cartoon AS T2 ON T1.id = T2.Channel \nWHERE T2.Directed_by IS NULL", "match": {"match": false, "result": [["Sky Famiglia + Sky HD"], ["no ( FTV )"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"]], "gt": [["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["no ( FTV )"], ["Sky Famiglia + Sky HD"], ["no ( FTV )"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(Poker_Player_ID) FROM poker_player", "match": {"match": true, "result": [[5]]}}
{"result": "SELECT COUNT(Poker_Player_ID) FROM poker_player", "match": {"match": true, "result": [[5]]}}
{"result": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "match": {"match": true, "result": [[596462.0], [476090.0], [189233.0], [142800.0], [104871.0]]}}
{"result": "SELECT Earnings \nFROM poker_player \nORDER BY Earnings DESC;", "match": {"match": true, "result": [[596462.0], [476090.0], [189233.0], [142800.0], [104871.0]]}}
{"result": "SELECT \"Final_Table_Made\", \"Best_Finish\" FROM \"poker_player\";", "match": {"match": true, "result": [[42.0, 1.0], [10.0, 2.0], [21.0, 1.0], [19.0, 2.0], [26.0, 3.0]]}}
{"result": "SELECT Final_Table_Made, Best_Finish FROM poker_player", "match": {"match": true, "result": [[42.0, 1.0], [10.0, 2.0], [21.0, 1.0], [19.0, 2.0], [26.0, 3.0]]}}
{"result": "SELECT AVG(Earnings) as average_earnings FROM poker_player", "match": {"match": true, "result": [[301891.2]]}}
{"result": "SELECT AVG(\"Earnings\") FROM \"poker_player\"", "match": {"match": true, "result": [[301891.2]]}}
{"result": "SELECT MAX(Money_Rank) FROM poker_player", "match": {"match": false, "result": [[166.0]], "gt": [[58.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(Money_Rank) FROM poker_player", "match": {"match": false, "result": [[166.0]], "gt": [[58.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(Final_Table_Made) \nFROM poker_player \nWHERE Earnings < 200000;", "match": {"match": true, "result": [[26.0]]}}
{"result": "SELECT MAX(\"Final_Table_Made\") \nFROM \"poker_player\" \nWHERE \"Earnings\" < 200000;", "match": {"match": true, "result": [[26.0]]}}
{"result": "SELECT T2.Name \nFROM poker_player AS T1 \nINNER JOIN people AS T2 ON T1.People_ID = T2.People_ID", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Teodor Salparov"], ["Yevgeni Sivozhelez"], ["Maksim Botin"], ["Semen Poltavskiy"]]}}
{"result": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID = T2.People_ID", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Teodor Salparov"], ["Yevgeni Sivozhelez"], ["Maksim Botin"], ["Semen Poltavskiy"]]}}
{"result": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID = T2.People_ID \nWHERE T1.Earnings > 300000;", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Maksim Botin"]]}}
{"result": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 \nON T1.People_ID = T2.People_ID \nWHERE T1.Earnings > 300000", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Maksim Botin"]]}}
{"result": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID = T2.People_ID \nORDER BY T1.Final_Table_Made ASC", "match": {"match": true, "result": [["Teodor Salparov"], ["Maksim Botin"], ["Yevgeni Sivozhelez"], ["Semen Poltavskiy"], ["Aleksey Ostapenko"]]}}
{"result": "SELECT T1.Name \nFROM people AS T1 \nJOIN poker_player AS T2 \nON T1.Poker_Player_ID = T2.Poker_Player_ID \nORDER BY T2.Final_Table_Made ASC", "match": {"match": false, "error": "Query execution failed with error: no such column: T1.Poker_Player_ID"}}
{"result": "SELECT T2.`Birth_Date` \nFROM poker_player AS T1 \nJOIN people AS T2 \nON T1.People_ID = T2.People_ID \nORDER BY T1.Earnings ASC \nLIMIT 1;", "match": {"match": true, "result": [["August 8, 1986"]]}}
{"result": "SELECT T2.`Birth_Date` \nFROM poker_player AS T1 \nINNER JOIN people AS T2 \nON T1.`People_ID` = T2.`People_ID` \nORDER BY T1.`Earnings` ASC \nLIMIT 1", "match": {"match": true, "result": [["August 8, 1986"]]}}
{"result": "SELECT MAX(T1.Money_Rank) FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height DESC LIMIT 1", "match": {"match": false, "result": [[166.0]], "gt": [[68.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.`Money_Rank` \nFROM poker_player AS T1 \nJOIN people AS T2 \nON T1.People_ID = T2.People_ID \nORDER BY T2.Height DESC \nLIMIT 1", "match": {"match": true, "result": [[68.0]]}}
{"result": "SELECT AVG(T1.Earnings) \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID = T2.People_ID \nWHERE T2.Height > 200", "match": {"match": true, "result": [[309445.0]]}}
{"result": "SELECT AVG(Earnings) \nFROM poker_player \nWHERE \"People_ID\" IN (\n  SELECT \"People_ID\" \n  FROM people \n  WHERE Height > 200\n);", "match": {"match": true, "result": [[309445.0]]}}
{"result": "SELECT Name \nFROM people \nWHERE People_ID IN (SELECT People_ID FROM poker_player ORDER BY Earnings DESC);", "match": {"match": false, "result": [["Aleksey Ostapenko"], ["Teodor Salparov"], ["Yevgeni Sivozhelez"], ["Maksim Botin"], ["Semen Poltavskiy"]], "gt": [["Maksim Botin"], ["Aleksey Ostapenko"], ["Teodor Salparov"], ["Semen Poltavskiy"], ["Yevgeni Sivozhelez"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Name \nFROM poker_player AS T1 \nINNER JOIN people AS T2 \nON T1.People_ID = T2.People_ID \nORDER BY T1.Earnings DESC", "match": {"match": true, "result": [["Maksim Botin"], ["Aleksey Ostapenko"], ["Teodor Salparov"], ["Semen Poltavskiy"], ["Yevgeni Sivozhelez"]]}}
{"result": "SELECT Nationality, COUNT(People_ID) AS Total_People\nFROM people\nGROUP BY Nationality;", "match": {"match": true, "result": [["Bulgaria", 1], ["Russia", 6]]}}
{"result": "SELECT Nationality, COUNT(Nationality) as Count\nFROM people\nGROUP BY Nationality", "match": {"match": true, "result": [["Bulgaria", 1], ["Russia", 6]]}}
{"result": "SELECT Nationality \nFROM people \nGROUP BY Nationality \nORDER BY COUNT(People_ID) DESC \nLIMIT 1;", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Nationality, COUNT(Nationality) AS count \nFROM people \nGROUP BY Nationality \nORDER BY count DESC \nLIMIT 1;", "match": {"match": false, "result": [["Russia", 6]], "gt": [["Russia"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Nationality \nFROM people \nGROUP BY Nationality \nHAVING COUNT(Nationality)  >  1", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Nationality \nFROM people \nGROUP BY Nationality \nHAVING COUNT(People_ID) >= 2", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Name, Birth_Date \nFROM people \nORDER BY Name ASC;", "match": {"match": true, "result": [["Aleksey Ostapenko", "May 26, 1986"], ["Maksim Botin", "July 14, 1983"], ["Roman Bragin", "April 17, 1987"], ["Semen Poltavskiy", "February 8, 1981"], ["Sergey Grankin", "January 22, 1987"], ["Teodor Salparov", "August 16, 1982"], ["Yevgeni Sivozhelez", "August 8, 1986"]]}}
{"result": "SELECT `Name`, `Birth_Date` FROM `people` ORDER BY `Name` ASC", "match": {"match": true, "result": [["Aleksey Ostapenko", "May 26, 1986"], ["Maksim Botin", "July 14, 1983"], ["Roman Bragin", "April 17, 1987"], ["Semen Poltavskiy", "February 8, 1981"], ["Sergey Grankin", "January 22, 1987"], ["Teodor Salparov", "August 16, 1982"], ["Yevgeni Sivozhelez", "August 8, 1986"]]}}
{"result": "SELECT Name FROM people WHERE Nationality != 'Russia'", "match": {"match": true, "result": [["Teodor Salparov"]]}}
{"result": "SELECT Name FROM people WHERE Nationality != 'Russian'", "match": {"match": false, "result": [["Aleksey Ostapenko"], ["Teodor Salparov"], ["Roman Bragin"], ["Sergey Grankin"], ["Yevgeni Sivozhelez"], ["Maksim Botin"], ["Semen Poltavskiy"]], "gt": [["Teodor Salparov"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name FROM people \nWHERE People_ID NOT IN (SELECT People_ID FROM poker_player);", "match": {"match": true, "result": [["Roman Bragin"], ["Sergey Grankin"]]}}
{"result": "SELECT \"Name\" \nFROM people \nWHERE \"People_ID\" NOT IN (SELECT \"People_ID\" FROM poker_player);", "match": {"match": true, "result": [["Roman Bragin"], ["Sergey Grankin"]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM people", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM people", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(*) FROM conductor", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT COUNT(*) FROM conductor", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT Name FROM conductor ORDER BY Age ASC", "match": {"match": true, "result": [["Antal Dor\u00e1ti"], ["Igor Stravinsky"], ["Colin Davis"], ["Michael Tilson Thomas"], ["Paul Jorgensen"], ["Antal Brown"], ["Charles Dutoit"], ["Seiji Ozawa"], ["Valeri Gergiev"], ["Pierre Boulez"], ["Gerard Schwarz"], ["Robert Craft"]]}}
{"result": "SELECT Name FROM conductor ORDER BY Age", "match": {"match": true, "result": [["Antal Dor\u00e1ti"], ["Igor Stravinsky"], ["Colin Davis"], ["Michael Tilson Thomas"], ["Paul Jorgensen"], ["Antal Brown"], ["Charles Dutoit"], ["Seiji Ozawa"], ["Valeri Gergiev"], ["Pierre Boulez"], ["Gerard Schwarz"], ["Robert Craft"]]}}
{"result": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "match": {"match": true, "result": [["Igor Stravinsky"], ["Paul Jorgensen"], ["Charles Dutoit"], ["Pierre Boulez"], ["Robert Craft"], ["Michael Tilson Thomas"]]}}
{"result": "SELECT Name \nFROM conductor \nWHERE Nationality != 'USA';", "match": {"match": true, "result": [["Igor Stravinsky"], ["Paul Jorgensen"], ["Charles Dutoit"], ["Pierre Boulez"], ["Robert Craft"], ["Michael Tilson Thomas"]]}}
{"result": "SELECT Record_Company \nFROM orchestra \nORDER BY Year_of_Founded DESC", "match": {"match": true, "result": [["Columbia Masterworks"], ["Philips"], ["Philips Classics Records"], ["RCA"], ["EMI"], ["Koch Records / Naxos Records"], ["Decca Records"], ["Mercury Records"], ["Deutsche Grammophon"], ["Kultur"], ["Decca Records"], ["Delos Records"]]}}
{"result": "SELECT Record_Company, Year_of_Founded\nFROM orchestra\nORDER BY Year_of_Founded DESC", "match": {"match": false, "result": [["Columbia Masterworks", 2009.0], ["Philips", 2008.0], ["Philips Classics Records", 2008.0], ["RCA", 2008.0], ["EMI", 2007.0], ["Koch Records / Naxos Records", 2006.0], ["Decca Records", 2004.0], ["Mercury Records", 2003.0], ["Deutsche Grammophon", 2003.0], ["Kultur", 2002.0], ["Decca Records", 2002.0], ["Delos Records", 2002.0]], "gt": [["Columbia Masterworks"], ["Philips"], ["Philips Classics Records"], ["RCA"], ["EMI"], ["Koch Records / Naxos Records"], ["Decca Records"], ["Mercury Records"], ["Deutsche Grammophon"], ["Kultur"], ["Decca Records"], ["Delos Records"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(Attendance) FROM show", "match": {"match": true, "result": [[1326.4]]}}
{"result": "SELECT AVG(Attendance) \nFROM show;", "match": {"match": true, "result": [[1326.4]]}}
{"result": "SELECT MAX(`Share`) AS Max_Shuare, MIN(`Share`) AS Min_Shuare FROM performance WHERE `Type` != 'Live final'", "match": {"match": true, "result": [["44.7%", "22.7%"]]}}
{"result": "SELECT MAX(T1.`Share`) AS max_share, MIN(T1.`Share`) AS min_share \nFROM performance T1 \nWHERE T1.`Type` != 'Live final';", "match": {"match": true, "result": [["44.7%", "22.7%"]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM conductor", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM conductor", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "match": {"match": true, "result": [["Robert Craft"], ["Antal Brown"], ["Gerard Schwarz"], ["Valeri Gergiev"], ["Charles Dutoit"], ["Michael Tilson Thomas"], ["Igor Stravinsky"], ["Paul Jorgensen"], ["Pierre Boulez"], ["Antal Dor\u00e1ti"], ["Seiji Ozawa"], ["Colin Davis"]]}}
{"result": "SELECT Name \nFROM conductor \nORDER BY Year_of_Work DESC", "match": {"match": true, "result": [["Robert Craft"], ["Antal Brown"], ["Gerard Schwarz"], ["Valeri Gergiev"], ["Charles Dutoit"], ["Michael Tilson Thomas"], ["Igor Stravinsky"], ["Paul Jorgensen"], ["Pierre Boulez"], ["Antal Dor\u00e1ti"], ["Seiji Ozawa"], ["Colin Davis"]]}}
{"result": "SELECT Name \nFROM conductor \nORDER BY Year_of_Work DESC \nLIMIT 1", "match": {"match": true, "result": [["Robert Craft"]]}}
{"result": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "match": {"match": true, "result": [["Robert Craft"]]}}
{"result": "SELECT T1.Name, T2.Orchestra \nFROM conductor AS T1 \nINNER JOIN orchestra AS T2 \nON T1.Conductor_ID = T2.Conductor_ID", "match": {"match": true, "result": [["Antal Dor\u00e1ti", "London Symphony Orchestra"], ["Igor Stravinsky", "Columbia Symphony Orchestra"], ["Colin Davis", "Royal Concertgebouw Orchestra"], ["Paul Jorgensen", "Royal Danish Orchestra"], ["Antal Brown", "Detroit Symphony Orchestra"], ["Charles Dutoit", "Montreal Symphony Orchestra"], ["Gerard Schwarz", "Seattle Symphony Orchestra"], ["Pierre Boulez", "Chicago Symphony Orchestra"], ["Valeri Gergiev", "Kirov Orchestra"], ["Robert Craft", "Philharmonia Orchestra"], ["Seiji Ozawa", "Orchestre de Paris"], ["Michael Tilson Thomas", "San Francisco Symphony Orchestra"]]}}
{"result": "SELECT T1.Name, T2.Orchestra \nFROM conductor AS T1 \nINNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID", "match": {"match": true, "result": [["Antal Dor\u00e1ti", "London Symphony Orchestra"], ["Igor Stravinsky", "Columbia Symphony Orchestra"], ["Colin Davis", "Royal Concertgebouw Orchestra"], ["Paul Jorgensen", "Royal Danish Orchestra"], ["Antal Brown", "Detroit Symphony Orchestra"], ["Charles Dutoit", "Montreal Symphony Orchestra"], ["Gerard Schwarz", "Seattle Symphony Orchestra"], ["Pierre Boulez", "Chicago Symphony Orchestra"], ["Valeri Gergiev", "Kirov Orchestra"], ["Robert Craft", "Philharmonia Orchestra"], ["Seiji Ozawa", "Orchestre de Paris"], ["Michael Tilson Thomas", "San Francisco Symphony Orchestra"]]}}
{"result": "SELECT T1.Name \nFROM conductor AS T1 \nJOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID \nGROUP BY T1.Name \nHAVING COUNT(T2.Orchestra_ID) > 1;", "match": {"match": true, "result": []}}
{"result": "SELECT T1.Name \nFROM conductor AS T1 \nJOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID \nGROUP BY T1.Name \nHAVING COUNT(DISTINCT T2.Orchestra_ID) > 1", "match": {"match": true, "result": []}}
{"result": "SELECT T.conductor_name, COUNT(T.conductor_id) as total_orchestras\nFROM (\n  SELECT c.Name AS conductor_name, o.Conductor_ID\n  FROM conductor c\n  JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\n  GROUP BY o.Conductor_ID\n) AS T\nGROUP BY T.conductor_name\nORDER BY total_orchestras DESC\nLIMIT 1", "match": {"match": false, "result": [["Valeri Gergiev", 1]], "gt": [["Michael Tilson Thomas"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name \nFROM conductor AS T1 \nJOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID \nGROUP BY T1.Name \nORDER BY COUNT(T2.Orchestra_ID) DESC \nLIMIT 1;", "match": {"match": false, "result": [["Valeri Gergiev"]], "gt": [["Michael Tilson Thomas"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name \nFROM conductor AS T1 \nJOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID \nWHERE T2.Year_of_Founded > 2008;", "match": {"match": true, "result": [["Igor Stravinsky"]]}}
{"result": "SELECT T1.Name \nFROM conductor AS T1 \nINNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID \nWHERE T2.Year_of_Founded > 2008", "match": {"match": true, "result": [["Igor Stravinsky"]]}}
{"result": "SELECT T1.Record_Company, COUNT(T1.Orchestra_ID) \nFROM orchestra AS T1\nGROUP BY T1.Record_Company", "match": {"match": true, "result": [["Columbia Masterworks", 1], ["Decca Records", 2], ["Delos Records", 1], ["Deutsche Grammophon", 1], ["EMI", 1], ["Koch Records / Naxos Records", 1], ["Kultur", 1], ["Mercury Records", 1], ["Philips", 1], ["Philips Classics Records", 1], ["RCA", 1]]}}
{"result": "SELECT Record_Company, COUNT(Orchestra_ID) AS Num_Orchestras\nFROM orchestra\nGROUP BY Record_Company", "match": {"match": true, "result": [["Columbia Masterworks", 1], ["Decca Records", 2], ["Delos Records", 1], ["Deutsche Grammophon", 1], ["EMI", 1], ["Koch Records / Naxos Records", 1], ["Kultur", 1], ["Mercury Records", 1], ["Philips", 1], ["Philips Classics Records", 1], ["RCA", 1]]}}
{"result": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(Major_Record_Format) ASC", "match": {"match": true, "result": [["CD / LP"], ["DVD"], ["CD"]]}}
{"result": "SELECT Major_Record_Format, COUNT(Orchestra_ID) AS Count\nFROM orchestra\nGROUP BY Major_Record_Format\nORDER BY Count DESC", "match": {"match": false, "result": [["CD", 10], ["DVD", 1], ["CD / LP", 1]], "gt": [["CD / LP"], ["DVD"], ["CD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Record_Company, COUNT(Orchestra_ID) as count\nFROM orchestra\nGROUP BY Record_Company\nORDER BY count DESC\nLIMIT 1", "match": {"match": false, "result": [["Decca Records", 2]], "gt": [["Decca Records"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Record_Company \nFROM orchestra \nGROUP BY Record_Company \nORDER BY COUNT(Orchestra_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [["Decca Records"]]}}
{"result": "SELECT T2.Orchestra \nFROM performance AS T1 \nLEFT JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID \nWHERE T1.Performance_ID IS NULL", "match": {"match": false, "result": [], "gt": [["San Francisco Symphony Orchestra"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT t2.`Orchestra`, t2.`Year_of_Founded`, t2.`Major_Record_Format`\nFROM `conductor` AS t1\nJOIN `orchestra` AS t2 ON t1.`Conductor_ID` = t2.`Conductor_ID`\nJOIN `performance` AS t3 ON t2.`Orchestra_ID` = t3.`Orchestra_ID`\nWHERE t3.`Performance_ID` IS NULL", "match": {"match": false, "result": [], "gt": [["San Francisco Symphony Orchestra"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T4.Record_Company \nFROM orchestra AS T1 \nJOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID \nJOIN show AS T3 ON T2.Performance_ID = T3.Performance_ID \nJOIN conductor AS T4 ON T1.Conductor_ID = T4.Conductor_ID \nWHERE T1.Year_of_Founded < 2003 \nINTERSECT \nSELECT T4.Record_Company \nFROM orchestra AS T1 \nJOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID \nJOIN show AS T3 ON T2.Performance_ID = T3.Performance_ID \nJOIN conductor AS T4 ON T1.Conductor_ID = T4.Conductor_ID \nWHERE T1.Year_of_Founded > 2003", "match": {"match": false, "error": "Query execution failed with error: no such column: T4.Record_Company"}}
{"result": "SELECT Record_Company \nFROM orchestra \nWHERE Year_of_Founded < 2003 \nINTERSECT \nSELECT Record_Company \nFROM orchestra \nWHERE Year_of_Founded > 2003", "match": {"match": true, "result": [["Decca Records"]]}}
{"result": "SELECT COUNT(Orchestra_ID) \nFROM orchestra \nWHERE Major_Record_Format IN ('CD', 'DVD');", "match": {"match": true, "result": [[11]]}}
{"result": "SELECT COUNT(T1.Orchestra_ID) \nFROM orchestra AS T1 \nJOIN performance AS T2 ON T2.Orchestra_ID = T1.Orchestra_ID \nWHERE T1.Major_Record_Format IN ('CD', 'DVD');", "match": {"match": false, "result": [[10]], "gt": [[11]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T1.Year_of_Founded \nFROM orchestra AS T1\nJOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID\nGROUP BY T1.Year_of_Founded\nHAVING COUNT(T2.Performance_ID) > 1", "match": {"match": false, "result": [[2002.0], [2003.0], [2008.0]], "gt": [], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.`Year_of_Founded` \nFROM performance AS T1 \nJOIN orchestra AS T2 ON T1.`Orchestra_ID` = T2.`Orchestra_ID` \nGROUP BY T2.`Year_of_Founded` \nHAVING COUNT(T1.`Performance_ID`) > 1", "match": {"match": false, "result": [[2002.0], [2003.0], [2008.0]], "gt": [], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(ID) FROM Highschooler", "match": {"match": true, "result": [[16]]}}
{"result": "SELECT COUNT(ID) FROM Highschooler", "match": {"match": true, "result": [[16]]}}
{"result": "SELECT name, grade FROM Highschooler", "match": {"match": true, "result": [["Jordan", 9], ["Gabriel", 9], ["Tiffany", 9], ["Cassandra", 9], ["Haley", 10], ["Andrew", 10], ["Kris", 10], ["Brittany", 10], ["Alexis", 11], ["Austin", 11], ["Gabriel", 11], ["Jessica", 11], ["Jordan", 12], ["John", 12], ["Kyle", 12], ["Logan", 12]]}}
{"result": "SELECT name, grade FROM Highschooler;", "match": {"match": true, "result": [["Jordan", 9], ["Gabriel", 9], ["Tiffany", 9], ["Cassandra", 9], ["Haley", 10], ["Andrew", 10], ["Kris", 10], ["Brittany", 10], ["Alexis", 11], ["Austin", 11], ["Gabriel", 11], ["Jessica", 11], ["Jordan", 12], ["John", 12], ["Kyle", 12], ["Logan", 12]]}}
{"result": "SELECT grade FROM Highschooler", "match": {"match": true, "result": [[9], [9], [9], [9], [10], [10], [10], [10], [11], [11], [11], [11], [12], [12], [12], [12]]}}
{"result": "SELECT name, grade FROM Highschooler;", "match": {"match": false, "result": [["Jordan", 9], ["Gabriel", 9], ["Tiffany", 9], ["Cassandra", 9], ["Haley", 10], ["Andrew", 10], ["Kris", 10], ["Brittany", 10], ["Alexis", 11], ["Austin", 11], ["Gabriel", 11], ["Jessica", 11], ["Jordan", 12], ["John", 12], ["Kyle", 12], ["Logan", 12]], "gt": [[9], [9], [9], [9], [10], [10], [10], [10], [11], [11], [11], [11], [12], [12], [12], [12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT grade FROM Highschooler WHERE name = 'Kyle'", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT grade FROM Highschooler WHERE name = 'Kyle'", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT name FROM Highschooler WHERE grade = 10", "match": {"match": true, "result": [["Haley"], ["Andrew"], ["Kris"], ["Brittany"]]}}
{"result": "SELECT name \nFROM Highschooler \nWHERE grade = 10;", "match": {"match": true, "result": [["Haley"], ["Andrew"], ["Kris"], ["Brittany"]]}}
{"result": "SELECT ID FROM Highschooler WHERE name = 'Kyle'", "match": {"match": true, "result": [[1934]]}}
{"result": "SELECT ID FROM Highschooler WHERE name = 'Kyle'", "match": {"match": true, "result": [[1934]]}}
{"result": "SELECT COUNT(*) \nFROM Highschooler \nWHERE grade BETWEEN 9 AND 10;", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT COUNT(*) FROM Highschooler WHERE grade BETWEEN 9 AND 10", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT grade, COUNT(ID) FROM Highschooler GROUP BY grade", "match": {"match": true, "result": [[9, 4], [10, 4], [11, 4], [12, 4]]}}
{"result": "SELECT grade, COUNT(*) \nFROM Highschooler \nGROUP BY grade", "match": {"match": true, "result": [[9, 4], [10, 4], [11, 4], [12, 4]]}}
{"result": "SELECT grade ,  COUNT(*) as count\nFROM Highschooler\nGROUP BY grade\nORDER BY count DESC\nLIMIT 1;", "match": {"match": false, "result": [[12, 4]], "gt": [[12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT grade, COUNT(ID) as count\nFROM Highschooler\nGROUP BY grade\nORDER BY count DESC\nLIMIT 1;", "match": {"match": false, "result": [[12, 4]], "gt": [[12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4", "match": {"match": true, "result": [[9], [10], [11], [12]]}}
{"result": "SELECT grade \nFROM Highschooler \nGROUP BY grade \nHAVING COUNT(name) >= 4;", "match": {"match": true, "result": [[9], [10], [11], [12]]}}
{"result": "SELECT T1.student_id, COUNT(T1.student_id) \nFROM Friend AS T1 GROUP BY T1.student_id;", "match": {"match": true, "result": [[1101, 1], [1247, 2], [1304, 1], [1316, 1], [1381, 1], [1468, 2], [1501, 1], [1510, 2], [1661, 1], [1689, 2], [1709, 1], [1782, 3], [1911, 1], [1934, 1]]}}
{"result": "SELECT H1.name, COUNT(*) as num_friends\nFROM Highschooler H1\nJOIN Friend F ON H1.ID = F.student_id\nGROUP BY H1.name", "match": {"match": false, "result": [["Alexis", 2], ["Andrew", 3], ["Austin", 1], ["Cassandra", 1], ["Gabriel", 3], ["Haley", 1], ["Jessica", 1], ["Jordan", 3], ["Kris", 2], ["Kyle", 1], ["Logan", 1], ["Tiffany", 1]], "gt": [[1101, 1], [1247, 2], [1304, 1], [1316, 1], [1381, 1], [1468, 2], [1501, 1], [1510, 2], [1661, 1], [1689, 2], [1709, 1], [1782, 3], [1911, 1], [1934, 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name, COUNT(*) AS num_friends \nFROM Highschooler \nGROUP BY name", "match": {"match": false, "result": [["Alexis", 1], ["Andrew", 1], ["Austin", 1], ["Brittany", 1], ["Cassandra", 1], ["Gabriel", 2], ["Haley", 1], ["Jessica", 1], ["John", 1], ["Jordan", 2], ["Kris", 1], ["Kyle", 1], ["Logan", 1], ["Tiffany", 1]], "gt": [["Haley", 1], ["Alexis", 2], ["Jordan", 1], ["Austin", 1], ["Tiffany", 1], ["Kris", 2], ["Jessica", 1], ["Jordan", 2], ["Logan", 1], ["Gabriel", 2], ["Cassandra", 1], ["Andrew", 3], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name, COUNT(*) as friends \nFROM Highschooler \nLEFT JOIN Friend \nON Highschooler.ID = Friend.student_id \nGROUP BY Highschooler.ID", "match": {"match": false, "result": [["John", 1], ["Haley", 1], ["Alexis", 2], ["Jordan", 1], ["Austin", 1], ["Tiffany", 1], ["Kris", 2], ["Jessica", 1], ["Jordan", 2], ["Brittany", 1], ["Logan", 1], ["Gabriel", 2], ["Cassandra", 1], ["Andrew", 3], ["Gabriel", 1], ["Kyle", 1]], "gt": [["Haley", 1], ["Alexis", 2], ["Jordan", 1], ["Austin", 1], ["Tiffany", 1], ["Kris", 2], ["Jessica", 1], ["Jordan", 2], ["Logan", 1], ["Gabriel", 2], ["Cassandra", 1], ["Andrew", 3], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name FROM Highschooler WHERE ID IN (\n  SELECT friend_id \n  FROM Friend \n  GROUP BY friend_id \n  ORDER BY COUNT(friend_id) DESC LIMIT 1\n)", "match": {"match": false, "result": [["Kyle"]], "gt": [["Andrew"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID IN (\n  SELECT student_id \n  FROM Friend \n  GROUP BY student_id \n  ORDER BY COUNT(DISTINCT friend_id) DESC \n  LIMIT 1\n)", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "SELECT name FROM Highschooler WHERE ID IN (\n  SELECT student_id \n  FROM Friend \n  GROUP BY student_id \n  HAVING COUNT(*) >= 3\n)", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID IN (\n  SELECT student_id \n  FROM Friend \n  GROUP BY student_id \n  HAVING COUNT(*) >= 3\n  UNION\n  SELECT friend_id \n  FROM Friend \n  GROUP BY friend_id \n  HAVING COUNT(*) >= 3\n)", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "SELECT T2.name \nFROM Friend AS T1 \nJOIN Highschooler AS T2 ON T1.friend_id = T2.ID \nWHERE T1.student_id = ( SELECT ID FROM Highschooler WHERE name = 'Kyle' );", "match": {"match": true, "result": [["Jordan"]]}}
{"result": "SELECT T1.name \nFROM Highschooler AS T1 \nJOIN Friend AS T2 ON T1.ID = T2.student_id \nJOIN Highschooler AS T3 ON T3.ID = T2.friend_id \nWHERE T3.name = 'Kyle';", "match": {"match": false, "result": [["Jessica"], ["Austin"]], "gt": [["Jordan"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) \nFROM Friend \nWHERE friend_id = ( SELECT ID FROM Highschooler WHERE name = 'Kyle' )", "match": {"match": false, "result": [[2]], "gt": [[1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) \nFROM Friend \nWHERE student_id = (SELECT ID \n                    FROM Highschooler \n                    WHERE name = 'Kyle')", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT ID \nFROM Highschooler \nWHERE ID NOT IN (SELECT student_id FROM Friend)", "match": {"match": true, "result": [[1025], [1641]]}}
{"result": "SELECT ID FROM Highschooler\nEXCEPT\nSELECT F1.student_id, F1.friend_id FROM Friend AS F1\nUNION ALL\nSELECT F2.student_id, F2.friend_id FROM Friend AS F2", "match": {"match": false, "error": "Query execution failed with error: SELECTs to the left and right of EXCEPT do not have the same number of result columns"}}
{"result": "SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)", "match": {"match": true, "result": [["Brittany"], ["John"]]}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID NOT IN (\n  SELECT student_id \n  FROM Friend\n)", "match": {"match": true, "result": [["Brittany"], ["John"]]}}
{"result": "SELECT ID \nFROM Highschooler \nWHERE ID IN (SELECT friend_id FROM Friend) \nAND ID IN (SELECT liked_id FROM Likes)", "match": {"match": true, "result": [[1101], [1247], [1304], [1468], [1501], [1689], [1709], [1934]]}}
{"result": "SELECT DISTINCT T1.ID\nFROM Highschooler T1\nWHERE T1.ID IN (SELECT T2.student_id FROM Friend T2)\n  AND T1.ID IN (SELECT T3.student_id FROM Likes T3)", "match": {"match": false, "result": [[1247], [1316], [1501], [1689], [1709], [1782], [1911], [1934]], "gt": [[1101], [1247], [1304], [1468], [1501], [1689], [1709], [1934]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T1.name \nFROM Highschooler AS T1 \nJOIN Friend AS T2 ON T1.ID = T2.student_id \nJOIN Likes AS T3 ON T1.ID = T3.student_id", "match": {"match": false, "result": [["Gabriel"], ["Cassandra"], ["Andrew"], ["Alexis"], ["Jessica"], ["Austin"], ["Kyle"]], "gt": [["Alexis"], ["Cassandra"], ["Gabriel"], ["Haley"], ["Jessica"], ["Jordan"], ["Kris"], ["Kyle"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.name \nFROM (\n  SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend UNION SELECT student_id FROM Likes)\n  INTERSECT\n  SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend UNION SELECT liked_id FROM Likes)\n) AS T", "match": {"match": false, "result": [["Alexis"], ["Andrew"], ["Austin"], ["Brittany"], ["Cassandra"], ["Gabriel"], ["Haley"], ["Jessica"], ["John"], ["Jordan"], ["Kris"], ["Kyle"], ["Logan"], ["Tiffany"]], "gt": [["Alexis"], ["Cassandra"], ["Gabriel"], ["Haley"], ["Jessica"], ["Jordan"], ["Kris"], ["Kyle"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT student_id, COUNT(liked_id) \nFROM Likes \nGROUP BY student_id", "match": {"match": true, "result": [[1025, 1], [1247, 1], [1316, 1], [1501, 1], [1641, 1], [1689, 1], [1709, 1], [1782, 1], [1911, 1], [1934, 1]]}}
{"result": "SELECT student_id, COUNT(*) \nFROM Likes \nGROUP BY student_id", "match": {"match": true, "result": [[1025, 1], [1247, 1], [1316, 1], [1501, 1], [1641, 1], [1689, 1], [1709, 1], [1782, 1], [1911, 1], [1934, 1]]}}
{"result": "SELECT h.name, COUNT(*) as likes\nFROM Highschooler h\nJOIN Likes l ON h.ID = l.student_id\nGROUP BY h.name;", "match": {"match": false, "result": [["Alexis", 1], ["Andrew", 1], ["Austin", 1], ["Brittany", 1], ["Cassandra", 1], ["Gabriel", 2], ["Jessica", 1], ["John", 1], ["Kyle", 1]], "gt": [["John", 1], ["Alexis", 1], ["Austin", 1], ["Jessica", 1], ["Brittany", 1], ["Gabriel", 1], ["Cassandra", 1], ["Andrew", 1], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name, COUNT(liked_id) FROM Highschooler \nJOIN Likes ON Highschooler.ID = Likes.student_id \nGROUP BY name", "match": {"match": false, "result": [["Alexis", 1], ["Andrew", 1], ["Austin", 1], ["Brittany", 1], ["Cassandra", 1], ["Gabriel", 2], ["Jessica", 1], ["John", 1], ["Kyle", 1]], "gt": [["John", 1], ["Alexis", 1], ["Austin", 1], ["Jessica", 1], ["Brittany", 1], ["Gabriel", 1], ["Cassandra", 1], ["Andrew", 1], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name FROM Highschooler WHERE ID = ( SELECT student_id FROM Likes GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1 )", "match": {"match": true, "result": [["John"]]}}
{"result": "SELECT T.name \nFROM (\n  SELECT L.student_id, COUNT(*) as likes \n  FROM Likes L \n  GROUP BY L.student_id \n  ORDER BY likes DESC \n  LIMIT 1\n) T \nJOIN Highschooler H ON T.student_id = H.ID", "match": {"match": false, "error": "Query execution failed with error: no such column: T.name"}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID IN (\n    SELECT student_id \n    FROM Likes \n    GROUP BY student_id \n    HAVING COUNT(liked_id) >= 2\n);", "match": {"match": true, "result": []}}
{"result": "SELECT name FROM Highschooler WHERE ID IN ( SELECT liked_id FROM Likes GROUP BY liked_id HAVING COUNT(liked_id) >= 2 );", "match": {"match": false, "result": [["Kris"], ["Cassandra"]], "gt": [], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.name \nFROM (SELECT name, COUNT(T2.student_id) as num_friends \n      FROM Highschooler \n      LEFT JOIN Friend T2 ON Highschooler.ID = T2.student_id \n      GROUP BY name) T \nWHERE T.num_friends >= 2 AND T.grade > 5", "match": {"match": false, "error": "Query execution failed with error: no such column: T.grade"}}
{"result": "SELECT name FROM Highschooler \nWHERE grade > 5 AND ID IN ( SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) >= 2 )", "match": {"match": true, "result": [["Alexis"], ["Kris"], ["Jordan"], ["Gabriel"], ["Andrew"]]}}
{"result": "SELECT COUNT(*) \nFROM Likes \nWHERE student_id = ( SELECT ID FROM Highschooler WHERE name = 'Kyle' );", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(*) \nFROM Likes \nWHERE student_id = (\n  SELECT ID \n  FROM Highschooler \n  WHERE name = 'Kyle'\n)", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT AVG(T1.grade) \nFROM Highschooler T1 \nJOIN Friend T2 ON T1.ID = T2.student_id OR T1.ID = T2.friend_id", "match": {"match": false, "result": [[10.5]], "gt": [[10.428571428571429]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(T2.grade) \nFROM Friend AS T1 \nJOIN Highschooler AS T2 ON T1.student_id = T2.ID", "match": {"match": false, "result": [[10.25]], "gt": [[10.428571428571429]], "error": "Query result does not match ground truth."}}
{"result": "SELECT grade FROM Highschooler \nWHERE ID NOT IN (SELECT student_id FROM Friend)", "match": {"match": false, "result": [[10], [12]], "gt": [[10]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MIN(grade) \nFROM Highschooler \nWHERE ID NOT IN (SELECT student_id FROM Friend)", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT DISTINCT o.state \nFROM Owners o\nINTERSECT\nSELECT DISTINCT p.state \nFROM Professionals p", "match": {"match": true, "result": [["Indiana"], ["Mississippi"], ["Wisconsin"]]}}
{"result": "SELECT DISTINCT state \nFROM Owners \nINTERSECT \nSELECT DISTINCT state \nFROM Professionals", "match": {"match": true, "result": [["Indiana"], ["Mississippi"], ["Wisconsin"]]}}
{"result": "SELECT AVG(T2.age) \nFROM Treatments AS T1 \nJOIN Dogs AS T2 ON T1.dog_id = T2.dog_id", "match": {"match": false, "result": [[5.466666666666667]], "gt": [[5.111111111111111]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(d.age) \nFROM Dogs d \nJOIN Treatments t ON d.dog_id = t.dog_id", "match": {"match": false, "result": [[5.466666666666667]], "gt": [[5.111111111111111]], "error": "Query result does not match ground truth."}}
{"result": "SELECT p.professional_id, p.last_name, p.cell_number \nFROM Professionals p\nWHERE p.state = 'Indiana' \nOR p.professional_id IN (\n  SELECT t.professional_id\n  FROM Treatments t\n  GROUP BY t.professional_id\n  HAVING COUNT(t.treatment_id) > 2\n)", "match": {"match": true, "result": [[1, "Braun", "(275)939-2435x80863"], [8, "Hyatt", "328.842.3792"], [9, "Kshlerin", "962-983-8109x3509"]]}}
{"result": "SELECT `professional_id`, `last_name`, `cell_number` \nFROM `Professionals` \nWHERE `state` = 'IN' OR `professional_id` IN ( SELECT `professional_id` \nFROM `Treatments` \nGROUP BY `professional_id` \nHAVING COUNT(`treatment_id`) > 2 );", "match": {"match": false, "result": [[9, "Kshlerin", "962-983-8109x3509"]], "gt": [[1, "Braun", "(275)939-2435x80863"], [8, "Hyatt", "328.842.3792"], [9, "Kshlerin", "962-983-8109x3509"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name \nFROM Dogs \nWHERE dog_id IN (\n  SELECT dog_id \n  FROM Treatments \n  GROUP BY dog_id \n  HAVING SUM(cost_of_treatment) < 1000\n);", "match": {"match": false, "result": [["Kacey"], ["Hipolito"], ["Houston"], ["Narciso"], ["Holden"], ["Jesus"]], "gt": [["Kacey"], ["Hipolito"], ["Mavis"], ["Houston"], ["Jeffrey"], ["Merritt"], ["Narciso"], ["George"], ["Bessie"], ["Betty"], ["Holden"], ["Jesus"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T1.name \nFROM Dogs T1 \nJOIN Treatments T2 ON T1.dog_id = T2.dog_id \nJOIN Charges T3 ON T2.cost_of_treatment = T3.charge_amount \nWHERE T3.charge_type = 'Treatment' AND T3.charge_amount <= 1000", "match": {"match": false, "result": [], "gt": [["Kacey"], ["Hipolito"], ["Mavis"], ["Houston"], ["Jeffrey"], ["Merritt"], ["Narciso"], ["George"], ["Bessie"], ["Betty"], ["Holden"], ["Jesus"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT first_name \nFROM `Professionals` \nWHERE first_name NOT IN (SELECT name FROM Dogs)", "match": {"match": false, "result": [["Taryn"], ["Jayson"], ["Olaf"], ["Vernice"], ["Danny"], ["Ruben"], ["Velva"], ["Karley"], ["Monte"], ["Domenica"], ["Brady"], ["Winfield"], ["Ericka"], ["Sigurd"], ["Lesly"]], "gt": [["Adelle"], ["Brady"], ["Cindy"], ["Danny"], ["Domenica"], ["Emelie"], ["Ericka"], ["Gay"], ["Heather"], ["Jaclyn"], ["Jayson"], ["Johann"], ["Kade"], ["Karley"], ["Lesly"], ["Lorenz"], ["Melisa"], ["Monte"], ["Nora"], ["Olaf"], ["Orlando"], ["Rachelle"], ["Rolando"], ["Ruben"], ["Sigurd"], ["Taryn"], ["Tre"], ["Velva"], ["Vernice"], ["Winfield"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT first_name \nFROM Professionals \nUNION \nSELECT first_name \nFROM Owners \nEXCEPT \nSELECT name \nFROM Dogs", "match": {"match": true, "result": [["Adelle"], ["Brady"], ["Cindy"], ["Danny"], ["Domenica"], ["Emelie"], ["Ericka"], ["Gay"], ["Heather"], ["Jaclyn"], ["Jayson"], ["Johann"], ["Kade"], ["Karley"], ["Lesly"], ["Lorenz"], ["Melisa"], ["Monte"], ["Nora"], ["Olaf"], ["Orlando"], ["Rachelle"], ["Rolando"], ["Ruben"], ["Sigurd"], ["Taryn"], ["Tre"], ["Velva"], ["Vernice"], ["Winfield"]]}}
{"result": "SELECT p.professional_id, r.role_code, p.email_address \nFROM Professionals p \nLEFT JOIN Treatments t ON p.professional_id = t.professional_id \nLEFT JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code \nLEFT JOIN Dogs d ON t.dog_id = d.dog_id \nLEFT JOIN Roles r ON p.role_code = r.role_code \nWHERE t.dog_id IS NULL;", "match": {"match": false, "error": "Query execution failed with error: no such table: Roles"}}
{"result": "SELECT p.`professional_id`, p.`role_code`, p.`email_address` \nFROM `Professionals` p \nLEFT JOIN `Treatments` t ON p.`professional_id` = t.`professional_id` \nWHERE t.`professional_id` IS NULL", "match": {"match": true, "result": [[1, "Employee", "deanna.schuster@example.com"], [2, "Employee", "lucile.shanahan@example.org"], [3, "Employee", "uboehm@example.org"], [11, "Employee", "west.eula@example.net"], [12, "Veterenarian", "marquardt.furman@example.org"], [13, "Veterenarian", "delphine29@example.com"], [15, "Employee", "jeichmann@example.com"]]}}
{"result": "SELECT O.owner_id, O.first_name, O.last_name \nFROM Owners O \nJOIN Dogs D ON O.owner_id = D.owner_id \nGROUP BY O.owner_id, O.first_name, O.last_name \nORDER BY COUNT(D.owner_id) DESC \nLIMIT 1", "match": {"match": true, "result": [[14, "Rachelle", "Funk"]]}}
{"result": "SELECT T1.owner_id, T1.first_name, T1.last_name\nFROM Owners AS T1\nJOIN Dogs AS T2 ON T1.owner_id = T2.owner_id\nGROUP BY T1.owner_id\nORDER BY COUNT(T2.dog_id) DESC\nLIMIT 1;", "match": {"match": true, "result": [[14, "Rachelle", "Funk"]]}}
{"result": "SELECT DISTINCT T2.professional_id, T2.role_code, T2.first_name \nFROM Treatments AS T1 \nJOIN Professionals AS T2 ON T1.professional_id = T2.professional_id \nGROUP BY T2.professional_id, T2.role_code, T2.first_name \nHAVING COUNT(T1.treatment_id) >= 2", "match": {"match": true, "result": [[4, "Veterenarian", "Vernice"], [6, "Veterenarian", "Ruben"], [8, "Employee", "Karley"], [9, "Veterenarian", "Monte"], [10, "Employee", "Domenica"], [14, "Employee", "Sigurd"]]}}
{"result": "SELECT T1.professional_id, T1.role_code, T1.first_name \nFROM Professionals AS T1\nJOIN (\n  SELECT professional_id \n  FROM Treatments \n  GROUP BY professional_id \n  HAVING COUNT(dog_id) > 1\n) AS T2 ON T1.professional_id = T2.professional_id", "match": {"match": true, "result": [[4, "Veterenarian", "Vernice"], [6, "Veterenarian", "Ruben"], [8, "Employee", "Karley"], [9, "Veterenarian", "Monte"], [10, "Employee", "Domenica"], [14, "Employee", "Sigurd"]]}}
{"result": "SELECT T3.breed_name \nFROM Dogs AS T1 \nJOIN Breeds AS T2 ON T1.breed_code = T2.breed_code \nJOIN (SELECT breed_code, COUNT(dog_id) as most_dogs \n      FROM Dogs \n      GROUP BY breed_code \n      ORDER BY most_dogs DESC \n      LIMIT 1) AS T3 ON T2.breed_code = T3.breed_code", "match": {"match": false, "error": "Query execution failed with error: no such column: T3.breed_name"}}
{"result": "SELECT B.breed_name \nFROM Breeds B \nJOIN Dogs D ON B.breed_code = D.breed_code \nGROUP BY B.breed_name \nORDER BY COUNT(B.breed_code) DESC \nLIMIT 1", "match": {"match": true, "result": [["Bulldog"]]}}
{"result": "SELECT T.owner_id, T.last_name\nFROM (\n  SELECT T1.owner_id, T1.last_name, COUNT(T2.treatment_id) as total_treatments\n  FROM Owners T1\n  JOIN Dogs T2 ON T1.owner_id = T2.owner_id\n  JOIN Treatments T3 ON T2.dog_id = T3.dog_id\n  GROUP BY T1.owner_id, T1.last_name\n) T\nORDER BY T.total_treatments DESC\nLIMIT 1", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.treatment_id"}}
{"result": "SELECT o.owner_id, o.last_name \nFROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id \nJOIN Treatments t ON d.dog_id = t.dog_id \nGROUP BY o.owner_id \nORDER BY SUM(t.cost_of_treatment) DESC \nLIMIT 1;", "match": {"match": false, "result": [[3, "Stoltenberg"]], "gt": [[14, "Funk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT t2.treatment_type_description \nFROM Charges c \nJOIN Treatments t ON c.charge_id = t.cost_of_treatment \nJOIN Treatment_Types t2 ON t.treatment_type_code = t2.treatment_type_code \nGROUP BY t2.treatment_type_code \nORDER BY SUM(c.charge_amount) ASC \nLIMIT 1", "match": {"match": false, "result": [], "gt": [["Take for a Walk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT tt.treatment_type_description \nFROM Treatment_Types tt \nJOIN Treatments t ON tt.treatment_type_code = t.treatment_type_code \nGROUP BY tt.treatment_type_description \nORDER BY SUM(t.cost_of_treatment) ASC \nLIMIT 1;", "match": {"match": true, "result": [["Take for a Walk"]]}}
{"result": "```sql\nSELECT o.owner_id, o.zip_code\nFROM Owners o\nJOIN (\n  SELECT d.owner_id, SUM(c.charge_amount) as total_cost\n  FROM Dogs d\n  JOIN Charges c ON d.dog_id = c.charge_id\n  GROUP BY d.owner_id\n) as total_costs ON o.owner_id = total_costs.owner_id\nORDER BY total_costs.total_cost DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [[1, "93165"]], "gt": [[3, "02647"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.owner_id, T1.zip_code \nFROM Owners AS T1 \nJOIN (\n  SELECT owner_id, SUM(cost_of_treatment) as total_spent \n  FROM Treatments \n  GROUP BY owner_id \n  ORDER BY total_spent DESC \n  LIMIT 1 \n) AS T2 \nON T1.owner_id = T2.owner_id", "match": {"match": false, "error": "Query execution failed with error: no such column: owner_id"}}
{"result": "SELECT DISTINCT T2.professional_id, T2.cell_number \nFROM Treatments AS T1 \nJOIN Professionals AS T2 ON T2.professional_id = T1.professional_id \nGROUP BY T1.professional_id \nHAVING COUNT(DISTINCT T1.treatment_type_code) >= 2", "match": {"match": false, "result": [[6, "139-321-7313"], [9, "962-983-8109x3509"], [10, "461-801-2600"], [14, "1-185-137-1945x409"]], "gt": [[4, "00230569697"], [6, "139-321-7313"], [8, "328.842.3792"], [9, "962-983-8109x3509"], [10, "461-801-2600"], [14, "1-185-137-1945x409"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.professional_id, T.cell_number\nFROM (\n  SELECT professional_id, COUNT(treatment_id) as count\n  FROM Treatments\n  GROUP BY professional_id\n  HAVING COUNT(treatment_id) >= 2\n) T\nJOIN Professionals ON T.professional_id = Professionals.professional_id", "match": {"match": false, "error": "Query execution failed with error: no such column: T.cell_number"}}
{"result": "SELECT T1.first_name, T1.last_name \nFROM Professionals T1 \nJOIN Treatments T2 ON T1.professional_id = T2.professional_id \nWHERE T2.cost_of_treatment < ( SELECT AVG(cost_of_treatment) FROM Treatments );", "match": {"match": false, "result": [["Domenica", "Jacobs"], ["Vernice", "Tillman"], ["Karley", "Hyatt"], ["Vernice", "Tillman"], ["Ruben", "O'Reilly"], ["Domenica", "Jacobs"], ["Monte", "Kshlerin"], ["Monte", "Kshlerin"]], "gt": [["Taryn", "Braun"], ["Jayson", "Ullrich"], ["Olaf", "Watsica"], ["Vernice", "Tillman"], ["Danny", "Considine"], ["Ruben", "O'Reilly"], ["Velva", "Hayes"], ["Karley", "Hyatt"], ["Monte", "Kshlerin"], ["Domenica", "Jacobs"], ["Brady", "Pouros"], ["Winfield", "Christiansen"], ["Ericka", "Murazik"], ["Sigurd", "Frami"], ["Lesly", "Walter"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.first_name, T1.last_name \nFROM Professionals AS T1 \nJOIN Treatments AS T2 ON T1.professional_id = T2.professional_id \nWHERE T2.cost_of_treatment < ( SELECT AVG(cost_of_treatment) FROM Treatments );", "match": {"match": false, "result": [["Domenica", "Jacobs"], ["Vernice", "Tillman"], ["Karley", "Hyatt"], ["Vernice", "Tillman"], ["Ruben", "O'Reilly"], ["Domenica", "Jacobs"], ["Monte", "Kshlerin"], ["Monte", "Kshlerin"]], "gt": [["Taryn", "Braun"], ["Jayson", "Ullrich"], ["Olaf", "Watsica"], ["Vernice", "Tillman"], ["Danny", "Considine"], ["Ruben", "O'Reilly"], ["Velva", "Hayes"], ["Karley", "Hyatt"], ["Monte", "Kshlerin"], ["Domenica", "Jacobs"], ["Brady", "Pouros"], ["Winfield", "Christiansen"], ["Ericka", "Murazik"], ["Sigurd", "Frami"], ["Lesly", "Walter"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.date_of_treatment, P.first_name \nFROM Treatments AS T1 \nJOIN Professionals AS P ON T1.professional_id = P.professional_id \nJOIN Dogs AS D ON T1.dog_id = D.dog_id", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.date_of_treatment"}}
{"result": "SELECT T2.date_of_treatment, P1.first_name \nFROM Treatments AS T1 \nJOIN Professionals AS P1 ON T1.professional_id = P1.professional_id \nJOIN Dogs AS D1 ON T1.dog_id = D1.dog_id \nJOIN Treatments AS T2 ON T1.dog_id = T2.dog_id", "match": {"match": false, "result": [["2018-03-08 05:26:23", "Monte"], ["2018-03-14 19:10:40", "Monte"], ["2018-03-19 04:39:54", "Monte"], ["2018-03-15 20:25:34", "Domenica"], ["2018-03-08 05:26:23", "Vernice"], ["2018-03-14 19:10:40", "Vernice"], ["2018-03-19 04:39:54", "Vernice"], ["2018-03-01 04:14:46", "Karley"], ["2018-03-24 22:25:58", "Karley"], ["2018-03-23 13:52:10", "Sigurd"], ["2018-02-28 17:09:43", "Vernice"], ["2018-03-04 20:33:43", "Vernice"], ["2018-03-11 04:23:15", "Vernice"], ["2018-03-10 11:45:58", "Sigurd"], ["2018-03-13 12:22:58", "Sigurd"], ["2018-03-01 04:14:46", "Ruben"], ["2018-03-24 22:25:58", "Ruben"], ["2018-03-08 05:26:23", "Domenica"], ["2018-03-14 19:10:40", "Domenica"], ["2018-03-19 04:39:54", "Domenica"], ["2018-02-28 17:09:43", "Velva"], ["2018-03-04 20:33:43", "Velva"], ["2018-03-11 04:23:15", "Velva"], ["2018-03-10 11:45:58", "Danny"], ["2018-03-13 12:22:58", "Danny"], ["2018-03-16 10:27:36", "Monte"], ["2018-02-26 09:08:53", "Karley"], ["2018-02-28 17:09:43", "Monte"], ["2018-03-04 20:33:43", "Monte"], ["2018-03-11 04:23:15", "Monte"], ["2018-03-15 19:10:02", "Ruben"]], "gt": [["2018-03-19 04:39:54", "Monte"], ["2018-03-15 20:25:34", "Domenica"], ["2018-03-08 05:26:23", "Vernice"], ["2018-03-01 04:14:46", "Karley"], ["2018-03-23 13:52:10", "Sigurd"], ["2018-03-11 04:23:15", "Vernice"], ["2018-03-10 11:45:58", "Sigurd"], ["2018-03-24 22:25:58", "Ruben"], ["2018-03-14 19:10:40", "Domenica"], ["2018-02-28 17:09:43", "Velva"], ["2018-03-13 12:22:58", "Danny"], ["2018-03-16 10:27:36", "Monte"], ["2018-02-26 09:08:53", "Karley"], ["2018-03-04 20:33:43", "Monte"], ["2018-03-15 19:10:02", "Ruben"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT \n    tt.treatment_type_description,\n    t.cost_of_treatment\nFROM \n    Treatments t\nINNER JOIN \n    Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;\n```", "match": {"match": false, "result": [["Take for a Walk", 567], ["Vaccination", 147], ["Physical examination", 429], ["Vaccination", 266], ["Vaccination", 668], ["Physical examination", 313], ["Physical examination", 852], ["Physical examination", 407], ["Take for a Walk", 139], ["Take for a Walk", 681], ["Vaccination", 514], ["Physical examination", 428], ["Vaccination", 945], ["Take for a Walk", 349], ["Take for a Walk", 656]], "gt": [[567, "Take for a Walk"], [147, "Vaccination"], [429, "Physical examination"], [266, "Vaccination"], [668, "Vaccination"], [313, "Physical examination"], [852, "Physical examination"], [407, "Physical examination"], [139, "Take for a Walk"], [681, "Take for a Walk"], [514, "Vaccination"], [428, "Physical examination"], [945, "Vaccination"], [349, "Take for a Walk"], [656, "Take for a Walk"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT \n    T.treatment_id,\n    T.cost_of_treatment,\n    TT.treatment_type_description\nFROM \n    Treatments T\nINNER JOIN \n    Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code;\n```", "match": {"match": false, "result": [[1, 567, "Take for a Walk"], [2, 147, "Vaccination"], [3, 429, "Physical examination"], [4, 266, "Vaccination"], [5, 668, "Vaccination"], [6, 313, "Physical examination"], [7, 852, "Physical examination"], [8, 407, "Physical examination"], [9, 139, "Take for a Walk"], [10, 681, "Take for a Walk"], [11, 514, "Vaccination"], [12, 428, "Physical examination"], [13, 945, "Vaccination"], [14, 349, "Take for a Walk"], [15, 656, "Take for a Walk"]], "gt": [[567, "Take for a Walk"], [147, "Vaccination"], [429, "Physical examination"], [266, "Vaccination"], [668, "Vaccination"], [313, "Physical examination"], [852, "Physical examination"], [407, "Physical examination"], [139, "Take for a Walk"], [681, "Take for a Walk"], [514, "Vaccination"], [428, "Physical examination"], [945, "Vaccination"], [349, "Take for a Walk"], [656, "Take for a Walk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT O.first_name, O.last_name, D.size_code\nFROM Owners O\nJOIN Dogs D ON O.owner_id = D.owner_id;", "match": {"match": true, "result": [["Jaclyn", "Stoltenberg", "LGE"], ["Gay", "Feil", "LGE"], ["Nora", "Haley", "MED"], ["Rachelle", "Funk", "LGE"], ["Emelie", "Mertz", "MED"], ["Johann", "Fisher", "MED"], ["Jaclyn", "Stoltenberg", "MED"], ["Rachelle", "Funk", "SML"], ["Melisa", "DuBuque", "MED"], ["Kade", "Rippin", "MED"], ["Cindy", "Schmitt", "LGE"], ["Orlando", "Price", "MED"], ["Rolando", "Prohaska", "SML"], ["Rachelle", "Funk", "MED"], ["Lorenz", "Nicolas", "MED"]]}}
{"result": "SELECT O.first_name, O.last_name, D.size_code \nFROM Owners O\nJOIN Dogs D ON O.owner_id = D.owner_id", "match": {"match": true, "result": [["Jaclyn", "Stoltenberg", "LGE"], ["Gay", "Feil", "LGE"], ["Nora", "Haley", "MED"], ["Rachelle", "Funk", "LGE"], ["Emelie", "Mertz", "MED"], ["Johann", "Fisher", "MED"], ["Jaclyn", "Stoltenberg", "MED"], ["Rachelle", "Funk", "SML"], ["Melisa", "DuBuque", "MED"], ["Kade", "Rippin", "MED"], ["Cindy", "Schmitt", "LGE"], ["Orlando", "Price", "MED"], ["Rolando", "Prohaska", "SML"], ["Rachelle", "Funk", "MED"], ["Lorenz", "Nicolas", "MED"]]}}
{"result": "```sql\nSELECT o.first_name, d.name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id;\n```", "match": {"match": true, "result": [["Jaclyn", "Kacey"], ["Gay", "Hipolito"], ["Nora", "Mavis"], ["Rachelle", "Houston"], ["Emelie", "Jeffrey"], ["Johann", "Merritt"], ["Jaclyn", "Narciso"], ["Rachelle", "George"], ["Melisa", "Bessie"], ["Kade", "Troy"], ["Cindy", "Betty"], ["Orlando", "Holden"], ["Rolando", "Jesus"], ["Rachelle", "Lyric"], ["Lorenz", "Evangeline"]]}}
{"result": "SELECT o.first_name, d.name \nFROM Owners o \nJOIN Dogs d ON o.owner_id = d.owner_id", "match": {"match": true, "result": [["Jaclyn", "Kacey"], ["Gay", "Hipolito"], ["Nora", "Mavis"], ["Rachelle", "Houston"], ["Emelie", "Jeffrey"], ["Johann", "Merritt"], ["Jaclyn", "Narciso"], ["Rachelle", "George"], ["Melisa", "Bessie"], ["Kade", "Troy"], ["Cindy", "Betty"], ["Orlando", "Holden"], ["Rolando", "Jesus"], ["Rachelle", "Lyric"], ["Lorenz", "Evangeline"]]}}
{"result": "```sql\nSELECT d.name, t.date_of_treatment\nFROM Dogs d\nJOIN Treatments t ON d.dog_id = t.dog_id\nJOIN Breeds b ON d.breed_code = b.breed_code\nJOIN Sizes s ON d.size_code = s.size_code\nWHERE b.breed_code = (SELECT breed_code FROM Breeds GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1)\nORDER BY d.name ASC;\n```", "match": {"match": false, "result": [["Evangeline", "2018-03-10 11:45:58"], ["Evangeline", "2018-03-13 12:22:58"], ["Hipolito", "2018-03-01 04:14:46"], ["Hipolito", "2018-03-24 22:25:58"], ["Narciso", "2018-02-26 09:08:53"]], "gt": [["Lyric", "2018-03-19 04:39:54"], ["Houston", "2018-03-15 20:25:34"], ["Lyric", "2018-03-08 05:26:23"], ["Lyric", "2018-03-14 19:10:40"], ["Kacey", "2018-03-15 19:10:02"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.name, T2.date_of_treatment \nFROM Dogs T1 \nJOIN Treatments T2 ON T1.dog_id = T2.dog_id \nJOIN Breeds T3 ON T1.breed_code = T3.breed_code \nJOIN (\n  SELECT breed_code, COUNT(*) as cnt \n  FROM Breeds \n  GROUP BY breed_code \n  ORDER BY cnt ASC \n  LIMIT 1\n) T4 ON T3.breed_code = T4.breed_code", "match": {"match": false, "result": [["Hipolito", "2018-03-01 04:14:46"], ["Evangeline", "2018-03-10 11:45:58"], ["Hipolito", "2018-03-24 22:25:58"], ["Evangeline", "2018-03-13 12:22:58"], ["Narciso", "2018-02-26 09:08:53"]], "gt": [["Lyric", "2018-03-19 04:39:54"], ["Houston", "2018-03-15 20:25:34"], ["Lyric", "2018-03-08 05:26:23"], ["Lyric", "2018-03-14 19:10:40"], ["Kacey", "2018-03-15 19:10:02"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT o.first_name, d.name \nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nWHERE o.state = 'VA'", "match": {"match": false, "result": [], "gt": [["Melisa", "Bessie"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT o.first_name, d.name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nWHERE o.state = 'VA';\n```", "match": {"match": false, "result": [], "gt": [["Melisa", "Bessie"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.date_arrived, T1.date_departed\nFROM Dogs T1\nJOIN Treatments T2 ON T1.dog_id = T2.dog_id;", "match": {"match": false, "result": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "gt": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT d.date_arrived, d.date_departed \nFROM Dogs d \nJOIN Treatments t ON d.dog_id = t.dog_id", "match": {"match": false, "result": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "gt": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.last_name \nFROM Dogs AS T1 \nJOIN Owners AS T2 ON T1.owner_id = T2.owner_id \nWHERE T1.age = ( SELECT MIN(age) FROM Dogs );", "match": {"match": false, "result": [["Nicolas"]], "gt": [["Feil"], ["Fisher"], ["Rippin"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.last_name \nFROM Owners AS T1 \nINNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id \nORDER BY T2.date_arrived \nLIMIT 1;", "match": {"match": false, "result": [["Fisher"]], "gt": [["Feil"], ["Fisher"], ["Rippin"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT email_address \nFROM `Professionals` \nWHERE state IN ('HI', 'WI');", "match": {"match": false, "result": [], "gt": [["uboehm@example.org"], ["mekhi.little@example.org"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT email_address \nFROM Professionals \nWHERE state IN ('HI', 'WI');", "match": {"match": false, "result": [], "gt": [["uboehm@example.org"], ["mekhi.little@example.org"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT \n    date_arrived,\n    date_departed\nFROM \n    Dogs;\n```", "match": {"match": true, "result": [["2017-09-08 20:10:13", "2018-03-25 06:58:44"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-25 10:14:05", "2018-03-25 10:25:46"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-10-25 00:55:34", "2018-03-25 04:50:22"], ["2017-04-15 09:25:31", "2018-03-25 13:07:04"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-10-16 20:06:21", "2018-03-25 02:47:40"], ["2018-01-17 11:44:16", "2018-03-25 06:46:07"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-07-25 15:19:07", "2018-03-25 15:05:16"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"]]}}
{"result": "SELECT `date_arrived`, `date_departed` \nFROM `Dogs`;", "match": {"match": true, "result": [["2017-09-08 20:10:13", "2018-03-25 06:58:44"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-25 10:14:05", "2018-03-25 10:25:46"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-10-25 00:55:34", "2018-03-25 04:50:22"], ["2017-04-15 09:25:31", "2018-03-25 13:07:04"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-10-16 20:06:21", "2018-03-25 02:47:40"], ["2018-01-17 11:44:16", "2018-03-25 06:46:07"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-07-25 15:19:07", "2018-03-25 15:05:16"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"]]}}
{"result": "SELECT COUNT(DISTINCT t.dog_id) \nFROM Treatments t;", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(*) \nFROM Dogs \nWHERE dog_id IN ( \n    SELECT dog_id \n    FROM Treatments \n);", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(DISTINCT professional_id) \nFROM Treatments", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT COUNT(DISTINCT professional_id) FROM Treatments", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT role_code, street, city, state \nFROM Professionals \nWHERE city LIKE '%West%';", "match": {"match": true, "result": [["Employee", "6915 Oberbrunner Point Suite 491\nGleasonville, LA ", "West Heidi", "Indiana"]]}}
{"result": "SELECT T1.role_code, T1.street, T1.city, T1.state \nFROM Professionals AS T1 \nINNER JOIN Owners AS T2 ON T1.professional_id = T2.owner_id \nWHERE T2.city LIKE '%West%'", "match": {"match": false, "result": [["Employee", "390 Bryce Drive\nNorth Dock, LA 65357-7228", "East Ila", "Connecticut"]], "gt": [["Employee", "6915 Oberbrunner Point Suite 491\nGleasonville, LA ", "West Heidi", "Indiana"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT first_name, last_name, email_address \nFROM Owners \nWHERE state LIKE '%North%';", "match": {"match": true, "result": [["Johann", "Fisher", "zboncak.madonna@example.net"], ["Cindy", "Schmitt", "wpfeffer@example.net"]]}}
{"result": "SELECT first_name, last_name, email_address \nFROM Owners \nWHERE state LIKE '%North%';", "match": {"match": true, "result": [["Johann", "Fisher", "zboncak.madonna@example.net"], ["Cindy", "Schmitt", "wpfeffer@example.net"]]}}
{"result": "SELECT COUNT(*) \nFROM Dogs \nWHERE age < ( SELECT AVG(age) FROM Dogs );", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(*) \nFROM Dogs \nWHERE age < (SELECT AVG(age) FROM Dogs);", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT cost_of_treatment \nFROM Treatments \nORDER BY date_of_treatment DESC \nLIMIT 1;", "match": {"match": true, "result": [[407]]}}
{"result": "SELECT MAX(cost_of_treatment) \nFROM Treatments", "match": {"match": false, "result": [[945]], "gt": [[407]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(dog_id) \nFROM Dogs \nLEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id \nWHERE Treatments.treatment_id IS NULL", "match": {"match": false, "error": "Query execution failed with error: ambiguous column name: dog_id"}}
{"result": "SELECT COUNT(DISTINCT `dog_id`) \nFROM `Treatments`", "match": {"match": false, "result": [[9]], "gt": [[6]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) \nFROM Owners \nWHERE owner_id NOT IN (SELECT owner_id FROM Dogs);", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(*) \nFROM Owners \nWHERE owner_id NOT IN (SELECT owner_id FROM Dogs);", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(*) \nFROM Professionals \nLEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id \nWHERE Treatments.treatment_id IS NULL", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT COUNT(*) \nFROM Professionals \nLEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id \nWHERE Treatments.professional_id IS NULL", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT name, age, weight \nFROM Dogs \nWHERE abandoned_yn = '1';", "match": {"match": true, "result": [["Kacey", "6", "7.57"], ["Lyric", "4", "4.36"], ["Evangeline", "1", "4.01"]]}}
{"result": "SELECT name, age, weight \nFROM Dogs \nWHERE abandoned_yn = '1'", "match": {"match": true, "result": [["Kacey", "6", "7.57"], ["Lyric", "4", "4.36"], ["Evangeline", "1", "4.01"]]}}
{"result": "SELECT AVG(age) as average_age FROM Dogs", "match": {"match": true, "result": [[5.066666666666666]]}}
{"result": "SELECT AVG(CAST(REPLACE(age, ' year', '') AS DECIMAL(5,2))) FROM Dogs", "match": {"match": true, "result": [[5.066666666666666]]}}
{"result": "SELECT MAX(age) FROM Dogs", "match": {"match": true, "result": [["9"]]}}
{"result": "SELECT age \nFROM Dogs \nORDER BY age DESC LIMIT 1", "match": {"match": true, "result": [["9"]]}}
{"result": "SELECT charge_type, charge_amount \nFROM Charges", "match": {"match": true, "result": [["Daily Accommodation", 98], ["Drugs", 322], ["Health Check", 640]]}}
{"result": "SELECT `charge_type`, `charge_amount` FROM `Charges`;", "match": {"match": true, "result": [["Daily Accommodation", 98], ["Drugs", 322], ["Health Check", 640]]}}
{"result": "SELECT MAX(`charge_amount`) \nFROM `Charges`", "match": {"match": true, "result": [[640]]}}
{"result": "SELECT MAX(T2.charge_amount) FROM Charges AS T2 INNER JOIN ( SELECT T1.charge_type, MAX(T1.charge_amount) AS max_amount FROM Charges AS T1 GROUP BY T1.charge_type ) AS T3 ON T2.charge_type = T3.charge_type", "match": {"match": true, "result": [[640]]}}
{"result": "SELECT email_address, cell_number, home_phone FROM Professionals", "match": {"match": true, "result": [["deanna.schuster@example.com", "(275)939-2435x80863", "+71(6)2898266914"], ["lucile.shanahan@example.org", "889-940-2676", "+02(1)0259033559"], ["uboehm@example.org", "(369)908-7311x065", "325-155-0801x7005"], ["lourdes.lowe@example.net", "00230569697", "312.216.3352"], ["mekhi.little@example.org", "011.193.9081x3186", "1-609-566-2752x25197"], ["jacynthe.mclaughlin@example.net", "139-321-7313", "+43(5)1132733868"], ["lambert62@example.org", "499-434-0215x1628", "022.529.0550x1319"], ["goyette.roosevelt@example.net", "328.842.3792", "891.475.2256"], ["schneider.kathryne@example.org", "962-983-8109x3509", "320-508-6023"], ["jerrod.bahringer@example.org", "461-801-2600", "(230)338-3342x585"], ["west.eula@example.net", "609-405-2990", "(920)304-4499x59146"], ["marquardt.furman@example.org", "1-181-670-9466", "246-951-0080x76716"], ["delphine29@example.com", "880-659-7577x736", "346.594.3739"], ["cole.margarita@example.org", "1-185-137-1945x409", "971.048.3763x9404"], ["jeichmann@example.com", "1-258-285-4707x8020", "1-138-287-3775"]]}}
{"result": "SELECT `first_name`, `last_name`, `email_address`, `cell_number`, `home_phone` FROM `Professionals`", "match": {"match": false, "result": [["Taryn", "Braun", "deanna.schuster@example.com", "(275)939-2435x80863", "+71(6)2898266914"], ["Jayson", "Ullrich", "lucile.shanahan@example.org", "889-940-2676", "+02(1)0259033559"], ["Olaf", "Watsica", "uboehm@example.org", "(369)908-7311x065", "325-155-0801x7005"], ["Vernice", "Tillman", "lourdes.lowe@example.net", "00230569697", "312.216.3352"], ["Danny", "Considine", "mekhi.little@example.org", "011.193.9081x3186", "1-609-566-2752x25197"], ["Ruben", "O'Reilly", "jacynthe.mclaughlin@example.net", "139-321-7313", "+43(5)1132733868"], ["Velva", "Hayes", "lambert62@example.org", "499-434-0215x1628", "022.529.0550x1319"], ["Karley", "Hyatt", "goyette.roosevelt@example.net", "328.842.3792", "891.475.2256"], ["Monte", "Kshlerin", "schneider.kathryne@example.org", "962-983-8109x3509", "320-508-6023"], ["Domenica", "Jacobs", "jerrod.bahringer@example.org", "461-801-2600", "(230)338-3342x585"], ["Brady", "Pouros", "west.eula@example.net", "609-405-2990", "(920)304-4499x59146"], ["Winfield", "Christiansen", "marquardt.furman@example.org", "1-181-670-9466", "246-951-0080x76716"], ["Ericka", "Murazik", "delphine29@example.com", "880-659-7577x736", "346.594.3739"], ["Sigurd", "Frami", "cole.margarita@example.org", "1-185-137-1945x409", "971.048.3763x9404"], ["Lesly", "Walter", "jeichmann@example.com", "1-258-285-4707x8020", "1-138-287-3775"]], "gt": [["deanna.schuster@example.com", "(275)939-2435x80863", "+71(6)2898266914"], ["lucile.shanahan@example.org", "889-940-2676", "+02(1)0259033559"], ["uboehm@example.org", "(369)908-7311x065", "325-155-0801x7005"], ["lourdes.lowe@example.net", "00230569697", "312.216.3352"], ["mekhi.little@example.org", "011.193.9081x3186", "1-609-566-2752x25197"], ["jacynthe.mclaughlin@example.net", "139-321-7313", "+43(5)1132733868"], ["lambert62@example.org", "499-434-0215x1628", "022.529.0550x1319"], ["goyette.roosevelt@example.net", "328.842.3792", "891.475.2256"], ["schneider.kathryne@example.org", "962-983-8109x3509", "320-508-6023"], ["jerrod.bahringer@example.org", "461-801-2600", "(230)338-3342x585"], ["west.eula@example.net", "609-405-2990", "(920)304-4499x59146"], ["marquardt.furman@example.org", "1-181-670-9466", "246-951-0080x76716"], ["delphine29@example.com", "880-659-7577x736", "346.594.3739"], ["cole.margarita@example.org", "1-185-137-1945x409", "971.048.3763x9404"], ["jeichmann@example.com", "1-258-285-4707x8020", "1-138-287-3775"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T1.breed_code, T2.size_code \nFROM Breeds AS T1 \nCROSS JOIN Sizes AS T2", "match": {"match": false, "result": [["BUL", "LGE"], ["BUL", "MED"], ["BUL", "SML"], ["ESK", "LGE"], ["ESK", "MED"], ["ESK", "SML"], ["HUS", "LGE"], ["HUS", "MED"], ["HUS", "SML"]], "gt": [["ESK", "LGE"], ["BUL", "LGE"], ["BUL", "MED"], ["HUS", "MED"], ["ESK", "SML"], ["HUS", "SML"], ["ESK", "MED"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT `breed_code`, `size_code` \nFROM `Dogs`", "match": {"match": true, "result": [["ESK", "LGE"], ["BUL", "LGE"], ["BUL", "MED"], ["HUS", "MED"], ["ESK", "SML"], ["HUS", "SML"], ["ESK", "MED"]]}}
{"result": "SELECT T2.first_name, TT.treatment_type_description\nFROM Treatments AS T1\nJOIN Professionals AS T2 ON T1.professional_id = T2.professional_id\nJOIN Treatment_Types AS TT ON T1.treatment_type_code = TT.treatment_type_code", "match": {"match": false, "result": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Vernice", "Physical examination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Karley", "Vaccination"], ["Monte", "Take for a Walk"], ["Ruben", "Take for a Walk"]], "gt": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Ruben", "Take for a Walk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT t.first_name, tt.treatment_type_description \nFROM Professionals t \nJOIN Treatments tr ON t.professional_id = tr.professional_id \nJOIN Treatment_Types tt ON tr.treatment_type_code = tt.treatment_type_code", "match": {"match": false, "result": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Vernice", "Physical examination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Karley", "Vaccination"], ["Monte", "Take for a Walk"], ["Ruben", "Take for a Walk"]], "gt": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Ruben", "Take for a Walk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(\"Name\") FROM singer", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT COUNT(\"Singer_ID\") FROM singer", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "match": {"match": true, "result": [["Abigail Johnson"], ["Susanne Klatten"], ["Gina Rinehart"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Alice Walton"], ["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "match": {"match": true, "result": [["Abigail Johnson"], ["Susanne Klatten"], ["Gina Rinehart"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Alice Walton"], ["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT \"Birth_Year\", \"Citizenship\" FROM \"singer\"", "match": {"match": true, "result": [[1944.0, "France"], [1948.0, "United States"], [1949.0, "United States"], [1942.0, "Chile"], [1940.0, "United States"], [1953.0, "Australia"], [1962.0, "Germany"], [1961.0, "United States"]]}}
{"result": "SELECT Birth_Year, Citizenship FROM `singer`", "match": {"match": true, "result": [[1944.0, "France"], [1948.0, "United States"], [1949.0, "United States"], [1942.0, "Chile"], [1940.0, "United States"], [1953.0, "Australia"], [1962.0, "Germany"], [1961.0, "United States"]]}}
{"result": "SELECT Name \nFROM singer \nWHERE Citizenship != \"France\";", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]]}}
{"result": "SELECT Name FROM singer WHERE Citizenship != 'French'", "match": {"match": false, "result": [["Liliane Bettencourt"], ["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]], "gt": [["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"]]}}
{"result": "SELECT Name \nFROM singer \nWHERE Birth_Year = 1948 OR Birth_Year = 1949", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "match": {"match": true, "result": [["Liliane Bettencourt"]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "match": {"match": true, "result": [["Liliane Bettencourt"]]}}
{"result": "SELECT Citizenship, COUNT(*) as Singer_Count FROM singer GROUP BY Citizenship", "match": {"match": true, "result": [["Australia", 1], ["Chile", 1], ["France", 1], ["Germany", 1], ["United States", 4]]}}
{"result": "SELECT Citizenship, COUNT(*) AS Singer_Count \nFROM singer \nGROUP BY Citizenship", "match": {"match": true, "result": [["Australia", 1], ["Chile", 1], ["France", 1], ["Germany", 1], ["United States", 4]]}}
{"result": "SELECT Citizenship \nFROM singer \nGROUP BY Citizenship \nORDER BY COUNT(Citizenship) DESC \nLIMIT 1;", "match": {"match": true, "result": [["United States"]]}}
{"result": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(Singer_ID) DESC LIMIT 1", "match": {"match": true, "result": [["United States"]]}}
{"result": "SELECT T2.Citizenship, MAX(T1.Net_Worth_Millions) \nFROM singer AS T1 \nJOIN ( \n  SELECT Singer_ID, MAX(Net_Worth_Millions) AS Net_Worth_Millions \n  FROM singer \n  GROUP BY Singer_ID \n) AS T2 \nON T1.Singer_ID = T2.Singer_ID", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Citizenship"}}
{"result": "SELECT Citizenship, MAX(Net_Worth_Millions) AS max_net_worth \nFROM singer \nGROUP BY Citizenship;", "match": {"match": true, "result": [["Australia", 17.0], ["Chile", 17.4], ["France", 30.0], ["Germany", 14.3], ["United States", 28.8]]}}
{"result": "SELECT T2.Title, T1.Name \nFROM singer T1 \nJOIN song T2 ON T1.Singer_ID = T2.Singer_ID", "match": {"match": true, "result": [["Do They Know It's Christmas", "Liliane Bettencourt"], ["F**k It (I Don't Want You Back)", "Liliane Bettencourt"], ["Cha Cha Slide", "Christy Walton"], ["Call on Me", "Iris Fontbona"], ["Yeah", "Christy Walton"], ["All This Time", "Gina Rinehart"], ["Left Outside Alone", "Jacqueline Mars"], ["Mysterious Girl", "Susanne Klatten"]]}}
{"result": "SELECT T2.Title, T1.Name \nFROM singer AS T1 \nINNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID", "match": {"match": true, "result": [["Do They Know It's Christmas", "Liliane Bettencourt"], ["F**k It (I Don't Want You Back)", "Liliane Bettencourt"], ["Cha Cha Slide", "Christy Walton"], ["Call on Me", "Iris Fontbona"], ["Yeah", "Christy Walton"], ["All This Time", "Gina Rinehart"], ["Left Outside Alone", "Jacqueline Mars"], ["Mysterious Girl", "Susanne Klatten"]]}}
{"result": "SELECT DISTINCT T1.Name \nFROM singer AS T1 \nJOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID \nWHERE T2.Sales > 300000;", "match": {"match": true, "result": [["Liliane Bettencourt"], ["Christy Walton"], ["Iris Fontbona"]]}}
{"result": "SELECT DISTINCT T1.Name \nFROM singer AS T1 \nJOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID \nWHERE T2.Sales > 300000", "match": {"match": true, "result": [["Liliane Bettencourt"], ["Christy Walton"], ["Iris Fontbona"]]}}
{"result": "SELECT T.Name \nFROM (\n  SELECT S.Name, COUNT(Song_ID) as count \n  FROM song \n  JOIN singer S ON song.Singer_ID = S.Singer_ID \n  GROUP BY S.Singer_ID \n  HAVING COUNT(Song_ID) > 1 \n) T", "match": {"match": false, "result": [["Liliane Bettencourt"], ["Christy Walton"]], "gt": [["Christy Walton"], ["Liliane Bettencourt"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name \nFROM singer AS T1 \nINNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID \nGROUP BY T1.Name \nHAVING COUNT(T2.Song_ID) > 1", "match": {"match": true, "result": [["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT T1.Name, SUM(T2.Sales) \nFROM singer AS T1 \nINNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID \nGROUP BY T1.Name", "match": {"match": true, "result": [["Christy Walton", 651421.0], ["Gina Rinehart", 292000.0], ["Iris Fontbona", 335000.0], ["Jacqueline Mars", 275000.0], ["Liliane Bettencourt", 1646407.0], ["Susanne Klatten", 261000.0]]}}
{"result": "SELECT T2.Name, SUM(T1.Sales) \nFROM song AS T1 \nJOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID \nGROUP BY T2.Name", "match": {"match": true, "result": [["Christy Walton", 651421.0], ["Gina Rinehart", 292000.0], ["Iris Fontbona", 335000.0], ["Jacqueline Mars", 275000.0], ["Liliane Bettencourt", 1646407.0], ["Susanne Klatten", 261000.0]]}}
{"result": "SELECT Name \nFROM singer \nWHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);", "match": {"match": true, "result": [["Alice Walton"], ["Abigail Johnson"]]}}
{"result": "SELECT DISTINCT T1.`Name` FROM singer AS T1 LEFT JOIN song AS T2 ON T1.`Singer_ID` = T2.`Singer_ID` WHERE T2.`Song_ID` IS NULL", "match": {"match": true, "result": [["Alice Walton"], ["Abigail Johnson"]]}}
{"result": "SELECT Citizenship \nFROM singer \nWHERE Birth_Year < 1945 OR Birth_Year > 1955", "match": {"match": false, "result": [["France"], ["Chile"], ["United States"], ["Germany"], ["United States"]], "gt": [["United States"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Citizenship \nFROM singer \nWHERE Birth_Year < 1945 AND Birth_Year > 1955", "match": {"match": false, "result": [], "gt": [["United States"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(`feature_id`) FROM `Other_Available_Features`", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT T1.feature_type_name \nFROM Ref_Feature_Types AS T1\nINNER JOIN Other_Available_Features AS T2 \nON T1.feature_type_code = T2.feature_type_code\nWHERE T2.feature_name = 'AirCon';", "match": {"match": true, "result": [["Amenity, eg Pool."]]}}
{"result": "```sql\nSELECT \n  p.property_type_code,\n  pt.property_type_description\nFROM \n  Properties p\nJOIN \n  Ref_Property_Types pt ON p.property_type_code = pt.property_type_code;\n```", "match": {"match": false, "result": [["House", "House, Bungalow, etc."], ["House", "House, Bungalow, etc."], ["Other", "Other, to be determined."], ["Field", "Field, Meadow."], ["Apartment", "Apartment, Flat, Condo, etc."], ["Shop", "Shop, Retail Outlet."], ["Shop", "Shop, Retail Outlet."], ["Apartment", "Apartment, Flat, Condo, etc."], ["Apartment", "Apartment, Flat, Condo, etc."], ["Apartment", "Apartment, Flat, Condo, etc."], ["Other", "Other, to be determined."], ["Apartment", "Apartment, Flat, Condo, etc."], ["Other", "Other, to be determined."], ["Other", "Other, to be determined."], ["Apartment", "Apartment, Flat, Condo, etc."]], "gt": [["Apartment, Flat, Condo, etc."], ["Field, Meadow."], ["House, Bungalow, etc."], ["Other, to be determined."], ["Shop, Retail Outlet."]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n  CASE \n    WHEN `property_type_name` LIKE 'House' THEN `hse_feature_1`\n    WHEN `property_type_name` LIKE 'Apartment' THEN `apt_feature_1`\n  END AS `property_name`\nFROM \n  `Properties` \n  INNER JOIN `Ref_Property_Types` \n  ON `property_type_code` = `Ref_Property_Types`.`property_type_code`\nWHERE \n  `room_count` > 1", "match": {"match": false, "error": "Query execution failed with error: no such column: property_type_name"}}

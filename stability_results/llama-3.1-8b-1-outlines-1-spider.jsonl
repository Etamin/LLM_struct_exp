
{"result": "SELECT COUNT(Singer_ID) FROM singer;", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(\"Singer_ID\") \nFROM singer;", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC", "match": {"match": true, "result": [["Joe Sharp", "Netherlands", 52], ["John Nizinik", "France", 43], ["Rose White", "France", 41], ["Timbaland", "United States", 32], ["Justin Brown", "France", 29], ["Tribal King", "France", 25]]}}
{"result": "SELECT Name, Country, Age \nFROM singer \nORDER BY Age DESC;", "match": {"match": true, "result": [["Joe Sharp", "Netherlands", 52], ["John Nizinik", "France", 43], ["Rose White", "France", 41], ["Timbaland", "United States", 32], ["Justin Brown", "France", 29], ["Tribal King", "France", 25]]}}
{"result": "SELECT AVG(\"Age\") AS Average_age, MIN(\"Age\") AS Min_age, MAX(\"Age\") AS Max_age\nFROM \"singer\"\nWHERE \"Country\" = 'France';", "match": {"match": true, "result": [[34.5, 25, 43]]}}
{"result": "SELECT AVG(Age), MIN(Age), MAX(Age) \nFROM singer \nWHERE Country = 'France';", "match": {"match": true, "result": [[34.5, 25, 43]]}}
{"result": "SELECT T2.`Song_Name`, T2.`Song_release_year` \nFROM singer_in_concert AS T1 \nINNER JOIN singer AS T2 ON T1.`Singer_ID` = T2.`Singer_ID` \nWHERE T2.`Age` = (SELECT MIN(`Age`) FROM singer);", "match": {"match": false, "result": [["Love", "2016"], ["Love", "2016"]], "gt": [["Love", "2016"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name, T1.Song_Name, T1.Song_release_year \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID \nWHERE T1.Age  =  (SELECT MIN(Age) FROM singer);", "match": {"match": false, "result": [["Tribal King", "Love", "2016"], ["Tribal King", "Love", "2016"]], "gt": [["Love", "2016"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T2.Country \nFROM singer_in_concert AS T1 \nJOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID \nWHERE T2.Age > 20;", "match": {"match": false, "result": [["United States"], ["France"]], "gt": [["Netherlands"], ["United States"], ["France"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT Country \nFROM singer \nWHERE Age > 20;", "match": {"match": true, "result": [["Netherlands"], ["United States"], ["France"]]}}
{"result": "SELECT Country, COUNT(Singer_ID) FROM singer GROUP BY Country", "match": {"match": true, "result": [["France", 4], ["Netherlands", 1], ["United States", 1]]}}
{"result": "SELECT COUNT(Singer_ID) ,  Country\nFROM singer\nGROUP BY Country;", "match": {"match": false, "result": [[4, "France"], [1, "Netherlands"], [1, "United States"]], "gt": [["France", 4], ["Netherlands", 1], ["United States", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.`Song_Name` FROM singer_in_concert AS T1 \nJOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID \nJOIN concert AS T3 ON T1.concert_ID = T3.concert_ID \nJOIN stadium AS T4 ON T3.Stadium_ID = T4.Stadium_ID \nWHERE T2.Age > (SELECT AVG(Age) FROM singer)", "match": {"match": false, "result": [["Gentleman"], ["Gentleman"], ["Sun"]], "gt": [["You"], ["Sun"], ["Gentleman"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Song_Name \nFROM singer \nWHERE Age > (SELECT AVG(Age) FROM singer);", "match": {"match": true, "result": [["You"], ["Sun"], ["Gentleman"]]}}
{"result": "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000", "match": {"match": true, "result": []}}
{"result": "SELECT Location, Name \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000;", "match": {"match": true, "result": []}}
{"result": "SELECT MAX(Capacity) ,  AVG(Average) FROM stadium", "match": {"match": false, "result": [[52500, 917.8888888888889]], "gt": [[52500, 730]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(Capacity) , MAX(Capacity) FROM stadium", "match": {"match": true, "result": [[10621.666666666666, 52500]]}}
{"result": "SELECT Name, Capacity \nFROM stadium \nORDER BY Average DESC \nLIMIT 1;", "match": {"match": true, "result": [["Stark's Park", 10104]]}}
{"result": "SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1", "match": {"match": true, "result": [["Stark's Park", 10104]]}}
{"result": "SELECT COUNT(concert_ID) FROM concert WHERE Year = '2014' OR Year = '2015'", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(concert_ID) FROM concert WHERE YEAR = '2014' OR YEAR = '2015'", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT T3.Name, COUNT(T2.concert_ID) \nFROM singer_in_concert AS T1\nJOIN concert AS T2 ON T1.concert_ID = T2.concert_ID\nJOIN stadium AS T3 ON T2.Stadium_ID = T3.Stadium_ID\nGROUP BY T3.Name", "match": {"match": false, "result": [["Balmoor", 2], ["Glebe Park", 1], ["Recreation Park", 1], ["Somerset Park", 3], ["Stark's Park", 3]], "gt": [["Stark's Park", 1], ["Glebe Park", 1], ["Somerset Park", 2], ["Recreation Park", 1], ["Balmoor", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT S.Stadium_ID, COUNT(C.concert_ID) \nFROM stadium S \nJOIN concert C ON S.Stadium_ID = C.Stadium_ID \nGROUP BY S.Stadium_ID", "match": {"match": false, "result": [[1, 1], [2, 2], [7, 1], [9, 1], [10, 1]], "gt": [["Stark's Park", 1], ["Glebe Park", 1], ["Somerset Park", 2], ["Recreation Park", 1], ["Balmoor", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name, T1.Capacity \nFROM stadium AS T1 \nJOIN concert AS T2 \nON T1.Stadium_ID = T2.Stadium_ID \nGROUP BY T2.Stadium_ID \nORDER BY COUNT(T2.concert_ID) DESC \nLIMIT 1;", "match": {"match": true, "result": [["Somerset Park", 11998]]}}
{"result": "SELECT t3.Name, t3.Capacity \nFROM concert AS t1 \nJOIN singer_in_concert AS t2 \nON t1.concert_ID = t2.concert_ID \nJOIN stadium AS t3 \nON t3.Stadium_ID = t1.Stadium_ID \nWHERE t1.Year > \"2013\" \nGROUP BY t3.Name, t3.Capacity \nORDER BY COUNT(t3.Name) DESC \nLIMIT 1;", "match": {"match": true, "result": [["Somerset Park", 11998]]}}
{"result": "SELECT Year \nFROM concert \nGROUP BY Year \nORDER BY COUNT(Year) DESC \nLIMIT 1;", "match": {"match": true, "result": [["2015"]]}}
{"result": "SELECT Year \nFROM concert \nGROUP BY Year \nORDER BY COUNT(concert_ID) DESC \nLIMIT 1;", "match": {"match": true, "result": [["2015"]]}}
{"result": "SELECT T1.Name \nFROM stadium AS T1 \nLEFT JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nWHERE T2.Stadium_ID IS NULL", "match": {"match": true, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"]]}}
{"result": "SELECT T1.Name \nFROM stadium AS T1 \nLEFT JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nWHERE T2.Stadium_ID IS NULL;", "match": {"match": true, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"]]}}
{"result": "SELECT T1.Country \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID \nWHERE T1.Age > 40 \nINTERSECT \nSELECT T1.Country \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID \nWHERE T1.Age < 30", "match": {"match": true, "result": [["France"]]}}
{"result": "SELECT Name \nFROM stadium \nWHERE Stadium_ID NOT IN (\n  SELECT Stadium_ID \n  FROM concert \n  WHERE YEAR = '2014'\n)", "match": {"match": false, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"], ["Recreation Park"], ["Balmoor"]], "gt": [["Balmoor"], ["Bayview Stadium"], ["Forthbank Stadium"], ["Gayfield Park"], ["Hampden Park"], ["Recreation Park"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name \nFROM stadium \nWHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014');", "match": {"match": false, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"], ["Recreation Park"], ["Balmoor"]], "gt": [["Balmoor"], ["Bayview Stadium"], ["Forthbank Stadium"], ["Gayfield Park"], ["Hampden Park"], ["Recreation Park"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n  c.concert_Name, \n  c.Theme, \n  COUNT(sic.Singer_ID) AS Number_of_Singers\nFROM \n  concert c\n  LEFT JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID\nGROUP BY \n  c.concert_Name, c.Theme", "match": {"match": false, "result": [["Auditions", "Free choice", 3], ["Home Visits", "Bleeding Love", 1], ["Super bootcamp", "Free choice 2", 2], ["Week 1", "Happy Tonight", 2], ["Week 1", "Wide Awake", 1], ["Week 2", "Party All Night", 1]], "gt": [["Auditions", "Free choice", 3], ["Super bootcamp", "Free choice 2", 2], ["Home Visits", "Bleeding Love", 1], ["Week 1", "Wide Awake", 1], ["Week 1", "Happy Tonight", 2], ["Week 2", "Party All Night", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT concert_Name, Theme, COUNT(Singer_ID) FROM singer_in_concert \nJOIN concert ON singer_in_concert.concert_ID = concert.concert_ID \nGROUP BY concert_Name, Theme", "match": {"match": false, "result": [["Auditions", "Free choice", 3], ["Home Visits", "Bleeding Love", 1], ["Super bootcamp", "Free choice 2", 2], ["Week 1", "Happy Tonight", 2], ["Week 1", "Wide Awake", 1], ["Week 2", "Party All Night", 1]], "gt": [["Auditions", "Free choice", 3], ["Super bootcamp", "Free choice 2", 2], ["Home Visits", "Bleeding Love", 1], ["Week 1", "Wide Awake", 1], ["Week 1", "Happy Tonight", 2], ["Week 2", "Party All Night", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Name, COUNT(T1.concert_ID) \nFROM singer_in_concert AS T1 \nINNER JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID \nGROUP BY T2.Name", "match": {"match": false, "result": [["John Nizinik", 2], ["Justin Brown", 3], ["Rose White", 1], ["Timbaland", 2], ["Tribal King", 2]], "gt": [["Timbaland", 2], ["Justin Brown", 3], ["Rose White", 1], ["John Nizinik", 2], ["Tribal King", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name, COUNT(T3.concert_ID) AS Number_of_concerts \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID \nJOIN concert AS T3 ON T2.concert_ID = T3.concert_ID \nGROUP BY T1.Name", "match": {"match": false, "result": [["John Nizinik", 2], ["Justin Brown", 3], ["Rose White", 1], ["Timbaland", 2], ["Tribal King", 2]], "gt": [["Timbaland", 2], ["Justin Brown", 3], ["Rose White", 1], ["John Nizinik", 2], ["Tribal King", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Name \nFROM concert AS T1 \nINNER JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID \nINNER JOIN singer AS T3 ON T2.Singer_ID = T3.Singer_ID \nWHERE T1.Year = '2014';", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Name"}}
{"result": "SELECT T2.Name \nFROM concert AS T1 \nINNER JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID \nINNER JOIN singer AS T3 ON T2.Singer_ID = T3.Singer_ID \nWHERE T1.Year = '2014'", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Name"}}
{"result": "SELECT T2.Name, T2.Country \nFROM singer_in_concert AS T1 \nJOIN singer AS T2 \nON T1.Singer_ID = T2.Singer_ID \nJOIN concert AS T3 \nON T1.concert_ID = T3.concert_ID \nJOIN singer AS T4 \nON T3.Stadium_ID = T4.Singer_ID \nJOIN stadium AS T5 \nON T4.Singer_ID = T5.Stadium_ID \nWHERE T4.Song_Name LIKE '%Hey%';", "match": {"match": false, "result": [], "gt": [["Justin Brown", "France"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name, T1.Country \nFROM singer AS T1 \nINNER JOIN singer_in_concert AS T2 \nON T1.Singer_ID = T2.Singer_ID \nINNER JOIN concert AS T3 \nON T2.concert_ID = T3.concert_ID \nINNER JOIN singer AS T4 \nON T2.Singer_ID = T4.Singer_ID \nWHERE T4.Song_Name LIKE '%Hey%'", "match": {"match": false, "result": [["Justin Brown", "France"], ["Justin Brown", "France"], ["Justin Brown", "France"]], "gt": [["Justin Brown", "France"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name, T1.Location \nFROM stadium AS T1 \nJOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nWHERE T2.Year IN ('2014', '2015')", "match": {"match": false, "result": [["Stark's Park", "Raith Rovers"], ["Somerset Park", "Ayr United"], ["Somerset Park", "Ayr United"], ["Glebe Park", "Brechin City"], ["Balmoor", "Peterhead"], ["Recreation Park", "Alloa Athletic"]], "gt": [["Somerset Park", "Ayr United"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Name, T2.Location \nFROM stadium_in_concert AS T1 \nJOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nJOIN concert AS T3 ON T1.concert_ID = T3.concert_ID \nWHERE T3.Year = '2014' \nINTERSECT \nSELECT T2.Name, T2.Location \nFROM stadium_in_concert AS T1 \nJOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nJOIN concert AS T3 ON T1.concert_ID = T3.concert_ID \nWHERE T3.Year = '2015'", "match": {"match": false, "error": "Query execution failed with error: no such table: stadium_in_concert"}}
{"result": "SELECT COUNT(T2.concert_id) \nFROM stadium AS T1 \nJOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nWHERE T1.Capacity = ( SELECT MAX(Capacity) FROM stadium );", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(T2.Concert_ID) \nFROM stadium AS T1 \nJOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nORDER BY T1.Capacity DESC \nLIMIT 1", "match": {"match": false, "result": [[6]], "gt": [[0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) \nFROM Pets \nWHERE weight > 10", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(*) FROM Pets WHERE weight > 10", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT weight \nFROM Pets \nWHERE PetType = 'dog' \nORDER BY pet_age ASC \nLIMIT 1;", "match": {"match": true, "result": [[9.3]]}}
{"result": "SELECT weight FROM Pets \nWHERE PetType = 'dog' AND pet_age = ( SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog' );", "match": {"match": true, "result": [[9.3]]}}
{"result": "SELECT MAX(weight), PetType \nFROM Pets \nGROUP BY PetType", "match": {"match": true, "result": [[12.0, "cat"], [13.4, "dog"]]}}
{"result": "SELECT PetType, MAX(weight) as max_weight \nFROM Pets \nGROUP BY PetType;", "match": {"match": false, "result": [["cat", 12.0], ["dog", 13.4]], "gt": [[12.0, "cat"], [13.4, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(PetID) \nFROM Has_Pet \nJOIN Student ON Has_Pet.StuID = Student.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Student.Age > 20", "match": {"match": false, "error": "Query execution failed with error: ambiguous column name: PetID"}}
{"result": "SELECT COUNT(*) \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Student.Age > 20;", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(*) \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Student.Sex = 'F' AND Pets.PetType = 'dog';", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(*) \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Student.Sex = 'F' AND Pets.PetType = 'dog'", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(DISTINCT PetType) \nFROM Pets", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT DISTINCT PetType FROM Pets", "match": {"match": false, "result": [["cat"], ["dog"]], "gt": [[2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'Cat' OR T3.PetType = 'Dog'", "match": {"match": false, "result": [], "gt": [["Linda"], ["Tracy"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'Cat' OR T3.PetType = 'Dog'", "match": {"match": false, "result": [], "gt": [["Linda"], ["Tracy"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID \nJOIN Pets AS T3 ON T2.PetID  =  T3.PetID \nWHERE T3.PetType  =  'Cat' INTERSECT \nSELECT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID \nJOIN Pets AS T3 ON T2.PetID  =  T3.PetID \nWHERE T3.PetType  =  'Dog'", "match": {"match": true, "result": []}}
{"result": "SELECT T3.Fname \nFROM Pets AS T1 \nJOIN Has_Pet AS T2 ON T1.PetID = T2.PetID \nJOIN Student AS T3 ON T2.StuID = T3.StuID \nWHERE T1.PetType IN ('Cat', 'Dog')", "match": {"match": true, "result": []}}
{"result": "SELECT S.Major, S.Age\nFROM Student S\nLEFT JOIN Has_Pet HP ON S.StuID = HP.StuID\nLEFT JOIN Pets P ON HP.PetID = P.PetID\nWHERE P.PetType != 'Cat'", "match": {"match": false, "result": [[600, 18], [600, 19], [600, 19]], "gt": [[600, 19], [600, 21], [600, 20], [600, 26], [600, 18], [600, 18], [600, 20], [600, 19], [600, 17], [600, 22], [600, 20], [600, 18], [600, 16], [600, 17], [600, 27], [600, 20], [600, 18], [520, 22], [520, 19], [540, 17], [520, 20], [540, 18], [520, 18], [520, 19], [520, 18], [550, 20], [100, 17], [550, 21], [550, 20], [550, 20], [550, 18], [50, 18], [50, 26]], "error": "Query result does not match ground truth."}}
{"result": "SELECT M.Major, S.Age \nFROM Student S \nJOIN Has_Pet HP ON S.StuID = HP.StuID \nJOIN Pets P ON HP.PetID = P.PetID \nJOIN Major M ON S.Major = M.MajorID \nWHERE P.PetType != 'Cat';", "match": {"match": false, "error": "Query execution failed with error: no such table: Major"}}
{"result": "SELECT StuID \nFROM Student \nWHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'));", "match": {"match": true, "result": [[1002], [1003], [1004], [1005], [1006], [1007], [1008], [1009], [1010], [1011], [1012], [1014], [1015], [1016], [1017], [1018], [1019], [1020], [1021], [1022], [1023], [1024], [1025], [1026], [1027], [1028], [1029], [1030], [1031], [1032], [1033], [1034], [1035]]}}
{"result": "SELECT StuID \nFROM Student \nWHERE StuID NOT IN (\n  SELECT StuID \n  FROM Has_Pet \n  JOIN Pets ON Has_Pet.PetID = Pets.PetID \n  WHERE Pets.PetType = 'Cat'\n);", "match": {"match": false, "result": [[1001], [1002], [1003], [1004], [1005], [1006], [1007], [1008], [1009], [1010], [1011], [1012], [1014], [1015], [1016], [1017], [1018], [1019], [1020], [1021], [1022], [1023], [1024], [1025], [1026], [1027], [1028], [1029], [1030], [1031], [1032], [1033], [1034], [1035]], "gt": [[1002], [1003], [1004], [1005], [1006], [1007], [1008], [1009], [1010], [1011], [1012], [1014], [1015], [1016], [1017], [1018], [1019], [1020], [1021], [1022], [1023], [1024], [1025], [1026], [1027], [1028], [1029], [1030], [1031], [1032], [1033], [1034], [1035]], "error": "Query result does not match ground truth."}}
{"result": "SELECT S.Fname, S.Age \nFROM Student S \nJOIN Has_Pet HP ON S.StuID = HP.StuID \nJOIN Pets P ON HP.PetID = P.PetID \nWHERE P.PetType = 'Dog' \nAND HP.PetID NOT IN (SELECT PetID FROM Pets WHERE PetType = 'Cat')", "match": {"match": false, "result": [], "gt": [["Tracy", 19], ["Tracy", 19]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT Fname \nFROM Student \nWHERE StuID NOT IN (\n  SELECT StuID \n  FROM Has_Pet \n  WHERE PetID IN (\n    SELECT PetID \n    FROM Pets \n    WHERE PetType = 'Dog'\n  )\n)", "match": {"match": false, "result": [["Linda"], ["Tracy"], ["Shiela"], ["Dinesh"], ["Paul"], ["Andy"], ["Lisa"], ["Jandy"], ["Eric"], ["Derek"], ["David"], ["Steven"], ["Charles"], ["Susan"], ["Mark"], ["Bruce"], ["Michael"], ["Arthur"], ["Ian"], ["George"], ["Stacy"], ["Jun"], ["Sarah"], ["William"]], "gt": [["Tracy", 19], ["Tracy", 19]], "error": "Query result does not match ground truth."}}
{"result": "SELECT PetType, weight \nFROM Pets \nORDER BY pet_age ASC \nLIMIT 1;", "match": {"match": true, "result": [["dog", 9.3]]}}
{"result": "SELECT T1.PetType, T1.weight \nFROM Pets T1 \nJOIN (SELECT PetID, MIN(pet_age) AS min_age \n      FROM Pets \n      GROUP BY PetID) T2 \nON T1.PetID = T2.PetID", "match": {"match": false, "result": [["cat", 12.0], ["dog", 13.4], ["dog", 9.3]], "gt": [["dog", 9.3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT PetID, weight \nFROM Pets \nWHERE pet_age > 1", "match": {"match": true, "result": [[2001, 12.0], [2002, 13.4]]}}
{"result": "SELECT PetID, weight \nFROM Pets \nWHERE pet_age > 1", "match": {"match": true, "result": [[2001, 12.0], [2002, 13.4]]}}
{"result": "SELECT \n    PetType, \n    AVG(weight) AS avg_weight, \n    MAX(pet_age) AS max_age\nFROM \n    Pets\nGROUP BY \n    PetType", "match": {"match": false, "result": [["cat", 12.0, 3], ["dog", 11.350000000000001, 2]], "gt": [[3.0, 3, "cat"], [1.5, 2, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    PetType, \n    AVG(pet_age) AS avg_age, \n    MAX(pet_age) AS max_age\nFROM \n    Pets\nGROUP BY \n    PetType", "match": {"match": false, "result": [["cat", 3.0, 3], ["dog", 1.5, 2]], "gt": [[3.0, 3, "cat"], [1.5, 2, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(weight), PetType \nFROM Pets \nGROUP BY PetType;", "match": {"match": true, "result": [[12.0, "cat"], [11.350000000000001, "dog"]]}}
{"result": "SELECT PetType, AVG(weight) \nFROM Pets \nGROUP BY PetType", "match": {"match": false, "result": [["cat", 12.0], ["dog", 11.350000000000001]], "gt": [[12.0, "cat"], [11.350000000000001, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Fname, T1.Age \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID", "match": {"match": false, "result": [["Linda", 18], ["Tracy", 19], ["Tracy", 19]], "gt": [["Linda", 18], ["Tracy", 19]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT Fname, Age \nFROM Student \nWHERE StuID IN (SELECT StuID FROM Has_Pet);", "match": {"match": true, "result": [["Linda", 18], ["Tracy", 19]]}}
{"result": "SELECT HP.PetID \nFROM Student S \nJOIN Has_Pet HP ON S.StuID = HP.StuID \nWHERE S.LName = 'Smith';", "match": {"match": true, "result": [[2001]]}}
{"result": "SELECT T2.PetID \nFROM Student \nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Student.LName = 'Smith';", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.PetID"}}
{"result": "SELECT T1.StuID, COUNT(T1.PetID) AS NumOfPets\nFROM Has_Pet T1\nGROUP BY T1.StuID;", "match": {"match": false, "result": [[1001, 1], [1002, 2]], "gt": [[1, 1001], [2, 1002]], "error": "Query result does not match ground truth."}}
{"result": "SELECT StuID, COUNT(PetID) FROM Has_Pet GROUP BY StuID", "match": {"match": false, "result": [[1001, 1], [1002, 2]], "gt": [[1, 1001], [2, 1002]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Fname, T1.Sex \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nGROUP BY T1.Fname, T1.Sex \nHAVING COUNT(T1.StuID) > 1", "match": {"match": true, "result": [["Tracy", "F"]]}}
{"result": "SELECT T2.Fname, T2.Sex \nFROM Has_Pet AS T1 \nJOIN Student AS T2 ON T1.StuID = T2.StuID \nGROUP BY T2.StuID \nHAVING COUNT(T1.PetID) > 1", "match": {"match": true, "result": [["Tracy", "F"]]}}
{"result": "SELECT T1.LName \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.pet_age = 3 AND T3.PetType = 'Cat'", "match": {"match": false, "result": [], "gt": [["Smith"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.LName \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T3.PetID = T2.PetID \nWHERE T3.pet_age = 3 AND T3.PetType LIKE 'Cat%';", "match": {"match": true, "result": [["Smith"]]}}
{"result": "SELECT AVG(Age) \nFROM Student \nWHERE StuID NOT IN (SELECT StuID FROM Has_Pet);", "match": {"match": true, "result": [[19.625]]}}
{"result": "SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)", "match": {"match": true, "result": [[19.625]]}}
{"result": "SELECT COUNT(*) FROM `employee`", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT COUNT(*) FROM employee", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT Name \nFROM employee \nORDER BY Age ASC", "match": {"match": true, "result": [["George Chuter"], ["Andrew Sheridan"], ["Lee Mears"], ["Tim Payne"], ["Matt Stevens"], ["Jason Hobson"], ["Steve Borthwick"], ["Louis Deacon"], ["Phil Vickery"], ["Mark Regan"]]}}
{"result": "SELECT Name FROM employee ORDER BY Age ASC", "match": {"match": true, "result": [["George Chuter"], ["Andrew Sheridan"], ["Lee Mears"], ["Tim Payne"], ["Matt Stevens"], ["Jason Hobson"], ["Steve Borthwick"], ["Louis Deacon"], ["Phil Vickery"], ["Mark Regan"]]}}
{"result": "SELECT COUNT(Employee_ID) ,  City FROM employee GROUP BY City", "match": {"match": true, "result": [[3, "Bath"], [3, "Bristol"], [1, "Leicester"], [1, "Sale"], [2, "Wasps"]]}}
{"result": "SELECT City, COUNT(*) \nFROM employee \nGROUP BY City", "match": {"match": false, "result": [["Bath", 3], ["Bristol", 3], ["Leicester", 1], ["Sale", 1], ["Wasps", 2]], "gt": [[3, "Bath"], [3, "Bristol"], [1, "Leicester"], [1, "Sale"], [2, "Wasps"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT City \nFROM employee \nWHERE Age < 30 \nGROUP BY City \nHAVING COUNT(Employee_ID) > 1", "match": {"match": true, "result": [["Bath"]]}}
{"result": "SELECT T2.City \nFROM employee AS T1 \nINNER JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID \nWHERE T1.Age < 30 GROUP BY T2.City HAVING COUNT(T1.Employee_ID) > 1", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.City"}}
{"result": "SELECT LOCATION, COUNT(Shop_ID) \nFROM shop \nGROUP BY LOCATION", "match": {"match": false, "result": [["Espoo", 1], ["Helsinki", 1], ["Jakobstad", 1], ["Kotka", 1], ["Kuopio", 1], ["Lahti", 1], ["Mariehamn", 1], ["Turku", 1], ["Valkeakoski", 1]], "gt": [[1, "Espoo"], [1, "Helsinki"], [1, "Jakobstad"], [1, "Kotka"], [1, "Kuopio"], [1, "Lahti"], [1, "Mariehamn"], [1, "Turku"], [1, "Valkeakoski"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Location, COUNT(*) FROM shop GROUP BY Location;", "match": {"match": false, "result": [["Espoo", 1], ["Helsinki", 1], ["Jakobstad", 1], ["Kotka", 1], ["Kuopio", 1], ["Lahti", 1], ["Mariehamn", 1], ["Turku", 1], ["Valkeakoski", 1]], "gt": [[1, "Espoo"], [1, "Helsinki"], [1, "Jakobstad"], [1, "Kotka"], [1, "Kuopio"], [1, "Lahti"], [1, "Mariehamn"], [1, "Turku"], [1, "Valkeakoski"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Manager_name, T2.District \nFROM shop AS T1 \nJOIN shop AS T2 ON T1.Number_products = ( SELECT MAX(Number_products) FROM shop )", "match": {"match": false, "result": [["Olli Huttunen", "Tehtaan kentt\u00e4"], ["Antti Muurinen", "Finnair Stadium"], ["Mika Lehkosuo", "Tapiolan Urheilupuisto"], ["Job Dragtsma", "Veritas Stadion"], ["Mika Laurikainen", "Jakobstads Centralplan"], ["Tommi Kautonen", "Arto Tolsa Areena"], ["Kai Nyyss\u00f6nen", "Magnum Areena"], ["Ilkka M\u00e4kel\u00e4", "Lahden Stadion"], ["Pekka Lyyski", "Wikl\u00f6f Holding Arena"]], "gt": [["Ilkka M\u00e4kel\u00e4", "Lahden Stadion"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Manager_name, T1.District \nFROM shop AS T1 \nJOIN (SELECT MAX(Number_products) AS MaxNum, Shop_ID \n      FROM shop \n      GROUP BY Shop_ID) AS T2 \nON T1.Shop_ID = T2.Shop_ID", "match": {"match": false, "result": [["Olli Huttunen", "Tehtaan kentt\u00e4"], ["Antti Muurinen", "Finnair Stadium"], ["Mika Lehkosuo", "Tapiolan Urheilupuisto"], ["Job Dragtsma", "Veritas Stadion"], ["Mika Laurikainen", "Jakobstads Centralplan"], ["Tommi Kautonen", "Arto Tolsa Areena"], ["Kai Nyyss\u00f6nen", "Magnum Areena"], ["Ilkka M\u00e4kel\u00e4", "Lahden Stadion"], ["Pekka Lyyski", "Wikl\u00f6f Holding Arena"]], "gt": [["Ilkka M\u00e4kel\u00e4", "Lahden Stadion"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MIN(Number_products) , MAX(Number_products) FROM shop", "match": {"match": true, "result": [[1600, 15000]]}}
{"result": "SELECT MIN(Number_products) , MAX(Number_products) FROM shop", "match": {"match": true, "result": [[1600, 15000]]}}
{"result": "SELECT Name, Location, District \nFROM shop \nORDER BY Number_products DESC;", "match": {"match": true, "result": [["FC Lahti", "Lahti", "Lahden Stadion"], ["HJK", "Helsinki", "Finnair Stadium"], ["FC Inter", "Turku", "Veritas Stadion"], ["FC Honka", "Espoo", "Tapiolan Urheilupuisto"], ["FF Jaro", "Jakobstad", "Jakobstads Centralplan"], ["FC KooTeePee", "Kotka", "Arto Tolsa Areena"], ["FC Haka", "Valkeakoski", "Tehtaan kentt\u00e4"], ["KuPS", "Kuopio", "Magnum Areena"], ["IFK Mariehamn", "Mariehamn", "Wikl\u00f6f Holding Arena"]]}}
{"result": "SELECT Name, Location, District \nFROM shop \nORDER BY Number_products DESC;", "match": {"match": true, "result": [["FC Lahti", "Lahti", "Lahden Stadion"], ["HJK", "Helsinki", "Finnair Stadium"], ["FC Inter", "Turku", "Veritas Stadion"], ["FC Honka", "Espoo", "Tapiolan Urheilupuisto"], ["FF Jaro", "Jakobstad", "Jakobstads Centralplan"], ["FC KooTeePee", "Kotka", "Arto Tolsa Areena"], ["FC Haka", "Valkeakoski", "Tehtaan kentt\u00e4"], ["KuPS", "Kuopio", "Magnum Areena"], ["IFK Mariehamn", "Mariehamn", "Wikl\u00f6f Holding Arena"]]}}
{"result": "SELECT Name FROM shop \nWHERE Number_products > (SELECT AVG(Number_products) FROM shop);", "match": {"match": true, "result": [["HJK"], ["FC Inter"], ["FC Lahti"]]}}
{"result": "SELECT Name \nFROM shop \nWHERE Number_products > (SELECT AVG(Number_products) FROM shop);", "match": {"match": true, "result": [["HJK"], ["FC Inter"], ["FC Lahti"]]}}
{"result": "SELECT T1.Name \nFROM employee AS T1 \nJOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID \nGROUP BY T1.Employee_ID \nORDER BY COUNT(T1.Employee_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [["George Chuter"]]}}
{"result": "SELECT T1.Name FROM employee AS T1 INNER JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T1.Employee_ID ORDER BY COUNT(T2.Employee_ID) DESC LIMIT 1", "match": {"match": true, "result": [["George Chuter"]]}}
{"result": "SELECT T1.Name \nFROM employee AS T1 \nJOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID \nWHERE T2.Bonus = ( SELECT MAX(Bonus) \n                   FROM evaluation \n                   WHERE Bonus IS NOT NULL AND Year_awarded IS NOT NULL );", "match": {"match": true, "result": [["Louis Deacon"]]}}
{"result": "SELECT T1.Name \nFROM employee AS T1 \nJOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID \nORDER BY T2.Bonus DESC \nLIMIT 1;", "match": {"match": true, "result": [["Louis Deacon"]]}}
{"result": "SELECT Name \nFROM employee \nWHERE Employee_ID NOT IN (\n  SELECT Employee_ID \n  FROM evaluation \n);", "match": {"match": true, "result": [["Mark Regan"], ["Tim Payne"], ["Andrew Sheridan"], ["Phil Vickery"], ["Steve Borthwick"]]}}
{"result": "SELECT Name \nFROM employee \nWHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);", "match": {"match": true, "result": [["Mark Regan"], ["Tim Payne"], ["Andrew Sheridan"], ["Phil Vickery"], ["Steve Borthwick"]]}}
{"result": "SELECT T1.Name \nFROM shop AS T1 \nJOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID \nGROUP BY T2.Shop_ID \nORDER BY COUNT(T2.Employee_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [["FC Haka"]]}}
{"result": "SELECT T1.Name \nFROM shop AS T1 \nJOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID \nGROUP BY T2.Shop_ID \nORDER BY COUNT(T2.Shop_ID) DESC \nLIMIT 1;", "match": {"match": true, "result": [["FC Haka"]]}}
{"result": "SELECT Name \nFROM shop \nWHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring);", "match": {"match": true, "result": [["FC Honka"], ["KuPS"], ["IFK Mariehamn"]]}}
{"result": "SELECT T2.Name \nFROM shop AS T1 \nLEFT JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID \nWHERE T2.Shop_ID IS NULL", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Name"}}
{"result": "SELECT T1.Name, COUNT(T3.Employee_ID) \nFROM shop AS T1 \nJOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID \nJOIN employee AS T3 ON T2.Employee_ID = T3.Employee_ID \nGROUP BY T1.Name", "match": {"match": false, "result": [["FC Haka", 2], ["FC Inter", 1], ["FC KooTeePee", 1], ["FC Lahti", 1], ["FF Jaro", 1], ["HJK", 1]], "gt": [[2, "FC Haka"], [1, "FC Inter"], [1, "FC KooTeePee"], [1, "FC Lahti"], [1, "FF Jaro"], [1, "HJK"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Number_products, T1.Name \nFROM shop AS T1 \nJOIN hiring AS T3 ON T1.Shop_ID = T3.Shop_ID \nJOIN employee AS T2 ON T3.Employee_ID = T2.Employee_ID \nGROUP BY T2.Number_products, T1.Name", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Number_products"}}
{"result": "SELECT SUM(Bonus) FROM evaluation", "match": {"match": true, "result": [[19500.0]]}}
{"result": "SELECT SUM(Bonus) FROM evaluation", "match": {"match": true, "result": [[19500.0]]}}
{"result": "SELECT * FROM hiring", "match": {"match": true, "result": [[1, 1, "2009", "T"], [1, 2, "2003", "T"], [8, 3, "2011", "F"], [4, 4, "2012", "T"], [5, 5, "2013", "T"], [2, 6, "2010", "F"], [6, 7, "2008", "T"]]}}
{"result": "SELECT * FROM `hiring`;", "match": {"match": true, "result": [[1, 1, "2009", "T"], [1, 2, "2003", "T"], [8, 3, "2011", "F"], [4, 4, "2012", "T"], [5, 5, "2013", "T"], [2, 6, "2010", "F"], [6, 7, "2008", "T"]]}}
{"result": "SELECT District \nFROM shop \nWHERE Number_products < 3000 \nINTERSECT \nSELECT District \nFROM shop \nWHERE Number_products > 10000", "match": {"match": true, "result": []}}
{"result": "SELECT T1.District \nFROM shop AS T1 \nJOIN shop AS T2 ON T1.District = T2.District \nWHERE T1.Number_products < 3000 \nAND T2.Number_products > 10000", "match": {"match": true, "result": []}}
{"result": "SELECT COUNT(DISTINCT Location) FROM shop", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(DISTINCT Location) FROM shop", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(Document_ID) FROM Documents", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(Document_ID) \nFROM Documents", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT Document_ID, Document_Name, Document_Description \nFROM Documents;", "match": {"match": true, "result": [[0, "Introduction of OS", "n"], [1, "Understanding DB", "y"], [3, "Summer Show", "u"], [76, "Robbin CV", "y"], [80, "Welcome to NY", "h"], [82, "Data base", "w"], [2394, "Customer reviews", "y"], [3830, "Do not panic", "k"], [33930, "How Google people work", "z"], [50123, "Learning French", "r"], [651512, "How to write a CV", "f"], [801801, "How to read a book", "w"], [3540024, "Palm reading", "y"], [16514113, "A history of Arts", "h"], [385906526, "About Korea", "b"]]}}
{"result": "SELECT Document_ID, Document_Name, Document_Description FROM Documents", "match": {"match": true, "result": [[0, "Introduction of OS", "n"], [1, "Understanding DB", "y"], [3, "Summer Show", "u"], [76, "Robbin CV", "y"], [80, "Welcome to NY", "h"], [82, "Data base", "w"], [2394, "Customer reviews", "y"], [3830, "Do not panic", "k"], [33930, "How Google people work", "z"], [50123, "Learning French", "r"], [651512, "How to write a CV", "f"], [801801, "How to read a book", "w"], [3540024, "Palm reading", "y"], [16514113, "A history of Arts", "h"], [385906526, "About Korea", "b"]]}}
{"result": "SELECT Document_Name, Template_ID \nFROM Documents \nWHERE Document_Description LIKE '%w%';", "match": {"match": true, "result": [["Data base", 11], ["How to read a book", 4]]}}
{"result": "SELECT Document_Name, Template_ID\nFROM Documents\nWHERE Document_Description LIKE '%w%';", "match": {"match": true, "result": [["Data base", 11], ["How to read a book", 4]]}}
{"result": "SELECT Document_ID, Template_ID, Document_Description \nFROM Documents \nWHERE Document_Name = 'Robbin CV';", "match": {"match": true, "result": [[76, 20, "y"]]}}
{"result": "SELECT Document_ID, Template_ID, Document_Description\nFROM Documents\nWHERE Document_Name = 'Robbin CV'", "match": {"match": true, "result": [[76, 20, "y"]]}}
{"result": "SELECT COUNT(DISTINCT T1.Template_ID) \nFROM Documents AS D \nJOIN Templates AS T1 ON D.Template_ID = T1.Template_ID", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT COUNT(DISTINCT Template_ID) FROM Documents", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT COUNT(D.Document_ID) \nFROM Documents D \nJOIN Templates T ON D.Template_ID = T.Template_ID \nWHERE T.Template_Type_Code = 'PPT';", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(T1.Document_ID) \nFROM Documents AS T1 \nJOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID \nJOIN Ref_Template_Types AS T3 ON T2.Template_Type_Code = T3.Template_Type_Code \nWHERE T3.Template_Type_Code = 'PPT';", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT T.Template_ID, COUNT(D.Document_ID) AS Document_Count\nFROM Templates T\nLEFT JOIN Documents D ON T.Template_ID = D.Template_ID\nGROUP BY T.Template_ID", "match": {"match": false, "result": [[0, 0], [1, 1], [4, 1], [6, 1], [7, 1], [8, 1], [9, 0], [10, 1], [11, 2], [14, 2], [15, 0], [16, 0], [18, 0], [19, 0], [20, 1], [21, 1], [22, 1], [23, 0], [24, 0], [25, 2]], "gt": [[1, 1], [4, 1], [6, 1], [7, 1], [8, 1], [10, 1], [11, 2], [14, 2], [20, 1], [21, 1], [22, 1], [25, 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n  Document_ID,\n  COUNT(Document_ID) AS Count\nFROM \n  Documents\nGROUP BY \n  Document_ID", "match": {"match": false, "result": [[0, 1], [1, 1], [3, 1], [76, 1], [80, 1], [82, 1], [2394, 1], [3830, 1], [33930, 1], [50123, 1], [651512, 1], [801801, 1], [3540024, 1], [16514113, 1], [385906526, 1]], "gt": [[1, 1], [4, 1], [6, 1], [7, 1], [8, 1], [10, 1], [11, 2], [14, 2], [20, 1], [21, 1], [22, 1], [25, 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.Template_ID, TT.Template_Type_Code \nFROM Documents D \nJOIN Templates T ON D.Template_ID = T.Template_ID \nJOIN Ref_Template_Types TT ON T.Template_Type_Code = TT.Template_Type_Code \nGROUP BY T.Template_ID, TT.Template_Type_Code \nORDER BY COUNT(D.Document_ID) DESC \nLIMIT 1;", "match": {"match": false, "result": [[11, "BK"]], "gt": [[25, "PP"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.Template_Type_Code, COUNT(*) AS Document_Count\nFROM Templates T\nJOIN Documents D ON T.Template_ID = D.Template_ID\nGROUP BY T.Template_Type_Code\nORDER BY Document_Count DESC\nLIMIT 1", "match": {"match": false, "result": [["BK", 5]], "gt": [[25, "PP"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.Template_ID \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID \nGROUP BY T.Template_ID \nHAVING COUNT(D.Template_ID) > 1", "match": {"match": true, "result": [[11], [14], [25]]}}
{"result": "SELECT T.Template_ID \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID \nGROUP BY T.Template_ID \nHAVING COUNT(D.Template_ID) > 1", "match": {"match": true, "result": [[11], [14], [25]]}}
{"result": "SELECT T.Template_ID \nFROM Templates T \nLEFT JOIN Documents D ON T.Template_ID = D.Template_ID \nWHERE D.Template_ID IS NULL", "match": {"match": true, "result": [[0], [9], [15], [16], [18], [19], [23], [24]]}}
{"result": "SELECT T.Template_ID \nFROM Templates T \nLEFT JOIN Documents D ON T.Template_ID = D.Template_ID \nWHERE D.Template_ID IS NULL", "match": {"match": true, "result": [[0], [9], [15], [16], [18], [19], [23], [24]]}}
{"result": "SELECT COUNT(*) FROM Templates", "match": {"match": true, "result": [[20]]}}
{"result": "SELECT COUNT(*) \nFROM Templates", "match": {"match": true, "result": [[20]]}}
{"result": "SELECT Template_ID, Version_Number, Template_Type_Code \nFROM Templates;", "match": {"match": true, "result": [[0, 5, "PP"], [1, 9, "PP"], [4, 4, "BK"], [6, 2, "PPT"], [7, 8, "PPT"], [8, 3, "BK"], [9, 2, "BK"], [10, 1, "PPT"], [11, 6, "BK"], [14, 7, "AD"], [15, 9, "CV"], [16, 5, "CV"], [18, 5, "PP"], [19, 7, "AD"], [20, 6, "BK"], [21, 9, "AD"], [22, 0, "PP"], [23, 2, "BK"], [24, 8, "PP"], [25, 5, "PP"]]}}
{"result": "SELECT Template_ID, Version_Number, Template_Type_Code \nFROM Templates;", "match": {"match": true, "result": [[0, 5, "PP"], [1, 9, "PP"], [4, 4, "BK"], [6, 2, "PPT"], [7, 8, "PPT"], [8, 3, "BK"], [9, 2, "BK"], [10, 1, "PPT"], [11, 6, "BK"], [14, 7, "AD"], [15, 9, "CV"], [16, 5, "CV"], [18, 5, "PP"], [19, 7, "AD"], [20, 6, "BK"], [21, 9, "AD"], [22, 0, "PP"], [23, 2, "BK"], [24, 8, "PP"], [25, 5, "PP"]]}}
{"result": "SELECT DISTINCT Template_Type_Code \nFROM Templates", "match": {"match": true, "result": [["PP"], ["BK"], ["PPT"], ["AD"], ["CV"]]}}
{"result": "SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types", "match": {"match": false, "result": [["AD"], ["BK"], ["CV"], ["PP"], ["PPT"]], "gt": [["PP"], ["BK"], ["PPT"], ["AD"], ["CV"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Template_ID \nFROM Templates \nWHERE Template_Type_Code IN ('PP', 'PPT');", "match": {"match": true, "result": [[0], [1], [6], [7], [10], [18], [22], [24], [25]]}}
{"result": "SELECT Template_ID \nFROM Templates \nWHERE Template_Type_Code IN ('PP', 'PPT');", "match": {"match": true, "result": [[0], [1], [6], [7], [10], [18], [22], [24], [25]]}}
{"result": "SELECT COUNT(Template_ID) \nFROM Templates \nWHERE Template_Type_Code = 'CV';", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(*) \nFROM Templates \nWHERE Template_Type_Code = 'CV'", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT Version_Number, Template_Type_Code\nFROM Templates\nWHERE Version_Number > 5;", "match": {"match": true, "result": [[9, "PP"], [8, "PPT"], [6, "BK"], [7, "AD"], [9, "CV"], [7, "AD"], [6, "BK"], [9, "AD"], [8, "PP"]]}}
{"result": "SELECT Version_Number, Template_Type_Code \nFROM Templates \nWHERE Version_Number > 5", "match": {"match": true, "result": [[9, "PP"], [8, "PPT"], [6, "BK"], [7, "AD"], [9, "CV"], [7, "AD"], [6, "BK"], [9, "AD"], [8, "PP"]]}}
{"result": "SELECT \n    T1.Template_Type_Code, \n    COUNT(T2.Template_ID) \nFROM \n    Ref_Template_Types T1 \nINNER JOIN \n    Templates T2 ON T1.Template_Type_Code = T2.Template_Type_Code \nGROUP BY \n    T1.Template_Type_Code", "match": {"match": true, "result": [["AD", 3], ["BK", 6], ["CV", 2], ["PP", 6], ["PPT", 3]]}}
{"result": "SELECT Template_Type_Code, COUNT(Template_ID) AS Template_Count\nFROM Templates\nGROUP BY Template_Type_Code;", "match": {"match": true, "result": [["AD", 3], ["BK", 6], ["CV", 2], ["PP", 6], ["PPT", 3]]}}
{"result": "SELECT Template_Type_Code \nFROM Templates \nGROUP BY Template_Type_Code \nORDER BY COUNT(Template_ID) DESC \nLIMIT 1;", "match": {"match": true, "result": [["PP"]]}}
{"result": "SELECT T2.Template_Type_Code\nFROM Templates AS T1\nINNER JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code\nGROUP BY T2.Template_Type_Code\nORDER BY COUNT(T1.Template_ID) DESC\nLIMIT 1", "match": {"match": true, "result": [["PP"]]}}
{"result": "SELECT T2.Template_Type_Code \nFROM Templates T1 \nJOIN Ref_Template_Types T2 ON T1.Template_Type_Code = T2.Template_Type_Code \nGROUP BY T2.Template_Type_Code \nHAVING COUNT(T1.Template_ID) < 3", "match": {"match": true, "result": [["CV"]]}}
{"result": "SELECT DISTINCT t.Template_Type_Code \nFROM Templates t \nJOIN Ref_Template_Types rt ON t.Template_Type_Code = rt.Template_Type_Code \nGROUP BY t.Template_Type_Code \nHAVING COUNT(t.Template_ID) < 3;", "match": {"match": true, "result": [["CV"]]}}
{"result": "SELECT MIN(Version_Number), Template_Type_Code \nFROM Templates;", "match": {"match": true, "result": [[0, "PP"]]}}
{"result": "SELECT MIN(T1.Version_Number), T2.Template_Type_Code \nFROM Templates T1 \nJOIN Ref_Template_Types T2 ON T1.Template_Type_Code = T2.Template_Type_Code;", "match": {"match": true, "result": [[0, "PP"]]}}
{"result": "SELECT T.Template_Type_Code \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID \nWHERE D.Document_Name = 'Data base';", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT T.Template_Type_Code\nFROM Templates T\nJOIN Documents D ON T.Template_ID = D.Template_ID\nWHERE D.Document_Name = 'Data base';", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT DISTINCT T1.Document_Name \nFROM Documents AS T1 \nJOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID \nJOIN Ref_Template_Types AS T3 ON T2.Template_Type_Code = T3.Template_Type_Code \nWHERE T3.Template_Type_Code = 'BK'", "match": {"match": true, "result": [["Robbin CV"], ["Data base"], ["How to read a book"], ["Palm reading"], ["About Korea"]]}}
{"result": "SELECT DISTINCT t.Template_ID, d.Document_Name \nFROM Templates t \nJOIN Documents d ON t.Template_ID = d.Template_ID \nJOIN Ref_Template_Types rt ON t.Template_Type_Code = rt.Template_Type_Code \nWHERE rt.Template_Type_Code = 'BK';", "match": {"match": false, "result": [[20, "Robbin CV"], [11, "Data base"], [4, "How to read a book"], [8, "Palm reading"], [11, "About Korea"]], "gt": [["Robbin CV"], ["Data base"], ["How to read a book"], ["Palm reading"], ["About Korea"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    RTT.Template_Type_Code,\n    COUNT(D.Document_ID) AS Num_Documents\nFROM \n    Ref_Template_Types RTT\nLEFT JOIN \n    Templates T ON RTT.Template_Type_Code = T.Template_Type_Code\nLEFT JOIN \n    Documents D ON T.Template_ID = D.Template_ID\nGROUP BY \n    RTT.Template_Type_Code", "match": {"match": false, "result": [["AD", 3], ["BK", 5], ["CV", 0], ["PP", 4], ["PPT", 3]], "gt": [["AD", 3], ["BK", 5], ["PP", 4], ["PPT", 3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    T1.Template_Type_Code, \n    COUNT(T2.Document_ID) AS Document_Count\nFROM \n    Ref_Template_Types T1\nLEFT JOIN \n    Documents T2 ON T1.Template_Type_Code = T2.Template_ID\nGROUP BY \n    T1.Template_Type_Code", "match": {"match": false, "result": [["AD", 0], ["BK", 0], ["CV", 0], ["PP", 0], ["PPT", 0]], "gt": [["AD", 3], ["BK", 5], ["PP", 4], ["PPT", 3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Template_Type_Code, COUNT(DISTINCT T2.Document_ID) as count\nFROM Ref_Template_Types T1\nJOIN Templates T2 ON T1.Template_Type_Code = T2.Template_Type_Code\nJOIN Documents T3 ON T2.Template_ID = T3.Template_ID\nGROUP BY T1.Template_Type_Code\nORDER BY count DESC\nLIMIT 1;", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Document_ID"}}
{"result": "SELECT T2.Template_Type_Code\nFROM Documents D\nJOIN Templates T ON D.Template_ID = T.Template_ID\nJOIN Ref_Template_Types T2 ON T.Template_Type_Code = T2.Template_Type_Code\nGROUP BY T2.Template_Type_Code\nORDER BY COUNT(D.Document_ID) DESC\nLIMIT 1", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT rtt.Template_Type_Code \nFROM Ref_Template_Types rtt \nLEFT JOIN Templates t ON rtt.Template_Type_Code = t.Template_Type_Code \nLEFT JOIN Documents d ON t.Template_ID = d.Template_ID \nWHERE d.Document_ID IS NULL;", "match": {"match": false, "result": [["AD"], ["BK"], ["BK"], ["CV"], ["CV"], ["PP"], ["PP"], ["PP"]], "gt": [["CV"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Template_Type_Code \nFROM Ref_Template_Types \nWHERE Template_Type_Code NOT IN (\n  SELECT DISTINCT Template_Type_Code \n  FROM Templates \n);", "match": {"match": false, "result": [], "gt": [["CV"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Template_Type_Code, Template_Type_Description\nFROM Ref_Template_Types;", "match": {"match": true, "result": [["PPT", "Presentation"], ["CV", "CV"], ["AD", "Advertisement"], ["PP", "Paper"], ["BK", "Book"]]}}
{"result": "SELECT Template_Type_Code, Template_Type_Description \nFROM Ref_Template_Types", "match": {"match": true, "result": [["PPT", "Presentation"], ["CV", "CV"], ["AD", "Advertisement"], ["PP", "Paper"], ["BK", "Book"]]}}
{"result": "SELECT Template_Type_Description \nFROM Ref_Template_Types \nWHERE Template_Type_Code = 'AD';", "match": {"match": true, "result": [["Advertisement"]]}}
{"result": "SELECT Template_Type_Description \nFROM Ref_Template_Types \nWHERE Template_Type_Code = 'AD';", "match": {"match": true, "result": [["Advertisement"]]}}
{"result": "SELECT Template_Type_Code\nFROM Ref_Template_Types\nWHERE Template_Type_Description = 'Book'", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT Template_Type_Code\nFROM Ref_Template_Types\nWHERE Template_Type_Description = 'Book'", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT DISTINCT T2.Template_Type_Description \nFROM Documents D \nJOIN Templates T ON D.Template_ID = T.Template_ID \nJOIN Ref_Template_Types T2 ON T.Template_Type_Code = T2.Template_Type_Code", "match": {"match": true, "result": [["Presentation"], ["Paper"], ["Book"], ["Advertisement"]]}}
{"result": "SELECT DISTINCT T.Template_Type_Description \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID", "match": {"match": false, "error": "Query execution failed with error: no such column: T.Template_Type_Description"}}
{"result": "SELECT T.Template_ID\nFROM Templates T\nJOIN Ref_Template_Types R ON T.Template_Type_Code = R.Template_Type_Code\nWHERE R.Template_Type_Description = 'Presentation'", "match": {"match": true, "result": [[6], [7], [10]]}}
{"result": "SELECT Template_ID \nFROM Templates \nWHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation')", "match": {"match": true, "result": [[6], [7], [10]]}}
{"result": "SELECT COUNT(Paragraph_ID) FROM Paragraphs", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(Paragraph_ID) FROM Paragraphs", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(T2.Paragraph_ID) \nFROM Documents AS T1 \nINNER JOIN Paragraphs AS T2 \nON T1.Document_ID = T2.Document_ID \nWHERE T1.Document_Name = 'Summer Show'", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(T1.Paragraph_ID) \nFROM Paragraphs T1 \nJOIN Documents T2 ON T1.Document_ID = T2.Document_ID \nWHERE T2.Document_Name = 'Summer Show';", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT Paragraph_ID, Paragraph_Text, Other_Details\nFROM Paragraphs\nWHERE Paragraph_Text LIKE '%Korea%';", "match": {"match": false, "result": [[7, "Korea", null], [510442723, "Korea", null]], "gt": [[null], [null]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Template_Details\nFROM Paragraphs AS T1\nJOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID\nJOIN Templates AS T3 ON T2.Template_ID = T3.Template_ID\nJOIN Ref_Template_Types AS T4 ON T3.Template_Type_Code = T4.Template_Type_Code\nWHERE T1.Paragraph_Text LIKE '%Korea%';", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Template_Details"}}
{"result": "SELECT P.Paragraph_ID, P.Paragraph_Text\nFROM Paragraphs P \nJOIN Documents D ON P.Document_ID = D.Document_ID\nWHERE D.Document_Name = 'Welcome to NY';", "match": {"match": true, "result": [[16615, "Japan"], [608931827, "Micronesia"]]}}
{"result": "SELECT Paragraph_ID, Paragraph_Text \nFROM Paragraphs \nWHERE Document_ID = \n  (SELECT Document_ID \n   FROM Documents \n   WHERE Document_Name = 'Welcome to NY')", "match": {"match": true, "result": [[16615, "Japan"], [608931827, "Micronesia"]]}}
{"result": "SELECT P.Paragraph_Text \nFROM Paragraphs P \nJOIN Documents D ON P.Document_ID = D.Document_ID \nWHERE D.Document_Name = 'Customer reviews'", "match": {"match": true, "result": [["Korea"], ["Ukraine"], ["Korea"]]}}
{"result": "SELECT Paragraph_Text \nFROM Paragraphs \nWHERE Document_ID = ( SELECT Document_ID \n                     FROM Documents \n                     WHERE Document_Name = 'Customer reviews' );", "match": {"match": true, "result": [["Korea"], ["Ukraine"], ["Korea"]]}}
{"result": "SELECT \n  Document_ID, \n  COUNT(Paragraph_ID) AS Number_of_Paragraphs\nFROM \n  Paragraphs\nGROUP BY \n  Document_ID\nORDER BY \n  Document_ID", "match": {"match": true, "result": [[3, 1], [80, 2], [2394, 3], [3830, 1], [33930, 1], [50123, 1], [651512, 2], [3540024, 1], [16514113, 2], [385906526, 1]]}}
{"result": "SELECT Document_ID, COUNT(Paragraph_ID) \nFROM Paragraphs \nGROUP BY Document_ID \nORDER BY Document_ID", "match": {"match": true, "result": [[3, 1], [80, 2], [2394, 3], [3830, 1], [33930, 1], [50123, 1], [651512, 2], [3540024, 1], [16514113, 2], [385906526, 1]]}}
{"result": "SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) as Num_Paragraphs\nFROM Documents\nLEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID, Documents.Document_Name", "match": {"match": false, "result": [[0, "Introduction of OS", 0], [1, "Understanding DB", 0], [3, "Summer Show", 1], [76, "Robbin CV", 0], [80, "Welcome to NY", 2], [82, "Data base", 0], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [801801, "How to read a book", 0], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "gt": [[3, "Summer Show", 1], [80, "Welcome to NY", 2], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    D.Document_ID, \n    D.Document_Name, \n    COUNT(P.Paragraph_ID) AS Paragraph_Count\nFROM \n    Documents D\nINNER JOIN \n    Paragraphs P ON D.Document_ID = P.Document_ID\nGROUP BY \n    D.Document_ID, \n    D.Document_Name;", "match": {"match": true, "result": [[3, "Summer Show", 1], [80, "Welcome to NY", 2], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]]}}
{"result": "SELECT DISTINCT d.Document_ID\nFROM Paragraphs p\nJOIN Documents d ON p.Document_ID = d.Document_ID\nGROUP BY d.Document_ID\nHAVING COUNT(p.Paragraph_ID) >= 2", "match": {"match": true, "result": [[80], [2394], [651512], [16514113]]}}
{"result": "SELECT T1.Document_ID\nFROM Documents AS T1\nJOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID\nGROUP BY T1.Document_ID\nHAVING COUNT(T2.Paragraph_ID)  >= 2", "match": {"match": true, "result": [[80], [2394], [651512], [16514113]]}}
{"result": "SELECT Document_ID, Document_Name \nFROM Documents \nWHERE Document_ID = (SELECT Document_ID \n                     FROM Documents \n                     GROUP BY Document_ID \n                     ORDER BY COUNT(Document_ID) DESC \n                     LIMIT 1);", "match": {"match": false, "result": [[0, "Introduction of OS"]], "gt": [[2394, "Customer reviews"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Document_ID, T2.Document_Name \nFROM Paragraphs AS T1 \nJOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID \nGROUP BY T1.Document_ID, T2.Document_Name \nORDER BY COUNT(T1.Paragraph_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [[2394, "Customer reviews"]]}}
{"result": "SELECT Document_ID \nFROM Paragraphs \nGROUP BY Document_ID \nORDER BY COUNT(*) ASC \nLIMIT 1", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Document_ID \nFROM Paragraphs \nGROUP BY Document_ID \nORDER BY COUNT(Document_ID) ASC \nLIMIT 1", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Document_ID\nFROM Paragraphs\nGROUP BY Document_ID\nHAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2", "match": {"match": true, "result": [[3], [80], [3830], [33930], [50123], [651512], [3540024], [16514113], [385906526]]}}
{"result": "SELECT Document_ID\nFROM Paragraphs\nGROUP BY Document_ID\nHAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2", "match": {"match": true, "result": [[3], [80], [3830], [33930], [50123], [651512], [3540024], [16514113], [385906526]]}}
{"result": "SELECT T2.Document_ID\nFROM Paragraphs AS T1\nJOIN Documents AS T2\nON T1.Document_ID = T2.Document_ID\nWHERE T1.Paragraph_Text IN ('Brazil', 'Ireland')", "match": {"match": false, "result": [[16514113], [16514113]], "gt": [[16514113]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T1.Document_ID \nFROM Documents AS T1 \nJOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID \nWHERE T2.Paragraph_Text IN ('Brazil', 'Ireland')", "match": {"match": true, "result": [[16514113]]}}
{"result": "SELECT COUNT(Teacher_ID) \nFROM teacher;", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT COUNT(*) FROM teacher", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT Name \nFROM teacher \nORDER BY Age ASC;", "match": {"match": true, "result": [["Vicente Carretero"], ["Gustaaf Deloor"], ["Joseph Huts"], ["John Deloor"], ["Lucy Wong"], ["Anne Walker"], ["Kearsley Brown"]]}}
{"result": "SELECT Name FROM teacher ORDER BY Age ASC", "match": {"match": true, "result": [["Vicente Carretero"], ["Gustaaf Deloor"], ["Joseph Huts"], ["John Deloor"], ["Lucy Wong"], ["Anne Walker"], ["Kearsley Brown"]]}}
{"result": "SELECT Age, Hometown FROM teacher", "match": {"match": true, "result": [["32", "Blackrod Urban District"], ["29", "Bolton County Borough"], ["26", "Farnworth Municipal Borough"], ["33", "Horwich Urban District"], ["45", "Kearsley Urban District"], ["41", "Little Lever Urban District"], ["39", "Turton Urban District"]]}}
{"result": "SELECT Age, Hometown FROM teacher", "match": {"match": true, "result": [["32", "Blackrod Urban District"], ["29", "Bolton County Borough"], ["26", "Farnworth Municipal Borough"], ["33", "Horwich Urban District"], ["45", "Kearsley Urban District"], ["41", "Little Lever Urban District"], ["39", "Turton Urban District"]]}}
{"result": "SELECT Name \nFROM teacher \nWHERE Hometown != 'Little Lever Urban District'", "match": {"match": false, "result": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Lucy Wong"]], "gt": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Anne Walker"], ["Lucy Wong"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name \nFROM teacher \nWHERE Hometown != 'Little Lever Urban District';", "match": {"match": false, "result": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Lucy Wong"]], "gt": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Anne Walker"], ["Lucy Wong"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name FROM teacher WHERE Age = '32' OR Age = '33'", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT Name \nFROM teacher \nWHERE Age = 32 OR Age = 33", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "match": {"match": true, "result": [["Farnworth Municipal Borough"]]}}
{"result": "SELECT Hometown FROM teacher WHERE Age = ( SELECT MIN(Age) FROM teacher );", "match": {"match": true, "result": [["Farnworth Municipal Borough"]]}}
{"result": "SELECT Hometown, COUNT(Teacher_ID) FROM teacher GROUP BY Hometown", "match": {"match": true, "result": [["Blackrod Urban District", 1], ["Bolton County Borough", 1], ["Farnworth Municipal Borough", 1], ["Horwich Urban District", 1], ["Kearsley Urban District", 1], ["Little Lever Urban District", 1], ["Turton Urban District", 1]]}}
{"result": "SELECT COUNT(Teacher_ID) , Hometown FROM `teacher` GROUP BY Hometown", "match": {"match": false, "result": [[1, "Blackrod Urban District"], [1, "Bolton County Borough"], [1, "Farnworth Municipal Borough"], [1, "Horwich Urban District"], [1, "Kearsley Urban District"], [1, "Little Lever Urban District"], [1, "Turton Urban District"]], "gt": [["Blackrod Urban District", 1], ["Bolton County Borough", 1], ["Farnworth Municipal Borough", 1], ["Horwich Urban District", 1], ["Kearsley Urban District", 1], ["Little Lever Urban District", 1], ["Turton Urban District", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(Hometown) DESC LIMIT 1", "match": {"match": true, "result": [["Turton Urban District"]]}}
{"result": "SELECT Hometown, COUNT(Teacher_ID) FROM teacher GROUP BY Hometown ORDER BY COUNT(Teacher_ID) DESC LIMIT 5", "match": {"match": false, "result": [["Turton Urban District", 1], ["Little Lever Urban District", 1], ["Kearsley Urban District", 1], ["Horwich Urban District", 1], ["Farnworth Municipal Borough", 1]], "gt": [["Turton Urban District"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Hometown \nFROM teacher \nGROUP BY Hometown \nHAVING COUNT(Teacher_ID)  >= 2", "match": {"match": true, "result": []}}
{"result": "SELECT Hometown FROM teacher \nGROUP BY Hometown \nHAVING COUNT(Teacher_ID) >= 2", "match": {"match": true, "result": []}}
{"result": "SELECT t.Name, c.Course \nFROM teacher t \nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID \nJOIN course c ON ca.Course_ID = c.Course_ID", "match": {"match": true, "result": [["Kearsley Brown", "Math"], ["Vicente Carretero", "Math"], ["Gustaaf Deloor", "Science"], ["Anne Walker", "History"], ["Anne Walker", "Bible"], ["Lucy Wong", "Music"]]}}
{"result": "SELECT T1.Name, T2.Course \nFROM teacher AS T1 \nJOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nJOIN course AS T3 ON T2.Course_ID = T3.Course_ID", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Course"}}
{"result": "SELECT T1.Name, T2.Course \nFROM teacher AS T1 \nJOIN course_arrange AS T3 ON T1.Teacher_ID = T3.Teacher_ID \nJOIN course AS T2 ON T3.Course_ID = T2.Course_ID \nORDER BY T1.Name ASC", "match": {"match": true, "result": [["Anne Walker", "History"], ["Anne Walker", "Bible"], ["Gustaaf Deloor", "Science"], ["Kearsley Brown", "Math"], ["Lucy Wong", "Music"], ["Vicente Carretero", "Math"]]}}
{"result": "SELECT T1.Name, T2.Course \nFROM teacher AS T1 \nJOIN course_arrange AS T3 ON T1.Teacher_ID = T3.Teacher_ID \nJOIN course AS T2 ON T3.Course_ID = T2.Course_ID \nORDER BY T1.Name ASC", "match": {"match": true, "result": [["Anne Walker", "History"], ["Anne Walker", "Bible"], ["Gustaaf Deloor", "Science"], ["Kearsley Brown", "Math"], ["Lucy Wong", "Music"], ["Vicente Carretero", "Math"]]}}
{"result": "SELECT T1.Name \nFROM teacher AS T1 \nJOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nJOIN course AS T3 ON T2.Course_ID = T3.Course_ID \nWHERE T3.Course = 'math';", "match": {"match": false, "result": [], "gt": [["Kearsley Brown"], ["Vicente Carretero"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T2.Name \nFROM course_arrange AS T1 \nJOIN course AS T2 ON T1.Course_ID = T2.Course_ID \nJOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID \nWHERE T2.Course = 'Math'", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Name"}}
{"result": "SELECT T2.Name, COUNT(T1.Course_ID) \nFROM course_arrange AS T1 \nJOIN teacher AS T2 \nON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T2.Name", "match": {"match": true, "result": [["Anne Walker", 2], ["Gustaaf Deloor", 1], ["Kearsley Brown", 1], ["Lucy Wong", 1], ["Vicente Carretero", 1]]}}
{"result": "SELECT T2.Name, COUNT(T1.Course_ID) \nFROM course_arrange AS T1 \nJOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T2.Name", "match": {"match": true, "result": [["Anne Walker", 2], ["Gustaaf Deloor", 1], ["Kearsley Brown", 1], ["Lucy Wong", 1], ["Vicente Carretero", 1]]}}
{"result": "SELECT T1.Name \nFROM teacher AS T1 \nJOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T1.Name \nHAVING COUNT(T2.Course_ID)  >= 2", "match": {"match": true, "result": [["Anne Walker"]]}}
{"result": "SELECT T2.Name \nFROM course_arrange AS T1 \nJOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T1.Teacher_ID \nHAVING COUNT(T1.Course_ID) >= 2", "match": {"match": true, "result": [["Anne Walker"]]}}
{"result": "SELECT Name \nFROM teacher \nWHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange);", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT Name \nFROM teacher \nWHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange);", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT COUNT(ID) \nFROM visitor \nWHERE Age < 30;", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Name \nFROM visitor \nWHERE Level_of_membership  >  4 \nORDER BY Level_of_membership DESC", "match": {"match": true, "result": [["Gonzalo Higua\u00edn "], ["Fernando Gago"], ["Guti Midfielder"]]}}
{"result": "SELECT AVG(T2.Age) \nFROM visitor AS T1 \nJOIN visit AS T2 ON T1.ID = T2.visitor_ID \nWHERE T1.Level_of_membership NOT IN (SELECT ID FROM visitor WHERE Level_of_membership > 4);", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Age"}}
{"result": "SELECT Name, Level_of_membership\nFROM visitor\nWHERE Level_of_membership > 4\nORDER BY Age DESC", "match": {"match": true, "result": [["Fernando Gago", 6], ["Gonzalo Higua\u00edn ", 8], ["Guti Midfielder", 5]]}}
{"result": "SELECT Museum_ID, Name \nFROM museum \nORDER BY Num_of_Staff DESC \nLIMIT 1;", "match": {"match": true, "result": [[1, "Plaza Museum"]]}}
{"result": "SELECT AVG(Num_of_Staff) \nFROM museum \nWHERE Open_Year < '2009';", "match": {"match": true, "result": [[31.333333333333332]]}}
{"result": "SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'", "match": {"match": false, "result": [["2000", 62]], "gt": [[62, "2000"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name \nFROM museum AS T1 \nJOIN (SELECT Museum_ID, Num_of_Staff \n      FROM museum \n      WHERE Open_Year > '2010' \n      GROUP BY Museum_ID, Num_of_Staff \n      ORDER BY Num_of_Staff ASC \n      LIMIT 1) AS T2 \nON T1.Museum_ID = T2.Museum_ID", "match": {"match": false, "result": [["Willow Grande Museum"]], "gt": [["Plaza Museum"], ["Capital Plaza Museum"], ["Jefferson Development Museum"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.`ID`, T2.`Name`, T2.`Age` \nFROM visit AS T1 \nINNER JOIN visitor AS T2 ON T1.visitor_ID = T2.`ID` \nGROUP BY T2.`ID` \nHAVING COUNT(T1.`Museum_ID`) > 1", "match": {"match": true, "result": [[3, "Arjen Robben", 27], [5, "Fernando Gago", 36], [6, "Rafael van der Vaart", 25]]}}
{"result": "SELECT T1.ID, T1.Name, T1.Level_of_membership\nFROM visitor AS T1\nJOIN (\n  SELECT visitor_ID, SUM(Total_spent) as Total_spent\n  FROM visit\n  GROUP BY visitor_ID\n  ORDER BY Total_spent DESC\n  LIMIT 1\n) AS T2\nON T1.ID = T2.visitor_ID", "match": {"match": false, "result": [[3, "Arjen Robben", 1]], "gt": [["3", "Arjen Robben", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT M.Museum_ID, M.Name \nFROM museum M \nJOIN visit V ON M.Museum_ID = V.Museum_ID \nGROUP BY M.Museum_ID, M.Name \nORDER BY COUNT(V.Museum_ID) DESC \nLIMIT 1;", "match": {"match": true, "result": [[2, "Capital Plaza Museum"]]}}
{"result": "SELECT Name \nFROM museum \nWHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)", "match": {"match": true, "result": [["Jefferson Development Museum"], ["RiverPark Museum"], ["Place Tower Museum"], ["Central City District Residential Museum"]]}}
{"result": "SELECT T1.Name, T1.Age \nFROM visitor AS T1 \nINNER JOIN visit AS T2 ON T1.ID = T2.visitor_ID \nORDER BY T2.Num_of_Ticket DESC \nLIMIT 1;", "match": {"match": true, "result": [["Arjen Robben", 27]]}}
{"result": "SELECT AVG(Num_of_Ticket) as avg_tickets, MAX(Num_of_Ticket) as max_tickets\nFROM visit", "match": {"match": true, "result": [[10.5, 24]]}}
{"result": "SELECT SUM(T2.Total_spent) \nFROM visitor AS T1\nJOIN visit AS T2 ON T1.ID = T2.visitor_ID\nWHERE T1.Level_of_membership = 1;", "match": {"match": true, "result": [[570.84]]}}
{"result": "SELECT DISTINCT T1.Name \nFROM visitor AS T1 \nJOIN visit AS T2 ON T1.ID = T2.visitor_ID \nJOIN museum AS T3 ON T2.Museum_ID = T3.Museum_ID \nWHERE T3.Open_Year < '2009' AND T3.Open_Year > '2011'", "match": {"match": false, "result": [], "gt": [["Fernando Gago"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) \nFROM visitor \nWHERE ID NOT IN (\n  SELECT visitor_ID \n  FROM visit \n  WHERE Museum_ID IN (\n    SELECT Museum_ID \n    FROM museum \n    WHERE Open_Year > '2010'\n  )\n);", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(Museum_ID) \nFROM museum \nWHERE Open_Year > 2013 OR Open_Year < 2008", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(id) FROM ship WHERE disposition_of_ship = 'Captured'", "match": {"match": true, "result": [[4]]}}
{"result": "SELECT `name`, `tonnage` \nFROM \"ship\" \nORDER BY `name` DESC", "match": {"match": true, "result": [["Three Brothers", "t"], ["Mary", "t"], ["Lettice", "t"], ["HMS Avon", "391"], ["HMS Atalanta", "225"], ["Bon Accord", "t"], ["Bacchus", "t"]]}}
{"result": "SELECT name, date, result FROM battle", "match": {"match": false, "result": [["Battle of Adrianople", "14 April 1205", "Bulgarian victory"], ["Battle of Serres", "June 1205", "Bulgarian victory"], ["Battle of Rusion", "31 January 1206", "Bulgarian victory"], ["Battle of Rodosto", "February 1206", "Bulgarian victory"], ["Battle of Messinopolis", "4 September 1207", "Bulgarian victory"], ["Battle of Boruy", "June 1205", "Bulgarian victory"], ["Battle of Philippopolis", "31 June 1208", "Latin victory"], ["Siege of Constantinople", "1235", "Two Year Truce"]], "gt": [["Battle of Adrianople", "14 April 1205"], ["Battle of Serres", "June 1205"], ["Battle of Rusion", "31 January 1206"], ["Battle of Rodosto", "February 1206"], ["Battle of Messinopolis", "4 September 1207"], ["Battle of Boruy", "June 1205"], ["Battle of Philippopolis", "31 June 1208"], ["Siege of Constantinople", "1235"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(killed) , MIN(killed) FROM death", "match": {"match": true, "result": [[29, 0]]}}
{"result": "SELECT AVG(injured) FROM death", "match": {"match": true, "result": [[1.0769230769230769]]}}
{"result": "SELECT killed, injured \nFROM death \nWHERE caused_by_ship_id IN (SELECT id \n                            FROM ship \n                            WHERE tonnage = 't');", "match": {"match": true, "result": [[8, 0], [3, 0], [25, 0], [2, 0], [0, 0], [4, 5], [0, 0], [29, 0], [0, 0], [0, 0], [14, 0]]}}
{"result": "SELECT name, result \nFROM battle \nWHERE bulgarian_commander != 'Boril';", "match": {"match": true, "result": [["Battle of Adrianople", "Bulgarian victory"], ["Battle of Serres", "Bulgarian victory"], ["Battle of Rusion", "Bulgarian victory"], ["Battle of Rodosto", "Bulgarian victory"], ["Battle of Messinopolis", "Bulgarian victory"], ["Siege of Constantinople", "Two Year Truce"]]}}
{"result": "SELECT T2.id, T2.name \nFROM ship AS T1 \nJOIN battle AS T2 ON T1.lost_in_battle = T2.id \nWHERE T1.ship_type = 'Brig'", "match": {"match": true, "result": [[8, "Siege of Constantinople"], [7, "Battle of Philippopolis"], [6, "Battle of Boruy"], [5, "Battle of Messinopolis"], [4, "Battle of Rodosto"]]}}
{"result": "SELECT T1.id, T1.name \nFROM battle AS T1 \nWHERE T1.id IN ( SELECT T2.lost_in_battle \n                  FROM ship AS T2 \n                  GROUP BY T2.lost_in_battle \n                  HAVING SUM(T3.killed) + SUM(T3.injured) > 10 \n                  );", "match": {"match": false, "error": "Query execution failed with error: no such column: T3.injured"}}
{"result": "SELECT caused_by_ship_id, name \nFROM ship \nWHERE id IN ( SELECT caused_by_ship_id \n              FROM death \n              GROUP BY caused_by_ship_id \n              ORDER BY COUNT(injured) DESC \n              LIMIT 1 );", "match": {"match": false, "error": "Query execution failed with error: no such column: caused_by_ship_id"}}
{"result": "SELECT DISTINCT name \nFROM battle \nWHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';", "match": {"match": true, "result": [["Battle of Adrianople"]]}}
{"result": "SELECT COUNT(DISTINCT result) FROM battle", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(*) \nFROM battle \nWHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225');", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT T2.name, T2.date \nFROM ship AS T1 \nJOIN battle AS T2 ON T1.lost_in_battle = T2.id \nWHERE T1.name = 'Lettice' OR T1.name = 'HMS Atalanta'", "match": {"match": false, "result": [["Siege of Constantinople", "1235"], ["Siege of Constantinople", "1235"]], "gt": [["Siege of Constantinople", "1235"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.name, T2.result, T2.bulgarian_commander \nFROM ship AS T1 \nLEFT JOIN battle AS T2 ON T1.lost_in_battle = T2.id \nWHERE T1.location = 'English Channel'", "match": {"match": false, "result": [["Siege of Constantinople", "Two Year Truce", "Ivan Asen II"], ["Battle of Philippopolis", "Latin victory", "Boril"], ["Battle of Boruy", "Bulgarian victory", "Boril"], ["Battle of Messinopolis", "Bulgarian victory", "Unknown"], ["Battle of Rodosto", "Bulgarian victory", "Kaloyan"]], "gt": [["Battle of Adrianople", "Bulgarian victory", "Kaloyan"], ["Battle of Rusion", "Bulgarian victory", "Kaloyan"], ["Battle of Serres", "Bulgarian victory", "Kaloyan"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT note FROM death WHERE note LIKE '%East%'", "match": {"match": true, "result": [["East Champaran, Bihar"]]}}
{"result": "SELECT line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details \nFROM Addresses;", "match": {"match": false, "result": [["2294 Grant Square Apt. 235", "Apt. 370", null, "Port Chelsea", "148", "Virginia", "Iceland", null], ["3999 Aufderhar Ways Suite 593", "Apt. 388", null, "Lake Laishafurt", "943", "Kentucky", "Burundi", null], ["67942 Carlotta Ferry Apt. 686", "Apt. 583", null, "Goodwinhaven", "541", "Kansas", "Saudi Arabia", null], ["0144 Lamar Plaza Apt. 346", "Suite 703", null, "Port Evanston", "847", "Washington", "Angola", null], ["858 Peggie Bypass Suite 212", "Apt. 335", null, "Michelleburgh", "446", "Hawaii", "Haiti", null], ["16998 Mraz Lodge", "Apt. 689", null, "North Omer", "902", "Kentucky", "Gibraltar", null], ["193 Marlin Brook", "Apt. 406", null, "Herzoghaven", "068", "Arkansas", "Cook Islands", null], ["202 Hessel Views Apt. 468", "Apt. 305", null, "Mariliehaven", "638", "Idaho", "Croatia", null], ["0643 Muller Vista", "Suite 383", null, "Port Elvisfurt", "777", "NorthCarolina", "Gabon", null], ["7081 Eda Center", "Suite 830", null, "Rutherfordtown", "839", "Delaware", "Kyrgyz Republic", null], ["9283 Schulist Falls Apt. 037", "Suite 239", null, "South Palma", "400", "WestVirginia", "Bermuda", null], ["979 Haag Shores Suite 656", "Apt. 468", null, "Prohaskafort", "590", "SouthDakota", "Lesotho", null], ["492 Wilkinson Route", "Suite 865", null, "New Clemensburgh", "386", "Florida", "Samoa", null], ["186 Evan Motorway Apt. 409", "Suite 079", null, "Lake Careyberg", "895", "Kentucky", "New Caledonia", null], ["74046 Metz Walk Apt. 113", "Suite 674", null, "Port Oceane", "669", "Wyoming", "Norfolk Island", null]], "gt": [["2294 Grant Square Apt. 235", "Apt. 370"], ["3999 Aufderhar Ways Suite 593", "Apt. 388"], ["67942 Carlotta Ferry Apt. 686", "Apt. 583"], ["0144 Lamar Plaza Apt. 346", "Suite 703"], ["858 Peggie Bypass Suite 212", "Apt. 335"], ["16998 Mraz Lodge", "Apt. 689"], ["193 Marlin Brook", "Apt. 406"], ["202 Hessel Views Apt. 468", "Apt. 305"], ["0643 Muller Vista", "Suite 383"], ["7081 Eda Center", "Suite 830"], ["9283 Schulist Falls Apt. 037", "Suite 239"], ["979 Haag Shores Suite 656", "Apt. 468"], ["492 Wilkinson Route", "Suite 865"], ["186 Evan Motorway Apt. 409", "Suite 079"], ["74046 Metz Walk Apt. 113", "Suite 674"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT line_1, line_2 FROM Addresses", "match": {"match": true, "result": [["2294 Grant Square Apt. 235", "Apt. 370"], ["3999 Aufderhar Ways Suite 593", "Apt. 388"], ["67942 Carlotta Ferry Apt. 686", "Apt. 583"], ["0144 Lamar Plaza Apt. 346", "Suite 703"], ["858 Peggie Bypass Suite 212", "Apt. 335"], ["16998 Mraz Lodge", "Apt. 689"], ["193 Marlin Brook", "Apt. 406"], ["202 Hessel Views Apt. 468", "Apt. 305"], ["0643 Muller Vista", "Suite 383"], ["7081 Eda Center", "Suite 830"], ["9283 Schulist Falls Apt. 037", "Suite 239"], ["979 Haag Shores Suite 656", "Apt. 468"], ["492 Wilkinson Route", "Suite 865"], ["186 Evan Motorway Apt. 409", "Suite 079"], ["74046 Metz Walk Apt. 113", "Suite 674"]]}}
{"result": "SELECT COUNT(`course_id`) FROM `Courses`", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) FROM Courses", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT section_description \nFROM Sections \nJOIN Courses ON Sections.course_id = Courses.course_id \nWHERE Courses.course_name = 'Math'", "match": {"match": false, "result": [], "gt": [["q"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.course_description \nFROM Courses AS T1 \nJOIN Sections AS T2 ON T1.course_id = T2.course_id \nWHERE T1.course_name LIKE '%math%';", "match": {"match": true, "result": [["q"]]}}
{"result": "SELECT zip_postcode \nFROM Addresses \nWHERE city = 'Port Chelsea';", "match": {"match": true, "result": [["148"]]}}
{"result": "SELECT line_1, line_2, line_3, zip_postcode \nFROM Addresses \nWHERE city = 'Port Chelsea';", "match": {"match": false, "result": [["2294 Grant Square Apt. 235", "Apt. 370", null, "148"]], "gt": [["148"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.department_name, T1.department_id \nFROM Departments T1 \nJOIN Degree_Programs T2 ON T1.department_id = T2.department_id \nGROUP BY T1.department_id \nORDER BY COUNT(T2.degree_program_id) DESC \nLIMIT 1", "match": {"match": true, "result": [["statistics", 8]]}}
{"result": "SELECT D.department_id, D.department_name\nFROM Degree_Programs DP\nJOIN Departments D ON DP.department_id = D.department_id\nGROUP BY DP.department_id\nORDER BY COUNT(DP.degree_program_id) DESC\nLIMIT 1;", "match": {"match": false, "result": [[8, "statistics"]], "gt": [["statistics", 8]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT T1.department_id) \nFROM Degree_Programs T1;", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT COUNT(DISTINCT department_id) FROM Degree_Programs", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(DISTINCT degree_program_id) FROM Degree_Programs", "match": {"match": false, "result": [[15]], "gt": [[3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) \nFROM Degree_Programs \nINNER JOIN Departments ON Degree_Programs.department_id = Departments.department_id \nWHERE Departments.department_name = 'Engineering';", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(*) \nFROM Degree_Programs \nJOIN Departments ON Degree_Programs.department_id = Departments.department_id \nWHERE Departments.department_name = 'Engineering';", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT section_name, section_description FROM Sections", "match": {"match": true, "result": [["a", "non"], ["b", "voluptatem"], ["c", "qui"], ["d", "voluptas"], ["e", "ex"], ["f", "doloremque"], ["g", "provident"], ["h", "et"], ["j", "quis"], ["k", "nesciunt"], ["l", "ad"], ["o", "et"], ["p", "facilis"], ["u", "reprehenderit"], ["y", "qui"]]}}
{"result": "SELECT section_name, section_description \nFROM Sections;", "match": {"match": true, "result": [["a", "non"], ["b", "voluptatem"], ["c", "qui"], ["d", "voluptas"], ["e", "ex"], ["f", "doloremque"], ["g", "provident"], ["h", "et"], ["j", "quis"], ["k", "nesciunt"], ["l", "ad"], ["o", "et"], ["p", "facilis"], ["u", "reprehenderit"], ["y", "qui"]]}}
{"result": "SELECT T.course_name, T.course_id\nFROM (\n  SELECT C.course_name, C.course_id, COUNT(S.section_id) as num_sections\n  FROM Courses C\n  JOIN Sections S ON C.course_id = S.course_id\n  GROUP BY C.course_id\n  HAVING COUNT(S.section_id) <= 2\n) T", "match": {"match": true, "result": [["ds", 1], ["math", 2], ["en", 4], ["fr", 5], ["la", 6], ["cal", 7], ["nlp", 8], ["dl", 9], ["ml", 10], ["db", 12], ["pl", 14]]}}
{"result": "SELECT T1.course_name, T1.course_id \nFROM Courses AS T1 \nJOIN Sections AS T2 ON T1.course_id = T2.course_id \nGROUP BY T1.course_name, T1.course_id \nHAVING COUNT(T2.section_id) < 2", "match": {"match": false, "result": [["cal", 7], ["db", 12], ["dl", 9], ["en", 4], ["la", 6], ["math", 2], ["ml", 10]], "gt": [["ds", 1], ["math", 2], ["en", 4], ["fr", 5], ["la", 6], ["cal", 7], ["nlp", 8], ["dl", 9], ["ml", 10], ["db", 12], ["pl", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT section_name FROM Sections ORDER BY section_name DESC", "match": {"match": true, "result": [["y"], ["u"], ["p"], ["o"], ["l"], ["k"], ["j"], ["h"], ["g"], ["f"], ["e"], ["d"], ["c"], ["b"], ["a"]]}}
{"result": "SELECT section_name FROM Sections ORDER BY section_name DESC", "match": {"match": true, "result": [["y"], ["u"], ["p"], ["o"], ["l"], ["k"], ["j"], ["h"], ["g"], ["f"], ["e"], ["d"], ["c"], ["b"], ["a"]]}}
{"result": "SELECT semester_name, semester_id \nFROM Semesters \nWHERE semester_id = ( SELECT semester_id \n                      FROM Student_Enrolment \n                      GROUP BY semester_id \n                      ORDER BY COUNT(student_id) DESC \n                      LIMIT 1 );", "match": {"match": true, "result": [["summer 2010", 2]]}}
{"result": "SELECT SE.semester_name, SE.semester_id FROM Semesters SE\nJOIN (\n  SELECT semester_id, COUNT(*) as student_count\n  FROM Student_Enrolment\n  GROUP BY semester_id\n) AS semester_students\nON SE.semester_id = semester_students.semester_id\nORDER BY semester_students.student_count DESC\nLIMIT 1", "match": {"match": true, "result": [["summer 2010", 2]]}}
{"result": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "match": {"match": true, "result": [["error"]]}}
{"result": "SELECT department_description \nFROM Departments \nWHERE department_name LIKE '%computer%'", "match": {"match": true, "result": [["error"]]}}
{"result": "SELECT s.first_name, s.middle_name, s.last_name, se.degree_program_id \nFROM Students s \nJOIN Student_Enrolment se ON s.student_id = se.student_id \nGROUP BY s.first_name, s.middle_name, s.last_name, se.degree_program_id \nHAVING COUNT(DISTINCT se.degree_program_id) = 2", "match": {"match": false, "result": [], "gt": [["Jarvis", "Aaliyah", "Carroll", 4], ["Reva", "Golda", "Osinski", 9], ["Jordy", "Osborne", "Rempel", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    S.first_name, \n    S.middle_name, \n    S.last_name, \n    S.student_id\nFROM \n    Students S\nJOIN \n    Student_Enrolment SE ON S.student_id = SE.student_id\nGROUP BY \n    S.student_id\nHAVING \n    COUNT(DISTINCT SE.degree_program_id) = 2;", "match": {"match": false, "result": [["Jarvis", "Aaliyah", "Carroll", 4], ["Stanford", "Mona", "Rogahn", 6], ["Jordy", "Osborne", "Rempel", 14]], "gt": [["Jarvis", "Aaliyah", "Carroll", 4], ["Reva", "Golda", "Osinski", 9], ["Jordy", "Osborne", "Rempel", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T1.first_name, T1.middle_name, T1.last_name \nFROM Students AS T1 \nJOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id \nJOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id \nWHERE T3.degree_summary_name = 'Bachelor'", "match": {"match": true, "result": [["Reva", "Golda", "Osinski"], ["Frida", "Aisha", "Huel"], ["Jarvis", "Aaliyah", "Carroll"], ["Milton", "Vaughn", "Christiansen"], ["Stanford", "Mona", "Rogahn"]]}}
{"result": "SELECT T1.first_name, T1.middle_name, T1.last_name \nFROM Students AS T1 \nJOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id \nJOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id \nWHERE T3.degree_summary_name = 'Bachelors';", "match": {"match": false, "result": [], "gt": [["Reva", "Golda", "Osinski"], ["Frida", "Aisha", "Huel"], ["Jarvis", "Aaliyah", "Carroll"], ["Milton", "Vaughn", "Christiansen"], ["Stanford", "Mona", "Rogahn"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.degree_summary_name \nFROM Degree_Programs AS T1 \nINNER JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id \nGROUP BY T1.degree_summary_name \nORDER BY COUNT(T2.degree_program_id) DESC \nLIMIT 1", "match": {"match": true, "result": [["Bachelor"]]}}
{"result": "SELECT T.degree_summary_name \nFROM ( SELECT T2.degree_summary_name, COUNT(T1.student_id) AS num_students \n      FROM Student_Enrolment T1 \n      JOIN Degree_Programs T2 ON T1.degree_program_id = T2.degree_program_id \n      GROUP BY T2.degree_summary_name \n      ORDER BY num_students DESC \n      LIMIT 1 ) T", "match": {"match": true, "result": [["Bachelor"]]}}
{"result": "SELECT d.degree_summary_name, COUNT(se.student_enrolment_id) as num_students \nFROM Degree_Programs d \nJOIN Student_Enrolment se ON d.degree_program_id = se.degree_program_id \nGROUP BY d.degree_program_id \nORDER BY num_students DESC \nLIMIT 1", "match": {"match": false, "result": [["Bachelor", 3]], "gt": [[9, "Bachelor"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.degree_program_id, T1.degree_summary_name \nFROM Degree_Programs T1 \nJOIN Student_Enrolment T2 ON T1.degree_program_id = T2.degree_program_id \nGROUP BY T1.degree_program_id, T1.degree_summary_name \nORDER BY COUNT(T2.student_id) DESC \nLIMIT 1", "match": {"match": true, "result": [[9, "Bachelor"]]}}
{"result": "SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.degree_program_id) as total_enrollments \nFROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id \nGROUP BY s.student_id, s.first_name, s.middle_name, s.last_name \nORDER BY total_enrollments DESC \nLIMIT 1", "match": {"match": false, "result": [[6, "Stanford", "Mona", "Rogahn", 3]], "gt": [[7, "Frida", "Aisha", "Huel", 3, 7]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    s.first_name, \n    s.middle_name, \n    s.last_name, \n    s.student_id, \n    COUNT(se.degree_program_id) as num_enrollments\nFROM \n    Students s\nJOIN \n    Student_Enrolment se ON s.student_id = se.student_id\nGROUP BY \n    s.student_id\nORDER BY \n    num_enrollments DESC\nLIMIT 1;", "match": {"match": false, "result": [["Frida", "Aisha", "Huel", 7, 3]], "gt": [[7, "Frida", "Aisha", "Huel", 3, 7]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.semester_name \nFROM Semesters T1 \nLEFT JOIN Student_Enrolment T2 ON T1.semester_id = T2.semester_id \nWHERE T2.semester_id IS NULL", "match": {"match": true, "result": [["fall 2010"], ["spring 2013"], ["spring 2014"], ["spring 2016"], ["spring 2017"], ["winter 2018"]]}}
{"result": "SELECT semester_name \nFROM Semesters \nWHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment);", "match": {"match": true, "result": [["fall 2010"], ["spring 2013"], ["spring 2014"], ["spring 2016"], ["spring 2017"], ["winter 2018"]]}}
{"result": "SELECT DISTINCT T1.course_name \nFROM Courses T1 \nJOIN Student_Enrolment_Courses T2 ON T1.course_id = T2.course_id;", "match": {"match": true, "result": [["la"], ["pl"], ["ai"], ["math"], ["ml"], ["os"], ["en"], ["nlp"], ["rs"], ["db"]]}}
{"result": "SELECT DISTINCT T2.course_name\nFROM Student_Enrolment_Courses AS T1\nJOIN Courses AS T2 ON T1.course_id = T2.course_id", "match": {"match": true, "result": [["la"], ["pl"], ["ai"], ["math"], ["ml"], ["os"], ["en"], ["nlp"], ["rs"], ["db"]]}}
{"result": "SELECT T1.course_name \nFROM Courses AS T1 \nJOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id \nGROUP BY T1.course_name \nORDER BY COUNT(T1.course_id) DESC \nLIMIT 1", "match": {"match": true, "result": [["rs"]]}}
{"result": "SELECT T1.course_name, COUNT(T3.student_enrolment_id) AS number_of_students\nFROM Courses T1\nJOIN Student_Enrolment_Courses T2 ON T1.course_id = T2.course_id\nJOIN Student_Enrolment T3 ON T2.student_enrolment_id = T3.student_enrolment_id\nGROUP BY T1.course_name\nORDER BY number_of_students DESC\nLIMIT 1", "match": {"match": false, "result": [["rs", 2]], "gt": [["rs"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.last_name\nFROM Students s\nJOIN Addresses a ON s.current_address_id = a.address_id\nWHERE a.state_province_county = 'North Carolina'\nAND s.student_id NOT IN (\n  SELECT se.student_id\n  FROM Student_Enrolment se\n);", "match": {"match": false, "result": [], "gt": [["Gleichner"], ["Weimann"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.last_name \nFROM Students AS T1 \nJOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id \nWHERE T2.state_province_county = 'North Carolina' \nAND T1.student_id NOT IN (SELECT student_id FROM Student_Enrolment);", "match": {"match": false, "result": [], "gt": [["Gleichner"], ["Weimann"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.transcript_id, T.transcript_date \nFROM Transcripts T\nJOIN Transcript_Contents TC ON T.transcript_id = TC.transcript_id\nGROUP BY T.transcript_id\nHAVING COUNT(TC.student_course_id) >= 2", "match": {"match": false, "result": [[5, "2013-06-30 13:01:40"], [6, "2010-12-13 10:55:15"], [8, "1975-05-06 12:04:47"], [15, "1998-11-22 12:18:29"]], "gt": [["2013-06-30 13:01:40", 5], ["2010-12-13 10:55:15", 6], ["1975-05-06 12:04:47", 8], ["1998-11-22 12:18:29", 15]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.transcript_id, T1.transcript_date\nFROM Transcripts AS T1\nJOIN (\n  SELECT T1.transcript_id, COUNT(*) as course_count\n  FROM Transcript_Contents AS T1\n  GROUP BY T1.transcript_id\n  HAVING COUNT(*) >= 2\n) AS T2\nON T1.transcript_id = T2.transcript_id", "match": {"match": false, "result": [[5, "2013-06-30 13:01:40"], [6, "2010-12-13 10:55:15"], [8, "1975-05-06 12:04:47"], [15, "1998-11-22 12:18:29"]], "gt": [["2013-06-30 13:01:40", 5], ["2010-12-13 10:55:15", 6], ["1975-05-06 12:04:47", 8], ["1998-11-22 12:18:29", 15]], "error": "Query result does not match ground truth."}}
{"result": "SELECT `cell_mobile_number` \nFROM `Students` \nWHERE `first_name` = 'Timmothy' AND `last_name` = 'Ward';", "match": {"match": true, "result": [["(096)889-8954x524"]]}}
{"result": "SELECT `cell_mobile_number` FROM `Students` WHERE `first_name` = 'Timmothy' AND `last_name` = 'Ward'", "match": {"match": false, "result": [["(096)889-8954x524"]], "gt": [], "error": "Query result does not match ground truth."}}
{"result": "SELECT first_name, middle_name, last_name \nFROM Students \nORDER BY date_first_registered ASC \nLIMIT 1;", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT first_name, middle_name, last_name \nFROM Students \nORDER BY date_first_registered ASC \nLIMIT 1;", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT first_name, middle_name, last_name \nFROM Students \nWHERE date_left IS NOT NULL \nORDER BY date_left ASC \nLIMIT 1;", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT first_name, middle_name, last_name \nFROM Students \nWHERE date_first_registered = ( SELECT MIN(date_first_registered) \n                               FROM Students );", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT T1.first_name \nFROM Students AS T1 \nWHERE T1.current_address_id != T1.permanent_address_id", "match": {"match": true, "result": [["Timmothy"], ["Hobart"], ["Warren"], ["Jarvis"], ["Stanford"], ["Frida"], ["Delaney"], ["Reva"], ["Helga"], ["Gregg"], ["Orrin"], ["Deon"], ["Jordy"], ["Jett"]]}}
{"result": "SELECT T1.first_name \nFROM Students AS T1 \nJOIN Addresses AS T2 ON T1.current_address_id  = T2.address_id \nJOIN Addresses AS T3 ON T1.permanent_address_id  = T3.address_id \nWHERE T2.address_id  != T3.address_id", "match": {"match": true, "result": [["Timmothy"], ["Hobart"], ["Warren"], ["Jarvis"], ["Stanford"], ["Frida"], ["Delaney"], ["Reva"], ["Helga"], ["Gregg"], ["Orrin"], ["Deon"], ["Jordy"], ["Jett"]]}}
{"result": "SELECT T1.address_id, T1.line_1, T1.line_2, T1.line_3 \nFROM Addresses AS T1 \nJOIN Students AS T2 ON T1.address_id = T2.current_address_id \nGROUP BY T1.address_id \nORDER BY COUNT(T2.student_id) DESC \nLIMIT 1;", "match": {"match": false, "result": [[9, "0643 Muller Vista", "Suite 383", null]], "gt": [[9, "0643 Muller Vista", "Suite 383"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT a.address_id, a.line_1, a.line_2 \nFROM Addresses a\nJOIN Students s ON a.address_id = s.current_address_id\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nGROUP BY a.address_id, a.line_1, a.line_2\nORDER BY COUNT(s.student_id) DESC\nLIMIT 1", "match": {"match": false, "result": [[6, "16998 Mraz Lodge", "Apt. 689"]], "gt": [[9, "0643 Muller Vista", "Suite 383"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(transcript_date) FROM Transcripts", "match": {"match": true, "result": [[1989.9333333333334]]}}
{"result": "SELECT AVG(`transcript_date`) FROM `Transcripts`", "match": {"match": true, "result": [[1989.9333333333334]]}}
{"result": "SELECT T.transcript_date, T.other_details \nFROM Transcripts T\nORDER BY T.transcript_date ASC\nLIMIT 1", "match": {"match": true, "result": [["1975-05-06 12:04:47", null]]}}
{"result": "SELECT MIN(transcript_date) AS earliest_transcript_date, other_details FROM `Transcripts`", "match": {"match": true, "result": [["1975-05-06 12:04:47", null]]}}
{"result": "SELECT COUNT(*) \nFROM `Transcripts`", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) FROM `Transcripts`", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT MAX(transcript_date) AS last_transcript_release_date FROM `Transcripts`", "match": {"match": true, "result": [["2013-06-30 13:01:40"]]}}
{"result": "SELECT MAX(transcript_date) FROM Transcripts", "match": {"match": true, "result": [["2013-06-30 13:01:40"]]}}
{"result": "SELECT COUNT(student_course_id), student_course_id \nFROM Transcript_Contents \nGROUP BY student_course_id \nHAVING COUNT(student_course_id) = \n  ( SELECT MAX(count) \n    FROM ( SELECT student_course_id, COUNT(student_course_id) AS count \n           FROM Transcript_Contents \n           GROUP BY student_course_id ) AS subquery );", "match": {"match": true, "result": [[4, 0]]}}
{"result": "SELECT MAX(count) ,  T2.student_enrolment_id \nFROM \n(\n  SELECT T1.student_course_id ,  COUNT(*) as count \n  FROM Transcript_Contents T1 \n  GROUP BY T1.student_course_id\n) T \nJOIN Student_Enrolment_Courses T2 ON T1.student_course_id = T2.student_course_id", "match": {"match": false, "error": "Query execution failed with error: no such column: T1.student_course_id"}}
{"result": "SELECT T1.transcript_id, T1.transcript_date \nFROM Transcripts AS T1\nJOIN Transcript_Contents AS T2 ON T2.transcript_id = T1.transcript_id\nGROUP BY T1.transcript_id \nORDER BY COUNT(T2.student_course_id) ASC\nLIMIT 1", "match": {"match": false, "result": [[2, "1975-10-28 15:16:51"]], "gt": [["1975-10-28 15:16:51", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.transcript_date, T1.transcript_id \nFROM Transcripts AS T1 \nJOIN (\n  SELECT transcript_id, COUNT(*) as count \n  FROM Transcript_Contents \n  GROUP BY transcript_id \n) AS T2 \nON T1.transcript_id = T2.transcript_id \nORDER BY T2.count \nLIMIT 1", "match": {"match": true, "result": [["1975-10-28 15:16:51", 2]]}}
{"result": "SELECT T1.semester_name \nFROM Semesters AS T1 \nJOIN Student_Enrolment AS T2 \nON T1.semester_id = T2.semester_id \nJOIN Degree_Programs AS T3 \nON T2.degree_program_id = T3.degree_program_id \nWHERE T3.degree_summary_name IN ('Master', 'Bachelor')", "match": {"match": false, "result": [["fall 2018"], ["summer 2010"], ["summer 2010"], ["spring 2019"], ["spring 2010"], ["fall 2018"], ["spring 2015"], ["spring 2018"], ["spring 2012"], ["summer 2010"], ["fall 2018"], ["summer 2010"], ["spring 2018"], ["spring 2019"], ["winter 2010"]], "gt": [[13]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.semester_id\nFROM (\n  SELECT T1.semester_id, COUNT(DISTINCT T2.student_id) as enrolled_students\n  FROM Semesters T1\n  JOIN Student_Enrolment T2 ON T1.semester_id = T2.semester_id\n  GROUP BY T1.semester_id\n) T\nWHERE enrolled_students > 1", "match": {"match": false, "result": [[2], [13], [15]], "gt": [[13]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT current_address_id) FROM Students", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT DISTINCT T1.line_1, T1.line_2, T1.line_3, T1.city, T1.zip_postcode, T1.state_province_county, T1.country, T1.other_address_details\nFROM Addresses AS T1\nINNER JOIN Students AS T2 ON T1.address_id = T2.current_address_id", "match": {"match": false, "result": [["7081 Eda Center", "Suite 830", null, "Rutherfordtown", "839", "Delaware", "Kyrgyz Republic", null], ["979 Haag Shores Suite 656", "Apt. 468", null, "Prohaskafort", "590", "SouthDakota", "Lesotho", null], ["0643 Muller Vista", "Suite 383", null, "Port Elvisfurt", "777", "NorthCarolina", "Gabon", null], ["193 Marlin Brook", "Apt. 406", null, "Herzoghaven", "068", "Arkansas", "Cook Islands", null], ["16998 Mraz Lodge", "Apt. 689", null, "North Omer", "902", "Kentucky", "Gibraltar", null], ["74046 Metz Walk Apt. 113", "Suite 674", null, "Port Oceane", "669", "Wyoming", "Norfolk Island", null], ["2294 Grant Square Apt. 235", "Apt. 370", null, "Port Chelsea", "148", "Virginia", "Iceland", null], ["3999 Aufderhar Ways Suite 593", "Apt. 388", null, "Lake Laishafurt", "943", "Kentucky", "Burundi", null], ["186 Evan Motorway Apt. 409", "Suite 079", null, "Lake Careyberg", "895", "Kentucky", "New Caledonia", null]], "gt": [[9]], "error": "Query result does not match ground truth."}}
{"result": "SELECT first_name, middle_name, last_name FROM Students ORDER BY first_name DESC, middle_name DESC, last_name DESC", "match": {"match": false, "result": [["Warren", "Violet", "Gleichner"], ["Timmothy", "Anna", "Ward"], ["Stanford", "Mona", "Rogahn"], ["Reva", "Golda", "Osinski"], ["Orrin", "Neal", "Kemmer"], ["Milton", "Vaughn", "Christiansen"], ["Jordy", "Osborne", "Rempel"], ["Jett", "Alberta", "Jaskolski"], ["Jarvis", "Aaliyah", "Carroll"], ["Hobart", "Lorenz", "Balistreri"], ["Helga", "Cleve", "Mohr"], ["Gregg", "Mossie", "Schuppe"], ["Frida", "Aisha", "Huel"], ["Deon", "Brooklyn", "Weimann"], ["Delaney", "Judd", "Ankunding"]], "gt": [["voluptatem"], ["rerum"], ["quia"], ["qui"], ["omnis"], ["omnis"], ["non"], ["nesciunt"], ["laborum"], ["facilis"], ["et"], ["dolorum"], ["autem"], ["atque"], ["assumenda"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT `other_student_details` FROM `Students` ORDER BY `other_student_details` DESC", "match": {"match": true, "result": [["voluptatem"], ["rerum"], ["quia"], ["qui"], ["omnis"], ["omnis"], ["non"], ["nesciunt"], ["laborum"], ["facilis"], ["et"], ["dolorum"], ["autem"], ["atque"], ["assumenda"]]}}
{"result": "SELECT section_description \nFROM Sections \nWHERE section_name = 'h';", "match": {"match": true, "result": [["et"]]}}
{"result": "SELECT `section_description` \nFROM `Sections` \nWHERE `section_name` = 'h';", "match": {"match": true, "result": [["et"]]}}
{"result": "SELECT T1.first_name \nFROM Students AS T1 \nINNER JOIN Addresses AS T2 \nON T1.permanent_address_id = T2.address_id \nWHERE T2.country = 'Haiti' \nOR T1.cell_mobile_number = '09700166582'", "match": {"match": false, "result": [["Hobart"], ["Warren"], ["Jarvis"], ["Delaney"]], "gt": [["Jarvis"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T1.first_name \nFROM Students AS T1 \nINNER JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id \nWHERE T2.country = 'Haiti' \n\nUNION\n\nSELECT DISTINCT T1.first_name \nFROM Students AS T1 \nWHERE T1.cell_mobile_number = '09700166582'", "match": {"match": false, "result": [["Delaney"], ["Hobart"], ["Jarvis"], ["Warren"]], "gt": [["Jarvis"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Title FROM Cartoon ORDER BY Title ASC", "match": {"match": true, "result": [["Dawn of the Dead Man!"], ["Day of the Dark Knight!"], ["Deep Cover for Batman!"], ["Enter the Outsiders!"], ["Evil Under the Sea!"], ["Fall of the Blue Beetle!"], ["Invasion of the Secret Santas!"], ["Journey to the Center of the Bat!"], ["Return of the Fearsome Fangs!"], ["Terror on Dinosaur Island!"], ["The Eyes of Despero!"], ["The Rise of the Blue Beetle!"]]}}
{"result": "SELECT Title FROM Cartoon ORDER BY Title ASC", "match": {"match": true, "result": [["Dawn of the Dead Man!"], ["Day of the Dark Knight!"], ["Deep Cover for Batman!"], ["Enter the Outsiders!"], ["Evil Under the Sea!"], ["Fall of the Blue Beetle!"], ["Invasion of the Secret Santas!"], ["Journey to the Center of the Bat!"], ["Return of the Fearsome Fangs!"], ["Terror on Dinosaur Island!"], ["The Eyes of Despero!"], ["The Rise of the Blue Beetle!"]]}}
{"result": "SELECT * FROM Cartoon WHERE Directed_by = 'Ben Jones'", "match": {"match": false, "result": [[1.0, "The Rise of the Blue Beetle!", "Ben Jones", "Michael Jelenic", "November14,2008", 101.0, "700"], [4.0, "Day of the Dark Knight!", "Ben Jones", "J. M. DeMatteis", "January2,2009", 104.0, "704"], [7.0, "Dawn of the Dead Man!", "Ben Jones", "Steven Melching", "January16,2009", 107.0, "707"], [10.0, "The Eyes of Despero!", "Ben Jones", "J. M. DeMatteis", "February6,2009", 110.0, "728"]], "gt": [["The Rise of the Blue Beetle!"], ["Day of the Dark Knight!"], ["Dawn of the Dead Man!"], ["The Eyes of Despero!"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Title \nFROM Cartoon \nWHERE Directed_by = 'Ben Jones';", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Day of the Dark Knight!"], ["Dawn of the Dead Man!"], ["The Eyes of Despero!"]]}}
{"result": "SELECT COUNT(id) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(*) \nFROM Cartoon \nWHERE Written_by = 'Joseph Kuhr';", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT Title, Directed_by \nFROM Cartoon \nORDER BY Original_air_date", "match": {"match": true, "result": [["Invasion of the Secret Santas!", "Brandon Vietti"], ["Evil Under the Sea!", "Michael Chang"], ["Return of the Fearsome Fangs!", "Brandon Vietti"], ["Deep Cover for Batman!", "Michael Chang"], ["The Eyes of Despero!", "Ben Jones"], ["Dawn of the Dead Man!", "Ben Jones"], ["Day of the Dark Knight!", "Ben Jones"], ["Fall of the Blue Beetle!", "Brandon Vietti"], ["Journey to the Center of the Bat!", "Michael Chang"], ["Enter the Outsiders!", "Michael Chang"], ["The Rise of the Blue Beetle!", "Ben Jones"], ["Terror on Dinosaur Island!", "Brandon Vietti"]]}}
{"result": "SELECT Title, Directed_by \nFROM Cartoon \nORDER BY Original_air_date;", "match": {"match": true, "result": [["Invasion of the Secret Santas!", "Brandon Vietti"], ["Evil Under the Sea!", "Michael Chang"], ["Return of the Fearsome Fangs!", "Brandon Vietti"], ["Deep Cover for Batman!", "Michael Chang"], ["The Eyes of Despero!", "Ben Jones"], ["Dawn of the Dead Man!", "Ben Jones"], ["Day of the Dark Knight!", "Ben Jones"], ["Fall of the Blue Beetle!", "Brandon Vietti"], ["Journey to the Center of the Bat!", "Michael Chang"], ["Enter the Outsiders!", "Michael Chang"], ["The Rise of the Blue Beetle!", "Ben Jones"], ["Terror on Dinosaur Island!", "Brandon Vietti"]]}}
{"result": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Terror on Dinosaur Island!"], ["Day of the Dark Knight!"], ["Invasion of the Secret Santas!"], ["Dawn of the Dead Man!"], ["Fall of the Blue Beetle!"], ["The Eyes of Despero!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Terror on Dinosaur Island!"], ["Day of the Dark Knight!"], ["Invasion of the Secret Santas!"], ["Dawn of the Dead Man!"], ["Fall of the Blue Beetle!"], ["The Eyes of Despero!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT `Country`, COUNT(id) \nFROM TV_Channel \nGROUP BY `Country` \nORDER BY COUNT(id) DESC", "match": {"match": false, "result": [["Italy", 12], ["United Kingdom", 2], ["Poland", 1]], "gt": [["Italy", 12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Country, COUNT(id) \nFROM TV_Channel \nGROUP BY Country \nORDER BY COUNT(id) DESC \nLIMIT 1;", "match": {"match": true, "result": [["Italy", 12]]}}
{"result": "SELECT COUNT(`series_name`), COUNT(`Content`) FROM `TV_Channel`", "match": {"match": false, "result": [[15, 15]], "gt": [[15, 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT series_name, Content FROM TV_Channel", "match": {"match": false, "result": [["Sky Radio", "music"], ["Sky Music", "music"], ["Music Box Italia", "music"], ["MTV Hits", "music"], ["MTV Classic", "music"], ["MTV Rocks", "music"], ["MTV Dance", "music"], ["MTV Music", "music"], ["MTV Live HD", "music"], ["Radio Capital TiV\u00f9", "music"], ["myDeejay", "music"], ["Match Music", "music"], ["Rock TV", "music"], ["Hip Hop TV", "music"], ["Classica", "music"]], "gt": [[15, 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Content FROM \"TV_Channel\" WHERE series_name = 'Sky Radio';", "match": {"match": true, "result": [["music"]]}}
{"result": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'", "match": {"match": true, "result": [["music"]]}}
{"result": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'", "match": {"match": true, "result": [["Sky Famiglia"]]}}
{"result": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'", "match": {"match": true, "result": [["Sky Famiglia"]]}}
{"result": "SELECT COUNT(id) FROM TV_Channel WHERE Language = 'English'", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(id) FROM TV_Channel WHERE Language = 'English'", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Language, COUNT(id) FROM TV_Channel GROUP BY Language ORDER BY COUNT(id) ASC LIMIT 1", "match": {"match": true, "result": [["English", 3]]}}
{"result": "SELECT Language, COUNT(id) AS Count\nFROM TV_Channel\nGROUP BY Language\nORDER BY Count ASC\nLIMIT 1", "match": {"match": true, "result": [["English", 3]]}}
{"result": "SELECT Language, COUNT(id) as \"TV_Channel_Count\" FROM TV_Channel GROUP BY Language", "match": {"match": true, "result": [["English", 3], ["Italian", 12]]}}
{"result": "SELECT Language, COUNT(id) FROM TV_Channel GROUP BY Language", "match": {"match": true, "result": [["English", 3], ["Italian", 12]]}}
{"result": "SELECT T2.series_name \nFROM Cartoon AS T1 \nINNER JOIN TV_Channel AS T2 \nON T1.Channel = T2.id \nWHERE T1.Title = 'The Rise of the Blue Beetle!';", "match": {"match": true, "result": [["Sky Radio"]]}}
{"result": "SELECT T1.series_name FROM TV_Channel AS T1 \nINNER JOIN Cartoon AS T2 ON T1.id = T2.Channel \nWHERE T2.Title = 'The Rise of the Blue Beetle'", "match": {"match": false, "result": [], "gt": [["Sky Radio"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Title \nFROM TV_Channel AS T1 \nJOIN Cartoon AS T2 \nON T1.id = T2.Channel \nWHERE T1.series_name = 'Sky Radio';", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT T1.Title \nFROM Cartoon AS T1 \nJOIN TV_Channel AS T2 ON T1.Channel = T2.id \nWHERE T2.`series_name` = 'Sky Radio';", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT Episode FROM TV_series ORDER BY Rating DESC", "match": {"match": false, "result": [["A Love of a Lifetime"], ["Friendly Skies"], ["Game Three"], ["The Year of the Rabbit"], ["Winterland"], ["The Legend of Dylan McCleen"], ["Keepers"], ["Emily"], ["Blowback"], ["Home By Another Way"], ["Double Down"], ["The Hanged Man"]], "gt": [["The Hanged Man"], ["Double Down"], ["Home By Another Way"], ["Keepers"], ["Emily"], ["Blowback"], ["The Legend of Dylan McCleen"], ["Winterland"], ["The Year of the Rabbit"], ["Game Three"], ["Friendly Skies"], ["A Love of a Lifetime"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC", "match": {"match": false, "result": [["A Love of a Lifetime", "5.8"], ["Friendly Skies", "5.3"], ["Game Three", "4.4"], ["The Year of the Rabbit", "4.3"], ["Winterland", "4.0"], ["The Legend of Dylan McCleen", "3.8"], ["Keepers", "3.7"], ["Emily", "3.7"], ["Blowback", "3.7"], ["Home By Another Way", "3.5"], ["Double Down", "3.4"], ["The Hanged Man", "3.0"]], "gt": [["The Hanged Man"], ["Double Down"], ["Home By Another Way"], ["Keepers"], ["Emily"], ["Blowback"], ["The Legend of Dylan McCleen"], ["Winterland"], ["The Year of the Rabbit"], ["Game Three"], ["Friendly Skies"], ["A Love of a Lifetime"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT TOP 3 Episode, Rating FROM `TV_series` ORDER BY CAST(Rating AS REAL) DESC", "match": {"match": false, "error": "Query execution failed with error: near \"3\": syntax error"}}
{"result": "SELECT Episode, Rating FROM TV_series ORDER BY CAST(Rating AS REAL) DESC LIMIT 3", "match": {"match": true, "result": [["A Love of a Lifetime", "5.8"], ["Friendly Skies", "5.3"], ["Game Three", "4.4"]]}}
{"result": "SELECT MIN(Share) , MAX(Share) FROM TV_series", "match": {"match": false, "result": [[5.0, 9.0]], "gt": [[9.0, 5.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(`Share`) , MIN(`Share`) FROM `TV_series`", "match": {"match": true, "result": [[9.0, 5.0]]}}
{"result": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'", "match": {"match": true, "result": [["September 24, 2007"]]}}
{"result": "SELECT Air_Date FROM `TV_series` WHERE Episode = 'A Love of a Lifetime';", "match": {"match": true, "result": [["September 24, 2007"]]}}
{"result": "SELECT T2.Weekly_Rank \nFROM TV_series AS T1 \nINNER JOIN TV_Channel AS T2 \nON T1.Channel = T2.id \nWHERE T1.Episode = 'A Love of a Lifetime';", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Weekly_Rank"}}
{"result": "SELECT `Weekly_Rank` FROM `TV_series` WHERE `Episode` = 'A Love of a Lifetime';", "match": {"match": true, "result": [[43.0]]}}
{"result": "SELECT T2.series_name \nFROM TV_series AS T1 \nINNER JOIN TV_Channel AS T2 \nON T1.Channel = T2.id \nWHERE T1.Episode = 'A Love of a Lifetime';", "match": {"match": true, "result": [["Sky Radio"]]}}
{"result": "SELECT series_name \nFROM TV_Channel \nWHERE Content = 'A Love of a Lifetime';", "match": {"match": false, "result": [], "gt": [["Sky Radio"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.`Episode` \nFROM `TV_Channel` AS T1 \nJOIN `TV_series` AS T2 \nON T1.id = T2.Channel \nWHERE T1.`series_name` = 'Sky Radio';", "match": {"match": true, "result": [["A Love of a Lifetime"], ["Keepers"]]}}
{"result": "SELECT T2.Episode \nFROM TV_Channel AS T1 \nJOIN TV_series AS T2 ON T1.id = T2.Channel \nWHERE T1.series_name = 'Sky Radio';", "match": {"match": true, "result": [["A Love of a Lifetime"], ["Keepers"]]}}
{"result": "SELECT COUNT(id) ,  Directed_by \nFROM Cartoon \nGROUP BY Directed_by", "match": {"match": true, "result": [[4, "Ben Jones"], [4, "Brandon Vietti"], [4, "Michael Chang"]]}}
{"result": "SELECT T1.Directed_by, COUNT(T1.id) as Total_Cartoons\nFROM Cartoon AS T1\nGROUP BY T1.Directed_by;", "match": {"match": false, "result": [["Ben Jones", 4], ["Brandon Vietti", 4], ["Michael Chang", 4]], "gt": [[4, "Ben Jones"], [4, "Brandon Vietti"], [4, "Michael Chang"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.`Production_code`, T2.`Channel` \nFROM `TV_series` AS T1 \nINNER JOIN `Cartoon` AS T2 \nON T1.`Channel` = T2.`Channel` \nORDER BY T1.`Original_air_date` DESC \nLIMIT 1", "match": {"match": false, "error": "Query execution failed with error: no such column: T1.Original_air_date"}}
{"result": "SELECT MAX(`Production_code`), `Channel` \nFROM Cartoon;", "match": {"match": false, "result": [[112.0, "707"]], "gt": [[102.0, "701"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT `Package_Option`, `series_name` FROM `TV_Channel` WHERE `Hight_definition_TV` = 'Yes'", "match": {"match": false, "result": [], "gt": [["Sky Famiglia + Sky HD", "MTV Live HD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes'", "match": {"match": false, "result": [], "gt": [["Sky Famiglia + Sky HD", "MTV Live HD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Country \nFROM TV_Channel AS T1 \nJOIN Cartoon AS T2 ON T1.id = T2.Channel \nWHERE T2.Written_by = 'Todd Casey';", "match": {"match": true, "result": [["United Kingdom"], ["Italy"]]}}
{"result": "SELECT T1.Country \nFROM TV_Channel AS T1 \nINNER JOIN Cartoon AS T2 \nON T1.id = T2.Channel \nWHERE T2.Written_by = 'Todd Casey'", "match": {"match": true, "result": [["United Kingdom"], ["Italy"]]}}
{"result": "SELECT T1.`Country` \nFROM `TV_Channel` AS T1 \nWHERE T1.`id` NOT IN ( \n  SELECT T2.`Channel` \n  FROM `Cartoon` AS T2 \n  WHERE T2.`Written_by` = 'Todd Casey' \n);", "match": {"match": false, "result": [["Italy"], ["Italy"], ["Italy"], ["Italy"], ["United Kingdom"], ["Italy"], ["Poland"], ["Italy"], ["Italy"], ["Italy"], ["Italy"], ["Italy"], ["Italy"]], "gt": [["Poland"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.`Country` \nFROM `TV_Channel` AS T1 \nLEFT JOIN Cartoon AS T2 ON T1.`id` = T2.`Channel` \nWHERE T2.`Written_by` = 'Todd Casey' \nEXCEPT \nSELECT T1.`Country` \nFROM `TV_Channel` AS T1 \nLEFT JOIN Cartoon AS T2 ON T1.`id` = T2.`Channel`", "match": {"match": false, "result": [], "gt": [["Poland"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.`series_name`, T1.`Country` \nFROM `TV_Channel` AS T1 \nJOIN `Cartoon` AS T2 ON T1.id = T2.Channel \nWHERE T2.`Directed_by` IN ('Ben Jones', 'Michael Chang');", "match": {"match": false, "result": [["Sky Radio", "Italy"], ["Music Box Italia", "Italy"], ["MTV Hits", "Italy"], ["MTV Rocks", "United Kingdom"], ["MTV Dance", "United Kingdom"], ["MTV Dance", "United Kingdom"], ["Classica", "Italy"], ["MTV Dance", "United Kingdom"]], "gt": [["MTV Dance", "United Kingdom"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T1.series_name, T1.Country \nFROM TV_Channel AS T1 \nJOIN Cartoon AS T2 ON T1.id = T2.Channel \nWHERE T2.Directed_by = 'Ben Jones' OR T2.Directed_by = 'Michael Chang'", "match": {"match": false, "result": [["Sky Radio", "Italy"], ["Music Box Italia", "Italy"], ["MTV Hits", "Italy"], ["MTV Rocks", "United Kingdom"], ["MTV Dance", "United Kingdom"], ["Classica", "Italy"]], "gt": [["MTV Dance", "United Kingdom"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'", "match": {"match": true, "result": [["4:3", "Italy"], ["4:3", "Italy"], ["4:3 / 16:9", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3", "Italy"], ["4:3", "Italy"]]}}
{"result": "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'", "match": {"match": true, "result": [["4:3", "Italy"], ["4:3", "Italy"], ["4:3 / 16:9", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3", "Italy"], ["4:3", "Italy"]]}}
{"result": "SELECT id FROM TV_Channel \nGROUP BY Country \nHAVING COUNT(id) > 2", "match": {"match": true, "result": [["700"]]}}
{"result": "SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(id) > 2", "match": {"match": false, "result": [], "gt": [["700"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT id \nFROM TV_Channel \nWHERE id NOT IN \n(\n  SELECT T2.id \n  FROM Cartoon AS T1 \n  INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id \n  WHERE T1.Directed_by = 'Ben Jones'\n);", "match": {"match": true, "result": [["701"], ["703"], ["705"], ["706"], ["708"], ["709"], ["713"], ["714"], ["715"], ["717"], ["719"]]}}
{"result": "SELECT id FROM TV_Channel \nWHERE id NOT IN (\n  SELECT Channel \n  FROM Cartoon \n  WHERE Directed_by = 'Ben Jones'\n);", "match": {"match": true, "result": [["701"], ["703"], ["705"], ["706"], ["708"], ["709"], ["713"], ["714"], ["715"], ["717"], ["719"]]}}
{"result": "SELECT T3.\"Package_Option\" \nFROM \"TV_Channel\" AS T1 \nJOIN \"TV_series\" AS T2 ON T1.\"id\" = T2.\"Channel\" \nJOIN Cartoon AS T3 ON T3.Channel = T2.Channel \nWHERE T3.\"Directed_by\" != 'Ben Jones'", "match": {"match": false, "error": "Query execution failed with error: no such column: T3.Package_Option"}}
{"result": "SELECT DISTINCT T1.`Package_Option` \nFROM `TV_Channel` AS T1 \nLEFT JOIN Cartoon AS T2 ON T1.id = T2.Channel \nWHERE T2.Directed_by IS NULL", "match": {"match": false, "result": [["Sky Famiglia + Sky HD"], ["no ( FTV )"], ["Sky Famiglia"]], "gt": [["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["no ( FTV )"], ["Sky Famiglia + Sky HD"], ["no ( FTV )"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(Poker_Player_ID) FROM poker_player", "match": {"match": true, "result": [[5]]}}
{"result": "SELECT COUNT(Poker_Player_ID) FROM poker_player", "match": {"match": true, "result": [[5]]}}
{"result": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "match": {"match": true, "result": [[596462.0], [476090.0], [189233.0], [142800.0], [104871.0]]}}
{"result": "SELECT Earnings \nFROM poker_player \nORDER BY Earnings DESC;", "match": {"match": true, "result": [[596462.0], [476090.0], [189233.0], [142800.0], [104871.0]]}}
{"result": "SELECT \"Final_Table_Made\", \"Best_Finish\" FROM \"poker_player\"", "match": {"match": true, "result": [[42.0, 1.0], [10.0, 2.0], [21.0, 1.0], [19.0, 2.0], [26.0, 3.0]]}}
{"result": "SELECT \"Final_Table_Made\", \"Best_Finish\" FROM \"poker_player\"", "match": {"match": true, "result": [[42.0, 1.0], [10.0, 2.0], [21.0, 1.0], [19.0, 2.0], [26.0, 3.0]]}}
{"result": "SELECT AVG(Earnings) FROM poker_player", "match": {"match": true, "result": [[301891.2]]}}
{"result": "SELECT AVG(Earnings) FROM poker_player", "match": {"match": true, "result": [[301891.2]]}}
{"result": "SELECT MAX(Money_Rank) \nFROM poker_player;", "match": {"match": false, "result": [[166.0]], "gt": [[58.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(Money_Rank) FROM poker_player", "match": {"match": false, "result": [[166.0]], "gt": [[58.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(Final_Table_Made) \nFROM poker_player \nWHERE Earnings < 200000;", "match": {"match": true, "result": [[26.0]]}}
{"result": "SELECT MAX(Final_Table_Made) \nFROM poker_player \nWHERE Earnings < 200000", "match": {"match": true, "result": [[26.0]]}}
{"result": "SELECT T1.Name \nFROM people T1 \nJOIN poker_player T2 ON T1.People_ID = T2.People_ID", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Teodor Salparov"], ["Yevgeni Sivozhelez"], ["Maksim Botin"], ["Semen Poltavskiy"]]}}
{"result": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID = T2.People_ID", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Teodor Salparov"], ["Yevgeni Sivozhelez"], ["Maksim Botin"], ["Semen Poltavskiy"]]}}
{"result": "SELECT T1.Name \nFROM people AS T1 \nINNER JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID \nWHERE T2.Earnings > 300000;", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Maksim Botin"]]}}
{"result": "SELECT T2.Name \nFROM poker_player AS T1 \nINNER JOIN people AS T2 \nON T1.People_ID = T2.People_ID \nWHERE T1.Earnings > 300000", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Maksim Botin"]]}}
{"result": "SELECT T1.Name \nFROM people AS T1 \nJOIN poker_player AS T2 ON T1.People_ID = T2.People_ID \nORDER BY T2.Final_Table_Made ASC", "match": {"match": true, "result": [["Teodor Salparov"], ["Maksim Botin"], ["Yevgeni Sivozhelez"], ["Semen Poltavskiy"], ["Aleksey Ostapenko"]]}}
{"result": "SELECT T1.`Name` \nFROM people AS T1 \nJOIN poker_player AS T2 ON T1.`People_ID` = T2.`People_ID` \nORDER BY T2.`Final_Table_Made` ASC", "match": {"match": true, "result": [["Teodor Salparov"], ["Maksim Botin"], ["Yevgeni Sivozhelez"], ["Semen Poltavskiy"], ["Aleksey Ostapenko"]]}}
{"result": "SELECT T2.`Birth_Date` \nFROM poker_player AS T1 \nINNER JOIN people AS T2 \nON T1.`People_ID` = T2.`People_ID` \nORDER BY T1.Earnings ASC \nLIMIT 1;", "match": {"match": true, "result": [["August 8, 1986"]]}}
{"result": "SELECT T2.`Birth_Date` \nFROM poker_player AS T1 \nJOIN people AS T2 \nON T1.`People_ID` = T2.`People_ID` \nORDER BY T1.Earnings ASC \nLIMIT 1", "match": {"match": true, "result": [["August 8, 1986"]]}}
{"result": "SELECT MAX(Money_Rank) \nFROM poker_player p \nJOIN people pe ON p.People_ID = pe.People_ID \nWHERE pe.`Height` = ( SELECT MAX(`Height`) FROM people );", "match": {"match": true, "result": [[68.0]]}}
{"result": "SELECT T1.`Money_Rank` \nFROM `poker_player` T1 \nJOIN `people` T2 \nON T1.People_ID = T2.People_ID \nORDER BY T2.Height DESC \nLIMIT 1", "match": {"match": true, "result": [[68.0]]}}
{"result": "SELECT AVG(T1.Earnings) \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID = T2.People_ID \nWHERE T2.Height > 200;", "match": {"match": true, "result": [[309445.0]]}}
{"result": "SELECT AVG(Earnings) \nFROM poker_player \nWHERE \"Poker_Player_ID\" IN (\n  SELECT \"Poker_Player_ID\" \n  FROM poker_player \n  WHERE \"People_ID\" IN (\n    SELECT \"People_ID\" \n    FROM people \n    WHERE Height > 200\n  )\n);", "match": {"match": true, "result": [[309445.0]]}}
{"result": "SELECT T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings DESC", "match": {"match": true, "result": [["Maksim Botin"], ["Aleksey Ostapenko"], ["Teodor Salparov"], ["Semen Poltavskiy"], ["Yevgeni Sivozhelez"]]}}
{"result": "SELECT T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T2.People_ID = T1.People_ID ORDER BY T1.Earnings DESC", "match": {"match": true, "result": [["Maksim Botin"], ["Aleksey Ostapenko"], ["Teodor Salparov"], ["Semen Poltavskiy"], ["Yevgeni Sivozhelez"]]}}
{"result": "SELECT Nationality, COUNT(Nationality) as Total_People\nFROM people\nGROUP BY Nationality", "match": {"match": true, "result": [["Bulgaria", 1], ["Russia", 6]]}}
{"result": "SELECT Nationality, COUNT(*) \nFROM people \nGROUP BY Nationality", "match": {"match": true, "result": [["Bulgaria", 1], ["Russia", 6]]}}
{"result": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(People_ID) DESC LIMIT 1", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(People_ID) DESC LIMIT 1", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(Nationality) >= 2", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Nationality \nFROM people \nGROUP BY Nationality \nHAVING COUNT(People_ID) >= 2", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Name, Birth_Date FROM people ORDER BY Name ASC", "match": {"match": true, "result": [["Aleksey Ostapenko", "May 26, 1986"], ["Maksim Botin", "July 14, 1983"], ["Roman Bragin", "April 17, 1987"], ["Semen Poltavskiy", "February 8, 1981"], ["Sergey Grankin", "January 22, 1987"], ["Teodor Salparov", "August 16, 1982"], ["Yevgeni Sivozhelez", "August 8, 1986"]]}}
{"result": "SELECT \"Name\", \"Birth_Date\"\nFROM \"people\"\nORDER BY \"Name\" ASC;", "match": {"match": true, "result": [["Aleksey Ostapenko", "May 26, 1986"], ["Maksim Botin", "July 14, 1983"], ["Roman Bragin", "April 17, 1987"], ["Semen Poltavskiy", "February 8, 1981"], ["Sergey Grankin", "January 22, 1987"], ["Teodor Salparov", "August 16, 1982"], ["Yevgeni Sivozhelez", "August 8, 1986"]]}}
{"result": "SELECT Name \nFROM people \nWHERE Nationality != 'Russia'", "match": {"match": true, "result": [["Teodor Salparov"]]}}
{"result": "SELECT \"Name\" FROM people WHERE \"Nationality\" != 'Russia'", "match": {"match": true, "result": [["Teodor Salparov"]]}}
{"result": "SELECT Name \nFROM people \nWHERE People_ID NOT IN (SELECT People_ID FROM poker_player);", "match": {"match": true, "result": [["Roman Bragin"], ["Sergey Grankin"]]}}
{"result": "SELECT Name \nFROM people \nWHERE People_ID NOT IN (SELECT People_ID FROM poker_player);", "match": {"match": true, "result": [["Roman Bragin"], ["Sergey Grankin"]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM people", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM people", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(*) FROM conductor", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT COUNT(Conductor_ID) FROM conductor", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT Name FROM conductor ORDER BY Age ASC;", "match": {"match": true, "result": [["Antal Dor\u00e1ti"], ["Igor Stravinsky"], ["Colin Davis"], ["Michael Tilson Thomas"], ["Paul Jorgensen"], ["Antal Brown"], ["Charles Dutoit"], ["Seiji Ozawa"], ["Valeri Gergiev"], ["Pierre Boulez"], ["Gerard Schwarz"], ["Robert Craft"]]}}
{"result": "SELECT Name \nFROM conductor \nORDER BY Age", "match": {"match": true, "result": [["Antal Dor\u00e1ti"], ["Igor Stravinsky"], ["Colin Davis"], ["Michael Tilson Thomas"], ["Paul Jorgensen"], ["Antal Brown"], ["Charles Dutoit"], ["Seiji Ozawa"], ["Valeri Gergiev"], ["Pierre Boulez"], ["Gerard Schwarz"], ["Robert Craft"]]}}
{"result": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "match": {"match": true, "result": [["Igor Stravinsky"], ["Paul Jorgensen"], ["Charles Dutoit"], ["Pierre Boulez"], ["Robert Craft"], ["Michael Tilson Thomas"]]}}
{"result": "SELECT Name \nFROM conductor \nWHERE Nationality != 'USA';", "match": {"match": true, "result": [["Igor Stravinsky"], ["Paul Jorgensen"], ["Charles Dutoit"], ["Pierre Boulez"], ["Robert Craft"], ["Michael Tilson Thomas"]]}}
{"result": "SELECT Record_Company\nFROM orchestra\nORDER BY Year_of_Founded DESC", "match": {"match": true, "result": [["Columbia Masterworks"], ["Philips"], ["Philips Classics Records"], ["RCA"], ["EMI"], ["Koch Records / Naxos Records"], ["Decca Records"], ["Mercury Records"], ["Deutsche Grammophon"], ["Kultur"], ["Decca Records"], ["Delos Records"]]}}
{"result": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "match": {"match": true, "result": [["Columbia Masterworks"], ["Philips"], ["Philips Classics Records"], ["RCA"], ["EMI"], ["Koch Records / Naxos Records"], ["Decca Records"], ["Mercury Records"], ["Deutsche Grammophon"], ["Kultur"], ["Decca Records"], ["Delos Records"]]}}
{"result": "SELECT AVG(Attendance) \nFROM show;", "match": {"match": true, "result": [[1326.4]]}}
{"result": "SELECT AVG(`Attendance`) FROM `show`", "match": {"match": true, "result": [[1326.4]]}}
{"result": "SELECT MAX(`Share`) AS Max_Share, MIN(`Share`) AS Min_Share\nFROM performance\nWHERE `Type` != \"Live final\";", "match": {"match": true, "result": [["44.7%", "22.7%"]]}}
{"result": "SELECT MAX(`Share`) , MIN(`Share`)\nFROM performance\nWHERE `Type` != 'Live final';", "match": {"match": true, "result": [["44.7%", "22.7%"]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM conductor", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM conductor", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Name\nFROM conductor\nORDER BY Year_of_Work DESC", "match": {"match": true, "result": [["Robert Craft"], ["Antal Brown"], ["Gerard Schwarz"], ["Valeri Gergiev"], ["Charles Dutoit"], ["Michael Tilson Thomas"], ["Igor Stravinsky"], ["Paul Jorgensen"], ["Pierre Boulez"], ["Antal Dor\u00e1ti"], ["Seiji Ozawa"], ["Colin Davis"]]}}
{"result": "SELECT Name \nFROM conductor \nORDER BY Year_of_Work DESC", "match": {"match": true, "result": [["Robert Craft"], ["Antal Brown"], ["Gerard Schwarz"], ["Valeri Gergiev"], ["Charles Dutoit"], ["Michael Tilson Thomas"], ["Igor Stravinsky"], ["Paul Jorgensen"], ["Pierre Boulez"], ["Antal Dor\u00e1ti"], ["Seiji Ozawa"], ["Colin Davis"]]}}
{"result": "SELECT Name \nFROM conductor \nORDER BY Year_of_Work DESC \nLIMIT 1;", "match": {"match": true, "result": [["Robert Craft"]]}}
{"result": "SELECT T1.Name FROM conductor AS T1 INNER JOIN performance AS T2 ON T1.Conductor_ID = T2.Orchestra_ID GROUP BY T1.Conductor_ID ORDER BY COUNT(T2.Performance_ID) DESC LIMIT 1", "match": {"match": false, "result": [["Seiji Ozawa"]], "gt": [["Robert Craft"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name, T2.Orchestra \nFROM conductor AS T1 \nJOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID", "match": {"match": true, "result": [["Antal Dor\u00e1ti", "London Symphony Orchestra"], ["Igor Stravinsky", "Columbia Symphony Orchestra"], ["Colin Davis", "Royal Concertgebouw Orchestra"], ["Paul Jorgensen", "Royal Danish Orchestra"], ["Antal Brown", "Detroit Symphony Orchestra"], ["Charles Dutoit", "Montreal Symphony Orchestra"], ["Gerard Schwarz", "Seattle Symphony Orchestra"], ["Pierre Boulez", "Chicago Symphony Orchestra"], ["Valeri Gergiev", "Kirov Orchestra"], ["Robert Craft", "Philharmonia Orchestra"], ["Seiji Ozawa", "Orchestre de Paris"], ["Michael Tilson Thomas", "San Francisco Symphony Orchestra"]]}}
{"result": "SELECT T1.Name, T2.Orchestra \nFROM conductor AS T1 \nINNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID", "match": {"match": true, "result": [["Antal Dor\u00e1ti", "London Symphony Orchestra"], ["Igor Stravinsky", "Columbia Symphony Orchestra"], ["Colin Davis", "Royal Concertgebouw Orchestra"], ["Paul Jorgensen", "Royal Danish Orchestra"], ["Antal Brown", "Detroit Symphony Orchestra"], ["Charles Dutoit", "Montreal Symphony Orchestra"], ["Gerard Schwarz", "Seattle Symphony Orchestra"], ["Pierre Boulez", "Chicago Symphony Orchestra"], ["Valeri Gergiev", "Kirov Orchestra"], ["Robert Craft", "Philharmonia Orchestra"], ["Seiji Ozawa", "Orchestre de Paris"], ["Michael Tilson Thomas", "San Francisco Symphony Orchestra"]]}}
{"result": "SELECT T1.Name \nFROM conductor AS T1 \nJOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID \nGROUP BY T1.Name \nHAVING COUNT(T2.Orchestra_ID) > 1", "match": {"match": true, "result": []}}
{"result": "SELECT T1.Name \nFROM conductor AS T1 \nINNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID \nGROUP BY T1.Name, T2.Conductor_ID \nHAVING COUNT(DISTINCT T2.Orchestra_ID) > 1;", "match": {"match": true, "result": []}}
{"result": "SELECT T1.Name \nFROM conductor AS T1 \nJOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID \nGROUP BY T1.Conductor_ID \nORDER BY COUNT(T2.Orchestra_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [["Michael Tilson Thomas"]]}}
{"result": "SELECT Name \nFROM conductor \nWHERE Conductor_ID = (\n  SELECT Conductor_ID \n  FROM orchestra \n  GROUP BY Conductor_ID \n  ORDER BY COUNT(Conductor_ID) DESC \n  LIMIT 1\n);", "match": {"match": true, "result": [["Michael Tilson Thomas"]]}}
{"result": "SELECT T2.Name \nFROM orchestra AS T1 \nJOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID \nWHERE T1.Year_of_Founded > 2008", "match": {"match": true, "result": [["Igor Stravinsky"]]}}
{"result": "SELECT T1.Name \nFROM conductor AS T1 \nINNER JOIN orchestra AS T2 \nON T1.Conductor_ID = T2.Conductor_ID \nWHERE T2.Year_of_Founded > 2008;", "match": {"match": true, "result": [["Igor Stravinsky"]]}}
{"result": "SELECT Record_Company, COUNT(Orchestra_ID) as Count \nFROM `orchestra` GROUP BY Record_Company", "match": {"match": true, "result": [["Columbia Masterworks", 1], ["Decca Records", 2], ["Delos Records", 1], ["Deutsche Grammophon", 1], ["EMI", 1], ["Koch Records / Naxos Records", 1], ["Kultur", 1], ["Mercury Records", 1], ["Philips", 1], ["Philips Classics Records", 1], ["RCA", 1]]}}
{"result": "SELECT T1.Record_Company, COUNT(T1.Orchestra_ID) as num_of_Orchestras \nFROM orchestra AS T1 \nGROUP BY T1.Record_Company", "match": {"match": true, "result": [["Columbia Masterworks", 1], ["Decca Records", 2], ["Delos Records", 1], ["Deutsche Grammophon", 1], ["EMI", 1], ["Koch Records / Naxos Records", 1], ["Kultur", 1], ["Mercury Records", 1], ["Philips", 1], ["Philips Classics Records", 1], ["RCA", 1]]}}
{"result": "SELECT Major_Record_Format FROM performance \nJOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID \nGROUP BY Major_Record_Format \nORDER BY COUNT(Major_Record_Format) ASC", "match": {"match": true, "result": [["CD / LP"], ["DVD"], ["CD"]]}}
{"result": "SELECT Major_Record_Format, COUNT(*) as frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY frequency DESC;", "match": {"match": false, "result": [["CD", 10], ["DVD", 1], ["CD / LP", 1]], "gt": [["CD / LP"], ["DVD"], ["CD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Record_Company, COUNT(Conductor_ID) as count \nFROM orchestra \nGROUP BY Record_Company \nORDER BY COUNT(Conductor_ID) DESC \nLIMIT 1", "match": {"match": false, "result": [["Decca Records", 2]], "gt": [["Decca Records"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Record_Company, COUNT(Orchestra_ID) as Total_Orchestras\nFROM orchestra\nGROUP BY Record_Company\nORDER BY Total_Orchestras DESC\nLIMIT 1;", "match": {"match": false, "result": [["Decca Records", 2]], "gt": [["Decca Records"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Orchestra \nFROM performance AS T1 \nLEFT JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID \nWHERE T1.Performance_ID IS NULL", "match": {"match": false, "result": [], "gt": [["San Francisco Symphony Orchestra"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Orchestra\nFROM performance AS T1\nRIGHT JOIN orchestra AS T2 ON T2.Orchestra_ID = T1.Orchestra_ID\nWHERE T1.Performance_ID IS NULL", "match": {"match": true, "result": [["San Francisco Symphony Orchestra"]]}}
{"result": "SELECT T1.Record_Company \nFROM orchestra AS T1 \nJOIN ( \n  SELECT Orchestra_ID \n  FROM orchestra \n  WHERE Year_of_Founded < 2003 \n  GROUP BY Orchestra_ID \n  HAVING COUNT(DISTINCT Conductor_ID) > 1 \n) AS T2 \nON T1.Orchestra_ID = T2.Orchestra_ID \n\nUNION \n\nSELECT T1.Record_Company \nFROM orchestra AS T1 \nJOIN ( \n  SELECT Orchestra_ID \n  FROM orchestra \n  WHERE Year_of_Founded >= 2003 \n  GROUP BY Orchestra_ID \n  HAVING COUNT(DISTINCT Conductor_ID) > 1 \n) AS T2 \nON T1.Orchestra_ID = T2.Orchestra_ID", "match": {"match": false, "result": [], "gt": [["Decca Records"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Record_Company \nFROM orchestra \nWHERE Year_of_Founded < 2003 \nINTERSECT \nSELECT Record_Company \nFROM orchestra \nWHERE Year_of_Founded > 2003", "match": {"match": true, "result": [["Decca Records"]]}}
{"result": "SELECT COUNT(*) \nFROM orchestra \nWHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'", "match": {"match": true, "result": [[11]]}}
{"result": "SELECT COUNT(Orchestra_ID) \nFROM orchestra \nWHERE Major_Record_Format IN ('CD', 'DVD');", "match": {"match": true, "result": [[11]]}}
{"result": "SELECT T1.Year_of_Founded \nFROM orchestra AS T1 \nJOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID \nGROUP BY T2.Orchestra_ID \nHAVING COUNT(T2.Performance_ID) > 1;", "match": {"match": true, "result": []}}
{"result": "SELECT T1.`Year_of_Founded` \nFROM orchestra AS T1 \nJOIN performance AS T2 ON T1.`Orchestra_ID` = T2.`Orchestra_ID` \nGROUP BY T1.`Orchestra_ID`, T1.`Year_of_Founded` \nHAVING COUNT(T2.`Performance_ID`) > 1;", "match": {"match": true, "result": []}}
{"result": "SELECT COUNT(ID) FROM Highschooler", "match": {"match": true, "result": [[16]]}}
{"result": "SELECT COUNT(ID) FROM Highschooler", "match": {"match": true, "result": [[16]]}}
{"result": "SELECT name, grade FROM Highschooler", "match": {"match": true, "result": [["Jordan", 9], ["Gabriel", 9], ["Tiffany", 9], ["Cassandra", 9], ["Haley", 10], ["Andrew", 10], ["Kris", 10], ["Brittany", 10], ["Alexis", 11], ["Austin", 11], ["Gabriel", 11], ["Jessica", 11], ["Jordan", 12], ["John", 12], ["Kyle", 12], ["Logan", 12]]}}
{"result": "SELECT name, grade FROM Highschooler", "match": {"match": true, "result": [["Jordan", 9], ["Gabriel", 9], ["Tiffany", 9], ["Cassandra", 9], ["Haley", 10], ["Andrew", 10], ["Kris", 10], ["Brittany", 10], ["Alexis", 11], ["Austin", 11], ["Gabriel", 11], ["Jessica", 11], ["Jordan", 12], ["John", 12], ["Kyle", 12], ["Logan", 12]]}}
{"result": "SELECT grade FROM Highschooler", "match": {"match": true, "result": [[9], [9], [9], [9], [10], [10], [10], [10], [11], [11], [11], [11], [12], [12], [12], [12]]}}
{"result": "SELECT grade, name FROM Highschooler;", "match": {"match": false, "result": [[9, "Jordan"], [9, "Gabriel"], [9, "Tiffany"], [9, "Cassandra"], [10, "Haley"], [10, "Andrew"], [10, "Kris"], [10, "Brittany"], [11, "Alexis"], [11, "Austin"], [11, "Gabriel"], [11, "Jessica"], [12, "Jordan"], [12, "John"], [12, "Kyle"], [12, "Logan"]], "gt": [[9], [9], [9], [9], [10], [10], [10], [10], [11], [11], [11], [11], [12], [12], [12], [12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT grade FROM Highschooler WHERE name = 'Kyle'", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT grade FROM Highschooler WHERE name = 'Kyle';", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT name \nFROM Highschooler \nWHERE grade = 10;", "match": {"match": true, "result": [["Haley"], ["Andrew"], ["Kris"], ["Brittany"]]}}
{"result": "SELECT name FROM Highschooler WHERE grade = 10", "match": {"match": true, "result": [["Haley"], ["Andrew"], ["Kris"], ["Brittany"]]}}
{"result": "SELECT ID\nFROM Highschooler\nWHERE name = 'Kyle';", "match": {"match": true, "result": [[1934]]}}
{"result": "SELECT ID FROM Highschooler WHERE name = 'Kyle';", "match": {"match": true, "result": [[1934]]}}
{"result": "SELECT COUNT(ID) \nFROM Highschooler \nWHERE grade BETWEEN 9 AND 10", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT COUNT(ID) \nFROM Highschooler \nWHERE grade BETWEEN 9 AND 10", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT grade, COUNT(ID) FROM Highschooler GROUP BY grade", "match": {"match": true, "result": [[9, 4], [10, 4], [11, 4], [12, 4]]}}
{"result": "SELECT grade, COUNT(ID) AS number_of_highschoolers \nFROM Highschooler \nGROUP BY grade;", "match": {"match": true, "result": [[9, 4], [10, 4], [11, 4], [12, 4]]}}
{"result": "SELECT grade, COUNT(ID) FROM Highschooler GROUP BY grade ORDER BY COUNT(ID) DESC LIMIT 1", "match": {"match": false, "result": [[12, 4]], "gt": [[12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT grade \nFROM Highschooler \nGROUP BY grade \nORDER BY COUNT(*) DESC \nLIMIT 1;", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT grade \nFROM Highschooler \nGROUP BY grade \nHAVING COUNT(ID) >= 4", "match": {"match": true, "result": [[9], [10], [11], [12]]}}
{"result": "SELECT grade \nFROM Highschooler \nGROUP BY grade \nHAVING COUNT(ID) >= 4;", "match": {"match": true, "result": [[9], [10], [11], [12]]}}
{"result": "SELECT student_id, COUNT(*) \nFROM Friend \nGROUP BY student_id", "match": {"match": true, "result": [[1101, 1], [1247, 2], [1304, 1], [1316, 1], [1381, 1], [1468, 2], [1501, 1], [1510, 2], [1661, 1], [1689, 2], [1709, 1], [1782, 3], [1911, 1], [1934, 1]]}}
{"result": "SELECT student_id, COUNT(*) FROM Friend GROUP BY student_id", "match": {"match": true, "result": [[1101, 1], [1247, 2], [1304, 1], [1316, 1], [1381, 1], [1468, 2], [1501, 1], [1510, 2], [1661, 1], [1689, 2], [1709, 1], [1782, 3], [1911, 1], [1934, 1]]}}
{"result": "SELECT T1.name, COUNT(T2.student_id) as friend_count \nFROM Highschooler T1 INNER JOIN Friend T2 ON T1.ID = T2.student_id \nGROUP BY T1.name", "match": {"match": false, "result": [["Alexis", 2], ["Andrew", 3], ["Austin", 1], ["Cassandra", 1], ["Gabriel", 3], ["Haley", 1], ["Jessica", 1], ["Jordan", 3], ["Kris", 2], ["Kyle", 1], ["Logan", 1], ["Tiffany", 1]], "gt": [["Haley", 1], ["Alexis", 2], ["Jordan", 1], ["Austin", 1], ["Tiffany", 1], ["Kris", 2], ["Jessica", 1], ["Jordan", 2], ["Logan", 1], ["Gabriel", 2], ["Cassandra", 1], ["Andrew", 3], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT H.name, COUNT(F.student_id) \nFROM Highschooler H \nLEFT JOIN Friend F ON H.ID = F.student_id \nGROUP BY H.name;", "match": {"match": false, "result": [["Alexis", 2], ["Andrew", 3], ["Austin", 1], ["Brittany", 0], ["Cassandra", 1], ["Gabriel", 3], ["Haley", 1], ["Jessica", 1], ["John", 0], ["Jordan", 3], ["Kris", 2], ["Kyle", 1], ["Logan", 1], ["Tiffany", 1]], "gt": [["Haley", 1], ["Alexis", 2], ["Jordan", 1], ["Austin", 1], ["Tiffany", 1], ["Kris", 2], ["Jessica", 1], ["Jordan", 2], ["Logan", 1], ["Gabriel", 2], ["Cassandra", 1], ["Andrew", 3], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name FROM Highschooler \nWHERE ID IN ( SELECT student_id FROM Friend GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1 )", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "SELECT H.name\nFROM Highschooler H\nJOIN (\n  SELECT F.student_id, COUNT(*) as friend_count\n  FROM Friend F\n  GROUP BY F.student_id\n) AS Fcount\nON H.ID = Fcount.student_id\nORDER BY Fcount.friend_count DESC\nLIMIT 1", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "SELECT name\nFROM Highschooler\nWHERE ID IN (\n  SELECT student_id\n  FROM Friend\n  GROUP BY student_id\n  HAVING COUNT(DISTINCT friend_id) >= 3\n)", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "SELECT name FROM Highschooler WHERE id IN (\n  SELECT student_id \n  FROM Friend \n  GROUP BY student_id \n  HAVING count(*) >= 3\n)", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "SELECT T2.name \nFROM Friend AS T1 \nJOIN Highschooler AS T2 \nON T1.student_id = T2.ID \nWHERE T1.friend_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');", "match": {"match": false, "result": [["Jessica"], ["Austin"]], "gt": [["Jordan"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT h1.name \nFROM Highschooler h1 \nJOIN Friend f ON h1.ID = f.student_id \nJOIN Highschooler h2 ON h2.ID = f.friend_id \nWHERE h1.name = 'Kyle'", "match": {"match": false, "result": [["Kyle"]], "gt": [["Jordan"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(T2.student_id) \nFROM Highschooler AS T1 \nJOIN Friend AS T2 ON T1.ID = T2.student_id \nJOIN Highschooler AS T3 ON T3.ID = T2.friend_id \nWHERE T1.name = 'Kyle';", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(*) \nFROM Friend AS F1\nJOIN Highschooler AS H1 ON F1.student_id = H1.ID\nJOIN Friend AS F2 ON F1.friend_id = F2.student_id\nJOIN Highschooler AS H2 ON F2.friend_id = H2.ID\nWHERE H1.name = 'Kyle' AND H2.name = 'Kyle';", "match": {"match": false, "result": [[0]], "gt": [[1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT ID \nFROM Highschooler \nWHERE ID NOT IN (\n  SELECT student_id FROM Friend\n  UNION\n  SELECT friend_id FROM Friend\n);", "match": {"match": false, "result": [], "gt": [[1025], [1641]], "error": "Query result does not match ground truth."}}
{"result": "SELECT ID FROM Highschooler EXCEPT SELECT student_id FROM Friend", "match": {"match": true, "result": [[1025], [1641]]}}
{"result": "SELECT name FROM Highschooler\nWHERE ID NOT IN (\n  SELECT student_id FROM Friend\n  UNION\n  SELECT friend_id FROM Friend\n);", "match": {"match": false, "result": [], "gt": [["Brittany"], ["John"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID NOT IN (SELECT student_id FROM Friend)", "match": {"match": true, "result": [["Brittany"], ["John"]]}}
{"result": "SELECT H.ID \nFROM Highschooler H \nWHERE H.ID IN (SELECT F.student_id FROM Friend F) AND H.ID IN (SELECT L.student_id FROM Likes L);", "match": {"match": false, "result": [[1247], [1316], [1501], [1689], [1709], [1782], [1911], [1934]], "gt": [[1101], [1247], [1304], [1468], [1501], [1689], [1709], [1934]], "error": "Query result does not match ground truth."}}
{"result": "SELECT H1.ID \nFROM Highschooler H1 \nJOIN Friend F ON H1.ID = F.student_id \nJOIN Likes L ON H1.ID = L.student_id \nWHERE H1.ID IN (SELECT F2.student_id \n                FROM Friend F2 \n                JOIN Likes L2 ON F2.student_id = L2.student_id)", "match": {"match": false, "result": [[1247], [1247], [1316], [1501], [1689], [1689], [1709], [1782], [1782], [1782], [1911], [1934]], "gt": [[1101], [1247], [1304], [1468], [1501], [1689], [1709], [1934]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID IN \n    (SELECT student_id \n     FROM Friend \n     GROUP BY student_id \n     HAVING count(*) > 0 \n     INTERSECT \n     SELECT liked_id \n     FROM Likes \n     GROUP BY liked_id \n     HAVING count(*) > 0);", "match": {"match": false, "result": [["Haley"], ["Alexis"], ["Jordan"], ["Kris"], ["Jessica"], ["Gabriel"], ["Cassandra"], ["Kyle"]], "gt": [["Alexis"], ["Cassandra"], ["Gabriel"], ["Haley"], ["Jessica"], ["Jordan"], ["Kris"], ["Kyle"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name FROM Highschooler \nWHERE ID IN (\n  SELECT student_id FROM Friend\n  INTERSECT\n  SELECT liked_id FROM Likes\n);", "match": {"match": false, "result": [["Haley"], ["Alexis"], ["Jordan"], ["Kris"], ["Jessica"], ["Gabriel"], ["Cassandra"], ["Kyle"]], "gt": [["Alexis"], ["Cassandra"], ["Gabriel"], ["Haley"], ["Jessica"], ["Jordan"], ["Kris"], ["Kyle"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT student_id, COUNT(*) FROM Likes GROUP BY student_id", "match": {"match": true, "result": [[1025, 1], [1247, 1], [1316, 1], [1501, 1], [1641, 1], [1689, 1], [1709, 1], [1782, 1], [1911, 1], [1934, 1]]}}
{"result": "SELECT student_id, COUNT(*) \nFROM Likes \nGROUP BY student_id;", "match": {"match": true, "result": [[1025, 1], [1247, 1], [1316, 1], [1501, 1], [1641, 1], [1689, 1], [1709, 1], [1782, 1], [1911, 1], [1934, 1]]}}
{"result": "SELECT name, COUNT(liked_id) \nFROM Highschooler \nWHERE ID IN (SELECT student_id FROM Likes)", "match": {"match": false, "error": "Query execution failed with error: no such column: liked_id"}}
{"result": "SELECT name, COUNT(*) as likes\nFROM Highschooler\nJOIN Likes on Highschooler.ID = Likes.student_id\nGROUP BY name", "match": {"match": false, "result": [["Alexis", 1], ["Andrew", 1], ["Austin", 1], ["Brittany", 1], ["Cassandra", 1], ["Gabriel", 2], ["Jessica", 1], ["John", 1], ["Kyle", 1]], "gt": [["John", 1], ["Alexis", 1], ["Austin", 1], ["Jessica", 1], ["Brittany", 1], ["Gabriel", 1], ["Cassandra", 1], ["Andrew", 1], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes GROUP BY liked_id ORDER BY COUNT(liked_id) DESC LIMIT 1)", "match": {"match": false, "result": [["Cassandra"]], "gt": [["John"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID IN (\n  SELECT liked_id \n  FROM Likes \n  GROUP BY liked_id \n  ORDER BY COUNT(*) DESC \n  LIMIT 1\n);", "match": {"match": false, "result": [["Cassandra"]], "gt": [["John"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT H.name \nFROM Highschooler H \nJOIN Likes L ON H.ID = L.student_id \nGROUP BY H.name \nHAVING COUNT(DISTINCT L.liked_id) >= 2", "match": {"match": false, "result": [["Gabriel"]], "gt": [], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.name \nFROM Highschooler AS T1 \nJOIN Likes AS T2 ON T1.ID = T2.student_id \nGROUP BY T1.name \nHAVING COUNT(T1.ID) > 1", "match": {"match": false, "result": [["Gabriel"]], "gt": [], "error": "Query result does not match ground truth."}}
{"result": "SELECT name FROM Highschooler \nWHERE grade > 5 AND ID IN (\nSELECT student_id \nFROM Friend \nGROUP BY student_id \nHAVING count(*) >= 2 \n)", "match": {"match": true, "result": [["Alexis"], ["Kris"], ["Jordan"], ["Gabriel"], ["Andrew"]]}}
{"result": "SELECT name \nFROM Highschooler \nWHERE grade > 5 AND ID IN \n  (SELECT student_id \n   FROM Friend \n   GROUP BY student_id \n   HAVING COUNT(student_id) > 1);", "match": {"match": true, "result": [["Alexis"], ["Kris"], ["Jordan"], ["Gabriel"], ["Andrew"]]}}
{"result": "SELECT COUNT(student_id) \nFROM Likes \nWHERE liked_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(*) \nFROM Likes \nWHERE student_id IN (SELECT ID FROM Highschooler WHERE name = 'Kyle');", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT AVG(grade) \nFROM Highschooler \nWHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) > 1)", "match": {"match": false, "result": [[9.8]], "gt": [[10.428571428571429]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(T1.grade) FROM Highschooler AS T1\nJOIN Friend AS T2 ON T1.ID = T2.student_id\nWHERE T1.ID NOT IN ( SELECT friend_id FROM Friend );", "match": {"match": false, "result": [[9.0]], "gt": [[10.428571428571429]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Min(grade) \nFROM Highschooler \nWHERE ID NOT IN (SELECT student_id FROM Friend)", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN \n(SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)", "match": {"match": false, "result": [[null]], "gt": [[10]], "error": "Query result does not match ground truth."}}
{"result": "SELECT state FROM Owners\nINTERSECT\nSELECT state FROM Professionals;", "match": {"match": true, "result": [["Indiana"], ["Mississippi"], ["Wisconsin"]]}}
{"result": "SELECT DISTINCT T1.state \nFROM Owners AS T1 \nINNER JOIN Professionals AS T2 ON T1.state = T2.state", "match": {"match": false, "result": [["Wisconsin"], ["Indiana"], ["Mississippi"]], "gt": [["Indiana"], ["Mississippi"], ["Wisconsin"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(T1.age) \nFROM Dogs AS T1 \nJOIN Treatments AS T2 ON T1.dog_id = T2.dog_id", "match": {"match": false, "result": [[5.466666666666667]], "gt": [[5.111111111111111]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(T1.age) \nFROM Dogs T1\nJOIN Treatments T2 ON T1.dog_id = T2.dog_id;", "match": {"match": false, "result": [[5.466666666666667]], "gt": [[5.111111111111111]], "error": "Query result does not match ground truth."}}
{"result": "SELECT p.`professional_id`, p.`last_name`, p.`cell_number` \nFROM `Professionals` p\nWHERE p.`state` = 'IN'\nOR p.`professional_id` IN (\n  SELECT t.`professional_id`\n  FROM `Treatments` t\n  GROUP BY t.`professional_id`\n  HAVING COUNT(t.`treatment_id`) > 2\n)", "match": {"match": false, "result": [[9, "Kshlerin", "962-983-8109x3509"]], "gt": [[1, "Braun", "(275)939-2435x80863"], [8, "Hyatt", "328.842.3792"], [9, "Kshlerin", "962-983-8109x3509"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT t1.professional_id, t1.last_name, t1.cell_number \nFROM Professionals t1 \nWHERE t1.state = 'Indiana' \nOR EXISTS (SELECT 1 FROM Treatments t2 WHERE t2.professional_id = t1.professional_id GROUP BY t2.professional_id HAVING COUNT(t2.professional_id) > 2)", "match": {"match": true, "result": [[1, "Braun", "(275)939-2435x80863"], [8, "Hyatt", "328.842.3792"], [9, "Kshlerin", "962-983-8109x3509"]]}}
{"result": "SELECT T1.name \nFROM Dogs T1 \nJOIN Treatments T2 ON T1.dog_id = T2.dog_id \nWHERE T2.cost_of_treatment < 1000", "match": {"match": false, "result": [["Lyric"], ["Houston"], ["Lyric"], ["Hipolito"], ["Holden"], ["Troy"], ["Evangeline"], ["Hipolito"], ["Lyric"], ["Troy"], ["Evangeline"], ["Jesus"], ["Narciso"], ["Troy"], ["Kacey"]], "gt": [["Kacey"], ["Hipolito"], ["Mavis"], ["Houston"], ["Jeffrey"], ["Merritt"], ["Narciso"], ["George"], ["Bessie"], ["Betty"], ["Holden"], ["Jesus"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.name \nFROM Dogs AS T1 \nJOIN Treatments AS T2 ON T1.dog_id = T2.dog_id \nJOIN Charges AS T3 ON T2.cost_of_treatment = T3.charge_amount \nWHERE T3.charge_type = 'Treatment' AND T3.charge_amount <= 1000.0000", "match": {"match": false, "result": [], "gt": [["Kacey"], ["Hipolito"], ["Mavis"], ["Houston"], ["Jeffrey"], ["Merritt"], ["Narciso"], ["George"], ["Bessie"], ["Betty"], ["Holden"], ["Jesus"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT P.first_name \nFROM Professionals P\nWHERE P.first_name NOT IN (SELECT D.name FROM Dogs D) \nUNION \nSELECT DISTINCT O.first_name \nFROM Owners O\nWHERE O.first_name NOT IN (SELECT D.name FROM Dogs D)", "match": {"match": true, "result": [["Adelle"], ["Brady"], ["Cindy"], ["Danny"], ["Domenica"], ["Emelie"], ["Ericka"], ["Gay"], ["Heather"], ["Jaclyn"], ["Jayson"], ["Johann"], ["Kade"], ["Karley"], ["Lesly"], ["Lorenz"], ["Melisa"], ["Monte"], ["Nora"], ["Olaf"], ["Orlando"], ["Rachelle"], ["Rolando"], ["Ruben"], ["Sigurd"], ["Taryn"], ["Tre"], ["Velva"], ["Vernice"], ["Winfield"]]}}
{"result": "SELECT p.first_name \nFROM Professionals p\nWHERE p.first_name NOT IN ( SELECT d.name FROM Dogs d ) \n\nUNION \n\nSELECT o.first_name \nFROM Owners o\nWHERE o.first_name NOT IN ( SELECT d.name FROM Dogs d );", "match": {"match": true, "result": [["Adelle"], ["Brady"], ["Cindy"], ["Danny"], ["Domenica"], ["Emelie"], ["Ericka"], ["Gay"], ["Heather"], ["Jaclyn"], ["Jayson"], ["Johann"], ["Kade"], ["Karley"], ["Lesly"], ["Lorenz"], ["Melisa"], ["Monte"], ["Nora"], ["Olaf"], ["Orlando"], ["Rachelle"], ["Rolando"], ["Ruben"], ["Sigurd"], ["Taryn"], ["Tre"], ["Velva"], ["Vernice"], ["Winfield"]]}}
{"result": "SELECT p.professional_id, p.role_code, p.email_address \nFROM Professionals p \nLEFT JOIN Treatments t ON p.professional_id = t.professional_id \nWHERE t.treatment_id IS NULL", "match": {"match": true, "result": [[1, "Employee", "deanna.schuster@example.com"], [2, "Employee", "lucile.shanahan@example.org"], [3, "Employee", "uboehm@example.org"], [11, "Employee", "west.eula@example.net"], [12, "Veterenarian", "marquardt.furman@example.org"], [13, "Veterenarian", "delphine29@example.com"], [15, "Employee", "jeichmann@example.com"]]}}
{"result": "SELECT p.professional_id, p.role_code, p.email_address \nFROM Professionals p \nLEFT JOIN Treatments t ON p.professional_id = t.professional_id \nWHERE t.treatment_id IS NULL;", "match": {"match": true, "result": [[1, "Employee", "deanna.schuster@example.com"], [2, "Employee", "lucile.shanahan@example.org"], [3, "Employee", "uboehm@example.org"], [11, "Employee", "west.eula@example.net"], [12, "Veterenarian", "marquardt.furman@example.org"], [13, "Veterenarian", "delphine29@example.com"], [15, "Employee", "jeichmann@example.com"]]}}
{"result": "SELECT T1.owner_id, T1.first_name, T1.last_name \nFROM Owners AS T1 \nJOIN Dogs AS T2 ON T1.owner_id = T2.owner_id \nGROUP BY T1.owner_id \nORDER BY COUNT(T1.owner_id) DESC \nLIMIT 1", "match": {"match": true, "result": [[14, "Rachelle", "Funk"]]}}
{"result": "SELECT T1.owner_id, T1.first_name, T1.last_name\nFROM Owners AS T1\nJOIN Dogs AS T2 ON T1.owner_id = T2.owner_id\nGROUP BY T1.owner_id, T1.first_name, T1.last_name\nORDER BY COUNT(T2.owner_id) DESC\nLIMIT 1", "match": {"match": true, "result": [[14, "Rachelle", "Funk"]]}}
{"result": "SELECT T1.professional_id, T1.role_code, T1.first_name \nFROM Professionals AS T1\nJOIN Treatments AS T2 ON T1.professional_id = T2.professional_id\nGROUP BY T1.professional_id, T1.role_code, T1.first_name\nHAVING COUNT(T2.treatment_id) >= 2", "match": {"match": true, "result": [[4, "Veterenarian", "Vernice"], [6, "Veterenarian", "Ruben"], [8, "Employee", "Karley"], [9, "Veterenarian", "Monte"], [10, "Employee", "Domenica"], [14, "Employee", "Sigurd"]]}}
{"result": "SELECT T2.professional_id, T2.role_code, T2.first_name \nFROM Dogs AS T1 \nJOIN Treatments AS T2 ON T1.dog_id = T2.dog_id \nGROUP BY T2.professional_id \nHAVING COUNT(T2.professional_id) >= 2", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.role_code"}}
{"result": "SELECT T1.breed_name \nFROM Breeds AS T1 \nJOIN Dogs AS T2 ON T1.breed_code = T2.breed_code \nGROUP BY T1.breed_name \nORDER BY COUNT(T2.dog_id) DESC \nLIMIT 1", "match": {"match": true, "result": [["Bulldog"]]}}
{"result": "SELECT T1.breed_name \nFROM Breeds AS T1 \nJOIN Dogs AS T2 ON T1.breed_code = T2.breed_code \nGROUP BY T2.breed_code \nORDER BY COUNT(T2.dog_id) DESC \nLIMIT 1", "match": {"match": true, "result": [["Bulldog"]]}}
{"result": "SELECT O.owner_id, O.last_name \nFROM Owners O \nJOIN Dogs D ON O.owner_id = D.owner_id \nJOIN Treatments T ON D.dog_id = T.dog_id \nGROUP BY O.owner_id, O.last_name \nORDER BY COUNT(T.dog_id) DESC \nLIMIT 1;", "match": {"match": true, "result": [[14, "Funk"]]}}
{"result": "SELECT T.owner_id, T.last_name \nFROM (\n  SELECT T2.owner_id, T2.last_name, SUM(T1.cost_of_treatment) as total_spent \n  FROM Treatments T1 \n  INNER JOIN Dogs T2 ON T1.dog_id = T2.dog_id \n  INNER JOIN Owners T3 ON T2.owner_id = T3.owner_id \n  GROUP BY T2.owner_id, T2.last_name \n) T \nORDER BY T.total_spent DESC \nLIMIT 1", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.last_name"}}
{"result": "SELECT t1.treatment_type_description \nFROM Treatment_Types AS t1 \nJOIN Treatments AS t2 \nON t1.treatment_type_code = t2.treatment_type_code \nGROUP BY t2.treatment_type_code \nORDER BY SUM(t2.cost_of_treatment) ASC \nLIMIT 1", "match": {"match": true, "result": [["Take for a Walk"]]}}
{"result": "SELECT tt.treatment_type_description \nFROM Treatment_Types tt \nJOIN (\n  SELECT tt.treatment_type_code, SUM(t.cost_of_treatment) as total_cost\n  FROM Treatment_Types tt\n  JOIN Treatments t ON tt.treatment_type_code = t.treatment_type_code\n  GROUP BY tt.treatment_type_code\n) as min_cost ON tt.treatment_type_code = min_cost.treatment_type_code \nWHERE min_cost.total_cost = (\n  SELECT MIN(total_cost)\n  FROM (\n    SELECT tt.treatment_type_code, SUM(t.cost_of_treatment) as total_cost\n    FROM Treatment_Types tt\n    JOIN Treatments t ON tt.treatment_type_code = t.treatment_type_code\n    GROUP BY tt.treatment_type_code\n  ) as cost\n);", "match": {"match": true, "result": [["Take for a Walk"]]}}
{"result": "SELECT T1.owner_id, T1.zip_code\nFROM Owners AS T1\nJOIN (\n  SELECT owner_id, SUM(Charges.charge_amount) AS total_spent\n  FROM Dogs\n  JOIN Treatments ON Dogs.dog_id = Treatments.dog_id\n  JOIN Charges ON Treatments.cost_of_treatment = Charges.charge_amount\n  GROUP BY owner_id\n) AS T2 ON T1.owner_id = T2.owner_id\nORDER BY T2.total_spent DESC\nLIMIT 1", "match": {"match": false, "result": [], "gt": [[3, "02647"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.owner_id, T1.zip_code \nFROM Owners AS T1 \nJOIN (\n  SELECT T2.owner_id, SUM(T3.cost_of_treatment) AS total_spent \n  FROM Dogs AS T2 \n  JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id \n  GROUP BY T2.owner_id\n) AS T4 ON T1.owner_id = T4.owner_id \nORDER BY T4.total_spent DESC \nLIMIT 1", "match": {"match": true, "result": [[3, "02647"]]}}
{"result": "SELECT `professional_id`, `cell_number`\nFROM (\n  SELECT `professional_id`, COUNT(`treatment_id`) AS treatment_count\n  FROM `Treatments`\n  GROUP BY `professional_id`\n  HAVING COUNT(`treatment_id`) >= 2\n) AS subquery\nJOIN `Professionals` ON `Professionals`.`professional_id` = subquery.`professional_id`", "match": {"match": false, "error": "Query execution failed with error: ambiguous column name: professional_id"}}
{"result": "SELECT T1.professional_id, T1.cell_number \nFROM Professionals T1 \nJOIN Treatments T2 ON T1.professional_id = T2.professional_id \nGROUP BY T1.professional_id \nHAVING COUNT(T2.treatment_id) >= 2", "match": {"match": true, "result": [[4, "00230569697"], [6, "139-321-7313"], [8, "328.842.3792"], [9, "962-983-8109x3509"], [10, "461-801-2600"], [14, "1-185-137-1945x409"]]}}
{"result": "SELECT T1.first_name, T1.last_name \nFROM Professionals AS T1 \nJOIN Treatments AS T2 ON T1.professional_id = T2.professional_id \nWHERE T2.cost_of_treatment < (\n    SELECT AVG(cost_of_treatment) \n    FROM Treatments\n);", "match": {"match": false, "result": [["Domenica", "Jacobs"], ["Vernice", "Tillman"], ["Karley", "Hyatt"], ["Vernice", "Tillman"], ["Ruben", "O'Reilly"], ["Domenica", "Jacobs"], ["Monte", "Kshlerin"], ["Monte", "Kshlerin"]], "gt": [["Taryn", "Braun"], ["Jayson", "Ullrich"], ["Olaf", "Watsica"], ["Vernice", "Tillman"], ["Danny", "Considine"], ["Ruben", "O'Reilly"], ["Velva", "Hayes"], ["Karley", "Hyatt"], ["Monte", "Kshlerin"], ["Domenica", "Jacobs"], ["Brady", "Pouros"], ["Winfield", "Christiansen"], ["Ericka", "Murazik"], ["Sigurd", "Frami"], ["Lesly", "Walter"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.first_name, T2.last_name \nFROM Treatments AS T1 \nJOIN Professionals AS T2 ON T1.professional_id = T2.professional_id \nWHERE T1.cost_of_treatment < ( SELECT AVG(cost_of_treatment) FROM Treatments );", "match": {"match": false, "result": [["Domenica", "Jacobs"], ["Vernice", "Tillman"], ["Karley", "Hyatt"], ["Vernice", "Tillman"], ["Ruben", "O'Reilly"], ["Domenica", "Jacobs"], ["Monte", "Kshlerin"], ["Monte", "Kshlerin"]], "gt": [["Taryn", "Braun"], ["Jayson", "Ullrich"], ["Olaf", "Watsica"], ["Vernice", "Tillman"], ["Danny", "Considine"], ["Ruben", "O'Reilly"], ["Velva", "Hayes"], ["Karley", "Hyatt"], ["Monte", "Kshlerin"], ["Domenica", "Jacobs"], ["Brady", "Pouros"], ["Winfield", "Christiansen"], ["Ericka", "Murazik"], ["Sigurd", "Frami"], ["Lesly", "Walter"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.date_of_treatment, P.first_name \nFROM Treatments AS T1 \nINNER JOIN Professionals AS P ON T1.professional_id = P.professional_id", "match": {"match": true, "result": [["2018-03-19 04:39:54", "Monte"], ["2018-03-15 20:25:34", "Domenica"], ["2018-03-08 05:26:23", "Vernice"], ["2018-03-01 04:14:46", "Karley"], ["2018-03-23 13:52:10", "Sigurd"], ["2018-03-11 04:23:15", "Vernice"], ["2018-03-10 11:45:58", "Sigurd"], ["2018-03-24 22:25:58", "Ruben"], ["2018-03-14 19:10:40", "Domenica"], ["2018-02-28 17:09:43", "Velva"], ["2018-03-13 12:22:58", "Danny"], ["2018-03-16 10:27:36", "Monte"], ["2018-02-26 09:08:53", "Karley"], ["2018-03-04 20:33:43", "Monte"], ["2018-03-15 19:10:02", "Ruben"]]}}
{"result": "SELECT T1.date_of_treatment, T2.first_name \nFROM Treatments AS T1 \nJOIN Professionals AS T2 ON T1.professional_id = T2.professional_id", "match": {"match": true, "result": [["2018-03-19 04:39:54", "Monte"], ["2018-03-15 20:25:34", "Domenica"], ["2018-03-08 05:26:23", "Vernice"], ["2018-03-01 04:14:46", "Karley"], ["2018-03-23 13:52:10", "Sigurd"], ["2018-03-11 04:23:15", "Vernice"], ["2018-03-10 11:45:58", "Sigurd"], ["2018-03-24 22:25:58", "Ruben"], ["2018-03-14 19:10:40", "Domenica"], ["2018-02-28 17:09:43", "Velva"], ["2018-03-13 12:22:58", "Danny"], ["2018-03-16 10:27:36", "Monte"], ["2018-02-26 09:08:53", "Karley"], ["2018-03-04 20:33:43", "Monte"], ["2018-03-15 19:10:02", "Ruben"]]}}
{"result": "SELECT T1.cost_of_treatment, T3.treatment_type_description \nFROM Treatments AS T1 \nJOIN Treatment_Types AS T3 ON T3.treatment_type_code = T1.treatment_type_code;", "match": {"match": true, "result": [[567, "Take for a Walk"], [147, "Vaccination"], [429, "Physical examination"], [266, "Vaccination"], [668, "Vaccination"], [313, "Physical examination"], [852, "Physical examination"], [407, "Physical examination"], [139, "Take for a Walk"], [681, "Take for a Walk"], [514, "Vaccination"], [428, "Physical examination"], [945, "Vaccination"], [349, "Take for a Walk"], [656, "Take for a Walk"]]}}
{"result": "SELECT T1.cost_of_treatment, T2.treatment_type_description \nFROM Treatments AS T1 \nJOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code", "match": {"match": true, "result": [[567, "Take for a Walk"], [147, "Vaccination"], [429, "Physical examination"], [266, "Vaccination"], [668, "Vaccination"], [313, "Physical examination"], [852, "Physical examination"], [407, "Physical examination"], [139, "Take for a Walk"], [681, "Take for a Walk"], [514, "Vaccination"], [428, "Physical examination"], [945, "Vaccination"], [349, "Take for a Walk"], [656, "Take for a Walk"]]}}
{"result": "SELECT o.first_name, o.last_name, d.size_code \nFROM Owners o \nJOIN Dogs d ON o.owner_id = d.owner_id", "match": {"match": true, "result": [["Jaclyn", "Stoltenberg", "LGE"], ["Gay", "Feil", "LGE"], ["Nora", "Haley", "MED"], ["Rachelle", "Funk", "LGE"], ["Emelie", "Mertz", "MED"], ["Johann", "Fisher", "MED"], ["Jaclyn", "Stoltenberg", "MED"], ["Rachelle", "Funk", "SML"], ["Melisa", "DuBuque", "MED"], ["Kade", "Rippin", "MED"], ["Cindy", "Schmitt", "LGE"], ["Orlando", "Price", "MED"], ["Rolando", "Prohaska", "SML"], ["Rachelle", "Funk", "MED"], ["Lorenz", "Nicolas", "MED"]]}}
{"result": "SELECT o.first_name, o.last_name, d.size_code \nFROM Owners o \nJOIN Dogs d ON o.owner_id = d.owner_id", "match": {"match": true, "result": [["Jaclyn", "Stoltenberg", "LGE"], ["Gay", "Feil", "LGE"], ["Nora", "Haley", "MED"], ["Rachelle", "Funk", "LGE"], ["Emelie", "Mertz", "MED"], ["Johann", "Fisher", "MED"], ["Jaclyn", "Stoltenberg", "MED"], ["Rachelle", "Funk", "SML"], ["Melisa", "DuBuque", "MED"], ["Kade", "Rippin", "MED"], ["Cindy", "Schmitt", "LGE"], ["Orlando", "Price", "MED"], ["Rolando", "Prohaska", "SML"], ["Rachelle", "Funk", "MED"], ["Lorenz", "Nicolas", "MED"]]}}
{"result": "SELECT T1.first_name, T2.name\nFROM Owners T1\nJOIN Dogs T2 ON T1.owner_id = T2.owner_id", "match": {"match": true, "result": [["Jaclyn", "Kacey"], ["Gay", "Hipolito"], ["Nora", "Mavis"], ["Rachelle", "Houston"], ["Emelie", "Jeffrey"], ["Johann", "Merritt"], ["Jaclyn", "Narciso"], ["Rachelle", "George"], ["Melisa", "Bessie"], ["Kade", "Troy"], ["Cindy", "Betty"], ["Orlando", "Holden"], ["Rolando", "Jesus"], ["Rachelle", "Lyric"], ["Lorenz", "Evangeline"]]}}
{"result": "SELECT o.first_name, d.name \nFROM Owners o \nJOIN Dogs d ON o.owner_id = d.owner_id", "match": {"match": true, "result": [["Jaclyn", "Kacey"], ["Gay", "Hipolito"], ["Nora", "Mavis"], ["Rachelle", "Houston"], ["Emelie", "Jeffrey"], ["Johann", "Merritt"], ["Jaclyn", "Narciso"], ["Rachelle", "George"], ["Melisa", "Bessie"], ["Kade", "Troy"], ["Cindy", "Betty"], ["Orlando", "Holden"], ["Rolando", "Jesus"], ["Rachelle", "Lyric"], ["Lorenz", "Evangeline"]]}}
{"result": "```sql\nSELECT DISTINCT d.name, t.date_of_treatment\nFROM Dogs d\nJOIN Treatments t ON d.dog_id = t.dog_id\nJOIN Breeds b ON d.breed_code = b.breed_code\nWHERE b.breed_name = (\n  SELECT breed_name\n  FROM Breeds\n  GROUP BY breed_name\n  ORDER BY COUNT(*) ASC\n  LIMIT 1\n);\n```\nThis SQL query will first find the rarest breed by grouping the breeds by name, counting the number of dogs for each breed, ordering the results by the count in ascending order, and selecting the breed with the smallest count.\n\nThen, it will join the `Dogs` table with the `Treatments` table based on the `dog_id` column and the `Breeds` table based on the `breed_code` column to get the names of the dogs and their treatment dates. The `DISTINCT` keyword is used to ensure that each dog is only listed once, even if they have multiple treatments.", "match": {"match": false, "error": "Query execution failed with error: You can only execute one statement at a time."}}
{"result": "SELECT T1.name, T3.treatment_type_description, T2.date_of_treatment \nFROM Dogs T1 \nJOIN Breeds T2 ON T1.breed_code = T2.breed_code \nJOIN Treatment_Types T3 ON T3.treatment_type_code = T3.treatment_type_code \nJOIN Treatments T4 ON T4.dog_id = T1.dog_id \nJOIN Charges T5 ON T5.charge_id = T4.charge_id \nWHERE T2.breed_code IN ( SELECT breed_code FROM Breeds GROUP BY breed_code ORDER BY COUNT(dog_id) ASC LIMIT 1 )", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.date_of_treatment"}}
{"result": "SELECT o.first_name, d.name \nFROM Owners o \nINNER JOIN Dogs d \nON o.owner_id = d.owner_id \nWHERE o.state = 'Virginia';", "match": {"match": true, "result": [["Melisa", "Bessie"]]}}
{"result": "SELECT o.first_name, d.name FROM Owners o \nJOIN Dogs d ON o.owner_id = d.owner_id \nWHERE o.state = 'Virginia'", "match": {"match": true, "result": [["Melisa", "Bessie"]]}}
{"result": "SELECT T1.date_arrived, T1.date_departed \nFROM Dogs AS T1 \nJOIN Treatments AS T2 ON T1.dog_id = T2.dog_id", "match": {"match": false, "result": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "gt": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.date_arrived, T1.date_departed \nFROM Dogs AS T1 \nJOIN Treatments AS T2 ON T1.dog_id = T2.dog_id", "match": {"match": false, "result": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "gt": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.last_name FROM Dogs AS T1 \nJOIN Owners AS T2 ON T1.owner_id = T2.owner_id \nWHERE T1.age = ( SELECT MIN(T1.age) FROM Dogs AS T1 )", "match": {"match": false, "result": [["Nicolas"]], "gt": [["Feil"], ["Fisher"], ["Rippin"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.last_name \nFROM Dogs AS T1 \nINNER JOIN Owners AS T2 ON T1.owner_id = T2.owner_id \nWHERE T1.date_arrived = ( SELECT MIN(date_arrived) \n                          FROM Dogs );", "match": {"match": false, "result": [["Fisher"]], "gt": [["Feil"], ["Fisher"], ["Rippin"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT email_address \nFROM Professionals \nWHERE state IN ('HI', 'WI');", "match": {"match": false, "result": [], "gt": [["uboehm@example.org"], ["mekhi.little@example.org"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT email_address \nFROM Professionals \nWHERE state IN ('Hawaii', 'Wisconsin');", "match": {"match": true, "result": [["uboehm@example.org"], ["mekhi.little@example.org"]]}}
{"result": "SELECT `date_arrived`, `date_departed`\nFROM `Dogs`;", "match": {"match": true, "result": [["2017-09-08 20:10:13", "2018-03-25 06:58:44"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-25 10:14:05", "2018-03-25 10:25:46"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-10-25 00:55:34", "2018-03-25 04:50:22"], ["2017-04-15 09:25:31", "2018-03-25 13:07:04"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-10-16 20:06:21", "2018-03-25 02:47:40"], ["2018-01-17 11:44:16", "2018-03-25 06:46:07"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-07-25 15:19:07", "2018-03-25 15:05:16"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"]]}}
{"result": "SELECT date_arrived, date_departed FROM Dogs;", "match": {"match": true, "result": [["2017-09-08 20:10:13", "2018-03-25 06:58:44"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-25 10:14:05", "2018-03-25 10:25:46"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-10-25 00:55:34", "2018-03-25 04:50:22"], ["2017-04-15 09:25:31", "2018-03-25 13:07:04"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-10-16 20:06:21", "2018-03-25 02:47:40"], ["2018-01-17 11:44:16", "2018-03-25 06:46:07"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-07-25 15:19:07", "2018-03-25 15:05:16"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"]]}}
{"result": "SELECT COUNT(*) \nFROM `Dogs` \nWHERE dog_id IN (SELECT dog_id FROM Treatments);", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(DISTINCT d.dog_id) \nFROM Dogs d \nJOIN Treatments t ON d.dog_id = t.dog_id", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(DISTINCT professional_id) \nFROM Treatments", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT COUNT(DISTINCT professional_id) \nFROM `Treatments`", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT T1.role_code, T1.street, T1.city, T1.state \nFROM Professionals T1 \nJOIN Professionals T2 ON T1.professional_id = T2.professional_id \nJOIN Owners T3 ON T3.owner_id = T2.owner_id \nWHERE T3.city LIKE '%West%';", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.owner_id"}}
{"result": "SELECT T1.role_code, T1.street, T1.city, T1.state \nFROM Professionals AS T1 \nWHERE T1.city LIKE '%West%';", "match": {"match": true, "result": [["Employee", "6915 Oberbrunner Point Suite 491\nGleasonville, LA ", "West Heidi", "Indiana"]]}}
{"result": "SELECT first_name, last_name, email_address \nFROM Owners \nWHERE state LIKE '%North%';", "match": {"match": true, "result": [["Johann", "Fisher", "zboncak.madonna@example.net"], ["Cindy", "Schmitt", "wpfeffer@example.net"]]}}
{"result": "SELECT `first_name`, `last_name`, `email_address` \nFROM `Owners` \nWHERE `state` LIKE '%North%';", "match": {"match": true, "result": [["Johann", "Fisher", "zboncak.madonna@example.net"], ["Cindy", "Schmitt", "wpfeffer@example.net"]]}}
{"result": "SELECT COUNT(*) \nFROM Dogs \nWHERE age < ( SELECT AVG(age) FROM Dogs );", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(*) \nFROM Dogs \nWHERE age < (SELECT AVG(age) FROM Dogs);", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT TOP 1 cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC", "match": {"match": false, "error": "Query execution failed with error: near \"1\": syntax error"}}
{"result": "SELECT MAX(cost_of_treatment) \nFROM Treatments;", "match": {"match": false, "result": [[945]], "gt": [[407]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(dog_id) \nFROM Dogs \nLEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id \nWHERE Treatments.dog_id IS NULL", "match": {"match": false, "error": "Query execution failed with error: ambiguous column name: dog_id"}}
{"result": "SELECT COUNT(*) \nFROM Dogs \nWHERE dog_id NOT IN (SELECT dog_id FROM Treatments)", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(owner_id) \nFROM Dogs \nWHERE dog_id IS NULL;", "match": {"match": false, "result": [[0]], "gt": [[3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(owner_id) \nFROM Owners \nWHERE owner_id NOT IN (SELECT owner_id FROM Dogs)", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(*) \nFROM Professionals p \nLEFT JOIN Treatments t ON p.professional_id = t.professional_id \nWHERE t.treatment_id IS NULL", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT COUNT(*) \nFROM Professionals \nWHERE professional_id NOT IN (SELECT professional_id FROM Treatments)", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT name, age, weight \nFROM Dogs \nWHERE abandoned_yn = '1';", "match": {"match": true, "result": [["Kacey", "6", "7.57"], ["Lyric", "4", "4.36"], ["Evangeline", "1", "4.01"]]}}
{"result": "SELECT name, age, weight \nFROM Dogs \nWHERE abandoned_yn = '1';", "match": {"match": true, "result": [["Kacey", "6", "7.57"], ["Lyric", "4", "4.36"], ["Evangeline", "1", "4.01"]]}}
{"result": "SELECT AVG(age) FROM Dogs", "match": {"match": true, "result": [[5.066666666666666]]}}
{"result": "SELECT AVG(CAST(REPLACE(trim(age), 'years', '') AS SIGNED)) AS average_age\nFROM Dogs", "match": {"match": true, "result": [[5.066666666666666]]}}
{"result": "SELECT age FROM Dogs ORDER BY age DESC LIMIT 1", "match": {"match": true, "result": [["9"]]}}
{"result": "SELECT age \nFROM Dogs \nORDER BY date_of_birth ASC \nLIMIT 1;", "match": {"match": false, "result": [["8"]], "gt": [["9"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT charge_type, charge_amount FROM Charges", "match": {"match": true, "result": [["Daily Accommodation", 98], ["Drugs", 322], ["Health Check", 640]]}}
{"result": "SELECT charge_type, charge_amount FROM Charges", "match": {"match": true, "result": [["Daily Accommodation", 98], ["Drugs", 322], ["Health Check", 640]]}}
{"result": "SELECT charge_type, MAX(charge_amount) AS Max_Cost \nFROM Charges \nGROUP BY charge_type", "match": {"match": false, "result": [["Daily Accommodation", 98], ["Drugs", 322], ["Health Check", 640]], "gt": [[640]], "error": "Query result does not match ground truth."}}
{"result": "SELECT charge_type, MAX(charge_amount) AS max_charge_amount\nFROM Charges\nGROUP BY charge_type", "match": {"match": false, "result": [["Daily Accommodation", 98], ["Drugs", 322], ["Health Check", 640]], "gt": [[640]], "error": "Query result does not match ground truth."}}
{"result": "SELECT email_address, cell_number, home_phone FROM Professionals", "match": {"match": true, "result": [["deanna.schuster@example.com", "(275)939-2435x80863", "+71(6)2898266914"], ["lucile.shanahan@example.org", "889-940-2676", "+02(1)0259033559"], ["uboehm@example.org", "(369)908-7311x065", "325-155-0801x7005"], ["lourdes.lowe@example.net", "00230569697", "312.216.3352"], ["mekhi.little@example.org", "011.193.9081x3186", "1-609-566-2752x25197"], ["jacynthe.mclaughlin@example.net", "139-321-7313", "+43(5)1132733868"], ["lambert62@example.org", "499-434-0215x1628", "022.529.0550x1319"], ["goyette.roosevelt@example.net", "328.842.3792", "891.475.2256"], ["schneider.kathryne@example.org", "962-983-8109x3509", "320-508-6023"], ["jerrod.bahringer@example.org", "461-801-2600", "(230)338-3342x585"], ["west.eula@example.net", "609-405-2990", "(920)304-4499x59146"], ["marquardt.furman@example.org", "1-181-670-9466", "246-951-0080x76716"], ["delphine29@example.com", "880-659-7577x736", "346.594.3739"], ["cole.margarita@example.org", "1-185-137-1945x409", "971.048.3763x9404"], ["jeichmann@example.com", "1-258-285-4707x8020", "1-138-287-3775"]]}}
{"result": "SELECT email_address, cell_number, home_phone FROM Professionals", "match": {"match": true, "result": [["deanna.schuster@example.com", "(275)939-2435x80863", "+71(6)2898266914"], ["lucile.shanahan@example.org", "889-940-2676", "+02(1)0259033559"], ["uboehm@example.org", "(369)908-7311x065", "325-155-0801x7005"], ["lourdes.lowe@example.net", "00230569697", "312.216.3352"], ["mekhi.little@example.org", "011.193.9081x3186", "1-609-566-2752x25197"], ["jacynthe.mclaughlin@example.net", "139-321-7313", "+43(5)1132733868"], ["lambert62@example.org", "499-434-0215x1628", "022.529.0550x1319"], ["goyette.roosevelt@example.net", "328.842.3792", "891.475.2256"], ["schneider.kathryne@example.org", "962-983-8109x3509", "320-508-6023"], ["jerrod.bahringer@example.org", "461-801-2600", "(230)338-3342x585"], ["west.eula@example.net", "609-405-2990", "(920)304-4499x59146"], ["marquardt.furman@example.org", "1-181-670-9466", "246-951-0080x76716"], ["delphine29@example.com", "880-659-7577x736", "346.594.3739"], ["cole.margarita@example.org", "1-185-137-1945x409", "971.048.3763x9404"], ["jeichmann@example.com", "1-258-285-4707x8020", "1-138-287-3775"]]}}
{"result": "SELECT DISTINCT breed_code, size_code \nFROM Dogs", "match": {"match": true, "result": [["ESK", "LGE"], ["BUL", "LGE"], ["BUL", "MED"], ["HUS", "MED"], ["ESK", "SML"], ["HUS", "SML"], ["ESK", "MED"]]}}
{"result": "SELECT DISTINCT breed_code, size_code \nFROM Dogs", "match": {"match": true, "result": [["ESK", "LGE"], ["BUL", "LGE"], ["BUL", "MED"], ["HUS", "MED"], ["ESK", "SML"], ["HUS", "SML"], ["ESK", "MED"]]}}
{"result": "SELECT p.first_name, tt.treatment_type_description \nFROM Treatments t \nJOIN Professionals p ON t.professional_id = p.professional_id \nJOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code", "match": {"match": false, "result": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Vernice", "Physical examination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Karley", "Vaccination"], ["Monte", "Take for a Walk"], ["Ruben", "Take for a Walk"]], "gt": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Ruben", "Take for a Walk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT p.first_name, tt.treatment_type_description \nFROM Treatments t \nINNER JOIN Professionals p ON t.professional_id = p.professional_id \nINNER JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code", "match": {"match": false, "result": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Vernice", "Physical examination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Karley", "Vaccination"], ["Monte", "Take for a Walk"], ["Ruben", "Take for a Walk"]], "gt": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Ruben", "Take for a Walk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(Singer_ID) FROM singer", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT COUNT(*) FROM singer", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT Name \nFROM singer \nORDER BY Net_Worth_Millions ASC", "match": {"match": true, "result": [["Abigail Johnson"], ["Susanne Klatten"], ["Gina Rinehart"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Alice Walton"], ["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "match": {"match": true, "result": [["Abigail Johnson"], ["Susanne Klatten"], ["Gina Rinehart"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Alice Walton"], ["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT Birth_Year, Citizenship FROM singer", "match": {"match": true, "result": [[1944.0, "France"], [1948.0, "United States"], [1949.0, "United States"], [1942.0, "Chile"], [1940.0, "United States"], [1953.0, "Australia"], [1962.0, "Germany"], [1961.0, "United States"]]}}
{"result": "SELECT \"Birth_Year\", \"Citizenship\" FROM \"singer\"", "match": {"match": true, "result": [[1944.0, "France"], [1948.0, "United States"], [1949.0, "United States"], [1942.0, "Chile"], [1940.0, "United States"], [1953.0, "Australia"], [1962.0, "Germany"], [1961.0, "United States"]]}}
{"result": "SELECT Name FROM singer WHERE Citizenship != 'France'", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]]}}
{"result": "SELECT Name \nFROM singer \nWHERE Citizenship != 'France'", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]]}}
{"result": "SELECT Name \nFROM singer \nWHERE Birth_Year = 1948 \n   OR Birth_Year = 1949", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"]]}}
{"result": "SELECT Name \nFROM singer \nWHERE Birth_Year = 1948 OR Birth_Year = 1949", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "match": {"match": true, "result": [["Liliane Bettencourt"]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "match": {"match": true, "result": [["Liliane Bettencourt"]]}}
{"result": "SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship", "match": {"match": true, "result": [["Australia", 1], ["Chile", 1], ["France", 1], ["Germany", 1], ["United States", 4]]}}
{"result": "SELECT Citizenship, COUNT(*) \nFROM singer \nGROUP BY Citizenship", "match": {"match": true, "result": [["Australia", 1], ["Chile", 1], ["France", 1], ["Germany", 1], ["United States", 4]]}}
{"result": "SELECT Citizenship \nFROM singer \nGROUP BY Citizenship \nORDER BY COUNT(Citizenship) DESC \nLIMIT 1", "match": {"match": true, "result": [["United States"]]}}
{"result": "SELECT Citizenship \nFROM singer \nGROUP BY Citizenship \nORDER BY COUNT(Citizenship) DESC \nLIMIT 1", "match": {"match": true, "result": [["United States"]]}}
{"result": "SELECT Citizenship, MAX(Net_Worth_Millions) \nFROM singer \nGROUP BY Citizenship", "match": {"match": true, "result": [["Australia", 17.0], ["Chile", 17.4], ["France", 30.0], ["Germany", 14.3], ["United States", 28.8]]}}
{"result": "SELECT Citizenship, MAX (Net_Worth_Millions) FROM singer GROUP BY Citizenship", "match": {"match": true, "result": [["Australia", 17.0], ["Chile", 17.4], ["France", 30.0], ["Germany", 14.3], ["United States", 28.8]]}}
{"result": "SELECT T1.Title, T2.Name \nFROM song AS T1 \nINNER JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID;", "match": {"match": true, "result": [["Do They Know It's Christmas", "Liliane Bettencourt"], ["F**k It (I Don't Want You Back)", "Liliane Bettencourt"], ["Cha Cha Slide", "Christy Walton"], ["Call on Me", "Iris Fontbona"], ["Yeah", "Christy Walton"], ["All This Time", "Gina Rinehart"], ["Left Outside Alone", "Jacqueline Mars"], ["Mysterious Girl", "Susanne Klatten"]]}}
{"result": "SELECT T2.Title, T1.Name \nFROM singer AS T1 \nJOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID", "match": {"match": true, "result": [["Do They Know It's Christmas", "Liliane Bettencourt"], ["F**k It (I Don't Want You Back)", "Liliane Bettencourt"], ["Cha Cha Slide", "Christy Walton"], ["Call on Me", "Iris Fontbona"], ["Yeah", "Christy Walton"], ["All This Time", "Gina Rinehart"], ["Left Outside Alone", "Jacqueline Mars"], ["Mysterious Girl", "Susanne Klatten"]]}}
{"result": "SELECT DISTINCT T1.Name \nFROM singer AS T1 \nINNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID \nWHERE T2.Sales > 300000", "match": {"match": true, "result": [["Liliane Bettencourt"], ["Christy Walton"], ["Iris Fontbona"]]}}
{"result": "SELECT DISTINCT T1.Name \nFROM singer AS T1 \nJOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID \nWHERE T2.Sales > 300000", "match": {"match": true, "result": [["Liliane Bettencourt"], ["Christy Walton"], ["Iris Fontbona"]]}}
{"result": "SELECT T2.Name \nFROM song AS T1 \nJOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID \nGROUP BY T2.Singer_ID \nHAVING COUNT(T2.Singer_ID) > 1", "match": {"match": false, "result": [["Liliane Bettencourt"], ["Christy Walton"]], "gt": [["Christy Walton"], ["Liliane Bettencourt"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Name \nFROM song AS T1 \nJOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID \nGROUP BY T1.Singer_ID \nHAVING COUNT(T1.Singer_ID) > 1", "match": {"match": false, "result": [["Liliane Bettencourt"], ["Christy Walton"]], "gt": [["Christy Walton"], ["Liliane Bettencourt"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name, SUM(T2.Sales) \nFROM singer AS T1 \nINNER JOIN song AS T2 \nON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name", "match": {"match": true, "result": [["Christy Walton", 651421.0], ["Gina Rinehart", 292000.0], ["Iris Fontbona", 335000.0], ["Jacqueline Mars", 275000.0], ["Liliane Bettencourt", 1646407.0], ["Susanne Klatten", 261000.0]]}}
{"result": "SELECT T1.Name, SUM(T2.Sales) FROM singer AS T1 INNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name", "match": {"match": true, "result": [["Christy Walton", 651421.0], ["Gina Rinehart", 292000.0], ["Iris Fontbona", 335000.0], ["Jacqueline Mars", 275000.0], ["Liliane Bettencourt", 1646407.0], ["Susanne Klatten", 261000.0]]}}
{"result": "SELECT Name \nFROM singer \nWHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);", "match": {"match": true, "result": [["Alice Walton"], ["Abigail Johnson"]]}}
{"result": "SELECT T1.Name \nFROM singer AS T1 \nLEFT JOIN song AS T2 \nON T1.Singer_ID = T2.Singer_ID \nWHERE T2.Singer_ID IS NULL;", "match": {"match": true, "result": [["Alice Walton"], ["Abigail Johnson"]]}}
{"result": "SELECT Citizenship \nFROM singer \nWHERE Birth_Year < 1945 OR Birth_Year > 1955 \nGROUP BY Citizenship", "match": {"match": false, "result": [["Chile"], ["France"], ["Germany"], ["United States"]], "gt": [["United States"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Citizenship \nFROM singer \nWHERE Birth_Year < 1945 \nINTERSECT \nSELECT Citizenship \nFROM singer \nWHERE Birth_Year > 1955;", "match": {"match": true, "result": [["United States"]]}}
{"result": "SELECT COUNT(feature_id) FROM Other_Available_Features", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT T2.feature_type_name \nFROM Other_Available_Features AS T1 \nJOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code \nWHERE T1.feature_name = 'AirCon';", "match": {"match": true, "result": [["Amenity, eg Pool."]]}}
{"result": "```sql\nSELECT \n    p.property_name,\n    rp.property_type_description\nFROM \n    Properties p\nJOIN \n    Ref_Property_Types rp ON p.property_type_code = rp.property_type_code;\n```", "match": {"match": false, "result": [["park", "House, Bungalow, etc."], ["the cole", "House, Bungalow, etc."], ["prism", "Other, to be determined."], ["riverside", "Field, Meadow."], ["parc east", "Apartment, Flat, Condo, etc."], ["high line", "Shop, Retail Outlet."], ["avalon", "Shop, Retail Outlet."], ["vogue", "Apartment, Flat, Condo, etc."], ["longacre", "Apartment, Flat, Condo, etc."], ["renoir", "Apartment, Flat, Condo, etc."], ["murray hill", "Other, to be determined."], ["ten tower", "Apartment, Flat, Condo, etc."], ["chelsea", "Other, to be determined."], ["wall street", "Other, to be determined."], ["parc coliseum", "Apartment, Flat, Condo, etc."]], "gt": [["Apartment, Flat, Condo, etc."], ["Field, Meadow."], ["House, Bungalow, etc."], ["Other, to be determined."], ["Shop, Retail Outlet."]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT P.property_name \nFROM Properties P \nJOIN Other_Property_Features OF ON P.property_id = OF.property_id \nJOIN Other_Available_Features OAF ON OF.feature_id = OAF.feature_id \nWHERE P.property_name IN ('house', 'apartment') \n    AND P.room_count > 1", "match": {"match": false, "result": [], "gt": [["longacre"], ["parc coliseum"], ["parc east"], ["park"], ["renoir"], ["ten tower"], ["the cole"], ["vogue"]], "error": "Query result does not match ground truth."}}

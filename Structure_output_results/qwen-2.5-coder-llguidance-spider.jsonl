
{"result": "```sql\nSELECT COUNT(*) FROM singer;\n```", "match": {"match": true, "result": [[6]]}}
{"result": "```sql\nSELECT COUNT(*) FROM singer;\n```", "match": {"match": true, "result": [[6]]}}
{"result": "```sql\nSELECT Name, Country, Age FROM singer ORDER BY Age DESC;\n```", "match": {"match": true, "result": [["Joe Sharp", "Netherlands", 52], ["John Nizinik", "France", 43], ["Rose White", "France", 41], ["Timbaland", "United States", 32], ["Justin Brown", "France", 29], ["Tribal King", "France", 25]]}}
{"result": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC", "match": {"match": true, "result": [["Joe Sharp", "Netherlands", 52], ["John Nizinik", "France", 43], ["Rose White", "France", 41], ["Timbaland", "United States", 32], ["Justin Brown", "France", 29], ["Tribal King", "France", 25]]}}
{"result": "SELECT min(Age) ,  max(Age) ,  avg(Age) FROM singer WHERE Country = 'France'", "match": {"match": false, "result": [[25, 43, 34.5]], "gt": [[34.5, 25, 43]], "error": "Query result does not match ground truth."}}
{"result": "SELECT min(age) ,  max(age) ,  avg(age) FROM singer WHERE country  =  'France'", "match": {"match": false, "result": [[25, 43, 34.5]], "gt": [[34.5, 25, 43]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Song_Name, Song_release_year FROM singer ORDER BY Age ASC LIMIT 1", "match": {"match": true, "result": [["Love", "2016"]]}}
{"result": "SELECT Song_Name, Song_release_year FROM singer ORDER BY Age ASC LIMIT 1", "match": {"match": true, "result": [["Love", "2016"]]}}
{"result": "SELECT DISTINCT Country FROM singer WHERE Age > 20", "match": {"match": true, "result": [["Netherlands"], ["United States"], ["France"]]}}
{"result": "SELECT DISTINCT Country FROM singer WHERE Age > 20", "match": {"match": true, "result": [["Netherlands"], ["United States"], ["France"]]}}
{"result": "SELECT Country ,  COUNT(*) FROM singer GROUP BY Country", "match": {"match": true, "result": [["France", 4], ["Netherlands", 1], ["United States", 1]]}}
{"result": "SELECT Country ,  COUNT(*) FROM singer GROUP BY Country", "match": {"match": true, "result": [["France", 4], ["Netherlands", 1], ["United States", 1]]}}
{"result": "SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)", "match": {"match": true, "result": [["You"], ["Sun"], ["Gentleman"]]}}
{"result": "SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)", "match": {"match": true, "result": [["You"], ["Sun"], ["Gentleman"]]}}
{"result": "SELECT LOCATION ,  Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000", "match": {"match": true, "result": []}}
{"result": "```sql\nSELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;\n```", "match": {"match": true, "result": []}}
{"result": "SELECT max(capacity) ,  avg(capacity) FROM stadium", "match": {"match": false, "result": [[52500, 10621.666666666666]], "gt": [[52500, 730]], "error": "Query result does not match ground truth."}}
{"result": "SELECT avg(Capacity) ,  max(Capacity) FROM stadium", "match": {"match": true, "result": [[10621.666666666666, 52500]]}}
{"result": "SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1", "match": {"match": true, "result": [["Stark's Park", 10104]]}}
{"result": "SELECT name ,  capacity FROM stadium WHERE average  =  (SELECT max(average) FROM stadium)", "match": {"match": true, "result": [["Stark's Park", 10104]]}}
{"result": "SELECT COUNT(*) FROM concert WHERE YEAR IN ('2014', '2015')", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT T2.Name ,  COUNT(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID GROUP BY T2.Name", "match": {"match": false, "result": [["Balmoor", 1], ["Glebe Park", 1], ["Recreation Park", 1], ["Somerset Park", 2], ["Stark's Park", 1]], "gt": [["Stark's Park", 1], ["Glebe Park", 1], ["Somerset Park", 2], ["Recreation Park", 1], ["Balmoor", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name ,  COUNT(*) FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Stadium_ID", "match": {"match": false, "result": [["Stark's Park", 1], ["Somerset Park", 2], ["Recreation Park", 1], ["Balmoor", 1], ["Glebe Park", 1]], "gt": [["Stark's Park", 1], ["Glebe Park", 1], ["Somerset Park", 2], ["Recreation Park", 1], ["Balmoor", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T1.stadium_id ORDER BY count(*) DESC LIMIT 1", "match": {"match": true, "result": [["Somerset Park", 11998]]}}
{"result": "```sql\nSELECT s.Name, s.Capacity\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.Year > '2013'\nGROUP BY s.Stadium_ID\nORDER BY COUNT(c.concert_ID) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [["Somerset Park", 11998]]}}
{"result": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1", "match": {"match": true, "result": [["2015"]]}}
{"result": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1", "match": {"match": true, "result": [["2015"]]}}
{"result": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)", "match": {"match": true, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"]]}}
{"result": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)", "match": {"match": true, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"]]}}
{"result": "SELECT Country FROM singer WHERE Age > 40 INTERSECT SELECT Country FROM singer WHERE Age < 30", "match": {"match": true, "result": [["France"]]}}
{"result": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014')", "match": {"match": false, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"], ["Recreation Park"], ["Balmoor"]], "gt": [["Balmoor"], ["Bayview Stadium"], ["Forthbank Stadium"], ["Gayfield Park"], ["Hampden Park"], ["Recreation Park"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014')", "match": {"match": false, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"], ["Recreation Park"], ["Balmoor"]], "gt": [["Balmoor"], ["Bayview Stadium"], ["Forthbank Stadium"], ["Gayfield Park"], ["Hampden Park"], ["Recreation Park"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT c.concert_Name, c.Theme, COUNT(sc.Singer_ID) AS Number_of_Singers\nFROM concert c\nLEFT JOIN singer_in_concert sc ON c.concert_ID = sc.concert_ID\nGROUP BY c.concert_ID, c.concert_Name, c.Theme;\n```", "match": {"match": true, "result": [["Auditions", "Free choice", 3], ["Super bootcamp", "Free choice 2", 2], ["Home Visits", "Bleeding Love", 1], ["Week 1", "Wide Awake", 1], ["Week 1", "Happy Tonight", 2], ["Week 2", "Party All Night", 1]]}}
{"result": "SELECT T2.concert_Name ,  T2.theme ,  COUNT(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_ID  =  T2.concert_ID GROUP BY T2.concert_ID", "match": {"match": true, "result": [["Auditions", "Free choice", 3], ["Super bootcamp", "Free choice 2", 2], ["Home Visits", "Bleeding Love", 1], ["Week 1", "Wide Awake", 1], ["Week 1", "Happy Tonight", 2], ["Week 2", "Party All Night", 1]]}}
{"result": "SELECT s.Name, COUNT(sc.concert_ID) AS Number_of_concerts \nFROM singer s \nJOIN singer_in_concert sc ON s.Singer_ID = sc.Singer_ID \nGROUP BY s.Name", "match": {"match": false, "result": [["John Nizinik", 2], ["Justin Brown", 3], ["Rose White", 1], ["Timbaland", 2], ["Tribal King", 2]], "gt": [["Timbaland", 2], ["Justin Brown", 3], ["Rose White", 1], ["John Nizinik", 2], ["Tribal King", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Name ,  COUNT(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T2.Name", "match": {"match": false, "result": [["John Nizinik", 2], ["Justin Brown", 3], ["Rose White", 1], ["Timbaland", 2], ["Tribal King", 2]], "gt": [["Timbaland", 2], ["Justin Brown", 3], ["Rose White", 1], ["John Nizinik", 2], ["Tribal King", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Name FROM concert AS T1 JOIN singer AS T2 ON T1.concert_ID = T2.Singer_ID WHERE T1.Year = '2014'", "match": {"match": false, "result": [["Joe Sharp"], ["Timbaland"], ["Rose White"]], "gt": [["Timbaland"], ["Justin Brown"], ["John Nizinik"], ["Justin Brown"], ["Tribal King"], ["Rose White"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Name FROM concert AS T1 JOIN singer AS T2 ON T1.concert_ID = T2.Singer_ID WHERE T1.Year = '2014'", "match": {"match": false, "result": [["Joe Sharp"], ["Timbaland"], ["Rose White"]], "gt": [["Timbaland"], ["Justin Brown"], ["John Nizinik"], ["Justin Brown"], ["Tribal King"], ["Rose White"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'\n```", "match": {"match": true, "result": [["Justin Brown", "France"]]}}
{"result": "SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'", "match": {"match": true, "result": [["Justin Brown", "France"]]}}
{"result": "SELECT T2.Name ,  T2.Location FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID WHERE T1.Year  =  2014 INTERSECT SELECT T2.Name ,  T2.Location FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID WHERE T1.Year  =  2015", "match": {"match": true, "result": [["Somerset Park", "Ayr United"]]}}
{"result": "SELECT T1.Name, T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year IN ('2014', '2015') GROUP BY T1.Stadium_ID HAVING COUNT(DISTINCT T2.Year) = 2", "match": {"match": true, "result": [["Somerset Park", "Ayr United"]]}}
{"result": "```sql\nSELECT COUNT(*) \nFROM concert \nJOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID \nWHERE stadium.Capacity = (SELECT MAX(Capacity) FROM stadium);\n```", "match": {"match": true, "result": [[0]]}}
{"result": "```sql\nSELECT COUNT(*) \nFROM concert \nJOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID \nWHERE stadium.Capacity = (SELECT MAX(Capacity) FROM stadium);\n```", "match": {"match": true, "result": [[0]]}}
{"result": "```sql\nSELECT COUNT(*) \nFROM Pets \nWHERE weight > 10;\n```", "match": {"match": true, "result": [[2]]}}
{"result": "```sql\nSELECT COUNT(*) FROM Pets WHERE weight > 10;\n```", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT MIN(weight) FROM Pets WHERE PetType = 'Dog'", "match": {"match": false, "result": [[null]], "gt": [[9.3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MIN(weight) FROM Pets WHERE PetType = 'dog';", "match": {"match": true, "result": [[9.3]]}}
{"result": "```sql\nSELECT PetType, MAX(weight) AS MaxWeight\nFROM Pets\nGROUP BY PetType;\n```", "match": {"match": false, "result": [["cat", 12.0], ["dog", 13.4]], "gt": [[12.0, "cat"], [13.4, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT PetType, MAX(Weight) FROM Pets GROUP BY PetType;", "match": {"match": false, "result": [["cat", 12.0], ["dog", 13.4]], "gt": [[12.0, "cat"], [13.4, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT COUNT(*) \nFROM Student S \nJOIN Has_Pet HP ON S.StuID = HP.StuID \nWHERE S.Age > 20;\n```", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(*) \nFROM Has_Pet \nJOIN Student ON Has_Pet.StuID = Student.StuID \nWHERE Student.Age > 20", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(*) \nFROM Student AS S \nJOIN Has_Pet AS HP ON S.StuID = HP.StuID \nJOIN Pets AS P ON HP.PetID = P.PetID \nWHERE S.Sex = 'F' AND P.PetType = 'dog';", "match": {"match": true, "result": [[2]]}}
{"result": "```sql\nSELECT COUNT(*) \nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nJOIN Pets p ON hp.PetID = p.PetID\nWHERE s.Sex = 'F' AND p.PetType = 'dog';\n```", "match": {"match": true, "result": [[2]]}}
{"result": "```sql\nSELECT COUNT(DISTINCT PetType) FROM Pets;\n```", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(DISTINCT PetType) FROM Pets", "match": {"match": true, "result": [[2]]}}
{"result": "```sql\nSELECT DISTINCT s.Fname\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nJOIN Pets p ON hp.PetID = p.PetID\nWHERE p.PetType = 'cat' OR p.PetType = 'dog';\n```", "match": {"match": true, "result": [["Linda"], ["Tracy"]]}}
{"result": "```sql\nSELECT DISTINCT s.Fname\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nJOIN Pets p ON hp.PetID = p.PetID\nWHERE p.PetType = 'cat' OR p.PetType = 'dog';\n```", "match": {"match": true, "result": [["Linda"], ["Tracy"]]}}
{"result": "```sql\nSELECT S.Fname \nFROM Student S \nWHERE EXISTS (\n    SELECT 1 \n    FROM Has_Pet HP \n    JOIN Pets P ON HP.PetID = P.PetID \n    WHERE HP.StuID = S.StuID AND P.PetType = 'cat'\n) \nAND EXISTS (\n    SELECT 1 \n    FROM Has_Pet HP \n    JOIN Pets P ON HP.PetID = P.PetID \n    WHERE HP.StuID = S.StuID AND P.PetType = 'dog'\n);\n```", "match": {"match": true, "result": []}}
{"result": "SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' INTERSECT SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'dog'", "match": {"match": true, "result": []}}
{"result": "```sql\nSELECT Major, Age\nFROM Student\nWHERE StuID NOT IN (\n    SELECT StuID\n    FROM Has_Pet\n    JOIN Pets ON Has_Pet.PetID = Pets.PetID\n    WHERE PetType = 'cat'\n);\n```", "match": {"match": true, "result": [[600, 19], [600, 21], [600, 20], [600, 26], [600, 18], [600, 18], [600, 20], [600, 19], [600, 17], [600, 22], [600, 20], [600, 18], [600, 16], [600, 17], [600, 27], [600, 20], [600, 18], [520, 22], [520, 19], [540, 17], [520, 20], [540, 18], [520, 18], [520, 19], [520, 18], [550, 20], [100, 17], [550, 21], [550, 20], [550, 20], [550, 18], [50, 18], [50, 26]]}}
{"result": "SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))", "match": {"match": true, "result": [[600, 19], [600, 21], [600, 20], [600, 26], [600, 18], [600, 18], [600, 20], [600, 19], [600, 17], [600, 22], [600, 20], [600, 18], [600, 16], [600, 17], [600, 27], [600, 20], [600, 18], [520, 22], [520, 19], [540, 17], [520, 20], [540, 18], [520, 18], [520, 19], [520, 18], [550, 20], [100, 17], [550, 21], [550, 20], [550, 20], [550, 18], [50, 18], [50, 26]]}}
{"result": "SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))", "match": {"match": true, "result": [[1002], [1003], [1004], [1005], [1006], [1007], [1008], [1009], [1010], [1011], [1012], [1014], [1015], [1016], [1017], [1018], [1019], [1020], [1021], [1022], [1023], [1024], [1025], [1026], [1027], [1028], [1029], [1030], [1031], [1032], [1033], [1034], [1035]]}}
{"result": "```sql\nSELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat';\n```", "match": {"match": true, "result": [[1002], [1003], [1004], [1005], [1006], [1007], [1008], [1009], [1010], [1011], [1012], [1014], [1015], [1016], [1017], [1018], [1019], [1020], [1021], [1022], [1023], [1024], [1025], [1026], [1027], [1028], [1029], [1030], [1031], [1032], [1033], [1034], [1035]]}}
{"result": "```sql\nSELECT S.Fname, S.Age\nFROM Student S\nWHERE EXISTS (\n    SELECT 1\n    FROM Has_Pet HP\n    JOIN Pets P ON HP.PetID = P.PetID\n    WHERE HP.StuID = S.StuID AND P.PetType = 'dog'\n)\nAND NOT EXISTS (\n    SELECT 1\n    FROM Has_Pet HP\n    JOIN Pets P ON HP.PetID = P.PetID\n    WHERE HP.StuID = S.StuID AND P.PetType = 'cat'\n);\n```", "match": {"match": false, "result": [["Tracy", 19]], "gt": [["Tracy", 19], ["Tracy", 19]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.PetType  =  'dog' EXCEPT SELECT DISTINCT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.PetType  =  'cat'", "match": {"match": false, "result": [["Tracy"]], "gt": [["Tracy", 19], ["Tracy", 19]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT PetType, weight FROM Pets ORDER BY pet_age ASC LIMIT 1;\n```", "match": {"match": true, "result": [["dog", 9.3]]}}
{"result": "SELECT PetType, weight FROM Pets ORDER BY pet_age ASC LIMIT 1", "match": {"match": true, "result": [["dog", 9.3]]}}
{"result": "```sql\nSELECT PetID, weight \nFROM Pets \nWHERE pet_age > 1;\n```", "match": {"match": true, "result": [[2001, 12.0], [2002, 13.4]]}}
{"result": "SELECT PetID, weight FROM Pets WHERE pet_age > 1", "match": {"match": true, "result": [[2001, 12.0], [2002, 13.4]]}}
{"result": "```sql\nSELECT PetType, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age\nFROM Pets\nGROUP BY PetType;\n```", "match": {"match": false, "result": [["cat", 3.0, 3], ["dog", 1.5, 2]], "gt": [[3.0, 3, "cat"], [1.5, 2, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Avg(pet_age) ,  Max(pet_age) ,  pet_type FROM Pets GROUP BY pet_type", "match": {"match": false, "error": "Query execution failed with error: no such column: pet_type"}}
{"result": "```sql\nSELECT PetType, AVG(weight) AS AverageWeight\nFROM Pets\nGROUP BY PetType;\n```", "match": {"match": false, "result": [["cat", 12.0], ["dog", 11.350000000000001]], "gt": [[12.0, "cat"], [11.350000000000001, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT PetType, AVG(weight) AS AvgWeight\nFROM Pets\nGROUP BY PetType;\n```", "match": {"match": false, "result": [["cat", 12.0], ["dog", 11.350000000000001]], "gt": [[12.0, "cat"], [11.350000000000001, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT S.Fname, S.Age\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID;\n```", "match": {"match": false, "result": [["Linda", 18], ["Tracy", 19], ["Tracy", 19]], "gt": [["Linda", 18], ["Tracy", 19]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID", "match": {"match": true, "result": [["Linda", 18], ["Tracy", 19]]}}
{"result": "```sql\nSELECT PetID\nFROM Has_Pet\nJOIN Student ON Has_Pet.StuID = Student.StuID\nWHERE Student.LName = 'Smith';\n```", "match": {"match": true, "result": [[2001]]}}
{"result": "SELECT T2.PetID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T1.LName = 'Smith'", "match": {"match": true, "result": [[2001]]}}
{"result": "```sql\nSELECT StuID, COUNT(PetID) AS NumberOfPets\nFROM Has_Pet\nGROUP BY StuID;\n```", "match": {"match": false, "result": [[1001, 1], [1002, 2]], "gt": [[1, 1001], [2, 1002]], "error": "Query result does not match ground truth."}}
{"result": "SELECT StuID, COUNT(PetID) FROM Has_Pet GROUP BY StuID", "match": {"match": false, "result": [[1001, 1], [1002, 2]], "gt": [[1, 1001], [2, 1002]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT s.Fname, s.Sex\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nGROUP BY s.StuID\nHAVING COUNT(hp.PetID) > 1;\n```", "match": {"match": true, "result": [["Tracy", "F"]]}}
{"result": "```sql\nSELECT S.Fname, S.Sex\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nGROUP BY S.StuID\nHAVING COUNT(HP.PetID) > 1;\n```", "match": {"match": true, "result": [["Tracy", "F"]]}}
{"result": "```sql\nSELECT S.LName\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nJOIN Pets P ON HP.PetID = P.PetID\nWHERE P.PetType = 'cat' AND P.pet_age = 3;\n```", "match": {"match": true, "result": [["Smith"]]}}
{"result": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.StuID = T2.StuID JOIN pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' AND T3.pet_age = 3", "match": {"match": true, "result": [["Smith"]]}}
{"result": "SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)", "match": {"match": true, "result": [[19.625]]}}
{"result": "SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)", "match": {"match": true, "result": [[19.625]]}}
{"result": "SELECT COUNT(*) FROM employee", "match": {"match": true, "result": [[10]]}}
{"result": "```sql\nSELECT COUNT(*) FROM employee;\n```", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT Name FROM employee ORDER BY Age ASC", "match": {"match": true, "result": [["George Chuter"], ["Andrew Sheridan"], ["Lee Mears"], ["Tim Payne"], ["Matt Stevens"], ["Jason Hobson"], ["Steve Borthwick"], ["Louis Deacon"], ["Phil Vickery"], ["Mark Regan"]]}}
{"result": "SELECT Name FROM employee ORDER BY Age ASC", "match": {"match": true, "result": [["George Chuter"], ["Andrew Sheridan"], ["Lee Mears"], ["Tim Payne"], ["Matt Stevens"], ["Jason Hobson"], ["Steve Borthwick"], ["Louis Deacon"], ["Phil Vickery"], ["Mark Regan"]]}}
{"result": "SELECT city ,  COUNT(*) FROM employee GROUP BY city", "match": {"match": false, "result": [["Bath", 3], ["Bristol", 3], ["Leicester", 1], ["Sale", 1], ["Wasps", 2]], "gt": [[3, "Bath"], [3, "Bristol"], [1, "Leicester"], [1, "Sale"], [2, "Wasps"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT City, COUNT(*) FROM employee GROUP BY City", "match": {"match": false, "result": [["Bath", 3], ["Bristol", 3], ["Leicester", 1], ["Sale", 1], ["Wasps", 2]], "gt": [[3, "Bath"], [3, "Bristol"], [1, "Leicester"], [1, "Sale"], [2, "Wasps"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1", "match": {"match": true, "result": [["Bath"]]}}
{"result": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING COUNT(*)  >  1", "match": {"match": true, "result": [["Bath"]]}}
{"result": "SELECT Location ,  COUNT(*) FROM shop GROUP BY Location", "match": {"match": false, "result": [["Espoo", 1], ["Helsinki", 1], ["Jakobstad", 1], ["Kotka", 1], ["Kuopio", 1], ["Lahti", 1], ["Mariehamn", 1], ["Turku", 1], ["Valkeakoski", 1]], "gt": [[1, "Espoo"], [1, "Helsinki"], [1, "Jakobstad"], [1, "Kotka"], [1, "Kuopio"], [1, "Lahti"], [1, "Mariehamn"], [1, "Turku"], [1, "Valkeakoski"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT LOCATION ,  COUNT(*) FROM shop GROUP BY LOCATION", "match": {"match": false, "result": [["Espoo", 1], ["Helsinki", 1], ["Jakobstad", 1], ["Kotka", 1], ["Kuopio", 1], ["Lahti", 1], ["Mariehamn", 1], ["Turku", 1], ["Valkeakoski", 1]], "gt": [[1, "Espoo"], [1, "Helsinki"], [1, "Jakobstad"], [1, "Kotka"], [1, "Kuopio"], [1, "Lahti"], [1, "Mariehamn"], [1, "Turku"], [1, "Valkeakoski"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT manager_name, district FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop)", "match": {"match": true, "result": [["Ilkka M\u00e4kel\u00e4", "Lahden Stadion"]]}}
{"result": "SELECT T1.Manager_name ,  T1.District FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID  =  T2.Shop_ID ORDER BY T1.Number_products DESC LIMIT 1", "match": {"match": true, "result": [["Ilkka M\u00e4kel\u00e4", "Lahden Stadion"]]}}
{"result": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "match": {"match": true, "result": [[1600, 15000]]}}
{"result": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "match": {"match": true, "result": [[1600, 15000]]}}
{"result": "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC", "match": {"match": true, "result": [["FC Lahti", "Lahti", "Lahden Stadion"], ["HJK", "Helsinki", "Finnair Stadium"], ["FC Inter", "Turku", "Veritas Stadion"], ["FC Honka", "Espoo", "Tapiolan Urheilupuisto"], ["FF Jaro", "Jakobstad", "Jakobstads Centralplan"], ["FC KooTeePee", "Kotka", "Arto Tolsa Areena"], ["FC Haka", "Valkeakoski", "Tehtaan kentt\u00e4"], ["KuPS", "Kuopio", "Magnum Areena"], ["IFK Mariehamn", "Mariehamn", "Wikl\u00f6f Holding Arena"]]}}
{"result": "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC", "match": {"match": true, "result": [["FC Lahti", "Lahti", "Lahden Stadion"], ["HJK", "Helsinki", "Finnair Stadium"], ["FC Inter", "Turku", "Veritas Stadion"], ["FC Honka", "Espoo", "Tapiolan Urheilupuisto"], ["FF Jaro", "Jakobstad", "Jakobstads Centralplan"], ["FC KooTeePee", "Kotka", "Arto Tolsa Areena"], ["FC Haka", "Valkeakoski", "Tehtaan kentt\u00e4"], ["KuPS", "Kuopio", "Magnum Areena"], ["IFK Mariehamn", "Mariehamn", "Wikl\u00f6f Holding Arena"]]}}
{"result": "```sql\nSELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);\n```", "match": {"match": true, "result": [["HJK"], ["FC Inter"], ["FC Lahti"]]}}
{"result": "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)", "match": {"match": true, "result": [["HJK"], ["FC Inter"], ["FC Lahti"]]}}
{"result": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T1.Employee_ID ORDER BY COUNT(T2.Year_awarded) DESC LIMIT 1", "match": {"match": true, "result": [["George Chuter"]]}}
{"result": "SELECT T2.Name FROM evaluation AS T1 JOIN employee AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T1.Employee_ID, T2.Name ORDER BY COUNT(T2.Employee_ID) DESC LIMIT 1", "match": {"match": true, "result": [["George Chuter"]]}}
{"result": "SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID ORDER BY ev.Bonus DESC LIMIT 1", "match": {"match": true, "result": [["Louis Deacon"]]}}
{"result": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.Bonus DESC LIMIT 1", "match": {"match": true, "result": [["Louis Deacon"]]}}
{"result": "SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "match": {"match": true, "result": [["Mark Regan"], ["Tim Payne"], ["Andrew Sheridan"], ["Phil Vickery"], ["Steve Borthwick"]]}}
{"result": "SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "match": {"match": true, "result": [["Mark Regan"], ["Tim Payne"], ["Andrew Sheridan"], ["Phil Vickery"], ["Steve Borthwick"]]}}
{"result": "SELECT T2.Name FROM hiring AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1", "match": {"match": true, "result": [["FC Haka"]]}}
{"result": "SELECT T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1", "match": {"match": true, "result": [["FC Haka"]]}}
{"result": "SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)", "match": {"match": true, "result": [["FC Honka"], ["KuPS"], ["IFK Mariehamn"]]}}
{"result": "SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)", "match": {"match": true, "result": [["FC Honka"], ["KuPS"], ["IFK Mariehamn"]]}}
{"result": "SELECT COUNT(*) ,  T2.Name FROM hiring AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID", "match": {"match": false, "result": [[2, "FC Haka"], [1, "HJK"], [1, "FC Inter"], [1, "FF Jaro"], [1, "FC KooTeePee"], [1, "FC Lahti"]], "gt": [[2, "FC Haka"], [1, "FC Inter"], [1, "FC KooTeePee"], [1, "FC Lahti"], [1, "FF Jaro"], [1, "HJK"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT s.Name, COUNT(h.Employee_ID) AS Number_of_Employees\nFROM shop s\nJOIN hiring h ON s.Shop_ID = h.Shop_ID\nGROUP BY s.Shop_ID, s.Name;\n```", "match": {"match": false, "result": [["FC Haka", 2], ["HJK", 1], ["FC Inter", 1], ["FF Jaro", 1], ["FC KooTeePee", 1], ["FC Lahti", 1]], "gt": [[2, "FC Haka"], [1, "FC Inter"], [1, "FC KooTeePee"], [1, "FC Lahti"], [1, "FF Jaro"], [1, "HJK"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT sum(Bonus) FROM evaluation", "match": {"match": true, "result": [[19500.0]]}}
{"result": "SELECT sum(Bonus) FROM evaluation", "match": {"match": true, "result": [[19500.0]]}}
{"result": "SELECT * FROM hiring", "match": {"match": true, "result": [[1, 1, "2009", "T"], [1, 2, "2003", "T"], [8, 3, "2011", "F"], [4, 4, "2012", "T"], [5, 5, "2013", "T"], [2, 6, "2010", "F"], [6, 7, "2008", "T"]]}}
{"result": "SELECT * FROM hiring", "match": {"match": true, "result": [[1, 1, "2009", "T"], [1, 2, "2003", "T"], [8, 3, "2011", "F"], [4, 4, "2012", "T"], [5, 5, "2013", "T"], [2, 6, "2010", "F"], [6, 7, "2008", "T"]]}}
{"result": "SELECT District FROM shop WHERE Number_products  <  3000 INTERSECT SELECT District FROM shop WHERE Number_products  >  10000", "match": {"match": true, "result": []}}
{"result": "SELECT District FROM shop WHERE Number_products < 3000 INTERSECT SELECT District FROM shop WHERE Number_products > 10000", "match": {"match": true, "result": []}}
{"result": "SELECT COUNT(DISTINCT LOCATION) FROM shop", "match": {"match": true, "result": [[9]]}}
{"result": "```sql\nSELECT COUNT(DISTINCT Location) FROM shop\n```", "match": {"match": true, "result": [[9]]}}
{"result": "```sql\nSELECT COUNT(Document_ID) AS Total_Documents\nFROM Documents;\n```", "match": {"match": true, "result": [[15]]}}
{"result": "```sql\nSELECT COUNT(*) AS Total_Documents FROM Documents;\n```", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT Document_ID, Document_Name, Document_Description FROM Documents", "match": {"match": true, "result": [[0, "Introduction of OS", "n"], [1, "Understanding DB", "y"], [3, "Summer Show", "u"], [76, "Robbin CV", "y"], [80, "Welcome to NY", "h"], [82, "Data base", "w"], [2394, "Customer reviews", "y"], [3830, "Do not panic", "k"], [33930, "How Google people work", "z"], [50123, "Learning French", "r"], [651512, "How to write a CV", "f"], [801801, "How to read a book", "w"], [3540024, "Palm reading", "y"], [16514113, "A history of Arts", "h"], [385906526, "About Korea", "b"]]}}
{"result": "SELECT Document_ID, Document_Name, Document_Description FROM Documents;", "match": {"match": true, "result": [[0, "Introduction of OS", "n"], [1, "Understanding DB", "y"], [3, "Summer Show", "u"], [76, "Robbin CV", "y"], [80, "Welcome to NY", "h"], [82, "Data base", "w"], [2394, "Customer reviews", "y"], [3830, "Do not panic", "k"], [33930, "How Google people work", "z"], [50123, "Learning French", "r"], [651512, "How to write a CV", "f"], [801801, "How to read a book", "w"], [3540024, "Palm reading", "y"], [16514113, "A history of Arts", "h"], [385906526, "About Korea", "b"]]}}
{"result": "SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'", "match": {"match": true, "result": [["Data base", 11], ["How to read a book", 4]]}}
{"result": "SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'", "match": {"match": true, "result": [["Data base", 11], ["How to read a book", 4]]}}
{"result": "SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'", "match": {"match": true, "result": [[76, 20, "y"]]}}
{"result": "```sql\nSELECT Document_ID, Template_ID, Document_Description\nFROM Documents\nWHERE Document_Name = 'Robbin CV';\n```", "match": {"match": true, "result": [[76, 20, "y"]]}}
{"result": "SELECT COUNT(DISTINCT Template_ID) FROM Documents", "match": {"match": true, "result": [[12]]}}
{"result": "```sql\nSELECT COUNT(DISTINCT Template_ID) AS Number_of_Different_Templates\nFROM Documents;\n```", "match": {"match": true, "result": [[12]]}}
{"result": "```sql\nSELECT COUNT(Documents.Document_ID)\nFROM Documents\nJOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Templates.Template_Type_Code = 'PPT';\n```", "match": {"match": true, "result": [[3]]}}
{"result": "```sql\nSELECT COUNT(Documents.Document_ID)\nFROM Documents\nJOIN Templates ON Documents.Template_ID = Templates.Template_ID\nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Ref_Template_Types.Template_Type_Description = 'PPT';\n```", "match": {"match": false, "result": [[0]], "gt": [[3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Template_ID, COUNT(Document_ID) as Number_of_Documents FROM Documents GROUP BY Template_ID", "match": {"match": true, "result": [[1, 1], [4, 1], [6, 1], [7, 1], [8, 1], [10, 1], [11, 2], [14, 2], [20, 1], [21, 1], [22, 1], [25, 2]]}}
{"result": "SELECT Template_ID, COUNT(*) as Usage_Count\nFROM Documents\nGROUP BY Template_ID;", "match": {"match": true, "result": [[1, 1], [4, 1], [6, 1], [7, 1], [8, 1], [10, 1], [11, 2], [14, 2], [20, 1], [21, 1], [22, 1], [25, 2]]}}
{"result": "SELECT T1.Template_ID, T1.Template_Type_Code \nFROM Templates AS T1 \nJOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID \nGROUP BY T1.Template_ID, T1.Template_Type_Code \nORDER BY COUNT(T2.Document_ID) DESC \nLIMIT 1", "match": {"match": false, "result": [[11, "BK"]], "gt": [[25, "PP"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Template_ID, T1.Template_Type_Code \nFROM Templates AS T1 \nJOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID \nGROUP BY T1.Template_ID, T1.Template_Type_Code \nORDER BY COUNT(T2.Document_ID) DESC \nLIMIT 1", "match": {"match": false, "result": [[11, "BK"]], "gt": [[25, "PP"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(DISTINCT Document_ID) > 1", "match": {"match": true, "result": [[11], [14], [25]]}}
{"result": "SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) > 1", "match": {"match": true, "result": [[11], [14], [25]]}}
{"result": "SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)", "match": {"match": true, "result": [[0], [9], [15], [16], [18], [19], [23], [24]]}}
{"result": "SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)", "match": {"match": true, "result": [[0], [9], [15], [16], [18], [19], [23], [24]]}}
{"result": "```sql\nSELECT COUNT(*) FROM Templates;\n```", "match": {"match": true, "result": [[20]]}}
{"result": "```sql\nSELECT COUNT(*) AS Total_Templates FROM Templates;\n```", "match": {"match": true, "result": [[20]]}}
{"result": "```sql\nSELECT Template_ID, Version_Number, Template_Type_Code\nFROM Templates;\n```", "match": {"match": true, "result": [[0, 5, "PP"], [1, 9, "PP"], [4, 4, "BK"], [6, 2, "PPT"], [7, 8, "PPT"], [8, 3, "BK"], [9, 2, "BK"], [10, 1, "PPT"], [11, 6, "BK"], [14, 7, "AD"], [15, 9, "CV"], [16, 5, "CV"], [18, 5, "PP"], [19, 7, "AD"], [20, 6, "BK"], [21, 9, "AD"], [22, 0, "PP"], [23, 2, "BK"], [24, 8, "PP"], [25, 5, "PP"]]}}
{"result": "```sql\nSELECT Template_ID, Version_Number, Template_Type_Code \nFROM Templates;\n```", "match": {"match": true, "result": [[0, 5, "PP"], [1, 9, "PP"], [4, 4, "BK"], [6, 2, "PPT"], [7, 8, "PPT"], [8, 3, "BK"], [9, 2, "BK"], [10, 1, "PPT"], [11, 6, "BK"], [14, 7, "AD"], [15, 9, "CV"], [16, 5, "CV"], [18, 5, "PP"], [19, 7, "AD"], [20, 6, "BK"], [21, 9, "AD"], [22, 0, "PP"], [23, 2, "BK"], [24, 8, "PP"], [25, 5, "PP"]]}}
{"result": "```sql\nSELECT DISTINCT Template_Type_Code FROM Templates;\n```", "match": {"match": true, "result": [["PP"], ["BK"], ["PPT"], ["AD"], ["CV"]]}}
{"result": "```sql\nSELECT DISTINCT Template_Type_Code FROM Ref_Template_Types;\n```", "match": {"match": false, "result": [["AD"], ["BK"], ["CV"], ["PP"], ["PPT"]], "gt": [["PP"], ["BK"], ["PPT"], ["AD"], ["CV"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT Template_ID\nFROM Templates\nWHERE Template_Type_Code IN ('PP', 'PPT');\n```", "match": {"match": true, "result": [[0], [1], [6], [7], [10], [18], [22], [24], [25]]}}
{"result": "SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')", "match": {"match": true, "result": [[0], [1], [6], [7], [10], [18], [22], [24], [25]]}}
{"result": "```sql\nSELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';\n```", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5", "match": {"match": true, "result": [[9, "PP"], [8, "PPT"], [6, "BK"], [7, "AD"], [9, "CV"], [7, "AD"], [6, "BK"], [9, "AD"], [8, "PP"]]}}
{"result": "```sql\nSELECT Version_Number, Template_Type_Code \nFROM Templates \nWHERE Version_Number > 5;\n```", "match": {"match": true, "result": [[9, "PP"], [8, "PPT"], [6, "BK"], [7, "AD"], [9, "CV"], [7, "AD"], [6, "BK"], [9, "AD"], [8, "PP"]]}}
{"result": "```sql\nSELECT Template_Type_Code, COUNT(*) AS Number_of_Templates\nFROM Templates\nGROUP BY Template_Type_Code;\n```", "match": {"match": true, "result": [["AD", 3], ["BK", 6], ["CV", 2], ["PP", 6], ["PPT", 3]]}}
{"result": "SELECT Template_Type_Code, COUNT(*) AS Number_of_Templates\nFROM Templates\nGROUP BY Template_Type_Code", "match": {"match": true, "result": [["AD", 3], ["BK", 6], ["CV", 2], ["PP", 6], ["PPT", 3]]}}
{"result": "```sql\nSELECT Template_Type_Code \nFROM Templates \nGROUP BY Template_Type_Code \nORDER BY COUNT(*) DESC \nLIMIT 1;\n```", "match": {"match": true, "result": [["PP"]]}}
{"result": "```sql\nSELECT Template_Type_Code \nFROM Templates \nGROUP BY Template_Type_Code \nORDER BY COUNT(*) DESC \nLIMIT 1;\n```", "match": {"match": true, "result": [["PP"]]}}
{"result": "```sql\nSELECT Template_Type_Code\nFROM Templates\nGROUP BY Template_Type_Code\nHAVING COUNT(*) < 3;\n```", "match": {"match": true, "result": [["CV"]]}}
{"result": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) < 3", "match": {"match": true, "result": [["CV"]]}}
{"result": "```sql\nSELECT MIN(Version_Number), Template_Type_Code\nFROM Templates\nGROUP BY Template_Type_Code;\n```", "match": {"match": false, "result": [[7, "AD"], [2, "BK"], [5, "CV"], [0, "PP"], [1, "PPT"]], "gt": [[0, "PP"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT MIN(Version_Number), Template_Type_Code\nFROM Templates\nGROUP BY Template_Type_Code;\n```", "match": {"match": false, "result": [[7, "AD"], [2, "BK"], [5, "CV"], [0, "PP"], [1, "PPT"]], "gt": [[0, "PP"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Template_Type_Code FROM Documents AS T1 INNER JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Name = 'Data base'", "match": {"match": true, "result": [["BK"]]}}
{"result": "```sql\nSELECT t.Template_Type_Code\nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID\nWHERE d.Document_Name = 'Data base';\n```", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT Document_Name \nFROM Documents \nJOIN Templates ON Documents.Template_ID = Templates.Template_ID \nWHERE Templates.Template_Type_Code = 'BK'", "match": {"match": true, "result": [["Robbin CV"], ["Data base"], ["How to read a book"], ["Palm reading"], ["About Korea"]]}}
{"result": "```sql\nSELECT d.Document_Name\nFROM Documents d\nJOIN Templates t ON d.Template_ID = t.Template_ID\nWHERE t.Template_Type_Code = 'BK';\n```", "match": {"match": true, "result": [["Robbin CV"], ["Data base"], ["How to read a book"], ["Palm reading"], ["About Korea"]]}}
{"result": "```sql\nSELECT tt.Template_Type_Code, COUNT(d.Document_ID) AS Number_of_Documents\nFROM Ref_Template_Types tt\nJOIN Templates t ON tt.Template_Type_Code = t.Template_Type_Code\nJOIN Documents d ON t.Template_ID = d.Template_ID\nGROUP BY tt.Template_Type_Code;\n```", "match": {"match": true, "result": [["AD", 3], ["BK", 5], ["PP", 4], ["PPT", 3]]}}
{"result": "SELECT T.Template_Type_Code, COUNT(D.Document_ID) AS Document_Count\nFROM Ref_Template_Types T\nJOIN Templates TM ON T.Template_Type_Code = TM.Template_Type_Code\nJOIN Documents D ON TM.Template_ID = D.Template_ID\nGROUP BY T.Template_Type_Code", "match": {"match": true, "result": [["AD", 3], ["BK", 5], ["PP", 4], ["PPT", 3]]}}
{"result": "```sql\nSELECT TOP 1 tt.Template_Type_Code\nFROM Ref_Template_Types tt\nJOIN Templates t ON tt.Template_Type_Code = t.Template_Type_Code\nJOIN Documents d ON t.Template_ID = d.Template_ID\nGROUP BY tt.Template_Type_Code\nORDER BY COUNT(d.Document_ID) DESC;\n```", "match": {"match": false, "error": "Query execution failed with error: near \"1\": syntax error"}}
{"result": "SELECT t.Template_Type_Code \nFROM Templates t \nJOIN Documents d ON t.Template_ID = d.Template_ID \nGROUP BY t.Template_Type_Code \nORDER BY COUNT(*) DESC \nLIMIT 1", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents))", "match": {"match": true, "result": [["CV"]]}}
{"result": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents))", "match": {"match": true, "result": [["CV"]]}}
{"result": "```sql\nSELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;\n```", "match": {"match": true, "result": [["PPT", "Presentation"], ["CV", "CV"], ["AD", "Advertisement"], ["PP", "Paper"], ["BK", "Book"]]}}
{"result": "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types", "match": {"match": true, "result": [["PPT", "Presentation"], ["CV", "CV"], ["AD", "Advertisement"], ["PP", "Paper"], ["BK", "Book"]]}}
{"result": "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'", "match": {"match": true, "result": [["Advertisement"]]}}
{"result": "```sql\nSELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';\n```", "match": {"match": true, "result": [["Advertisement"]]}}
{"result": "```sql\nSELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';\n```", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT DISTINCT T2.Template_Type_Description\nFROM Documents AS T1\nINNER JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Template_Type_Description"}}
{"result": "SELECT DISTINCT T2.Template_Type_Description \nFROM Documents AS T1 \nJOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Template_Type_Description"}}
{"result": "```sql\nSELECT t.Template_ID\nFROM Templates t\nJOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code\nWHERE r.Template_Type_Description = 'Presentation';\n```", "match": {"match": true, "result": [[6], [7], [10]]}}
{"result": "```sql\nSELECT Template_ID\nFROM Templates\nWHERE Template_Details LIKE '%Presentation%';\n```", "match": {"match": false, "result": [], "gt": [[6], [7], [10]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT COUNT(*) AS Total_Paragraphs FROM Paragraphs;\n```", "match": {"match": true, "result": [[15]]}}
{"result": "```sql\nSELECT COUNT(Paragraph_ID) AS Total_Paragraphs FROM Paragraphs;\n```", "match": {"match": true, "result": [[15]]}}
{"result": "```sql\nSELECT COUNT(*) \nFROM Paragraphs \nJOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID \nWHERE Documents.Document_Name = 'Summer Show';\n```", "match": {"match": true, "result": [[1]]}}
{"result": "```sql\nSELECT COUNT(*) AS Paragraph_Count\nFROM Paragraphs P\nJOIN Documents D ON P.Document_ID = D.Document_ID\nWHERE D.Document_Name = 'Summer Show';\n```", "match": {"match": true, "result": [[1]]}}
{"result": "```sql\nSELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea ';\n```", "match": {"match": false, "result": [], "gt": [[null], [null]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Paragraph_Text FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea %'", "match": {"match": false, "result": [], "gt": [[null], [null]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT Paragraph_ID, Paragraph_Text\nFROM Paragraphs\nJOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID\nWHERE Documents.Document_Name = 'Welcome to NY';\n```", "match": {"match": true, "result": [[16615, "Japan"], [608931827, "Micronesia"]]}}
{"result": "SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY')", "match": {"match": true, "result": [[16615, "Japan"], [608931827, "Micronesia"]]}}
{"result": "```sql\nSELECT Paragraph_Text \nFROM Paragraphs \nJOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID \nWHERE Documents.Document_Name = 'Customer reviews';\n```", "match": {"match": true, "result": [["Korea"], ["Ukraine"], ["Korea"]]}}
{"result": "```sql\nSELECT p.Paragraph_Text\nFROM Paragraphs p\nJOIN Documents d ON p.Document_ID = d.Document_ID\nWHERE d.Document_Name = 'Customer reviews';\n```", "match": {"match": true, "result": [["Korea"], ["Ukraine"], ["Korea"]]}}
{"result": "SELECT Document_ID, COUNT(Paragraph_ID) AS Paragraph_Count\nFROM Paragraphs\nGROUP BY Document_ID\nORDER BY Document_ID;", "match": {"match": true, "result": [[3, 1], [80, 2], [2394, 3], [3830, 1], [33930, 1], [50123, 1], [651512, 2], [3540024, 1], [16514113, 2], [385906526, 1]]}}
{"result": "```sql\nSELECT Document_ID, COUNT(Paragraph_ID) AS Paragraph_Count\nFROM Paragraphs\nGROUP BY Document_ID\nORDER BY Document_ID;\n```", "match": {"match": true, "result": [[3, 1], [80, 2], [2394, 3], [3830, 1], [33930, 1], [50123, 1], [651512, 2], [3540024, 1], [16514113, 2], [385906526, 1]]}}
{"result": "```sql\nSELECT \n    D.Document_ID, \n    D.Document_Name, \n    COUNT(P.Paragraph_ID) AS Number_of_Paragraphs\nFROM \n    Documents D\nLEFT JOIN \n    Paragraphs P ON D.Document_ID = P.Document_ID\nGROUP BY \n    D.Document_ID, \n    D.Document_Name;\n```", "match": {"match": false, "result": [[0, "Introduction of OS", 0], [1, "Understanding DB", 0], [3, "Summer Show", 1], [76, "Robbin CV", 0], [80, "Welcome to NY", 2], [82, "Data base", 0], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [801801, "How to read a book", 0], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "gt": [[3, "Summer Show", 1], [80, "Welcome to NY", 2], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT \n    d.Document_ID, \n    d.Document_Name, \n    COUNT(p.Paragraph_ID) AS Paragraph_Count\nFROM \n    Documents d\nLEFT JOIN \n    Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY \n    d.Document_ID, \n    d.Document_Name;\n```", "match": {"match": false, "result": [[0, "Introduction of OS", 0], [1, "Understanding DB", 0], [3, "Summer Show", 1], [76, "Robbin CV", 0], [80, "Welcome to NY", 2], [82, "Data base", 0], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [801801, "How to read a book", 0], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "gt": [[3, "Summer Show", 1], [80, "Welcome to NY", 2], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT Document_ID\nFROM Paragraphs\nGROUP BY Document_ID\nHAVING COUNT(Paragraph_ID) >= 2\n```", "match": {"match": true, "result": [[80], [2394], [651512], [16514113]]}}
{"result": "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2", "match": {"match": true, "result": [[80], [2394], [651512], [16514113]]}}
{"result": "```sql\nSELECT Document_ID, Document_Name\nFROM Documents\nWHERE Template_ID IN (\n    SELECT Template_ID\n    FROM Templates\n    WHERE Template_ID IN (\n        SELECT Template_ID\n        FROM Paragraphs\n    )\n    GROUP BY Template_ID\n    ORDER BY COUNT(Paragraph_ID) DESC\n    LIMIT 1\n);\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: Paragraph_ID"}}
{"result": "```sql\nSELECT d.Document_ID, d.Document_Name\nFROM Documents d\nJOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID, d.Document_Name\nORDER BY COUNT(p.Paragraph_ID) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [[2394, "Customer reviews"]]}}
{"result": "```sql\nSELECT Document_ID\nFROM Paragraphs\nGROUP BY Document_ID\nORDER BY COUNT(*) ASC\nLIMIT 1;\n```", "match": {"match": true, "result": [[3]]}}
{"result": "```sql\nSELECT Document_ID\nFROM Paragraphs\nGROUP BY Document_ID\nORDER BY COUNT(*) ASC\nLIMIT 1;\n```", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2;", "match": {"match": true, "result": [[3], [80], [3830], [33930], [50123], [651512], [3540024], [16514113], [385906526]]}}
{"result": "```sql\nSELECT Document_ID\nFROM Paragraphs\nGROUP BY Document_ID\nHAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2;\n```", "match": {"match": true, "result": [[3], [80], [3830], [33930], [50123], [651512], [3540024], [16514113], [385906526]]}}
{"result": "```sql\nSELECT Paragraph_ID, Document_ID \nFROM Paragraphs \nWHERE Paragraph_Text IN ('Brazil', 'Ireland');\n```", "match": {"match": false, "result": [[571212310, 16514113], [765713812, 16514113]], "gt": [[16514113]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text LIKE '%Brazil%' AND Paragraph_Text LIKE '%Ireland%'", "match": {"match": false, "result": [], "gt": [[16514113]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT COUNT(*) FROM teacher;\n```", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT COUNT(*) FROM teacher", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT Name FROM teacher ORDER BY Age ASC", "match": {"match": true, "result": [["Vicente Carretero"], ["Gustaaf Deloor"], ["Joseph Huts"], ["John Deloor"], ["Lucy Wong"], ["Anne Walker"], ["Kearsley Brown"]]}}
{"result": "SELECT Name FROM teacher ORDER BY Age ASC", "match": {"match": true, "result": [["Vicente Carretero"], ["Gustaaf Deloor"], ["Joseph Huts"], ["John Deloor"], ["Lucy Wong"], ["Anne Walker"], ["Kearsley Brown"]]}}
{"result": "SELECT Age ,  Hometown FROM teacher", "match": {"match": true, "result": [["32", "Blackrod Urban District"], ["29", "Bolton County Borough"], ["26", "Farnworth Municipal Borough"], ["33", "Horwich Urban District"], ["45", "Kearsley Urban District"], ["41", "Little Lever Urban District"], ["39", "Turton Urban District"]]}}
{"result": "SELECT Age ,  Hometown FROM teacher", "match": {"match": true, "result": [["32", "Blackrod Urban District"], ["29", "Bolton County Borough"], ["26", "Farnworth Municipal Borough"], ["33", "Horwich Urban District"], ["45", "Kearsley Urban District"], ["41", "Little Lever Urban District"], ["39", "Turton Urban District"]]}}
{"result": "SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'", "match": {"match": false, "result": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Lucy Wong"]], "gt": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Anne Walker"], ["Lucy Wong"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'", "match": {"match": false, "result": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Lucy Wong"]], "gt": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Anne Walker"], ["Lucy Wong"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name FROM teacher WHERE Age IN (32, 33)", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT Name FROM teacher WHERE Age IN (32, 33)", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "match": {"match": true, "result": [["Farnworth Municipal Borough"]]}}
{"result": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "match": {"match": true, "result": [["Farnworth Municipal Borough"]]}}
{"result": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown", "match": {"match": true, "result": [["Blackrod Urban District", 1], ["Bolton County Borough", 1], ["Farnworth Municipal Borough", 1], ["Horwich Urban District", 1], ["Kearsley Urban District", 1], ["Little Lever Urban District", 1], ["Turton Urban District", 1]]}}
{"result": "SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown", "match": {"match": true, "result": [["Blackrod Urban District", 1], ["Bolton County Borough", 1], ["Farnworth Municipal Borough", 1], ["Horwich Urban District", 1], ["Kearsley Urban District", 1], ["Little Lever Urban District", 1], ["Turton Urban District", 1]]}}
{"result": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "match": {"match": true, "result": [["Turton Urban District"]]}}
{"result": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "match": {"match": true, "result": [["Turton Urban District"]]}}
{"result": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) >= 2", "match": {"match": true, "result": []}}
{"result": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2", "match": {"match": true, "result": []}}
{"result": "SELECT T1.Name, T2.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Course"}}
{"result": "SELECT T1.Name, T3.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID", "match": {"match": true, "result": [["Kearsley Brown", "Math"], ["Vicente Carretero", "Math"], ["Gustaaf Deloor", "Science"], ["Anne Walker", "History"], ["Anne Walker", "Bible"], ["Lucy Wong", "Music"]]}}
{"result": "SELECT T2.Name, T1.Course FROM course AS T1 JOIN course_arrange AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T2.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name ASC", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Name"}}
{"result": "SELECT T2.Name, T1.Course FROM course AS T1 INNER JOIN course_arrange AS T2 ON T1.Course_ID = T2.Course_ID INNER JOIN teacher AS T3 ON T2.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name ASC", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Name"}}
{"result": "SELECT T3.Name FROM course AS T1 JOIN course_arrange AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T2.Teacher_ID  =  T3.Teacher_ID WHERE T1.Course  =  'math'", "match": {"match": false, "result": [], "gt": [["Kearsley Brown"], ["Vicente Carretero"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID WHERE T3.Course = 'math'", "match": {"match": false, "result": [], "gt": [["Kearsley Brown"], ["Vicente Carretero"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT T2.Name, COUNT(*) AS Course_Count\nFROM course_arrange AS T1\nJOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID\nGROUP BY T2.Name;\n```", "match": {"match": true, "result": [["Anne Walker", 2], ["Gustaaf Deloor", 1], ["Kearsley Brown", 1], ["Lucy Wong", 1], ["Vicente Carretero", 1]]}}
{"result": "SELECT T2.Name, COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T1.Teacher_ID", "match": {"match": false, "result": [["Gustaaf Deloor", 1], ["Vicente Carretero", 1], ["Kearsley Brown", 1], ["Anne Walker", 2], ["Lucy Wong", 1]], "gt": [["Anne Walker", 2], ["Gustaaf Deloor", 1], ["Kearsley Brown", 1], ["Lucy Wong", 1], ["Vicente Carretero", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2", "match": {"match": true, "result": [["Anne Walker"]]}}
{"result": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(T2.Name) >= 2", "match": {"match": true, "result": [["Anne Walker"]]}}
{"result": "SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT COUNT(*) FROM visitor WHERE Age < 30", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC", "match": {"match": true, "result": [["Gonzalo Higua\u00edn "], ["Fernando Gago"], ["Guti Midfielder"]]}}
{"result": "SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4", "match": {"match": true, "result": [[36.0]]}}
{"result": "SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC", "match": {"match": true, "result": [["Fernando Gago", 6], ["Gonzalo Higua\u00edn ", 8], ["Guti Midfielder", 5]]}}
{"result": "```sql\nSELECT Museum_ID, Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1\n```", "match": {"match": true, "result": [[1, "Plaza Museum"]]}}
{"result": "SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < '2009'", "match": {"match": true, "result": [[31.333333333333332]]}}
{"result": "```sql\nSELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';\n```", "match": {"match": false, "result": [["2000", 62]], "gt": [[62, "2000"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name FROM museum WHERE Num_of_Staff > ( SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > '2010' )", "match": {"match": true, "result": [["Plaza Museum"], ["Capital Plaza Museum"], ["Jefferson Development Museum"]]}}
{"result": "```sql\nSELECT visitor_ID, Name, Age \nFROM visitor \nWHERE ID IN (\n    SELECT visitor_ID \n    FROM visit \n    GROUP BY visitor_ID \n    HAVING COUNT(Museum_ID) > 1\n);\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: visitor_ID"}}
{"result": "SELECT T1.Name ,  T1.Level_of_membership ,  T2.Total_spent FROM visitor AS T1 JOIN visit AS T2 ON T1.ID  =  T2.visitor_ID ORDER BY T2.Total_spent DESC LIMIT 1", "match": {"match": false, "result": [["Arjen Robben", 1, 320.44]], "gt": [["3", "Arjen Robben", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Museum_ID, T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID  =  T2.Museum_ID GROUP BY T2.Museum_ID ORDER BY COUNT(*) DESC LIMIT 1", "match": {"match": true, "result": [[2, "Capital Plaza Museum"]]}}
{"result": "SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)", "match": {"match": true, "result": [["Jefferson Development Museum"], ["RiverPark Museum"], ["Place Tower Museum"], ["Central City District Residential Museum"]]}}
{"result": "SELECT T2.Name, T2.Age FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID ORDER BY T1.Num_of_Ticket DESC LIMIT 1", "match": {"match": true, "result": [["Arjen Robben", 27]]}}
{"result": "SELECT max(Num_of_Ticket) ,  avg(Num_of_Ticket) FROM visit", "match": {"match": false, "result": [[24, 10.5]], "gt": [[10.5, 24]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Sum(Total_spent) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID  =  T2.ID WHERE T2.Level_of_membership  =  1", "match": {"match": true, "result": [[570.84]]}}
{"result": "```sql\nSELECT v.Name\nFROM visitor v\nJOIN visit v1 ON v.ID = v1.visitor_ID\nJOIN museum m1 ON v1.Museum_ID = m1.Museum_ID\nJOIN visit v2 ON v.ID = v2.visitor_ID\nJOIN museum m2 ON v2.Museum_ID = m2.Museum_ID\nWHERE m1.Open_Year < '2009' AND m2.Open_Year > '2011';\n```", "match": {"match": true, "result": [["Fernando Gago"]]}}
{"result": "```sql\nSELECT COUNT(DISTINCT visitor_ID) \nFROM visit \nWHERE visitor_ID NOT IN (\n    SELECT v.ID \n    FROM visitor v\n    JOIN visit vi ON v.ID = vi.visitor_ID\n    JOIN museum m ON vi.Museum_ID = m.Museum_ID\n    WHERE m.Open_Year > '2010'\n);\n```", "match": {"match": false, "result": [[0]], "gt": [[3]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT COUNT(*) FROM museum WHERE Open_Year < '2008' OR Open_Year > '2013';\n```", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'", "match": {"match": true, "result": [[4]]}}
{"result": "```sql\nSELECT name, tonnage FROM ship ORDER BY name DESC;\n```", "match": {"match": true, "result": [["Three Brothers", "t"], ["Mary", "t"], ["Lettice", "t"], ["HMS Avon", "391"], ["HMS Atalanta", "225"], ["Bon Accord", "t"], ["Bacchus", "t"]]}}
{"result": "SELECT name ,  date ,  result FROM battle", "match": {"match": false, "result": [["Battle of Adrianople", "14 April 1205", "Bulgarian victory"], ["Battle of Serres", "June 1205", "Bulgarian victory"], ["Battle of Rusion", "31 January 1206", "Bulgarian victory"], ["Battle of Rodosto", "February 1206", "Bulgarian victory"], ["Battle of Messinopolis", "4 September 1207", "Bulgarian victory"], ["Battle of Boruy", "June 1205", "Bulgarian victory"], ["Battle of Philippopolis", "31 June 1208", "Latin victory"], ["Siege of Constantinople", "1235", "Two Year Truce"]], "gt": [["Battle of Adrianople", "14 April 1205"], ["Battle of Serres", "June 1205"], ["Battle of Rusion", "31 January 1206"], ["Battle of Rodosto", "February 1206"], ["Battle of Messinopolis", "4 September 1207"], ["Battle of Boruy", "June 1205"], ["Battle of Philippopolis", "31 June 1208"], ["Siege of Constantinople", "1235"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT max(killed) ,  min(killed) FROM death", "match": {"match": true, "result": [[29, 0]]}}
{"result": "SELECT avg(injured) FROM death;", "match": {"match": true, "result": [[1.0769230769230769]]}}
{"result": "SELECT T2.killed, T2.injured FROM ship AS T1 INNER JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage = 't'", "match": {"match": true, "result": [[8, 0], [3, 0], [25, 0], [2, 0], [0, 0], [4, 5], [0, 0], [29, 0], [0, 0], [0, 0], [14, 0]]}}
{"result": "```sql\nSELECT name, result FROM battle WHERE bulgarian_commander != 'Boril';\n```", "match": {"match": true, "result": [["Battle of Adrianople", "Bulgarian victory"], ["Battle of Serres", "Bulgarian victory"], ["Battle of Rusion", "Bulgarian victory"], ["Battle of Rodosto", "Bulgarian victory"], ["Battle of Messinopolis", "Bulgarian victory"], ["Siege of Constantinople", "Two Year Truce"]]}}
{"result": "SELECT DISTINCT T2.id ,  T2.name FROM ship AS T1 JOIN battle AS T2 ON T1.lost_in_battle  =  T2.id WHERE T1.ship_type  =  'Brig'", "match": {"match": true, "result": [[8, "Siege of Constantinople"], [7, "Battle of Philippopolis"], [6, "Battle of Boruy"], [5, "Battle of Messinopolis"], [4, "Battle of Rodosto"]]}}
{"result": "```sql\nSELECT T2.id, T2.name\nFROM death AS T1\nJOIN battle AS T2 ON T1.caused_by_ship_id = T2.lost_in_battle\nGROUP BY T1.caused_by_ship_id\nHAVING SUM(T1.killed) > 10;\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.lost_in_battle"}}
{"result": "SELECT T1.id, T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T1.id ORDER BY SUM(T2.injured) DESC LIMIT 1", "match": {"match": false, "result": [[4, "HMS Avon"]], "gt": [[5, "Three Brothers"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'", "match": {"match": true, "result": [["Battle of Adrianople"]]}}
{"result": "SELECT COUNT(DISTINCT result) FROM battle", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225')", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT T1.name, T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name IN ('Lettice', 'HMS Atalanta')", "match": {"match": false, "result": [["Siege of Constantinople", "1235"], ["Siege of Constantinople", "1235"]], "gt": [["Siege of Constantinople", "1235"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name , result , bulgarian_commander FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE location = 'English Channel' )", "match": {"match": false, "result": [["Battle of Adrianople", "Bulgarian victory", "Kaloyan"], ["Battle of Serres", "Bulgarian victory", "Kaloyan"], ["Battle of Rusion", "Bulgarian victory", "Kaloyan"]], "gt": [["Battle of Adrianople", "Bulgarian victory", "Kaloyan"], ["Battle of Rusion", "Bulgarian victory", "Kaloyan"], ["Battle of Serres", "Bulgarian victory", "Kaloyan"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT note FROM death WHERE note LIKE '%East%'", "match": {"match": true, "result": [["East Champaran, Bihar"]]}}
{"result": "SELECT line_1, line_2 FROM Addresses;", "match": {"match": true, "result": [["2294 Grant Square Apt. 235", "Apt. 370"], ["3999 Aufderhar Ways Suite 593", "Apt. 388"], ["67942 Carlotta Ferry Apt. 686", "Apt. 583"], ["0144 Lamar Plaza Apt. 346", "Suite 703"], ["858 Peggie Bypass Suite 212", "Apt. 335"], ["16998 Mraz Lodge", "Apt. 689"], ["193 Marlin Brook", "Apt. 406"], ["202 Hessel Views Apt. 468", "Apt. 305"], ["0643 Muller Vista", "Suite 383"], ["7081 Eda Center", "Suite 830"], ["9283 Schulist Falls Apt. 037", "Suite 239"], ["979 Haag Shores Suite 656", "Apt. 468"], ["492 Wilkinson Route", "Suite 865"], ["186 Evan Motorway Apt. 409", "Suite 079"], ["74046 Metz Walk Apt. 113", "Suite 674"]]}}
{"result": "```sql\nSELECT line_1, line_2 FROM Addresses;\n```", "match": {"match": true, "result": [["2294 Grant Square Apt. 235", "Apt. 370"], ["3999 Aufderhar Ways Suite 593", "Apt. 388"], ["67942 Carlotta Ferry Apt. 686", "Apt. 583"], ["0144 Lamar Plaza Apt. 346", "Suite 703"], ["858 Peggie Bypass Suite 212", "Apt. 335"], ["16998 Mraz Lodge", "Apt. 689"], ["193 Marlin Brook", "Apt. 406"], ["202 Hessel Views Apt. 468", "Apt. 305"], ["0643 Muller Vista", "Suite 383"], ["7081 Eda Center", "Suite 830"], ["9283 Schulist Falls Apt. 037", "Suite 239"], ["979 Haag Shores Suite 656", "Apt. 468"], ["492 Wilkinson Route", "Suite 865"], ["186 Evan Motorway Apt. 409", "Suite 079"], ["74046 Metz Walk Apt. 113", "Suite 674"]]}}
{"result": "SELECT COUNT(*) FROM Courses;", "match": {"match": true, "result": [[15]]}}
{"result": "```sql\nSELECT COUNT(*) FROM Courses;\n```", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT course_description FROM Courses WHERE course_name = 'Math';", "match": {"match": false, "result": [], "gt": [["q"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT course_description FROM Courses WHERE course_name LIKE '%math%'", "match": {"match": true, "result": [["q"]]}}
{"result": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';", "match": {"match": true, "result": [["148"]]}}
{"result": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea' LIMIT 1", "match": {"match": true, "result": [["148"]]}}
{"result": "SELECT department_id, department_name FROM Departments WHERE department_id = ( SELECT department_id FROM Degree_Programs GROUP BY department_id ORDER BY COUNT(degree_program_id) DESC LIMIT 1 )", "match": {"match": false, "result": [[8, "statistics"]], "gt": [["statistics", 8]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT d.department_name, d.department_id\nFROM Departments d\nJOIN Degree_Programs dp ON d.department_id = dp.department_id\nGROUP BY d.department_id\nORDER BY COUNT(dp.degree_program_id) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [["statistics", 8]]}}
{"result": "SELECT DISTINCT department_id FROM Degree_Programs", "match": {"match": false, "result": [[13], [2], [8], [11], [14], [15], [3], [4], [7], [12]], "gt": [[10]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT department_id) FROM Degree_Programs", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs;", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs;", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(degree_program_id) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering')", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(degree_summary_name) FROM Degree_Programs WHERE department_id = ( SELECT department_id FROM Departments WHERE department_name = 'Engineering' )", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT section_name, section_description FROM Sections;", "match": {"match": true, "result": [["a", "non"], ["b", "voluptatem"], ["c", "qui"], ["d", "voluptas"], ["e", "ex"], ["f", "doloremque"], ["g", "provident"], ["h", "et"], ["j", "quis"], ["k", "nesciunt"], ["l", "ad"], ["o", "et"], ["p", "facilis"], ["u", "reprehenderit"], ["y", "qui"]]}}
{"result": "SELECT section_name ,  section_description FROM Sections;", "match": {"match": true, "result": [["a", "non"], ["b", "voluptatem"], ["c", "qui"], ["d", "voluptas"], ["e", "ex"], ["f", "doloremque"], ["g", "provident"], ["h", "et"], ["j", "quis"], ["k", "nesciunt"], ["l", "ad"], ["o", "et"], ["p", "facilis"], ["u", "reprehenderit"], ["y", "qui"]]}}
{"result": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 INNER JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING COUNT(T2.section_id)  <=  2", "match": {"match": true, "result": [["ds", 1], ["math", 2], ["en", 4], ["fr", 5], ["la", 6], ["cal", 7], ["nlp", 8], ["dl", 9], ["ml", 10], ["db", 12], ["pl", 14]]}}
{"result": "SELECT course_id ,  course_name FROM Courses WHERE course_id NOT IN ( SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(*)  >=  2 )", "match": {"match": false, "result": [[2, "math"], [3, "os"], [4, "en"], [6, "la"], [7, "cal"], [9, "dl"], [10, "ml"], [11, "ai"], [12, "db"], [13, "rs"], [15, "oop"]], "gt": [["ds", 1], ["math", 2], ["en", 4], ["fr", 5], ["la", 6], ["cal", 7], ["nlp", 8], ["dl", 9], ["ml", 10], ["db", 12], ["pl", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT section_name FROM Sections ORDER BY section_name DESC", "match": {"match": true, "result": [["y"], ["u"], ["p"], ["o"], ["l"], ["k"], ["j"], ["h"], ["g"], ["f"], ["e"], ["d"], ["c"], ["b"], ["a"]]}}
{"result": "SELECT section_name FROM Sections ORDER BY section_name DESC", "match": {"match": true, "result": [["y"], ["u"], ["p"], ["o"], ["l"], ["k"], ["j"], ["h"], ["g"], ["f"], ["e"], ["d"], ["c"], ["b"], ["a"]]}}
{"result": "SELECT semester_id, semester_name FROM semesters WHERE semester_id IN (SELECT semester_id FROM student_enrolment GROUP BY semester_id ORDER BY COUNT(student_id) DESC LIMIT 1)", "match": {"match": false, "result": [[2, "summer 2010"]], "gt": [["summer 2010", 2]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT \n    s.semester_name, \n    s.semester_id, \n    COUNT(se.student_id) AS student_count\nFROM \n    Semesters s\nJOIN \n    Student_Enrolment se ON s.semester_id = se.semester_id\nGROUP BY \n    s.semester_id, s.semester_name\nORDER BY \n    student_count DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [["summer 2010", 2, 4]], "gt": [["summer 2010", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT department_description FROM Departments WHERE department_name LIKE '%the computer%'", "match": {"match": false, "result": [], "gt": [["error"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.department_description FROM Departments AS T1 WHERE T1.department_name LIKE '%computer%'", "match": {"match": true, "result": [["error"]]}}
{"result": "SELECT s.first_name, s.middle_name, s.last_name, s.student_id\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nGROUP BY s.student_id\nHAVING COUNT(se.degree_program_id) = 2;", "match": {"match": true, "result": [["Jarvis", "Aaliyah", "Carroll", 4], ["Reva", "Golda", "Osinski", 9], ["Jordy", "Osborne", "Rempel", 14]]}}
{"result": "SELECT T1.first_name, T1.middle_name, T1.last_name , T1.student_id FROM Students AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(DISTINCT T2.degree_program_id) = 2", "match": {"match": false, "result": [["Jarvis", "Aaliyah", "Carroll", 4], ["Stanford", "Mona", "Rogahn", 6], ["Jordy", "Osborne", "Rempel", 14]], "gt": [["Jarvis", "Aaliyah", "Carroll", 4], ["Reva", "Golda", "Osinski", 9], ["Jordy", "Osborne", "Rempel", 14]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT DISTINCT s.first_name, s.middle_name, s.last_name\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nWHERE dp.degree_summary_name = 'Bachelor';\n```", "match": {"match": true, "result": [["Reva", "Golda", "Osinski"], ["Frida", "Aisha", "Huel"], ["Jarvis", "Aaliyah", "Carroll"], ["Milton", "Vaughn", "Christiansen"], ["Stanford", "Mona", "Rogahn"]]}}
{"result": "SELECT DISTINCT s.first_name, s.middle_name, s.last_name \nFROM Students s \nJOIN Student_Enrolment se ON s.student_id = se.student_id \nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id \nWHERE dp.degree_summary_name = 'Bachelors';", "match": {"match": false, "result": [], "gt": [["Reva", "Golda", "Osinski"], ["Frida", "Aisha", "Huel"], ["Jarvis", "Aaliyah", "Carroll"], ["Milton", "Vaughn", "Christiansen"], ["Stanford", "Mona", "Rogahn"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT dp.degree_program_id, dp.degree_summary_name, COUNT(se.student_id) AS student_count\nFROM Degree_Programs dp\nJOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id\nGROUP BY dp.degree_program_id, dp.degree_summary_name\nORDER BY student_count DESC\nLIMIT 1", "match": {"match": false, "result": [[9, "Bachelor", 3]], "gt": [["Bachelor"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT dp.degree_summary_name\nFROM Degree_Programs dp\nJOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id\nGROUP BY dp.degree_program_id\nORDER BY COUNT(se.student_id) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [["Bachelor"]]}}
{"result": "```sql\nSELECT dp.degree_program_id, dp.degree_summary_name\nFROM Degree_Programs dp\nJOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id\nGROUP BY dp.degree_program_id, dp.degree_summary_name\nORDER BY COUNT(se.student_enrolment_id) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [[9, "Bachelor"]]}}
{"result": "SELECT t1.degree_program_id, t1.degree_summary_name FROM degree_programs AS t1 INNER JOIN student_enrolment AS t2 ON t1.degree_program_id = t2.degree_program_id GROUP BY t1.degree_program_id, t1.degree_summary_name ORDER BY COUNT(t2.student_id) DESC LIMIT 1", "match": {"match": true, "result": [[9, "Bachelor"]]}}
{"result": "```sql\nSELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_enrolment_id) AS enrollment_count\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nGROUP BY s.student_id\nORDER BY enrollment_count DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [[7, "Frida", "Aisha", "Huel", 3]], "gt": [[7, "Frida", "Aisha", "Huel", 3, 7]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT \n    s.first_name, \n    s.middle_name, \n    s.last_name, \n    s.student_id, \n    COUNT(se.student_enrolment_id) AS number_of_enrollments\nFROM \n    Students s\nJOIN \n    Student_Enrolment se ON s.student_id = se.student_id\nGROUP BY \n    s.student_id\nORDER BY \n    number_of_enrollments DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [["Frida", "Aisha", "Huel", 7, 3]], "gt": [[7, "Frida", "Aisha", "Huel", 3, 7]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT semester_name\nFROM Semesters\nWHERE semester_id NOT IN (\n    SELECT semester_id\n    FROM Student_Enrolment\n);\n```", "match": {"match": true, "result": [["fall 2010"], ["spring 2013"], ["spring 2014"], ["spring 2016"], ["spring 2017"], ["winter 2018"]]}}
{"result": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)", "match": {"match": true, "result": [["fall 2010"], ["spring 2013"], ["spring 2014"], ["spring 2016"], ["spring 2017"], ["winter 2018"]]}}
{"result": "SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses)", "match": {"match": false, "result": [["math"], ["os"], ["en"], ["la"], ["nlp"], ["ml"], ["ai"], ["db"], ["rs"], ["pl"]], "gt": [["la"], ["pl"], ["ai"], ["math"], ["ml"], ["os"], ["en"], ["nlp"], ["rs"], ["db"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses)", "match": {"match": false, "result": [["math"], ["os"], ["en"], ["la"], ["nlp"], ["ml"], ["ai"], ["db"], ["rs"], ["pl"]], "gt": [["la"], ["pl"], ["ai"], ["math"], ["ml"], ["os"], ["en"], ["nlp"], ["rs"], ["db"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T3.course_name FROM Student_Enrolment_Courses AS T1 INNER JOIN Courses AS T3 ON T1.course_id = T3.course_id GROUP BY T3.course_name ORDER BY COUNT(T1.student_course_id) DESC LIMIT 1", "match": {"match": true, "result": [["rs"]]}}
{"result": "```sql\nSELECT c.course_name\nFROM Courses c\nJOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id\nGROUP BY c.course_id\nORDER BY COUNT(sec.student_course_id) DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [["pl"]], "gt": [["rs"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT s.last_name\nFROM Students s\nJOIN Addresses a ON s.current_address_id = a.address_id\nWHERE a.state_province_county = 'North Carolina'\nAND s.student_id NOT IN (\n    SELECT se.student_id\n    FROM Student_Enrolment se\n);\n```", "match": {"match": false, "result": [], "gt": [["Gleichner"], ["Weimann"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT last_name FROM Students WHERE current_address_id IN ( SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina' ) AND student_id NOT IN ( SELECT student_id FROM Student_Enrolment )", "match": {"match": false, "result": [], "gt": [["Gleichner"], ["Weimann"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.transcript_date, T.transcript_id FROM Transcripts AS T JOIN Transcript_Contents AS TC ON T.transcript_id = TC.transcript_id GROUP BY T.transcript_id HAVING COUNT(TC.student_course_id) >= 2", "match": {"match": true, "result": [["2013-06-30 13:01:40", 5], ["2010-12-13 10:55:15", 6], ["1975-05-06 12:04:47", 8], ["1998-11-22 12:18:29", 15]]}}
{"result": "SELECT T1.transcript_date, T1.transcript_id FROM TRANSCRIPTS AS T1 INNER JOIN transcript_contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING COUNT(*) >= 2", "match": {"match": true, "result": [["2013-06-30 13:01:40", 5], ["2010-12-13 10:55:15", 6], ["1975-05-06 12:04:47", 8], ["1998-11-22 12:18:29", 15]]}}
{"result": "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'", "match": {"match": true, "result": [["(096)889-8954x524"]]}}
{"result": "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'", "match": {"match": false, "result": [["(096)889-8954x524"]], "gt": [], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT first_name, middle_name, last_name \nFROM Students \nORDER BY date_first_registered ASC \nLIMIT 1;\n```", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "```sql\nSELECT first_name, middle_name, last_name \nFROM Students \nORDER BY date_first_registered ASC \nLIMIT 1;\n```", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "```sql\nSELECT first_name, middle_name, last_name\nFROM Students\nWHERE date_left IS NOT NULL\nORDER BY date_left ASC\nLIMIT 1;\n```", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "```sql\nSELECT first_name, middle_name, last_name\nFROM Students\nWHERE date_left IS NOT NULL\nORDER BY date_left ASC\nLIMIT 1;\n```", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "match": {"match": true, "result": [["Timmothy"], ["Hobart"], ["Warren"], ["Jarvis"], ["Stanford"], ["Frida"], ["Delaney"], ["Reva"], ["Helga"], ["Gregg"], ["Orrin"], ["Deon"], ["Jordy"], ["Jett"]]}}
{"result": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id;", "match": {"match": true, "result": [["Timmothy"], ["Hobart"], ["Warren"], ["Jarvis"], ["Stanford"], ["Frida"], ["Delaney"], ["Reva"], ["Helga"], ["Gregg"], ["Orrin"], ["Deon"], ["Jordy"], ["Jett"]]}}
{"result": "```sql\nSELECT a.address_id, a.line_1, a.line_2, a.line_3\nFROM Addresses a\nJOIN Students s ON a.address_id = s.current_address_id\nGROUP BY a.address_id\nORDER BY COUNT(s.student_id) DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [[9, "0643 Muller Vista", "Suite 383", null]], "gt": [[9, "0643 Muller Vista", "Suite 383"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT \n    a.address_id, \n    a.line_1, \n    a.line_2 \nFROM \n    Addresses a \nJOIN \n    Students s ON a.address_id = s.current_address_id \nGROUP BY \n    a.address_id, \n    a.line_1, \n    a.line_2 \nORDER BY \n    COUNT(s.student_id) DESC \nLIMIT 1;\n```", "match": {"match": true, "result": [[9, "0643 Muller Vista", "Suite 383"]]}}
{"result": "```sql\nSELECT AVG(transcript_date) AS average_transcript_date\nFROM Transcripts;\n```", "match": {"match": true, "result": [[1989.9333333333334]]}}
{"result": "SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts", "match": {"match": true, "result": [[1989.9333333333334]]}}
{"result": "SELECT transcript_date, other_details FROM TRANSCRIPTS ORDER BY transcript_date ASC LIMIT 1", "match": {"match": true, "result": [["1975-05-06 12:04:47", null]]}}
{"result": "SELECT transcript_date, other_details FROM TRANSCRIPTS ORDER BY transcript_date ASC LIMIT 1", "match": {"match": true, "result": [["1975-05-06 12:04:47", null]]}}
{"result": "```sql\nSELECT COUNT(transcript_id) AS transcript_count FROM Transcripts;\n```", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(transcript_id) FROM TRANSCRIPTS", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT transcript_date FROM TRANSCRIPTS ORDER BY transcript_date DESC LIMIT 1", "match": {"match": true, "result": [["2013-06-30 13:01:40"]]}}
{"result": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "match": {"match": true, "result": [["2013-06-30 13:01:40"]]}}
{"result": "```sql\nSELECT student_course_id, COUNT(DISTINCT transcript_id) AS transcript_count\nFROM Transcript_Contents\nGROUP BY student_course_id\nORDER BY transcript_count DESC LIMIT 1;\n```", "match": {"match": false, "result": [[0, 4]], "gt": [[4, 0]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT course_id, student_enrolment_id, COUNT(*) AS max_occurrences\nFROM Student_Enrolment_Courses\nGROUP BY course_id, student_enrolment_id\nORDER BY max_occurrences DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [[2, 4, 1]], "gt": [[4, 0]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT transcript_date, transcript_id\nFROM Transcripts\nORDER BY transcript_id ASC\nLIMIT 1;\n```", "match": {"match": false, "result": [["1988-04-30 01:19:47", 1]], "gt": [["1975-10-28 15:16:51", 2]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT transcript_id, transcript_date \nFROM Transcripts \nORDER BY transcript_id ASC \nLIMIT 1;\n```", "match": {"match": false, "result": [[1, "1988-04-30 01:19:47"]], "gt": [["1975-10-28 15:16:51", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT semester_name FROM Student_Enrolment AS DE1 JOIN Semesters AS S ON DE1.semester_id = S.semester_id WHERE degree_program_id IN ( SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name IN ('Master', 'Bachelor') ) GROUP BY semester_name HAVING COUNT(DISTINCT student_id) > 1", "match": {"match": false, "result": [["fall 2018"], ["spring 2018"], ["spring 2019"], ["summer 2010"]], "gt": [[13]], "error": "Query result does not match ground truth."}}
{"result": "SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (  \n  SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name IN ('Masters', 'Bachelors')  \n) GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) = 2", "match": {"match": false, "result": [], "gt": [[13]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT current_address_id) FROM Students", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT DISTINCT a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country, a.other_address_details \nFROM Addresses a \nJOIN Students s ON a.address_id = s.current_address_id \nUNION \nSELECT DISTINCT a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country, a.other_address_details \nFROM Addresses a \nJOIN Students s ON a.address_id = s.permanent_address_id", "match": {"match": false, "result": [[1, "2294 Grant Square Apt. 235", "Apt. 370", null, "Port Chelsea", "148", "Virginia", "Iceland", null], [2, "3999 Aufderhar Ways Suite 593", "Apt. 388", null, "Lake Laishafurt", "943", "Kentucky", "Burundi", null], [3, "67942 Carlotta Ferry Apt. 686", "Apt. 583", null, "Goodwinhaven", "541", "Kansas", "Saudi Arabia", null], [4, "0144 Lamar Plaza Apt. 346", "Suite 703", null, "Port Evanston", "847", "Washington", "Angola", null], [5, "858 Peggie Bypass Suite 212", "Apt. 335", null, "Michelleburgh", "446", "Hawaii", "Haiti", null], [6, "16998 Mraz Lodge", "Apt. 689", null, "North Omer", "902", "Kentucky", "Gibraltar", null], [7, "193 Marlin Brook", "Apt. 406", null, "Herzoghaven", "068", "Arkansas", "Cook Islands", null], [8, "202 Hessel Views Apt. 468", "Apt. 305", null, "Mariliehaven", "638", "Idaho", "Croatia", null], [9, "0643 Muller Vista", "Suite 383", null, "Port Elvisfurt", "777", "NorthCarolina", "Gabon", null], [10, "7081 Eda Center", "Suite 830", null, "Rutherfordtown", "839", "Delaware", "Kyrgyz Republic", null], [11, "9283 Schulist Falls Apt. 037", "Suite 239", null, "South Palma", "400", "WestVirginia", "Bermuda", null], [12, "979 Haag Shores Suite 656", "Apt. 468", null, "Prohaskafort", "590", "SouthDakota", "Lesotho", null], [14, "186 Evan Motorway Apt. 409", "Suite 079", null, "Lake Careyberg", "895", "Kentucky", "New Caledonia", null], [15, "74046 Metz Walk Apt. 113", "Suite 674", null, "Port Oceane", "669", "Wyoming", "Norfolk Island", null]], "gt": [[9]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT * FROM Students ORDER BY first_name DESC, last_name DESC;\n```", "match": {"match": false, "result": [[3, 9, 5, "Warren", "Violet", "Gleichner", "07661787471", "johns.unique@example.net", "3", "2007-08-29 23:25:41", "2007-03-31 09:53:19", "facilis"], [1, 10, 15, "Timmothy", "Anna", "Ward", "(096)889-8954x524", "erwin.zboncak@example.com", "965", "1971-02-05 07:28:23", "1971-05-17 19:28:49", "quia"], [6, 6, 3, "Stanford", "Mona", "Rogahn", "436.613.7683", "skassulke@example.net", "248", "1997-03-20 16:47:25", "2016-04-09 12:27:04", "qui"], [9, 2, 15, "Reva", "Golda", "Osinski", "(507)365-8405", "qo'kon@example.com", "39", "2017-01-04 08:10:25", "1990-09-01 05:03:27", "nesciunt"], [12, 14, 9, "Orrin", "Neal", "Kemmer", "(982)153-1469x1733", "beth42@example.org", "6274274", "2005-12-15 08:42:10", "2006-08-04 17:26:49", "non"], [5, 9, 9, "Milton", "Vaughn", "Christiansen", "171-642-5684", "lhartmann@example.org", "", "1973-05-19 19:12:46", "2007-11-28 12:50:21", "laborum"], [14, 12, 11, "Jordy", "Osborne", "Rempel", "(605)919-3594x3661", "gracie29@example.com", "34458427", "2004-12-24 12:36:46", "1999-08-24 00:07:10", "et"], [15, 2, 9, "Jett", "Alberta", "Jaskolski", "877.549.9067x8723", "mya88@example.org", "156", "1982-06-19 13:15:18", "1982-06-11 00:25:39", "omnis"], [4, 7, 11, "Jarvis", "Aaliyah", "Carroll", "09700166582", "jillian26@example.net", "141072406", "2014-03-28 05:48:23", "2007-08-02 04:12:58", "atque"], [2, 12, 5, "Hobart", "Lorenz", "Balistreri", "1-009-710-5151", "swift.kolby@example.com", "304246", "1976-10-26 02:33:06", "2013-10-05 17:41:28", "autem"], [10, 15, 14, "Helga", "Cleve", "Mohr", "677.401.9382", "nya.lesch@example.net", "43", "2009-09-25 00:14:25", "2017-07-09 21:38:43", "rerum"], [11, 14, 4, "Gregg", "Mossie", "Schuppe", "(462)246-7921", "nbruen@example.org", "494", "1989-05-24 23:31:29", "1975-10-09 00:49:27", "omnis"], [7, 15, 3, "Frida", "Aisha", "Huel", "1-879-796-8987x164", "baumbach.lucious@example.org", "668", "2018-03-13 09:56:22", "1997-11-16 08:54:33", "dolorum"], [13, 9, 8, "Deon", "Brooklyn", "Weimann", "(213)445-0399x85208", "jhuel@example.com", "68095", "1986-02-24 21:12:23", "2014-05-30 23:32:02", "assumenda"], [8, 1, 5, "Delaney", "Judd", "Ankunding", "03174364122", "dell43@example.net", "402", "1982-02-14 08:46:35", "2004-12-08 05:29:11", "voluptatem"]], "gt": [["voluptatem"], ["rerum"], ["quia"], ["qui"], ["omnis"], ["omnis"], ["non"], ["nesciunt"], ["laborum"], ["facilis"], ["et"], ["dolorum"], ["autem"], ["atque"], ["assumenda"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT other_student_details FROM Students ORDER BY last_name DESC, first_name DESC;", "match": {"match": false, "result": [["assumenda"], ["quia"], ["omnis"], ["qui"], ["et"], ["nesciunt"], ["rerum"], ["non"], ["omnis"], ["dolorum"], ["facilis"], ["laborum"], ["atque"], ["autem"], ["voluptatem"]], "gt": [["voluptatem"], ["rerum"], ["quia"], ["qui"], ["omnis"], ["omnis"], ["non"], ["nesciunt"], ["laborum"], ["facilis"], ["et"], ["dolorum"], ["autem"], ["atque"], ["assumenda"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT section_description FROM Sections WHERE section_name = 'h';\n```", "match": {"match": true, "result": [["et"]]}}
{"result": "SELECT section_description FROM Sections WHERE section_name = 'h';", "match": {"match": true, "result": [["et"]]}}
{"result": "SELECT first_name FROM Students WHERE current_address_id IN ( SELECT address_id FROM Addresses WHERE country = 'Haiti' ) OR cell_mobile_number = '09700166582'", "match": {"match": true, "result": [["Jarvis"]]}}
{"result": "```sql\nSELECT first_name\nFROM Students\nWHERE permanent_address_id IN (\n    SELECT address_id\n    FROM Addresses\n    WHERE country = 'Haiti'\n)\nOR cell_mobile_number = '09700166582';\n```", "match": {"match": false, "result": [["Hobart"], ["Warren"], ["Jarvis"], ["Delaney"]], "gt": [["Jarvis"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Title FROM Cartoon ORDER BY Title ASC", "match": {"match": true, "result": [["Dawn of the Dead Man!"], ["Day of the Dark Knight!"], ["Deep Cover for Batman!"], ["Enter the Outsiders!"], ["Evil Under the Sea!"], ["Fall of the Blue Beetle!"], ["Invasion of the Secret Santas!"], ["Journey to the Center of the Bat!"], ["Return of the Fearsome Fangs!"], ["Terror on Dinosaur Island!"], ["The Eyes of Despero!"], ["The Rise of the Blue Beetle!"]]}}
{"result": "SELECT Title FROM Cartoon ORDER BY Title ASC", "match": {"match": true, "result": [["Dawn of the Dead Man!"], ["Day of the Dark Knight!"], ["Deep Cover for Batman!"], ["Enter the Outsiders!"], ["Evil Under the Sea!"], ["Fall of the Blue Beetle!"], ["Invasion of the Secret Santas!"], ["Journey to the Center of the Bat!"], ["Return of the Fearsome Fangs!"], ["Terror on Dinosaur Island!"], ["The Eyes of Despero!"], ["The Rise of the Blue Beetle!"]]}}
{"result": "SELECT * FROM Cartoon WHERE Directed_by = 'Ben Jones';", "match": {"match": false, "result": [[1.0, "The Rise of the Blue Beetle!", "Ben Jones", "Michael Jelenic", "November14,2008", 101.0, "700"], [4.0, "Day of the Dark Knight!", "Ben Jones", "J. M. DeMatteis", "January2,2009", 104.0, "704"], [7.0, "Dawn of the Dead Man!", "Ben Jones", "Steven Melching", "January16,2009", 107.0, "707"], [10.0, "The Eyes of Despero!", "Ben Jones", "J. M. DeMatteis", "February6,2009", 110.0, "728"]], "gt": [["The Rise of the Blue Beetle!"], ["Day of the Dark Knight!"], ["Dawn of the Dead Man!"], ["The Eyes of Despero!"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Day of the Dark Knight!"], ["Dawn of the Dead Man!"], ["The Eyes of Despero!"]]}}
{"result": "```sql\nSELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';\n```", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date", "match": {"match": true, "result": [["Invasion of the Secret Santas!", "Brandon Vietti"], ["Evil Under the Sea!", "Michael Chang"], ["Return of the Fearsome Fangs!", "Brandon Vietti"], ["Deep Cover for Batman!", "Michael Chang"], ["The Eyes of Despero!", "Ben Jones"], ["Dawn of the Dead Man!", "Ben Jones"], ["Day of the Dark Knight!", "Ben Jones"], ["Fall of the Blue Beetle!", "Brandon Vietti"], ["Journey to the Center of the Bat!", "Michael Chang"], ["Enter the Outsiders!", "Michael Chang"], ["The Rise of the Blue Beetle!", "Ben Jones"], ["Terror on Dinosaur Island!", "Brandon Vietti"]]}}
{"result": "```sql\nSELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;\n```", "match": {"match": true, "result": [["Invasion of the Secret Santas!", "Brandon Vietti"], ["Evil Under the Sea!", "Michael Chang"], ["Return of the Fearsome Fangs!", "Brandon Vietti"], ["Deep Cover for Batman!", "Michael Chang"], ["The Eyes of Despero!", "Ben Jones"], ["Dawn of the Dead Man!", "Ben Jones"], ["Day of the Dark Knight!", "Ben Jones"], ["Fall of the Blue Beetle!", "Brandon Vietti"], ["Journey to the Center of the Bat!", "Michael Chang"], ["Enter the Outsiders!", "Michael Chang"], ["The Rise of the Blue Beetle!", "Ben Jones"], ["Terror on Dinosaur Island!", "Brandon Vietti"]]}}
{"result": "SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti')", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Terror on Dinosaur Island!"], ["Day of the Dark Knight!"], ["Invasion of the Secret Santas!"], ["Dawn of the Dead Man!"], ["Fall of the Blue Beetle!"], ["The Eyes of Despero!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Terror on Dinosaur Island!"], ["Day of the Dark Knight!"], ["Invasion of the Secret Santas!"], ["Dawn of the Dead Man!"], ["Fall of the Blue Beetle!"], ["The Eyes of Despero!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "```sql\nSELECT Country, COUNT(*) AS Number_of_Channels\nFROM TV_Channel\nGROUP BY Country\nORDER BY Number_of_Channels DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [["Italy", 12]]}}
{"result": "SELECT Country, COUNT(*) as Channel_Count FROM TV_Channel GROUP BY Country ORDER BY Channel_Count DESC LIMIT 1", "match": {"match": true, "result": [["Italy", 12]]}}
{"result": "SELECT COUNT(DISTINCT series_name) AS number_of_series, COUNT(DISTINCT Content) AS number_of_contents FROM TV_Channel", "match": {"match": true, "result": [[15, 1]]}}
{"result": "SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel", "match": {"match": true, "result": [[15, 1]]}}
{"result": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'", "match": {"match": true, "result": [["music"]]}}
{"result": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'", "match": {"match": true, "result": [["music"]]}}
{"result": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'", "match": {"match": true, "result": [["Sky Famiglia"]]}}
{"result": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'", "match": {"match": true, "result": [["Sky Famiglia"]]}}
{"result": "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Language, COUNT(*) as Number_of_Channels FROM TV_Channel GROUP BY Language ORDER BY Number_of_Channels ASC LIMIT 1", "match": {"match": true, "result": [["English", 3]]}}
{"result": "SELECT Language, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY Language ORDER BY Channel_Count ASC LIMIT 1", "match": {"match": true, "result": [["English", 3]]}}
{"result": "SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language", "match": {"match": true, "result": [["English", 3], ["Italian", 12]]}}
{"result": "SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language", "match": {"match": true, "result": [["English", 3], ["Italian", 12]]}}
{"result": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'", "match": {"match": true, "result": [["Sky Radio"]]}}
{"result": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle'", "match": {"match": false, "result": [], "gt": [["Sky Radio"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT T2.Title\nFROM TV_Channel AS T1\nJOIN Cartoon AS T2 ON T1.id = T2.Channel\nWHERE T1.series_name = 'Sky Radio';\n```", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT T2.Title FROM TV_Channel AS T1 INNER JOIN Cartoon AS T2 ON T2.Channel = T1.id WHERE T1.series_name = 'Sky Radio'", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT Episode FROM TV_series ORDER BY Rating;", "match": {"match": true, "result": [["The Hanged Man"], ["Double Down"], ["Home By Another Way"], ["Keepers"], ["Emily"], ["Blowback"], ["The Legend of Dylan McCleen"], ["Winterland"], ["The Year of the Rabbit"], ["Game Three"], ["Friendly Skies"], ["A Love of a Lifetime"]]}}
{"result": "SELECT Episode FROM TV_series ORDER BY Rating;", "match": {"match": true, "result": [["The Hanged Man"], ["Double Down"], ["Home By Another Way"], ["Keepers"], ["Emily"], ["Blowback"], ["The Legend of Dylan McCleen"], ["Winterland"], ["The Year of the Rabbit"], ["Game Three"], ["Friendly Skies"], ["A Love of a Lifetime"]]}}
{"result": "```sql\nSELECT Episode, Rating \nFROM TV_series \nORDER BY Rating DESC \nLIMIT 3;\n```", "match": {"match": true, "result": [["A Love of a Lifetime", "5.8"], ["Friendly Skies", "5.3"], ["Game Three", "4.4"]]}}
{"result": "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3", "match": {"match": true, "result": [["A Love of a Lifetime", "5.8"], ["Friendly Skies", "5.3"], ["Game Three", "4.4"]]}}
{"result": "```sql\nSELECT MIN(Share), MAX(Share) FROM TV_series;\n```", "match": {"match": false, "result": [[5.0, 9.0]], "gt": [[9.0, 5.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT max(Share) ,  min(Share) FROM TV_series", "match": {"match": true, "result": [[9.0, 5.0]]}}
{"result": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'", "match": {"match": true, "result": [["September 24, 2007"]]}}
{"result": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'", "match": {"match": true, "result": [["September 24, 2007"]]}}
{"result": "```sql\nSELECT \"Weekly_Rank\" FROM \"TV_series\" WHERE \"Episode\" = 'A Love of a Lifetime';\n```", "match": {"match": true, "result": [[43.0]]}}
{"result": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'", "match": {"match": true, "result": [[43.0]]}}
{"result": "SELECT T2.series_name FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Episode = 'A Love of a Lifetime'", "match": {"match": true, "result": [["Sky Radio"]]}}
{"result": "SELECT T2.series_name FROM TV_series AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Episode = 'A Love of a Lifetime'", "match": {"match": true, "result": [["Sky Radio"]]}}
{"result": "SELECT T2.Episode FROM TV_Channel AS T1 INNER JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'", "match": {"match": true, "result": [["A Love of a Lifetime"], ["Keepers"]]}}
{"result": "SELECT T2.Episode FROM TV_Channel AS T1 INNER JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio';", "match": {"match": true, "result": [["A Love of a Lifetime"], ["Keepers"]]}}
{"result": "SELECT Directed_by ,  COUNT(*) FROM Cartoon GROUP BY Directed_by", "match": {"match": false, "result": [["Ben Jones", 4], ["Brandon Vietti", 4], ["Michael Chang", 4]], "gt": [[4, "Ben Jones"], [4, "Brandon Vietti"], [4, "Michael Chang"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT directed_by, COUNT(*) AS number_of_cartoons\nFROM Cartoon\nGROUP BY directed_by;\n```", "match": {"match": false, "result": [["Ben Jones", 4], ["Brandon Vietti", 4], ["Michael Chang", 4]], "gt": [[4, "Ben Jones"], [4, "Brandon Vietti"], [4, "Michael Chang"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT production_code, channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1", "match": {"match": true, "result": [[102.0, "701"]]}}
{"result": "```sql\nSELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;\n```", "match": {"match": true, "result": [[102.0, "701"]]}}
{"result": "SELECT T2.Package_Option, T1.series_name FROM TV_Channel AS T1 INNER JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Hight_definition_TV = 'yes'", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Package_Option"}}
{"result": "SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes'", "match": {"match": false, "result": [], "gt": [["Sky Famiglia + Sky HD", "MTV Live HD"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT DISTINCT T2.Country\nFROM Cartoon AS T1\nJOIN TV_Channel AS T2 ON T1.Channel = T2.id\nWHERE T1.Written_by = 'Todd Casey';\n```", "match": {"match": true, "result": [["United Kingdom"], ["Italy"]]}}
{"result": "```sql\nSELECT DISTINCT T1.Country\nFROM TV_Channel AS T1\nJOIN Cartoon AS T2 ON T1.id = T2.Channel\nWHERE T2.Written_by = 'Todd Casey';\n```", "match": {"match": true, "result": [["United Kingdom"], ["Italy"]]}}
{"result": "SELECT country FROM TV_channel WHERE id NOT IN ( SELECT channel FROM Cartoon WHERE written_by = 'Todd Casey' )", "match": {"match": false, "result": [["Italy"], ["Italy"], ["Italy"], ["Italy"], ["United Kingdom"], ["Italy"], ["Poland"], ["Italy"], ["Italy"], ["Italy"], ["Italy"], ["Italy"], ["Italy"]], "gt": [["Poland"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT DISTINCT Country\nFROM TV_Channel\nWHERE id NOT IN (\n    SELECT Channel\n    FROM Cartoon\n    WHERE Written_by = 'Todd Casey'\n);\n```", "match": {"match": false, "result": [["Italy"], ["United Kingdom"], ["Poland"]], "gt": [["Poland"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT DISTINCT tc.series_name, tc.Country\nFROM TV_Channel tc\nJOIN Cartoon c ON tc.id = c.Channel\nWHERE c.directed_by IN ('Ben Jones', 'Michael Chang');\n```", "match": {"match": false, "result": [["Sky Radio", "Italy"], ["Music Box Italia", "Italy"], ["MTV Hits", "Italy"], ["MTV Rocks", "United Kingdom"], ["MTV Dance", "United Kingdom"], ["Classica", "Italy"]], "gt": [["MTV Dance", "United Kingdom"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT DISTINCT T1.series_name, T1.Country \nFROM TV_Channel AS T1 \nJOIN Cartoon AS T2 ON T1.id = T2.Channel \nWHERE T2.directed_by IN ('Ben Jones', 'Michael Chang');\n```", "match": {"match": false, "result": [["Sky Radio", "Italy"], ["Music Box Italia", "Italy"], ["MTV Hits", "Italy"], ["MTV Rocks", "United Kingdom"], ["MTV Dance", "United Kingdom"], ["Classica", "Italy"]], "gt": [["MTV Dance", "United Kingdom"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'", "match": {"match": true, "result": [["4:3", "Italy"], ["4:3", "Italy"], ["4:3 / 16:9", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3", "Italy"], ["4:3", "Italy"]]}}
{"result": "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'", "match": {"match": true, "result": [["4:3", "Italy"], ["4:3", "Italy"], ["4:3 / 16:9", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3", "Italy"], ["4:3", "Italy"]]}}
{"result": "```sql\nSELECT id\nFROM TV_Channel\nWHERE Country IN (\n    SELECT Country\n    FROM TV_Channel\n    GROUP BY Country\n    HAVING COUNT(id) > 2\n);\n```", "match": {"match": false, "result": [["700"], ["701"], ["703"], ["704"], ["705"], ["708"], ["713"], ["714"], ["715"], ["717"], ["719"], ["728"]], "gt": [["700"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(id) > 2", "match": {"match": false, "result": [], "gt": [["700"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')", "match": {"match": true, "result": [["701"], ["703"], ["705"], ["706"], ["708"], ["709"], ["713"], ["714"], ["715"], ["717"], ["719"]]}}
{"result": "SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')", "match": {"match": true, "result": [["701"], ["703"], ["705"], ["706"], ["708"], ["709"], ["713"], ["714"], ["715"], ["717"], ["719"]]}}
{"result": "SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')", "match": {"match": true, "result": [["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["no ( FTV )"], ["Sky Famiglia + Sky HD"], ["no ( FTV )"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"]]}}
{"result": "SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')", "match": {"match": true, "result": [["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["no ( FTV )"], ["Sky Famiglia + Sky HD"], ["no ( FTV )"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"]]}}
{"result": "```sql\nSELECT COUNT(*) FROM poker_player;\n```", "match": {"match": true, "result": [[5]]}}
{"result": "```sql\nSELECT COUNT(*) FROM poker_player;\n```", "match": {"match": true, "result": [[5]]}}
{"result": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "match": {"match": true, "result": [[596462.0], [476090.0], [189233.0], [142800.0], [104871.0]]}}
{"result": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "match": {"match": true, "result": [[596462.0], [476090.0], [189233.0], [142800.0], [104871.0]]}}
{"result": "```sql\nSELECT Final_Table_Made, Best_Finish FROM poker_player;\n```", "match": {"match": true, "result": [[42.0, 1.0], [10.0, 2.0], [21.0, 1.0], [19.0, 2.0], [26.0, 3.0]]}}
{"result": "SELECT Final_Table_Made, Best_Finish FROM poker_player", "match": {"match": true, "result": [[42.0, 1.0], [10.0, 2.0], [21.0, 1.0], [19.0, 2.0], [26.0, 3.0]]}}
{"result": "SELECT AVG(Earnings) FROM poker_player", "match": {"match": true, "result": [[301891.2]]}}
{"result": "SELECT AVG(Earnings) FROM poker_player", "match": {"match": true, "result": [[301891.2]]}}
{"result": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "match": {"match": true, "result": [[58.0]]}}
{"result": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "match": {"match": true, "result": [[58.0]]}}
{"result": "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000", "match": {"match": true, "result": [[26.0]]}}
{"result": "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000", "match": {"match": true, "result": [[26.0]]}}
{"result": "SELECT T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Teodor Salparov"], ["Yevgeni Sivozhelez"], ["Maksim Botin"], ["Semen Poltavskiy"]]}}
{"result": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Teodor Salparov"], ["Yevgeni Sivozhelez"], ["Maksim Botin"], ["Semen Poltavskiy"]]}}
{"result": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings > 300000", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Maksim Botin"]]}}
{"result": "SELECT T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings > 300000", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Maksim Botin"]]}}
{"result": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Final_Table_Made ASC", "match": {"match": true, "result": [["Teodor Salparov"], ["Maksim Botin"], ["Yevgeni Sivozhelez"], ["Semen Poltavskiy"], ["Aleksey Ostapenko"]]}}
{"result": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Final_Table_Made ASC", "match": {"match": true, "result": [["Teodor Salparov"], ["Maksim Botin"], ["Yevgeni Sivozhelez"], ["Semen Poltavskiy"], ["Aleksey Ostapenko"]]}}
{"result": "SELECT T2.Birth_Date FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings ASC LIMIT 1", "match": {"match": true, "result": [["August 8, 1986"]]}}
{"result": "SELECT T2.Birth_Date FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings ASC LIMIT 1", "match": {"match": true, "result": [["August 8, 1986"]]}}
{"result": "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height DESC LIMIT 1", "match": {"match": true, "result": [[68.0]]}}
{"result": "SELECT T2.Money_Rank FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "match": {"match": true, "result": [[68.0]]}}
{"result": "SELECT AVG(Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200", "match": {"match": true, "result": [[309445.0]]}}
{"result": "SELECT AVG(T1.Earnings) FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200", "match": {"match": true, "result": [[309445.0]]}}
{"result": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings DESC", "match": {"match": true, "result": [["Maksim Botin"], ["Aleksey Ostapenko"], ["Teodor Salparov"], ["Semen Poltavskiy"], ["Yevgeni Sivozhelez"]]}}
{"result": "```sql\nSELECT p.Name\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nORDER BY pp.Earnings DESC;\n```", "match": {"match": true, "result": [["Maksim Botin"], ["Aleksey Ostapenko"], ["Teodor Salparov"], ["Semen Poltavskiy"], ["Yevgeni Sivozhelez"]]}}
{"result": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "match": {"match": true, "result": [["Bulgaria", 1], ["Russia", 6]]}}
{"result": "```sql\nSELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;\n```", "match": {"match": true, "result": [["Bulgaria", 1], ["Russia", 6]]}}
{"result": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(Nationality) >= 2", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2", "match": {"match": true, "result": [["Russia"]]}}
{"result": "```sql\nSELECT Name, Birth_Date FROM people ORDER BY Name ASC;\n```", "match": {"match": true, "result": [["Aleksey Ostapenko", "May 26, 1986"], ["Maksim Botin", "July 14, 1983"], ["Roman Bragin", "April 17, 1987"], ["Semen Poltavskiy", "February 8, 1981"], ["Sergey Grankin", "January 22, 1987"], ["Teodor Salparov", "August 16, 1982"], ["Yevgeni Sivozhelez", "August 8, 1986"]]}}
{"result": "SELECT Name, Birth_Date FROM people ORDER BY Name", "match": {"match": true, "result": [["Aleksey Ostapenko", "May 26, 1986"], ["Maksim Botin", "July 14, 1983"], ["Roman Bragin", "April 17, 1987"], ["Semen Poltavskiy", "February 8, 1981"], ["Sergey Grankin", "January 22, 1987"], ["Teodor Salparov", "August 16, 1982"], ["Yevgeni Sivozhelez", "August 8, 1986"]]}}
{"result": "SELECT Name FROM people WHERE Nationality != 'Russia'", "match": {"match": true, "result": [["Teodor Salparov"]]}}
{"result": "SELECT Name FROM people WHERE Nationality != 'Russia'", "match": {"match": true, "result": [["Teodor Salparov"]]}}
{"result": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "match": {"match": true, "result": [["Roman Bragin"], ["Sergey Grankin"]]}}
{"result": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);", "match": {"match": true, "result": [["Roman Bragin"], ["Sergey Grankin"]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM people", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM people", "match": {"match": true, "result": [[2]]}}
{"result": "```sql\nSELECT COUNT(*) FROM conductor;\n```", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT COUNT(*) FROM conductor", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT Name FROM conductor ORDER BY Age ASC", "match": {"match": true, "result": [["Antal Dor\u00e1ti"], ["Igor Stravinsky"], ["Colin Davis"], ["Michael Tilson Thomas"], ["Paul Jorgensen"], ["Antal Brown"], ["Charles Dutoit"], ["Seiji Ozawa"], ["Valeri Gergiev"], ["Pierre Boulez"], ["Gerard Schwarz"], ["Robert Craft"]]}}
{"result": "SELECT Name FROM conductor ORDER BY Age;", "match": {"match": true, "result": [["Antal Dor\u00e1ti"], ["Igor Stravinsky"], ["Colin Davis"], ["Michael Tilson Thomas"], ["Paul Jorgensen"], ["Antal Brown"], ["Charles Dutoit"], ["Seiji Ozawa"], ["Valeri Gergiev"], ["Pierre Boulez"], ["Gerard Schwarz"], ["Robert Craft"]]}}
{"result": "```sql\nSELECT Name FROM conductor WHERE Nationality != 'USA';\n```", "match": {"match": true, "result": [["Igor Stravinsky"], ["Paul Jorgensen"], ["Charles Dutoit"], ["Pierre Boulez"], ["Robert Craft"], ["Michael Tilson Thomas"]]}}
{"result": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "match": {"match": true, "result": [["Igor Stravinsky"], ["Paul Jorgensen"], ["Charles Dutoit"], ["Pierre Boulez"], ["Robert Craft"], ["Michael Tilson Thomas"]]}}
{"result": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "match": {"match": true, "result": [["Columbia Masterworks"], ["Philips"], ["Philips Classics Records"], ["RCA"], ["EMI"], ["Koch Records / Naxos Records"], ["Decca Records"], ["Mercury Records"], ["Deutsche Grammophon"], ["Kultur"], ["Decca Records"], ["Delos Records"]]}}
{"result": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "match": {"match": true, "result": [["Columbia Masterworks"], ["Philips"], ["Philips Classics Records"], ["RCA"], ["EMI"], ["Koch Records / Naxos Records"], ["Decca Records"], ["Mercury Records"], ["Deutsche Grammophon"], ["Kultur"], ["Decca Records"], ["Delos Records"]]}}
{"result": "SELECT AVG(Attendance) FROM show", "match": {"match": true, "result": [[1326.4]]}}
{"result": "SELECT AVG(Attendance) FROM show", "match": {"match": true, "result": [[1326.4]]}}
{"result": "SELECT max(Share) ,  min(Share) FROM performance WHERE TYPE != \"Live final\"", "match": {"match": true, "result": [["44.7%", "22.7%"]]}}
{"result": "SELECT max(Share) ,  min(Share) FROM performance WHERE TYPE != \"Live final\"", "match": {"match": true, "result": [["44.7%", "22.7%"]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM conductor", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM conductor", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "match": {"match": true, "result": [["Robert Craft"], ["Antal Brown"], ["Gerard Schwarz"], ["Valeri Gergiev"], ["Charles Dutoit"], ["Michael Tilson Thomas"], ["Igor Stravinsky"], ["Paul Jorgensen"], ["Pierre Boulez"], ["Antal Dor\u00e1ti"], ["Seiji Ozawa"], ["Colin Davis"]]}}
{"result": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "match": {"match": true, "result": [["Robert Craft"], ["Antal Brown"], ["Gerard Schwarz"], ["Valeri Gergiev"], ["Charles Dutoit"], ["Michael Tilson Thomas"], ["Igor Stravinsky"], ["Paul Jorgensen"], ["Pierre Boulez"], ["Antal Dor\u00e1ti"], ["Seiji Ozawa"], ["Colin Davis"]]}}
{"result": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "match": {"match": true, "result": [["Robert Craft"]]}}
{"result": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "match": {"match": true, "result": [["Robert Craft"]]}}
{"result": "SELECT T2.Name, T1.Orchestra FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID", "match": {"match": true, "result": [["Antal Dor\u00e1ti", "London Symphony Orchestra"], ["Igor Stravinsky", "Columbia Symphony Orchestra"], ["Colin Davis", "Royal Concertgebouw Orchestra"], ["Paul Jorgensen", "Royal Danish Orchestra"], ["Antal Brown", "Detroit Symphony Orchestra"], ["Charles Dutoit", "Montreal Symphony Orchestra"], ["Gerard Schwarz", "Seattle Symphony Orchestra"], ["Pierre Boulez", "Chicago Symphony Orchestra"], ["Valeri Gergiev", "Kirov Orchestra"], ["Robert Craft", "Philharmonia Orchestra"], ["Seiji Ozawa", "Orchestre de Paris"], ["Michael Tilson Thomas", "San Francisco Symphony Orchestra"]]}}
{"result": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "match": {"match": true, "result": [["Antal Dor\u00e1ti", "London Symphony Orchestra"], ["Igor Stravinsky", "Columbia Symphony Orchestra"], ["Colin Davis", "Royal Concertgebouw Orchestra"], ["Paul Jorgensen", "Royal Danish Orchestra"], ["Antal Brown", "Detroit Symphony Orchestra"], ["Charles Dutoit", "Montreal Symphony Orchestra"], ["Gerard Schwarz", "Seattle Symphony Orchestra"], ["Pierre Boulez", "Chicago Symphony Orchestra"], ["Valeri Gergiev", "Kirov Orchestra"], ["Robert Craft", "Philharmonia Orchestra"], ["Seiji Ozawa", "Orchestre de Paris"], ["Michael Tilson Thomas", "San Francisco Symphony Orchestra"]]}}
{"result": "SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name HAVING COUNT(orchestra.Orchestra_ID) > 1", "match": {"match": true, "result": []}}
{"result": "SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID HAVING COUNT(o.Orchestra_ID) > 1", "match": {"match": true, "result": []}}
{"result": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "match": {"match": false, "result": [["Valeri Gergiev"]], "gt": [["Michael Tilson Thomas"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(T1.Orchestra_ID) DESC LIMIT 1", "match": {"match": true, "result": [["Michael Tilson Thomas"]]}}
{"result": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE T2.Year_of_Founded  >  '2008'", "match": {"match": true, "result": [["Igor Stravinsky"]]}}
{"result": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008", "match": {"match": true, "result": [["Igor Stravinsky"]]}}
{"result": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "match": {"match": true, "result": [["Columbia Masterworks", 1], ["Decca Records", 2], ["Delos Records", 1], ["Deutsche Grammophon", 1], ["EMI", 1], ["Koch Records / Naxos Records", 1], ["Kultur", 1], ["Mercury Records", 1], ["Philips", 1], ["Philips Classics Records", 1], ["RCA", 1]]}}
{"result": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "match": {"match": true, "result": [["Columbia Masterworks", 1], ["Decca Records", 2], ["Delos Records", 1], ["Deutsche Grammophon", 1], ["EMI", 1], ["Koch Records / Naxos Records", 1], ["Kultur", 1], ["Mercury Records", 1], ["Philips", 1], ["Philips Classics Records", 1], ["RCA", 1]]}}
{"result": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "match": {"match": true, "result": [["CD / LP"], ["DVD"], ["CD"]]}}
{"result": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) DESC", "match": {"match": false, "result": [["CD"], ["DVD"], ["CD / LP"]], "gt": [["CD / LP"], ["DVD"], ["CD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "match": {"match": true, "result": [["Decca Records"]]}}
{"result": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "match": {"match": true, "result": [["Decca Records"]]}}
{"result": "SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN (SELECT orchestra_id FROM performance)", "match": {"match": true, "result": [["San Francisco Symphony Orchestra"]]}}
{"result": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "match": {"match": true, "result": [["San Francisco Symphony Orchestra"]]}}
{"result": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003", "match": {"match": true, "result": [["Decca Records"]]}}
{"result": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003", "match": {"match": true, "result": [["Decca Records"]]}}
{"result": "```sql\nSELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');\n```", "match": {"match": true, "result": [[11]]}}
{"result": "```sql\nSELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');\n```", "match": {"match": true, "result": [[11]]}}
{"result": "```sql\nSELECT T2.Year_of_Founded\nFROM performance AS T1\nJOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID\nGROUP BY T2.Orchestra_ID\nHAVING COUNT(T1.Performance_ID) > 1;\n```", "match": {"match": true, "result": []}}
{"result": "SELECT T2.Year_of_Founded FROM performance AS T1 JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*) > 1", "match": {"match": true, "result": []}}
{"result": "```sql\nSELECT COUNT(*) FROM Highschooler;\n```", "match": {"match": true, "result": [[16]]}}
{"result": "```sql\nSELECT COUNT(ID) FROM Highschooler;\n```", "match": {"match": true, "result": [[16]]}}
{"result": "```sql\nSELECT name, grade FROM Highschooler;\n```", "match": {"match": true, "result": [["Jordan", 9], ["Gabriel", 9], ["Tiffany", 9], ["Cassandra", 9], ["Haley", 10], ["Andrew", 10], ["Kris", 10], ["Brittany", 10], ["Alexis", 11], ["Austin", 11], ["Gabriel", 11], ["Jessica", 11], ["Jordan", 12], ["John", 12], ["Kyle", 12], ["Logan", 12]]}}
{"result": "```sql\nSELECT name, grade FROM Highschooler;\n```", "match": {"match": true, "result": [["Jordan", 9], ["Gabriel", 9], ["Tiffany", 9], ["Cassandra", 9], ["Haley", 10], ["Andrew", 10], ["Kris", 10], ["Brittany", 10], ["Alexis", 11], ["Austin", 11], ["Gabriel", 11], ["Jessica", 11], ["Jordan", 12], ["John", 12], ["Kyle", 12], ["Logan", 12]]}}
{"result": "SELECT DISTINCT grade FROM Highschooler;", "match": {"match": false, "result": [[9], [10], [11], [12]], "gt": [[9], [9], [9], [9], [10], [10], [10], [10], [11], [11], [11], [11], [12], [12], [12], [12]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT name, grade FROM Highschooler;\n```", "match": {"match": false, "result": [["Jordan", 9], ["Gabriel", 9], ["Tiffany", 9], ["Cassandra", 9], ["Haley", 10], ["Andrew", 10], ["Kris", 10], ["Brittany", 10], ["Alexis", 11], ["Austin", 11], ["Gabriel", 11], ["Jessica", 11], ["Jordan", 12], ["John", 12], ["Kyle", 12], ["Logan", 12]], "gt": [[9], [9], [9], [9], [10], [10], [10], [10], [11], [11], [11], [11], [12], [12], [12], [12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT grade FROM Highschooler WHERE name = 'Kyle'", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT grade FROM Highschooler WHERE name = 'Kyle'", "match": {"match": true, "result": [[12]]}}
{"result": "```sql\nSELECT name FROM Highschooler WHERE grade = 10;\n```", "match": {"match": true, "result": [["Haley"], ["Andrew"], ["Kris"], ["Brittany"]]}}
{"result": "SELECT name FROM Highschooler WHERE grade = 10", "match": {"match": true, "result": [["Haley"], ["Andrew"], ["Kris"], ["Brittany"]]}}
{"result": "```sql\nSELECT ID FROM Highschooler WHERE name = 'Kyle';\n```", "match": {"match": true, "result": [[1934]]}}
{"result": "SELECT id FROM Highschooler WHERE name = 'Kyle'", "match": {"match": true, "result": [[1934]]}}
{"result": "SELECT count(*) FROM Highschooler WHERE grade = 9 OR grade = 10", "match": {"match": true, "result": [[8]]}}
{"result": "```sql\nSELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);\n```", "match": {"match": true, "result": [[8]]}}
{"result": "```sql\nSELECT grade, COUNT(*) FROM Highschooler GROUP BY grade;\n```", "match": {"match": true, "result": [[9, 4], [10, 4], [11, 4], [12, 4]]}}
{"result": "```sql\nSELECT grade, COUNT(*) FROM Highschooler GROUP BY grade;\n```", "match": {"match": true, "result": [[9, 4], [10, 4], [11, 4], [12, 4]]}}
{"result": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4", "match": {"match": true, "result": [[9], [10], [11], [12]]}}
{"result": "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4", "match": {"match": true, "result": [[9], [10], [11], [12]]}}
{"result": "```sql\nSELECT student_id, COUNT(friend_id) AS num_friends\nFROM Friend\nGROUP BY student_id;\n```", "match": {"match": true, "result": [[1101, 1], [1247, 2], [1304, 1], [1316, 1], [1381, 1], [1468, 2], [1501, 1], [1510, 2], [1661, 1], [1689, 2], [1709, 1], [1782, 3], [1911, 1], [1934, 1]]}}
{"result": "SELECT student_id, COUNT(friend_id) as friend_count FROM Friend GROUP BY student_id", "match": {"match": true, "result": [[1101, 1], [1247, 2], [1304, 1], [1316, 1], [1381, 1], [1468, 2], [1501, 1], [1510, 2], [1661, 1], [1689, 2], [1709, 1], [1782, 3], [1911, 1], [1934, 1]]}}
{"result": "SELECT H1.name, COUNT(*) as num_friends\nFROM Highschooler H1\nJOIN Friend F ON H1.ID = F.student_id\nGROUP BY H1.ID;", "match": {"match": true, "result": [["Haley", 1], ["Alexis", 2], ["Jordan", 1], ["Austin", 1], ["Tiffany", 1], ["Kris", 2], ["Jessica", 1], ["Jordan", 2], ["Logan", 1], ["Gabriel", 2], ["Cassandra", 1], ["Andrew", 3], ["Gabriel", 1], ["Kyle", 1]]}}
{"result": "SELECT h.name, COUNT(f.friend_id) as friend_count FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id GROUP BY h.name;", "match": {"match": false, "result": [["Alexis", 2], ["Andrew", 3], ["Austin", 1], ["Brittany", 0], ["Cassandra", 1], ["Gabriel", 3], ["Haley", 1], ["Jessica", 1], ["John", 0], ["Jordan", 3], ["Kris", 2], ["Kyle", 1], ["Logan", 1], ["Tiffany", 1]], "gt": [["Haley", 1], ["Alexis", 2], ["Jordan", 1], ["Austin", 1], ["Tiffany", 1], ["Kris", 2], ["Jessica", 1], ["Jordan", 2], ["Logan", 1], ["Gabriel", 2], ["Cassandra", 1], ["Andrew", 3], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT name \nFROM Highschooler \nWHERE ID = (SELECT student_id \n            FROM Friend \n            GROUP BY student_id \n            ORDER BY COUNT(friend_id) DESC \n            LIMIT 1);\n```", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1", "match": {"match": false, "result": [["Jordan"]], "gt": [["Andrew"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID HAVING COUNT(T2.friend_id) >= 3", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.name HAVING COUNT(*) >= 3", "match": {"match": false, "result": [["Andrew"], ["Gabriel"], ["Jordan"]], "gt": [["Andrew"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T3.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id JOIN Highschooler AS T3 ON T2.friend_id  =  T3.ID WHERE T1.name  =  'Kyle'", "match": {"match": true, "result": [["Jordan"]]}}
{"result": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.ID JOIN Highschooler AS T3 ON T1.friend_id  =  T3.ID WHERE T2.name  =  'Kyle'", "match": {"match": true, "result": [["Jordan"]]}}
{"result": "SELECT COUNT(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID WHERE T2.name = 'Kyle'", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT id FROM Highschooler WHERE id NOT IN (SELECT student_id FROM Friend)", "match": {"match": true, "result": [[1025], [1641]]}}
{"result": "SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)", "match": {"match": true, "result": [[1025], [1641]]}}
{"result": "SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)", "match": {"match": true, "result": [["Brittany"], ["John"]]}}
{"result": "SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)", "match": {"match": true, "result": [["Brittany"], ["John"]]}}
{"result": "SELECT ID FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend) AND ID IN (SELECT liked_id FROM Likes)", "match": {"match": true, "result": [[1101], [1247], [1304], [1468], [1501], [1689], [1709], [1934]]}}
{"result": "SELECT student_id FROM friend INTERSECT SELECT student_id FROM likes", "match": {"match": false, "result": [[1247], [1316], [1501], [1689], [1709], [1782], [1911], [1934]], "gt": [[1101], [1247], [1304], [1468], [1501], [1689], [1709], [1934]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT name \nFROM Highschooler \nWHERE ID IN (SELECT student_id FROM Friend) \n  AND ID IN (SELECT liked_id FROM Likes);\n```", "match": {"match": false, "result": [["Haley"], ["Alexis"], ["Jordan"], ["Kris"], ["Jessica"], ["Gabriel"], ["Cassandra"], ["Kyle"]], "gt": [["Alexis"], ["Cassandra"], ["Gabriel"], ["Haley"], ["Jessica"], ["Jordan"], ["Kris"], ["Kyle"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend) AND ID IN (SELECT liked_id FROM Likes)", "match": {"match": false, "result": [["Haley"], ["Alexis"], ["Jordan"], ["Kris"], ["Jessica"], ["Gabriel"], ["Cassandra"], ["Kyle"]], "gt": [["Alexis"], ["Cassandra"], ["Gabriel"], ["Haley"], ["Jessica"], ["Jordan"], ["Kris"], ["Kyle"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT student_id, COUNT(liked_id) AS number_of_likes\nFROM Likes\nGROUP BY student_id;\n```", "match": {"match": true, "result": [[1025, 1], [1247, 1], [1316, 1], [1501, 1], [1641, 1], [1689, 1], [1709, 1], [1782, 1], [1911, 1], [1934, 1]]}}
{"result": "SELECT student_id, COUNT(liked_id) as like_count FROM Likes GROUP BY student_id", "match": {"match": true, "result": [[1025, 1], [1247, 1], [1316, 1], [1501, 1], [1641, 1], [1689, 1], [1709, 1], [1782, 1], [1911, 1], [1934, 1]]}}
{"result": "```sql\nSELECT H1.name, COUNT(L.student_id) AS number_of_likes\nFROM Highschooler H1\nJOIN Likes L ON H1.ID = L.student_id\nGROUP BY H1.name;\n```", "match": {"match": false, "result": [["Alexis", 1], ["Andrew", 1], ["Austin", 1], ["Brittany", 1], ["Cassandra", 1], ["Gabriel", 2], ["Jessica", 1], ["John", 1], ["Kyle", 1]], "gt": [["John", 1], ["Alexis", 1], ["Austin", 1], ["Jessica", 1], ["Brittany", 1], ["Gabriel", 1], ["Cassandra", 1], ["Andrew", 1], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT name, COUNT(*) as like_count\nFROM Highschooler\nJOIN Likes ON Highschooler.ID = Likes.student_id\nGROUP BY name;\n```", "match": {"match": false, "result": [["Alexis", 1], ["Andrew", 1], ["Austin", 1], ["Brittany", 1], ["Cassandra", 1], ["Gabriel", 2], ["Jessica", 1], ["John", 1], ["Kyle", 1]], "gt": [["John", 1], ["Alexis", 1], ["Austin", 1], ["Jessica", 1], ["Brittany", 1], ["Gabriel", 1], ["Cassandra", 1], ["Andrew", 1], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT T1.name\nFROM Highschooler AS T1\nJOIN Likes AS T2 ON T1.ID = T2.student_id\nGROUP BY T1.ID\nORDER BY COUNT(*) DESC\nLIMIT 1\n```", "match": {"match": true, "result": [["John"]]}}
{"result": "```sql\nSELECT H1.name\nFROM Highschooler H1\nJOIN Likes L ON H1.ID = L.student_id\nGROUP BY H1.ID\nORDER BY COUNT(*) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [["John"]]}}
{"result": "```sql\nSELECT name\nFROM Highschooler\nWHERE ID IN (\n    SELECT student_id\n    FROM Likes\n    GROUP BY student_id\n    HAVING COUNT(liked_id) >= 2\n);\n```", "match": {"match": true, "result": []}}
{"result": "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.name HAVING COUNT(*) >= 2", "match": {"match": false, "result": [["Gabriel"]], "gt": [], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT h1.name\nFROM Highschooler h1\nJOIN Friend f ON h1.ID = f.student_id\nWHERE h1.grade > 5\nGROUP BY h1.ID\nHAVING COUNT(f.friend_id) >= 2;\n```", "match": {"match": true, "result": [["Alexis"], ["Kris"], ["Jordan"], ["Gabriel"], ["Andrew"]]}}
{"result": "```sql\nSELECT H1.name\nFROM Highschooler H1\nJOIN Friend F ON H1.ID = F.student_id\nWHERE H1.grade > 5\nGROUP BY H1.ID\nHAVING COUNT(F.friend_id) >= 2;\n```", "match": {"match": true, "result": [["Alexis"], ["Kris"], ["Jordan"], ["Gabriel"], ["Andrew"]]}}
{"result": "SELECT count(*) FROM Likes L JOIN Highschooler H ON L.student_id = H.ID WHERE H.name = 'Kyle'", "match": {"match": true, "result": [[1]]}}
{"result": "```sql\nSELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');\n```", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT student_id FROM Friend)", "match": {"match": true, "result": [[10.428571428571429]]}}
{"result": "SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)", "match": {"match": true, "result": [[10.428571428571429]]}}
{"result": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT student_id FROM Friend)", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT student_id FROM Friend)", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "match": {"match": true, "result": [["Indiana"], ["Mississippi"], ["Wisconsin"]]}}
{"result": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "match": {"match": true, "result": [["Indiana"], ["Mississippi"], ["Wisconsin"]]}}
{"result": "SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)", "match": {"match": true, "result": [[5.111111111111111]]}}
{"result": "SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)", "match": {"match": true, "result": [[5.111111111111111]]}}
{"result": "SELECT p.professional_id, p.last_name, p.cell_number\nFROM Professionals p\nWHERE p.state = 'Indiana'\nOR (\n    SELECT COUNT(*) \n    FROM Treatments t \n    WHERE t.professional_id = p.professional_id\n) > 2", "match": {"match": true, "result": [[1, "Braun", "(275)939-2435x80863"], [8, "Hyatt", "328.842.3792"], [9, "Kshlerin", "962-983-8109x3509"]]}}
{"result": "```sql\nSELECT \n    p.professional_id, \n    p.last_name, \n    p.cell_number\nFROM \n    Professionals p\nWHERE \n    p.state = 'Indiana'\nUNION\nSELECT \n    p.professional_id, \n    p.last_name, \n    p.cell_number\nFROM \n    Professionals p\nJOIN \n    Treatments t ON p.professional_id = t.professional_id\nGROUP BY \n    p.professional_id, \n    p.last_name, \n    p.cell_number\nHAVING \n    COUNT(t.treatment_id) > 2;\n```", "match": {"match": true, "result": [[1, "Braun", "(275)939-2435x80863"], [8, "Hyatt", "328.842.3792"], [9, "Kshlerin", "962-983-8109x3509"]]}}
{"result": "```sql\nSELECT d.name\nFROM Dogs d\nJOIN Treatments t ON d.dog_id = t.dog_id\nGROUP BY d.dog_id\nHAVING SUM(t.cost_of_treatment) <= 1000;\n```", "match": {"match": false, "result": [["Kacey"], ["Hipolito"], ["Houston"], ["Narciso"], ["Holden"], ["Jesus"]], "gt": [["Kacey"], ["Hipolito"], ["Mavis"], ["Houston"], ["Jeffrey"], ["Merritt"], ["Narciso"], ["George"], ["Bessie"], ["Betty"], ["Holden"], ["Jesus"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT D.name FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY D.dog_id HAVING SUM(T.cost_of_treatment) <= 1000", "match": {"match": false, "result": [["Kacey"], ["Hipolito"], ["Houston"], ["Narciso"], ["Holden"], ["Jesus"]], "gt": [["Kacey"], ["Hipolito"], ["Mavis"], ["Houston"], ["Jeffrey"], ["Merritt"], ["Narciso"], ["George"], ["Bessie"], ["Betty"], ["Holden"], ["Jesus"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT first_name\nFROM Owners\nWHERE first_name NOT IN (SELECT DISTINCT name FROM Dogs)", "match": {"match": false, "result": [["Nora"], ["Melisa"], ["Jaclyn"], ["Tre"], ["Johann"], ["Kade"], ["Emelie"], ["Rolando"], ["Adelle"], ["Lorenz"], ["Gay"], ["Orlando"], ["Cindy"], ["Rachelle"], ["Heather"]], "gt": [["Adelle"], ["Brady"], ["Cindy"], ["Danny"], ["Domenica"], ["Emelie"], ["Ericka"], ["Gay"], ["Heather"], ["Jaclyn"], ["Jayson"], ["Johann"], ["Kade"], ["Karley"], ["Lesly"], ["Lorenz"], ["Melisa"], ["Monte"], ["Nora"], ["Olaf"], ["Orlando"], ["Rachelle"], ["Rolando"], ["Ruben"], ["Sigurd"], ["Taryn"], ["Tre"], ["Velva"], ["Vernice"], ["Winfield"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT first_name FROM owners UNION SELECT first_name FROM professionals EXCEPT SELECT first_name FROM dogs", "match": {"match": false, "error": "Query execution failed with error: no such column: first_name"}}
{"result": "```sql\nSELECT professional_id, role_code, email_address\nFROM Professionals\nWHERE professional_id NOT IN (SELECT professional_id FROM Treatments);\n```", "match": {"match": true, "result": [[1, "Employee", "deanna.schuster@example.com"], [2, "Employee", "lucile.shanahan@example.org"], [3, "Employee", "uboehm@example.org"], [11, "Employee", "west.eula@example.net"], [12, "Veterenarian", "marquardt.furman@example.org"], [13, "Veterenarian", "delphine29@example.com"], [15, "Employee", "jeichmann@example.com"]]}}
{"result": "```sql\nSELECT professional_id, role_code, email_address\nFROM Professionals\nWHERE professional_id NOT IN (SELECT professional_id FROM Treatments);\n```", "match": {"match": true, "result": [[1, "Employee", "deanna.schuster@example.com"], [2, "Employee", "lucile.shanahan@example.org"], [3, "Employee", "uboehm@example.org"], [11, "Employee", "west.eula@example.net"], [12, "Veterenarian", "marquardt.furman@example.org"], [13, "Veterenarian", "delphine29@example.com"], [15, "Employee", "jeichmann@example.com"]]}}
{"result": "```sql\nSELECT O.owner_id, O.first_name, O.last_name\nFROM Owners O\nJOIN Dogs D ON O.owner_id = D.owner_id\nGROUP BY O.owner_id, O.first_name, O.last_name\nORDER BY COUNT(D.dog_id) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [[14, "Rachelle", "Funk"]]}}
{"result": "```sql\nSELECT owner_id, first_name, last_name\nFROM Owners\nWHERE owner_id IN (\n    SELECT owner_id\n    FROM Dogs\n    GROUP BY owner_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n);\n```", "match": {"match": true, "result": [[14, "Rachelle", "Funk"]]}}
{"result": "```sql\nSELECT p.professional_id, p.role_code, p.first_name\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nGROUP BY p.professional_id\nHAVING COUNT(t.treatment_id) >= 2\n```", "match": {"match": true, "result": [[4, "Veterenarian", "Vernice"], [6, "Veterenarian", "Ruben"], [8, "Employee", "Karley"], [9, "Veterenarian", "Monte"], [10, "Employee", "Domenica"], [14, "Employee", "Sigurd"]]}}
{"result": "SELECT professional_id, role_code, first_name \nFROM Professionals \nWHERE professional_id IN (\n    SELECT professional_id \n    FROM Treatments \n    GROUP BY professional_id \n    HAVING COUNT(*) >= 2\n);", "match": {"match": true, "result": [[4, "Veterenarian", "Vernice"], [6, "Veterenarian", "Ruben"], [8, "Employee", "Karley"], [9, "Veterenarian", "Monte"], [10, "Employee", "Domenica"], [14, "Employee", "Sigurd"]]}}
{"result": "SELECT breed_name FROM Breeds WHERE breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1)", "match": {"match": true, "result": [["Bulldog"]]}}
{"result": "SELECT breed_name FROM Breeds WHERE breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1)", "match": {"match": true, "result": [["Bulldog"]]}}
{"result": "```sql\nSELECT o.owner_id, o.last_name, COUNT(t.treatment_id) AS total_treatments\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nJOIN Treatments t ON d.dog_id = t.dog_id\nGROUP BY o.owner_id, o.last_name\nORDER BY total_treatments DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [[14, "Funk", 4]], "gt": [[14, "Funk"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT o.owner_id, o.last_name, SUM(t.cost_of_treatment) AS total_spent\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nJOIN Treatments t ON d.dog_id = t.dog_id\nGROUP BY o.owner_id, o.last_name\nORDER BY total_spent DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [[3, "Stoltenberg", 1601]], "gt": [[14, "Funk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT tt.treatment_type_description \nFROM Treatment_Types tt \nJOIN Treatments t ON tt.treatment_type_code = t.treatment_type_code \nGROUP BY tt.treatment_type_code \nORDER BY SUM(t.cost_of_treatment) ASC \nLIMIT 1", "match": {"match": true, "result": [["Take for a Walk"]]}}
{"result": "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_description ORDER BY SUM(T2.cost_of_treatment) ASC LIMIT 1", "match": {"match": true, "result": [["Take for a Walk"]]}}
{"result": "SELECT T2.owner_id, T2.zip_code \nFROM Charges AS T1 \nJOIN Dogs AS T2 ON T1.dog_id = T2.dog_id \nGROUP BY T2.owner_id \nORDER BY SUM(T1.charge_amount) DESC \nLIMIT 1", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.zip_code"}}
{"result": "```sql\nSELECT o.owner_id, o.zip_code, SUM(c.charge_amount) AS total_spent\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nJOIN Treatments t ON d.dog_id = t.dog_id\nJOIN Charges c ON t.charge_id = c.charge_id\nGROUP BY o.owner_id, o.zip_code\nORDER BY total_spent DESC\nLIMIT 1;\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: t.charge_id"}}
{"result": "```sql\nSELECT professional_id, cell_number\nFROM Treatments\nGROUP BY professional_id\nHAVING COUNT(DISTINCT treatment_type_code) >= 2;\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: cell_number"}}
{"result": "```sql\nSELECT professional_id, cell_number\nFROM Treatments\nGROUP BY professional_id\nHAVING COUNT(DISTINCT treatment_type_code) >= 2;\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: cell_number"}}
{"result": "```sql\nSELECT p.first_name, p.last_name\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nWHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);\n```", "match": {"match": false, "result": [["Domenica", "Jacobs"], ["Vernice", "Tillman"], ["Karley", "Hyatt"], ["Vernice", "Tillman"], ["Ruben", "O'Reilly"], ["Domenica", "Jacobs"], ["Monte", "Kshlerin"], ["Monte", "Kshlerin"]], "gt": [["Taryn", "Braun"], ["Jayson", "Ullrich"], ["Olaf", "Watsica"], ["Vernice", "Tillman"], ["Danny", "Considine"], ["Ruben", "O'Reilly"], ["Velva", "Hayes"], ["Karley", "Hyatt"], ["Monte", "Kshlerin"], ["Domenica", "Jacobs"], ["Brady", "Pouros"], ["Winfield", "Christiansen"], ["Ericka", "Murazik"], ["Sigurd", "Frami"], ["Lesly", "Walter"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT first_name, last_name\nFROM Professionals\nWHERE professional_id IN (\n    SELECT professional_id\n    FROM Treatments\n    WHERE cost_of_treatment < (\n        SELECT AVG(cost_of_treatment)\n        FROM Treatments\n    )\n);\n```", "match": {"match": false, "result": [["Vernice", "Tillman"], ["Ruben", "O'Reilly"], ["Karley", "Hyatt"], ["Monte", "Kshlerin"], ["Domenica", "Jacobs"]], "gt": [["Taryn", "Braun"], ["Jayson", "Ullrich"], ["Olaf", "Watsica"], ["Vernice", "Tillman"], ["Danny", "Considine"], ["Ruben", "O'Reilly"], ["Velva", "Hayes"], ["Karley", "Hyatt"], ["Monte", "Kshlerin"], ["Domenica", "Jacobs"], ["Brady", "Pouros"], ["Winfield", "Christiansen"], ["Ericka", "Murazik"], ["Sigurd", "Frami"], ["Lesly", "Walter"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.date_of_treatment, T2.first_name FROM Treatments AS T1 INNER JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id", "match": {"match": true, "result": [["2018-03-19 04:39:54", "Monte"], ["2018-03-15 20:25:34", "Domenica"], ["2018-03-08 05:26:23", "Vernice"], ["2018-03-01 04:14:46", "Karley"], ["2018-03-23 13:52:10", "Sigurd"], ["2018-03-11 04:23:15", "Vernice"], ["2018-03-10 11:45:58", "Sigurd"], ["2018-03-24 22:25:58", "Ruben"], ["2018-03-14 19:10:40", "Domenica"], ["2018-02-28 17:09:43", "Velva"], ["2018-03-13 12:22:58", "Danny"], ["2018-03-16 10:27:36", "Monte"], ["2018-02-26 09:08:53", "Karley"], ["2018-03-04 20:33:43", "Monte"], ["2018-03-15 19:10:02", "Ruben"]]}}
{"result": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 INNER JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "match": {"match": true, "result": [["2018-03-19 04:39:54", "Monte"], ["2018-03-15 20:25:34", "Domenica"], ["2018-03-08 05:26:23", "Vernice"], ["2018-03-01 04:14:46", "Karley"], ["2018-03-23 13:52:10", "Sigurd"], ["2018-03-11 04:23:15", "Vernice"], ["2018-03-10 11:45:58", "Sigurd"], ["2018-03-24 22:25:58", "Ruben"], ["2018-03-14 19:10:40", "Domenica"], ["2018-02-28 17:09:43", "Velva"], ["2018-03-13 12:22:58", "Danny"], ["2018-03-16 10:27:36", "Monte"], ["2018-02-26 09:08:53", "Karley"], ["2018-03-04 20:33:43", "Monte"], ["2018-03-15 19:10:02", "Ruben"]]}}
{"result": "SELECT T1.cost_of_treatment, T2.treatment_type_description FROM Treatments AS T1 INNER JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code", "match": {"match": true, "result": [[567, "Take for a Walk"], [147, "Vaccination"], [429, "Physical examination"], [266, "Vaccination"], [668, "Vaccination"], [313, "Physical examination"], [852, "Physical examination"], [407, "Physical examination"], [139, "Take for a Walk"], [681, "Take for a Walk"], [514, "Vaccination"], [428, "Physical examination"], [945, "Vaccination"], [349, "Take for a Walk"], [656, "Take for a Walk"]]}}
{"result": "SELECT T1.cost_of_treatment, T3.treatment_type_description FROM Treatments AS T1 INNER JOIN Treatment_Types AS T3 ON T1.treatment_type_code = T3.treatment_type_code", "match": {"match": true, "result": [[567, "Take for a Walk"], [147, "Vaccination"], [429, "Physical examination"], [266, "Vaccination"], [668, "Vaccination"], [313, "Physical examination"], [852, "Physical examination"], [407, "Physical examination"], [139, "Take for a Walk"], [681, "Take for a Walk"], [514, "Vaccination"], [428, "Physical examination"], [945, "Vaccination"], [349, "Take for a Walk"], [656, "Take for a Walk"]]}}
{"result": "SELECT o.first_name, o.last_name, s.size_description \nFROM Owners o \nJOIN Dogs d ON o.owner_id = d.owner_id \nJOIN Sizes s ON d.size_code = s.size_code", "match": {"match": false, "result": [["Jaclyn", "Stoltenberg", "Large"], ["Gay", "Feil", "Large"], ["Nora", "Haley", "Medium"], ["Rachelle", "Funk", "Large"], ["Emelie", "Mertz", "Medium"], ["Johann", "Fisher", "Medium"], ["Jaclyn", "Stoltenberg", "Medium"], ["Rachelle", "Funk", "Small"], ["Melisa", "DuBuque", "Medium"], ["Kade", "Rippin", "Medium"], ["Cindy", "Schmitt", "Large"], ["Orlando", "Price", "Medium"], ["Rolando", "Prohaska", "Small"], ["Rachelle", "Funk", "Medium"], ["Lorenz", "Nicolas", "Medium"]], "gt": [["Jaclyn", "Stoltenberg", "LGE"], ["Gay", "Feil", "LGE"], ["Nora", "Haley", "MED"], ["Rachelle", "Funk", "LGE"], ["Emelie", "Mertz", "MED"], ["Johann", "Fisher", "MED"], ["Jaclyn", "Stoltenberg", "MED"], ["Rachelle", "Funk", "SML"], ["Melisa", "DuBuque", "MED"], ["Kade", "Rippin", "MED"], ["Cindy", "Schmitt", "LGE"], ["Orlando", "Price", "MED"], ["Rolando", "Prohaska", "SML"], ["Rachelle", "Funk", "MED"], ["Lorenz", "Nicolas", "MED"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT o.first_name, o.last_name, s.size_description\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nJOIN Sizes s ON d.size_code = s.size_code;\n```", "match": {"match": false, "result": [["Jaclyn", "Stoltenberg", "Large"], ["Gay", "Feil", "Large"], ["Nora", "Haley", "Medium"], ["Rachelle", "Funk", "Large"], ["Emelie", "Mertz", "Medium"], ["Johann", "Fisher", "Medium"], ["Jaclyn", "Stoltenberg", "Medium"], ["Rachelle", "Funk", "Small"], ["Melisa", "DuBuque", "Medium"], ["Kade", "Rippin", "Medium"], ["Cindy", "Schmitt", "Large"], ["Orlando", "Price", "Medium"], ["Rolando", "Prohaska", "Small"], ["Rachelle", "Funk", "Medium"], ["Lorenz", "Nicolas", "Medium"]], "gt": [["Jaclyn", "Stoltenberg", "LGE"], ["Gay", "Feil", "LGE"], ["Nora", "Haley", "MED"], ["Rachelle", "Funk", "LGE"], ["Emelie", "Mertz", "MED"], ["Johann", "Fisher", "MED"], ["Jaclyn", "Stoltenberg", "MED"], ["Rachelle", "Funk", "SML"], ["Melisa", "DuBuque", "MED"], ["Kade", "Rippin", "MED"], ["Cindy", "Schmitt", "LGE"], ["Orlando", "Price", "MED"], ["Rolando", "Prohaska", "SML"], ["Rachelle", "Funk", "MED"], ["Lorenz", "Nicolas", "MED"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.first_name, T1.name FROM Dogs AS T1 INNER JOIN Owners AS T2 ON T1.owner_id = T2.owner_id", "match": {"match": true, "result": [["Jaclyn", "Kacey"], ["Gay", "Hipolito"], ["Nora", "Mavis"], ["Rachelle", "Houston"], ["Emelie", "Jeffrey"], ["Johann", "Merritt"], ["Jaclyn", "Narciso"], ["Rachelle", "George"], ["Melisa", "Bessie"], ["Kade", "Troy"], ["Cindy", "Betty"], ["Orlando", "Holden"], ["Rolando", "Jesus"], ["Rachelle", "Lyric"], ["Lorenz", "Evangeline"]]}}
{"result": "SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id", "match": {"match": true, "result": [["Jaclyn", "Kacey"], ["Gay", "Hipolito"], ["Nora", "Mavis"], ["Rachelle", "Houston"], ["Emelie", "Jeffrey"], ["Johann", "Merritt"], ["Jaclyn", "Narciso"], ["Rachelle", "George"], ["Melisa", "Bessie"], ["Kade", "Troy"], ["Cindy", "Betty"], ["Orlando", "Holden"], ["Rolando", "Jesus"], ["Rachelle", "Lyric"], ["Lorenz", "Evangeline"]]}}
{"result": "```sql\nSELECT d.name, t.date_of_treatment\nFROM Dogs d\nJOIN Breeds b ON d.breed_code = b.breed_code\nJOIN Treatments t ON d.dog_id = t.dog_id\nWHERE b.breed_name IN (\n    SELECT breed_name\n    FROM Breeds\n    GROUP BY breed_name\n    HAVING COUNT(*) = 1\n);\n```", "match": {"match": false, "result": [["Lyric", "2018-03-19 04:39:54"], ["Houston", "2018-03-15 20:25:34"], ["Lyric", "2018-03-08 05:26:23"], ["Hipolito", "2018-03-01 04:14:46"], ["Holden", "2018-03-23 13:52:10"], ["Troy", "2018-03-11 04:23:15"], ["Evangeline", "2018-03-10 11:45:58"], ["Hipolito", "2018-03-24 22:25:58"], ["Lyric", "2018-03-14 19:10:40"], ["Troy", "2018-02-28 17:09:43"], ["Evangeline", "2018-03-13 12:22:58"], ["Jesus", "2018-03-16 10:27:36"], ["Narciso", "2018-02-26 09:08:53"], ["Troy", "2018-03-04 20:33:43"], ["Kacey", "2018-03-15 19:10:02"]], "gt": [["Lyric", "2018-03-19 04:39:54"], ["Houston", "2018-03-15 20:25:34"], ["Lyric", "2018-03-08 05:26:23"], ["Lyric", "2018-03-14 19:10:40"], ["Kacey", "2018-03-15 19:10:02"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Dogs.name, Treatments.date_of_treatment \nFROM Dogs \nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id \nWHERE Dogs.breed_code IN (\n    SELECT breed_code \n    FROM Dogs \n    GROUP BY breed_code \n    ORDER BY COUNT(*) ASC \n    LIMIT 1\n)", "match": {"match": true, "result": [["Lyric", "2018-03-19 04:39:54"], ["Houston", "2018-03-15 20:25:34"], ["Lyric", "2018-03-08 05:26:23"], ["Lyric", "2018-03-14 19:10:40"], ["Kacey", "2018-03-15 19:10:02"]]}}
{"result": "```sql\nSELECT Owners.first_name, Dogs.name\nFROM Dogs\nJOIN Owners ON Dogs.owner_id = Owners.owner_id\nWHERE Owners.state = 'Virginia';\n```", "match": {"match": true, "result": [["Melisa", "Bessie"]]}}
{"result": "```sql\nSELECT DISTINCT o.first_name, d.name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nWHERE o.state = 'Virginia';\n```", "match": {"match": true, "result": [["Melisa", "Bessie"]]}}
{"result": "```sql\nSELECT d.date_arrived, d.date_departed\nFROM Dogs d\nJOIN Treatments t ON d.dog_id = t.dog_id;\n```", "match": {"match": false, "result": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "gt": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT d.date_arrived, d.date_departed\nFROM Dogs d\nJOIN Treatments t ON d.dog_id = t.dog_id;\n```", "match": {"match": false, "result": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "gt": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT o.last_name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nORDER BY d.age ASC\nLIMIT 1;\n```", "match": {"match": false, "result": [["Nicolas"]], "gt": [["Feil"], ["Fisher"], ["Rippin"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs ORDER BY date_of_birth DESC LIMIT 1)", "match": {"match": false, "result": [["Mertz"]], "gt": [["Feil"], ["Fisher"], ["Rippin"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin')", "match": {"match": true, "result": [["uboehm@example.org"], ["mekhi.little@example.org"]]}}
{"result": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'", "match": {"match": true, "result": [["uboehm@example.org"], ["mekhi.little@example.org"]]}}
{"result": "SELECT date_arrived ,  date_departed FROM Dogs;", "match": {"match": true, "result": [["2017-09-08 20:10:13", "2018-03-25 06:58:44"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-25 10:14:05", "2018-03-25 10:25:46"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-10-25 00:55:34", "2018-03-25 04:50:22"], ["2017-04-15 09:25:31", "2018-03-25 13:07:04"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-10-16 20:06:21", "2018-03-25 02:47:40"], ["2018-01-17 11:44:16", "2018-03-25 06:46:07"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-07-25 15:19:07", "2018-03-25 15:05:16"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"]]}}
{"result": "```sql\nSELECT date_arrived, date_departed FROM Dogs;\n```", "match": {"match": true, "result": [["2017-09-08 20:10:13", "2018-03-25 06:58:44"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-25 10:14:05", "2018-03-25 10:25:46"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-10-25 00:55:34", "2018-03-25 04:50:22"], ["2017-04-15 09:25:31", "2018-03-25 13:07:04"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-10-16 20:06:21", "2018-03-25 02:47:40"], ["2018-01-17 11:44:16", "2018-03-25 06:46:07"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-07-25 15:19:07", "2018-03-25 15:05:16"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"]]}}
{"result": "SELECT COUNT(DISTINCT dog_id) FROM Treatments", "match": {"match": true, "result": [[9]]}}
{"result": "```sql\nSELECT COUNT(dog_id) FROM Treatments;\n```", "match": {"match": false, "result": [[15]], "gt": [[9]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT professional_id) FROM Treatments;", "match": {"match": true, "result": [[8]]}}
{"result": "```sql\nSELECT COUNT(DISTINCT professional_id) AS number_of_professionals\nFROM Treatments;\n```", "match": {"match": true, "result": [[8]]}}
{"result": "```sql\nSELECT role_code, street, city, state\nFROM Professionals\nWHERE city LIKE '%West%';\n```", "match": {"match": true, "result": [["Employee", "6915 Oberbrunner Point Suite 491\nGleasonville, LA ", "West Heidi", "Indiana"]]}}
{"result": "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'", "match": {"match": true, "result": [["Employee", "6915 Oberbrunner Point Suite 491\nGleasonville, LA ", "West Heidi", "Indiana"]]}}
{"result": "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'", "match": {"match": true, "result": [["Johann", "Fisher", "zboncak.madonna@example.net"], ["Cindy", "Schmitt", "wpfeffer@example.net"]]}}
{"result": "```sql\nSELECT first_name, last_name, email_address \nFROM Owners \nWHERE state LIKE '%North%';\n```", "match": {"match": true, "result": [["Johann", "Fisher", "zboncak.madonna@example.net"], ["Cindy", "Schmitt", "wpfeffer@example.net"]]}}
{"result": "SELECT COUNT(*) FROM Dogs WHERE age < ( SELECT AVG(age) FROM Dogs )", "match": {"match": true, "result": [[9]]}}
{"result": "```sql\nSELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);\n```", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "match": {"match": true, "result": [[407]]}}
{"result": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "match": {"match": true, "result": [[407]]}}
{"result": "SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE abandoned_yn = 'N')", "match": {"match": false, "result": [[15]], "gt": [[3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL);", "match": {"match": false, "result": [[15]], "gt": [[3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT COUNT(professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);", "match": {"match": true, "result": [[7]]}}
{"result": "```sql\nSELECT name, age, weight \nFROM Dogs \nWHERE abandoned_yn = '1';\n```", "match": {"match": true, "result": [["Kacey", "6", "7.57"], ["Lyric", "4", "4.36"], ["Evangeline", "1", "4.01"]]}}
{"result": "```sql\nSELECT name, age, weight\nFROM Dogs\nWHERE abandoned_yn = '1';\n```", "match": {"match": true, "result": [["Kacey", "6", "7.57"], ["Lyric", "4", "4.36"], ["Evangeline", "1", "4.01"]]}}
{"result": "```sql\nSELECT AVG(age) AS average_age FROM Dogs;\n```", "match": {"match": true, "result": [[5.066666666666666]]}}
{"result": "SELECT AVG(age) FROM Dogs", "match": {"match": true, "result": [[5.066666666666666]]}}
{"result": "```sql\nSELECT MAX(age) AS oldest_dog_age FROM Dogs;\n```", "match": {"match": true, "result": [["9"]]}}
{"result": "SELECT MAX(age) AS oldest_dog_age FROM Dogs;", "match": {"match": true, "result": [["9"]]}}
{"result": "```sql\nSELECT charge_type, charge_amount \nFROM Charges;\n```", "match": {"match": true, "result": [["Daily Accommodation", 98], ["Drugs", 322], ["Health Check", 640]]}}
{"result": "SELECT charge_type, charge_amount FROM Charges;", "match": {"match": true, "result": [["Daily Accommodation", 98], ["Drugs", 322], ["Health Check", 640]]}}
{"result": "```sql\nSELECT MAX(charge_amount) AS max_charge_amount\nFROM Charges;\n```", "match": {"match": true, "result": [[640]]}}
{"result": "SELECT MAX(charge_amount) FROM Charges;", "match": {"match": true, "result": [[640]]}}
{"result": "```sql\nSELECT email_address, cell_number, home_phone FROM Professionals;\n```", "match": {"match": true, "result": [["deanna.schuster@example.com", "(275)939-2435x80863", "+71(6)2898266914"], ["lucile.shanahan@example.org", "889-940-2676", "+02(1)0259033559"], ["uboehm@example.org", "(369)908-7311x065", "325-155-0801x7005"], ["lourdes.lowe@example.net", "00230569697", "312.216.3352"], ["mekhi.little@example.org", "011.193.9081x3186", "1-609-566-2752x25197"], ["jacynthe.mclaughlin@example.net", "139-321-7313", "+43(5)1132733868"], ["lambert62@example.org", "499-434-0215x1628", "022.529.0550x1319"], ["goyette.roosevelt@example.net", "328.842.3792", "891.475.2256"], ["schneider.kathryne@example.org", "962-983-8109x3509", "320-508-6023"], ["jerrod.bahringer@example.org", "461-801-2600", "(230)338-3342x585"], ["west.eula@example.net", "609-405-2990", "(920)304-4499x59146"], ["marquardt.furman@example.org", "1-181-670-9466", "246-951-0080x76716"], ["delphine29@example.com", "880-659-7577x736", "346.594.3739"], ["cole.margarita@example.org", "1-185-137-1945x409", "971.048.3763x9404"], ["jeichmann@example.com", "1-258-285-4707x8020", "1-138-287-3775"]]}}
{"result": "```sql\nSELECT email_address, cell_number, home_phone FROM Professionals;\n```", "match": {"match": true, "result": [["deanna.schuster@example.com", "(275)939-2435x80863", "+71(6)2898266914"], ["lucile.shanahan@example.org", "889-940-2676", "+02(1)0259033559"], ["uboehm@example.org", "(369)908-7311x065", "325-155-0801x7005"], ["lourdes.lowe@example.net", "00230569697", "312.216.3352"], ["mekhi.little@example.org", "011.193.9081x3186", "1-609-566-2752x25197"], ["jacynthe.mclaughlin@example.net", "139-321-7313", "+43(5)1132733868"], ["lambert62@example.org", "499-434-0215x1628", "022.529.0550x1319"], ["goyette.roosevelt@example.net", "328.842.3792", "891.475.2256"], ["schneider.kathryne@example.org", "962-983-8109x3509", "320-508-6023"], ["jerrod.bahringer@example.org", "461-801-2600", "(230)338-3342x585"], ["west.eula@example.net", "609-405-2990", "(920)304-4499x59146"], ["marquardt.furman@example.org", "1-181-670-9466", "246-951-0080x76716"], ["delphine29@example.com", "880-659-7577x736", "346.594.3739"], ["cole.margarita@example.org", "1-185-137-1945x409", "971.048.3763x9404"], ["jeichmann@example.com", "1-258-285-4707x8020", "1-138-287-3775"]]}}
{"result": "SELECT DISTINCT breed_name, size_description FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code JOIN Sizes ON Dogs.size_code = Sizes.size_code", "match": {"match": false, "result": [["Eskimo", "Large"], ["Bulldog", "Large"], ["Bulldog", "Medium"], ["Husky", "Medium"], ["Eskimo", "Small"], ["Husky", "Small"], ["Eskimo", "Medium"]], "gt": [["ESK", "LGE"], ["BUL", "LGE"], ["BUL", "MED"], ["HUS", "MED"], ["ESK", "SML"], ["HUS", "SML"], ["ESK", "MED"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT breed_code, size_code FROM Dogs", "match": {"match": true, "result": [["ESK", "LGE"], ["BUL", "LGE"], ["BUL", "MED"], ["HUS", "MED"], ["ESK", "SML"], ["HUS", "SML"], ["ESK", "MED"]]}}
{"result": "```sql\nSELECT Professionals.first_name, Treatment_Types.treatment_type_description\nFROM Professionals\nJOIN Treatments ON Professionals.professional_id = Treatments.professional_id\nJOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;\n```", "match": {"match": false, "result": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Vernice", "Physical examination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Karley", "Vaccination"], ["Monte", "Take for a Walk"], ["Ruben", "Take for a Walk"]], "gt": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Ruben", "Take for a Walk"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT p.first_name, tt.treatment_type_description\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nJOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;\n```", "match": {"match": false, "result": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Vernice", "Physical examination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Karley", "Vaccination"], ["Monte", "Take for a Walk"], ["Ruben", "Take for a Walk"]], "gt": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Ruben", "Take for a Walk"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT COUNT(*) FROM singer;\n```", "match": {"match": true, "result": [[8]]}}
{"result": "```sql\nSELECT COUNT(*) FROM singer;\n```", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "match": {"match": true, "result": [["Abigail Johnson"], ["Susanne Klatten"], ["Gina Rinehart"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Alice Walton"], ["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "match": {"match": true, "result": [["Abigail Johnson"], ["Susanne Klatten"], ["Gina Rinehart"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Alice Walton"], ["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT Birth_Year, Citizenship FROM singer", "match": {"match": true, "result": [[1944.0, "France"], [1948.0, "United States"], [1949.0, "United States"], [1942.0, "Chile"], [1940.0, "United States"], [1953.0, "Australia"], [1962.0, "Germany"], [1961.0, "United States"]]}}
{"result": "SELECT Birth_Year, Citizenship FROM singer", "match": {"match": true, "result": [[1944.0, "France"], [1948.0, "United States"], [1949.0, "United States"], [1942.0, "Chile"], [1940.0, "United States"], [1953.0, "Australia"], [1962.0, "Germany"], [1961.0, "United States"]]}}
{"result": "SELECT Name FROM singer WHERE Citizenship != 'France'", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]]}}
{"result": "```sql\nSELECT Name FROM singer WHERE Citizenship != 'French';\n```", "match": {"match": false, "result": [["Liliane Bettencourt"], ["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]], "gt": [["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"]]}}
{"result": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "match": {"match": true, "result": [["Liliane Bettencourt"]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "match": {"match": true, "result": [["Liliane Bettencourt"]]}}
{"result": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "match": {"match": true, "result": [["Australia", 1], ["Chile", 1], ["France", 1], ["Germany", 1], ["United States", 4]]}}
{"result": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "match": {"match": true, "result": [["Australia", 1], ["Chile", 1], ["France", 1], ["Germany", 1], ["United States", 4]]}}
{"result": "```sql\nSELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1;\n```", "match": {"match": true, "result": [["United States"]]}}
{"result": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1", "match": {"match": true, "result": [["United States"]]}}
{"result": "SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "match": {"match": true, "result": [["Australia", 17.0], ["Chile", 17.4], ["France", 30.0], ["Germany", 14.3], ["United States", 28.8]]}}
{"result": "```sql\nSELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth\nFROM singer\nGROUP BY Citizenship;\n```", "match": {"match": true, "result": [["Australia", 17.0], ["Chile", 17.4], ["France", 30.0], ["Germany", 14.3], ["United States", 28.8]]}}
{"result": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "match": {"match": true, "result": [["Do They Know It's Christmas", "Liliane Bettencourt"], ["F**k It (I Don't Want You Back)", "Liliane Bettencourt"], ["Cha Cha Slide", "Christy Walton"], ["Call on Me", "Iris Fontbona"], ["Yeah", "Christy Walton"], ["All This Time", "Gina Rinehart"], ["Left Outside Alone", "Jacqueline Mars"], ["Mysterious Girl", "Susanne Klatten"]]}}
{"result": "SELECT T1.Title, T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID", "match": {"match": true, "result": [["Do They Know It's Christmas", "Liliane Bettencourt"], ["F**k It (I Don't Want You Back)", "Liliane Bettencourt"], ["Cha Cha Slide", "Christy Walton"], ["Call on Me", "Iris Fontbona"], ["Yeah", "Christy Walton"], ["All This Time", "Gina Rinehart"], ["Left Outside Alone", "Jacqueline Mars"], ["Mysterious Girl", "Susanne Klatten"]]}}
{"result": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000", "match": {"match": true, "result": [["Liliane Bettencourt"], ["Christy Walton"], ["Iris Fontbona"]]}}
{"result": "SELECT DISTINCT T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Sales > 300000", "match": {"match": true, "result": [["Liliane Bettencourt"], ["Christy Walton"], ["Iris Fontbona"]]}}
{"result": "SELECT T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Name HAVING COUNT(*) > 1", "match": {"match": true, "result": [["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT s.Name FROM singer s JOIN song ss ON s.Singer_ID = ss.Singer_ID GROUP BY s.Name HAVING COUNT(ss.Song_ID) > 1", "match": {"match": true, "result": [["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT T1.Name, SUM(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name", "match": {"match": true, "result": [["Christy Walton", 651421.0], ["Gina Rinehart", 292000.0], ["Iris Fontbona", 335000.0], ["Jacqueline Mars", 275000.0], ["Liliane Bettencourt", 1646407.0], ["Susanne Klatten", 261000.0]]}}
{"result": "```sql\nSELECT s.Name, SUM(so.Sales) as Total_Sales\nFROM singer s\nJOIN song so ON s.Singer_ID = so.Singer_ID\nGROUP BY s.Name;\n```", "match": {"match": true, "result": [["Christy Walton", 651421.0], ["Gina Rinehart", 292000.0], ["Iris Fontbona", 335000.0], ["Jacqueline Mars", 275000.0], ["Liliane Bettencourt", 1646407.0], ["Susanne Klatten", 261000.0]]}}
{"result": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "match": {"match": true, "result": [["Alice Walton"], ["Abigail Johnson"]]}}
{"result": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "match": {"match": true, "result": [["Alice Walton"], ["Abigail Johnson"]]}}
{"result": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955", "match": {"match": true, "result": [["United States"]]}}
{"result": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955", "match": {"match": true, "result": [["United States"]]}}
{"result": "```sql\nSELECT COUNT(feature_id) AS total_available_features\nFROM Other_Available_Features;\n```", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code = (SELECT feature_type_code FROM Other_Available_Features WHERE feature_name = 'AirCon')", "match": {"match": true, "result": [["Amenity, eg Pool."]]}}
{"result": "SELECT T1.property_type_description FROM Ref_Property_Types AS T1 INNER JOIN Properties AS T2 ON T1.property_type_code = T2.property_type_code", "match": {"match": false, "result": [["House, Bungalow, etc."], ["House, Bungalow, etc."], ["Other, to be determined."], ["Field, Meadow."], ["Apartment, Flat, Condo, etc."], ["Shop, Retail Outlet."], ["Shop, Retail Outlet."], ["Apartment, Flat, Condo, etc."], ["Apartment, Flat, Condo, etc."], ["Apartment, Flat, Condo, etc."], ["Other, to be determined."], ["Apartment, Flat, Condo, etc."], ["Other, to be determined."], ["Other, to be determined."], ["Apartment, Flat, Condo, etc."]], "gt": [["Apartment, Flat, Condo, etc."], ["Field, Meadow."], ["House, Bungalow, etc."], ["Other, to be determined."], ["Shop, Retail Outlet."]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT property_name \nFROM Properties \nWHERE property_type_code IN ('HSE', 'APT') AND room_count > 1;\n```", "match": {"match": false, "result": [], "gt": [["longacre"], ["parc coliseum"], ["parc east"], ["park"], ["renoir"], ["ten tower"], ["the cole"], ["vogue"]], "error": "Query result does not match ground truth."}}

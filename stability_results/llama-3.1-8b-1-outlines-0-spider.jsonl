
{"result": "SELECT COUNT(Singer_ID) FROM singer", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(Singer_ID) FROM singer", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC;", "match": {"match": true, "result": [["Joe Sharp", "Netherlands", 52], ["John Nizinik", "France", 43], ["Rose White", "France", 41], ["Timbaland", "United States", 32], ["Justin Brown", "France", 29], ["Tribal King", "France", 25]]}}
{"result": "SELECT Name, Country, Age \nFROM singer \nORDER BY Age DESC;", "match": {"match": true, "result": [["Joe Sharp", "Netherlands", 52], ["John Nizinik", "France", 43], ["Rose White", "France", 41], ["Timbaland", "United States", 32], ["Justin Brown", "France", 29], ["Tribal King", "France", 25]]}}
{"result": "SELECT AVG(age) AS Average_Age, MIN(age) AS Minimum_Age, MAX(age) AS Maximum_Age \nFROM singer \nWHERE Country = 'France';", "match": {"match": true, "result": [[34.5, 25, 43]]}}
{"result": "SELECT AVG(Age) , MIN(Age) , MAX(Age) \nFROM singer \nWHERE Country = 'France';", "match": {"match": true, "result": [[34.5, 25, 43]]}}
{"result": "SELECT T2.Name, T2.`Song_Name`, T2.`Song_release_year` \nFROM singer_in_concert AS T1 \nINNER JOIN singer AS T2 \nON T1.Singer_ID = T2.Singer_ID \nINNER JOIN ( SELECT Singer_ID, MIN(Age) AS Min_Age FROM singer GROUP BY Singer_ID ) AS T3 \nON T2.Singer_ID = T3.Singer_ID AND T2.Age = T3.Min_Age", "match": {"match": false, "result": [["Timbaland", "Dangerous", "2008"], ["Justin Brown", "Hey Oh", "2013"], ["John Nizinik", "Gentleman", "2014"], ["Justin Brown", "Hey Oh", "2013"], ["Tribal King", "Love", "2016"], ["John Nizinik", "Gentleman", "2014"], ["Rose White", "Sun", "2003"], ["Tribal King", "Love", "2016"], ["Justin Brown", "Hey Oh", "2013"], ["Timbaland", "Dangerous", "2008"]], "gt": [["Love", "2016"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Name, T2.Song_Name, T2.Song_release_year \nFROM singer_in_concert AS T1 \nJOIN singer AS T2 \nON T1.Singer_ID = T2.Singer_ID \nJOIN concert AS T3 \nON T1.concert_ID = T3.concert_ID \nWHERE T2.Age = ( SELECT MIN(T2.Age) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID );", "match": {"match": false, "result": [["Tribal King", "Love", "2016"], ["Tribal King", "Love", "2016"]], "gt": [["Love", "2016"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T1.Country \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID \nWHERE T1.Age > 20", "match": {"match": false, "result": [["United States"], ["France"]], "gt": [["Netherlands"], ["United States"], ["France"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT Country \nFROM singer \nWHERE Age > 20", "match": {"match": true, "result": [["Netherlands"], ["United States"], ["France"]]}}
{"result": "SELECT Country, COUNT(Singer_ID) FROM singer GROUP BY Country", "match": {"match": true, "result": [["France", 4], ["Netherlands", 1], ["United States", 1]]}}
{"result": "SELECT COUNT(Singer_ID), Country \nFROM singer \nGROUP BY Country", "match": {"match": false, "result": [[4, "France"], [1, "Netherlands"], [1, "United States"]], "gt": [["France", 4], ["Netherlands", 1], ["United States", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Song_Name \nFROM singer AS T1 \nINNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID \nINNER JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID \nWHERE T1.Age > (SELECT AVG(Age) FROM singer)", "match": {"match": false, "result": [["Gentleman"], ["Gentleman"], ["Sun"]], "gt": [["You"], ["Sun"], ["Gentleman"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T3.\"Song_Name\" \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 ON T1.\"Singer_ID\" = T2.\"Singer_ID\" \nJOIN concert AS T3 ON T2.\"concert_ID\" = T3.\"concert_ID\" \nJOIN stadium AS T4 ON T3.\"Stadium_ID\" = T4.\"Stadium_ID\" \nWHERE T1.\"Age\" > ( SELECT AVG(\"Age\") FROM singer );", "match": {"match": false, "error": "Query execution failed with error: no such column: T3.Song_Name"}}
{"result": "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000", "match": {"match": true, "result": []}}
{"result": "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000", "match": {"match": true, "result": []}}
{"result": "SELECT MAX(\"Capacity\"), AVG(\"Average\") FROM stadium", "match": {"match": false, "result": [[52500, 917.8888888888889]], "gt": [[52500, 730]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(Capacity), MAX(Capacity) FROM stadium", "match": {"match": true, "result": [[10621.666666666666, 52500]]}}
{"result": "SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1", "match": {"match": true, "result": [["Stark's Park", 10104]]}}
{"result": "SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1", "match": {"match": true, "result": [["Stark's Park", 10104]]}}
{"result": "SELECT COUNT(concert_ID) FROM concert WHERE Year = '2014' OR Year = '2015'", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(*) \nFROM concert \nWHERE YEAR = '2014' OR YEAR = '2015';", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT T3.Name, COUNT(T2.concert_ID) \nFROM singer_in_concert AS T1 \nJOIN concert AS T2 ON T1.concert_ID = T2.concert_ID \nJOIN stadium AS T3 ON T2.Stadium_ID = T3.Stadium_ID \nGROUP BY T3.Name", "match": {"match": false, "result": [["Balmoor", 2], ["Glebe Park", 1], ["Recreation Park", 1], ["Somerset Park", 3], ["Stark's Park", 3]], "gt": [["Stark's Park", 1], ["Glebe Park", 1], ["Somerset Park", 2], ["Recreation Park", 1], ["Balmoor", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name, COUNT(T3.concert_ID) \nFROM stadium AS T1 \nJOIN concert AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID \nJOIN singer_in_concert AS T3 ON T2.concert_ID  =  T3.concert_ID \nGROUP BY T1.Name", "match": {"match": false, "result": [["Balmoor", 2], ["Glebe Park", 1], ["Recreation Park", 1], ["Somerset Park", 3], ["Stark's Park", 3]], "gt": [["Stark's Park", 1], ["Glebe Park", 1], ["Somerset Park", 2], ["Recreation Park", 1], ["Balmoor", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name, T1.Capacity \nFROM stadium AS T1 \nJOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nJOIN singer_in_concert AS T3 ON T2.concert_ID = T3.concert_ID \nWHERE T2.Year >= 2014 \nGROUP BY T1.Name, T1.Capacity \nORDER BY COUNT(T2.concert_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [["Somerset Park", 11998]]}}
{"result": "SELECT T1.Name, T1.Capacity  \nFROM stadium AS T1  \nJOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID  \nWHERE T2.Year > '2013'", "match": {"match": false, "result": [["Stark's Park", 10104], ["Somerset Park", 11998], ["Somerset Park", 11998], ["Glebe Park", 3960], ["Balmoor", 4000], ["Recreation Park", 3100]], "gt": [["Somerset Park", 11998]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(Year) DESC LIMIT 1", "match": {"match": true, "result": [["2015"]]}}
{"result": "SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(concert_ID) DESC LIMIT 1", "match": {"match": true, "result": [["2015"]]}}
{"result": "SELECT T1.Name FROM stadium AS T1\nLEFT JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID\nWHERE T2.Stadium_ID IS NULL", "match": {"match": true, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"]]}}
{"result": "SELECT Name \nFROM stadium \nLEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID \nWHERE concert.concert_ID IS NULL", "match": {"match": true, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"]]}}
{"result": "SELECT T1.Country \nFROM singer AS T1 \nJOIN (\n  SELECT Singer_ID \n  FROM singer \n  WHERE Age > 40\n  ) AS T2 \nON T1.Singer_ID = T2.Singer_ID \nINTERSECT \nSELECT T1.Country \nFROM singer AS T1 \nJOIN (\n  SELECT Singer_ID \n  FROM singer \n  WHERE Age < 30\n  ) AS T2 \nON T1.Singer_ID = T2.Singer_ID", "match": {"match": true, "result": [["France"]]}}
{"result": "SELECT Name \nFROM stadium \nWHERE Stadium_ID NOT IN (\n  SELECT Stadium_ID \n  FROM concert \n  WHERE YEAR = '2014'\n);", "match": {"match": false, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"], ["Recreation Park"], ["Balmoor"]], "gt": [["Balmoor"], ["Bayview Stadium"], ["Forthbank Stadium"], ["Gayfield Park"], ["Hampden Park"], ["Recreation Park"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Name \nFROM concert AS T1 \nLEFT JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nWHERE T1.concert_ID IS NULL OR T1.Year != '2014'", "match": {"match": false, "result": [["Somerset Park"], ["Balmoor"], ["Recreation Park"]], "gt": [["Balmoor"], ["Bayview Stadium"], ["Forthbank Stadium"], ["Gayfield Park"], ["Hampden Park"], ["Recreation Park"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT c.concert_Name, c.Theme, COUNT(si.concert_ID) \nFROM concert c \nJOIN singer_in_concert si ON c.concert_ID = si.concert_ID \nGROUP BY c.concert_Name, c.Theme", "match": {"match": false, "result": [["Auditions", "Free choice", 3], ["Home Visits", "Bleeding Love", 1], ["Super bootcamp", "Free choice 2", 2], ["Week 1", "Happy Tonight", 2], ["Week 1", "Wide Awake", 1], ["Week 2", "Party All Night", 1]], "gt": [["Auditions", "Free choice", 3], ["Super bootcamp", "Free choice 2", 2], ["Home Visits", "Bleeding Love", 1], ["Week 1", "Wide Awake", 1], ["Week 1", "Happy Tonight", 2], ["Week 2", "Party All Night", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT c.concert_Name, c.Theme, COUNT(s.Singer_ID) FROM concert c\nJOIN singer_in_concert s ON c.concert_ID = s.concert_ID\nGROUP BY c.concert_Name, c.Theme", "match": {"match": false, "result": [["Auditions", "Free choice", 3], ["Home Visits", "Bleeding Love", 1], ["Super bootcamp", "Free choice 2", 2], ["Week 1", "Happy Tonight", 2], ["Week 1", "Wide Awake", 1], ["Week 2", "Party All Night", 1]], "gt": [["Auditions", "Free choice", 3], ["Super bootcamp", "Free choice 2", 2], ["Home Visits", "Bleeding Love", 1], ["Week 1", "Wide Awake", 1], ["Week 1", "Happy Tonight", 2], ["Week 2", "Party All Night", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name, COUNT(T2.concert_ID) \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID \nGROUP BY T1.Name", "match": {"match": false, "result": [["John Nizinik", 2], ["Justin Brown", 3], ["Rose White", 1], ["Timbaland", 2], ["Tribal King", 2]], "gt": [["Timbaland", 2], ["Justin Brown", 3], ["Rose White", 1], ["John Nizinik", 2], ["Tribal King", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name, COUNT(T2.concert_ID) \nFROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID \nGROUP BY T1.Name", "match": {"match": false, "result": [["John Nizinik", 2], ["Justin Brown", 3], ["Rose White", 1], ["Timbaland", 2], ["Tribal King", 2]], "gt": [["Timbaland", 2], ["Justin Brown", 3], ["Rose White", 1], ["John Nizinik", 2], ["Tribal King", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Name \nFROM concert AS T1 \nINNER JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID \nINNER JOIN singer AS T3 ON T3.Singer_ID = T2.Singer_ID \nWHERE T1.Year = '2014';", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Name"}}
{"result": "SELECT T1.Name \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID \nJOIN concert AS T3 ON T3.concert_ID = T2.concert_ID \nWHERE T3.Year = '2014';", "match": {"match": true, "result": [["Timbaland"], ["Justin Brown"], ["John Nizinik"], ["Justin Brown"], ["Tribal King"], ["Rose White"]]}}
{"result": "SELECT T2.Name, T2.Country \nFROM singer_in_concert AS T1 \nJOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID \nJOIN concert AS T3 ON T1.concert_ID = T3.concert_ID \nJOIN singer AS T4 ON T1.Singer_ID = T4.Singer_ID \nJOIN song AS T5 ON T4.Singer_ID = T5.Singer_ID \nWHERE T5.Song_Name LIKE '%Hey%';", "match": {"match": false, "error": "Query execution failed with error: no such table: song"}}
{"result": "SELECT Name, Country FROM singer\nWHERE Song_Name LIKE '%Hey%'", "match": {"match": true, "result": [["Justin Brown", "France"]]}}
{"result": "SELECT T3.Name, T3.Location \nFROM concert AS T1 \nJOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID \nJOIN stadium AS T3 ON T1.Stadium_ID = T3.Stadium_ID \nWHERE T1.year IN ('2014', '2015')", "match": {"match": false, "result": [["Stark's Park", "Raith Rovers"], ["Stark's Park", "Raith Rovers"], ["Stark's Park", "Raith Rovers"], ["Somerset Park", "Ayr United"], ["Somerset Park", "Ayr United"], ["Somerset Park", "Ayr United"], ["Glebe Park", "Brechin City"], ["Balmoor", "Peterhead"], ["Balmoor", "Peterhead"], ["Recreation Park", "Alloa Athletic"]], "gt": [["Somerset Park", "Ayr United"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name, T1.Location \nFROM stadium AS T1 \nJOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nWHERE T2.Year IN ('2014', '2015')", "match": {"match": false, "result": [["Stark's Park", "Raith Rovers"], ["Somerset Park", "Ayr United"], ["Somerset Park", "Ayr United"], ["Glebe Park", "Brechin City"], ["Balmoor", "Peterhead"], ["Recreation Park", "Alloa Athletic"]], "gt": [["Somerset Park", "Ayr United"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(concert_ID) \nFROM concert \nWHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1);", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(T1.concert_ID) \nFROM concert AS T1 \nJOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nORDER BY T2.Capacity DESC \nLIMIT 1", "match": {"match": false, "result": [[6]], "gt": [[0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) \nFROM Pets \nWHERE weight  >  10;", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(*) \nFROM Pets \nWHERE weight > 10", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT T2.weight \nFROM Student AS T1 \nJOIN Pets AS T2 ON T1.StuID = T2.PetID \nJOIN Has_Pet AS T3 ON T1.StuID = T3.StuID \nJOIN Pets AS T4 ON T3.PetID = T4.PetID \nWHERE T4.PetType = 'dog' AND T2.pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog');", "match": {"match": false, "result": [], "gt": [[9.3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(weight) \nFROM Pets \nWHERE PetType = 'dog' \nORDER BY pet_age ASC LIMIT 1", "match": {"match": false, "result": [[13.4]], "gt": [[9.3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(weight), PetType \nFROM Pets \nGROUP BY PetType", "match": {"match": true, "result": [[12.0, "cat"], [13.4, "dog"]]}}
{"result": "SELECT PetType, MAX(weight) \nFROM Pets \nGROUP BY PetType", "match": {"match": false, "result": [["cat", 12.0], ["dog", 13.4]], "gt": [[12.0, "cat"], [13.4, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Student.Age > 20", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(*) \nFROM Student \nWHERE Age > 20 \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID", "match": {"match": false, "error": "Query execution failed with error: near \"JOIN\": syntax error"}}
{"result": "SELECT COUNT(*) \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Student.Sex = 'F' AND Pets.PetType = 'Dog'", "match": {"match": false, "result": [[0]], "gt": [[2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) \nFROM Student s \nJOIN Has_Pet hp ON s.StuID = hp.StuID \nJOIN Pets p ON hp.PetID = p.PetID \nWHERE s.Sex = 'F' AND p.PetType = 'dog';", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(DISTINCT PetType) FROM Pets", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT DISTINCT PetType FROM Pets", "match": {"match": false, "result": [["cat"], ["dog"]], "gt": [[2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T3.PetID = T2.PetID \nWHERE T3.PetType = 'Cat' OR T3.PetType = 'Dog'", "match": {"match": false, "result": [], "gt": [["Linda"], ["Tracy"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Fname \nFROM Has_Pet AS T1 \nJOIN Student AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T1.PetID = T3.PetID \nWHERE T3.PetType = 'Cat' OR T3.PetType = 'Dog'", "match": {"match": false, "result": [], "gt": [["Linda"], ["Tracy"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'Cat' INTERSECT \nSELECT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'Dog';", "match": {"match": true, "result": []}}
{"result": "SELECT T1.Fname \nFROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nINNER JOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'cat' AND T3.PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog')", "match": {"match": true, "result": []}}
{"result": "SELECT T1.major, T1.age \nFROM Student AS T1 \nLEFT JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nLEFT JOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType != 'Cat'", "match": {"match": false, "result": [[600, 18], [600, 19], [600, 19]], "gt": [[600, 19], [600, 21], [600, 20], [600, 26], [600, 18], [600, 18], [600, 20], [600, 19], [600, 17], [600, 22], [600, 20], [600, 18], [600, 16], [600, 17], [600, 27], [600, 20], [600, 18], [520, 22], [520, 19], [540, 17], [520, 20], [540, 18], [520, 18], [520, 19], [520, 18], [550, 20], [100, 17], [550, 21], [550, 20], [550, 20], [550, 18], [50, 18], [50, 26]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T1.Major, T1.Age \nFROM Student T1 \nLEFT JOIN Has_Pet T2 ON T1.StuID = T2.StuID \nLEFT JOIN Pets T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType != 'cat'", "match": {"match": false, "result": [[600, 19]], "gt": [[600, 19], [600, 21], [600, 20], [600, 26], [600, 18], [600, 18], [600, 20], [600, 19], [600, 17], [600, 22], [600, 20], [600, 18], [600, 16], [600, 17], [600, 27], [600, 20], [600, 18], [520, 22], [520, 19], [540, 17], [520, 20], [540, 18], [520, 18], [520, 19], [520, 18], [550, 20], [100, 17], [550, 21], [550, 20], [550, 20], [550, 18], [50, 18], [50, 26]], "error": "Query result does not match ground truth."}}
{"result": "SELECT StuID \nFROM Student \nWHERE StuID NOT IN ( SELECT StuID FROM Has_Pet WHERE PetID IN ( SELECT PetID FROM Pets WHERE PetType = 'cat' ) ); \n\nOr you can use LEFT JOIN as follows:\n\nSELECT s.StuID \nFROM Student s \nLEFT JOIN Has_Pet hp ON s.StuID = hp.StuID \nLEFT JOIN Pets p ON hp.PetID = p.PetID \nWHERE p.PetID IS NULL AND p.PetType = 'cat'", "match": {"match": false, "error": "Query execution failed with error: You can only execute one statement at a time."}}
{"result": "SELECT StuID \nFROM Student \nWHERE StuID NOT IN (\n    SELECT StuID \n    FROM Has_Pet \n    JOIN Pets ON Has_Pet.PetID = Pets.PetID \n    WHERE Pets.PetType = 'Cat'", "match": {"match": false, "error": "Query execution failed with error: incomplete input"}}
{"result": "SELECT Fname, Age \nFROM Student \nWHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'Cat')) \nAND StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'Dog'));", "match": {"match": false, "result": [], "gt": [["Tracy", 19], ["Tracy", 19]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Fname \nFROM Student \nWHERE StuID IN \n  (SELECT StuID \n   FROM Has_Pet \n   JOIN Pets ON Has_Pet.PetID = Pets.PetID \n   WHERE PetType = 'Dog' \n   EXCEPT \n   SELECT StuID \n   FROM Has_Pet \n   JOIN Pets ON Has_Pet.PetID = Pets.PetID \n   WHERE PetType = 'Cat')", "match": {"match": false, "result": [], "gt": [["Tracy", 19], ["Tracy", 19]], "error": "Query result does not match ground truth."}}
{"result": "SELECT PetType, weight FROM Pets ORDER BY pet_age ASC LIMIT 1", "match": {"match": true, "result": [["dog", 9.3]]}}
{"result": "SELECT PetType, weight \nFROM Pets \nWHERE pet_age = (\n  SELECT MIN(pet_age) \n  FROM Pets\n);", "match": {"match": true, "result": [["dog", 9.3]]}}
{"result": "SELECT PetID, weight \nFROM Pets \nWHERE pet_age > 1;", "match": {"match": true, "result": [[2001, 12.0], [2002, 13.4]]}}
{"result": "SELECT T1.PetID, T1.weight \nFROM Pets T1 \nWHERE T1.pet_age > 1;", "match": {"match": true, "result": [[2001, 12.0], [2002, 13.4]]}}
{"result": "SELECT PetType, AVG(pet_age) as average_age, MAX(pet_age) as max_age\nFROM Pets\nGROUP BY PetType", "match": {"match": false, "result": [["cat", 3.0, 3], ["dog", 1.5, 2]], "gt": [[3.0, 3, "cat"], [1.5, 2, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT PetType, AVG(pet_age) as Average_Age, MAX(pet_age) as Max_Age \nFROM Pets \nGROUP BY PetType", "match": {"match": false, "result": [["cat", 3.0, 3], ["dog", 1.5, 2]], "gt": [[3.0, 3, "cat"], [1.5, 2, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(weight) , PetType \nFROM Pets \nGROUP BY PetType", "match": {"match": true, "result": [[12.0, "cat"], [11.350000000000001, "dog"]]}}
{"result": "SELECT AVG(weight) , PetType FROM Pets GROUP BY PetType", "match": {"match": true, "result": [[12.0, "cat"], [11.350000000000001, "dog"]]}}
{"result": "SELECT Fname, Age \nFROM Student \nWHERE StuID IN (SELECT StuID FROM Has_Pet);", "match": {"match": true, "result": [["Linda", 18], ["Tracy", 19]]}}
{"result": "SELECT DISTINCT Fname, Age \nFROM Student \nWHERE StuID IN (SELECT StuID FROM Has_Pet);", "match": {"match": true, "result": [["Linda", 18], ["Tracy", 19]]}}
{"result": "SELECT T2.PetID \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nWHERE T1.LName = 'Smith';", "match": {"match": true, "result": [[2001]]}}
{"result": "SELECT T1.StuID \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nWHERE T1.LName = 'Smith'", "match": {"match": false, "result": [[1001]], "gt": [[2001]], "error": "Query result does not match ground truth."}}
{"result": "SELECT StuID, COUNT(*) \nFROM Has_Pet \nGROUP BY StuID", "match": {"match": false, "result": [[1001, 1], [1002, 2]], "gt": [[1, 1001], [2, 1002]], "error": "Query result does not match ground truth."}}
{"result": "SELECT StuID, COUNT(PetID) as Num_Pets \nFROM Has_Pet \nGROUP BY StuID;", "match": {"match": false, "result": [[1001, 1], [1002, 2]], "gt": [[1, 1001], [2, 1002]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Fname, T1.Sex\nFROM Student AS T1\nINNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID\nGROUP BY T1.Fname, T1.Sex\nHAVING COUNT(*) > 1", "match": {"match": true, "result": [["Tracy", "F"]]}}
{"result": "SELECT T1.Fname, T1.Sex \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nGROUP BY T1.Fname, T1.Sex, T1.StuID \nHAVING COUNT(T2.StuID) > 1", "match": {"match": true, "result": [["Tracy", "F"]]}}
{"result": "SELECT T2.LName \nFROM Pets AS T1 \nJOIN Has_Pet AS T2 ON T1.PetID = T2.PetID \nJOIN Student AS T3 ON T3.StuID = T2.StuID \nWHERE T1.pet_age = 3 AND T1.PetType = 'cat'", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.LName"}}
{"result": "SELECT S.Lname \nFROM Student S \nJOIN Has_Pet HP ON S.StuID = HP.StuID \nJOIN Pets P ON HP.PetID = P.PetID \nWHERE P.PetType = 'cat' AND P.pet_age = 3;", "match": {"match": true, "result": [["Smith"]]}}
{"result": "SELECT AVG(Age) \nFROM Student \nWHERE StuID NOT IN (SELECT StuID FROM Has_Pet)", "match": {"match": true, "result": [[19.625]]}}
{"result": "SELECT AVG(Age) \nFROM Student \nWHERE StuID NOT IN (SELECT StuID FROM Has_Pet);", "match": {"match": true, "result": [[19.625]]}}
{"result": "SELECT COUNT(Employee_ID) FROM employee", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT COUNT(*) FROM employee", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT Name FROM employee ORDER BY Age ASC", "match": {"match": true, "result": [["George Chuter"], ["Andrew Sheridan"], ["Lee Mears"], ["Tim Payne"], ["Matt Stevens"], ["Jason Hobson"], ["Steve Borthwick"], ["Louis Deacon"], ["Phil Vickery"], ["Mark Regan"]]}}
{"result": "SELECT Name \nFROM employee \nORDER BY Age ASC", "match": {"match": true, "result": [["George Chuter"], ["Andrew Sheridan"], ["Lee Mears"], ["Tim Payne"], ["Matt Stevens"], ["Jason Hobson"], ["Steve Borthwick"], ["Louis Deacon"], ["Phil Vickery"], ["Mark Regan"]]}}
{"result": "SELECT COUNT(Employee_ID), City FROM employee GROUP BY City", "match": {"match": true, "result": [[3, "Bath"], [3, "Bristol"], [1, "Leicester"], [1, "Sale"], [2, "Wasps"]]}}
{"result": "SELECT City, COUNT(*) FROM employee GROUP BY City", "match": {"match": false, "result": [["Bath", 3], ["Bristol", 3], ["Leicester", 1], ["Sale", 1], ["Wasps", 2]], "gt": [[3, "Bath"], [3, "Bristol"], [1, "Leicester"], [1, "Sale"], [2, "Wasps"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT City FROM employee \nWHERE Age < 30 \nGROUP BY City \nHAVING COUNT(Employee_ID) > 1", "match": {"match": true, "result": [["Bath"]]}}
{"result": "SELECT T1.City \nFROM employee AS T1 \nJOIN shop AS T2 ON T1.Employee_ID IN ( SELECT T3.Employee_ID \nFROM hiring AS T3 \nWHERE T3.Start_from = '2020' AND T3.Is_full_time = 't' ) \nWHERE T1.Age < 30 GROUP BY T1.City HAVING COUNT(T1.Employee_ID) > 1", "match": {"match": false, "result": [], "gt": [["Bath"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(\"Shop_ID\") , \"Location\" FROM shop GROUP BY \"Location\";", "match": {"match": true, "result": [[1, "Espoo"], [1, "Helsinki"], [1, "Jakobstad"], [1, "Kotka"], [1, "Kuopio"], [1, "Lahti"], [1, "Mariehamn"], [1, "Turku"], [1, "Valkeakoski"]]}}
{"result": "SELECT Location, COUNT(Shop_ID) \nFROM shop \nGROUP BY Location", "match": {"match": false, "result": [["Espoo", 1], ["Helsinki", 1], ["Jakobstad", 1], ["Kotka", 1], ["Kuopio", 1], ["Lahti", 1], ["Mariehamn", 1], ["Turku", 1], ["Valkeakoski", 1]], "gt": [[1, "Espoo"], [1, "Helsinki"], [1, "Jakobstad"], [1, "Kotka"], [1, "Kuopio"], [1, "Lahti"], [1, "Mariehamn"], [1, "Turku"], [1, "Valkeakoski"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Manager_name, T2.District \nFROM shop AS T1 \nINNER JOIN employee AS T2 \nON T1.Manager_name = T2.Name \nWHERE T1.Number_products = ( SELECT MAX(Number_products) FROM shop );", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Manager_name"}}
{"result": "SELECT T1.Manager_name, T1.District \nFROM shop AS T1 \nJOIN ( SELECT District, Manager_name, MAX(Number_products) AS max_num \n       FROM shop \n       GROUP BY District, Manager_name ) AS T2 \nON T1.Manager_name = T2.Manager_name AND T1.District = T2.District AND T1.Number_products = T2.max_num", "match": {"match": false, "result": [["Olli Huttunen", "Tehtaan kentt\u00e4"], ["Antti Muurinen", "Finnair Stadium"], ["Mika Lehkosuo", "Tapiolan Urheilupuisto"], ["Job Dragtsma", "Veritas Stadion"], ["Mika Laurikainen", "Jakobstads Centralplan"], ["Tommi Kautonen", "Arto Tolsa Areena"], ["Kai Nyyss\u00f6nen", "Magnum Areena"], ["Ilkka M\u00e4kel\u00e4", "Lahden Stadion"], ["Pekka Lyyski", "Wikl\u00f6f Holding Arena"]], "gt": [["Ilkka M\u00e4kel\u00e4", "Lahden Stadion"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MIN(`Number_products`) AS `Min_Products`, MAX(`Number_products`) AS `Max_Products` \nFROM `shop`;", "match": {"match": true, "result": [[1600, 15000]]}}
{"result": "SELECT MIN(Number_products) , MAX(Number_products) FROM shop", "match": {"match": true, "result": [[1600, 15000]]}}
{"result": "SELECT Name, Location, District \nFROM shop \nORDER BY Number_products DESC", "match": {"match": true, "result": [["FC Lahti", "Lahti", "Lahden Stadion"], ["HJK", "Helsinki", "Finnair Stadium"], ["FC Inter", "Turku", "Veritas Stadion"], ["FC Honka", "Espoo", "Tapiolan Urheilupuisto"], ["FF Jaro", "Jakobstad", "Jakobstads Centralplan"], ["FC KooTeePee", "Kotka", "Arto Tolsa Areena"], ["FC Haka", "Valkeakoski", "Tehtaan kentt\u00e4"], ["KuPS", "Kuopio", "Magnum Areena"], ["IFK Mariehamn", "Mariehamn", "Wikl\u00f6f Holding Arena"]]}}
{"result": "SELECT Name, Location, District \nFROM shop \nORDER BY Number_products DESC;", "match": {"match": true, "result": [["FC Lahti", "Lahti", "Lahden Stadion"], ["HJK", "Helsinki", "Finnair Stadium"], ["FC Inter", "Turku", "Veritas Stadion"], ["FC Honka", "Espoo", "Tapiolan Urheilupuisto"], ["FF Jaro", "Jakobstad", "Jakobstads Centralplan"], ["FC KooTeePee", "Kotka", "Arto Tolsa Areena"], ["FC Haka", "Valkeakoski", "Tehtaan kentt\u00e4"], ["KuPS", "Kuopio", "Magnum Areena"], ["IFK Mariehamn", "Mariehamn", "Wikl\u00f6f Holding Arena"]]}}
{"result": "SELECT Name \nFROM shop \nWHERE Number_products > (SELECT AVG(Number_products) FROM shop);", "match": {"match": true, "result": [["HJK"], ["FC Inter"], ["FC Lahti"]]}}
{"result": "SELECT Name \nFROM shop \nWHERE Number_products > (SELECT AVG(Number_products) FROM shop);", "match": {"match": true, "result": [["HJK"], ["FC Inter"], ["FC Lahti"]]}}
{"result": "SELECT T1.Name \nFROM employee AS T1 \nJOIN evaluation AS T2 \nON T1.Employee_ID = T2.Employee_ID \nGROUP BY T2.Employee_ID \nORDER BY COUNT(T2.Employee_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [["George Chuter"]]}}
{"result": "SELECT T2.Name \nFROM evaluation AS T1 \nJOIN employee AS T2 ON T1.Employee_ID = T2.Employee_ID \nGROUP BY T2.Name \nORDER BY COUNT(T1.Employee_ID) DESC \nLIMIT 1;", "match": {"match": true, "result": [["George Chuter"]]}}
{"result": "SELECT Name FROM evaluation WHERE Bonus = ( SELECT MAX(Bonus) FROM evaluation WHERE Bonus != ( SELECT MAX(Bonus) FROM evaluation GROUP BY Bonus HAVING COUNT(Bonus) > 1 ) );", "match": {"match": false, "error": "Query execution failed with error: no such column: Name"}}
{"result": "SELECT T2.Name \nFROM evaluation AS T1 \nJOIN employee AS T2 ON T1.Employee_ID = T2.Employee_ID \nORDER BY T1.Bonus DESC \nLIMIT 1;", "match": {"match": true, "result": [["Louis Deacon"]]}}
{"result": "SELECT Name \nFROM employee \nWHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);", "match": {"match": true, "result": [["Mark Regan"], ["Tim Payne"], ["Andrew Sheridan"], ["Phil Vickery"], ["Steve Borthwick"]]}}
{"result": "SELECT Name \nFROM employee \nWHERE Employee_ID NOT IN (\n  SELECT Employee_ID \n  FROM evaluation \n);", "match": {"match": true, "result": [["Mark Regan"], ["Tim Payne"], ["Andrew Sheridan"], ["Phil Vickery"], ["Steve Borthwick"]]}}
{"result": "SELECT T2.Name \nFROM hiring AS T1 \nJOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID \nGROUP BY T1.Shop_ID \nORDER BY COUNT(T1.Employee_ID) DESC \nLIMIT 1;", "match": {"match": true, "result": [["FC Haka"]]}}
{"result": "SELECT T2.Name \nFROM hiring AS T1 \nJOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID \nGROUP BY T2.Name \nORDER BY COUNT(T1.Employee_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [["FC Haka"]]}}
{"result": "SELECT Name \nFROM shop \nWHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring);", "match": {"match": true, "result": [["FC Honka"], ["KuPS"], ["IFK Mariehamn"]]}}
{"result": "SELECT T2.Name \nFROM shop AS T1 \nLEFT JOIN hiring AS T2 \nON T1.Shop_ID = T2.Shop_ID \nWHERE T2.Shop_ID IS NULL", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Name"}}
{"result": "SELECT T2.Name, COUNT(T1.Employee_ID) \nFROM hiring AS T1 \nJOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID \nGROUP BY T2.Name", "match": {"match": false, "result": [["FC Haka", 2], ["FC Inter", 1], ["FC KooTeePee", 1], ["FC Lahti", 1], ["FF Jaro", 1], ["HJK", 1]], "gt": [[2, "FC Haka"], [1, "FC Inter"], [1, "FC KooTeePee"], [1, "FC Lahti"], [1, "FF Jaro"], [1, "HJK"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.`Number_products`, T1.Name \nFROM shop AS T1 \nJOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID", "match": {"match": false, "result": [[3516, "FC Haka"], [3516, "FC Haka"], [15000, "FC Lahti"], [10000, "FC Inter"], [5000, "FF Jaro"], [10770, "HJK"], [4780, "FC KooTeePee"]], "gt": [[2, "FC Haka"], [1, "FC Inter"], [1, "FC KooTeePee"], [1, "FC Lahti"], [1, "FF Jaro"], [1, "HJK"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT SUM(`Bonus`) AS Total_Bonus FROM `evaluation`", "match": {"match": true, "result": [[19500.0]]}}
{"result": "SELECT SUM(Bonus) FROM evaluation", "match": {"match": true, "result": [[19500.0]]}}
{"result": "SELECT *\nFROM hiring", "match": {"match": true, "result": [[1, 1, "2009", "T"], [1, 2, "2003", "T"], [8, 3, "2011", "F"], [4, 4, "2012", "T"], [5, 5, "2013", "T"], [2, 6, "2010", "F"], [6, 7, "2008", "T"]]}}
{"result": "SELECT * FROM `hiring`", "match": {"match": true, "result": [[1, 1, "2009", "T"], [1, 2, "2003", "T"], [8, 3, "2011", "F"], [4, 4, "2012", "T"], [5, 5, "2013", "T"], [2, 6, "2010", "F"], [6, 7, "2008", "T"]]}}
{"result": "SELECT District \nFROM shop \nWHERE Number_products < 3000 \nINTERSECT \nSELECT District \nFROM shop \nWHERE Number_products > 10000", "match": {"match": true, "result": []}}
{"result": "SELECT DISTINCT T2.District \nFROM shop AS T1 \nINNER JOIN shop AS T2 \nON T1.District = T2.District \nWHERE T1.Number_products < 3000 \nINTERSECT \nSELECT T1.District \nFROM shop AS T1 \nWHERE T1.Number_products > 10000", "match": {"match": true, "result": []}}
{"result": "SELECT COUNT(DISTINCT Location) FROM shop", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(DISTINCT \"Location\") FROM shop", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(Document_ID) FROM Documents", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(Document_ID) FROM Documents", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT Document_ID, Document_Name, Document_Description FROM Documents", "match": {"match": true, "result": [[0, "Introduction of OS", "n"], [1, "Understanding DB", "y"], [3, "Summer Show", "u"], [76, "Robbin CV", "y"], [80, "Welcome to NY", "h"], [82, "Data base", "w"], [2394, "Customer reviews", "y"], [3830, "Do not panic", "k"], [33930, "How Google people work", "z"], [50123, "Learning French", "r"], [651512, "How to write a CV", "f"], [801801, "How to read a book", "w"], [3540024, "Palm reading", "y"], [16514113, "A history of Arts", "h"], [385906526, "About Korea", "b"]]}}
{"result": "SELECT Document_ID, Document_Name, Document_Description FROM Documents", "match": {"match": true, "result": [[0, "Introduction of OS", "n"], [1, "Understanding DB", "y"], [3, "Summer Show", "u"], [76, "Robbin CV", "y"], [80, "Welcome to NY", "h"], [82, "Data base", "w"], [2394, "Customer reviews", "y"], [3830, "Do not panic", "k"], [33930, "How Google people work", "z"], [50123, "Learning French", "r"], [651512, "How to write a CV", "f"], [801801, "How to read a book", "w"], [3540024, "Palm reading", "y"], [16514113, "A history of Arts", "h"], [385906526, "About Korea", "b"]]}}
{"result": "SELECT Document_Name, Template_ID \nFROM Documents \nWHERE Document_Description LIKE '%w%';", "match": {"match": true, "result": [["Data base", 11], ["How to read a book", 4]]}}
{"result": "SELECT Document_Name, Template_ID \nFROM Documents \nWHERE Document_Description LIKE '%w%'", "match": {"match": true, "result": [["Data base", 11], ["How to read a book", 4]]}}
{"result": "SELECT Document_ID, Template_ID, Document_Description \nFROM Documents \nWHERE Document_Name = 'Robbin CV';", "match": {"match": true, "result": [[76, 20, "y"]]}}
{"result": "SELECT Document_ID, Template_ID, Document_Description \nFROM Documents \nWHERE Document_Name = 'Robbin CV';", "match": {"match": true, "result": [[76, 20, "y"]]}}
{"result": "SELECT COUNT(DISTINCT T.Template_Type_Code) \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID", "match": {"match": false, "result": [[4]], "gt": [[12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT Template_ID) FROM Documents", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT COUNT(DISTINCT Document_ID) \nFROM Templates \nWHERE Template_Type_Code = 'PPT'", "match": {"match": false, "error": "Query execution failed with error: no such column: Document_ID"}}
{"result": "SELECT COUNT(T1.Document_ID) \nFROM Documents T1 \nJOIN Templates T2 ON T1.Template_ID = T2.Template_ID \nJOIN Ref_Template_Types T3 ON T2.Template_Type_Code = T3.Template_Type_Code \nWHERE T3.Template_Type_Description = 'PPT';", "match": {"match": false, "result": [[0]], "gt": [[3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.Template_ID, COUNT(D.Document_ID) \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID \nGROUP BY T.Template_ID", "match": {"match": true, "result": [[1, 1], [4, 1], [6, 1], [7, 1], [8, 1], [10, 1], [11, 2], [14, 2], [20, 1], [21, 1], [22, 1], [25, 2]]}}
{"result": "SELECT \n    COUNT(T1.Document_ID) AS Document_Count, \n    T2.Template_ID \nFROM \n    Documents T1 \nJOIN \n    Templates T2 ON T1.Template_ID = T2.Template_ID \nGROUP BY \n    T2.Template_ID", "match": {"match": false, "result": [[1, 1], [1, 4], [1, 6], [1, 7], [1, 8], [1, 10], [2, 11], [2, 14], [1, 20], [1, 21], [1, 22], [2, 25]], "gt": [[1, 1], [4, 1], [6, 1], [7, 1], [8, 1], [10, 1], [11, 2], [14, 2], [20, 1], [21, 1], [22, 1], [25, 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.Template_ID, RT.Template_Type_Code \nFROM Documents D \nJOIN Templates T ON D.Template_ID = T.Template_ID \nJOIN Ref_Template_Types RT ON T.Template_Type_Code = RT.Template_Type_Code \nGROUP BY T.Template_ID, RT.Template_Type_Code \nORDER BY COUNT(D.Document_ID) DESC \nLIMIT 1", "match": {"match": false, "result": [[11, "BK"]], "gt": [[25, "PP"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Template_Type_Code, COUNT(T2.Template_ID) \nFROM Ref_Template_Types T1 \nJOIN Templates T2 ON T1.Template_Type_Code = T2.Template_Type_Code \nJOIN Documents T3 ON T2.Template_ID = T3.Template_ID \nGROUP BY T1.Template_Type_Code \nORDER BY COUNT(T2.Template_ID) DESC \nLIMIT 1", "match": {"match": false, "result": [["BK", 5]], "gt": [[25, "PP"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.Template_ID\nFROM Templates T\nJOIN Documents D ON T.Template_ID = D.Template_ID\nGROUP BY T.Template_ID\nHAVING COUNT(D.Template_ID)  >  1", "match": {"match": true, "result": [[11], [14], [25]]}}
{"result": "SELECT T.Template_ID \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID \nGROUP BY T.Template_ID \nHAVING COUNT(D.Document_ID) > 1", "match": {"match": true, "result": [[11], [14], [25]]}}
{"result": "SELECT T.Template_ID \nFROM Templates T \nLEFT JOIN Documents D ON T.Template_ID = D.Template_ID \nWHERE D.Template_ID IS NULL", "match": {"match": true, "result": [[0], [9], [15], [16], [18], [19], [23], [24]]}}
{"result": "SELECT T1.Template_ID \nFROM Templates T1 \nLEFT JOIN Documents T2 ON T1.Template_ID = T2.Template_ID \nWHERE T2.Template_ID IS NULL;", "match": {"match": true, "result": [[0], [9], [15], [16], [18], [19], [23], [24]]}}
{"result": "SELECT COUNT(Template_ID) FROM Templates", "match": {"match": true, "result": [[20]]}}
{"result": "SELECT COUNT(Template_ID) FROM Templates", "match": {"match": true, "result": [[20]]}}
{"result": "SELECT Template_ID, Version_Number, Template_Type_Code \nFROM Templates", "match": {"match": true, "result": [[0, 5, "PP"], [1, 9, "PP"], [4, 4, "BK"], [6, 2, "PPT"], [7, 8, "PPT"], [8, 3, "BK"], [9, 2, "BK"], [10, 1, "PPT"], [11, 6, "BK"], [14, 7, "AD"], [15, 9, "CV"], [16, 5, "CV"], [18, 5, "PP"], [19, 7, "AD"], [20, 6, "BK"], [21, 9, "AD"], [22, 0, "PP"], [23, 2, "BK"], [24, 8, "PP"], [25, 5, "PP"]]}}
{"result": "SELECT Template_ID, Version_Number, Template_Type_Code \nFROM Templates", "match": {"match": true, "result": [[0, 5, "PP"], [1, 9, "PP"], [4, 4, "BK"], [6, 2, "PPT"], [7, 8, "PPT"], [8, 3, "BK"], [9, 2, "BK"], [10, 1, "PPT"], [11, 6, "BK"], [14, 7, "AD"], [15, 9, "CV"], [16, 5, "CV"], [18, 5, "PP"], [19, 7, "AD"], [20, 6, "BK"], [21, 9, "AD"], [22, 0, "PP"], [23, 2, "BK"], [24, 8, "PP"], [25, 5, "PP"]]}}
{"result": "SELECT DISTINCT Template_Type_Code \nFROM Templates", "match": {"match": true, "result": [["PP"], ["BK"], ["PPT"], ["AD"], ["CV"]]}}
{"result": "SELECT DISTINCT Template_Type_Code \nFROM Ref_Template_Types;", "match": {"match": false, "result": [["AD"], ["BK"], ["CV"], ["PP"], ["PPT"]], "gt": [["PP"], ["BK"], ["PPT"], ["AD"], ["CV"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Template_ID \nFROM Templates \nWHERE Template_Type_Code IN ('PP', 'PPT')", "match": {"match": true, "result": [[0], [1], [6], [7], [10], [18], [22], [24], [25]]}}
{"result": "SELECT Template_ID\nFROM Templates\nWHERE Template_Type_Code IN ('PP', 'PPT');", "match": {"match": true, "result": [[0], [1], [6], [7], [10], [18], [22], [24], [25]]}}
{"result": "SELECT COUNT(*) \nFROM Templates \nWHERE Template_Type_Code = 'CV';", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(Template_ID) \nFROM Templates \nWHERE Template_Type_Code = (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'CV');", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT Version_Number, Template_Type_Code \nFROM Templates \nWHERE Version_Number > 5", "match": {"match": true, "result": [[9, "PP"], [8, "PPT"], [6, "BK"], [7, "AD"], [9, "CV"], [7, "AD"], [6, "BK"], [9, "AD"], [8, "PP"]]}}
{"result": "SELECT Version_Number, Template_Type_Code \nFROM Templates \nWHERE Version_Number > 5;", "match": {"match": true, "result": [[9, "PP"], [8, "PPT"], [6, "BK"], [7, "AD"], [9, "CV"], [7, "AD"], [6, "BK"], [9, "AD"], [8, "PP"]]}}
{"result": "SELECT T1.Template_Type_Code, COUNT(T2.Template_ID) AS NumberOfTemplates\nFROM Ref_Template_Types T1\nLEFT JOIN Templates T2 ON T1.Template_Type_Code = T2.Template_Type_Code\nGROUP BY T1.Template_Type_Code", "match": {"match": true, "result": [["AD", 3], ["BK", 6], ["CV", 2], ["PP", 6], ["PPT", 3]]}}
{"result": "SELECT Template_Type_Code, COUNT(Template_ID) as Template_Count\nFROM Templates\nGROUP BY Template_Type_Code", "match": {"match": true, "result": [["AD", 3], ["BK", 6], ["CV", 2], ["PP", 6], ["PPT", 3]]}}
{"result": "SELECT Template_Type_Code \nFROM Templates \nGROUP BY Template_Type_Code \nORDER BY COUNT(Template_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [["PP"]]}}
{"result": "SELECT Template_Type_Code \nFROM Templates \nGROUP BY Template_Type_Code \nORDER BY COUNT(Template_Type_Code) DESC \nLIMIT 1;", "match": {"match": true, "result": [["PP"]]}}
{"result": "SELECT T2.Template_Type_Code\nFROM Templates AS T1\nJOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code\nGROUP BY T2.Template_Type_Code\nHAVING COUNT(T1.Template_ID) < 3;", "match": {"match": true, "result": [["CV"]]}}
{"result": "SELECT Template_Type_Code \nFROM Ref_Template_Types \nWHERE Template_Type_Code NOT IN (\n  SELECT Template_Type_Code \n  FROM Templates \n  GROUP BY Template_Type_Code \n  HAVING COUNT(Template_ID) >= 3\n);", "match": {"match": true, "result": [["CV"]]}}
{"result": "SELECT MIN(T.Version_Number), T.Template_Type_Code \nFROM Templates T;", "match": {"match": true, "result": [[0, "PP"]]}}
{"result": "```sql\nSELECT \n    MIN(T.Version_Number) AS Lowest_Version_Number,\n    TT.Template_Type_Code\nFROM \n    Templates T\nJOIN \n    Ref_Template_Types TT ON T.Template_Type_Code = TT.Template_Type_Code\nGROUP BY \n    TT.Template_Type_Code;\n```", "match": {"match": false, "result": [[7, "AD"], [2, "BK"], [5, "CV"], [0, "PP"], [1, "PPT"]], "gt": [[0, "PP"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.Template_Type_Code \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID \nWHERE D.Document_Name = 'Data base';", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT T.Template_Type_Code \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID \nWHERE D.Document_Name = 'Data base';", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT T2.Document_Name \nFROM Templates AS T1 \nINNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID \nINNER JOIN Ref_Template_Types AS T3 ON T1.Template_Type_Code = T3.Template_Type_Code \nWHERE T3.Template_Type_Code = 'BK'", "match": {"match": true, "result": [["Robbin CV"], ["Data base"], ["How to read a book"], ["Palm reading"], ["About Korea"]]}}
{"result": "SELECT DISTINCT T.Documents.Document_Name \nFROM Templates AS T \nINNER JOIN Documents AS D ON T.Template_ID = D.Template_ID \nWHERE T.Template_Type_Code = 'BK'", "match": {"match": false, "error": "Query execution failed with error: no such column: T.Documents.Document_Name"}}
{"result": "SELECT \n  T.Template_Type_Code, \n  COUNT(D.Document_ID) AS Document_Count\nFROM \n  Ref_Template_Types T \n  LEFT JOIN Templates Tmpl ON T.Template_Type_Code = Tmpl.Template_Type_Code\n  LEFT JOIN Documents D ON Tmpl.Template_ID = D.Template_ID\nGROUP BY \n  T.Template_Type_Code;", "match": {"match": false, "result": [["AD", 3], ["BK", 5], ["CV", 0], ["PP", 4], ["PPT", 3]], "gt": [["AD", 3], ["BK", 5], ["PP", 4], ["PPT", 3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Template_Type_Code, COUNT(T2.Document_ID) AS Document_Count\nFROM Ref_Template_Types T1\nLEFT JOIN Documents T2 ON T1.Template_Type_Code = T2.Template_ID\nGROUP BY T1.Template_Type_Code", "match": {"match": false, "result": [["AD", 0], ["BK", 0], ["CV", 0], ["PP", 0], ["PPT", 0]], "gt": [["AD", 3], ["BK", 5], ["PP", 4], ["PPT", 3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Template_Type_Code, COUNT(T1.Document_ID) AS Count \nFROM Documents T1 \nJOIN Templates T2 ON T1.Template_ID = T2.Template_ID \nGROUP BY T2.Template_Type_Code \nORDER BY Count DESC", "match": {"match": false, "result": [["BK", 5], ["PP", 4], ["PPT", 3], ["AD", 3]], "gt": [["BK"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Template_Type_Code\nFROM Ref_Template_Types T1\nJOIN (\n  SELECT Template_Type_Code, COUNT(*) as Count\n  FROM Documents\n  JOIN Templates ON Documents.Template_ID = Templates.Template_ID\n  GROUP BY Template_Type_Code\n) T2 ON T1.Template_Type_Code = T2.Template_Type_Code\nORDER BY T2.Count DESC\nLIMIT 1", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT Template_Type_Code \nFROM Ref_Template_Types \nWHERE Template_Type_Code NOT IN (\n  SELECT Template_Type_Code \n  FROM Documents\n  GROUP BY Template_Type_Code\n  HAVING COUNT(DISTINCT Document_ID) > 0\n);", "match": {"match": false, "error": "Query execution failed with error: no such column: Template_Type_Code"}}
{"result": "SELECT Template_Type_Code\nFROM Ref_Template_Types\nWHERE Template_Type_Code NOT IN (\n  SELECT DISTINCT Template_Type_Code\n  FROM Templates\n  WHERE Template_ID IN (\n    SELECT Template_ID\n    FROM Documents\n  )\n);", "match": {"match": true, "result": [["CV"]]}}
{"result": "SELECT Template_Type_Code, Template_Type_Description \nFROM Ref_Template_Types;", "match": {"match": true, "result": [["PPT", "Presentation"], ["CV", "CV"], ["AD", "Advertisement"], ["PP", "Paper"], ["BK", "Book"]]}}
{"result": "SELECT Template_Type_Code, Template_Type_Description \nFROM Ref_Template_Types", "match": {"match": true, "result": [["PPT", "Presentation"], ["CV", "CV"], ["AD", "Advertisement"], ["PP", "Paper"], ["BK", "Book"]]}}
{"result": "SELECT Template_Type_Description \nFROM Ref_Template_Types \nWHERE Template_Type_Code = 'AD';", "match": {"match": true, "result": [["Advertisement"]]}}
{"result": "SELECT Template_Type_Description \nFROM Ref_Template_Types \nWHERE Template_Type_Code = 'AD';", "match": {"match": true, "result": [["Advertisement"]]}}
{"result": "SELECT Template_Type_Code \nFROM Ref_Template_Types \nWHERE Template_Type_Description = 'Book';", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT Template_Type_Code \nFROM Ref_Template_Types \nWHERE Template_Type_Description = 'Book';", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT DISTINCT Rtt.Template_Type_Description \nFROM Ref_Template_Types Rtt \nJOIN Templates T ON Rtt.Template_Type_Code = T.Template_Type_Code \nWHERE T.Template_ID IN (SELECT Template_ID FROM Documents);", "match": {"match": false, "result": [["Paper"], ["Book"], ["Presentation"], ["Advertisement"]], "gt": [["Presentation"], ["Paper"], ["Book"], ["Advertisement"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T.Template_Type_Description \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID;", "match": {"match": false, "error": "Query execution failed with error: no such column: T.Template_Type_Description"}}
{"result": "SELECT T.Template_ID \nFROM Templates T \nJOIN Ref_Template_Types R ON T.Template_Type_Code = R.Template_Type_Code \nWHERE R.Template_Type_Description = 'Presentation'", "match": {"match": true, "result": [[6], [7], [10]]}}
{"result": "SELECT T1.Template_ID \nFROM Templates T1 \nINNER JOIN Ref_Template_Types T2 \nON T1.Template_Type_Code = T2.Template_Type_Code \nWHERE T2.Template_Type_Description = 'Presentation';", "match": {"match": true, "result": [[6], [7], [10]]}}
{"result": "SELECT COUNT(*) FROM Paragraphs", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(Paragraph_ID) FROM Paragraphs", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) \nFROM Paragraphs \nJOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID \nWHERE Documents.Document_Name = 'Summer Show';", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(P.Paragraph_ID) \nFROM Paragraphs P \nJOIN Documents D ON P.Document_ID = D.Document_ID \nWHERE D.Document_Name = 'Summer Show';", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT Paragraph_Text, Other_Details \nFROM Paragraphs \nWHERE Paragraph_Text = 'Korea ';", "match": {"match": false, "result": [], "gt": [[null], [null]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Paragraph_Text, T3.Template_Type_Description \nFROM Paragraphs T1 \nJOIN Documents T2 ON T1.Document_ID = T2.Document_ID \nJOIN Templates T3 ON T2.Template_ID = T3.Template_ID \nJOIN Ref_Template_Types T4 ON T3.Template_Type_Code = T4.Template_Type_Code \nWHERE T1.Paragraph_Text LIKE '%Korea%'", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Paragraph_Text"}}
{"result": "SELECT P.Paragraph_ID, P.Paragraph_Text \nFROM Paragraphs P \nJOIN Documents D ON P.Document_ID = D.Document_ID \nWHERE D.Document_Name = 'Welcome to NY';", "match": {"match": true, "result": [[16615, "Japan"], [608931827, "Micronesia"]]}}
{"result": "SELECT P.Parenth_ID, P.Paragraph_Text \nFROM Paragraphs P \nJOIN Documents D ON P.Document_ID = D.Document_ID \nWHERE D.Document_Name = 'Welcome to NY';", "match": {"match": false, "error": "Query execution failed with error: no such column: P.Parenth_ID"}}
{"result": "SELECT P.Paragraph_Text\nFROM Paragraphs P\nJOIN Documents D ON P.Document_ID = D.Document_ID\nWHERE D.Document_Name = 'Customer reviews';", "match": {"match": true, "result": [["Korea"], ["Ukraine"], ["Korea"]]}}
{"result": "SELECT Paragraph_Text \nFROM Paragraphs \nJOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID \nWHERE Documents.Document_Name = 'Customer reviews';", "match": {"match": true, "result": [["Korea"], ["Ukraine"], ["Korea"]]}}
{"result": "SELECT \n    D.Document_ID, \n    COUNT(P.Paragraph_ID) AS Paragraph_Count\nFROM \n    Documents D\nINNER JOIN \n    Paragraphs P ON D.Document_ID = P.Document_ID\nGROUP BY \n    D.Document_ID\nORDER BY \n    D.Document_ID;", "match": {"match": true, "result": [[3, 1], [80, 2], [2394, 3], [3830, 1], [33930, 1], [50123, 1], [651512, 2], [3540024, 1], [16514113, 2], [385906526, 1]]}}
{"result": "SELECT Document_ID, COUNT(Paragraph_ID) as Paragraph_Count\nFROM Paragraphs\nGROUP BY Document_ID\nORDER BY Document_ID;", "match": {"match": true, "result": [[3, 1], [80, 2], [2394, 3], [3830, 1], [33930, 1], [50123, 1], [651512, 2], [3540024, 1], [16514113, 2], [385906526, 1]]}}
{"result": "SELECT \n    Document_ID, \n    Document_Name, \n    COUNT(Paragraph_ID) as Number_of_Paragraphs\nFROM \n    Documents\nLEFT JOIN \n    Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY \n    Document_ID, Document_Name", "match": {"match": false, "error": "Query execution failed with error: ambiguous column name: Document_ID"}}
{"result": "SELECT \n    D.Document_ID, \n    D.Document_Name, \n    COUNT(P.Paragraph_ID) AS Number_of_Paragraphs\nFROM \n    Documents D\nLEFT JOIN \n    Paragraphs P ON D.Document_ID = P.Document_ID\nGROUP BY \n    D.Document_ID, \n    D.Document_Name;", "match": {"match": false, "result": [[0, "Introduction of OS", 0], [1, "Understanding DB", 0], [3, "Summer Show", 1], [76, "Robbin CV", 0], [80, "Welcome to NY", 2], [82, "Data base", 0], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [801801, "How to read a book", 0], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "gt": [[3, "Summer Show", 1], [80, "Welcome to NY", 2], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Document_ID \nFROM Paragraphs \nGROUP BY Document_ID \nHAVING COUNT(Document_ID) >= 2;", "match": {"match": true, "result": [[80], [2394], [651512], [16514113]]}}
{"result": "SELECT DISTINCT T2.Document_ID\nFROM Paragraphs AS T1\nJOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID\nGROUP BY T2.Document_ID\nHAVING COUNT(T1.Paragraph_ID)  >= 2", "match": {"match": true, "result": [[80], [2394], [651512], [16514113]]}}
{"result": "SELECT T1.Document_ID, T1.Document_Name\nFROM Documents AS T1\nJOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID\nORDER BY T2.Document_ID DESC\nLIMIT 1", "match": {"match": false, "result": [[385906526, "About Korea"]], "gt": [[2394, "Customer reviews"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Document_ID, T2.Document_Name\nFROM Documents T1\nJOIN (\n  SELECT Document_ID, COUNT(*) AS Paragraph_Count\n  FROM Paragraphs\n  GROUP BY Document_ID\n  ORDER BY Paragraph_Count DESC\n  LIMIT 1\n) T3 ON T1.Document_ID = T3.Document_ID;", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Document_Name"}}
{"result": "SELECT Document_ID \nFROM Paragraphs \nGROUP BY Document_ID \nORDER BY COUNT(Document_ID) ASC \nLIMIT 1", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Document_ID \nFROM Paragraphs \nGROUP BY Document_ID \nORDER BY COUNT(Document_ID) ASC \nLIMIT 1;", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT DISTINCT T.Document_ID \nFROM Paragraphs P \nJOIN Documents T ON P.Document_ID = T.Document_ID \nGROUP BY T.Document_ID \nHAVING COUNT(DISTINCT P.Paragraph_ID) BETWEEN 1 AND 2;", "match": {"match": true, "result": [[3], [80], [3830], [33930], [50123], [651512], [3540024], [16514113], [385906526]]}}
{"result": "SELECT Document_ID\nFROM Paragraphs\nGROUP BY Document_ID\nHAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2", "match": {"match": true, "result": [[3], [80], [3830], [33930], [50123], [651512], [3540024], [16514113], [385906526]]}}
{"result": "SELECT Document_ID \nFROM Paragraphs \nWHERE Paragraph_Text = 'Brazil' \nOR Paragraph_Text = 'Ireland';", "match": {"match": false, "result": [[16514113], [16514113]], "gt": [[16514113]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Document_ID \nFROM Paragraphs T1 \nINNER JOIN Documents T2 \nON T1.Document_ID = T2.Document_ID \nWHERE T1.Paragraph_Text IN ('Brazil', 'Ireland')", "match": {"match": false, "result": [[16514113], [16514113]], "gt": [[16514113]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(Teacher_ID) FROM teacher", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT COUNT(Teacher_ID) FROM teacher", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT Name \nFROM teacher \nORDER BY CAST(REPLACE(Age, ',', '') AS INTEGER) ASC", "match": {"match": true, "result": [["Vicente Carretero"], ["Gustaaf Deloor"], ["Joseph Huts"], ["John Deloor"], ["Lucy Wong"], ["Anne Walker"], ["Kearsley Brown"]]}}
{"result": "SELECT Name FROM teacher ORDER BY Age ASC", "match": {"match": true, "result": [["Vicente Carretero"], ["Gustaaf Deloor"], ["Joseph Huts"], ["John Deloor"], ["Lucy Wong"], ["Anne Walker"], ["Kearsley Brown"]]}}
{"result": "SELECT Age, Hometown FROM teacher", "match": {"match": true, "result": [["32", "Blackrod Urban District"], ["29", "Bolton County Borough"], ["26", "Farnworth Municipal Borough"], ["33", "Horwich Urban District"], ["45", "Kearsley Urban District"], ["41", "Little Lever Urban District"], ["39", "Turton Urban District"]]}}
{"result": "SELECT Age, Hometown FROM teacher", "match": {"match": true, "result": [["32", "Blackrod Urban District"], ["29", "Bolton County Borough"], ["26", "Farnworth Municipal Borough"], ["33", "Horwich Urban District"], ["45", "Kearsley Urban District"], ["41", "Little Lever Urban District"], ["39", "Turton Urban District"]]}}
{"result": "SELECT Name \nFROM teacher \nWHERE Hometown != 'Little Lever Urban District';", "match": {"match": false, "result": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Lucy Wong"]], "gt": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Anne Walker"], ["Lucy Wong"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name \nFROM teacher \nWHERE Hometown != 'Little Lever Urban District';", "match": {"match": false, "result": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Lucy Wong"]], "gt": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Anne Walker"], ["Lucy Wong"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name FROM teacher WHERE Age = '32' OR Age = '33'", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT Name FROM teacher WHERE Age = '32' OR Age = '33'", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT Hometown \nFROM teacher \nORDER BY Age ASC \nLIMIT 1;", "match": {"match": true, "result": [["Farnworth Municipal Borough"]]}}
{"result": "SELECT Hometown FROM teacher ORDER BY CAST(Age AS int) ASC LIMIT 1", "match": {"match": true, "result": [["Farnworth Municipal Borough"]]}}
{"result": "SELECT Hometown, COUNT(Teacher_ID) FROM teacher GROUP BY Hometown", "match": {"match": true, "result": [["Blackrod Urban District", 1], ["Bolton County Borough", 1], ["Farnworth Municipal Borough", 1], ["Horwich Urban District", 1], ["Kearsley Urban District", 1], ["Little Lever Urban District", 1], ["Turton Urban District", 1]]}}
{"result": "SELECT Hometown, COUNT(Teacher_ID) AS Num_Teachers FROM teacher GROUP BY Hometown;", "match": {"match": true, "result": [["Blackrod Urban District", 1], ["Bolton County Borough", 1], ["Farnworth Municipal Borough", 1], ["Horwich Urban District", 1], ["Kearsley Urban District", 1], ["Little Lever Urban District", 1], ["Turton Urban District", 1]]}}
{"result": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(Hometown) DESC LIMIT 1", "match": {"match": true, "result": [["Turton Urban District"]]}}
{"result": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(Hometown) DESC LIMIT 1", "match": {"match": true, "result": [["Turton Urban District"]]}}
{"result": "SELECT Hometown \nFROM teacher \nGROUP BY Hometown \nHAVING COUNT(Teacher_ID) >= 2", "match": {"match": true, "result": []}}
{"result": "SELECT Hometown \nFROM teacher \nGROUP BY Hometown \nHAVING COUNT(Teacher_ID) >= 2", "match": {"match": true, "result": []}}
{"result": "SELECT T1.Name, T2.Course \nFROM teacher AS T1 \nJOIN course_arrange AS T3 ON T1.Teacher_ID = T3.Teacher_ID \nJOIN course AS T2 ON T2.Course_ID = T3.Course_ID", "match": {"match": true, "result": [["Kearsley Brown", "Math"], ["Vicente Carretero", "Math"], ["Gustaaf Deloor", "Science"], ["Anne Walker", "History"], ["Anne Walker", "Bible"], ["Lucy Wong", "Music"]]}}
{"result": "SELECT T1.`Name`, T2.`Course`\nFROM `teacher` AS T1\nJOIN `course_arrange` AS T2 ON T1.`Teacher_ID` = T2.`Teacher_ID`\nJOIN `course` AS T3 ON T2.`Course_ID` = T3.`Course_ID`", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Course"}}
{"result": "SELECT T1.`Name`, T2.`Course` \nFROM teacher AS T1 \nJOIN course_arrange AS T3 \nON T1.`Teacher_ID` = T3.`Teacher_ID` \nJOIN course AS T2 \nON T3.`Course_ID` = T2.`Course_ID` \nORDER BY T1.`Name` ASC", "match": {"match": true, "result": [["Anne Walker", "History"], ["Anne Walker", "Bible"], ["Gustaaf Deloor", "Science"], ["Kearsley Brown", "Math"], ["Lucy Wong", "Music"], ["Vicente Carretero", "Math"]]}}
{"result": "SELECT T1.Name, T2.Course \nFROM teacher AS T1 \nJOIN course_arrange AS T3 ON T1.Teacher_ID = T3.Teacher_ID \nJOIN course AS T2 ON T2.Course_ID = T3.Course_ID \nORDER BY T1.Name ASC", "match": {"match": true, "result": [["Anne Walker", "History"], ["Anne Walker", "Bible"], ["Gustaaf Deloor", "Science"], ["Kearsley Brown", "Math"], ["Lucy Wong", "Music"], ["Vicente Carretero", "Math"]]}}
{"result": "SELECT T2.Name \nFROM course_arrange AS T1 \nINNER JOIN teacher AS T2 \nON T1.Teacher_ID = T2.Teacher_ID \nINNER JOIN course AS T3 \nON T1.Course_ID = T3.Course_ID \nWHERE T3.Course = 'math';", "match": {"match": false, "result": [], "gt": [["Kearsley Brown"], ["Vicente Carretero"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Name \nFROM course_arrange AS T1 \nJOIN teacher AS T2 \nON T1.Teacher_ID = T2.Teacher_ID \nJOIN course AS T3 \nON T1.Course_ID = T3.Course_ID \nWHERE T3.Course = 'Math'", "match": {"match": true, "result": [["Kearsley Brown"], ["Vicente Carretero"]]}}
{"result": "SELECT T1.Name, COUNT(T2.Course_ID) \nFROM teacher AS T1 \nJOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T1.Name", "match": {"match": true, "result": [["Anne Walker", 2], ["Gustaaf Deloor", 1], ["Kearsley Brown", 1], ["Lucy Wong", 1], ["Vicente Carretero", 1]]}}
{"result": "SELECT T1.Name, COUNT(T2.`Course`) \nFROM teacher AS T1 \nLEFT JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T1.Name", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Course"}}
{"result": "SELECT T1.Name \nFROM teacher AS T1 \nJOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T1.Name \nHAVING COUNT(T2.Course_ID) >= 2", "match": {"match": true, "result": [["Anne Walker"]]}}
{"result": "SELECT T1.Name \nFROM teacher AS T1 \nJOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T2.Teacher_ID \nHAVING COUNT(T2.Course_ID) >= 2", "match": {"match": true, "result": [["Anne Walker"]]}}
{"result": "SELECT Name \nFROM teacher \nWHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange);", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT Name \nFROM teacher \nWHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange);", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT COUNT(*) \nFROM visitor \nWHERE Age < 30", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Name \nFROM visitor \nWHERE Level_of_membership > 4 \nORDER BY Level_of_membership DESC", "match": {"match": true, "result": [["Gonzalo Higua\u00edn "], ["Fernando Gago"], ["Guti Midfielder"]]}}
{"result": "SELECT AVG(Age) \nFROM visitor \nWHERE Level_of_membership <= 4;", "match": {"match": true, "result": [[36.0]]}}
{"result": "SELECT Name, Level_of_membership\nFROM visitor\nWHERE Level_of_membership > 4\nORDER BY Age DESC;", "match": {"match": true, "result": [["Fernando Gago", 6], ["Gonzalo Higua\u00edn ", 8], ["Guti Midfielder", 5]]}}
{"result": "SELECT Museum_ID, Name \nFROM museum \nORDER BY Num_of_Staff DESC \nLIMIT 1;", "match": {"match": true, "result": [[1, "Plaza Museum"]]}}
{"result": "SELECT AVG(`Num_of_Staff`) \nFROM museum \nWHERE `Open_Year` < 2009", "match": {"match": true, "result": [[31.333333333333332]]}}
{"result": "SELECT Open_Year, Num_of_Staff \nFROM museum \nWHERE Name = 'Plaza Museum';", "match": {"match": false, "result": [["2000", 62]], "gt": [[62, "2000"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name \nFROM museum \nWHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) \n                      FROM museum \n                      WHERE Open_Year > '2010');", "match": {"match": true, "result": [["Plaza Museum"], ["Capital Plaza Museum"], ["Jefferson Development Museum"]]}}
{"result": "SELECT T1.ID, T1.Name, T1.Age \nFROM visitor AS T1 \nJOIN visit AS T2 \nON T1.ID = T2.visitor_ID \nGROUP BY T1.ID, T1.Name, T1.Age \nHAVING COUNT(T2.Museum_ID) > 1", "match": {"match": true, "result": [[3, "Arjen Robben", 27], [5, "Fernando Gago", 36], [6, "Rafael van der Vaart", 25]]}}
{"result": "SELECT T2.ID, T2.Name, T2.Level_of_membership \nFROM visit AS T1 \nJOIN visitor AS T2 ON T1.visitor_ID = T2.ID \nWHERE (T1.Museum_ID, T1.visitor_ID) IN (\n  SELECT Museum_ID, visitor_ID \n  FROM visit \n  GROUP BY Museum_ID, visitor_ID \n  ORDER BY Total_spent DESC \n  LIMIT 1\n)", "match": {"match": false, "result": [[3, "Arjen Robben", 1]], "gt": [["3", "Arjen Robben", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.`Museum_ID`, T1.Name \nFROM visit AS T1 \nJOIN museum AS T2 ON T1.`Museum_ID` = T2.`Museum_ID` \nGROUP BY T2.`Museum_ID` \nORDER BY COUNT(T1.`Museum_ID`) DESC \nLIMIT 1", "match": {"match": false, "error": "Query execution failed with error: no such column: T1.Name"}}
{"result": "SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)", "match": {"match": true, "result": [["Jefferson Development Museum"], ["RiverPark Museum"], ["Place Tower Museum"], ["Central City District Residential Museum"]]}}
{"result": "SELECT T1.Name, T1.Age\nFROM visitor AS T1\nJOIN visit AS T2 ON T1.ID = T2.visitor_ID\nJOIN (\n  SELECT visitor_ID, MAX(Num_of_Ticket) AS max_tickets\n  FROM visit\n  GROUP BY visitor_ID\n) AS T3 ON T2.visitor_ID = T3.visitor_ID AND T2.Num_of_Ticket = T3.max_tickets", "match": {"match": false, "result": [["Fernando Gago", 36], ["Arjen Robben", 27], ["Rafael van der Vaart", 25]], "gt": [["Arjen Robben", 27]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(Num_of_Ticket) AS avg_tickets, MAX(Num_of_Ticket) AS max_tickets FROM visit", "match": {"match": true, "result": [[10.5, 24]]}}
{"result": "SELECT SUM(T1.Total_spent) \nFROM visit AS T1 \nJOIN visitor AS T2 ON T1.visitor_ID = T2.ID \nWHERE T2.Level_of_membership = 1;", "match": {"match": true, "result": [[570.84]]}}
{"result": "SELECT T1.Name \nFROM visitor AS T1 \nJOIN visit AS T2 ON T1.ID = T2.visitor_ID \nJOIN museum AS T3 ON T3.Museum_ID = T2.Museum_ID \nWHERE T3.Open_Year < '2009' AND T3.Open_Year > '2011'", "match": {"match": false, "result": [], "gt": [["Fernando Gago"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(ID) \nFROM visitor \nWHERE ID NOT IN \n( \n  SELECT visitor_ID \n  FROM visit \n  WHERE Museum_ID IN \n  ( \n    SELECT Museum_ID \n    FROM museum \n    WHERE Open_Year > 2010 \n  ) \n);", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(Museum_ID) \nFROM museum \nWHERE Open_Year > 2013 OR Open_Year < 2008;", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(id) \nFROM ship \nWHERE disposition_of_ship = 'Captured';", "match": {"match": true, "result": [[4]]}}
{"result": "SELECT name, tonnage FROM ship ORDER BY name DESC", "match": {"match": true, "result": [["Three Brothers", "t"], ["Mary", "t"], ["Lettice", "t"], ["HMS Avon", "391"], ["HMS Atalanta", "225"], ["Bon Accord", "t"], ["Bacchus", "t"]]}}
{"result": "SELECT name, date, result FROM battle", "match": {"match": false, "result": [["Battle of Adrianople", "14 April 1205", "Bulgarian victory"], ["Battle of Serres", "June 1205", "Bulgarian victory"], ["Battle of Rusion", "31 January 1206", "Bulgarian victory"], ["Battle of Rodosto", "February 1206", "Bulgarian victory"], ["Battle of Messinopolis", "4 September 1207", "Bulgarian victory"], ["Battle of Boruy", "June 1205", "Bulgarian victory"], ["Battle of Philippopolis", "31 June 1208", "Latin victory"], ["Siege of Constantinople", "1235", "Two Year Truce"]], "gt": [["Battle of Adrianople", "14 April 1205"], ["Battle of Serres", "June 1205"], ["Battle of Rusion", "31 January 1206"], ["Battle of Rodosto", "February 1206"], ["Battle of Messinopolis", "4 September 1207"], ["Battle of Boruy", "June 1205"], ["Battle of Philippopolis", "31 June 1208"], ["Siege of Constantinople", "1235"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(killed) as max_death, MIN(killed) as min_death FROM death", "match": {"match": true, "result": [[29, 0]]}}
{"result": "SELECT AVG(injured) FROM death", "match": {"match": true, "result": [[1.0769230769230769]]}}
{"result": "SELECT t2.killed, t2.injured \nFROM ship AS t1 \nJOIN death AS t2 ON t1.id = t2.caused_by_ship_id \nWHERE t1.tonnage = 't';", "match": {"match": true, "result": [[8, 0], [3, 0], [25, 0], [2, 0], [0, 0], [4, 5], [0, 0], [29, 0], [0, 0], [0, 0], [14, 0]]}}
{"result": "SELECT name, result \nFROM battle \nWHERE bulgarian_commander != 'Boril';", "match": {"match": true, "result": [["Battle of Adrianople", "Bulgarian victory"], ["Battle of Serres", "Bulgarian victory"], ["Battle of Rusion", "Bulgarian victory"], ["Battle of Rodosto", "Bulgarian victory"], ["Battle of Messinopolis", "Bulgarian victory"], ["Siege of Constantinople", "Two Year Truce"]]}}
{"result": "SELECT T2.id, T2.name \nFROM ship AS T1 \nJOIN battle AS T2 ON T1.lost_in_battle = T2.id \nWHERE T1.ship_type = 'Brig'", "match": {"match": true, "result": [[8, "Siege of Constantinople"], [7, "Battle of Philippopolis"], [6, "Battle of Boruy"], [5, "Battle of Messinopolis"], [4, "Battle of Rodosto"]]}}
{"result": "SELECT b.`id`, b.`name` \nFROM battle b \nWHERE b.`id` IN (\n  SELECT ds.`lost_in_battle` \n  FROM death ds \n  GROUP BY ds.`lost_in_battle` \n  HAVING COUNT(ds.`id`) > 10\n);", "match": {"match": false, "error": "Query execution failed with error: no such column: ds.lost_in_battle"}}
{"result": "SELECT T1.id, T1.name, SUM(T2.injured) AS total_injuries\nFROM ship AS T1\nJOIN death AS T2 ON T1.id = T2.caused_by_ship_id\nGROUP BY T1.id, T1.name\nORDER BY total_injuries DESC\nLIMIT 1;", "match": {"match": false, "result": [[4, "HMS Avon", 9]], "gt": [[5, "Three Brothers"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'", "match": {"match": true, "result": [["Battle of Adrianople"]]}}
{"result": "SELECT COUNT(DISTINCT result) FROM battle", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(T2.id) \nFROM battle AS T1 \nLEFT JOIN ship AS T2 ON T1.id = T2.lost_in_battle \nWHERE T2.tonnage != '225'", "match": {"match": false, "result": [[6]], "gt": [[7]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.name, T2.date \nFROM ship AS T1 \nJOIN battle AS T2 ON T1.lost_in_battle = T2.id \nWHERE T1.name = 'Lettice' OR T1.name = 'HMS Atalanta';", "match": {"match": false, "result": [["Siege of Constantinople", "1235"], ["Siege of Constantinople", "1235"]], "gt": [["Siege of Constantinople", "1235"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.name, T1.result, T1.bulgarian_commander \nFROM battle AS T1 \nLEFT JOIN ship AS T2 ON T1.id = T2.lost_in_battle \nWHERE T2.location != 'English Channel'", "match": {"match": false, "result": [["Battle of Messinopolis", "Bulgarian victory", "Unknown"], ["Siege of Constantinople", "Two Year Truce", "Ivan Asen II"]], "gt": [["Battle of Adrianople", "Bulgarian victory", "Kaloyan"], ["Battle of Rusion", "Bulgarian victory", "Kaloyan"], ["Battle of Serres", "Bulgarian victory", "Kaloyan"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT note \nFROM `death` \nWHERE note LIKE '%East%';", "match": {"match": true, "result": [["East Champaran, Bihar"]]}}
{"result": "SELECT line_1, line_2 FROM Addresses", "match": {"match": true, "result": [["2294 Grant Square Apt. 235", "Apt. 370"], ["3999 Aufderhar Ways Suite 593", "Apt. 388"], ["67942 Carlotta Ferry Apt. 686", "Apt. 583"], ["0144 Lamar Plaza Apt. 346", "Suite 703"], ["858 Peggie Bypass Suite 212", "Apt. 335"], ["16998 Mraz Lodge", "Apt. 689"], ["193 Marlin Brook", "Apt. 406"], ["202 Hessel Views Apt. 468", "Apt. 305"], ["0643 Muller Vista", "Suite 383"], ["7081 Eda Center", "Suite 830"], ["9283 Schulist Falls Apt. 037", "Suite 239"], ["979 Haag Shores Suite 656", "Apt. 468"], ["492 Wilkinson Route", "Suite 865"], ["186 Evan Motorway Apt. 409", "Suite 079"], ["74046 Metz Walk Apt. 113", "Suite 674"]]}}
{"result": "SELECT line_1, line_2 FROM Addresses", "match": {"match": true, "result": [["2294 Grant Square Apt. 235", "Apt. 370"], ["3999 Aufderhar Ways Suite 593", "Apt. 388"], ["67942 Carlotta Ferry Apt. 686", "Apt. 583"], ["0144 Lamar Plaza Apt. 346", "Suite 703"], ["858 Peggie Bypass Suite 212", "Apt. 335"], ["16998 Mraz Lodge", "Apt. 689"], ["193 Marlin Brook", "Apt. 406"], ["202 Hessel Views Apt. 468", "Apt. 305"], ["0643 Muller Vista", "Suite 383"], ["7081 Eda Center", "Suite 830"], ["9283 Schulist Falls Apt. 037", "Suite 239"], ["979 Haag Shores Suite 656", "Apt. 468"], ["492 Wilkinson Route", "Suite 865"], ["186 Evan Motorway Apt. 409", "Suite 079"], ["74046 Metz Walk Apt. 113", "Suite 674"]]}}
{"result": "SELECT COUNT(`course_id`) FROM `Courses`", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(course_id) FROM Courses", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT T2.course_description, T2.other_details \nFROM Courses AS T1 \nINNER JOIN Sections AS T2 \nON T1.course_id = T2.course_id \nWHERE T1.course_name = 'Math Course';", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.course_description"}}
{"result": "SELECT T2.`course_description` \nFROM `Courses` T1 \nJOIN `Sections` T3 ON T1.`course_id` = T3.`course_id` \nJOIN `Degree_Programs` T4 ON T3.`degree_program_id` = T4.`degree_program_id` \nJOIN `Departments` T5 ON T4.`department_id` = T5.`department_id` \nWHERE T5.`department_name` = 'Math'", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.course_description"}}
{"result": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'", "match": {"match": true, "result": [["148"]]}}
{"result": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';", "match": {"match": true, "result": [["148"]]}}
{"result": "SELECT department_id, department_name FROM Departments \nWHERE department_id IN (SELECT department_id FROM Degree_Programs GROUP BY department_id ORDER BY COUNT(degree_program_id) DESC LIMIT 1);", "match": {"match": false, "result": [[8, "statistics"]], "gt": [["statistics", 8]], "error": "Query result does not match ground truth."}}
{"result": "SELECT department_id, department_name \nFROM Departments \nORDER BY (SELECT COUNT(*) FROM Degree_Programs WHERE degree_programs.department_id = Departments.department_id) DESC \nLIMIT 1", "match": {"match": false, "result": [[8, "statistics"]], "gt": [["statistics", 8]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) \nFROM Degree_Programs;", "match": {"match": false, "result": [[15]], "gt": [[10]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT department_id) FROM Degree_Programs", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT COUNT(DISTINCT degree_program_id) FROM Degree_Programs", "match": {"match": false, "result": [[15]], "gt": [[3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT `degree_program_id`) AS total_degrees FROM `Degree_Programs`", "match": {"match": false, "result": [[15]], "gt": [[3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(`degree_program_id`) \nFROM `Degree_Programs` \nWHERE `department_id` = ( SELECT `department_id` FROM `Departments` WHERE `department_name` = 'Engineering' );", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(degree_program_id) \nFROM Degree_Programs \nWHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering');", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT section_name, section_description FROM Sections", "match": {"match": true, "result": [["a", "non"], ["b", "voluptatem"], ["c", "qui"], ["d", "voluptas"], ["e", "ex"], ["f", "doloremque"], ["g", "provident"], ["h", "et"], ["j", "quis"], ["k", "nesciunt"], ["l", "ad"], ["o", "et"], ["p", "facilis"], ["u", "reprehenderit"], ["y", "qui"]]}}
{"result": "SELECT section_name, section_description \nFROM Sections", "match": {"match": true, "result": [["a", "non"], ["b", "voluptatem"], ["c", "qui"], ["d", "voluptas"], ["e", "ex"], ["f", "doloremque"], ["g", "provident"], ["h", "et"], ["j", "quis"], ["k", "nesciunt"], ["l", "ad"], ["o", "et"], ["p", "facilis"], ["u", "reprehenderit"], ["y", "qui"]]}}
{"result": "SELECT course_id, course_name \nFROM Courses \nWHERE course_id IN (\n  SELECT course_id \n  FROM Sections \n  GROUP BY course_id \n  HAVING COUNT(section_id) <= 2\n);", "match": {"match": false, "result": [[1, "ds"], [2, "math"], [4, "en"], [5, "fr"], [6, "la"], [7, "cal"], [8, "nlp"], [9, "dl"], [10, "ml"], [12, "db"], [14, "pl"]], "gt": [["ds", 1], ["math", 2], ["en", 4], ["fr", 5], ["la", 6], ["cal", 7], ["nlp", 8], ["dl", 9], ["ml", 10], ["db", 12], ["pl", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.course_id, T1.course_name \nFROM Courses AS T1 \nJOIN Sections AS T2 ON T1.course_id = T2.course_id \nGROUP BY T1.course_id \nHAVING COUNT(T2.section_id) < 2", "match": {"match": false, "result": [[2, "math"], [4, "en"], [6, "la"], [7, "cal"], [9, "dl"], [10, "ml"], [12, "db"]], "gt": [["ds", 1], ["math", 2], ["en", 4], ["fr", 5], ["la", 6], ["cal", 7], ["nlp", 8], ["dl", 9], ["ml", 10], ["db", 12], ["pl", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT section_name FROM Sections ORDER BY section_name DESC", "match": {"match": true, "result": [["y"], ["u"], ["p"], ["o"], ["l"], ["k"], ["j"], ["h"], ["g"], ["f"], ["e"], ["d"], ["c"], ["b"], ["a"]]}}
{"result": "SELECT section_name FROM Sections ORDER BY section_name DESC", "match": {"match": true, "result": [["y"], ["u"], ["p"], ["o"], ["l"], ["k"], ["j"], ["h"], ["g"], ["f"], ["e"], ["d"], ["c"], ["b"], ["a"]]}}
{"result": "SELECT T1.semester_name, T1.semester_id \nFROM Semesters T1 \nJOIN Student_Enrolment T2 ON T1.semester_id = T2.semester_id \nGROUP BY T1.semester_id \nORDER BY COUNT(T2.student_id) DESC \nLIMIT 1;", "match": {"match": true, "result": [["summer 2010", 2]]}}
{"result": "SELECT T1.semester_name, T1.semester_id \nFROM Semesters AS T1 \nJOIN (\n    SELECT semester_id, COUNT(T2.student_id) AS student_count \n    FROM Student_Enrolment AS T2 \n    GROUP BY semester_id \n) AS T3 \nON T1.semester_id = T3.semester_id \nORDER BY T3.student_count DESC \nLIMIT 1", "match": {"match": true, "result": [["summer 2010", 2]]}}
{"result": "SELECT department_description \nFROM Departments \nWHERE department_name LIKE '%the computer%';", "match": {"match": false, "result": [], "gt": [["error"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT `department_description` \nFROM `Departments` \nWHERE `department_name` LIKE '%computer%';", "match": {"match": true, "result": [["error"]]}}
{"result": "SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id \nFROM Students AS T1 \nJOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id \nJOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id \nJOIN Semesters AS T4 ON T2.semester_id = T4.semester_id \nGROUP BY T1.student_id \nHAVING COUNT(T3.degree_program_id) = 2", "match": {"match": true, "result": [["Jarvis", "Aaliyah", "Carroll", 4], ["Reva", "Golda", "Osinski", 9], ["Jordy", "Osborne", "Rempel", 14]]}}
{"result": "SELECT DISTINCT T1.first_name, T1.middle_name, T1.last_name, T1.student_id \nFROM Students AS T1 \nJOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id \nJOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id \nWHERE T2.semester_id IN \n    (SELECT semester_id \n     FROM Student_Enrolment \n     GROUP BY semester_id \n     HAVING COUNT(DISTINCT degree_program_id) = 2)", "match": {"match": false, "result": [["Reva", "Golda", "Osinski", 9], ["Stanford", "Mona", "Rogahn", 6]], "gt": [["Jarvis", "Aaliyah", "Carroll", 4], ["Reva", "Golda", "Osinski", 9], ["Jordy", "Osborne", "Rempel", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT S.first_name, S.middle_name, S.last_name \nFROM Students S \nJOIN Student_Enrolment SE ON S.student_id = SE.student_id \nJOIN Degree_Programs DP ON SE.degree_program_id = DP.degree_program_id \nWHERE DP.degree_summary_name = 'Bachelor'", "match": {"match": true, "result": [["Reva", "Golda", "Osinski"], ["Frida", "Aisha", "Huel"], ["Jarvis", "Aaliyah", "Carroll"], ["Milton", "Vaughn", "Christiansen"], ["Stanford", "Mona", "Rogahn"]]}}
{"result": "SELECT DISTINCT s.first_name, s.middle_name, s.last_name \nFROM Students s \nJOIN Student_Enrolment se ON s.student_id = se.student_id \nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id \nWHERE dp.degree_summary_name = 'Bachelors';", "match": {"match": false, "result": [], "gt": [["Reva", "Golda", "Osinski"], ["Frida", "Aisha", "Huel"], ["Jarvis", "Aaliyah", "Carroll"], ["Milton", "Vaughn", "Christiansen"], ["Stanford", "Mona", "Rogahn"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.degree_summary_name \nFROM Degree_Programs AS T1 \nJOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id \nGROUP BY T1.degree_summary_name \nORDER BY COUNT(T2.student_id) DESC \nLIMIT 1", "match": {"match": true, "result": [["Bachelor"]]}}
{"result": "SELECT T1.degree_summary_name \nFROM Degree_Programs AS T1 \nJOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id \nGROUP BY T1.degree_summary_name \nORDER BY COUNT(T2.student_id) DESC \nLIMIT 1", "match": {"match": true, "result": [["Bachelor"]]}}
{"result": "SELECT T1.degree_program_id, T1.degree_summary_name \nFROM Degree_Programs AS T1 \nJOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id \nGROUP BY T1.degree_program_id, T1.degree_summary_name \nORDER BY COUNT(T1.degree_program_id) DESC \nLIMIT 1", "match": {"match": true, "result": [[9, "Bachelor"]]}}
{"result": "SELECT T1.degree_program_id, T1.degree_summary_name \nFROM Degree_Programs AS T1 \nJOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id \nJOIN Students AS T3 ON T2.student_id = T3.student_id \nGROUP BY T1.degree_program_id, T1.degree_summary_name \nORDER BY COUNT(T3.student_id) DESC \nLIMIT 1", "match": {"match": true, "result": [[9, "Bachelor"]]}}
{"result": "SELECT \n    se.student_id, \n    s.first_name, \n    s.middle_name, \n    s.last_name, \n    COUNT(*) as total_enrollments\nFROM \n    Student_Enrolment se\nJOIN \n    Students s ON se.student_id = s.student_id\nGROUP BY \n    se.student_id, s.first_name, s.middle_name, s.last_name\nORDER BY \n    total_enrollments DESC\nLIMIT 1;", "match": {"match": false, "result": [[6, "Stanford", "Mona", "Rogahn", 3]], "gt": [[7, "Frida", "Aisha", "Huel", 3, 7]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id, COUNT(T2.student_enrolment_id) as number_of_enrollments \nFROM Students T1 \nJOIN Student_Enrolment T2 ON T1.student_id = T2.student_id \nGROUP BY T1.student_id \nORDER BY COUNT(T2.student_enrolment_id) DESC \nLIMIT 1", "match": {"match": false, "result": [["Frida", "Aisha", "Huel", 7, 3]], "gt": [[7, "Frida", "Aisha", "Huel", 3, 7]], "error": "Query result does not match ground truth."}}
{"result": "SELECT semester_name FROM Semesters\nWHERE semester_id NOT IN (\n  SELECT semester_id FROM Student_Enrolment\n);", "match": {"match": true, "result": [["fall 2010"], ["spring 2013"], ["spring 2014"], ["spring 2016"], ["spring 2017"], ["winter 2018"]]}}
{"result": "SELECT T1.semester_name \nFROM Semesters AS T1 \nLEFT JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id \nWHERE T2.student_id IS NULL", "match": {"match": true, "result": [["fall 2010"], ["spring 2013"], ["spring 2014"], ["spring 2016"], ["spring 2017"], ["winter 2018"]]}}
{"result": "SELECT DISTINCT T1.course_name \nFROM Courses AS T1 \nJOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id;", "match": {"match": true, "result": [["la"], ["pl"], ["ai"], ["math"], ["ml"], ["os"], ["en"], ["nlp"], ["rs"], ["db"]]}}
{"result": "SELECT T2.course_name \nFROM Student_Enrolment_Courses AS T1 \nJOIN Courses AS T2 ON T1.course_id = T2.course_id", "match": {"match": false, "result": [["la"], ["la"], ["pl"], ["ai"], ["math"], ["ml"], ["math"], ["pl"], ["os"], ["en"], ["ml"], ["nlp"], ["rs"], ["rs"], ["db"]], "gt": [["la"], ["pl"], ["ai"], ["math"], ["ml"], ["os"], ["en"], ["nlp"], ["rs"], ["db"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.course_name FROM Courses AS T1 \nJOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id \nGROUP BY T1.course_id ORDER BY COUNT(T2.student_course_id) DESC LIMIT 1", "match": {"match": false, "result": [["pl"]], "gt": [["rs"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.course_name \nFROM Student_Enrolment_Courses AS T1 \nJOIN Courses AS T2 ON T1.course_id = T2.course_id \nJOIN Student_Enrolment AS T3 ON T1.student_enrolment_id = T3.student_enrolment_id \nGROUP BY T2.course_name \nORDER BY COUNT(T3.student_enrolment_id) DESC \nLIMIT 1", "match": {"match": true, "result": [["rs"]]}}
{"result": "SELECT T1.last_name \nFROM Students AS T1 \nJOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id OR T1.current_address_id = T2.address_id \nWHERE T2.state_province_county = 'North Carolina' \nAND T1.student_id NOT IN ( SELECT student_id FROM Student_Enrolment );", "match": {"match": false, "result": [], "gt": [["Gleichner"], ["Weimann"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.last_name \nFROM Students AS T1 \nJOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id \nWHERE T2.state_province_county = 'North Carolina' AND T1.student_id NOT IN (\n  SELECT T1.student_id \n  FROM Students AS T1 \n  JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id \n);", "match": {"match": false, "result": [], "gt": [["Gleichner"], ["Weimann"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.transcript_id, T1.transcript_date\nFROM Transcripts T1\nJOIN (\n  SELECT student_course_id, COUNT(*) as count\n  FROM Transcript_Contents\n  GROUP BY student_course_id\n  HAVING COUNT(*) >= 2\n) T2 ON T2.student_course_id = T1.transcript_id", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.transcript_id"}}
{"result": "SELECT T1.transcript_date, T1.transcript_id\nFROM Transcripts AS T1\nJOIN (\n  SELECT T3.transcript_id\n  FROM Transcript_Contents AS T2\n  JOIN Student_Enrolment_Courses AS T3 ON T2.student_course_id = T3.student_course_id\n  GROUP BY T3.transcript_id\n  HAVING COUNT(T3.student_course_id) >= 2\n) AS T4 ON T1.transcript_id = T4.transcript_id", "match": {"match": false, "error": "Query execution failed with error: no such column: T3.transcript_id"}}
{"result": "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'", "match": {"match": true, "result": [["(096)889-8954x524"]]}}
{"result": "SELECT `cell_mobile_number` \nFROM `Students` \nWHERE `first_name` = 'Timmothy' \nAND `last_name` = 'Ward'", "match": {"match": false, "result": [["(096)889-8954x524"]], "gt": [], "error": "Query result does not match ground truth."}}
{"result": "SELECT first_name, middle_name, last_name \nFROM Students \nORDER BY date_first_registered ASC \nLIMIT 1;", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT `first_name`, `middle_name`, `last_name` \nFROM `Students` \nORDER BY `date_first_registered` ASC LIMIT 1;", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT T1.first_name, T1.middle_name, T1.last_name \nFROM Students T1 \nJOIN Student_Enrolment T2 ON T1.student_id = T2.student_id \nJOIN Degree_Programs T3 ON T2.degree_program_id = T3.degree_program_id \nJOIN Departments T4 ON T3.department_id = T4.department_id \nWHERE T2.semester_id = (SELECT T2.semester_id \n                        FROM Student_Enrolment T2 \n                        JOIN Degree_Programs T3 ON T2.degree_program_id = T3.degree_program_id \n                        JOIN Departments T4 ON T3.department_id = T4.department_id \n                        WHERE T4.department_name = 'Graduation' \n                        ORDER BY T2.transcript_date ASC \n                        LIMIT 1)", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.transcript_date"}}
{"result": "SELECT first_name, middle_name, last_name FROM Students \nWHERE date_left = (SELECT MIN(date_left) FROM Students)", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT T1.first_name FROM Students AS T1 INNER JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id INNER JOIN Addresses AS T3 ON T1.permanent_address_id = T3.address_id WHERE T2.address_id != T3.address_id", "match": {"match": true, "result": [["Timmothy"], ["Hobart"], ["Warren"], ["Jarvis"], ["Stanford"], ["Frida"], ["Delaney"], ["Reva"], ["Helga"], ["Gregg"], ["Orrin"], ["Deon"], ["Jordy"], ["Jett"]]}}
{"result": "SELECT first_name \nFROM Students \nWHERE permanent_address_id != current_address_id", "match": {"match": true, "result": [["Timmothy"], ["Hobart"], ["Warren"], ["Jarvis"], ["Stanford"], ["Frida"], ["Delaney"], ["Reva"], ["Helga"], ["Gregg"], ["Orrin"], ["Deon"], ["Jordy"], ["Jett"]]}}
{"result": "SELECT a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country, a.other_address_details \nFROM Addresses a \nJOIN Students s ON a.address_id = s.current_address_id \nGROUP BY a.address_id \nORDER BY COUNT(s.student_id) DESC \nLIMIT 1;", "match": {"match": false, "result": [[9, "0643 Muller Vista", "Suite 383", null, "Port Elvisfurt", "777", "NorthCarolina", "Gabon", null]], "gt": [[9, "0643 Muller Vista", "Suite 383"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.address_id, T1.line_1, T1.line_2 \nFROM Addresses AS T1 \nJOIN Students AS T2 ON T1.address_id = T2.permanent_address_id \nGROUP BY T1.address_id \nORDER BY COUNT(T2.student_id) DESC \nLIMIT 1;", "match": {"match": true, "result": [[9, "0643 Muller Vista", "Suite 383"]]}}
{"result": "SELECT AVG(transcript_date) AS average_transcript_date \nFROM Transcripts", "match": {"match": true, "result": [[1989.9333333333334]]}}
{"result": "SELECT AVG(transcript_date) FROM Transcripts", "match": {"match": true, "result": [[1989.9333333333334]]}}
{"result": "SELECT T1.transcript_date, T1.other_details \nFROM Transcripts T1 \nWHERE T1.transcript_date = (SELECT MIN(transcript_date) FROM Transcripts)", "match": {"match": true, "result": [["1975-05-06 12:04:47", null]]}}
{"result": "SELECT MIN(T1.transcript_date) AS earliest_release_date, T1.other_details \nFROM Transcripts AS T1", "match": {"match": true, "result": [["1975-05-06 12:04:47", null]]}}
{"result": "SELECT COUNT(*) \nFROM Transcripts", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(`transcript_id`) FROM `Transcripts`", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT MAX(transcript_date) FROM Transcripts", "match": {"match": true, "result": [["2013-06-30 13:01:40"]]}}
{"result": "SELECT MAX(transcript_date) \nFROM Transcripts", "match": {"match": true, "result": [["2013-06-30 13:01:40"]]}}
{"result": "SELECT COUNT(DISTINCT s.student_enrolment_id) ,  s.student_enrolment_id\nFROM `Student_Enrolment_Courses` sc\nJOIN `Student_Enrolment` s ON sc.student_enrolment_id = s.student_enrolment_id\nGROUP BY s.student_enrolment_id;", "match": {"match": false, "result": [[1, 2], [1, 4], [1, 5], [1, 6], [1, 8], [1, 9], [1, 10], [1, 13], [1, 14]], "gt": [[4, 0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(count) ,  T3.student_enrolment_id \nFROM (\n    SELECT T1.student_course_id ,  COUNT(T2.transcript_id) AS count \n    FROM Student_Enrolment_Courses T1 \n    JOIN Transcript_Contents T2 ON T1.student_course_id = T2.student_course_id \n    GROUP BY T1.student_course_id \n) T \nJOIN Student_Enrolment_Courses T3 ON T.student_course_id = T3.student_course_id \nGROUP BY T3.student_enrolment_id", "match": {"match": false, "result": [[4, 2], [2, 4], [1, 5], [1, 9], [3, 13], [1, 14]], "gt": [[4, 0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.transcript_date, T2.transcript_id \nFROM Transcript_Contents AS T1 \nJOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id \nGROUP BY T2.transcript_id \nORDER BY COUNT(T1.student_course_id) ASC \nLIMIT 1;", "match": {"match": true, "result": [["1975-10-28 15:16:51", 2]]}}
{"result": "SELECT T2.transcript_date, T2.transcript_id \nFROM Student_Enrolment_Courses AS T1 \nJOIN Transcripts AS T2 ON T1.student_course_id = T2.student_course_id \nGROUP BY T1.student_course_id \nORDER BY COUNT(T1.student_course_id) ASC \nLIMIT 1", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.student_course_id"}}
{"result": "SELECT DISTINCT T2.semester_name \nFROM Degree_Programs AS T1 \nJOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id \nJOIN Semesters AS T3 ON T2.semester_id = T3.semester_id \nJOIN Degree_Programs AS T4 ON T2.degree_program_id = T4.degree_program_id \nWHERE T1.degree_summary_name = 'Master' AND T4.degree_summary_name = 'Bachelor'", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.semester_name"}}
{"result": "SELECT T.semester_id \nFROM (\n  SELECT T2.semester_id, COUNT(T1.student_id) as student_count \n  FROM Student_Enrolment T1 \n  JOIN Degree_Programs T2 ON T1.degree_program_id = T2.degree_program_id \n  GROUP BY T2.semester_id \n) T \nWHERE student_count > 1", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.semester_id"}}
{"result": "SELECT COUNT(DISTINCT current_address_id) FROM Students", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT DISTINCT A.* \nFROM Addresses A\nJOIN Students S ON A.address_id = S.current_address_id;", "match": {"match": false, "result": [[10, "7081 Eda Center", "Suite 830", null, "Rutherfordtown", "839", "Delaware", "Kyrgyz Republic", null], [12, "979 Haag Shores Suite 656", "Apt. 468", null, "Prohaskafort", "590", "SouthDakota", "Lesotho", null], [9, "0643 Muller Vista", "Suite 383", null, "Port Elvisfurt", "777", "NorthCarolina", "Gabon", null], [7, "193 Marlin Brook", "Apt. 406", null, "Herzoghaven", "068", "Arkansas", "Cook Islands", null], [6, "16998 Mraz Lodge", "Apt. 689", null, "North Omer", "902", "Kentucky", "Gibraltar", null], [15, "74046 Metz Walk Apt. 113", "Suite 674", null, "Port Oceane", "669", "Wyoming", "Norfolk Island", null], [1, "2294 Grant Square Apt. 235", "Apt. 370", null, "Port Chelsea", "148", "Virginia", "Iceland", null], [2, "3999 Aufderhar Ways Suite 593", "Apt. 388", null, "Lake Laishafurt", "943", "Kentucky", "Burundi", null], [14, "186 Evan Motorway Apt. 409", "Suite 079", null, "Lake Careyberg", "895", "Kentucky", "New Caledonia", null]], "gt": [[9]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    first_name, \n    middle_name, \n    last_name, \n    cell_mobile_number, \n    email_address, \n    ssn,\n    date_first_registered, \n    date_left, \n    other_student_details\nFROM \n    Students\nORDER BY \n    last_name DESC, \n    first_name DESC, \n    middle_name DESC;", "match": {"match": false, "result": [["Deon", "Brooklyn", "Weimann", "(213)445-0399x85208", "jhuel@example.com", "68095", "1986-02-24 21:12:23", "2014-05-30 23:32:02", "assumenda"], ["Timmothy", "Anna", "Ward", "(096)889-8954x524", "erwin.zboncak@example.com", "965", "1971-02-05 07:28:23", "1971-05-17 19:28:49", "quia"], ["Gregg", "Mossie", "Schuppe", "(462)246-7921", "nbruen@example.org", "494", "1989-05-24 23:31:29", "1975-10-09 00:49:27", "omnis"], ["Stanford", "Mona", "Rogahn", "436.613.7683", "skassulke@example.net", "248", "1997-03-20 16:47:25", "2016-04-09 12:27:04", "qui"], ["Jordy", "Osborne", "Rempel", "(605)919-3594x3661", "gracie29@example.com", "34458427", "2004-12-24 12:36:46", "1999-08-24 00:07:10", "et"], ["Reva", "Golda", "Osinski", "(507)365-8405", "qo'kon@example.com", "39", "2017-01-04 08:10:25", "1990-09-01 05:03:27", "nesciunt"], ["Helga", "Cleve", "Mohr", "677.401.9382", "nya.lesch@example.net", "43", "2009-09-25 00:14:25", "2017-07-09 21:38:43", "rerum"], ["Orrin", "Neal", "Kemmer", "(982)153-1469x1733", "beth42@example.org", "6274274", "2005-12-15 08:42:10", "2006-08-04 17:26:49", "non"], ["Jett", "Alberta", "Jaskolski", "877.549.9067x8723", "mya88@example.org", "156", "1982-06-19 13:15:18", "1982-06-11 00:25:39", "omnis"], ["Frida", "Aisha", "Huel", "1-879-796-8987x164", "baumbach.lucious@example.org", "668", "2018-03-13 09:56:22", "1997-11-16 08:54:33", "dolorum"], ["Warren", "Violet", "Gleichner", "07661787471", "johns.unique@example.net", "3", "2007-08-29 23:25:41", "2007-03-31 09:53:19", "facilis"], ["Milton", "Vaughn", "Christiansen", "171-642-5684", "lhartmann@example.org", "", "1973-05-19 19:12:46", "2007-11-28 12:50:21", "laborum"], ["Jarvis", "Aaliyah", "Carroll", "09700166582", "jillian26@example.net", "141072406", "2014-03-28 05:48:23", "2007-08-02 04:12:58", "atque"], ["Hobart", "Lorenz", "Balistreri", "1-009-710-5151", "swift.kolby@example.com", "304246", "1976-10-26 02:33:06", "2013-10-05 17:41:28", "autem"], ["Delaney", "Judd", "Ankunding", "03174364122", "dell43@example.net", "402", "1982-02-14 08:46:35", "2004-12-08 05:29:11", "voluptatem"]], "gt": [["voluptatem"], ["rerum"], ["quia"], ["qui"], ["omnis"], ["omnis"], ["non"], ["nesciunt"], ["laborum"], ["facilis"], ["et"], ["dolorum"], ["autem"], ["atque"], ["assumenda"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT other_student_details FROM Students ORDER BY last_name DESC", "match": {"match": false, "result": [["assumenda"], ["quia"], ["omnis"], ["qui"], ["et"], ["nesciunt"], ["rerum"], ["non"], ["omnis"], ["dolorum"], ["facilis"], ["laborum"], ["atque"], ["autem"], ["voluptatem"]], "gt": [["voluptatem"], ["rerum"], ["quia"], ["qui"], ["omnis"], ["omnis"], ["non"], ["nesciunt"], ["laborum"], ["facilis"], ["et"], ["dolorum"], ["autem"], ["atque"], ["assumenda"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT section_description FROM Sections WHERE section_name = 'h'", "match": {"match": true, "result": [["et"]]}}
{"result": "SELECT section_description \nFROM Sections \nWHERE section_name = 'h';", "match": {"match": true, "result": [["et"]]}}
{"result": "SELECT first_name \nFROM Students \nWHERE country IN (SELECT country FROM Addresses WHERE address_id = permanent_address_id AND country = 'Haiti') \nOR cell_mobile_number = '09700166582'", "match": {"match": false, "error": "Query execution failed with error: no such column: country"}}
{"result": "SELECT T1.first_name \nFROM Students AS T1 \nINNER JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id \nWHERE T2.country = 'Haiti' \nUNION \n\nSELECT T1.first_name \nFROM Students AS T1 \nWHERE T1.cell_mobile_number = '09700166582'", "match": {"match": false, "result": [["Delaney"], ["Hobart"], ["Jarvis"], ["Warren"]], "gt": [["Jarvis"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Title FROM Cartoon ORDER BY Title ASC", "match": {"match": true, "result": [["Dawn of the Dead Man!"], ["Day of the Dark Knight!"], ["Deep Cover for Batman!"], ["Enter the Outsiders!"], ["Evil Under the Sea!"], ["Fall of the Blue Beetle!"], ["Invasion of the Secret Santas!"], ["Journey to the Center of the Bat!"], ["Return of the Fearsome Fangs!"], ["Terror on Dinosaur Island!"], ["The Eyes of Despero!"], ["The Rise of the Blue Beetle!"]]}}
{"result": "SELECT Title FROM Cartoon ORDER BY Title ASC", "match": {"match": true, "result": [["Dawn of the Dead Man!"], ["Day of the Dark Knight!"], ["Deep Cover for Batman!"], ["Enter the Outsiders!"], ["Evil Under the Sea!"], ["Fall of the Blue Beetle!"], ["Invasion of the Secret Santas!"], ["Journey to the Center of the Bat!"], ["Return of the Fearsome Fangs!"], ["Terror on Dinosaur Island!"], ["The Eyes of Despero!"], ["The Rise of the Blue Beetle!"]]}}
{"result": "SELECT * FROM Cartoon WHERE Directed_by = 'Ben Jones'", "match": {"match": false, "result": [[1.0, "The Rise of the Blue Beetle!", "Ben Jones", "Michael Jelenic", "November14,2008", 101.0, "700"], [4.0, "Day of the Dark Knight!", "Ben Jones", "J. M. DeMatteis", "January2,2009", 104.0, "704"], [7.0, "Dawn of the Dead Man!", "Ben Jones", "Steven Melching", "January16,2009", 107.0, "707"], [10.0, "The Eyes of Despero!", "Ben Jones", "J. M. DeMatteis", "February6,2009", 110.0, "728"]], "gt": [["The Rise of the Blue Beetle!"], ["Day of the Dark Knight!"], ["Dawn of the Dead Man!"], ["The Eyes of Despero!"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Title \nFROM Cartoon \nWHERE Directed_by = 'Ben Jones';", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Day of the Dark Knight!"], ["Dawn of the Dead Man!"], ["The Eyes of Despero!"]]}}
{"result": "SELECT COUNT(title) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(*) \nFROM Cartoon \nWHERE Written_by = 'Joseph Kuhr'", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT T2.Title, T2.Directed_by \nFROM TV_series AS T1 \nJOIN Cartoon AS T2 ON T1.id = T2.id \nORDER BY T2.`Original_air_date`", "match": {"match": true, "result": [["Invasion of the Secret Santas!", "Brandon Vietti"], ["Evil Under the Sea!", "Michael Chang"], ["Return of the Fearsome Fangs!", "Brandon Vietti"], ["Deep Cover for Batman!", "Michael Chang"], ["The Eyes of Despero!", "Ben Jones"], ["Dawn of the Dead Man!", "Ben Jones"], ["Day of the Dark Knight!", "Ben Jones"], ["Fall of the Blue Beetle!", "Brandon Vietti"], ["Journey to the Center of the Bat!", "Michael Chang"], ["Enter the Outsiders!", "Michael Chang"], ["The Rise of the Blue Beetle!", "Ben Jones"], ["Terror on Dinosaur Island!", "Brandon Vietti"]]}}
{"result": "SELECT Title, Directed_by \nFROM Cartoon \nORDER BY Original_air_date;", "match": {"match": true, "result": [["Invasion of the Secret Santas!", "Brandon Vietti"], ["Evil Under the Sea!", "Michael Chang"], ["Return of the Fearsome Fangs!", "Brandon Vietti"], ["Deep Cover for Batman!", "Michael Chang"], ["The Eyes of Despero!", "Ben Jones"], ["Dawn of the Dead Man!", "Ben Jones"], ["Day of the Dark Knight!", "Ben Jones"], ["Fall of the Blue Beetle!", "Brandon Vietti"], ["Journey to the Center of the Bat!", "Michael Chang"], ["Enter the Outsiders!", "Michael Chang"], ["The Rise of the Blue Beetle!", "Ben Jones"], ["Terror on Dinosaur Island!", "Brandon Vietti"]]}}
{"result": "SELECT T1.Title FROM Cartoon AS T1 INNER JOIN Cartoon AS T2 ON T1.id = T2.id WHERE T2.Directed_by = 'Ben Jones' OR T2.Directed_by = 'Brandon Vietti'", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Terror on Dinosaur Island!"], ["Day of the Dark Knight!"], ["Invasion of the Secret Santas!"], ["Dawn of the Dead Man!"], ["Fall of the Blue Beetle!"], ["The Eyes of Despero!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT Title \nFROM Cartoon \nWHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Terror on Dinosaur Island!"], ["Day of the Dark Knight!"], ["Invasion of the Secret Santas!"], ["Dawn of the Dead Man!"], ["Fall of the Blue Beetle!"], ["The Eyes of Despero!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT Country, COUNT(id) as total_channels\nFROM TV_Channel\nGROUP BY Country\nORDER BY total_channels DESC;", "match": {"match": false, "result": [["Italy", 12], ["United Kingdom", 2], ["Poland", 1]], "gt": [["Italy", 12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Country, COUNT(id) FROM TV_Channel GROUP BY Country ORDER BY COUNT(id) DESC LIMIT 1", "match": {"match": true, "result": [["Italy", 12]]}}
{"result": "SELECT COUNT(DISTINCT `series_name`), COUNT(DISTINCT `Content`) \nFROM TV_Channel", "match": {"match": true, "result": [[15, 1]]}}
{"result": "SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel", "match": {"match": true, "result": [[15, 1]]}}
{"result": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'", "match": {"match": true, "result": [["music"]]}}
{"result": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'", "match": {"match": true, "result": [["music"]]}}
{"result": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'", "match": {"match": true, "result": [["Sky Famiglia"]]}}
{"result": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'", "match": {"match": true, "result": [["Sky Famiglia"]]}}
{"result": "SELECT COUNT(id) FROM TV_Channel WHERE Language = 'English'", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(id) FROM TV_Channel WHERE Language = 'English'", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Language, COUNT(TV_Channel.id) AS num \nFROM TV_Channel \nGROUP BY Language \nORDER BY num ASC \nLIMIT 1", "match": {"match": true, "result": [["English", 3]]}}
{"result": "SELECT Language, COUNT(TV_Channel.id) FROM TV_Channel GROUP BY Language ORDER BY COUNT(TV_Channel.id) ASC LIMIT 1", "match": {"match": true, "result": [["English", 3]]}}
{"result": "SELECT Language, COUNT(id) AS \"Number_of_Channels\" FROM TV_Channel GROUP BY Language", "match": {"match": true, "result": [["English", 3], ["Italian", 12]]}}
{"result": "SELECT Language, COUNT(*) \nFROM TV_Channel \nGROUP BY Language", "match": {"match": true, "result": [["English", 3], ["Italian", 12]]}}
{"result": "SELECT T2.series_name \nFROM Cartoon AS T1 \nJOIN TV_Channel AS T2 ON T1.Channel = T2.id \nWHERE T1.Title = 'The Rise of the Blue Beetle!';", "match": {"match": true, "result": [["Sky Radio"]]}}
{"result": "SELECT T1.`series_name` \nFROM `TV_Channel` AS T1 \nINNER JOIN Cartoon AS T2 ON T1.id = T2.Channel \nWHERE T2.Title = 'The Rise of the Blue Beetle';", "match": {"match": false, "result": [], "gt": [["Sky Radio"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Title \nFROM TV_Channel AS T1 \nINNER JOIN Cartoon AS T2 \nON T1.id = T2.Channel \nWHERE T1.series_name = 'Sky Radio'", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT T2.Title \nFROM TV_Channel AS T1 \nINNER JOIN Cartoon AS T2 \nON T1.id = T2.Channel \nWHERE T1.series_name = 'Sky Radio';", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT Episode FROM TV_series ORDER BY Rating DESC", "match": {"match": false, "result": [["A Love of a Lifetime"], ["Friendly Skies"], ["Game Three"], ["The Year of the Rabbit"], ["Winterland"], ["The Legend of Dylan McCleen"], ["Keepers"], ["Emily"], ["Blowback"], ["Home By Another Way"], ["Double Down"], ["The Hanged Man"]], "gt": [["The Hanged Man"], ["Double Down"], ["Home By Another Way"], ["Keepers"], ["Emily"], ["Blowback"], ["The Legend of Dylan McCleen"], ["Winterland"], ["The Year of the Rabbit"], ["Game Three"], ["Friendly Skies"], ["A Love of a Lifetime"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Episode FROM TV_series WHERE Rating ORDER BY Rating DESC", "match": {"match": false, "result": [["A Love of a Lifetime"], ["Friendly Skies"], ["Game Three"], ["The Year of the Rabbit"], ["Winterland"], ["The Legend of Dylan McCleen"], ["Keepers"], ["Emily"], ["Blowback"], ["Home By Another Way"], ["Double Down"], ["The Hanged Man"]], "gt": [["The Hanged Man"], ["Double Down"], ["Home By Another Way"], ["Keepers"], ["Emily"], ["Blowback"], ["The Legend of Dylan McCleen"], ["Winterland"], ["The Year of the Rabbit"], ["Game Three"], ["Friendly Skies"], ["A Love of a Lifetime"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT TOP 3 Episode, Rating \nFROM TV_series \nORDER BY Rating DESC;", "match": {"match": false, "error": "Query execution failed with error: near \"3\": syntax error"}}
{"result": "SELECT MAX(Rating) ,  id FROM TV_series GROUP BY id ORDER BY MAX(Rating) DESC LIMIT 3", "match": {"match": false, "result": [["5.8", 1.0], ["5.3", 2.0], ["4.4", 3.0]], "gt": [["A Love of a Lifetime", "5.8"], ["Friendly Skies", "5.3"], ["Game Three", "4.4"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MIN(Share), MAX(Share) \nFROM TV_series;", "match": {"match": false, "result": [[5.0, 9.0]], "gt": [[9.0, 5.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM TV_series", "match": {"match": true, "result": [[9.0, 5.0]]}}
{"result": "SELECT Air_Date \nFROM TV_series \nWHERE Episode = 'A Love of a Lifetime';", "match": {"match": true, "result": [["September 24, 2007"]]}}
{"result": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "match": {"match": true, "result": [["September 24, 2007"]]}}
{"result": "SELECT COUNT(T2.Weekly_Rank) FROM `TV_series` AS T1 INNER JOIN `TV_Channel` AS T2 ON T1.Channel = T2.id WHERE T1.Episode = 'A Love of a Lifetime'", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Weekly_Rank"}}
{"result": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'", "match": {"match": true, "result": [[43.0]]}}
{"result": "SELECT T1.series_name \nFROM TV_Channel AS T1 \nINNER JOIN TV_series AS T2 \nON T1.id = T2.Channel \nWHERE T2.Episode = 'A Love of a Lifetime';", "match": {"match": true, "result": [["Sky Radio"]]}}
{"result": "SELECT T2.series_name \nFROM TV_series AS T1 \nINNER JOIN TV_Channel AS T2 \nON T1.Channel = T2.id \nWHERE T1.Episode = 'A Love of a Lifetime';", "match": {"match": true, "result": [["Sky Radio"]]}}
{"result": "SELECT T2.`Episode` \nFROM `TV_Channel` AS T1 \nINNER JOIN `TV_series` AS T2 \nON T1.id = T2.Channel \nWHERE T1.series_name = 'Sky Radio';", "match": {"match": true, "result": [["A Love of a Lifetime"], ["Keepers"]]}}
{"result": "SELECT T2.Episode \nFROM TV_Channel AS T1 \nJOIN TV_series AS T2 ON T1.id = T2.Channel \nWHERE T1.series_name = 'Sky Radio'", "match": {"match": true, "result": [["A Love of a Lifetime"], ["Keepers"]]}}
{"result": "SELECT COUNT(T1.id), T1.Directed_by \nFROM Cartoon AS T1 \nGROUP BY T1.Directed_by", "match": {"match": true, "result": [[4, "Ben Jones"], [4, "Brandon Vietti"], [4, "Michael Chang"]]}}
{"result": "SELECT Directed_by, COUNT(T1.id) AS Total_Cartoons FROM Cartoon AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id GROUP BY T1.Directed_by", "match": {"match": false, "result": [["Ben Jones", 4], ["Brandon Vietti", 4], ["Michael Chang", 4]], "gt": [[4, "Ben Jones"], [4, "Brandon Vietti"], [4, "Michael Chang"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.`Production_code`, T1.`Channel` \nFROM Cartoon AS T1 \nORDER BY T1.`Original_air_date` DESC \nLIMIT 1", "match": {"match": true, "result": [[102.0, "701"]]}}
{"result": "SELECT T2.\"Production_code\", T2.Channel \nFROM \"TV_series\" AS T1 \nINNER JOIN \"Cartoon\" AS T2 \nON T1.id = T2.id \nWHERE T2.Channel = ( SELECT T3.id \n                     FROM \"TV_Channel\" AS T3 \n                     ORDER BY T3.id DESC \n                     LIMIT 1 );", "match": {"match": false, "result": [[110.0, "728"]], "gt": [[102.0, "701"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.`Package_Option`, T1.`series_name` \nFROM `TV_Channel` T1 \nWHERE T1.`Hight_definition_TV` = 'Yes';", "match": {"match": false, "result": [], "gt": [["Sky Famiglia + Sky HD", "MTV Live HD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Package_Option, series_name \nFROM TV_Channel \nWHERE Hight_definition_TV = 'Yes';", "match": {"match": false, "result": [], "gt": [["Sky Famiglia + Sky HD", "MTV Live HD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Country \nFROM TV_Channel AS T1 \nJOIN Cartoon AS T2 ON T1.id = T2.Channel \nWHERE T2.Written_by = 'Todd Casey'", "match": {"match": true, "result": [["United Kingdom"], ["Italy"]]}}
{"result": "SELECT T1.`Country` \nFROM TV_Channel AS T1 \nJOIN Cartoon AS T2 ON T1.id = T2.Channel \nWHERE Written_by = 'Todd Casey'", "match": {"match": true, "result": [["United Kingdom"], ["Italy"]]}}
{"result": "SELECT T1.Country \nFROM TV_Channel AS T1\nLEFT JOIN Cartoon AS T2 \nON T1.id = T2.Channel\nWHERE T2.Written_by IS NULL OR T2.Written_by != 'Todd Casey'", "match": {"match": false, "result": [["Italy"], ["Italy"], ["Italy"], ["Italy"], ["Italy"], ["United Kingdom"], ["United Kingdom"], ["United Kingdom"], ["Italy"], ["Poland"], ["Italy"], ["Italy"], ["Italy"], ["Italy"], ["Italy"], ["Italy"]], "gt": [["Poland"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.`Country` \nFROM `TV_Channel` AS T1 \nWHERE T1.id IN ( \n    SELECT T2.Channel \n    FROM Cartoon AS T2 \n    WHERE T2.`Written_by` = 'Todd Casey' \n)", "match": {"match": false, "result": [["Italy"], ["United Kingdom"]], "gt": [["Poland"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.series_name, T1.Country \nFROM TV_Channel AS T1 \nWHERE T1.id IN (\n  SELECT T3.id \n  FROM Cartoon AS T3 \n  WHERE T3.Directed_by = 'Ben Jones' \n  OR T3.Directed_by = 'Michael Chang'\n);", "match": {"match": false, "result": [], "gt": [["MTV Dance", "United Kingdom"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.series_name, T1.Country \nFROM TV_Channel AS T1 \nINNER JOIN Cartoon AS T2 \nON T1.id = T2.Channel \nWHERE T2.Directed_by = 'Ben Jones' \nOR T2.Directed_by = 'Michael Chang';", "match": {"match": false, "result": [["Sky Radio", "Italy"], ["Music Box Italia", "Italy"], ["MTV Hits", "Italy"], ["MTV Rocks", "United Kingdom"], ["MTV Dance", "United Kingdom"], ["MTV Dance", "United Kingdom"], ["Classica", "Italy"], ["MTV Dance", "United Kingdom"]], "gt": [["MTV Dance", "United Kingdom"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'", "match": {"match": true, "result": [["4:3", "Italy"], ["4:3", "Italy"], ["4:3 / 16:9", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3", "Italy"], ["4:3", "Italy"]]}}
{"result": "SELECT Pixel_aspect_ratio_PAR, Country \nFROM TV_Channel \nWHERE Language != 'English';", "match": {"match": true, "result": [["4:3", "Italy"], ["4:3", "Italy"], ["4:3 / 16:9", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3", "Italy"], ["4:3", "Italy"]]}}
{"result": "SELECT id FROM TV_Channel GROUP BY Country HAVING COUNT(id) > 2", "match": {"match": true, "result": [["700"]]}}
{"result": "SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(id) > 2", "match": {"match": false, "result": [], "gt": [["700"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT id FROM TV_Channel \nWHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')", "match": {"match": true, "result": [["701"], ["703"], ["705"], ["706"], ["708"], ["709"], ["713"], ["714"], ["715"], ["717"], ["719"]]}}
{"result": "SELECT id FROM TV_Channel WHERE id NOT IN ( SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones' );", "match": {"match": true, "result": [["701"], ["703"], ["705"], ["706"], ["708"], ["709"], ["713"], ["714"], ["715"], ["717"], ["719"]]}}
{"result": "SELECT T1.\"Package_Option\" \nFROM \"TV_Channel\" AS T1 \nJOIN \"Cartoon\" AS T2 ON T1.\"id\" = T2.\"Channel\" \nWHERE T2.\"Directed_by\" != 'Ben Jones'", "match": {"match": false, "result": [["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["no ( FTV )"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"]], "gt": [["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["no ( FTV )"], ["Sky Famiglia + Sky HD"], ["no ( FTV )"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.`Package_Option` FROM \"TV_Channel\" AS T1 \nINNER JOIN TV_series AS T2 ON T1.id = T2.Channel \nWHERE T1.id NOT IN (SELECT T3.Channel FROM Cartoon AS T3 WHERE T3.`Directed_by` = 'Ben Jones')", "match": {"match": false, "result": [["Sky Famiglia"], ["no ( FTV )"], ["Sky Famiglia"], ["no ( FTV )"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"]], "gt": [["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["no ( FTV )"], ["Sky Famiglia + Sky HD"], ["no ( FTV )"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) FROM poker_player", "match": {"match": true, "result": [[5]]}}
{"result": "SELECT COUNT(Poker_Player_ID) FROM poker_player", "match": {"match": true, "result": [[5]]}}
{"result": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "match": {"match": true, "result": [[596462.0], [476090.0], [189233.0], [142800.0], [104871.0]]}}
{"result": "SELECT Earnings \nFROM poker_player \nORDER BY Earnings DESC;", "match": {"match": true, "result": [[596462.0], [476090.0], [189233.0], [142800.0], [104871.0]]}}
{"result": "SELECT Final_Table_Made, Best_Finish \nFROM poker_player;", "match": {"match": true, "result": [[42.0, 1.0], [10.0, 2.0], [21.0, 1.0], [19.0, 2.0], [26.0, 3.0]]}}
{"result": "SELECT \"Final_Table_Made\", \"Best_Finish\" FROM poker_player", "match": {"match": true, "result": [[42.0, 1.0], [10.0, 2.0], [21.0, 1.0], [19.0, 2.0], [26.0, 3.0]]}}
{"result": "SELECT AVG(Earnings) FROM poker_player", "match": {"match": true, "result": [[301891.2]]}}
{"result": "SELECT AVG(Earnings) FROM poker_player", "match": {"match": true, "result": [[301891.2]]}}
{"result": "SELECT MAX(Money_Rank) FROM poker_player", "match": {"match": false, "result": [[166.0]], "gt": [[58.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(Money_Rank) FROM poker_player", "match": {"match": false, "result": [[166.0]], "gt": [[58.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(Final_Table_Made) \nFROM poker_player \nWHERE Earnings < 200000;", "match": {"match": true, "result": [[26.0]]}}
{"result": "SELECT MAX(T2.\"Final_Table_Made\") \nFROM people AS T1 \nJOIN poker_player AS T2 ON T1.\"People_ID\" = T2.\"People_ID\" \nWHERE T2.\"Earnings\" < 200000", "match": {"match": true, "result": [[26.0]]}}
{"result": "SELECT T2.Name \nFROM poker_player AS T1 \nINNER JOIN people AS T2 ON T1.People_ID = T2.People_ID", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Teodor Salparov"], ["Yevgeni Sivozhelez"], ["Maksim Botin"], ["Semen Poltavskiy"]]}}
{"result": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID = T2.People_ID", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Teodor Salparov"], ["Yevgeni Sivozhelez"], ["Maksim Botin"], ["Semen Poltavskiy"]]}}
{"result": "SELECT T1.Name \nFROM people AS T1 \nINNER JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID \nWHERE T2.Earnings > 300000;", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Maksim Botin"]]}}
{"result": "SELECT DISTINCT t1.`Name` \nFROM `people` t1 \nJOIN poker_player t2 ON t1.`People_ID` = t2.`People_ID` \nWHERE t2.Earnings > 300000;", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Maksim Botin"]]}}
{"result": "SELECT T1.`Name` \nFROM people AS T1 \nJOIN poker_player AS T2 ON T1.`People_ID` = T2.`People_ID` \nORDER BY T2.`Final_Table_Made` ASC", "match": {"match": true, "result": [["Teodor Salparov"], ["Maksim Botin"], ["Yevgeni Sivozhelez"], ["Semen Poltavskiy"], ["Aleksey Ostapenko"]]}}
{"result": "SELECT T1.Name FROM people AS T1 \nINNER JOIN poker_player AS T2 \nON T1.People_ID = T2.People_ID \nORDER BY T2.Final_Table_Made ASC", "match": {"match": true, "result": [["Teodor Salparov"], ["Maksim Botin"], ["Yevgeni Sivozhelez"], ["Semen Poltavskiy"], ["Aleksey Ostapenko"]]}}
{"result": "SELECT T2.Birth_Date \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID = T2.People_ID \nORDER BY T1.Earnings ASC \nLIMIT 1", "match": {"match": true, "result": [["August 8, 1986"]]}}
{"result": "SELECT T2.`Birth_Date` \nFROM poker_player AS T1 \nINNER JOIN people AS T2 \nON T1.`People_ID` = T2.`People_ID` \nORDER BY T1.`Earnings` ASC \nLIMIT 1", "match": {"match": true, "result": [["August 8, 1986"]]}}
{"result": "SELECT T1.`Money_Rank` \nFROM `poker_player` AS T1 \nJOIN people AS T2 ON T1.`People_ID` = T2.`People_ID` \nWHERE T2.`Height` = ( SELECT MAX(`Height`) FROM `people` );", "match": {"match": true, "result": [[68.0]]}}
{"result": "SELECT T1.`Money_Rank` \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.`People_ID` = T2.`People_ID` \nORDER BY T2.`Height` DESC \nLIMIT 1;", "match": {"match": true, "result": [[68.0]]}}
{"result": "SELECT AVG(Earnings) \nFROM poker_player \nWHERE People_ID IN (\n  SELECT People_ID \n  FROM people \n  WHERE Height > 200\n);", "match": {"match": true, "result": [[309445.0]]}}
{"result": "SELECT AVG(`Earnings`) \nFROM poker_player \nJOIN people ON poker_player.`People_ID` = people.`People_ID` \nWHERE Height > 200;", "match": {"match": true, "result": [[309445.0]]}}
{"result": "SELECT Name FROM people \nINNER JOIN poker_player ON people.People_ID = poker_player.People_ID \nORDER BY poker_player.Earnings DESC", "match": {"match": true, "result": [["Maksim Botin"], ["Aleksey Ostapenko"], ["Teodor Salparov"], ["Semen Poltavskiy"], ["Yevgeni Sivozhelez"]]}}
{"result": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID = T2.People_ID \nORDER BY T1.Earnings DESC", "match": {"match": true, "result": [["Maksim Botin"], ["Aleksey Ostapenko"], ["Teodor Salparov"], ["Semen Poltavskiy"], ["Yevgeni Sivozhelez"]]}}
{"result": "SELECT Nationality, COUNT(People_ID) AS Count FROM people GROUP BY Nationality", "match": {"match": true, "result": [["Bulgaria", 1], ["Russia", 6]]}}
{"result": "SELECT Nationality, COUNT(*) as Count\nFROM people\nGROUP BY Nationality", "match": {"match": true, "result": [["Bulgaria", 1], ["Russia", 6]]}}
{"result": "SELECT Nationality \nFROM people \nGROUP BY Nationality \nORDER BY COUNT(People_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(People_ID) DESC LIMIT 1", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Nationality \nFROM people \nGROUP BY Nationality \nHAVING COUNT(People_ID) > 1", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Nationality \nFROM people \nGROUP BY Nationality \nHAVING COUNT(Nationality) >= 2", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Name, Birth_Date \nFROM people \nORDER BY Name ASC;", "match": {"match": true, "result": [["Aleksey Ostapenko", "May 26, 1986"], ["Maksim Botin", "July 14, 1983"], ["Roman Bragin", "April 17, 1987"], ["Semen Poltavskiy", "February 8, 1981"], ["Sergey Grankin", "January 22, 1987"], ["Teodor Salparov", "August 16, 1982"], ["Yevgeni Sivozhelez", "August 8, 1986"]]}}
{"result": "SELECT Name, Birth_Date FROM people ORDER BY Name;", "match": {"match": true, "result": [["Aleksey Ostapenko", "May 26, 1986"], ["Maksim Botin", "July 14, 1983"], ["Roman Bragin", "April 17, 1987"], ["Semen Poltavskiy", "February 8, 1981"], ["Sergey Grankin", "January 22, 1987"], ["Teodor Salparov", "August 16, 1982"], ["Yevgeni Sivozhelez", "August 8, 1986"]]}}
{"result": "SELECT Name \nFROM people \nWHERE Nationality != 'Russia';", "match": {"match": true, "result": [["Teodor Salparov"]]}}
{"result": "SELECT Name FROM people WHERE Nationality != 'Russia'", "match": {"match": true, "result": [["Teodor Salparov"]]}}
{"result": "SELECT Name \nFROM people \nWHERE People_ID NOT IN (SELECT People_ID FROM poker_player);", "match": {"match": true, "result": [["Roman Bragin"], ["Sergey Grankin"]]}}
{"result": "SELECT Name \nFROM people \nWHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "match": {"match": true, "result": [["Roman Bragin"], ["Sergey Grankin"]]}}
{"result": "SELECT COUNT(DISTINCT \"Nationality\") FROM \"people\"", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM people", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(*) FROM conductor", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT COUNT(Conductor_ID) FROM conductor", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT Name FROM conductor ORDER BY Age ASC", "match": {"match": true, "result": [["Antal Dor\u00e1ti"], ["Igor Stravinsky"], ["Colin Davis"], ["Michael Tilson Thomas"], ["Paul Jorgensen"], ["Antal Brown"], ["Charles Dutoit"], ["Seiji Ozawa"], ["Valeri Gergiev"], ["Pierre Boulez"], ["Gerard Schwarz"], ["Robert Craft"]]}}
{"result": "SELECT Name FROM conductor ORDER BY Age", "match": {"match": true, "result": [["Antal Dor\u00e1ti"], ["Igor Stravinsky"], ["Colin Davis"], ["Michael Tilson Thomas"], ["Paul Jorgensen"], ["Antal Brown"], ["Charles Dutoit"], ["Seiji Ozawa"], ["Valeri Gergiev"], ["Pierre Boulez"], ["Gerard Schwarz"], ["Robert Craft"]]}}
{"result": "SELECT Name \nFROM conductor \nWHERE Nationality != 'USA'", "match": {"match": true, "result": [["Igor Stravinsky"], ["Paul Jorgensen"], ["Charles Dutoit"], ["Pierre Boulez"], ["Robert Craft"], ["Michael Tilson Thomas"]]}}
{"result": "SELECT Name \nFROM conductor \nWHERE Nationality != 'USA';", "match": {"match": true, "result": [["Igor Stravinsky"], ["Paul Jorgensen"], ["Charles Dutoit"], ["Pierre Boulez"], ["Robert Craft"], ["Michael Tilson Thomas"]]}}
{"result": "SELECT T2.Record_Company \nFROM performance AS T1 \nJOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID \nORDER BY T2.Year_of_Founded DESC", "match": {"match": false, "result": [["Columbia Masterworks"], ["Philips"], ["Philips Classics Records"], ["EMI"], ["Koch Records / Naxos Records"], ["Decca Records"], ["Mercury Records"], ["Deutsche Grammophon"], ["Kultur"], ["Decca Records"], ["Delos Records"]], "gt": [["Columbia Masterworks"], ["Philips"], ["Philips Classics Records"], ["RCA"], ["EMI"], ["Koch Records / Naxos Records"], ["Decca Records"], ["Mercury Records"], ["Deutsche Grammophon"], ["Kultur"], ["Decca Records"], ["Delos Records"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Record_Company \nFROM orchestra \nORDER BY Year_of_Founded DESC", "match": {"match": true, "result": [["Columbia Masterworks"], ["Philips"], ["Philips Classics Records"], ["RCA"], ["EMI"], ["Koch Records / Naxos Records"], ["Decca Records"], ["Mercury Records"], ["Deutsche Grammophon"], ["Kultur"], ["Decca Records"], ["Delos Records"]]}}
{"result": "SELECT AVG(Attendance) FROM `show`", "match": {"match": true, "result": [[1326.4]]}}
{"result": "SELECT AVG(`Attendance`) FROM `show`", "match": {"match": true, "result": [[1326.4]]}}
{"result": "SELECT MAX(`Share`) ,  MIN(`Share`) \nFROM performance \nWHERE `Type` != 'Live final';", "match": {"match": true, "result": [["44.7%", "22.7%"]]}}
{"result": "SELECT MAX(Share), MIN(Share)\nFROM performance\nWHERE Type != 'Live final';", "match": {"match": true, "result": [["44.7%", "22.7%"]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM conductor", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM conductor", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "match": {"match": true, "result": [["Robert Craft"], ["Antal Brown"], ["Gerard Schwarz"], ["Valeri Gergiev"], ["Charles Dutoit"], ["Michael Tilson Thomas"], ["Igor Stravinsky"], ["Paul Jorgensen"], ["Pierre Boulez"], ["Antal Dor\u00e1ti"], ["Seiji Ozawa"], ["Colin Davis"]]}}
{"result": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "match": {"match": true, "result": [["Robert Craft"], ["Antal Brown"], ["Gerard Schwarz"], ["Valeri Gergiev"], ["Charles Dutoit"], ["Michael Tilson Thomas"], ["Igor Stravinsky"], ["Paul Jorgensen"], ["Pierre Boulez"], ["Antal Dor\u00e1ti"], ["Seiji Ozawa"], ["Colin Davis"]]}}
{"result": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "match": {"match": true, "result": [["Robert Craft"]]}}
{"result": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "match": {"match": true, "result": [["Robert Craft"]]}}
{"result": "SELECT T1.Name, T2.Orchestra \nFROM conductor AS T1 \nINNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID", "match": {"match": true, "result": [["Antal Dor\u00e1ti", "London Symphony Orchestra"], ["Igor Stravinsky", "Columbia Symphony Orchestra"], ["Colin Davis", "Royal Concertgebouw Orchestra"], ["Paul Jorgensen", "Royal Danish Orchestra"], ["Antal Brown", "Detroit Symphony Orchestra"], ["Charles Dutoit", "Montreal Symphony Orchestra"], ["Gerard Schwarz", "Seattle Symphony Orchestra"], ["Pierre Boulez", "Chicago Symphony Orchestra"], ["Valeri Gergiev", "Kirov Orchestra"], ["Robert Craft", "Philharmonia Orchestra"], ["Seiji Ozawa", "Orchestre de Paris"], ["Michael Tilson Thomas", "San Francisco Symphony Orchestra"]]}}
{"result": "SELECT T1.Name, T2.Orchestra \nFROM conductor AS T1 \nINNER JOIN orchestra AS T2 \nON T1.Conductor_ID = T2.Conductor_ID;", "match": {"match": true, "result": [["Antal Dor\u00e1ti", "London Symphony Orchestra"], ["Igor Stravinsky", "Columbia Symphony Orchestra"], ["Colin Davis", "Royal Concertgebouw Orchestra"], ["Paul Jorgensen", "Royal Danish Orchestra"], ["Antal Brown", "Detroit Symphony Orchestra"], ["Charles Dutoit", "Montreal Symphony Orchestra"], ["Gerard Schwarz", "Seattle Symphony Orchestra"], ["Pierre Boulez", "Chicago Symphony Orchestra"], ["Valeri Gergiev", "Kirov Orchestra"], ["Robert Craft", "Philharmonia Orchestra"], ["Seiji Ozawa", "Orchestre de Paris"], ["Michael Tilson Thomas", "San Francisco Symphony Orchestra"]]}}
{"result": "SELECT T1.Name \nFROM conductor AS T1\nJOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID\nGROUP BY T1.Name\nHAVING COUNT(DISTINCT T2.Orchestra_ID) > 1;", "match": {"match": true, "result": []}}
{"result": "SELECT T1.Name \nFROM conductor AS T1 \nJOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID \nGROUP BY T1.Name, T1.Conductor_ID \nHAVING COUNT(T2.Orchestra_ID) > 1", "match": {"match": true, "result": []}}
{"result": "SELECT T2.Name \nFROM orchestra \nRIGHT JOIN conductor AS T2 ON orchestra.Conductor_ID = T2.Conductor_ID \nGROUP BY T2.Conductor_ID \nORDER BY COUNT(T2.Conductor_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [["Michael Tilson Thomas"]]}}
{"result": "SELECT Name FROM conductor WHERE Conductor_ID = \n(\n  SELECT Conductor_ID FROM orchestra \n  GROUP BY Conductor_ID \n  ORDER BY COUNT(Conductor_ID) DESC \n  LIMIT 1\n);", "match": {"match": true, "result": [["Michael Tilson Thomas"]]}}
{"result": "SELECT T1.Name \nFROM conductor AS T1 \nJOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID \nWHERE T2.Year_of_Founded > 2008", "match": {"match": true, "result": [["Igor Stravinsky"]]}}
{"result": "SELECT T1.Name \nFROM conductor AS T1 \nJOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID \nWHERE T2.Year_of_Founded > 2008", "match": {"match": true, "result": [["Igor Stravinsky"]]}}
{"result": "SELECT Record_Company, COUNT(Orchestra_ID) AS NumberOfOrchestras\nFROM orchestra\nGROUP BY Record_Company", "match": {"match": true, "result": [["Columbia Masterworks", 1], ["Decca Records", 2], ["Delos Records", 1], ["Deutsche Grammophon", 1], ["EMI", 1], ["Koch Records / Naxos Records", 1], ["Kultur", 1], ["Mercury Records", 1], ["Philips", 1], ["Philips Classics Records", 1], ["RCA", 1]]}}
{"result": "SELECT T2.Record_Company, COUNT(T2.Orchestra_ID) \nFROM performance AS T1 INNER JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID \nGROUP BY T2.Record_Company", "match": {"match": false, "result": [["Columbia Masterworks", 1], ["Decca Records", 2], ["Delos Records", 1], ["Deutsche Grammophon", 1], ["EMI", 1], ["Koch Records / Naxos Records", 1], ["Kultur", 1], ["Mercury Records", 1], ["Philips", 1], ["Philips Classics Records", 1]], "gt": [["Columbia Masterworks", 1], ["Decca Records", 2], ["Delos Records", 1], ["Deutsche Grammophon", 1], ["EMI", 1], ["Koch Records / Naxos Records", 1], ["Kultur", 1], ["Mercury Records", 1], ["Philips", 1], ["Philips Classics Records", 1], ["RCA", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.Major_Record_Format, COUNT(Performance_ID) as Count\nFROM performance\nJOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID\nGROUP BY T.Major_Record_Format\nORDER BY Count ASC", "match": {"match": false, "error": "Query execution failed with error: no such column: T.Major_Record_Format"}}
{"result": "SELECT Major_Record_Format, COUNT(Orchestra_ID) AS Frequency \nFROM orchestra \nGROUP BY Major_Record_Format \nORDER BY Frequency DESC", "match": {"match": false, "result": [["CD", 10], ["DVD", 1], ["CD / LP", 1]], "gt": [["CD / LP"], ["DVD"], ["CD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Record_Company \nFROM orchestra \nGROUP BY Record_Company \nORDER BY COUNT(Record_Company) DESC \nLIMIT 1", "match": {"match": true, "result": [["Decca Records"]]}}
{"result": "SELECT Record_Company, COUNT(Orchestra_ID) as Num_Orchestras\nFROM orchestra\nGROUP BY Record_Company\nORDER BY Num_Orchestras DESC\nLIMIT 1", "match": {"match": false, "result": [["Decca Records", 2]], "gt": [["Decca Records"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Orchestra\nFROM performance AS T1\nRIGHT JOIN orchestra AS T2\nON T1.Orchestra_ID = T2.Orchestra_ID\nWHERE T1.Performance_ID IS NULL", "match": {"match": true, "result": [["San Francisco Symphony Orchestra"]]}}
{"result": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "match": {"match": true, "result": [["San Francisco Symphony Orchestra"]]}}
{"result": "SELECT DISTINCT T1.Record_Company \nFROM orchestra AS T1 \nJOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID \nWHERE T1.Year_of_Founded < 2003 AND T2.Date > 2003", "match": {"match": false, "result": [], "gt": [["Decca Records"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Record_Company \nFROM orchestra AS T1 \nJOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID \nWHERE T1.Year_of_Founded < 2003 AND T1.Year_of_Founded > (SELECT MIN(Year_of_Founded) - 2 FROM orchestra WHERE Year_of_Founded > 2003)", "match": {"match": false, "result": [], "gt": [["Decca Records"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(Orchestra_ID) \nFROM orchestra \nWHERE Major_Record_Format IN ('CD', 'DVD');", "match": {"match": true, "result": [[11]]}}
{"result": "SELECT COUNT(Orchestra_ID) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'", "match": {"match": true, "result": [[11]]}}
{"result": "SELECT T3.Year_of_Founded \nFROM show AS T1 \nJOIN performance AS T2 ON T1.Performance_ID = T2.Performance_ID \nJOIN orchestra AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID \nGROUP BY T3.Year_of_Founded \nHAVING COUNT(T1.Show_ID) > 1", "match": {"match": false, "result": [[2002.0]], "gt": [], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.`Year_of_Founded` \nFROM `orchestra` AS T1 \nJOIN performance AS T2 ON T2.`Orchestra_ID` = T1.`Orchestra_ID` \nGROUP BY T1.`Orchestra_ID` \nHAVING COUNT(T2.`Performance_ID`) > 1", "match": {"match": true, "result": []}}
{"result": "SELECT COUNT(ID) FROM Highschooler", "match": {"match": true, "result": [[16]]}}
{"result": "SELECT COUNT(ID) FROM Highschooler", "match": {"match": true, "result": [[16]]}}
{"result": "SELECT name, grade FROM Highschooler", "match": {"match": true, "result": [["Jordan", 9], ["Gabriel", 9], ["Tiffany", 9], ["Cassandra", 9], ["Haley", 10], ["Andrew", 10], ["Kris", 10], ["Brittany", 10], ["Alexis", 11], ["Austin", 11], ["Gabriel", 11], ["Jessica", 11], ["Jordan", 12], ["John", 12], ["Kyle", 12], ["Logan", 12]]}}
{"result": "SELECT name, grade FROM Highschooler", "match": {"match": true, "result": [["Jordan", 9], ["Gabriel", 9], ["Tiffany", 9], ["Cassandra", 9], ["Haley", 10], ["Andrew", 10], ["Kris", 10], ["Brittany", 10], ["Alexis", 11], ["Austin", 11], ["Gabriel", 11], ["Jessica", 11], ["Jordan", 12], ["John", 12], ["Kyle", 12], ["Logan", 12]]}}
{"result": "SELECT DISTINCT grade FROM Highschooler", "match": {"match": false, "result": [[9], [10], [11], [12]], "gt": [[9], [9], [9], [9], [10], [10], [10], [10], [11], [11], [11], [11], [12], [12], [12], [12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT grade FROM Highschooler", "match": {"match": true, "result": [[9], [9], [9], [9], [10], [10], [10], [10], [11], [11], [11], [11], [12], [12], [12], [12]]}}
{"result": "SELECT grade \nFROM Highschooler \nWHERE name = 'Kyle';", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT grade FROM Highschooler WHERE name = 'Kyle';", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT name \nFROM Highschooler \nWHERE grade = 10", "match": {"match": true, "result": [["Haley"], ["Andrew"], ["Kris"], ["Brittany"]]}}
{"result": "SELECT name \nFROM Highschooler \nWHERE grade = 10", "match": {"match": true, "result": [["Haley"], ["Andrew"], ["Kris"], ["Brittany"]]}}
{"result": "SELECT ID FROM Highschooler WHERE name = 'Kyle'", "match": {"match": true, "result": [[1934]]}}
{"result": "SELECT ID FROM Highschooler WHERE name = 'Kyle';", "match": {"match": true, "result": [[1934]]}}
{"result": "SELECT COUNT(ID) FROM Highschooler WHERE grade BETWEEN 9 AND 10", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT COUNT(*) \nFROM Highschooler \nWHERE grade = 9 OR grade = 10;", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade", "match": {"match": true, "result": [[9, 4], [10, 4], [11, 4], [12, 4]]}}
{"result": "SELECT grade, COUNT(*) \nFROM Highschooler \nGROUP BY grade", "match": {"match": true, "result": [[9, 4], [10, 4], [11, 4], [12, 4]]}}
{"result": "SELECT grade \nFROM Highschooler \nGROUP BY grade \nORDER BY COUNT(grade) DESC \nLIMIT 1;", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT grade \nFROM Highschooler \nGROUP BY grade \nHAVING COUNT(ID) >= 4;", "match": {"match": true, "result": [[9], [10], [11], [12]]}}
{"result": "SELECT grade \nFROM Highschooler \nGROUP BY grade \nHAVING COUNT(ID) >= 4;", "match": {"match": true, "result": [[9], [10], [11], [12]]}}
{"result": "SELECT T1.student_id, COUNT(T1.student_id) \nFROM Friend AS T1 \nGROUP BY T1.student_id", "match": {"match": true, "result": [[1101, 1], [1247, 2], [1304, 1], [1316, 1], [1381, 1], [1468, 2], [1501, 1], [1510, 2], [1661, 1], [1689, 2], [1709, 1], [1782, 3], [1911, 1], [1934, 1]]}}
{"result": "SELECT H1.ID, COUNT(F.student_id) FROM Highschooler H1 \nJOIN Friend F ON H1.ID = F.student_id \nGROUP BY H1.ID", "match": {"match": true, "result": [[1101, 1], [1247, 2], [1304, 1], [1316, 1], [1381, 1], [1468, 2], [1501, 1], [1510, 2], [1661, 1], [1689, 2], [1709, 1], [1782, 3], [1911, 1], [1934, 1]]}}
{"result": "SELECT H.name, COUNT(F.student_id) \nFROM Highschooler H \nLEFT JOIN Friend F ON H.ID = F.student_id \nGROUP BY H.name", "match": {"match": false, "result": [["Alexis", 2], ["Andrew", 3], ["Austin", 1], ["Brittany", 0], ["Cassandra", 1], ["Gabriel", 3], ["Haley", 1], ["Jessica", 1], ["John", 0], ["Jordan", 3], ["Kris", 2], ["Kyle", 1], ["Logan", 1], ["Tiffany", 1]], "gt": [["Haley", 1], ["Alexis", 2], ["Jordan", 1], ["Austin", 1], ["Tiffany", 1], ["Kris", 2], ["Jessica", 1], ["Jordan", 2], ["Logan", 1], ["Gabriel", 2], ["Cassandra", 1], ["Andrew", 3], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name, ( SELECT COUNT(*) \n                FROM Friend \n                WHERE Friend.student_id = Highschooler.ID ) AS num_friends\nFROM Highschooler", "match": {"match": false, "result": [["Jordan", 2], ["Gabriel", 2], ["Tiffany", 1], ["Cassandra", 1], ["Haley", 1], ["Andrew", 3], ["Kris", 2], ["Brittany", 0], ["Alexis", 2], ["Austin", 1], ["Gabriel", 1], ["Jessica", 1], ["Jordan", 1], ["John", 0], ["Kyle", 1], ["Logan", 1]], "gt": [["Haley", 1], ["Alexis", 2], ["Jordan", 1], ["Austin", 1], ["Tiffany", 1], ["Kris", 2], ["Jessica", 1], ["Jordan", 2], ["Logan", 1], ["Gabriel", 2], ["Cassandra", 1], ["Andrew", 3], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name FROM Highschooler WHERE ID IN (\n  SELECT student_id FROM Friend\n  GROUP BY student_id\n  ORDER BY COUNT(*) DESC\n  LIMIT 1\n)", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "SELECT name FROM Highschooler WHERE ID IN (\n SELECT student_id \n FROM Friend \n GROUP BY student_id \n ORDER BY COUNT(*) DESC \n LIMIT 1\n)", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID IN (SELECT student_id \n             FROM Friend \n             GROUP BY student_id \n             HAVING COUNT(*) >= 3);", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID IN (\n  SELECT student_id \n  FROM Friend \n  GROUP BY student_id \n  HAVING COUNT(*) > 2\n)", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "SELECT T1.name \nFROM Highschooler AS T1\nJOIN Friend AS T2 ON T1.ID = T2.student_id\nJOIN Highschooler AS T3 ON T3.ID = T2.friend_id\nWHERE T3.name = 'Kyle'", "match": {"match": false, "result": [["Jessica"], ["Austin"]], "gt": [["Jordan"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.name \nFROM Friend AS T1 \nJOIN Highschooler AS T2 ON T1.friend_id = T2.ID \nJOIN Highschooler AS T3 ON T1.student_id = T3.ID \nWHERE T3.name = 'Kyle'", "match": {"match": true, "result": [["Jordan"]]}}
{"result": "SELECT COUNT(T2.student_id) \nFROM Highschooler AS T1 \nJOIN Friend AS T2 \nON T1.ID = T2.student_id \nWHERE T1.name = 'Kyle';", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(*) \nFROM Friend \nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT ID \nFROM Highschooler \nWHERE ID NOT IN (\n  SELECT student_id \n  FROM Friend\n  UNION\n  SELECT friend_id \n  FROM Friend\n);", "match": {"match": false, "result": [], "gt": [[1025], [1641]], "error": "Query result does not match ground truth."}}
{"result": "SELECT ID FROM Highschooler \nWHERE ID NOT IN (SELECT student_id FROM Friend)", "match": {"match": true, "result": [[1025], [1641]]}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID NOT IN (SELECT student_id FROM Friend);", "match": {"match": true, "result": [["Brittany"], ["John"]]}}
{"result": "SELECT name\nFROM Highschooler\nWHERE ID NOT IN (\n  SELECT student_id\n  FROM Friend\n);", "match": {"match": true, "result": [["Brittany"], ["John"]]}}
{"result": "SELECT ID \nFROM Highschooler \nWHERE ID IN (SELECT student_id FROM Friend) \nAND ID IN (SELECT liked_id FROM Likes)", "match": {"match": true, "result": [[1101], [1247], [1304], [1468], [1501], [1689], [1709], [1934]]}}
{"result": "SELECT T1.ID \nFROM Highschooler T1 \nJOIN Friend T2 ON T1.ID = T2.student_id \nJOIN Likes T3 ON T1.ID = T3.student_id", "match": {"match": false, "result": [[1689], [1709], [1689], [1782], [1782], [1782], [1247], [1247], [1911], [1501], [1316], [1934]], "gt": [[1101], [1247], [1304], [1468], [1501], [1689], [1709], [1934]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.name \nFROM Highschooler AS T1 \nJOIN Friend AS T2 ON T1.ID = T2.student_id \nJOIN Likes AS T3 ON T1.ID = T3.student_id", "match": {"match": false, "result": [["Gabriel"], ["Cassandra"], ["Gabriel"], ["Andrew"], ["Andrew"], ["Andrew"], ["Alexis"], ["Alexis"], ["Gabriel"], ["Jessica"], ["Austin"], ["Kyle"]], "gt": [["Alexis"], ["Cassandra"], ["Gabriel"], ["Haley"], ["Jessica"], ["Jordan"], ["Kris"], ["Kyle"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID IN (\n    SELECT student_id \n    FROM Friend\n    UNION \n    SELECT liked_id \n    FROM Likes\n);", "match": {"match": false, "result": [["Haley"], ["Alexis"], ["Jordan"], ["Austin"], ["Tiffany"], ["Kris"], ["Jessica"], ["Jordan"], ["Logan"], ["Gabriel"], ["Cassandra"], ["Andrew"], ["Gabriel"], ["Kyle"]], "gt": [["Alexis"], ["Cassandra"], ["Gabriel"], ["Haley"], ["Jessica"], ["Jordan"], ["Kris"], ["Kyle"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT student_id, COUNT(*) as num_likes\nFROM Likes\nGROUP BY student_id", "match": {"match": true, "result": [[1025, 1], [1247, 1], [1316, 1], [1501, 1], [1641, 1], [1689, 1], [1709, 1], [1782, 1], [1911, 1], [1934, 1]]}}
{"result": "SELECT student_id, COUNT(*) \nFROM Likes \nGROUP BY student_id;", "match": {"match": true, "result": [[1025, 1], [1247, 1], [1316, 1], [1501, 1], [1641, 1], [1689, 1], [1709, 1], [1782, 1], [1911, 1], [1934, 1]]}}
{"result": "SELECT H1.name, COUNT(*) as likes_count\nFROM Highschooler H1\nJOIN Likes L ON H1.ID = L.student_id\nGROUP BY H1.name", "match": {"match": false, "result": [["Alexis", 1], ["Andrew", 1], ["Austin", 1], ["Brittany", 1], ["Cassandra", 1], ["Gabriel", 2], ["Jessica", 1], ["John", 1], ["Kyle", 1]], "gt": [["John", 1], ["Alexis", 1], ["Austin", 1], ["Jessica", 1], ["Brittany", 1], ["Gabriel", 1], ["Cassandra", 1], ["Andrew", 1], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.name, COUNT(T2.liked_id) FROM Highschooler AS T1 \nJOIN Likes AS T2 ON T1.ID = T2.student_id \nGROUP BY T1.name", "match": {"match": false, "result": [["Alexis", 1], ["Andrew", 1], ["Austin", 1], ["Brittany", 1], ["Cassandra", 1], ["Gabriel", 2], ["Jessica", 1], ["John", 1], ["Kyle", 1]], "gt": [["John", 1], ["Alexis", 1], ["Austin", 1], ["Jessica", 1], ["Brittany", 1], ["Gabriel", 1], ["Cassandra", 1], ["Andrew", 1], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID IN (\n    SELECT student_id \n    FROM Likes \n    GROUP BY student_id \n    ORDER BY COUNT(liked_id) DESC \n    LIMIT 1\n);", "match": {"match": true, "result": [["John"]]}}
{"result": "SELECT H.name \nFROM Highschooler H \nJOIN Likes L ON H.ID = L.student_id \nGROUP BY L.student_id \nORDER BY COUNT(L.student_id) DESC \nLIMIT 1;", "match": {"match": true, "result": [["John"]]}}
{"result": "SELECT T.name \nFROM \n    (SELECT L.student_id, H.name, COUNT(L.student_id) AS likes \n    FROM Likes L JOIN Highschooler H ON L.student_id = H.ID \n    GROUP BY L.student_id) T \nWHERE T.likes >= 2", "match": {"match": true, "result": []}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID IN ( SELECT student_id \n               FROM Likes \n               GROUP BY student_id \n               HAVING COUNT(liked_id)  >= 2 );", "match": {"match": true, "result": []}}
{"result": "SELECT name \nFROM Highschooler \nWHERE grade > 5 \nINTERSECT \nSELECT H.name \nFROM Highschooler H \nJOIN Friend F ON H.ID = F.student_id \nGROUP BY H.name \nHAVING COUNT(H.name) >= 2", "match": {"match": false, "result": [["Alexis"], ["Andrew"], ["Gabriel"], ["Jordan"], ["Kris"]], "gt": [["Alexis"], ["Kris"], ["Jordan"], ["Gabriel"], ["Andrew"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name \nFROM Highschooler \nWHERE grade  >  5 AND ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) >= 2);", "match": {"match": true, "result": [["Alexis"], ["Kris"], ["Jordan"], ["Gabriel"], ["Andrew"]]}}
{"result": "SELECT COUNT(*) \nFROM Likes \nWHERE student_id IN (SELECT ID FROM Highschooler WHERE name = 'Kyle')", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(*)\nFROM Likes\nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT AVG(T2.grade) \nFROM Friend AS T1 \nJOIN Highschooler AS T2 ON T1.student_id = T2.ID \nGROUP BY T2.ID", "match": {"match": false, "result": [[10.0], [11.0], [12.0], [11.0], [9.0], [10.0], [11.0], [9.0], [12.0], [9.0], [9.0], [10.0], [11.0], [12.0]], "gt": [[10.428571428571429]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(T1.grade) \nFROM Highschooler AS T1 \nJOIN Friend AS T2 ON T1.ID = T2.student_id", "match": {"match": false, "result": [[10.25]], "gt": [[10.428571428571429]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MIN(grade) \nFROM Highschooler \nWHERE ID NOT IN (SELECT student_id FROM Friend)", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT DISTINCT T1.state \nFROM Owners AS T1 \nINTERSECT \nSELECT DISTINCT T2.state \nFROM Professionals AS T2", "match": {"match": true, "result": [["Indiana"], ["Mississippi"], ["Wisconsin"]]}}
{"result": "SELECT DISTINCT state \nFROM Owners \nINTERSECT \nSELECT DISTINCT state \nFROM Professionals;", "match": {"match": true, "result": [["Indiana"], ["Mississippi"], ["Wisconsin"]]}}
{"result": "SELECT AVG(CASE WHEN T3.dog_id IS NOT NULL THEN T2.age END) \nFROM Dogs AS T2 \nLEFT JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id", "match": {"match": false, "result": [[5.466666666666667]], "gt": [[5.111111111111111]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(T1.age) \nFROM Dogs AS T1 \nJOIN Treatments AS T2 ON T1.dog_id = T2.dog_id", "match": {"match": false, "result": [[5.466666666666667]], "gt": [[5.111111111111111]], "error": "Query result does not match ground truth."}}
{"result": "SELECT p.`professional_id`, p.`last_name`, p.`cell_number`\nFROM `Professionals` p\nWHERE p.`state` = 'IN' \nOR p.`professional_id` IN (\n  SELECT t.`professional_id`\n  FROM `Treatments` t\n  GROUP BY t.`professional_id`\n  HAVING COUNT(t.`treatment_id`) > 2\n)", "match": {"match": false, "result": [[9, "Kshlerin", "962-983-8109x3509"]], "gt": [[1, "Braun", "(275)939-2435x80863"], [8, "Hyatt", "328.842.3792"], [9, "Kshlerin", "962-983-8109x3509"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT p.`last_name`, p.`cell_number`, p.`professional_id`\nFROM `Professionals` p\nWHERE p.`state` = 'IN'\nOR p.`professional_id` IN (\n  SELECT t.`professional_id`\n  FROM `Treatments` t\n  GROUP BY t.`professional_id`\n  HAVING COUNT(t.`treatment_id`) > 2\n)", "match": {"match": false, "result": [["Kshlerin", "962-983-8109x3509", 9]], "gt": [[1, "Braun", "(275)939-2435x80863"], [8, "Hyatt", "328.842.3792"], [9, "Kshlerin", "962-983-8109x3509"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.name \nFROM Treatments AS T1 \nJOIN Dogs AS T2 ON T2.dog_id = T1.dog_id \nJOIN Charges AS T3 ON T3.charge_id = T1.cost_of_treatment \nWHERE T3.charge_amount <= 1000", "match": {"match": false, "result": [], "gt": [["Kacey"], ["Hipolito"], ["Mavis"], ["Houston"], ["Jeffrey"], ["Merritt"], ["Narciso"], ["George"], ["Bessie"], ["Betty"], ["Holden"], ["Jesus"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.name \nFROM Dogs AS T1 \nJOIN Treatments AS T2 ON T1.dog_id = T2.dog_id \nWHERE T2.cost_of_treatment < 1000", "match": {"match": false, "result": [["Lyric"], ["Houston"], ["Lyric"], ["Hipolito"], ["Holden"], ["Troy"], ["Evangeline"], ["Hipolito"], ["Lyric"], ["Troy"], ["Evangeline"], ["Jesus"], ["Narciso"], ["Troy"], ["Kacey"]], "gt": [["Kacey"], ["Hipolito"], ["Mavis"], ["Houston"], ["Jeffrey"], ["Merritt"], ["Narciso"], ["George"], ["Bessie"], ["Betty"], ["Holden"], ["Jesus"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT first_name \nFROM (SELECT first_name FROM Owners\n     UNION\n     SELECT first_name FROM Professionals) AS Names\nWHERE first_name NOT IN (SELECT name FROM Dogs);", "match": {"match": true, "result": [["Adelle"], ["Brady"], ["Cindy"], ["Danny"], ["Domenica"], ["Emelie"], ["Ericka"], ["Gay"], ["Heather"], ["Jaclyn"], ["Jayson"], ["Johann"], ["Kade"], ["Karley"], ["Lesly"], ["Lorenz"], ["Melisa"], ["Monte"], ["Nora"], ["Olaf"], ["Orlando"], ["Rachelle"], ["Rolando"], ["Ruben"], ["Sigurd"], ["Taryn"], ["Tre"], ["Velva"], ["Vernice"], ["Winfield"]]}}
{"result": "SELECT DISTINCT `first_name` \nFROM (SELECT `first_name` FROM `Owners` UNION SELECT `first_name` FROM `Professionals`) \nWHERE `first_name` NOT IN (SELECT `name` FROM `Dogs`);", "match": {"match": true, "result": [["Adelle"], ["Brady"], ["Cindy"], ["Danny"], ["Domenica"], ["Emelie"], ["Ericka"], ["Gay"], ["Heather"], ["Jaclyn"], ["Jayson"], ["Johann"], ["Kade"], ["Karley"], ["Lesly"], ["Lorenz"], ["Melisa"], ["Monte"], ["Nora"], ["Olaf"], ["Orlando"], ["Rachelle"], ["Rolando"], ["Ruben"], ["Sigurd"], ["Taryn"], ["Tre"], ["Velva"], ["Vernice"], ["Winfield"]]}}
{"result": "SELECT T1.professional_id, T1.role_code, T1.email_address \nFROM Professionals T1 \nLEFT JOIN Treatments T2 ON T1.professional_id = T2.professional_id \nWHERE T2.treatment_id IS NULL", "match": {"match": true, "result": [[1, "Employee", "deanna.schuster@example.com"], [2, "Employee", "lucile.shanahan@example.org"], [3, "Employee", "uboehm@example.org"], [11, "Employee", "west.eula@example.net"], [12, "Veterenarian", "marquardt.furman@example.org"], [13, "Veterenarian", "delphine29@example.com"], [15, "Employee", "jeichmann@example.com"]]}}
{"result": "SELECT p.`professional_id`, p.role_code, p.email_address\nFROM `Professionals` p\nWHERE p.`professional_id` NOT IN (\n  SELECT `professional_id`\n  FROM `Treatments`\n);", "match": {"match": true, "result": [[1, "Employee", "deanna.schuster@example.com"], [2, "Employee", "lucile.shanahan@example.org"], [3, "Employee", "uboehm@example.org"], [11, "Employee", "west.eula@example.net"], [12, "Veterenarian", "marquardt.furman@example.org"], [13, "Veterenarian", "delphine29@example.com"], [15, "Employee", "jeichmann@example.com"]]}}
{"result": "SELECT T1.owner_id, T1.first_name, T1.last_name \nFROM Owners T1 \nJOIN Dogs T2 ON T1.owner_id = T2.owner_id \nGROUP BY T2.owner_id \nORDER BY COUNT(T2.owner_id) DESC \nLIMIT 1", "match": {"match": true, "result": [[14, "Rachelle", "Funk"]]}}
{"result": "SELECT T1.owner_id, T2.first_name, T2.last_name\nFROM Dogs AS T1\nJOIN Owners AS T2 ON T1.owner_id = T2.owner_id\nGROUP BY T1.owner_id\nORDER BY COUNT(T1.owner_id) DESC\nLIMIT 1", "match": {"match": true, "result": [[14, "Rachelle", "Funk"]]}}
{"result": "SELECT T2.professional_id, T2.role_code, T2.first_name \nFROM Treatments AS T1 \nJOIN Professionals AS T2 ON T1.professional_id = T2.professional_id \nGROUP BY T2.professional_id, T2.role_code, T2.first_name \nHAVING COUNT(T1.treatment_id) >= 2", "match": {"match": true, "result": [[4, "Veterenarian", "Vernice"], [6, "Veterenarian", "Ruben"], [8, "Employee", "Karley"], [9, "Veterenarian", "Monte"], [10, "Employee", "Domenica"], [14, "Employee", "Sigurd"]]}}
{"result": "SELECT T1.professional_id, T1.role_code, T1.first_name \nFROM Professionals AS T1\nJOIN (\n  SELECT professional_id \n  FROM Treatments \n  GROUP BY professional_id \n  HAVING COUNT(treatment_id) >= 2 \n) AS T2 \nON T1.professional_id = T2.professional_id", "match": {"match": true, "result": [[4, "Veterenarian", "Vernice"], [6, "Veterenarian", "Ruben"], [8, "Employee", "Karley"], [9, "Veterenarian", "Monte"], [10, "Employee", "Domenica"], [14, "Employee", "Sigurd"]]}}
{"result": "SELECT T2.breed_name \nFROM Dogs AS T1 \nJOIN Breeds AS T2 ON T1.breed_code = T2.breed_code \nGROUP BY T2.breed_name \nORDER BY COUNT(T1.dog_id) DESC \nLIMIT 1", "match": {"match": true, "result": [["Bulldog"]]}}
{"result": "SELECT T2.breed_name\nFROM Dogs AS T1\nJOIN Breeds AS T2 ON T1.breed_code = T2.breed_code\nGROUP BY T1.breed_code\nORDER BY COUNT(T1.dog_id) DESC\nLIMIT 1", "match": {"match": true, "result": [["Bulldog"]]}}
{"result": "SELECT T1.owner_id, T1.last_name \nFROM Owners AS T1 \nJOIN Dogs AS T2 ON T1.owner_id = T2.owner_id \nJOIN Treatments AS T3 ON T2.dog_id = T3.dog_id", "match": {"match": false, "result": [[14, "Funk"], [14, "Funk"], [14, "Funk"], [11, "Feil"], [12, "Price"], [6, "Rippin"], [10, "Nicolas"], [11, "Feil"], [14, "Funk"], [6, "Rippin"], [10, "Nicolas"], [8, "Prohaska"], [3, "Stoltenberg"], [6, "Rippin"], [3, "Stoltenberg"]], "gt": [[14, "Funk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.owner_id, T1.last_name \nFROM Owners AS T1 \nJOIN Dogs AS T2 ON T1.owner_id = T2.owner_id \nJOIN Treatments AS T3 ON T2.dog_id = T3.dog_id \nGROUP BY T1.owner_id \nORDER BY SUM(T3.cost_of_treatment) DESC \nLIMIT 1", "match": {"match": false, "result": [[3, "Stoltenberg"]], "gt": [[14, "Funk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.treatment_type_description \nFROM Treatment_Types AS T1 \nJOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code \nGROUP BY T1.treatment_type_code \nORDER BY SUM(T2.cost_of_treatment) ASC \nLIMIT 1", "match": {"match": true, "result": [["Take for a Walk"]]}}
{"result": "SELECT tt.treatment_type_description\nFROM Treatment_Types tt\nJOIN (\n  SELECT treatment_type_code, \n  SUM(cost_of_treatment) AS total_cost\n  FROM Treatments\n  GROUP BY treatment_type_code\n) AS t ON tt.treatment_type_code = t.treatment_type_code\nORDER BY t.total_cost ASC\nLIMIT 1;", "match": {"match": true, "result": [["Take for a Walk"]]}}
{"result": "```sql\nSELECT o.owner_id, o.zip_code\nFROM Owners o\nJOIN (\n  SELECT dog_id, SUM(c.charge_amount) as total_charges\n  FROM Charges c\n  JOIN Treatments t ON c.charge_id = t.treatment_id\n  GROUP BY dog_id\n) tc ON o.owner_id = tc.dog_id\nORDER BY tc.total_charges DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [[14, "22731"]], "gt": [[3, "02647"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT O.owner_id, O.zip_code\nFROM (\n  SELECT O.owner_id, SUM(C.charge_amount) AS total_spent\n  FROM Owners O\n  JOIN Dogs D ON O.owner_id = D.owner_id\n  JOIN Treatments T ON D.dog_id = T.dog_id\n  JOIN Charges C ON T.cost_of_treatment = C.charge_amount\n  GROUP BY O.owner_id\n) AS owner_spent\nJOIN Owners O ON owner_spent.owner_id = O.owner_id\nORDER BY owner_spent.total_spent DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [], "gt": [[3, "02647"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT P.professional_id, P.cell_number \nFROM Professionals P \nJOIN (\n  SELECT professional_id \n  FROM Treatments \n  GROUP BY professional_id \n  HAVING COUNT(treatment_id) >= 2 \n) T ON P.professional_id = T.professional_id", "match": {"match": true, "result": [[4, "00230569697"], [6, "139-321-7313"], [8, "328.842.3792"], [9, "962-983-8109x3509"], [10, "461-801-2600"], [14, "1-185-137-1945x409"]]}}
{"result": "SELECT T1.professional_id, T1.cell_number \nFROM Professionals AS T1 \nJOIN (\n  SELECT professional_id, COUNT(treatment_type_code) as count \n  FROM Treatments \n  GROUP BY professional_id \n  HAVING COUNT(treatment_type_code) > 1\n) AS T2 \nON T1.professional_id = T2.professional_id", "match": {"match": true, "result": [[4, "00230569697"], [6, "139-321-7313"], [8, "328.842.3792"], [9, "962-983-8109x3509"], [10, "461-801-2600"], [14, "1-185-137-1945x409"]]}}
{"result": "SELECT T1.first_name, T1.last_name \nFROM Professionals AS T1\nJOIN Treatments AS T2 ON T1.professional_id = T2.professional_id\nWHERE T2.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)", "match": {"match": false, "result": [["Domenica", "Jacobs"], ["Vernice", "Tillman"], ["Karley", "Hyatt"], ["Vernice", "Tillman"], ["Ruben", "O'Reilly"], ["Domenica", "Jacobs"], ["Monte", "Kshlerin"], ["Monte", "Kshlerin"]], "gt": [["Taryn", "Braun"], ["Jayson", "Ullrich"], ["Olaf", "Watsica"], ["Vernice", "Tillman"], ["Danny", "Considine"], ["Ruben", "O'Reilly"], ["Velva", "Hayes"], ["Karley", "Hyatt"], ["Monte", "Kshlerin"], ["Domenica", "Jacobs"], ["Brady", "Pouros"], ["Winfield", "Christiansen"], ["Ericka", "Murazik"], ["Sigurd", "Frami"], ["Lesly", "Walter"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.first_name, T2.last_name \nFROM Treatments AS T1 \nJOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id \nJOIN Charges AS T3 ON T1.cost_of_treatment  <  (SELECT AVG(charge_amount) FROM Charges)", "match": {"match": false, "result": [["Domenica", "Jacobs"], ["Domenica", "Jacobs"], ["Domenica", "Jacobs"], ["Karley", "Hyatt"], ["Karley", "Hyatt"], ["Karley", "Hyatt"], ["Vernice", "Tillman"], ["Vernice", "Tillman"], ["Vernice", "Tillman"], ["Domenica", "Jacobs"], ["Domenica", "Jacobs"], ["Domenica", "Jacobs"], ["Monte", "Kshlerin"], ["Monte", "Kshlerin"], ["Monte", "Kshlerin"]], "gt": [["Taryn", "Braun"], ["Jayson", "Ullrich"], ["Olaf", "Watsica"], ["Vernice", "Tillman"], ["Danny", "Considine"], ["Ruben", "O'Reilly"], ["Velva", "Hayes"], ["Karley", "Hyatt"], ["Monte", "Kshlerin"], ["Domenica", "Jacobs"], ["Brady", "Pouros"], ["Winfield", "Christiansen"], ["Ericka", "Murazik"], ["Sigurd", "Frami"], ["Lesly", "Walter"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.date_of_treatment, \n       T1.first_name \nFROM Professionals T1 \nJOIN Treatments T2 ON T1.professional_id = T2.professional_id", "match": {"match": true, "result": [["2018-03-19 04:39:54", "Monte"], ["2018-03-15 20:25:34", "Domenica"], ["2018-03-08 05:26:23", "Vernice"], ["2018-03-01 04:14:46", "Karley"], ["2018-03-23 13:52:10", "Sigurd"], ["2018-03-11 04:23:15", "Vernice"], ["2018-03-10 11:45:58", "Sigurd"], ["2018-03-24 22:25:58", "Ruben"], ["2018-03-14 19:10:40", "Domenica"], ["2018-02-28 17:09:43", "Velva"], ["2018-03-13 12:22:58", "Danny"], ["2018-03-16 10:27:36", "Monte"], ["2018-02-26 09:08:53", "Karley"], ["2018-03-04 20:33:43", "Monte"], ["2018-03-15 19:10:02", "Ruben"]]}}
{"result": "SELECT T1.date_of_treatment, P.first_name \nFROM Treatments AS T1 \nJOIN Professionals AS P ON T1.professional_id = P.professional_id", "match": {"match": true, "result": [["2018-03-19 04:39:54", "Monte"], ["2018-03-15 20:25:34", "Domenica"], ["2018-03-08 05:26:23", "Vernice"], ["2018-03-01 04:14:46", "Karley"], ["2018-03-23 13:52:10", "Sigurd"], ["2018-03-11 04:23:15", "Vernice"], ["2018-03-10 11:45:58", "Sigurd"], ["2018-03-24 22:25:58", "Ruben"], ["2018-03-14 19:10:40", "Domenica"], ["2018-02-28 17:09:43", "Velva"], ["2018-03-13 12:22:58", "Danny"], ["2018-03-16 10:27:36", "Monte"], ["2018-02-26 09:08:53", "Karley"], ["2018-03-04 20:33:43", "Monte"], ["2018-03-15 19:10:02", "Ruben"]]}}
{"result": "SELECT T2.cost_of_treatment, T1.treatment_type_description \nFROM Treatment_Types AS T1 \nJOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code", "match": {"match": true, "result": [[567, "Take for a Walk"], [147, "Vaccination"], [429, "Physical examination"], [266, "Vaccination"], [668, "Vaccination"], [313, "Physical examination"], [852, "Physical examination"], [407, "Physical examination"], [139, "Take for a Walk"], [681, "Take for a Walk"], [514, "Vaccination"], [428, "Physical examination"], [945, "Vaccination"], [349, "Take for a Walk"], [656, "Take for a Walk"]]}}
{"result": "SELECT T2.cost_of_treatment, T1.treatment_type_description \nFROM Treatment_Types AS T1 \nJOIN Treatments AS T2 \nON T1.treatment_type_code = T2.treatment_type_code", "match": {"match": true, "result": [[567, "Take for a Walk"], [147, "Vaccination"], [429, "Physical examination"], [266, "Vaccination"], [668, "Vaccination"], [313, "Physical examination"], [852, "Physical examination"], [407, "Physical examination"], [139, "Take for a Walk"], [681, "Take for a Walk"], [514, "Vaccination"], [428, "Physical examination"], [945, "Vaccination"], [349, "Take for a Walk"], [656, "Take for a Walk"]]}}
{"result": "```sql\nSELECT \n  O.first_name,\n  O.last_name,\n  D.size_description\nFROM \n  Owners O\nJOIN \n  Dogs D ON O.owner_id = D.owner_id\nJOIN \n  Sizes S ON D.size_code = S.size_code;\n```\n\nThis SQL query will list each owner's first name, last name, and the size of his or her dog by joining the Owners, Dogs, and Sizes tables based on their respective foreign keys.", "match": {"match": false, "error": "Query execution failed with error: no such column: D.size_description"}}
{"result": "SELECT O.first_name, O.last_name, D.size_code \nFROM Owners O \nJOIN Dogs D ON O.owner_id = D.owner_id;", "match": {"match": true, "result": [["Jaclyn", "Stoltenberg", "LGE"], ["Gay", "Feil", "LGE"], ["Nora", "Haley", "MED"], ["Rachelle", "Funk", "LGE"], ["Emelie", "Mertz", "MED"], ["Johann", "Fisher", "MED"], ["Jaclyn", "Stoltenberg", "MED"], ["Rachelle", "Funk", "SML"], ["Melisa", "DuBuque", "MED"], ["Kade", "Rippin", "MED"], ["Cindy", "Schmitt", "LGE"], ["Orlando", "Price", "MED"], ["Rolando", "Prohaska", "SML"], ["Rachelle", "Funk", "MED"], ["Lorenz", "Nicolas", "MED"]]}}
{"result": "SELECT o.first_name, d.name \nFROM Owners o \nJOIN Dogs d ON o.owner_id = d.owner_id", "match": {"match": true, "result": [["Jaclyn", "Kacey"], ["Gay", "Hipolito"], ["Nora", "Mavis"], ["Rachelle", "Houston"], ["Emelie", "Jeffrey"], ["Johann", "Merritt"], ["Jaclyn", "Narciso"], ["Rachelle", "George"], ["Melisa", "Bessie"], ["Kade", "Troy"], ["Cindy", "Betty"], ["Orlando", "Holden"], ["Rolando", "Jesus"], ["Rachelle", "Lyric"], ["Lorenz", "Evangeline"]]}}
{"result": "SELECT o.first_name, d.name \nFROM Owners o \nJOIN Dogs d ON o.owner_id = d.owner_id", "match": {"match": true, "result": [["Jaclyn", "Kacey"], ["Gay", "Hipolito"], ["Nora", "Mavis"], ["Rachelle", "Houston"], ["Emelie", "Jeffrey"], ["Johann", "Merritt"], ["Jaclyn", "Narciso"], ["Rachelle", "George"], ["Melisa", "Bessie"], ["Kade", "Troy"], ["Cindy", "Betty"], ["Orlando", "Holden"], ["Rolando", "Jesus"], ["Rachelle", "Lyric"], ["Lorenz", "Evangeline"]]}}
{"result": "SELECT d.name, t.date_of_treatment \nFROM Dogs d \nJOIN Breeds b ON d.breed_code = b.breed_code \nJOIN Treatments t ON d.dog_id = t.dog_id \nWHERE b.breed_name = (SELECT breed_name FROM Breeds ORDER BY COUNT(dog_id) ASC LIMIT 1)", "match": {"match": false, "error": "Query execution failed with error: no such column: dog_id"}}
{"result": "SELECT T1.name, T2.date_of_treatment \nFROM Dogs T1 \nJOIN Treatments T2 ON T1.dog_id = T2.dog_id \nJOIN Breed_Code T3 ON T1.breed_code = T3.breed_code \nJOIN (\n SELECT breed_code, COUNT(*) as cnt\n FROM Dogs\n GROUP BY breed_code\n) AS T4 ON T3.breed_code = T4.breed_code \nWHERE T4.cnt = ( SELECT MIN(cnt) \n                 FROM (\n                 SELECT breed_code, COUNT(*) as cnt\n                 FROM Dogs\n                 GROUP BY breed_code\n                 ) AS T5", "match": {"match": false, "error": "Query execution failed with error: incomplete input"}}
{"result": "SELECT o.first_name, d.name \nFROM Owners o \nJOIN Dogs d ON o.owner_id = d.owner_id \nWHERE o.state = 'VA';", "match": {"match": false, "result": [], "gt": [["Melisa", "Bessie"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT o.first_name, d.name \nFROM Owners o \nINNER JOIN Dogs d ON o.owner_id = d.owner_id \nWHERE o.state = 'VA';", "match": {"match": false, "result": [], "gt": [["Melisa", "Bessie"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.date_arrived, T1.date_departed\nFROM Dogs T1\nJOIN Treatments T2 ON T1.dog_id = T2.dog_id;", "match": {"match": false, "result": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "gt": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.date_arrived, T1.date_departed \nFROM Dogs T1 \nJOIN Treatments T2 ON T1.dog_id = T2.dog_id", "match": {"match": false, "result": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "gt": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.last_name \nFROM Owners AS T1 \nJOIN Dogs AS T2 ON T1.owner_id = T2.owner_id \nORDER BY T2.date_of_birth DESC \nLIMIT 1;", "match": {"match": false, "result": [["Mertz"]], "gt": [["Feil"], ["Fisher"], ["Rippin"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.last_name \nFROM Dogs AS T1 \nJOIN Owners AS T2 ON T1.owner_id = T2.owner_id \nWHERE T1.age = ( SELECT MIN(age) FROM Dogs );", "match": {"match": false, "result": [["Nicolas"]], "gt": [["Feil"], ["Fisher"], ["Rippin"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT email_address \nFROM Professionals \nWHERE state IN ('HI', 'WI');", "match": {"match": false, "result": [], "gt": [["uboehm@example.org"], ["mekhi.little@example.org"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT email_address \nFROM Professionals \nWHERE state IN ('HI', 'WI')", "match": {"match": false, "result": [], "gt": [["uboehm@example.org"], ["mekhi.little@example.org"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT date_arrived, date_departed \nFROM Dogs;", "match": {"match": true, "result": [["2017-09-08 20:10:13", "2018-03-25 06:58:44"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-25 10:14:05", "2018-03-25 10:25:46"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-10-25 00:55:34", "2018-03-25 04:50:22"], ["2017-04-15 09:25:31", "2018-03-25 13:07:04"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-10-16 20:06:21", "2018-03-25 02:47:40"], ["2018-01-17 11:44:16", "2018-03-25 06:46:07"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-07-25 15:19:07", "2018-03-25 15:05:16"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"]]}}
{"result": "SELECT date_arrived, date_departed \nFROM Dogs;", "match": {"match": true, "result": [["2017-09-08 20:10:13", "2018-03-25 06:58:44"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-25 10:14:05", "2018-03-25 10:25:46"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-10-25 00:55:34", "2018-03-25 04:50:22"], ["2017-04-15 09:25:31", "2018-03-25 13:07:04"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-10-16 20:06:21", "2018-03-25 02:47:40"], ["2018-01-17 11:44:16", "2018-03-25 06:46:07"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-07-25 15:19:07", "2018-03-25 15:05:16"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"]]}}
{"result": "SELECT COUNT(DISTINCT dog_id) \nFROM Treatments;", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(DISTINCT dog_id) \nFROM Treatments", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(DISTINCT professional_id) \nFROM Treatments", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT COUNT(DISTINCT `professional_id`) FROM `Treatments`", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT T1.role_code, T1.street, T1.city, T1.state \nFROM Professionals AS T1 \nINNER JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id \nWHERE T2.city LIKE '%West%'", "match": {"match": true, "result": [["Employee", "6915 Oberbrunner Point Suite 491\nGleasonville, LA ", "West Heidi", "Indiana"]]}}
{"result": "SELECT role_code, street, city, state \nFROM Professionals \nWHERE city LIKE '%West%';", "match": {"match": true, "result": [["Employee", "6915 Oberbrunner Point Suite 491\nGleasonville, LA ", "West Heidi", "Indiana"]]}}
{"result": "SELECT first_name, last_name, email_address \nFROM Owners \nWHERE state LIKE '%North%';", "match": {"match": true, "result": [["Johann", "Fisher", "zboncak.madonna@example.net"], ["Cindy", "Schmitt", "wpfeffer@example.net"]]}}
{"result": "SELECT first_name, last_name, email_address \nFROM Owners \nWHERE state LIKE '%North%';", "match": {"match": true, "result": [["Johann", "Fisher", "zboncak.madonna@example.net"], ["Cindy", "Schmitt", "wpfeffer@example.net"]]}}
{"result": "SELECT COUNT(*) \nFROM Dogs \nWHERE age < (SELECT AVG(age) FROM Dogs);", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(*) \nFROM Dogs \nWHERE age < (SELECT AVG(age) FROM Dogs);", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT MAX(`cost_of_treatment`) FROM `Treatments`", "match": {"match": false, "result": [[945]], "gt": [[407]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.cost_of_treatment\nFROM Treatments AS T1\nJOIN (\n  SELECT dog_id, MAX(date_of_treatment) as max_date\n  FROM Treatments\n  GROUP BY dog_id\n) AS T2 ON T1.dog_id = T2.dog_id AND T1.date_of_treatment = T2.max_date", "match": {"match": false, "result": [[567], [147], [668], [313], [407], [514], [428], [945], [656]], "gt": [[407]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) \nFROM Dogs \nWHERE dog_id NOT IN (SELECT dog_id FROM Treatments);", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(*) \nFROM Dogs \nWHERE dog_id NOT IN (SELECT dog_id FROM Treatments);", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(*) \nFROM Owners \nWHERE owner_id NOT IN (SELECT owner_id FROM Dogs);", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(owner_id) \nFROM Owners \nLEFT JOIN Dogs \nON Owners.owner_id = Dogs.owner_id \nWHERE Dogs.owner_id IS NULL", "match": {"match": false, "error": "Query execution failed with error: ambiguous column name: owner_id"}}
{"result": "SELECT COUNT(*) \nFROM Professionals \nLEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id \nWHERE Treatments.treatment_id IS NULL", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT COUNT(*) \nFROM Professionals \nWHERE professional_id NOT IN (SELECT professional_id FROM Treatments);", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT name, age, weight\nFROM Dogs\nWHERE abandoned_yn = '1'", "match": {"match": true, "result": [["Kacey", "6", "7.57"], ["Lyric", "4", "4.36"], ["Evangeline", "1", "4.01"]]}}
{"result": "SELECT name, age, weight \nFROM Dogs \nWHERE abandoned_yn = '1';", "match": {"match": true, "result": [["Kacey", "6", "7.57"], ["Lyric", "4", "4.36"], ["Evangeline", "1", "4.01"]]}}
{"result": "SELECT AVG(age) FROM Dogs", "match": {"match": true, "result": [[5.066666666666666]]}}
{"result": "SELECT AVG(age) AS average_age FROM Dogs", "match": {"match": true, "result": [[5.066666666666666]]}}
{"result": "SELECT MAX(age) FROM Dogs", "match": {"match": true, "result": [["9"]]}}
{"result": "SELECT MAX(age) \nFROM Dogs", "match": {"match": true, "result": [["9"]]}}
{"result": "```sql\nSELECT \n    charge_type,\n    charge_amount\nFROM \n    Charges\nORDER BY \n    charge_type;\n```", "match": {"match": true, "result": [["Daily Accommodation", 98], ["Drugs", 322], ["Health Check", 640]]}}
{"result": "SELECT `charge_type`, `charge_amount` \nFROM `Charges`", "match": {"match": true, "result": [["Daily Accommodation", 98], ["Drugs", 322], ["Health Check", 640]]}}
{"result": "SELECT MAX(`charge_amount`) FROM Charges GROUP BY `charge_type`;", "match": {"match": false, "result": [[98], [322], [640]], "gt": [[640]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(T2.charge_amount) \nFROM Charges AS T1 \nJOIN Breeds AS T2 ON T1.charge_type = T2.breed_code", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.charge_amount"}}
{"result": "SELECT email_address, cell_number, home_phone \nFROM Professionals", "match": {"match": true, "result": [["deanna.schuster@example.com", "(275)939-2435x80863", "+71(6)2898266914"], ["lucile.shanahan@example.org", "889-940-2676", "+02(1)0259033559"], ["uboehm@example.org", "(369)908-7311x065", "325-155-0801x7005"], ["lourdes.lowe@example.net", "00230569697", "312.216.3352"], ["mekhi.little@example.org", "011.193.9081x3186", "1-609-566-2752x25197"], ["jacynthe.mclaughlin@example.net", "139-321-7313", "+43(5)1132733868"], ["lambert62@example.org", "499-434-0215x1628", "022.529.0550x1319"], ["goyette.roosevelt@example.net", "328.842.3792", "891.475.2256"], ["schneider.kathryne@example.org", "962-983-8109x3509", "320-508-6023"], ["jerrod.bahringer@example.org", "461-801-2600", "(230)338-3342x585"], ["west.eula@example.net", "609-405-2990", "(920)304-4499x59146"], ["marquardt.furman@example.org", "1-181-670-9466", "246-951-0080x76716"], ["delphine29@example.com", "880-659-7577x736", "346.594.3739"], ["cole.margarita@example.org", "1-185-137-1945x409", "971.048.3763x9404"], ["jeichmann@example.com", "1-258-285-4707x8020", "1-138-287-3775"]]}}
{"result": "SELECT `email_address`, `cell_number`, `home_phone` \nFROM `Professionals`", "match": {"match": true, "result": [["deanna.schuster@example.com", "(275)939-2435x80863", "+71(6)2898266914"], ["lucile.shanahan@example.org", "889-940-2676", "+02(1)0259033559"], ["uboehm@example.org", "(369)908-7311x065", "325-155-0801x7005"], ["lourdes.lowe@example.net", "00230569697", "312.216.3352"], ["mekhi.little@example.org", "011.193.9081x3186", "1-609-566-2752x25197"], ["jacynthe.mclaughlin@example.net", "139-321-7313", "+43(5)1132733868"], ["lambert62@example.org", "499-434-0215x1628", "022.529.0550x1319"], ["goyette.roosevelt@example.net", "328.842.3792", "891.475.2256"], ["schneider.kathryne@example.org", "962-983-8109x3509", "320-508-6023"], ["jerrod.bahringer@example.org", "461-801-2600", "(230)338-3342x585"], ["west.eula@example.net", "609-405-2990", "(920)304-4499x59146"], ["marquardt.furman@example.org", "1-181-670-9466", "246-951-0080x76716"], ["delphine29@example.com", "880-659-7577x736", "346.594.3739"], ["cole.margarita@example.org", "1-185-137-1945x409", "971.048.3763x9404"], ["jeichmann@example.com", "1-258-285-4707x8020", "1-138-287-3775"]]}}
{"result": "SELECT DISTINCT breed_code, size_code\nFROM Dogs", "match": {"match": true, "result": [["ESK", "LGE"], ["BUL", "LGE"], ["BUL", "MED"], ["HUS", "MED"], ["ESK", "SML"], ["HUS", "SML"], ["ESK", "MED"]]}}
{"result": "SELECT DISTINCT breed_code, size_code \nFROM Dogs", "match": {"match": true, "result": [["ESK", "LGE"], ["BUL", "LGE"], ["BUL", "MED"], ["HUS", "MED"], ["ESK", "SML"], ["HUS", "SML"], ["ESK", "MED"]]}}
{"result": "SELECT T1.first_name, T2.treatment_type_description \nFROM Professionals T1 \nJOIN Treatments T3 ON T1.professional_id = T3.professional_id \nJOIN Treatment_Types T2 ON T2.treatment_type_code = T3.treatment_type_code", "match": {"match": false, "result": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Vernice", "Physical examination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Karley", "Vaccination"], ["Monte", "Take for a Walk"], ["Ruben", "Take for a Walk"]], "gt": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Ruben", "Take for a Walk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT P.first_name, TT.treatment_type_description \nFROM Professionals P \nJOIN Treatments T ON P.professional_id = T.professional_id \nJOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code;", "match": {"match": false, "result": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Vernice", "Physical examination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Karley", "Vaccination"], ["Monte", "Take for a Walk"], ["Ruben", "Take for a Walk"]], "gt": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Ruben", "Take for a Walk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(Singer_ID) FROM singer", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT COUNT(*) FROM singer", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "match": {"match": true, "result": [["Abigail Johnson"], ["Susanne Klatten"], ["Gina Rinehart"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Alice Walton"], ["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "match": {"match": true, "result": [["Abigail Johnson"], ["Susanne Klatten"], ["Gina Rinehart"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Alice Walton"], ["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT Birth_Year, Citizenship FROM singer", "match": {"match": true, "result": [[1944.0, "France"], [1948.0, "United States"], [1949.0, "United States"], [1942.0, "Chile"], [1940.0, "United States"], [1953.0, "Australia"], [1962.0, "Germany"], [1961.0, "United States"]]}}
{"result": "SELECT Birth_Year, Citizenship FROM singer", "match": {"match": true, "result": [[1944.0, "France"], [1948.0, "United States"], [1949.0, "United States"], [1942.0, "Chile"], [1940.0, "United States"], [1953.0, "Australia"], [1962.0, "Germany"], [1961.0, "United States"]]}}
{"result": "SELECT Name FROM singer WHERE Citizenship != 'France'", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]]}}
{"result": "SELECT Name FROM singer WHERE Citizenship != 'French'", "match": {"match": false, "result": [["Liliane Bettencourt"], ["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]], "gt": [["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"]]}}
{"result": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "match": {"match": true, "result": [["Liliane Bettencourt"]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "match": {"match": true, "result": [["Liliane Bettencourt"]]}}
{"result": "SELECT Citizenship, COUNT(*) as Num_Singers\nFROM singer\nGROUP BY Citizenship;", "match": {"match": true, "result": [["Australia", 1], ["Chile", 1], ["France", 1], ["Germany", 1], ["United States", 4]]}}
{"result": "SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship", "match": {"match": true, "result": [["Australia", 1], ["Chile", 1], ["France", 1], ["Germany", 1], ["United States", 4]]}}
{"result": "SELECT Citizenship \nFROM singer \nGROUP BY Citizenship \nORDER BY COUNT(Citizenship) DESC \nLIMIT 1", "match": {"match": true, "result": [["United States"]]}}
{"result": "SELECT Citizenship \nFROM singer \nGROUP BY Citizenship \nORDER BY COUNT(Citizenship) DESC \nLIMIT 1;", "match": {"match": true, "result": [["United States"]]}}
{"result": "SELECT Citizenship, MAX(Net_Worth_Millions) \nFROM singer \nGROUP BY Citizenship", "match": {"match": true, "result": [["Australia", 17.0], ["Chile", 17.4], ["France", 30.0], ["Germany", 14.3], ["United States", 28.8]]}}
{"result": "SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship", "match": {"match": true, "result": [["Australia", 17.0], ["Chile", 17.4], ["France", 30.0], ["Germany", 14.3], ["United States", 28.8]]}}
{"result": "SELECT T2.Title, T1.Name \nFROM singer AS T1 \nINNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID;", "match": {"match": true, "result": [["Do They Know It's Christmas", "Liliane Bettencourt"], ["F**k It (I Don't Want You Back)", "Liliane Bettencourt"], ["Cha Cha Slide", "Christy Walton"], ["Call on Me", "Iris Fontbona"], ["Yeah", "Christy Walton"], ["All This Time", "Gina Rinehart"], ["Left Outside Alone", "Jacqueline Mars"], ["Mysterious Girl", "Susanne Klatten"]]}}
{"result": "SELECT T2.Title, T1.Name \nFROM singer AS T1 \nINNER JOIN song AS T2 \nON T1.Singer_ID = T2.Singer_ID", "match": {"match": true, "result": [["Do They Know It's Christmas", "Liliane Bettencourt"], ["F**k It (I Don't Want You Back)", "Liliane Bettencourt"], ["Cha Cha Slide", "Christy Walton"], ["Call on Me", "Iris Fontbona"], ["Yeah", "Christy Walton"], ["All This Time", "Gina Rinehart"], ["Left Outside Alone", "Jacqueline Mars"], ["Mysterious Girl", "Susanne Klatten"]]}}
{"result": "SELECT DISTINCT T1.Name \nFROM singer AS T1\nINNER JOIN song AS T2 \nON T1.Singer_ID = T2.Singer_ID\nWHERE T2.Sales > 300000;", "match": {"match": true, "result": [["Liliane Bettencourt"], ["Christy Walton"], ["Iris Fontbona"]]}}
{"result": "SELECT DISTINCT T1.Name FROM singer AS T1 INNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000", "match": {"match": true, "result": [["Liliane Bettencourt"], ["Christy Walton"], ["Iris Fontbona"]]}}
{"result": "SELECT T1.Name \nFROM singer AS T1 \nJOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID \nGROUP BY T1.Singer_ID \nHAVING COUNT(T2.Singer_ID) > 1", "match": {"match": false, "result": [["Liliane Bettencourt"], ["Christy Walton"]], "gt": [["Christy Walton"], ["Liliane Bettencourt"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name \nFROM singer AS T1 \nINNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID \nGROUP BY T1.Name \nHAVING COUNT(T2.Singer_ID) > 1;", "match": {"match": true, "result": [["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT T1.Name, SUM(T2.Sales) \nFROM singer AS T1 \nJOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID \nGROUP BY T1.Name", "match": {"match": true, "result": [["Christy Walton", 651421.0], ["Gina Rinehart", 292000.0], ["Iris Fontbona", 335000.0], ["Jacqueline Mars", 275000.0], ["Liliane Bettencourt", 1646407.0], ["Susanne Klatten", 261000.0]]}}
{"result": "SELECT Name, SUM(Sales) FROM song GROUP BY Singer_ID", "match": {"match": false, "error": "Query execution failed with error: no such column: Name"}}
{"result": "SELECT Name \nFROM singer \nWHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);", "match": {"match": true, "result": [["Alice Walton"], ["Abigail Johnson"]]}}
{"result": "SELECT s.Name FROM singer s \nWHERE s.Singer_ID NOT IN (SELECT Singer_ID FROM song)", "match": {"match": true, "result": [["Alice Walton"], ["Abigail Johnson"]]}}
{"result": "SELECT T2.Citizenship \nFROM song AS T1 \nINNER JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID \nWHERE T2.Birth_Year < 1945 OR T2.Birth_Year > 1955", "match": {"match": false, "result": [["France"], ["France"], ["Chile"], ["United States"], ["Germany"]], "gt": [["United States"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Citizenship \nFROM singer AS T1 \nINNER JOIN singer AS T2 \nON T1.Net_Worth_Millions = T2.Net_Worth_Millions \nWHERE T1.Birth_Year < 1945 \nAND T2.Birth_Year > 1955", "match": {"match": false, "result": [], "gt": [["United States"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(`feature_id`) FROM `Other_Available_Features`", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT T2.feature_type_name \nFROM Other_Available_Features AS T1 \nJOIN Ref_Feature_Types AS T2 \nON T1.feature_type_code = T2.feature_type_code \nWHERE T1.feature_name = 'AirCon';", "match": {"match": true, "result": [["Amenity, eg Pool."]]}}
{"result": "```sql\nSELECT \n  pt.property_type_code,\n  pt.property_type_description,\n  p.property_name\nFROM \n  Properties p\nJOIN \n  Ref_Property_Types pt ON p.property_type_code = pt.property_type_code;\n```", "match": {"match": false, "result": [["House", "House, Bungalow, etc.", "park"], ["House", "House, Bungalow, etc.", "the cole"], ["Other", "Other, to be determined.", "prism"], ["Field", "Field, Meadow.", "riverside"], ["Apartment", "Apartment, Flat, Condo, etc.", "parc east"], ["Shop", "Shop, Retail Outlet.", "high line"], ["Shop", "Shop, Retail Outlet.", "avalon"], ["Apartment", "Apartment, Flat, Condo, etc.", "vogue"], ["Apartment", "Apartment, Flat, Condo, etc.", "longacre"], ["Apartment", "Apartment, Flat, Condo, etc.", "renoir"], ["Other", "Other, to be determined.", "murray hill"], ["Apartment", "Apartment, Flat, Condo, etc.", "ten tower"], ["Other", "Other, to be determined.", "chelsea"], ["Other", "Other, to be determined.", "wall street"], ["Apartment", "Apartment, Flat, Condo, etc.", "parc coliseum"]], "gt": [["Apartment, Flat, Condo, etc."], ["Field, Meadow."], ["House, Bungalow, etc."], ["Other, to be determined."], ["Shop, Retail Outlet."]], "error": "Query result does not match ground truth."}}
{"result": "SELECT property_name \nFROM Properties \nWHERE (property_type_code = 'HSE' OR property_type_code = 'APT') \nAND room_count > 1", "match": {"match": false, "result": [], "gt": [["longacre"], ["parc coliseum"], ["parc east"], ["park"], ["renoir"], ["ten tower"], ["the cole"], ["vogue"]], "error": "Query result does not match ground truth."}}


{"result": "SELECT COUNT(Singer_ID) FROM singer", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(Singer_ID) FROM singer", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC", "match": {"match": true, "result": [["Joe Sharp", "Netherlands", 52], ["John Nizinik", "France", 43], ["Rose White", "France", 41], ["Timbaland", "United States", 32], ["Justin Brown", "France", 29], ["Tribal King", "France", 25]]}}
{"result": "SELECT Name, Country, Age \nFROM singer \nORDER BY Age DESC;", "match": {"match": true, "result": [["Joe Sharp", "Netherlands", 52], ["John Nizinik", "France", 43], ["Rose White", "France", 41], ["Timbaland", "United States", 32], ["Justin Brown", "France", 29], ["Tribal King", "France", 25]]}}
{"result": "SELECT AVG(Age), MIN(Age), MAX(Age) \nFROM singer \nWHERE Country = 'France';", "match": {"match": true, "result": [[34.5, 25, 43]]}}
{"result": "SELECT AVG(Age) , MIN(Age) , MAX(Age) \nFROM singer \nWHERE Country = 'France';", "match": {"match": true, "result": [[34.5, 25, 43]]}}
{"result": "SELECT T2.Name, T2.`Song_Name`, T2.`Song_release_year` \nFROM singer_in_concert AS T1 \nJOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID \nWHERE T2.Age = (SELECT MIN(Age) FROM singer);", "match": {"match": false, "result": [["Tribal King", "Love", "2016"], ["Tribal King", "Love", "2016"]], "gt": [["Love", "2016"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Name, T2.\"Song_Name\", T2.\"Song_release_year\" \nFROM singer_in_concert AS T1 \nJOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID \nWHERE T2.Age = (SELECT MIN(Age) FROM singer);", "match": {"match": false, "result": [["Tribal King", "Love", "2016"], ["Tribal King", "Love", "2016"]], "gt": [["Love", "2016"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T2.Country \nFROM singer AS T1 \nINNER JOIN singer AS T2 ON T1.Country = T2.Country \nWHERE T1.Age > 20", "match": {"match": true, "result": [["Netherlands"], ["United States"], ["France"]]}}
{"result": "SELECT DISTINCT T1.Country \nFROM singer AS T1 \nWHERE T1.Age > 20", "match": {"match": true, "result": [["Netherlands"], ["United States"], ["France"]]}}
{"result": "SELECT Country, COUNT(*) FROM singer GROUP BY Country;", "match": {"match": true, "result": [["France", 4], ["Netherlands", 1], ["United States", 1]]}}
{"result": "SELECT Country, COUNT(*) FROM singer GROUP BY Country", "match": {"match": true, "result": [["France", 4], ["Netherlands", 1], ["United States", 1]]}}
{"result": "SELECT T2.`Song_Name` \nFROM singer_in_concert AS T1 \nJOIN singer AS T2 \nON T1.Singer_ID = T2.Singer_ID \nWHERE T2.`Age` > ( SELECT AVG(`Age`) FROM singer );", "match": {"match": false, "result": [["Gentleman"], ["Gentleman"], ["Sun"]], "gt": [["You"], ["Sun"], ["Gentleman"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T3.\"Song_Name\" \nFROM \"singer\" AS T1 \nJOIN \"singer_in_concert\" AS T2 ON T1.\"Singer_ID\" = T2.\"Singer_ID\" \nJOIN \"concert\" AS T3 ON T2.concert_ID = T3.concert_ID \nWHERE T1.\"Age\" > (SELECT AVG(\"Age\") FROM \"singer\")", "match": {"match": false, "error": "Query execution failed with error: no such column: T3.Song_Name"}}
{"result": "SELECT Location, Name \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000", "match": {"match": true, "result": []}}
{"result": "SELECT Location, Name \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000;", "match": {"match": true, "result": []}}
{"result": "SELECT MAX(Capacity), AVG(Average) FROM stadium", "match": {"match": false, "result": [[52500, 917.8888888888889]], "gt": [[52500, 730]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(Capacity) AS average_capacity, MAX(Capacity) AS max_capacity FROM stadium", "match": {"match": true, "result": [[10621.666666666666, 52500]]}}
{"result": "SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1", "match": {"match": true, "result": [["Stark's Park", 10104]]}}
{"result": "SELECT T1.Name, T1.Capacity \nFROM stadium AS T1 \nORDER BY T1.Average DESC \nLIMIT 1;", "match": {"match": true, "result": [["Stark's Park", 10104]]}}
{"result": "SELECT COUNT(concert_ID) \nFROM concert \nWHERE YEAR = '2014' OR YEAR = '2015';", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(concert_ID) \nFROM concert \nWHERE YEAR = '2014' OR YEAR = '2015'", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT T1.Name, COUNT(T3.concert_ID) as num_concerts\nFROM stadium T1\nJOIN concert T2 ON T1.Stadium_ID = T2.Stadium_ID\nJOIN singer_in_concert T3 ON T2.concert_ID = T3.concert_ID\nGROUP BY T1.Name", "match": {"match": false, "result": [["Balmoor", 2], ["Glebe Park", 1], ["Recreation Park", 1], ["Somerset Park", 3], ["Stark's Park", 3]], "gt": [["Stark's Park", 1], ["Glebe Park", 1], ["Somerset Park", 2], ["Recreation Park", 1], ["Balmoor", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Location, COUNT(T3.concert_ID) AS count\nFROM stadium AS T1\nLEFT JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID\nLEFT JOIN singer_in_concert AS T3 ON T3.concert_ID = T2.concert_ID\nGROUP BY T1.Location", "match": {"match": false, "result": [["Alloa Athletic", 1], ["Arbroath", 0], ["Ayr United", 3], ["Brechin City", 1], ["East Fife", 0], ["Peterhead", 2], ["Queen's Park", 0], ["Raith Rovers", 3], ["Stirling Albion", 0]], "gt": [["Stark's Park", 1], ["Glebe Park", 1], ["Somerset Park", 2], ["Recreation Park", 1], ["Balmoor", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name, T1.Capacity\nFROM stadium T1\nJOIN (\n  SELECT T3.Stadium_ID, COUNT(*) as count\n  FROM concert T2\n  JOIN singer_in_concert T3 ON T2.concert_ID = T3.concert_ID\n  JOIN stadium T4 ON T2.Stadium_ID = T4.Stadium_ID\n  WHERE T2.Year >= '2014'\n  GROUP BY T3.Stadium_ID\n) T5 ON T1.Stadium_ID = T5.Stadium_ID\nORDER BY T5.count DESC\nLIMIT 1", "match": {"match": false, "error": "Query execution failed with error: no such column: T3.Stadium_ID"}}
{"result": "SELECT T2.Name, T2.Capacity \nFROM concert AS T1 \nJOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nWHERE T1.Year > '2013' \nGROUP BY T2.Name, T2.Capacity \nORDER BY COUNT(T1.concert_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [["Somerset Park", 11998]]}}
{"result": "SELECT \"Year\" \nFROM concert \nGROUP BY \"Year\" \nORDER BY COUNT(\"concert_ID\") DESC \nLIMIT 1", "match": {"match": true, "result": [["2015"]]}}
{"result": "SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(Year) DESC LIMIT 1", "match": {"match": true, "result": [["2015"]]}}
{"result": "SELECT T.Name \nFROM stadium AS T \nLEFT JOIN concert AS C ON T.Stadium_ID = C.Stadium_ID \nWHERE C.Stadium_ID IS NULL", "match": {"match": true, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"]]}}
{"result": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)", "match": {"match": true, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"]]}}
{"result": "SELECT T1.Country \nFROM singer AS T1 \nWHERE T1.Age > 40 \nINTERSECT \nSELECT T1.Country \nFROM singer AS T1 \nWHERE T1.Age < 30", "match": {"match": true, "result": [["France"]]}}
{"result": "SELECT Name FROM stadium\nWHERE Stadium_ID NOT IN (\n  SELECT Stadium_ID FROM concert\n  WHERE YEAR = '2014'\n);", "match": {"match": false, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"], ["Recreation Park"], ["Balmoor"]], "gt": [["Balmoor"], ["Bayview Stadium"], ["Forthbank Stadium"], ["Gayfield Park"], ["Hampden Park"], ["Recreation Park"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name \nFROM stadium \nWHERE Stadium_ID NOT IN (\n  SELECT Stadium_ID \n  FROM concert \n  WHERE YEAR = '2014'\n);", "match": {"match": false, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"], ["Recreation Park"], ["Balmoor"]], "gt": [["Balmoor"], ["Bayview Stadium"], ["Forthbank Stadium"], ["Gayfield Park"], ["Hampden Park"], ["Recreation Park"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT c.concert_Name, c.Theme, COUNT(s.Singer_ID) \nFROM concert c \nJOIN singer_in_concert s ON c.concert_ID = s.concert_ID \nGROUP BY c.concert_Name, c.Theme;", "match": {"match": false, "result": [["Auditions", "Free choice", 3], ["Home Visits", "Bleeding Love", 1], ["Super bootcamp", "Free choice 2", 2], ["Week 1", "Happy Tonight", 2], ["Week 1", "Wide Awake", 1], ["Week 2", "Party All Night", 1]], "gt": [["Auditions", "Free choice", 3], ["Super bootcamp", "Free choice 2", 2], ["Home Visits", "Bleeding Love", 1], ["Week 1", "Wide Awake", 1], ["Week 1", "Happy Tonight", 2], ["Week 2", "Party All Night", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT concert_Name, Theme, COUNT(Singer_ID) \nFROM concert \nJOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID \nGROUP BY concert_Name, Theme", "match": {"match": false, "result": [["Auditions", "Free choice", 3], ["Home Visits", "Bleeding Love", 1], ["Super bootcamp", "Free choice 2", 2], ["Week 1", "Happy Tonight", 2], ["Week 1", "Wide Awake", 1], ["Week 2", "Party All Night", 1]], "gt": [["Auditions", "Free choice", 3], ["Super bootcamp", "Free choice 2", 2], ["Home Visits", "Bleeding Love", 1], ["Week 1", "Wide Awake", 1], ["Week 1", "Happy Tonight", 2], ["Week 2", "Party All Night", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name, COUNT(T2.concert_ID) AS Number_of_concerts \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID \nGROUP BY T1.Name", "match": {"match": false, "result": [["John Nizinik", 2], ["Justin Brown", 3], ["Rose White", 1], ["Timbaland", 2], ["Tribal King", 2]], "gt": [["Timbaland", 2], ["Justin Brown", 3], ["Rose White", 1], ["John Nizinik", 2], ["Tribal King", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name, COUNT(T3.concert_ID) \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID \nJOIN concert AS T3 ON T2.concert_ID = T3.concert_ID \nGROUP BY T1.Name", "match": {"match": false, "result": [["John Nizinik", 2], ["Justin Brown", 3], ["Rose White", 1], ["Timbaland", 2], ["Tribal King", 2]], "gt": [["Timbaland", 2], ["Justin Brown", 3], ["Rose White", 1], ["John Nizinik", 2], ["Tribal King", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T1.`Name` \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 ON T1.`Singer_ID` = T2.`Singer_ID` \nJOIN concert AS T3 ON T2.`concert_ID` = T3.`concert_ID` \nWHERE T3.`Year` = '2014';", "match": {"match": false, "result": [["Timbaland"], ["Justin Brown"], ["John Nizinik"], ["Tribal King"], ["Rose White"]], "gt": [["Timbaland"], ["Justin Brown"], ["John Nizinik"], ["Justin Brown"], ["Tribal King"], ["Rose White"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T2.Name \nFROM concert AS T1 \nINNER JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID \nINNER JOIN singer AS T3 ON T2.Singer_ID = T3.Singer_ID \nWHERE T1.Year = '2014';", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Name"}}
{"result": "SELECT T1.Name, T1.Country \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID \nJOIN concert AS T3 ON T2.concert_ID = T3.concert_ID \nJOIN singer AS T4 ON T2.concert_ID = T4.Singer_ID \nWHERE T4.Song_Name LIKE '%Hey%'", "match": {"match": false, "result": [["John Nizinik", "France"]], "gt": [["Justin Brown", "France"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Name, T2.Country \nFROM singer_in_concert AS T1 \nJOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID \nJOIN concert AS T3 ON T1.concert_ID = T3.concert_ID \nJOIN stadium AS T4 ON T3.Stadium_ID = T4.Stadium_ID \nJOIN ( SELECT Singer_ID, Song_Name \n       FROM singer \n       WHERE Song_Name LIKE '%Hey%' ) AS T5 ON T2.Singer_ID = T5.Singer_ID", "match": {"match": false, "result": [["Justin Brown", "France"], ["Justin Brown", "France"], ["Justin Brown", "France"]], "gt": [["Justin Brown", "France"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T3.Location, T3.Name \nFROM concert AS T1 \nJOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nJOIN (\n  SELECT Stadium_ID \n  FROM concert \n  WHERE YEAR = '2014' \n  INTERSECT \n  SELECT Stadium_ID \n  FROM concert \n  WHERE YEAR = '2015'\n) AS T4 ON T2.Stadium_ID = T4.Stadium_ID", "match": {"match": false, "error": "Query execution failed with error: no such column: T3.Location"}}
{"result": "SELECT T3.Location, T3.Name \nFROM concert AS T1 \nINNER JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID \nINNER JOIN stadium AS T3 ON T1.Stadium_ID = T3.Stadium_ID \nWHERE T1.Year IN ('2014', '2015')", "match": {"match": false, "result": [["Raith Rovers", "Stark's Park"], ["Raith Rovers", "Stark's Park"], ["Raith Rovers", "Stark's Park"], ["Ayr United", "Somerset Park"], ["Ayr United", "Somerset Park"], ["Ayr United", "Somerset Park"], ["Brechin City", "Glebe Park"], ["Peterhead", "Balmoor"], ["Peterhead", "Balmoor"], ["Alloa Athletic", "Recreation Park"]], "gt": [["Somerset Park", "Ayr United"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) \nFROM concert \nWHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1);", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(T1.concert_ID) \nFROM concert AS T1 \nJOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nWHERE T2.Capacity = ( SELECT MAX(Capacity) FROM stadium );", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(*)\nFROM Pets\nWHERE weight > 10", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(*) \nFROM Pets \nWHERE weight > 10;", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT weight \nFROM Pets \nWHERE PetType = 'Dog' \nORDER BY pet_age ASC \nLIMIT 1;", "match": {"match": false, "result": [], "gt": [[9.3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.weight \nFROM Student AS T1 \nINNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nINNER JOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T1.Sex = 'M' AND T3.PetType = 'dog' \nORDER BY T3.pet_age \nLIMIT 1;", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.weight"}}
{"result": "SELECT MAX(weight), PetType \nFROM Pets \nGROUP BY PetType", "match": {"match": true, "result": [[12.0, "cat"], [13.4, "dog"]]}}
{"result": "SELECT PetType, MAX(weight) \nFROM Pets \nGROUP BY PetType", "match": {"match": false, "result": [["cat", 12.0], ["dog", 13.4]], "gt": [[12.0, "cat"], [13.4, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) \nFROM Has_Pet \nJOIN Student ON Has_Pet.StuID = Student.StuID \nWHERE Student.Age > 20", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(*) \nFROM Student s \nJOIN Has_Pet hp ON s.StuID = hp.StuID \nJOIN Pets p ON hp.PetID = p.PetID \nWHERE s.Age > 20", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(*) \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Student.Sex = 'F' AND Pets.PetType = 'Dog';", "match": {"match": false, "result": [[0]], "gt": [[2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Student.Sex = 'F' AND Pets.PetType = 'dog'", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(DISTINCT PetType) FROM Pets", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(DISTINCT PetType) \nFROM Pets", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT Fname \nFROM Student \nWHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat' OR PetType = 'dog'))", "match": {"match": true, "result": [["Linda"], ["Tracy"]]}}
{"result": "SELECT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType IN ('cat', 'dog');", "match": {"match": false, "result": [["Linda"], ["Tracy"], ["Tracy"]], "gt": [["Linda"], ["Tracy"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT S.Fname \nFROM Student S \nJOIN Has_Pet HP ON S.StuID = HP.StuID \nJOIN Pets P ON HP.PetID = P.PetID \nGROUP BY S.Fname \nHAVING COUNT(DISTINCT P.PetType) = 2 AND P.PetType IN ('Cat', 'Dog')", "match": {"match": true, "result": []}}
{"result": "SELECT S.Fname \nFROM Student AS S \nJOIN Has_Pet AS HP ON S.StuID = HP.StuID \nJOIN Pets AS P ON P.PetID = HP.PetID \nWHERE P.PetType = 'cat' AND P.PetType = 'dog'; \n\n-- Since you can't have a pet that is both 'cat' and 'dog', \n-- this query will return no results because of the AND condition.\n-- You might want to use IN operator instead to get the students who have either 'cat' or 'dog' as pets.\n\nSELECT S.Fname \nFROM Student AS S \nJOIN Has_Pet AS HP ON S.StuID = HP.StuID \nJOIN Pets AS P ON P.PetID = HP.PetID \nWHERE P.PetType IN ('cat', 'dog');", "match": {"match": true, "result": []}}
{"result": "SELECT T1.`Major`, T1.`Age` \nFROM Student AS T1 \nLEFT JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nLEFT JOIN Pets AS T3 ON T3.PetID = T2.PetID \nWHERE T3.PetType NOT LIKE 'Cat'", "match": {"match": false, "result": [[600, 19], [600, 19]], "gt": [[600, 19], [600, 21], [600, 20], [600, 26], [600, 18], [600, 18], [600, 20], [600, 19], [600, 17], [600, 22], [600, 20], [600, 18], [600, 16], [600, 17], [600, 27], [600, 20], [600, 18], [520, 22], [520, 19], [540, 17], [520, 20], [540, 18], [520, 18], [520, 19], [520, 18], [550, 20], [100, 17], [550, 21], [550, 20], [550, 20], [550, 18], [50, 18], [50, 26]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Major, T1.Age\nFROM Student AS T1\nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID\nJOIN Pets AS T3 ON T2.PetID = T3.PetID\nWHERE T3.PetType != 'cat'", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Major"}}
{"result": "SELECT StuID\nFROM Student\nWHERE StuID NOT IN (\n  SELECT StuID\n  FROM Has_Pet\n  JOIN Pets ON Has_Pet.PetID = Pets.PetID\n  WHERE Pets.PetType = 'cat'\n);", "match": {"match": true, "result": [[1002], [1003], [1004], [1005], [1006], [1007], [1008], [1009], [1010], [1011], [1012], [1014], [1015], [1016], [1017], [1018], [1019], [1020], [1021], [1022], [1023], [1024], [1025], [1026], [1027], [1028], [1029], [1030], [1031], [1032], [1033], [1034], [1035]]}}
{"result": "SELECT StuID \nFROM Student \nWHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'));", "match": {"match": true, "result": [[1002], [1003], [1004], [1005], [1006], [1007], [1008], [1009], [1010], [1011], [1012], [1014], [1015], [1016], [1017], [1018], [1019], [1020], [1021], [1022], [1023], [1024], [1025], [1026], [1027], [1028], [1029], [1030], [1031], [1032], [1033], [1034], [1035]]}}
{"result": "SELECT S.Fname, S.Age \nFROM Student S \nJOIN Has_Pet HP ON S.StuID = HP.StuID \nJOIN Pets P ON HP.PetID = P.PetID AND P.PetType = 'Dog'", "match": {"match": false, "result": [], "gt": [["Tracy", 19], ["Tracy", 19]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'Dog' AND T2.PetID NOT IN (SELECT PetID FROM Pets WHERE PetType = 'Cat')", "match": {"match": false, "result": [], "gt": [["Tracy", 19], ["Tracy", 19]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.PetType, MAX(T2.weight) \nFROM Pets AS T2 \nJOIN Has_Pet AS T1 ON T2.PetID = T1.PetID", "match": {"match": false, "result": [["dog", 13.4]], "gt": [["dog", 9.3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT PetType, weight \nFROM Pets \nWHERE pet_age = (SELECT MIN(pet_age) FROM Pets);", "match": {"match": true, "result": [["dog", 9.3]]}}
{"result": "SELECT PetID, weight \nFROM Pets \nWHERE pet_age > 1", "match": {"match": true, "result": [[2001, 12.0], [2002, 13.4]]}}
{"result": "SELECT PetID, weight \nFROM Pets \nWHERE pet_age > 1", "match": {"match": true, "result": [[2001, 12.0], [2002, 13.4]]}}
{"result": "SELECT PetType, AVG(pet_age) AS average_age, MAX(pet_age) AS max_age\nFROM Pets\nGROUP BY PetType", "match": {"match": false, "result": [["cat", 3.0, 3], ["dog", 1.5, 2]], "gt": [[3.0, 3, "cat"], [1.5, 2, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT PetType, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age \nFROM Pets \nGROUP BY PetType", "match": {"match": false, "result": [["cat", 3.0, 3], ["dog", 1.5, 2]], "gt": [[3.0, 3, "cat"], [1.5, 2, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(weight) , PetType \nFROM Pets \nGROUP BY PetType", "match": {"match": true, "result": [[12.0, "cat"], [11.350000000000001, "dog"]]}}
{"result": "SELECT AVG(weight) , PetType \nFROM Pets \nGROUP BY PetType", "match": {"match": true, "result": [[12.0, "cat"], [11.350000000000001, "dog"]]}}
{"result": "SELECT T1.Fname, T1.Age \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID", "match": {"match": false, "result": [["Linda", 18], ["Tracy", 19], ["Tracy", 19]], "gt": [["Linda", 18], ["Tracy", 19]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT Fname, Age \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID", "match": {"match": true, "result": [["Linda", 18], ["Tracy", 19]]}}
{"result": "SELECT T1.PetID \nFROM Has_Pet AS T1 \nJOIN Student AS T2 ON T1.StuID = T2.StuID \nWHERE T2.LName = 'Smith'", "match": {"match": true, "result": [[2001]]}}
{"result": "SELECT T2.PetID \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Student.LName = 'Smith';", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.PetID"}}
{"result": "SELECT StuID, COUNT(*) FROM Has_Pet GROUP BY StuID", "match": {"match": false, "result": [[1001, 1], [1002, 2]], "gt": [[1, 1001], [2, 1002]], "error": "Query result does not match ground truth."}}
{"result": "SELECT StuID ,  COUNT(PetID) FROM Has_Pet GROUP BY StuID", "match": {"match": false, "result": [[1001, 1], [1002, 2]], "gt": [[1, 1001], [2, 1002]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Fname, T1.Sex \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nGROUP BY T1.StuID \nHAVING COUNT(T2.StuID) > 1", "match": {"match": true, "result": [["Tracy", "F"]]}}
{"result": "SELECT Fname, Sex \nFROM Student \nWHERE StuID IN ( SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*) > 1 );", "match": {"match": true, "result": [["Tracy", "F"]]}}
{"result": "SELECT LName FROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType = 'cat' AND Pets.pet_age = 3", "match": {"match": true, "result": [["Smith"]]}}
{"result": "SELECT LName \nFROM Student \nWHERE StuID IN (SELECT StuID \n                FROM Has_Pet \n                JOIN Pets ON Has_Pet.PetID = Pets.PetID \n                WHERE PetType = 'cat' AND pet_age = 3)", "match": {"match": true, "result": [["Smith"]]}}
{"result": "SELECT AVG(Age) \nFROM Student \nWHERE StuID NOT IN (SELECT StuID FROM Has_Pet);", "match": {"match": true, "result": [[19.625]]}}
{"result": "SELECT AVG(Age) \nFROM Student \nWHERE StuID NOT IN (SELECT StuID FROM Has_Pet);", "match": {"match": true, "result": [[19.625]]}}
{"result": "SELECT COUNT(*) FROM employee", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT COUNT(*) FROM employee", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT Name \nFROM employee \nORDER BY Age ASC;", "match": {"match": true, "result": [["George Chuter"], ["Andrew Sheridan"], ["Lee Mears"], ["Tim Payne"], ["Matt Stevens"], ["Jason Hobson"], ["Steve Borthwick"], ["Louis Deacon"], ["Phil Vickery"], ["Mark Regan"]]}}
{"result": "SELECT Name FROM employee ORDER BY Age ASC", "match": {"match": true, "result": [["George Chuter"], ["Andrew Sheridan"], ["Lee Mears"], ["Tim Payne"], ["Matt Stevens"], ["Jason Hobson"], ["Steve Borthwick"], ["Louis Deacon"], ["Phil Vickery"], ["Mark Regan"]]}}
{"result": "SELECT COUNT(*) ,  City FROM employee GROUP BY City", "match": {"match": true, "result": [[3, "Bath"], [3, "Bristol"], [1, "Leicester"], [1, "Sale"], [2, "Wasps"]]}}
{"result": "SELECT COUNT(\"Employee_ID\") , \"City\"\nFROM \"employee\"\nGROUP BY \"City\"", "match": {"match": true, "result": [[3, "Bath"], [3, "Bristol"], [1, "Leicester"], [1, "Sale"], [2, "Wasps"]]}}
{"result": "SELECT City \nFROM employee \nWHERE Age < 30 \nGROUP BY City \nHAVING COUNT(*) > 1", "match": {"match": true, "result": [["Bath"]]}}
{"result": "SELECT T1.City \nFROM employee AS T1 \nWHERE T1.Age < 30 \nGROUP BY T1.City \nHAVING COUNT(T1.Employee_ID) > 1", "match": {"match": true, "result": [["Bath"]]}}
{"result": "SELECT LOCATION, COUNT(Shop_ID) \nFROM shop \nGROUP BY LOCATION", "match": {"match": false, "result": [["Espoo", 1], ["Helsinki", 1], ["Jakobstad", 1], ["Kotka", 1], ["Kuopio", 1], ["Lahti", 1], ["Mariehamn", 1], ["Turku", 1], ["Valkeakoski", 1]], "gt": [[1, "Espoo"], [1, "Helsinki"], [1, "Jakobstad"], [1, "Kotka"], [1, "Kuopio"], [1, "Lahti"], [1, "Mariehamn"], [1, "Turku"], [1, "Valkeakoski"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT LOCATION, COUNT(Shop_ID) FROM shop GROUP BY LOCATION", "match": {"match": false, "result": [["Espoo", 1], ["Helsinki", 1], ["Jakobstad", 1], ["Kotka", 1], ["Kuopio", 1], ["Lahti", 1], ["Mariehamn", 1], ["Turku", 1], ["Valkeakoski", 1]], "gt": [[1, "Espoo"], [1, "Helsinki"], [1, "Jakobstad"], [1, "Kotka"], [1, "Kuopio"], [1, "Lahti"], [1, "Mariehamn"], [1, "Turku"], [1, "Valkeakoski"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Manager_name, T2.District \nFROM shop AS T1 \nJOIN employee AS T2 \nON T1.Manager_name = T2.Name \nWHERE T1.Number_products = ( SELECT MAX(Number_products) FROM shop );", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Manager_name"}}
{"result": "SELECT T2.Manager_name, T2.District\nFROM shop AS T1\nINNER JOIN employee AS T2\nON T1.Manager_name = T2.Name\nWHERE T1.Number_products = ( SELECT MAX(Number_products) FROM shop );", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Manager_name"}}
{"result": "SELECT MIN(Number_products) AS min_number_products, MAX(Number_products) AS max_number_products\nFROM shop", "match": {"match": true, "result": [[1600, 15000]]}}
{"result": "SELECT MIN(Number_products) , MAX(Number_products) FROM shop", "match": {"match": true, "result": [[1600, 15000]]}}
{"result": "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC", "match": {"match": true, "result": [["FC Lahti", "Lahti", "Lahden Stadion"], ["HJK", "Helsinki", "Finnair Stadium"], ["FC Inter", "Turku", "Veritas Stadion"], ["FC Honka", "Espoo", "Tapiolan Urheilupuisto"], ["FF Jaro", "Jakobstad", "Jakobstads Centralplan"], ["FC KooTeePee", "Kotka", "Arto Tolsa Areena"], ["FC Haka", "Valkeakoski", "Tehtaan kentt\u00e4"], ["KuPS", "Kuopio", "Magnum Areena"], ["IFK Mariehamn", "Mariehamn", "Wikl\u00f6f Holding Arena"]]}}
{"result": "SELECT Name, Location, District \nFROM shop \nORDER BY Number_products DESC;", "match": {"match": true, "result": [["FC Lahti", "Lahti", "Lahden Stadion"], ["HJK", "Helsinki", "Finnair Stadium"], ["FC Inter", "Turku", "Veritas Stadion"], ["FC Honka", "Espoo", "Tapiolan Urheilupuisto"], ["FF Jaro", "Jakobstad", "Jakobstads Centralplan"], ["FC KooTeePee", "Kotka", "Arto Tolsa Areena"], ["FC Haka", "Valkeakoski", "Tehtaan kentt\u00e4"], ["KuPS", "Kuopio", "Magnum Areena"], ["IFK Mariehamn", "Mariehamn", "Wikl\u00f6f Holding Arena"]]}}
{"result": "SELECT Name \nFROM shop \nWHERE Number_products > ( SELECT AVG(Number_products) FROM shop );", "match": {"match": true, "result": [["HJK"], ["FC Inter"], ["FC Lahti"]]}}
{"result": "SELECT Name \nFROM shop \nWHERE Number_products > (\n  SELECT AVG(Number_products) \n  FROM shop\n);", "match": {"match": true, "result": [["HJK"], ["FC Inter"], ["FC Lahti"]]}}
{"result": "SELECT T2.Name \nFROM evaluation AS T1 \nJOIN employee AS T2 ON T1.Employee_ID = T2.Employee_ID \nGROUP BY T2.Name \nORDER BY COUNT(T2.Name) DESC \nLIMIT 1;", "match": {"match": true, "result": [["George Chuter"]]}}
{"result": "SELECT T1.Name \nFROM employee AS T1 \nJOIN evaluation AS T2 \nON T1.Employee_ID = T2.Employee_ID \nGROUP BY T1.Name \nORDER BY COUNT(T2.Employee_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [["George Chuter"]]}}
{"result": "SELECT T2.Name \nFROM evaluation AS T1 \nJOIN employee AS T2 \nON T1.Employee_ID = T2.Employee_ID \nWHERE T1.Bonus = ( SELECT MAX(Bonus) FROM evaluation WHERE Bonus = 1 )", "match": {"match": false, "result": [], "gt": [["Louis Deacon"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Name \nFROM evaluation AS T1 \nJOIN employee AS T2 ON T1.Employee_ID = T2.Employee_ID \nORDER BY T1.Bonus DESC \nLIMIT 1", "match": {"match": true, "result": [["Louis Deacon"]]}}
{"result": "SELECT Name \nFROM employee \nWHERE Employee_ID NOT IN ( SELECT Employee_ID FROM evaluation );", "match": {"match": true, "result": [["Mark Regan"], ["Tim Payne"], ["Andrew Sheridan"], ["Phil Vickery"], ["Steve Borthwick"]]}}
{"result": "SELECT Name \nFROM employee \nWHERE Employee_ID NOT IN (\n  SELECT Employee_ID \n  FROM evaluation\n);", "match": {"match": true, "result": [["Mark Regan"], ["Tim Payne"], ["Andrew Sheridan"], ["Phil Vickery"], ["Steve Borthwick"]]}}
{"result": "SELECT T4.Name \nFROM hiring AS T1 \nINNER JOIN shop AS T4 \nON T1.Shop_ID = T4.Shop_ID \nGROUP BY T4.Name \nORDER BY COUNT(T1.Employee_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [["FC Haka"]]}}
{"result": "SELECT T2.Name \nFROM hiring AS T1 \nINNER JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID \nGROUP BY T2.Shop_ID \nORDER BY COUNT(T1.Employee_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [["FC Haka"]]}}
{"result": "SELECT Name \nFROM shop \nWHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring);", "match": {"match": true, "result": [["FC Honka"], ["KuPS"], ["IFK Mariehamn"]]}}
{"result": "SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)", "match": {"match": true, "result": [["FC Honka"], ["KuPS"], ["IFK Mariehamn"]]}}
{"result": "SELECT T1.Name, COUNT(T2.Employee_ID) \nFROM shop AS T1 \nINNER JOIN hiring AS T2 \nON T1.Shop_ID = T2.Shop_ID \nGROUP BY T1.Shop_ID, T1.Name", "match": {"match": false, "result": [["FC Haka", 2], ["HJK", 1], ["FC Inter", 1], ["FF Jaro", 1], ["FC KooTeePee", 1], ["FC Lahti", 1]], "gt": [[2, "FC Haka"], [1, "FC Inter"], [1, "FC KooTeePee"], [1, "FC Lahti"], [1, "FF Jaro"], [1, "HJK"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Number_products, T2.Name \nFROM shop T1 \nJOIN hiring T3 ON T1.Shop_ID = T3.Shop_ID \nJOIN employee T2 ON T3.Employee_ID = T2.Employee_ID \nGROUP BY T1.Shop_ID, T2.Name", "match": {"match": false, "result": [[3516, "George Chuter"], [3516, "Lee Mears"], [10770, "Andrew Sheridan"], [10000, "Jason Hobson"], [5000, "Tim Payne"], [4780, "Matt Stevens"], [15000, "Mark Regan"]], "gt": [[2, "FC Haka"], [1, "FC Inter"], [1, "FC KooTeePee"], [1, "FC Lahti"], [1, "FF Jaro"], [1, "HJK"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT SUM(Bonus) FROM evaluation", "match": {"match": true, "result": [[19500.0]]}}
{"result": "SELECT SUM(Bonus) FROM evaluation", "match": {"match": true, "result": [[19500.0]]}}
{"result": "SELECT *\nFROM hiring", "match": {"match": true, "result": [[1, 1, "2009", "T"], [1, 2, "2003", "T"], [8, 3, "2011", "F"], [4, 4, "2012", "T"], [5, 5, "2013", "T"], [2, 6, "2010", "F"], [6, 7, "2008", "T"]]}}
{"result": "SELECT * FROM hiring", "match": {"match": true, "result": [[1, 1, "2009", "T"], [1, 2, "2003", "T"], [8, 3, "2011", "F"], [4, 4, "2012", "T"], [5, 5, "2013", "T"], [2, 6, "2010", "F"], [6, 7, "2008", "T"]]}}
{"result": "SELECT T1.District \nFROM shop AS T1 \nWHERE T1.Number_products < 3000 AND T1.District IN \n  (SELECT T1.District \n   FROM shop AS T1 \n   WHERE T1.Number_products > 10000);", "match": {"match": true, "result": []}}
{"result": "SELECT T1.District \nFROM shop AS T1 \nWHERE T1.Number_products < 3000 \nINTERSECT \nSELECT T1.District \nFROM shop AS T1 \nWHERE T1.Number_products > 10000", "match": {"match": true, "result": []}}
{"result": "SELECT COUNT(DISTINCT Location) FROM shop", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(DISTINCT Location) FROM shop", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(Document_ID) FROM Documents", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(Document_ID) FROM Documents", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT Document_ID, Document_Name, Document_Description FROM Documents;", "match": {"match": true, "result": [[0, "Introduction of OS", "n"], [1, "Understanding DB", "y"], [3, "Summer Show", "u"], [76, "Robbin CV", "y"], [80, "Welcome to NY", "h"], [82, "Data base", "w"], [2394, "Customer reviews", "y"], [3830, "Do not panic", "k"], [33930, "How Google people work", "z"], [50123, "Learning French", "r"], [651512, "How to write a CV", "f"], [801801, "How to read a book", "w"], [3540024, "Palm reading", "y"], [16514113, "A history of Arts", "h"], [385906526, "About Korea", "b"]]}}
{"result": "SELECT Document_ID, Document_Name, Document_Description FROM Documents", "match": {"match": true, "result": [[0, "Introduction of OS", "n"], [1, "Understanding DB", "y"], [3, "Summer Show", "u"], [76, "Robbin CV", "y"], [80, "Welcome to NY", "h"], [82, "Data base", "w"], [2394, "Customer reviews", "y"], [3830, "Do not panic", "k"], [33930, "How Google people work", "z"], [50123, "Learning French", "r"], [651512, "How to write a CV", "f"], [801801, "How to read a book", "w"], [3540024, "Palm reading", "y"], [16514113, "A history of Arts", "h"], [385906526, "About Korea", "b"]]}}
{"result": "SELECT Document_Name, Template_ID\nFROM Documents\nWHERE Document_Description LIKE '%w%';", "match": {"match": true, "result": [["Data base", 11], ["How to read a book", 4]]}}
{"result": "SELECT Document_Name, Template_ID \nFROM Documents \nWHERE Document_Description LIKE '%w%'", "match": {"match": true, "result": [["Data base", 11], ["How to read a book", 4]]}}
{"result": "SELECT Document_ID, Template_ID, Document_Description \nFROM Documents \nWHERE Document_Name = 'Robbin CV';", "match": {"match": true, "result": [[76, 20, "y"]]}}
{"result": "SELECT \n    D.Document_ID, \n    T.Template_ID, \n    D.Document_Description \nFROM \n    Documents D \nINNER JOIN \n    Templates T ON D.Template_ID = T.Template_ID \nWHERE \n    D.Document_Name = 'Robbin CV';", "match": {"match": true, "result": [[76, 20, "y"]]}}
{"result": "SELECT COUNT(DISTINCT T.Template_ID) \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT COUNT(Template_Type_Code) \nFROM Templates \nGROUP BY Template_Type_Code", "match": {"match": false, "result": [[3], [6], [2], [6], [3]], "gt": [[12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT Document_ID) \nFROM Documents \nWHERE Template_ID IN (\n  SELECT Template_ID \n  FROM Templates \n  WHERE Template_Type_Code = 'PPT'\n);", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(DISTINCT T1.Document_ID) \nFROM Templates T1 INNER JOIN Documents T2 ON T1.Template_ID = T2.Template_ID\nINNER JOIN Ref_Template_Types T3 ON T1.Template_Type_Code = T3.Template_Type_Code\nWHERE T3.Template_Type_Code = 'PPT'", "match": {"match": false, "error": "Query execution failed with error: no such column: T1.Document_ID"}}
{"result": "SELECT T.Template_ID, COUNT(D.Document_ID) \nFROM Templates T\nJOIN Documents D ON T.Template_ID = D.Template_ID\nGROUP BY T.Template_ID", "match": {"match": true, "result": [[1, 1], [4, 1], [6, 1], [7, 1], [8, 1], [10, 1], [11, 2], [14, 2], [20, 1], [21, 1], [22, 1], [25, 2]]}}
{"result": "SELECT Template_ID, COUNT(*) \nFROM Documents \nGROUP BY Template_ID;", "match": {"match": true, "result": [[1, 1], [4, 1], [6, 1], [7, 1], [8, 1], [10, 1], [11, 2], [14, 2], [20, 1], [21, 1], [22, 1], [25, 2]]}}
{"result": "SELECT T.Template_ID, T.Template_Type_Code\nFROM Templates T\nJOIN Documents D ON T.Template_ID = D.Template_ID\nGROUP BY T.Template_ID, T.Template_Type_Code\nORDER BY COUNT(D.Document_ID) DESC\nLIMIT 1", "match": {"match": false, "result": [[11, "BK"]], "gt": [[25, "PP"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n  T.Template_ID, \n  T.Template_Type_Code\nFROM \n  Templates T\nWHERE \n  T.Template_ID = (\n  SELECT \n    D.Template_ID\n  FROM \n    Documents D\n  GROUP BY \n    D.Template_ID\n  ORDER BY \n    COUNT(D.Document_ID) DESC\n  LIMIT 1\n);", "match": {"match": true, "result": [[25, "PP"]]}}
{"result": "SELECT DISTINCT T.Template_ID \nFROM Templates T\nJOIN Documents D ON T.Template_ID = D.Template_ID\nGROUP BY T.Template_ID\nHAVING COUNT(D.Document_ID) > 1", "match": {"match": true, "result": [[11], [14], [25]]}}
{"result": "SELECT T.Template_ID \nFROM Documents D \nGROUP BY T.Template_ID \nHAVING COUNT(D.Template_ID) > 1;", "match": {"match": false, "error": "Query execution failed with error: no such column: T.Template_ID"}}
{"result": "SELECT T.Template_ID\nFROM Templates T\nLEFT JOIN Documents D ON T.Template_ID = D.Template_ID\nWHERE D.Template_ID IS NULL", "match": {"match": true, "result": [[0], [9], [15], [16], [18], [19], [23], [24]]}}
{"result": "SELECT T.Template_ID \nFROM Templates T \nLEFT JOIN Documents D ON T.Template_ID = D.Template_ID \nWHERE D.Template_ID IS NULL", "match": {"match": true, "result": [[0], [9], [15], [16], [18], [19], [23], [24]]}}
{"result": "SELECT COUNT(Template_ID) FROM Templates", "match": {"match": true, "result": [[20]]}}
{"result": "SELECT COUNT(Template_ID) \nFROM Templates;", "match": {"match": true, "result": [[20]]}}
{"result": "SELECT Template_ID, Version_Number, Template_Type_Code \nFROM Templates;", "match": {"match": true, "result": [[0, 5, "PP"], [1, 9, "PP"], [4, 4, "BK"], [6, 2, "PPT"], [7, 8, "PPT"], [8, 3, "BK"], [9, 2, "BK"], [10, 1, "PPT"], [11, 6, "BK"], [14, 7, "AD"], [15, 9, "CV"], [16, 5, "CV"], [18, 5, "PP"], [19, 7, "AD"], [20, 6, "BK"], [21, 9, "AD"], [22, 0, "PP"], [23, 2, "BK"], [24, 8, "PP"], [25, 5, "PP"]]}}
{"result": "SELECT Template_ID, Version_Number, Template_Type_Code \nFROM Templates", "match": {"match": true, "result": [[0, 5, "PP"], [1, 9, "PP"], [4, 4, "BK"], [6, 2, "PPT"], [7, 8, "PPT"], [8, 3, "BK"], [9, 2, "BK"], [10, 1, "PPT"], [11, 6, "BK"], [14, 7, "AD"], [15, 9, "CV"], [16, 5, "CV"], [18, 5, "PP"], [19, 7, "AD"], [20, 6, "BK"], [21, 9, "AD"], [22, 0, "PP"], [23, 2, "BK"], [24, 8, "PP"], [25, 5, "PP"]]}}
{"result": "SELECT DISTINCT Template_Type_Code FROM Templates", "match": {"match": true, "result": [["PP"], ["BK"], ["PPT"], ["AD"], ["CV"]]}}
{"result": "SELECT Template_Type_Code \nFROM Ref_Template_Types;", "match": {"match": false, "result": [["AD"], ["BK"], ["CV"], ["PP"], ["PPT"]], "gt": [["PP"], ["BK"], ["PPT"], ["AD"], ["CV"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Template_ID \nFROM Templates AS T1\nJOIN Ref_Template_Types AS T2 ON T2.Template_Type_Code = T1.Template_Type_Code\nWHERE T2.Template_Type_Code IN ('PP', 'PPT');", "match": {"match": false, "result": [[0], [1], [18], [22], [24], [25], [6], [7], [10]], "gt": [[0], [1], [6], [7], [10], [18], [22], [24], [25]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Template_ID \nFROM Templates \nWHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT';", "match": {"match": true, "result": [[0], [1], [6], [7], [10], [18], [22], [24], [25]]}}
{"result": "SELECT COUNT(*) \nFROM Templates \nWHERE Template_Type_Code = 'CV';", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(Template_ID) \nFROM Templates \nWHERE Template_Type_Code = (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'CV');", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT Version_Number, Template_Type_Code \nFROM Templates \nWHERE Version_Number > 5;", "match": {"match": true, "result": [[9, "PP"], [8, "PPT"], [6, "BK"], [7, "AD"], [9, "CV"], [7, "AD"], [6, "BK"], [9, "AD"], [8, "PP"]]}}
{"result": "SELECT Version_Number, Template_Type_Code \nFROM Templates \nWHERE Version_Number > 5;", "match": {"match": true, "result": [[9, "PP"], [8, "PPT"], [6, "BK"], [7, "AD"], [9, "CV"], [7, "AD"], [6, "BK"], [9, "AD"], [8, "PP"]]}}
{"result": "```sql\nSELECT \n  t.Template_Type_Code, \n  COUNT(t.Template_ID) AS Num_Templates\nFROM \n  Templates t\nGROUP BY \n  t.Template_Type_Code;\n```", "match": {"match": true, "result": [["AD", 3], ["BK", 6], ["CV", 2], ["PP", 6], ["PPT", 3]]}}
{"result": "SELECT \n    Template_Type_Code, \n    COUNT(Template_ID) AS Template_Count\nFROM \n    Templates\nGROUP BY \n    Template_Type_Code;", "match": {"match": true, "result": [["AD", 3], ["BK", 6], ["CV", 2], ["PP", 6], ["PPT", 3]]}}
{"result": "SELECT Template_Type_Code \nFROM Templates \nGROUP BY Template_Type_Code \nORDER BY COUNT(Template_ID) DESC \nLIMIT 1;", "match": {"match": true, "result": [["PP"]]}}
{"result": "SELECT T1.Template_Type_Code\nFROM Ref_Template_Types AS T1\nJOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code\nGROUP BY T1.Template_Type_Code\nORDER BY COUNT(T1.Template_Type_Code) DESC\nLIMIT 1", "match": {"match": true, "result": [["PP"]]}}
{"result": "SELECT DISTINCT tt.Template_Type_Code\nFROM Templates t\nJOIN Ref_Template_Types tt ON t.Template_Type_Code = tt.Template_Type_Code\nGROUP BY tt.Template_Type_Code\nHAVING COUNT(t.Template_ID) < 3", "match": {"match": true, "result": [["CV"]]}}
{"result": "SELECT Template_Type_Code \nFROM Templates \nGROUP BY Template_Type_Code \nHAVING COUNT(Template_ID) < 3", "match": {"match": true, "result": [["CV"]]}}
{"result": "SELECT MIN(Version_Number), Template_Type_Code \nFROM Templates;", "match": {"match": true, "result": [[0, "PP"]]}}
{"result": "SELECT MIN(T1.Version_Number), T1.Template_Type_Code \nFROM Templates T1 \nJOIN Ref_Template_Types T2 ON T1.Template_Type_Code = T2.Template_Type_Code", "match": {"match": true, "result": [[0, "PP"]]}}
{"result": "SELECT T.Template_Type_Code \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID \nWHERE D.Document_Name = 'Data base'", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT T3.Template_Type_Code\nFROM Documents T1\nJOIN Templates T2 ON T1.Template_ID = T2.Template_ID\nJOIN Ref_Template_Types T3 ON T2.Template_Type_Code = T3.Template_Type_Code\nWHERE T1.Document_Name = 'Data base'", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT T2.Document_Name\nFROM Templates AS T1\nJOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID\nJOIN Ref_Template_Types AS T3 ON T1.Template_Type_Code = T3.Template_Type_Code\nWHERE T3.Template_Type_Code = 'BK';", "match": {"match": true, "result": [["Robbin CV"], ["Data base"], ["How to read a book"], ["Palm reading"], ["About Korea"]]}}
{"result": "SELECT DISTINCT T2.Document_Name \nFROM Templates AS T1 \nINNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID \nWHERE T1.Template_Type_Code = 'BK';", "match": {"match": true, "result": [["Robbin CV"], ["Data base"], ["How to read a book"], ["Palm reading"], ["About Korea"]]}}
{"result": "SELECT T.Template_Type_Code, COUNT(D.Document_ID) \nFROM Ref_Template_Types T \nJOIN Templates M ON T.Template_Type_Code = M.Template_Type_Code \nJOIN Documents D ON M.Template_ID = D.Template_ID \nGROUP BY T.Template_Type_Code", "match": {"match": true, "result": [["AD", 3], ["BK", 5], ["PP", 4], ["PPT", 3]]}}
{"result": "```sql\nSELECT \n  rt.Template_Type_Code,\n  COUNT(DISTINCT d.Document_ID) AS Document_Count\nFROM \n  Ref_Template_Types rt\n  LEFT JOIN Templates t ON rt.Template_Type_Code = t.Template_Type_Code\n  LEFT JOIN Documents d ON t.Template_ID = d.Template_ID\nGROUP BY \n  rt.Template_Type_Code;\n```", "match": {"match": false, "result": [["AD", 3], ["BK", 5], ["CV", 0], ["PP", 4], ["PPT", 3]], "gt": [["AD", 3], ["BK", 5], ["PP", 4], ["PPT", 3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Template_Type_Code FROM Templates AS T1\nJOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID\nGROUP BY T1.Template_Type_Code\nORDER BY COUNT(T2.Document_ID) DESC LIMIT 1", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT T1.Template_Type_Code \nFROM Ref_Template_Types AS T1 \nJOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code \nJOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID \nGROUP BY T1.Template_Type_Code \nORDER BY COUNT(T3.Document_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT Template_Type_Code \nFROM Ref_Template_Types \nWHERE Template_Type_Code NOT IN (\n  SELECT DISTINCT Template_Type_Code \n  FROM Templates \n  WHERE Template_ID IN (\n    SELECT Template_ID \n    FROM Documents \n  )\n);", "match": {"match": true, "result": [["CV"]]}}
{"result": "SELECT Template_Type_Code \nFROM Ref_Template_Types \nWHERE Template_Type_Code NOT IN (\n  SELECT Template_Type_Code \n  FROM Templates \n  GROUP BY Template_Type_Code \n  HAVING COUNT(Document_ID) > 0\n)", "match": {"match": false, "error": "Query execution failed with error: no such column: Document_ID"}}
{"result": "SELECT Template_Type_Code, Template_Type_Description\nFROM Ref_Template_Types;", "match": {"match": true, "result": [["PPT", "Presentation"], ["CV", "CV"], ["AD", "Advertisement"], ["PP", "Paper"], ["BK", "Book"]]}}
{"result": "SELECT Template_Type_Code, Template_Type_Description \nFROM Ref_Template_Types", "match": {"match": true, "result": [["PPT", "Presentation"], ["CV", "CV"], ["AD", "Advertisement"], ["PP", "Paper"], ["BK", "Book"]]}}
{"result": "SELECT Template_Type_Description \nFROM Ref_Template_Types \nWHERE Template_Type_Code = 'AD';", "match": {"match": true, "result": [["Advertisement"]]}}
{"result": "SELECT T1.Template_Type_Description \nFROM Ref_Template_Types T1 \nWHERE T1.Template_Type_Code = 'AD'", "match": {"match": true, "result": [["Advertisement"]]}}
{"result": "SELECT Template_Type_Code\nFROM Ref_Template_Types\nWHERE Template_Type_Description = 'Book';", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT DISTINCT T1.Template_Type_Description \nFROM Ref_Template_Types T1\nJOIN Templates T2 ON T1.Template_Type_Code = T2.Template_Type_Code\nJOIN Documents T3 ON T2.Template_ID = T3.Template_ID", "match": {"match": true, "result": [["Presentation"], ["Paper"], ["Book"], ["Advertisement"]]}}
{"result": "SELECT DISTINCT T.Template_Type_Description \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID", "match": {"match": false, "error": "Query execution failed with error: no such column: T.Template_Type_Description"}}
{"result": "SELECT T.Template_ID \nFROM Templates T \nJOIN Ref_Template_Types R ON T.Template_Type_Code = R.Template_Type_Code \nWHERE R.Template_Type_Description = 'Presentation';", "match": {"match": true, "result": [[6], [7], [10]]}}
{"result": "SELECT T.Template_ID \nFROM Templates T \nJOIN Ref_Template_Types RTT ON T.Template_Type_Code = RTT.Template_Type_Code \nWHERE RTT.Template_Type_Description = 'Presentation'", "match": {"match": true, "result": [[6], [7], [10]]}}
{"result": "SELECT COUNT(Paragraph_ID) AS Total_Paragraphs\nFROM Paragraphs", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(Paragraph_ID) \nFROM Paragraphs;", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) \nFROM Paragraphs \nWHERE Document_ID IN (\n  SELECT Document_ID \n  FROM Documents \n  WHERE Document_Name = 'Summer Show'\n);", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(T1.Paragraph_ID) \nFROM Paragraphs T1 \nJOIN Documents T2 ON T1.Document_ID = T2.Document_ID \nWHERE T2.Document_Name = 'Summer Show';", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT * \nFROM Paragraphs \nWHERE Paragraph_Text = 'Korea ';", "match": {"match": false, "result": [], "gt": [[null], [null]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Paragraph_Text \nFROM Paragraphs AS T1\nJOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID\nWHERE T1.Paragraph_Text LIKE '%Korea%';", "match": {"match": false, "result": [["Korea"], ["Korea"]], "gt": [[null], [null]], "error": "Query result does not match ground truth."}}
{"result": "SELECT P.Paragraph_ID, P.Paragraph_Text \nFROM Paragraphs P \nINNER JOIN Documents D ON P.Document_ID = D.Document_ID \nWHERE D.Document_Name = 'Welcome to NY';", "match": {"match": true, "result": [[16615, "Japan"], [608931827, "Micronesia"]]}}
{"result": "SELECT T1.Paragraph_ID, T1.Paragraph_Text\nFROM Paragraphs AS T1\nJOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID\nWHERE T2.Document_Name = 'Welcome to NY';", "match": {"match": true, "result": [[16615, "Japan"], [608931827, "Micronesia"]]}}
{"result": "SELECT T1.Paragraph_Text \nFROM Paragraphs AS T1 \nJOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID \nWHERE T2.Document_Name = 'Customer reviews'", "match": {"match": true, "result": [["Korea"], ["Ukraine"], ["Korea"]]}}
{"result": "SELECT P.Paragraph_Text \nFROM Paragraphs P \nJOIN Documents D ON P.Document_ID = D.Document_ID \nWHERE D.Document_Name = 'Customer reviews';", "match": {"match": true, "result": [["Korea"], ["Ukraine"], ["Korea"]]}}
{"result": "SELECT Document_ID, COUNT(*) \nFROM Paragraphs \nGROUP BY Document_ID \nORDER BY Document_ID", "match": {"match": true, "result": [[3, 1], [80, 2], [2394, 3], [3830, 1], [33930, 1], [50123, 1], [651512, 2], [3540024, 1], [16514113, 2], [385906526, 1]]}}
{"result": "SELECT Document_ID, COUNT(*) AS Num_Paragraphs\nFROM Paragraphs\nGROUP BY Document_ID\nORDER BY Document_ID", "match": {"match": true, "result": [[3, 1], [80, 2], [2394, 3], [3830, 1], [33930, 1], [50123, 1], [651512, 2], [3540024, 1], [16514113, 2], [385906526, 1]]}}
{"result": "SELECT \n    D.Document_ID, \n    D.Document_Name, \n    COUNT(P.Paragraph_ID) AS Number_of_Paragraphs\nFROM \n    Documents D\nJOIN \n    Paragraphs P ON D.Document_ID = P.Document_ID\nGROUP BY \n    D.Document_ID, \n    D.Document_Name", "match": {"match": true, "result": [[3, "Summer Show", 1], [80, "Welcome to NY", 2], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]]}}
{"result": "SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) \nFROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID \nGROUP BY d.Document_ID, d.Document_Name", "match": {"match": false, "result": [[0, "Introduction of OS", 0], [1, "Understanding DB", 0], [3, "Summer Show", 1], [76, "Robbin CV", 0], [80, "Welcome to NY", 2], [82, "Data base", 0], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [801801, "How to read a book", 0], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "gt": [[3, "Summer Show", 1], [80, "Welcome to NY", 2], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Document_ID\nFROM Paragraphs\nGROUP BY Document_ID\nHAVING COUNT(Document_ID)  >= 2", "match": {"match": true, "result": [[80], [2394], [651512], [16514113]]}}
{"result": "SELECT T1.Document_ID \nFROM Documents AS T1 \nJOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID \nGROUP BY T1.Document_ID \nHAVING COUNT(T2.Paragraph_ID) >= 2", "match": {"match": true, "result": [[80], [2394], [651512], [16514113]]}}
{"result": "SELECT Document_ID, Document_Name\nFROM Documents\nORDER BY (\n  SELECT COUNT(*)\n  FROM Paragraphs\n  WHERE Paragraphs.Document_ID = Documents.Document_ID\n) DESC", "match": {"match": false, "result": [[2394, "Customer reviews"], [80, "Welcome to NY"], [651512, "How to write a CV"], [16514113, "A history of Arts"], [3, "Summer Show"], [3830, "Do not panic"], [33930, "How Google people work"], [50123, "Learning French"], [3540024, "Palm reading"], [385906526, "About Korea"], [0, "Introduction of OS"], [1, "Understanding DB"], [76, "Robbin CV"], [82, "Data base"], [801801, "How to read a book"]], "gt": [[2394, "Customer reviews"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    D.Document_ID, \n    D.Document_Name\nFROM \n    Documents D\nJOIN \n    Paragraphs P ON D.Document_ID = P.Document_ID\nGROUP BY \n    D.Document_ID, D.Document_Name\nORDER BY \n    COUNT(P.Paragraph_ID) DESC\nLIMIT 1", "match": {"match": true, "result": [[2394, "Customer reviews"]]}}
{"result": "SELECT Document_ID\nFROM Paragraphs\nGROUP BY Document_ID\nORDER BY COUNT(Document_ID) ASC\nLIMIT 1;", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Document_ID \nFROM Paragraphs \nGROUP BY Document_ID \nORDER BY COUNT(Document_ID) ASC \nLIMIT 1;", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Document_ID \nFROM Paragraphs \nGROUP BY Document_ID \nHAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2", "match": {"match": true, "result": [[3], [80], [3830], [33930], [50123], [651512], [3540024], [16514113], [385906526]]}}
{"result": "SELECT Document_ID\nFROM Paragraphs\nGROUP BY Document_ID\nHAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2", "match": {"match": true, "result": [[3], [80], [3830], [33930], [50123], [651512], [3540024], [16514113], [385906526]]}}
{"result": "SELECT Document_ID \nFROM Paragraphs \nWHERE Paragraph_Text IN ('Brazil', 'Ireland');", "match": {"match": false, "result": [[16514113], [16514113]], "gt": [[16514113]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Document_ID\nFROM Paragraphs AS T1\nJOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID\nWHERE T1.Paragraph_Text IN ('Brazil', 'Ireland')", "match": {"match": false, "result": [[16514113], [16514113]], "gt": [[16514113]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(Teacher_ID) FROM teacher", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT COUNT(Teacher_ID) FROM teacher", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT Name \nFROM teacher \nORDER BY Age ASC", "match": {"match": true, "result": [["Vicente Carretero"], ["Gustaaf Deloor"], ["Joseph Huts"], ["John Deloor"], ["Lucy Wong"], ["Anne Walker"], ["Kearsley Brown"]]}}
{"result": "SELECT Name FROM teacher ORDER BY Age ASC", "match": {"match": true, "result": [["Vicente Carretero"], ["Gustaaf Deloor"], ["Joseph Huts"], ["John Deloor"], ["Lucy Wong"], ["Anne Walker"], ["Kearsley Brown"]]}}
{"result": "SELECT Age, Hometown FROM teacher", "match": {"match": true, "result": [["32", "Blackrod Urban District"], ["29", "Bolton County Borough"], ["26", "Farnworth Municipal Borough"], ["33", "Horwich Urban District"], ["45", "Kearsley Urban District"], ["41", "Little Lever Urban District"], ["39", "Turton Urban District"]]}}
{"result": "SELECT Age, Hometown FROM teacher", "match": {"match": true, "result": [["32", "Blackrod Urban District"], ["29", "Bolton County Borough"], ["26", "Farnworth Municipal Borough"], ["33", "Horwich Urban District"], ["45", "Kearsley Urban District"], ["41", "Little Lever Urban District"], ["39", "Turton Urban District"]]}}
{"result": "SELECT Name \nFROM teacher \nWHERE Hometown != 'Little Lever Urban District';", "match": {"match": false, "result": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Lucy Wong"]], "gt": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Anne Walker"], ["Lucy Wong"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'", "match": {"match": false, "result": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Lucy Wong"]], "gt": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Anne Walker"], ["Lucy Wong"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name \nFROM teacher \nWHERE Age = '32' OR Age = '33';", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT Name FROM teacher WHERE Age = '32' OR Age = '33'", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT Hometown FROM teacher WHERE Age = ( SELECT MIN(Age) FROM teacher );", "match": {"match": true, "result": [["Farnworth Municipal Borough"]]}}
{"result": "SELECT Hometown FROM teacher WHERE Age = ( SELECT MIN(Age) FROM teacher );", "match": {"match": true, "result": [["Farnworth Municipal Borough"]]}}
{"result": "SELECT Hometown, COUNT(Teacher_ID) FROM teacher GROUP BY Hometown", "match": {"match": true, "result": [["Blackrod Urban District", 1], ["Bolton County Borough", 1], ["Farnworth Municipal Borough", 1], ["Horwich Urban District", 1], ["Kearsley Urban District", 1], ["Little Lever Urban District", 1], ["Turton Urban District", 1]]}}
{"result": "SELECT COUNT(Teacher_ID) \nFROM teacher \nGROUP BY Hometown", "match": {"match": false, "result": [[1], [1], [1], [1], [1], [1], [1]], "gt": [["Blackrod Urban District", 1], ["Bolton County Borough", 1], ["Farnworth Municipal Borough", 1], ["Horwich Urban District", 1], ["Kearsley Urban District", 1], ["Little Lever Urban District", 1], ["Turton Urban District", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(Hometown) DESC LIMIT 1", "match": {"match": true, "result": [["Turton Urban District"]]}}
{"result": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(Hometown) DESC LIMIT 1", "match": {"match": true, "result": [["Turton Urban District"]]}}
{"result": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) >= 2", "match": {"match": true, "result": []}}
{"result": "SELECT Hometown \nFROM teacher \nGROUP BY Hometown \nHAVING COUNT(Teacher_ID) >= 2;", "match": {"match": true, "result": []}}
{"result": "SELECT T1.Name, T2.Course \nFROM teacher AS T1 \nJOIN course_arrange AS T3 ON T1.Teacher_ID = T3.Teacher_ID \nJOIN course AS T2 ON T3.Course_ID = T2.Course_ID", "match": {"match": true, "result": [["Kearsley Brown", "Math"], ["Vicente Carretero", "Math"], ["Gustaaf Deloor", "Science"], ["Anne Walker", "History"], ["Anne Walker", "Bible"], ["Lucy Wong", "Music"]]}}
{"result": "SELECT T2.Name, T1.Course \nFROM course_arrange AS T1 \nJOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID", "match": {"match": false, "error": "Query execution failed with error: no such column: T1.Course"}}
{"result": "SELECT t.`Name`, c.`Course` \nFROM `teacher` t \nJOIN course_arrange ca ON t.`Teacher_ID` = ca.`Teacher_ID` \nJOIN `course` c ON ca.`Course_ID` = c.`Course_ID` \nORDER BY t.`Name` ASC;", "match": {"match": true, "result": [["Anne Walker", "History"], ["Anne Walker", "Bible"], ["Gustaaf Deloor", "Science"], ["Kearsley Brown", "Math"], ["Lucy Wong", "Music"], ["Vicente Carretero", "Math"]]}}
{"result": "SELECT T1.Name, T2.Course \nFROM teacher AS T1 \nJOIN course_arrange AS T3 \nON T1.Teacher_ID = T3.Teacher_ID \nJOIN course AS T2 \nON T3.Course_ID = T2.Course_ID \nORDER BY T1.Name ASC", "match": {"match": true, "result": [["Anne Walker", "History"], ["Anne Walker", "Bible"], ["Gustaaf Deloor", "Science"], ["Kearsley Brown", "Math"], ["Lucy Wong", "Music"], ["Vicente Carretero", "Math"]]}}
{"result": "SELECT t.Name \nFROM course c \nJOIN course_arrange ca ON c.Course_ID = ca.Course_ID \nJOIN teacher t ON ca.Teacher_ID = t.Teacher_ID \nWHERE c.Course = 'math'", "match": {"match": false, "result": [], "gt": [["Kearsley Brown"], ["Vicente Carretero"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Name \nFROM course_arrange AS T1 \nJOIN course AS T2 \nON T1.Course_ID = T2.Course_ID \nJOIN teacher AS T3 \nON T1.Teacher_ID = T3.Teacher_ID \nWHERE T2.Course = 'Math'", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Name"}}
{"result": "SELECT T1.Name, COUNT(T2.Course_ID) AS NumberOfCourses \nFROM teacher AS T1 \nJOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T1.Name", "match": {"match": true, "result": [["Anne Walker", 2], ["Gustaaf Deloor", 1], ["Kearsley Brown", 1], ["Lucy Wong", 1], ["Vicente Carretero", 1]]}}
{"result": "SELECT T1.Name, COUNT(T2.Course_ID) FROM teacher AS T1 \nJOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T1.Name", "match": {"match": true, "result": [["Anne Walker", 2], ["Gustaaf Deloor", 1], ["Kearsley Brown", 1], ["Lucy Wong", 1], ["Vicente Carretero", 1]]}}
{"result": "SELECT T1.Name \nFROM teacher AS T1 \nJOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T1.Teacher_ID \nHAVING COUNT(T2.Course_ID) >= 2", "match": {"match": true, "result": [["Anne Walker"]]}}
{"result": "SELECT T1.Name \nFROM teacher AS T1 \nJOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T1.Name \nHAVING COUNT(T2.Course_ID) >= 2", "match": {"match": true, "result": [["Anne Walker"]]}}
{"result": "SELECT Name \nFROM teacher \nWHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT T2.Name \nFROM course_arrange AS T1 \nRIGHT JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nWHERE T1.Course_ID IS NULL", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT COUNT(ID) \nFROM visitor \nWHERE Age < 30;", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Name \nFROM visitor \nWHERE Level_of_membership > 4 \nORDER BY Level_of_membership DESC;", "match": {"match": true, "result": [["Gonzalo Higua\u00edn "], ["Fernando Gago"], ["Guti Midfielder"]]}}
{"result": "SELECT CAST(SUM(CASE WHEN Level_of_membership <= 4 THEN Age ELSE 0 END) AS REAL) / \n       COUNT(CASE WHEN Level_of_membership <= 4 THEN ID ELSE NULL END) \nFROM visitor", "match": {"match": true, "result": [[36.0]]}}
{"result": "SELECT Name, Level_of_membership \nFROM visitor \nWHERE Level_of_membership > 4 \nORDER BY Age DESC", "match": {"match": true, "result": [["Fernando Gago", 6], ["Gonzalo Higua\u00edn ", 8], ["Guti Midfielder", 5]]}}
{"result": "SELECT Museum_ID, Name \nFROM museum \nORDER BY Num_of_Staff DESC \nLIMIT 1;", "match": {"match": true, "result": [[1, "Plaza Museum"]]}}
{"result": "SELECT AVG(\"Num_of_Staff\") \nFROM \"museum\" \nWHERE \"Open_Year\" < '2009';", "match": {"match": true, "result": [[31.333333333333332]]}}
{"result": "SELECT Open_Year, Num_of_Staff \nFROM museum \nWHERE Name = 'Plaza Museum';", "match": {"match": false, "result": [["2000", 62]], "gt": [[62, "2000"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name \nFROM museum \nWHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) \n                     FROM museum \n                     WHERE Open_Year > '2010');", "match": {"match": true, "result": [["Plaza Museum"], ["Capital Plaza Museum"], ["Jefferson Development Museum"]]}}
{"result": "SELECT T1.ID, T1.Name, T1.Age\nFROM visitor AS T1\nJOIN visit AS T2 ON T1.ID = T2.visitor_ID\nGROUP BY T1.ID\nHAVING COUNT(DISTINCT T2.Museum_ID) > 1;", "match": {"match": true, "result": [[3, "Arjen Robben", 27], [5, "Fernando Gago", 36], [6, "Rafael van der Vaart", 25]]}}
{"result": "SELECT T1.ID, T1.Name, T1.Level_of_membership \nFROM visitor AS T1 \nJOIN visit AS T2 ON T1.ID = T2.visitor_ID \nGROUP BY T1.ID \nORDER BY SUM(T2.Total_spent) DESC \nLIMIT 1", "match": {"match": false, "result": [[3, "Arjen Robben", 1]], "gt": [["3", "Arjen Robben", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Museum_ID, T1.Name \nFROM visit AS T1 \nJOIN museum AS T2 ON T1.Museum_ID = T2.Museum_ID \nGROUP BY T2.Museum_ID \nORDER BY COUNT(T2.Museum_ID) DESC \nLIMIT 1", "match": {"match": false, "error": "Query execution failed with error: no such column: T1.Name"}}
{"result": "SELECT Name \nFROM museum \nWHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit);", "match": {"match": true, "result": [["Jefferson Development Museum"], ["RiverPark Museum"], ["Place Tower Museum"], ["Central City District Residential Museum"]]}}
{"result": "SELECT t2.Name, t2.Age \nFROM visit AS t1 \nINNER JOIN visitor AS t2 ON t1.visitor_ID = t2.ID \nINNER JOIN museum AS t3 ON t1.Museum_ID = t3.Museum_ID \nWHERE t1.Num_of_Ticket = ( SELECT MAX(Num_of_Ticket) FROM visit );", "match": {"match": true, "result": [["Arjen Robben", 27]]}}
{"result": "SELECT AVG(Num_of_Ticket) AS Average_Tickets, MAX(Num_of_Ticket) AS Max_Tickets FROM `visit`", "match": {"match": true, "result": [[10.5, 24]]}}
{"result": "SELECT SUM(T1.Total_spent) FROM visit AS T1 INNER JOIN visitor AS T2 ON T2.ID = T1.visitor_ID WHERE T2.Level_of_membership = 1", "match": {"match": true, "result": [[570.84]]}}
{"result": "SELECT T.visitor_name \nFROM \n(\n    SELECT V.Name AS visitor_name \n    FROM visit V \n    JOIN museum M ON V.Museum_ID = M.Museum_ID \n    WHERE M.Open_Year < '2009'\n    INTERSECT \n    SELECT V.Name AS visitor_name \n    FROM visit V \n    JOIN museum M ON V.Museum_ID = M.Museum_ID \n    WHERE M.Open_Year > '2011'\n) AS T", "match": {"match": false, "error": "Query execution failed with error: no such column: V.Name"}}
{"result": "SELECT COUNT(visitor_ID) \nFROM visit \nWHERE Museum_ID NOT IN ( \n  SELECT Museum_ID \n  FROM museum \n  WHERE Open_Year > '2010' \n);", "match": {"match": false, "result": [[2]], "gt": [[3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(Museum_ID) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(*) \nFROM ship \nWHERE disposition_of_ship = 'Captured';", "match": {"match": true, "result": [[4]]}}
{"result": "SELECT name, tonnage \nFROM ship \nORDER BY name DESC;", "match": {"match": true, "result": [["Three Brothers", "t"], ["Mary", "t"], ["Lettice", "t"], ["HMS Avon", "391"], ["HMS Atalanta", "225"], ["Bon Accord", "t"], ["Bacchus", "t"]]}}
{"result": "SELECT name, date, result FROM battle", "match": {"match": false, "result": [["Battle of Adrianople", "14 April 1205", "Bulgarian victory"], ["Battle of Serres", "June 1205", "Bulgarian victory"], ["Battle of Rusion", "31 January 1206", "Bulgarian victory"], ["Battle of Rodosto", "February 1206", "Bulgarian victory"], ["Battle of Messinopolis", "4 September 1207", "Bulgarian victory"], ["Battle of Boruy", "June 1205", "Bulgarian victory"], ["Battle of Philippopolis", "31 June 1208", "Latin victory"], ["Siege of Constantinople", "1235", "Two Year Truce"]], "gt": [["Battle of Adrianople", "14 April 1205"], ["Battle of Serres", "June 1205"], ["Battle of Rusion", "31 January 1206"], ["Battle of Rodosto", "February 1206"], ["Battle of Messinopolis", "4 September 1207"], ["Battle of Boruy", "June 1205"], ["Battle of Philippopolis", "31 June 1208"], ["Siege of Constantinople", "1235"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(killed) AS max_deaths, MIN(killed) AS min_deaths FROM death", "match": {"match": true, "result": [[29, 0]]}}
{"result": "SELECT AVG(injured) FROM death", "match": {"match": true, "result": [[1.0769230769230769]]}}
{"result": "SELECT killed, injured FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE tonnage = 't')", "match": {"match": true, "result": [[8, 0], [3, 0], [25, 0], [2, 0], [0, 0], [4, 5], [0, 0], [29, 0], [0, 0], [0, 0], [14, 0]]}}
{"result": "SELECT name, result \nFROM battle \nWHERE bulgarian_commander != 'Boril';", "match": {"match": true, "result": [["Battle of Adrianople", "Bulgarian victory"], ["Battle of Serres", "Bulgarian victory"], ["Battle of Rusion", "Bulgarian victory"], ["Battle of Rodosto", "Bulgarian victory"], ["Battle of Messinopolis", "Bulgarian victory"], ["Siege of Constantinople", "Two Year Truce"]]}}
{"result": "SELECT DISTINCT T2.id, T1.name \nFROM ship AS T1 \nINNER JOIN battle AS T2 ON T1.lost_in_battle = T2.id \nWHERE T1.ship_type = 'Brig'", "match": {"match": false, "result": [[8, "Lettice"], [7, "Bon Accord"], [6, "Mary"], [5, "Three Brothers"], [4, "Bacchus"]], "gt": [[8, "Siege of Constantinople"], [7, "Battle of Philippopolis"], [6, "Battle of Boruy"], [5, "Battle of Messinopolis"], [4, "Battle of Rodosto"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.id, T1.name \nFROM battle AS T1 \nJOIN death AS T2 ON T1.id = T2.caused_by_ship_id \nGROUP BY T1.id, T1.name \nHAVING SUM(T2.killed) > 10", "match": {"match": false, "result": [[1, "Battle of Adrianople"], [3, "Battle of Rusion"], [5, "Battle of Messinopolis"]], "gt": [[5, "Battle of Messinopolis"], [6, "Battle of Boruy"], [8, "Siege of Constantinople"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT caused_by_ship_id, name \nFROM ship \nJOIN death ON ship.id = death.caused_by_ship_id \nORDER BY injured DESC \nLIMIT 1", "match": {"match": false, "result": [[4, "HMS Avon"]], "gt": [[5, "Three Brothers"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T2.name \nFROM death AS T1 \nINNER JOIN battle AS T2 ON T1.caused_by_ship_id = T2.id \nINNER JOIN ship AS T3 ON T2.id = T3.lost_in_battle \nWHERE T2.bulgarian_commander = 'Kaloyan' AND T2.latin_commander = 'Baldwin I'", "match": {"match": false, "result": [], "gt": [["Battle of Adrianople"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT result) FROM battle", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(T1.id) \nFROM battle AS T1 \nJOIN ship AS T2 ON T1.id = T2.lost_in_battle \nWHERE T2.tonnage != '225'", "match": {"match": false, "result": [[6]], "gt": [[7]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.name, T2.date \nFROM ship AS T1 \nJOIN battle AS T2 ON T1.lost_in_battle = T2.id \nWHERE T1.name = 'Lettice' OR T1.name = 'HMS Atalanta'", "match": {"match": false, "result": [["Siege of Constantinople", "1235"], ["Siege of Constantinople", "1235"]], "gt": [["Siege of Constantinople", "1235"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.name, T1.result, T1.bulgarian_commander \nFROM battle AS T1 \nLEFT JOIN ship AS T2 ON T1.id = T2.lost_in_battle \nWHERE T2.location != 'English Channel'", "match": {"match": false, "result": [["Battle of Messinopolis", "Bulgarian victory", "Unknown"], ["Siege of Constantinople", "Two Year Truce", "Ivan Asen II"]], "gt": [["Battle of Adrianople", "Bulgarian victory", "Kaloyan"], ["Battle of Rusion", "Bulgarian victory", "Kaloyan"], ["Battle of Serres", "Bulgarian victory", "Kaloyan"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT note FROM death WHERE note LIKE '%East%'", "match": {"match": true, "result": [["East Champaran, Bihar"]]}}
{"result": "SELECT `line_1`, `line_2` FROM `Addresses`", "match": {"match": true, "result": [["2294 Grant Square Apt. 235", "Apt. 370"], ["3999 Aufderhar Ways Suite 593", "Apt. 388"], ["67942 Carlotta Ferry Apt. 686", "Apt. 583"], ["0144 Lamar Plaza Apt. 346", "Suite 703"], ["858 Peggie Bypass Suite 212", "Apt. 335"], ["16998 Mraz Lodge", "Apt. 689"], ["193 Marlin Brook", "Apt. 406"], ["202 Hessel Views Apt. 468", "Apt. 305"], ["0643 Muller Vista", "Suite 383"], ["7081 Eda Center", "Suite 830"], ["9283 Schulist Falls Apt. 037", "Suite 239"], ["979 Haag Shores Suite 656", "Apt. 468"], ["492 Wilkinson Route", "Suite 865"], ["186 Evan Motorway Apt. 409", "Suite 079"], ["74046 Metz Walk Apt. 113", "Suite 674"]]}}
{"result": "SELECT line_1, line_2 FROM Addresses;", "match": {"match": true, "result": [["2294 Grant Square Apt. 235", "Apt. 370"], ["3999 Aufderhar Ways Suite 593", "Apt. 388"], ["67942 Carlotta Ferry Apt. 686", "Apt. 583"], ["0144 Lamar Plaza Apt. 346", "Suite 703"], ["858 Peggie Bypass Suite 212", "Apt. 335"], ["16998 Mraz Lodge", "Apt. 689"], ["193 Marlin Brook", "Apt. 406"], ["202 Hessel Views Apt. 468", "Apt. 305"], ["0643 Muller Vista", "Suite 383"], ["7081 Eda Center", "Suite 830"], ["9283 Schulist Falls Apt. 037", "Suite 239"], ["979 Haag Shores Suite 656", "Apt. 468"], ["492 Wilkinson Route", "Suite 865"], ["186 Evan Motorway Apt. 409", "Suite 079"], ["74046 Metz Walk Apt. 113", "Suite 674"]]}}
{"result": "SELECT COUNT(course_id) FROM Courses", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(course_id) FROM Courses", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT T2.course_description \nFROM Courses AS T1 \nINNER JOIN Sections AS T2 \nON T1.course_id = T2.course_id \nWHERE T1.course_name = 'Math'", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.course_description"}}
{"result": "SELECT T2.course_description \nFROM Courses AS T1 \nJOIN Sections AS T2 ON T1.course_id = T2.course_id \nWHERE T1.course_name LIKE '%math%';", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.course_description"}}
{"result": "SELECT T1.zip_postcode FROM Addresses AS T1 INNER JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T2.city = 'Port Chelsea'", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.city"}}
{"result": "SELECT t2.zip_postcode \nFROM Addresses t1 \nJOIN Departments t2 ON t1.department_id = t2.department_id \nWHERE t2.department_name = 'Port Chelsea';", "match": {"match": false, "error": "Query execution failed with error: no such column: t2.zip_postcode"}}
{"result": "SELECT department_id, department_name \nFROM Departments \nGROUP BY department_id \nORDER BY COUNT(degree_program_id) DESC \nLIMIT 1", "match": {"match": false, "error": "Query execution failed with error: no such column: degree_program_id"}}
{"result": "SELECT department_name, department_id \nFROM Degree_Programs \nGROUP BY department_id \nORDER BY COUNT(degree_program_id) DESC \nLIMIT 1", "match": {"match": false, "error": "Query execution failed with error: no such column: department_name"}}
{"result": "SELECT COUNT(DISTINCT department_id) FROM Degree_Programs", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT COUNT(DISTINCT degree_program_id) \nFROM Degree_Programs", "match": {"match": false, "result": [[15]], "gt": [[10]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT degree_summary_name) FROM `Degree_Programs`", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(DISTINCT degree_program_id) FROM Degree_Programs", "match": {"match": false, "result": [[15]], "gt": [[3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) \nFROM Degree_Programs \nJOIN Departments ON Degree_Programs.department_id = Departments.department_id \nWHERE Departments.department_name = 'Engineering';", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(degree_program_id) \nFROM Degree_Programs \nJOIN Departments \nON Degree_Programs.department_id = Departments.department_id \nWHERE department_name = 'Engineering'", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT `section_name`, `section_description` FROM `Sections`", "match": {"match": true, "result": [["a", "non"], ["b", "voluptatem"], ["c", "qui"], ["d", "voluptas"], ["e", "ex"], ["f", "doloremque"], ["g", "provident"], ["h", "et"], ["j", "quis"], ["k", "nesciunt"], ["l", "ad"], ["o", "et"], ["p", "facilis"], ["u", "reprehenderit"], ["y", "qui"]]}}
{"result": "SELECT course_id, section_name, section_description \nFROM Sections", "match": {"match": false, "result": [[9, "a", "non"], [2, "b", "voluptatem"], [8, "c", "qui"], [1, "d", "voluptas"], [5, "e", "ex"], [7, "f", "doloremque"], [12, "g", "provident"], [14, "h", "et"], [8, "j", "quis"], [14, "k", "nesciunt"], [1, "l", "ad"], [4, "o", "et"], [5, "p", "facilis"], [6, "u", "reprehenderit"], [10, "y", "qui"]], "gt": [["a", "non"], ["b", "voluptatem"], ["c", "qui"], ["d", "voluptas"], ["e", "ex"], ["f", "doloremque"], ["g", "provident"], ["h", "et"], ["j", "quis"], ["k", "nesciunt"], ["l", "ad"], ["o", "et"], ["p", "facilis"], ["u", "reprehenderit"], ["y", "qui"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.course_id, T1.course_name \nFROM Courses AS T1 \nJOIN Sections AS T2 ON T2.course_id = T1.course_id \nGROUP BY T1.course_id \nHAVING COUNT(T2.section_id) <= 2", "match": {"match": false, "result": [[1, "ds"], [2, "math"], [4, "en"], [5, "fr"], [6, "la"], [7, "cal"], [8, "nlp"], [9, "dl"], [10, "ml"], [12, "db"], [14, "pl"]], "gt": [["ds", 1], ["math", 2], ["en", 4], ["fr", 5], ["la", 6], ["cal", 7], ["nlp", 8], ["dl", 9], ["ml", 10], ["db", 12], ["pl", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.course_name, T1.course_id FROM Courses AS T1 \nINNER JOIN Sections AS T2 ON T1.course_id = T2.course_id \nGROUP BY T1.course_id \nHAVING COUNT(T2.section_id) < 2", "match": {"match": false, "result": [["math", 2], ["en", 4], ["la", 6], ["cal", 7], ["dl", 9], ["ml", 10], ["db", 12]], "gt": [["ds", 1], ["math", 2], ["en", 4], ["fr", 5], ["la", 6], ["cal", 7], ["nlp", 8], ["dl", 9], ["ml", 10], ["db", 12], ["pl", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT section_name FROM `Sections` ORDER BY section_name DESC", "match": {"match": true, "result": [["y"], ["u"], ["p"], ["o"], ["l"], ["k"], ["j"], ["h"], ["g"], ["f"], ["e"], ["d"], ["c"], ["b"], ["a"]]}}
{"result": "SELECT section_name FROM Sections ORDER BY section_name DESC;", "match": {"match": true, "result": [["y"], ["u"], ["p"], ["o"], ["l"], ["k"], ["j"], ["h"], ["g"], ["f"], ["e"], ["d"], ["c"], ["b"], ["a"]]}}
{"result": "SELECT semester_id, semester_name \nFROM Semesters \nWHERE semester_id = ( SELECT semester_id \n                      FROM Student_Enrolment \n                      GROUP BY semester_id \n                      ORDER BY COUNT(student_id) DESC \n                      LIMIT 1 );", "match": {"match": false, "result": [[2, "summer 2010"]], "gt": [["summer 2010", 2]], "error": "Query result does not match ground truth."}}
{"result": "WITH student_enrolments AS (\n  SELECT s.semester_id, COUNT(*) as student_count\n  FROM Student_Enrolment se\n  JOIN Students s ON se.student_id = s.student_id\n  GROUP BY s.semester_id\n), semester_max AS (\n  SELECT semester_id, student_count, ROW_NUMBER() OVER (ORDER BY student_count DESC) as row_num\n  FROM student_enrolments\n)\nSELECT semester_id, semester_name\nFROM semester_max\nJOIN Semesters s ON semester_max.semester_id = s.semester_id\nWHERE row_num = 1", "match": {"match": false, "error": "Query execution failed with error: no such column: s.semester_id"}}
{"result": "SELECT department_description \nFROM Departments \nWHERE department_name LIKE '%the computer%';", "match": {"match": false, "result": [], "gt": [["error"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT department_description \nFROM Departments \nWHERE department_name LIKE '%computer%';", "match": {"match": true, "result": [["error"]]}}
{"result": "SELECT DISTINCT T1.first_name, T1.middle_name, T1.last_name, T1.student_id \nFROM Students AS T1 \nJOIN Student_Enrolment AS T2 ON T2.student_id = T1.student_id \nJOIN Degree_Programs AS T3 ON T3.degree_program_id = T2.degree_program_id \nGROUP BY T1.student_id, T1.first_name, T1.middle_name, T1.last_name \nHAVING COUNT(DISTINCT T2.degree_program_id) = 2", "match": {"match": false, "result": [["Jarvis", "Aaliyah", "Carroll", 4], ["Stanford", "Mona", "Rogahn", 6], ["Jordy", "Osborne", "Rempel", 14]], "gt": [["Jarvis", "Aaliyah", "Carroll", 4], ["Reva", "Golda", "Osinski", 9], ["Jordy", "Osborne", "Rempel", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n  s.first_name, \n  s.middle_name, \n  s.last_name, \n  se.degree_program_id, \n  se.student_id\nFROM \n  Students s\n  JOIN Student_Enrolment se ON s.student_id = se.student_id\nGROUP BY \n  se.student_id, \n  s.first_name, \n  s.middle_name, \n  s.last_name, \n  se.degree_program_id\nHAVING \n  COUNT(DISTINCT se.degree_program_id) = 2;", "match": {"match": false, "result": [], "gt": [["Jarvis", "Aaliyah", "Carroll", 4], ["Reva", "Golda", "Osinski", 9], ["Jordy", "Osborne", "Rempel", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.first_name, T1.middle_name, T1.last_name \nFROM Students T1 \nJOIN Student_Enrolment T2 ON T1.student_id = T2.student_id \nJOIN Degree_Programs T3 ON T2.degree_program_id = T3.degree_program_id \nWHERE T3.degree_summary_name = 'Bachelor'", "match": {"match": false, "result": [["Reva", "Golda", "Osinski"], ["Frida", "Aisha", "Huel"], ["Reva", "Golda", "Osinski"], ["Jarvis", "Aaliyah", "Carroll"], ["Frida", "Aisha", "Huel"], ["Jarvis", "Aaliyah", "Carroll"], ["Milton", "Vaughn", "Christiansen"], ["Stanford", "Mona", "Rogahn"]], "gt": [["Reva", "Golda", "Osinski"], ["Frida", "Aisha", "Huel"], ["Jarvis", "Aaliyah", "Carroll"], ["Milton", "Vaughn", "Christiansen"], ["Stanford", "Mona", "Rogahn"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.first_name, T1.middle_name, T1.last_name \nFROM Students AS T1 \nJOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id \nJOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id \nWHERE T3.degree_summary_name = 'Bachelors'", "match": {"match": false, "result": [], "gt": [["Reva", "Golda", "Osinski"], ["Frida", "Aisha", "Huel"], ["Jarvis", "Aaliyah", "Carroll"], ["Milton", "Vaughn", "Christiansen"], ["Stanford", "Mona", "Rogahn"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.degree_summary_name \nFROM (\n  SELECT T2.degree_summary_name, COUNT(T1.student_enrolment_id) as count \n  FROM Student_Enrolment as T1 \n  JOIN Degree_Programs as T2 on T1.degree_program_id = T2.degree_program_id \n  GROUP BY T2.degree_summary_name \n) AS T \nORDER BY T.count DESC \nLIMIT 1;", "match": {"match": true, "result": [["Bachelor"]]}}
{"result": "SELECT T.degree_summary_name\nFROM (\n  SELECT T1.degree_summary_name, COUNT(T2.student_enrolment_id) as num_enrolled\n  FROM Degree_Programs T1\n  JOIN Student_Enrolment T2 ON T1.degree_program_id = T2.degree_program_id\n  GROUP BY T1.degree_summary_name\n) AS T\nORDER BY num_enrolled DESC\nLIMIT 1", "match": {"match": true, "result": [["Bachelor"]]}}
{"result": "SELECT T1.degree_summary_name \nFROM Degree_Programs T1 \nJOIN Student_Enrolment T2 ON T1.degree_program_id = T2.degree_program_id \nGROUP BY T1.degree_program_id \nORDER BY COUNT(T2.student_id) DESC \nLIMIT 1", "match": {"match": false, "result": [["Bachelor"]], "gt": [[9, "Bachelor"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.degree_program_id, T.degree_summary_name\nFROM \n(\n  SELECT D.degree_program_id, D.degree_summary_name, COUNT(SE.student_id) as num_students\n  FROM Degree_Programs D\n  JOIN Student_Enrolment SE ON D.degree_program_id = SE.degree_program_id\n  GROUP BY D.degree_program_id, D.degree_summary_name\n) T\nORDER BY T.num_students DESC\nLIMIT 1", "match": {"match": true, "result": [[9, "Bachelor"]]}}
{"result": "SELECT \n  s.student_id, \n  s.first_name, \n  s.middle_name, \n  s.last_name, \n  COUNT(se.degree_program_id) AS num_enrollments\nFROM \n  Students s\n  JOIN Student_Enrolment se ON s.student_id = se.student_id\nGROUP BY \n  s.student_id, s.first_name, s.middle_name, s.last_name\nORDER BY \n  num_enrollments DESC\nLIMIT 1", "match": {"match": false, "result": [[6, "Stanford", "Mona", "Rogahn", 3]], "gt": [[7, "Frida", "Aisha", "Huel", 3, 7]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    S.first_name, \n    S.middle_name, \n    S.last_name, \n    S.student_id,\n    COUNT(SE.degree_program_id) AS num_enrollments\nFROM \n    Students S\nJOIN \n    Student_Enrolment SE ON S.student_id = SE.student_id\nGROUP BY \n    S.student_id\nORDER BY \n    num_enrollments DESC\nLIMIT 1", "match": {"match": false, "result": [["Frida", "Aisha", "Huel", 7, 3]], "gt": [[7, "Frida", "Aisha", "Huel", 3, 7]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.semester_name \nFROM Student_Enrolment AS T1 \nLEFT JOIN Semesters AS T2 \nON T1.semester_id = T2.semester_id \nWHERE T1.semester_id IS NULL OR T1.student_id IS NULL", "match": {"match": false, "result": [], "gt": [["fall 2010"], ["spring 2013"], ["spring 2014"], ["spring 2016"], ["spring 2017"], ["winter 2018"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.semester_name \nFROM Semesters AS T1 \nLEFT JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id \nWHERE T2.semester_id IS NULL;", "match": {"match": true, "result": [["fall 2010"], ["spring 2013"], ["spring 2014"], ["spring 2016"], ["spring 2017"], ["winter 2018"]]}}
{"result": "SELECT T2.course_name \nFROM Student_Enrolment_Courses \nJOIN Courses AS T2 ON Student_Enrolment_Courses.course_id = T2.course_id", "match": {"match": false, "result": [["la"], ["la"], ["pl"], ["ai"], ["math"], ["ml"], ["math"], ["pl"], ["os"], ["en"], ["ml"], ["nlp"], ["rs"], ["rs"], ["db"]], "gt": [["la"], ["pl"], ["ai"], ["math"], ["ml"], ["os"], ["en"], ["nlp"], ["rs"], ["db"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.course_name FROM Courses AS T1\nJOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id", "match": {"match": false, "result": [["la"], ["la"], ["pl"], ["ai"], ["math"], ["ml"], ["math"], ["pl"], ["os"], ["en"], ["ml"], ["nlp"], ["rs"], ["rs"], ["db"]], "gt": [["la"], ["pl"], ["ai"], ["math"], ["ml"], ["os"], ["en"], ["nlp"], ["rs"], ["db"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT t1.course_name FROM Courses t1 \nJOIN Student_Enrolment_Courses t2 ON t1.course_id = t2.course_id \nGROUP BY t1.course_id \nORDER BY COUNT(t1.course_id) DESC \nLIMIT 1", "match": {"match": false, "result": [["pl"]], "gt": [["rs"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT C.course_name \nFROM Courses C\nJOIN Student_Enrolment_Courses SEC ON C.course_id = SEC.course_id\nJOIN Student_Enrolment SE ON SEC.student_enrolment_id = SE.student_enrolment_id\nGROUP BY C.course_name\nORDER BY COUNT(SE.student_enrolment_id) DESC\nLIMIT 1;", "match": {"match": true, "result": [["rs"]]}}
{"result": "SELECT T1.last_name \nFROM Students AS T1 \nJOIN Addresses AS T2 ON T1.current_address_id = T2.address_id \nWHERE T2.state_province_county = 'North Carolina' \nAND T1.student_id NOT IN (SELECT student_id FROM Student_Enrolment);", "match": {"match": false, "result": [], "gt": [["Gleichner"], ["Weimann"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.last_name \nFROM Students s\nJOIN Addresses a ON s.permanent_address_id = a.address_id\nWHERE a.state_province_county = 'North Carolina' AND s.student_id NOT IN (\n  SELECT se.student_id \n  FROM Student_Enrolment se\n  JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\n);", "match": {"match": false, "result": [], "gt": [["Gleichner"], ["Weimann"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.transcript_id, T2.transcript_date \nFROM Student_Enrolment_Courses AS T1 \nJOIN Transcript_Contents AS T2 ON T1.student_course_id = T2.student_course_id \nGROUP BY T2.transcript_id \nHAVING COUNT(*) >= 2", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.transcript_date"}}
{"result": "SELECT T1.transcript_date, T1.transcript_id \nFROM Transcripts AS T1 \nJOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id \nGROUP BY T1.transcript_id \nHAVING COUNT(DISTINCT T2.student_course_id) >= 2", "match": {"match": true, "result": [["2013-06-30 13:01:40", 5], ["2010-12-13 10:55:15", 6], ["1975-05-06 12:04:47", 8], ["1998-11-22 12:18:29", 15]]}}
{"result": "SELECT `cell_mobile_number` FROM `Students` WHERE `first_name` = 'Timmothy' AND `last_name` = 'Ward'", "match": {"match": true, "result": [["(096)889-8954x524"]]}}
{"result": "SELECT `cell_mobile_number` FROM `Students` WHERE `first_name` = 'Timmothy' AND `middle_name` = 'Ward'", "match": {"match": true, "result": []}}
{"result": "SELECT `first_name`, `middle_name`, `last_name` FROM `Students` WHERE `date_first_registered` = ( SELECT MIN(`date_first_registered`) FROM `Students` );", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT first_name, middle_name, last_name \nFROM Students \nORDER BY date_first_registered \nLIMIT 1;", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT first_name, middle_name, last_name \nFROM Students \nWHERE date_first_registered = (SELECT MIN(date_first_registered) \nFROM Students)", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT first_name, middle_name, last_name \nFROM Students \nWHERE date_first_registered = ( SELECT MIN(date_first_registered) \n                               FROM Students );", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT T1.first_name \nFROM Students AS T1 \nJOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id \nJOIN Addresses AS T3 ON T1.current_address_id = T3.address_id \nWHERE T2.address_id != T3.address_id", "match": {"match": true, "result": [["Timmothy"], ["Hobart"], ["Warren"], ["Jarvis"], ["Stanford"], ["Frida"], ["Delaney"], ["Reva"], ["Helga"], ["Gregg"], ["Orrin"], ["Deon"], ["Jordy"], ["Jett"]]}}
{"result": "SELECT `first_name`\nFROM `Students`\nWHERE `permanent_address_id` != `current_address_id`", "match": {"match": true, "result": [["Timmothy"], ["Hobart"], ["Warren"], ["Jarvis"], ["Stanford"], ["Frida"], ["Delaney"], ["Reva"], ["Helga"], ["Gregg"], ["Orrin"], ["Deon"], ["Jordy"], ["Jett"]]}}
{"result": "SELECT T2.address_id, T2.line_1, T2.line_2, T2.line_3 \nFROM Students \nJOIN Addresses AS T2 ON Students.current_address_id = T2.address_id \nGROUP BY T2.address_id \nORDER BY COUNT(T2.address_id) DESC \nLIMIT 1", "match": {"match": false, "result": [[9, "0643 Muller Vista", "Suite 383", null]], "gt": [[9, "0643 Muller Vista", "Suite 383"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT A.address_id, A.line_1, A.line_2 \nFROM Addresses A \nJOIN Students S ON A.address_id = S.current_address_id \nGROUP BY A.address_id \nORDER BY COUNT(S.student_id) DESC \nLIMIT 1", "match": {"match": true, "result": [[9, "0643 Muller Vista", "Suite 383"]]}}
{"result": "SELECT AVG(DATE(transcript_date)) \nFROM Transcripts", "match": {"match": true, "result": [[1989.9333333333334]]}}
{"result": "SELECT AVG(transcript_date) FROM Transcripts", "match": {"match": true, "result": [[1989.9333333333334]]}}
{"result": "SELECT `transcript_date`, `other_details` \nFROM `Transcripts` \nWHERE `transcript_id` = (SELECT `transcript_id` FROM `Transcripts` ORDER BY `transcript_date` ASC LIMIT 1)", "match": {"match": true, "result": [["1975-05-06 12:04:47", null]]}}
{"result": "SELECT MIN(T2.transcript_date) ,  T2.other_details \nFROM Student_Enrolment AS T1 \nJOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id \nJOIN Transcripts AS T3 ON T2.student_course_id = T3.student_course_id \nJOIN Transcript_Contents AS T4 ON T3.transcript_id = T4.transcript_id", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.transcript_date"}}
{"result": "```sql\nSELECT COUNT(*) as total_transcript\nFROM Transcripts;\n```", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) AS total_transcripts FROM Transcripts", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT MAX(transcript_date) FROM Transcripts", "match": {"match": true, "result": [["2013-06-30 13:01:40"]]}}
{"result": "SELECT MAX(transcript_date) AS last_transcript_release FROM Transcripts", "match": {"match": true, "result": [["2013-06-30 13:01:40"]]}}
{"result": "SELECT COUNT(DISTINCT tc.student_course_id) as max_count, sce.course_id \nFROM Transcript_Contents tc \nJOIN Student_Enrolment_Courses sce ON tc.student_course_id = sce.student_course_id", "match": {"match": false, "result": [[9, 6]], "gt": [[4, 0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(T1.student_course_id) as max_enrolment_count, T2.student_enrolment_id \nFROM Transcript_Contents AS T1 \nJOIN Student_Enrolment_Courses AS T2 ON T1.student_course_id = T2.student_course_id \nGROUP BY T2.student_enrolment_id \nORDER BY COUNT(T1.student_course_id) DESC \nLIMIT 1", "match": {"match": false, "result": [[4, 2]], "gt": [[4, 0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.transcript_date, T2.transcript_id \nFROM Student_Enrolment_Courses T1 \nJOIN Transcript_Contents T2 ON T1.student_course_id = T2.student_course_id \nGROUP BY T2.transcript_id \nORDER BY COUNT(T1.student_course_id) ASC LIMIT 1;", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.transcript_date"}}
{"result": "SELECT T2.transcript_date, T2.transcript_id \nFROM ( SELECT transcript_id, COUNT(*) as count \nFROM Transcript_Contents \nGROUP BY transcript_id ) AS T1 \nJOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id \nORDER BY T1.count ASC \nLIMIT 1", "match": {"match": true, "result": [["1975-10-28 15:16:51", 2]]}}
{"result": "SELECT DISTINCT T2.semester_name \nFROM Student_Enrolment AS T1 \nINNER JOIN Semesters AS T2 ON T1.semester_id = T2.semester_id \nINNER JOIN Degree_Programs AS T3 ON T1.degree_program_id = T3.degree_program_id \nINNER JOIN Departments AS T4 ON T3.department_id = T4.department_id \nWHERE T4.department_name IN ('Master', 'Bachelor')", "match": {"match": false, "result": [], "gt": [[13]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.semester_id\nFROM (\n  SELECT semester_id, \n    COUNT(CASE WHEN T2.degree_summary_name = 'Masters' THEN T2.degree_summary_name END) AS masters_count, \n    COUNT(CASE WHEN T2.degree_summary_name = 'Bachelors' THEN T2.degree_summary_name END) AS bachelors_count\n  FROM Student_Enrolment T\n  JOIN Degree_Programs T2 ON T.degree_program_id = T2.degree_program_id\n  GROUP BY semester_id\n) T\nWHERE masters_count > 0 AND bachelors_count > 0", "match": {"match": false, "result": [], "gt": [[13]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT current_address_id) \nFROM Students", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT DISTINCT T1.line_1, T1.line_2, T1.line_3, T1.city, T1.zip_postcode, T1.state_province_county, T1.country, T1.other_address_details \nFROM Addresses T1 \nJOIN Students T2 ON T1.address_id = T2.current_address_id", "match": {"match": false, "result": [["7081 Eda Center", "Suite 830", null, "Rutherfordtown", "839", "Delaware", "Kyrgyz Republic", null], ["979 Haag Shores Suite 656", "Apt. 468", null, "Prohaskafort", "590", "SouthDakota", "Lesotho", null], ["0643 Muller Vista", "Suite 383", null, "Port Elvisfurt", "777", "NorthCarolina", "Gabon", null], ["193 Marlin Brook", "Apt. 406", null, "Herzoghaven", "068", "Arkansas", "Cook Islands", null], ["16998 Mraz Lodge", "Apt. 689", null, "North Omer", "902", "Kentucky", "Gibraltar", null], ["74046 Metz Walk Apt. 113", "Suite 674", null, "Port Oceane", "669", "Wyoming", "Norfolk Island", null], ["2294 Grant Square Apt. 235", "Apt. 370", null, "Port Chelsea", "148", "Virginia", "Iceland", null], ["3999 Aufderhar Ways Suite 593", "Apt. 388", null, "Lake Laishafurt", "943", "Kentucky", "Burundi", null], ["186 Evan Motorway Apt. 409", "Suite 079", null, "Lake Careyberg", "895", "Kentucky", "New Caledonia", null]], "gt": [[9]], "error": "Query result does not match ground truth."}}
{"result": "SELECT * FROM Students ORDER BY last_name DESC, first_name DESC", "match": {"match": false, "result": [[13, 9, 8, "Deon", "Brooklyn", "Weimann", "(213)445-0399x85208", "jhuel@example.com", "68095", "1986-02-24 21:12:23", "2014-05-30 23:32:02", "assumenda"], [1, 10, 15, "Timmothy", "Anna", "Ward", "(096)889-8954x524", "erwin.zboncak@example.com", "965", "1971-02-05 07:28:23", "1971-05-17 19:28:49", "quia"], [11, 14, 4, "Gregg", "Mossie", "Schuppe", "(462)246-7921", "nbruen@example.org", "494", "1989-05-24 23:31:29", "1975-10-09 00:49:27", "omnis"], [6, 6, 3, "Stanford", "Mona", "Rogahn", "436.613.7683", "skassulke@example.net", "248", "1997-03-20 16:47:25", "2016-04-09 12:27:04", "qui"], [14, 12, 11, "Jordy", "Osborne", "Rempel", "(605)919-3594x3661", "gracie29@example.com", "34458427", "2004-12-24 12:36:46", "1999-08-24 00:07:10", "et"], [9, 2, 15, "Reva", "Golda", "Osinski", "(507)365-8405", "qo'kon@example.com", "39", "2017-01-04 08:10:25", "1990-09-01 05:03:27", "nesciunt"], [10, 15, 14, "Helga", "Cleve", "Mohr", "677.401.9382", "nya.lesch@example.net", "43", "2009-09-25 00:14:25", "2017-07-09 21:38:43", "rerum"], [12, 14, 9, "Orrin", "Neal", "Kemmer", "(982)153-1469x1733", "beth42@example.org", "6274274", "2005-12-15 08:42:10", "2006-08-04 17:26:49", "non"], [15, 2, 9, "Jett", "Alberta", "Jaskolski", "877.549.9067x8723", "mya88@example.org", "156", "1982-06-19 13:15:18", "1982-06-11 00:25:39", "omnis"], [7, 15, 3, "Frida", "Aisha", "Huel", "1-879-796-8987x164", "baumbach.lucious@example.org", "668", "2018-03-13 09:56:22", "1997-11-16 08:54:33", "dolorum"], [3, 9, 5, "Warren", "Violet", "Gleichner", "07661787471", "johns.unique@example.net", "3", "2007-08-29 23:25:41", "2007-03-31 09:53:19", "facilis"], [5, 9, 9, "Milton", "Vaughn", "Christiansen", "171-642-5684", "lhartmann@example.org", "", "1973-05-19 19:12:46", "2007-11-28 12:50:21", "laborum"], [4, 7, 11, "Jarvis", "Aaliyah", "Carroll", "09700166582", "jillian26@example.net", "141072406", "2014-03-28 05:48:23", "2007-08-02 04:12:58", "atque"], [2, 12, 5, "Hobart", "Lorenz", "Balistreri", "1-009-710-5151", "swift.kolby@example.com", "304246", "1976-10-26 02:33:06", "2013-10-05 17:41:28", "autem"], [8, 1, 5, "Delaney", "Judd", "Ankunding", "03174364122", "dell43@example.net", "402", "1982-02-14 08:46:35", "2004-12-08 05:29:11", "voluptatem"]], "gt": [["voluptatem"], ["rerum"], ["quia"], ["qui"], ["omnis"], ["omnis"], ["non"], ["nesciunt"], ["laborum"], ["facilis"], ["et"], ["dolorum"], ["autem"], ["atque"], ["assumenda"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT other_student_details \nFROM Students \nORDER BY last_name DESC;", "match": {"match": false, "result": [["assumenda"], ["quia"], ["omnis"], ["qui"], ["et"], ["nesciunt"], ["rerum"], ["non"], ["omnis"], ["dolorum"], ["facilis"], ["laborum"], ["atque"], ["autem"], ["voluptatem"]], "gt": [["voluptatem"], ["rerum"], ["quia"], ["qui"], ["omnis"], ["omnis"], ["non"], ["nesciunt"], ["laborum"], ["facilis"], ["et"], ["dolorum"], ["autem"], ["atque"], ["assumenda"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT * FROM Sections WHERE section_name = 'h'", "match": {"match": false, "result": [[8, 14, "h", "et", null]], "gt": [["et"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.section_description \nFROM Sections AS T1 \nJOIN Courses AS T2 ON T1.course_id = T2.course_id \nWHERE T1.section_name = 'h';", "match": {"match": true, "result": [["et"]]}}
{"result": "SELECT T2.first_name \nFROM Addresses AS T1 \nJOIN Students AS T2 ON T1.address_id = T2.permanent_address_id \nWHERE T1.country = 'Haiti' OR T2.cell_mobile_number = '09700166582'", "match": {"match": false, "result": [["Hobart"], ["Warren"], ["Jarvis"], ["Delaney"]], "gt": [["Jarvis"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT first_name \nFROM Students \nWHERE permanent_address_id IN (SELECT address_id \n                                FROM Addresses \n                                WHERE country = 'Haiti') \nOR cell_mobile_number = '09700166582';", "match": {"match": false, "result": [["Hobart"], ["Warren"], ["Jarvis"], ["Delaney"]], "gt": [["Jarvis"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Title FROM Cartoon ORDER BY Title ASC", "match": {"match": true, "result": [["Dawn of the Dead Man!"], ["Day of the Dark Knight!"], ["Deep Cover for Batman!"], ["Enter the Outsiders!"], ["Evil Under the Sea!"], ["Fall of the Blue Beetle!"], ["Invasion of the Secret Santas!"], ["Journey to the Center of the Bat!"], ["Return of the Fearsome Fangs!"], ["Terror on Dinosaur Island!"], ["The Eyes of Despero!"], ["The Rise of the Blue Beetle!"]]}}
{"result": "SELECT Title FROM Cartoon ORDER BY Title ASC", "match": {"match": true, "result": [["Dawn of the Dead Man!"], ["Day of the Dark Knight!"], ["Deep Cover for Batman!"], ["Enter the Outsiders!"], ["Evil Under the Sea!"], ["Fall of the Blue Beetle!"], ["Invasion of the Secret Santas!"], ["Journey to the Center of the Bat!"], ["Return of the Fearsome Fangs!"], ["Terror on Dinosaur Island!"], ["The Eyes of Despero!"], ["The Rise of the Blue Beetle!"]]}}
{"result": "SELECT * FROM Cartoon\nWHERE Directed_by = \"Ben Jones\";", "match": {"match": false, "result": [[1.0, "The Rise of the Blue Beetle!", "Ben Jones", "Michael Jelenic", "November14,2008", 101.0, "700"], [4.0, "Day of the Dark Knight!", "Ben Jones", "J. M. DeMatteis", "January2,2009", 104.0, "704"], [7.0, "Dawn of the Dead Man!", "Ben Jones", "Steven Melching", "January16,2009", 107.0, "707"], [10.0, "The Eyes of Despero!", "Ben Jones", "J. M. DeMatteis", "February6,2009", 110.0, "728"]], "gt": [["The Rise of the Blue Beetle!"], ["Day of the Dark Knight!"], ["Dawn of the Dead Man!"], ["The Eyes of Despero!"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Day of the Dark Knight!"], ["Dawn of the Dead Man!"], ["The Eyes of Despero!"]]}}
{"result": "SELECT COUNT(id) \nFROM Cartoon \nWHERE Written_by = 'Joseph Kuhr';", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(id) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT T1.Title, T1.Directed_by \nFROM Cartoon AS T1 \nORDER BY T1.`Original_air_date`;", "match": {"match": true, "result": [["Invasion of the Secret Santas!", "Brandon Vietti"], ["Evil Under the Sea!", "Michael Chang"], ["Return of the Fearsome Fangs!", "Brandon Vietti"], ["Deep Cover for Batman!", "Michael Chang"], ["The Eyes of Despero!", "Ben Jones"], ["Dawn of the Dead Man!", "Ben Jones"], ["Day of the Dark Knight!", "Ben Jones"], ["Fall of the Blue Beetle!", "Brandon Vietti"], ["Journey to the Center of the Bat!", "Michael Chang"], ["Enter the Outsiders!", "Michael Chang"], ["The Rise of the Blue Beetle!", "Ben Jones"], ["Terror on Dinosaur Island!", "Brandon Vietti"]]}}
{"result": "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date", "match": {"match": true, "result": [["Invasion of the Secret Santas!", "Brandon Vietti"], ["Evil Under the Sea!", "Michael Chang"], ["Return of the Fearsome Fangs!", "Brandon Vietti"], ["Deep Cover for Batman!", "Michael Chang"], ["The Eyes of Despero!", "Ben Jones"], ["Dawn of the Dead Man!", "Ben Jones"], ["Day of the Dark Knight!", "Ben Jones"], ["Fall of the Blue Beetle!", "Brandon Vietti"], ["Journey to the Center of the Bat!", "Michael Chang"], ["Enter the Outsiders!", "Michael Chang"], ["The Rise of the Blue Beetle!", "Ben Jones"], ["Terror on Dinosaur Island!", "Brandon Vietti"]]}}
{"result": "SELECT Title \nFROM Cartoon \nWHERE Directed_by = 'Ben Jones' \n   OR Directed_by = 'Brandon Vietti';", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Terror on Dinosaur Island!"], ["Day of the Dark Knight!"], ["Invasion of the Secret Santas!"], ["Dawn of the Dead Man!"], ["Fall of the Blue Beetle!"], ["The Eyes of Despero!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT Title\nFROM Cartoon\nWHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Terror on Dinosaur Island!"], ["Day of the Dark Knight!"], ["Invasion of the Secret Santas!"], ["Dawn of the Dead Man!"], ["Fall of the Blue Beetle!"], ["The Eyes of Despero!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT \"Country\", COUNT(id) FROM \"TV_Channel\" GROUP BY \"Country\" ORDER BY COUNT(id) DESC", "match": {"match": false, "result": [["Italy", 12], ["United Kingdom", 2], ["Poland", 1]], "gt": [["Italy", 12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Country, COUNT(id) FROM TV_Channel GROUP BY Country ORDER BY COUNT(id) DESC LIMIT 1", "match": {"match": true, "result": [["Italy", 12]]}}
{"result": "SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel", "match": {"match": true, "result": [[15, 1]]}}
{"result": "SELECT COUNT(DISTINCT series_name) AS distinct_series, COUNT(DISTINCT Content) AS distinct_content FROM \"TV_Channel\"", "match": {"match": true, "result": [[15, 1]]}}
{"result": "SELECT Content FROM \"TV_Channel\" WHERE series_name = 'Sky Radio';", "match": {"match": true, "result": [["music"]]}}
{"result": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'", "match": {"match": true, "result": [["music"]]}}
{"result": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'", "match": {"match": true, "result": [["Sky Famiglia"]]}}
{"result": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'", "match": {"match": true, "result": [["Sky Famiglia"]]}}
{"result": "SELECT COUNT(id) FROM TV_Channel WHERE Language = 'English';", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(id) FROM TV_Channel WHERE Language = 'English'", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Language, COUNT(id) as Count\nFROM TV_Channel\nGROUP BY Language\nORDER BY Count ASC\nLIMIT 1", "match": {"match": true, "result": [["English", 3]]}}
{"result": "SELECT \"Language\", COUNT(\"Language\") AS count FROM TV_Channel GROUP BY \"Language\" ORDER BY count LIMIT 1", "match": {"match": true, "result": [["English", 3]]}}
{"result": "SELECT Language, COUNT(Country) AS \"Number_of_channels\" FROM \"TV_Channel\" GROUP BY Language", "match": {"match": true, "result": [["English", 3], ["Italian", 12]]}}
{"result": "SELECT Language, COUNT(id) AS NumberOfChannels FROM TV_Channel GROUP BY Language", "match": {"match": true, "result": [["English", 3], ["Italian", 12]]}}
{"result": "SELECT T3.Series_name FROM Cartoon AS T1 \nINNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id \nINNER JOIN TV_Series AS T3 ON T2.id = T3.Channel \nWHERE T1.Title = 'The Rise of the Blue Beetle!'", "match": {"match": false, "error": "Query execution failed with error: no such column: T3.Series_name"}}
{"result": "SELECT T1.series_name \nFROM TV_Channel AS T1 \nJOIN Cartoon AS T2 ON T1.id = T2.Channel \nWHERE T2.Title = 'The Rise of the Blue Beetle'", "match": {"match": false, "result": [], "gt": [["Sky Radio"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Title \nFROM TV_Channel \nINNER JOIN Cartoon AS T2 ON T2.Channel = TV_Channel.id \nWHERE TV_Channel.series_name = 'Sky Radio';", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT T2.Title \nFROM TV_Channel AS T1 \nJOIN Cartoon AS T2 ON T1.id = T2.Channel \nWHERE T1.series_name = 'Sky Radio';", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT Episode FROM TV_series ORDER BY Rating", "match": {"match": true, "result": [["The Hanged Man"], ["Double Down"], ["Home By Another Way"], ["Keepers"], ["Emily"], ["Blowback"], ["The Legend of Dylan McCleen"], ["Winterland"], ["The Year of the Rabbit"], ["Game Three"], ["Friendly Skies"], ["A Love of a Lifetime"]]}}
{"result": "SELECT DISTINCT T1.Episode, T1.Rating \nFROM TV_series AS T1 \nORDER BY CAST(REPLACE(T1.Rating, ',', '') AS REAL) DESC", "match": {"match": false, "result": [["A Love of a Lifetime", "5.8"], ["Friendly Skies", "5.3"], ["Game Three", "4.4"], ["The Year of the Rabbit", "4.3"], ["Winterland", "4.0"], ["The Legend of Dylan McCleen", "3.8"], ["Keepers", "3.7"], ["Emily", "3.7"], ["Blowback", "3.7"], ["Home By Another Way", "3.5"], ["Double Down", "3.4"], ["The Hanged Man", "3.0"]], "gt": [["The Hanged Man"], ["Double Down"], ["Home By Another Way"], ["Keepers"], ["Emily"], ["Blowback"], ["The Legend of Dylan McCleen"], ["Winterland"], ["The Year of the Rabbit"], ["Game Three"], ["Friendly Skies"], ["A Love of a Lifetime"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT TOP 3 Episode, Rating FROM TV_series ORDER BY CAST(Rating AS REAL) DESC", "match": {"match": false, "error": "Query execution failed with error: near \"3\": syntax error"}}
{"result": "SELECT TOP 3 Rating, id FROM TV_series ORDER BY Rating DESC", "match": {"match": false, "error": "Query execution failed with error: near \"3\": syntax error"}}
{"result": "SELECT MIN(Share) ,  MAX(Share) FROM TV_series", "match": {"match": false, "result": [[5.0, 9.0]], "gt": [[9.0, 5.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(Share) AS max_share, MIN(Share) AS min_share FROM `TV_series`;", "match": {"match": true, "result": [[9.0, 5.0]]}}
{"result": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'", "match": {"match": true, "result": [["September 24, 2007"]]}}
{"result": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'", "match": {"match": true, "result": [["September 24, 2007"]]}}
{"result": "SELECT T2.Weekly_Rank\nFROM TV_series AS T1\nJOIN TV_Channel AS T2 ON T1.Channel = T2.id\nWHERE T1.Episode = 'A Love of a Lifetime'", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Weekly_Rank"}}
{"result": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'", "match": {"match": true, "result": [[43.0]]}}
{"result": "SELECT T2.series_name \nFROM TV_series AS T1 \nJOIN TV_Channel AS T2 ON T1.Channel = T2.id \nWHERE T1.Episode = 'A Love of a Lifetime';", "match": {"match": true, "result": [["Sky Radio"]]}}
{"result": "SELECT T2.series_name \nFROM TV_series AS T1 \nINNER JOIN TV_Channel AS T2 \nON T1.Channel = T2.id \nWHERE T1.Episode = 'A Love of a Lifetime'", "match": {"match": true, "result": [["Sky Radio"]]}}
{"result": "SELECT T2.Episode \nFROM TV_Channel AS T1 \nJOIN TV_series AS T2 ON T1.id = T2.Channel \nWHERE T1.series_name = 'Sky Radio'", "match": {"match": true, "result": [["A Love of a Lifetime"], ["Keepers"]]}}
{"result": "SELECT Episode FROM TV_series WHERE series_name = 'Sky Radio'", "match": {"match": false, "error": "Query execution failed with error: no such column: series_name"}}
{"result": "SELECT COUNT(id), Directed_by \nFROM Cartoon \nGROUP BY Directed_by", "match": {"match": true, "result": [[4, "Ben Jones"], [4, "Brandon Vietti"], [4, "Michael Chang"]]}}
{"result": "SELECT Directed_by, COUNT(id) as Number_of_Cartoons FROM Cartoon GROUP BY Directed_by", "match": {"match": false, "result": [["Ben Jones", 4], ["Brandon Vietti", 4], ["Michael Chang", 4]], "gt": [[4, "Ben Jones"], [4, "Brandon Vietti"], [4, "Michael Chang"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.`Production_code`, T2.`Channel`\nFROM TV_series AS T1\nJOIN Cartoon AS T2 ON T1.`Channel` = T2.`Channel`\nWHERE T1.`Air_Date` = ( SELECT MAX(Air_Date) FROM TV_series )", "match": {"match": false, "result": [[101.0, "700"], [111.0, "700"]], "gt": [[102.0, "701"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(`id`) as id, `Channel` FROM Cartoon ORDER BY `id` DESC LIMIT 1", "match": {"match": false, "result": [[12.0, "707"]], "gt": [[102.0, "701"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT `Package_Option`, `series_name` \nFROM `TV_Channel` \nWHERE `Hight_definition_TV` = 'Yes';", "match": {"match": false, "result": [], "gt": [["Sky Famiglia + Sky HD", "MTV Live HD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes'", "match": {"match": false, "result": [], "gt": [["Sky Famiglia + Sky HD", "MTV Live HD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Country FROM TV_Channel AS T1 INNER JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'", "match": {"match": true, "result": [["United Kingdom"], ["Italy"]]}}
{"result": "SELECT T1.Country \nFROM TV_Channel AS T1 \nJOIN Cartoon AS T2 \nON T1.id = T2.Channel \nWHERE T2.Written_by = 'Todd Casey';", "match": {"match": true, "result": [["United Kingdom"], ["Italy"]]}}
{"result": "SELECT T1.Country \nFROM TV_Channel AS T1 \nLEFT JOIN Cartoon AS T2 ON T1.id = T2.Channel \nWHERE T2.Written_by IS NULL AND T1.Country IS NOT NULL", "match": {"match": false, "result": [["Poland"], ["Italy"], ["Italy"], ["Italy"], ["Italy"], ["Italy"]], "gt": [["Poland"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Country \nFROM TV_Channel AS T1 \nWHERE T1.id NOT IN (SELECT T2.Channel \n                    FROM Cartoon AS T2 \n                    WHERE T2.Written_by = 'Todd Casey'", "match": {"match": false, "error": "Query execution failed with error: incomplete input"}}
{"result": "SELECT T1.series_name, T1.Country \nFROM TV_Channel AS T1 \nJOIN Cartoon AS T2 ON T1.id = T2.Channel \nWHERE T2.Directed_by = 'Ben Jones' OR T2.Directed_by = 'Michael Chang'", "match": {"match": false, "result": [["Sky Radio", "Italy"], ["Music Box Italia", "Italy"], ["MTV Hits", "Italy"], ["MTV Rocks", "United Kingdom"], ["MTV Dance", "United Kingdom"], ["MTV Dance", "United Kingdom"], ["Classica", "Italy"], ["MTV Dance", "United Kingdom"]], "gt": [["MTV Dance", "United Kingdom"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.series_name, T1.Country \nFROM TV_Channel AS T1 \nJOIN Cartoon AS T2 ON T1.id = T2.Channel \nWHERE T2.Directed_by = 'Ben Jones' OR T2.Directed_by = 'Michael Chang'", "match": {"match": false, "result": [["Sky Radio", "Italy"], ["Music Box Italia", "Italy"], ["MTV Hits", "Italy"], ["MTV Rocks", "United Kingdom"], ["MTV Dance", "United Kingdom"], ["MTV Dance", "United Kingdom"], ["Classica", "Italy"], ["MTV Dance", "United Kingdom"]], "gt": [["MTV Dance", "United Kingdom"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'", "match": {"match": true, "result": [["4:3", "Italy"], ["4:3", "Italy"], ["4:3 / 16:9", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3", "Italy"], ["4:3", "Italy"]]}}
{"result": "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'", "match": {"match": true, "result": [["4:3", "Italy"], ["4:3", "Italy"], ["4:3 / 16:9", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3", "Italy"], ["4:3", "Italy"]]}}
{"result": "SELECT T1.id \nFROM TV_Channel AS T1 \nGROUP BY T1.Country \nHAVING COUNT(T1.id) > 2", "match": {"match": true, "result": [["700"]]}}
{"result": "SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(id) > 2", "match": {"match": false, "result": [], "gt": [["700"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT id FROM TV_Channel \nWHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones');", "match": {"match": true, "result": [["701"], ["703"], ["705"], ["706"], ["708"], ["709"], ["713"], ["714"], ["715"], ["717"], ["719"]]}}
{"result": "SELECT id \nFROM TV_Channel \nWHERE id NOT IN (SELECT Channel \n                 FROM Cartoon \n                 WHERE Directed_by = 'Ben Jones');", "match": {"match": true, "result": [["701"], ["703"], ["705"], ["706"], ["708"], ["709"], ["713"], ["714"], ["715"], ["717"], ["719"]]}}
{"result": "SELECT T1.`Package_Option` \nFROM `TV_Channel` AS T1 \nLEFT JOIN Cartoon AS T2 ON T2.Channel = T1.id \nWHERE T2.Directed_by IS NULL OR T2.Directed_by != 'Ben Jones';", "match": {"match": false, "result": [["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["no ( FTV )"], ["Sky Famiglia + Sky HD"], ["no ( FTV )"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"]], "gt": [["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["no ( FTV )"], ["Sky Famiglia + Sky HD"], ["no ( FTV )"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.\"Package_Option\" \nFROM \"TV_Channel\" AS T1 \nLEFT JOIN TV_series AS T2 ON T1.id = T2.Channel \nWHERE T2.\"Directed_by\" != 'Ben Jones';", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Package_Option"}}
{"result": "SELECT COUNT(Poker_Player_ID) FROM poker_player", "match": {"match": true, "result": [[5]]}}
{"result": "SELECT COUNT(Poker_Player_ID) FROM poker_player", "match": {"match": true, "result": [[5]]}}
{"result": "SELECT Earnings \nFROM poker_player \nORDER BY Earnings DESC;", "match": {"match": true, "result": [[596462.0], [476090.0], [189233.0], [142800.0], [104871.0]]}}
{"result": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "match": {"match": true, "result": [[596462.0], [476090.0], [189233.0], [142800.0], [104871.0]]}}
{"result": "SELECT \"Final_Table_Made\", \"Best_Finish\" FROM \"poker_player\"", "match": {"match": true, "result": [[42.0, 1.0], [10.0, 2.0], [21.0, 1.0], [19.0, 2.0], [26.0, 3.0]]}}
{"result": "SELECT \"Final_Table_Made\", \"Best_Finish\" FROM \"poker_player\";", "match": {"match": true, "result": [[42.0, 1.0], [10.0, 2.0], [21.0, 1.0], [19.0, 2.0], [26.0, 3.0]]}}
{"result": "SELECT AVG(Earnings) FROM poker_player", "match": {"match": true, "result": [[301891.2]]}}
{"result": "SELECT AVG(Earnings) \nFROM poker_player", "match": {"match": true, "result": [[301891.2]]}}
{"result": "SELECT MAX(Money_Rank) \nFROM poker_player", "match": {"match": false, "result": [[166.0]], "gt": [[58.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(\"Money_Rank\") FROM \"poker_player\"", "match": {"match": false, "result": [[166.0]], "gt": [[58.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000", "match": {"match": true, "result": [[26.0]]}}
{"result": "SELECT MAX(`Final_Table_Made`) \nFROM poker_player \nWHERE Earnings < 200000;", "match": {"match": true, "result": [[26.0]]}}
{"result": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID = T2.People_ID", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Teodor Salparov"], ["Yevgeni Sivozhelez"], ["Maksim Botin"], ["Semen Poltavskiy"]]}}
{"result": "SELECT T1.Name \nFROM people AS T1 \nJOIN poker_player AS T2 ON T1\"People_ID\" = T2\"People_ID\";", "match": {"match": false, "error": "Query execution failed with error: near \"\"People_ID\"\": syntax error"}}
{"result": "SELECT T2.Name \nFROM people AS T1 \nJOIN poker_player AS T2 ON T1.People_ID = T2.People_ID \nWHERE T2.Earnings > 300000", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Name"}}
{"result": "SELECT t1.Name \nFROM people t1 \nINNER JOIN poker_player t2 \nON t1.People_ID = t2.People_ID \nWHERE t2.Earnings > 300000", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Maksim Botin"]]}}
{"result": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID = T2.People_ID \nORDER BY T1.Final_Table_Made ASC", "match": {"match": true, "result": [["Teodor Salparov"], ["Maksim Botin"], ["Yevgeni Sivozhelez"], ["Semen Poltavskiy"], ["Aleksey Ostapenko"]]}}
{"result": "SELECT T1.Name FROM people AS T1 \nINNER JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID \nORDER BY T2.Final_Table_Made ASC", "match": {"match": true, "result": [["Teodor Salparov"], ["Maksim Botin"], ["Yevgeni Sivozhelez"], ["Semen Poltavskiy"], ["Aleksey Ostapenko"]]}}
{"result": "SELECT T2.`Birth_Date` FROM `poker_player` AS T1 \nJOIN `people` AS T2 ON T1.`People_ID` = T2.`People_ID` \nORDER BY T1.`Earnings` ASC \nLIMIT 1", "match": {"match": true, "result": [["August 8, 1986"]]}}
{"result": "SELECT T2.`Birth_Date` \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.`People_ID` = T2.`People_ID` \nORDER BY T1.Earnings ASC \nLIMIT 1;", "match": {"match": true, "result": [["August 8, 1986"]]}}
{"result": "SELECT MAX(Money_Rank) \nFROM poker_player \nWHERE People_ID IN \n  (SELECT People_ID \n   FROM people \n   ORDER BY Height DESC \n   LIMIT 1);", "match": {"match": true, "result": [[68.0]]}}
{"result": "SELECT T2.`Money_Rank` \nFROM people AS T1 \nINNER JOIN poker_player AS T2 \nON T1.`People_ID` = T2.`People_ID` \nORDER BY T1.`Height` DESC \nLIMIT 1;", "match": {"match": true, "result": [[68.0]]}}
{"result": "SELECT AVG(T2.Earnings) \nFROM people AS T1 \nJOIN poker_player AS T2 ON T1.People_ID = T2.People_ID \nWHERE T1.Height > 200;", "match": {"match": true, "result": [[309445.0]]}}
{"result": "SELECT AVG(Earnings) \nFROM poker_player \nWHERE (SELECT COUNT(People_ID) \n       FROM people \n       WHERE Height > 200) = (SELECT COUNT(Poker_Player_ID) \n                              FROM poker_player \n                              WHERE People_ID IN \n                                (SELECT People_ID \n                                 FROM people \n                                 WHERE Height > 200));", "match": {"match": false, "result": [[301891.2]], "gt": [[309445.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name FROM poker_player ORDER BY Earnings DESC", "match": {"match": false, "error": "Query execution failed with error: no such column: Name"}}
{"result": "SELECT T2.Name FROM poker_player AS T1 \nINNER JOIN people AS T2 ON T1.People_ID = T2.People_ID\nORDER BY T1.Earnings DESC", "match": {"match": true, "result": [["Maksim Botin"], ["Aleksey Ostapenko"], ["Teodor Salparov"], ["Semen Poltavskiy"], ["Yevgeni Sivozhelez"]]}}
{"result": "SELECT Nationality, COUNT(People_ID) AS Number_of_People \nFROM people \nGROUP BY Nationality;", "match": {"match": true, "result": [["Bulgaria", 1], ["Russia", 6]]}}
{"result": "SELECT Nationality, COUNT(People_ID) FROM people GROUP BY Nationality", "match": {"match": true, "result": [["Bulgaria", 1], ["Russia", 6]]}}
{"result": "SELECT Nationality \nFROM people \nGROUP BY Nationality \nORDER BY COUNT(Nationality) DESC \nLIMIT 1", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Nationality\nFROM people\nGROUP BY Nationality\nORDER BY COUNT(Nationality) DESC\nLIMIT 1;", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Nationality \nFROM people \nGROUP BY Nationality \nHAVING COUNT(People_ID)  > 1", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Nationality\nFROM people\nGROUP BY Nationality\nHAVING COUNT(Nationality) >= 2", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT \"Name\", \"Birth_Date\" \nFROM \"people\" \nORDER BY \"Name\" ASC", "match": {"match": true, "result": [["Aleksey Ostapenko", "May 26, 1986"], ["Maksim Botin", "July 14, 1983"], ["Roman Bragin", "April 17, 1987"], ["Semen Poltavskiy", "February 8, 1981"], ["Sergey Grankin", "January 22, 1987"], ["Teodor Salparov", "August 16, 1982"], ["Yevgeni Sivozhelez", "August 8, 1986"]]}}
{"result": "SELECT \"Name\", \"Birth_Date\" FROM people ORDER BY \"Name\" ASC", "match": {"match": true, "result": [["Aleksey Ostapenko", "May 26, 1986"], ["Maksim Botin", "July 14, 1983"], ["Roman Bragin", "April 17, 1987"], ["Semen Poltavskiy", "February 8, 1981"], ["Sergey Grankin", "January 22, 1987"], ["Teodor Salparov", "August 16, 1982"], ["Yevgeni Sivozhelez", "August 8, 1986"]]}}
{"result": "SELECT Name \nFROM people \nWHERE Nationality != 'Russia';", "match": {"match": true, "result": [["Teodor Salparov"]]}}
{"result": "SELECT Name \nFROM people \nWHERE Nationality != 'Russia'", "match": {"match": true, "result": [["Teodor Salparov"]]}}
{"result": "SELECT Name FROM people \nWHERE People_ID NOT IN (SELECT People_ID FROM poker_player);", "match": {"match": true, "result": [["Roman Bragin"], ["Sergey Grankin"]]}}
{"result": "SELECT Name \nFROM people \nWHERE People_ID NOT IN (SELECT People_ID FROM poker_player);", "match": {"match": true, "result": [["Roman Bragin"], ["Sergey Grankin"]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM people", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM people", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(Conductor_ID) FROM conductor", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT COUNT(Conductor_ID) FROM `conductor`", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT Name FROM conductor ORDER BY Age ASC", "match": {"match": true, "result": [["Antal Dor\u00e1ti"], ["Igor Stravinsky"], ["Colin Davis"], ["Michael Tilson Thomas"], ["Paul Jorgensen"], ["Antal Brown"], ["Charles Dutoit"], ["Seiji Ozawa"], ["Valeri Gergiev"], ["Pierre Boulez"], ["Gerard Schwarz"], ["Robert Craft"]]}}
{"result": "SELECT Name FROM conductor ORDER BY Age", "match": {"match": true, "result": [["Antal Dor\u00e1ti"], ["Igor Stravinsky"], ["Colin Davis"], ["Michael Tilson Thomas"], ["Paul Jorgensen"], ["Antal Brown"], ["Charles Dutoit"], ["Seiji Ozawa"], ["Valeri Gergiev"], ["Pierre Boulez"], ["Gerard Schwarz"], ["Robert Craft"]]}}
{"result": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "match": {"match": true, "result": [["Igor Stravinsky"], ["Paul Jorgensen"], ["Charles Dutoit"], ["Pierre Boulez"], ["Robert Craft"], ["Michael Tilson Thomas"]]}}
{"result": "SELECT Name \nFROM conductor \nWHERE Nationality != 'USA';", "match": {"match": true, "result": [["Igor Stravinsky"], ["Paul Jorgensen"], ["Charles Dutoit"], ["Pierre Boulez"], ["Robert Craft"], ["Michael Tilson Thomas"]]}}
{"result": "SELECT `Record_Company` \nFROM `orchestra` \nORDER BY `Year_of_Founded` DESC", "match": {"match": true, "result": [["Columbia Masterworks"], ["Philips"], ["Philips Classics Records"], ["RCA"], ["EMI"], ["Koch Records / Naxos Records"], ["Decca Records"], ["Mercury Records"], ["Deutsche Grammophon"], ["Kultur"], ["Decca Records"], ["Delos Records"]]}}
{"result": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "match": {"match": true, "result": [["Columbia Masterworks"], ["Philips"], ["Philips Classics Records"], ["RCA"], ["EMI"], ["Koch Records / Naxos Records"], ["Decca Records"], ["Mercury Records"], ["Deutsche Grammophon"], ["Kultur"], ["Decca Records"], ["Delos Records"]]}}
{"result": "SELECT AVG(`Attendance`) \nFROM `show`;", "match": {"match": true, "result": [[1326.4]]}}
{"result": "SELECT AVG(`Attendance`) \nFROM `show`;", "match": {"match": true, "result": [[1326.4]]}}
{"result": "SELECT MAX(Official_ratings_(millions)) , MIN(Official_ratings_(millions)) FROM performance WHERE Type != 'Live final'", "match": {"match": false, "error": "Query execution failed with error: no such column: millions"}}
{"result": "SELECT MAX(`Share`) , MIN(`Share`) \nFROM performance \nWHERE `Type` != 'Live final'", "match": {"match": true, "result": [["44.7%", "22.7%"]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM conductor", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM conductor", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Name \nFROM conductor \nORDER BY Year_of_Work DESC", "match": {"match": true, "result": [["Robert Craft"], ["Antal Brown"], ["Gerard Schwarz"], ["Valeri Gergiev"], ["Charles Dutoit"], ["Michael Tilson Thomas"], ["Igor Stravinsky"], ["Paul Jorgensen"], ["Pierre Boulez"], ["Antal Dor\u00e1ti"], ["Seiji Ozawa"], ["Colin Davis"]]}}
{"result": "SELECT Name \nFROM conductor \nORDER BY ABS(CAST(CURRENT_DATE AS REAL) - Year_of_Work) DESC", "match": {"match": false, "result": [["Colin Davis"], ["Antal Dor\u00e1ti"], ["Seiji Ozawa"], ["Igor Stravinsky"], ["Paul Jorgensen"], ["Pierre Boulez"], ["Charles Dutoit"], ["Michael Tilson Thomas"], ["Valeri Gergiev"], ["Antal Brown"], ["Gerard Schwarz"], ["Robert Craft"]], "gt": [["Robert Craft"], ["Antal Brown"], ["Gerard Schwarz"], ["Valeri Gergiev"], ["Charles Dutoit"], ["Michael Tilson Thomas"], ["Igor Stravinsky"], ["Paul Jorgensen"], ["Pierre Boulez"], ["Antal Dor\u00e1ti"], ["Seiji Ozawa"], ["Colin Davis"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name \nFROM conductor \nORDER BY Year_of_Work DESC \nLIMIT 1", "match": {"match": true, "result": [["Robert Craft"]]}}
{"result": "SELECT Name \nFROM conductor \nORDER BY Year_of_Work DESC \nLIMIT 1", "match": {"match": true, "result": [["Robert Craft"]]}}
{"result": "SELECT T1.Name, T2.Orchestra \nFROM conductor AS T1 \nINNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID", "match": {"match": true, "result": [["Antal Dor\u00e1ti", "London Symphony Orchestra"], ["Igor Stravinsky", "Columbia Symphony Orchestra"], ["Colin Davis", "Royal Concertgebouw Orchestra"], ["Paul Jorgensen", "Royal Danish Orchestra"], ["Antal Brown", "Detroit Symphony Orchestra"], ["Charles Dutoit", "Montreal Symphony Orchestra"], ["Gerard Schwarz", "Seattle Symphony Orchestra"], ["Pierre Boulez", "Chicago Symphony Orchestra"], ["Valeri Gergiev", "Kirov Orchestra"], ["Robert Craft", "Philharmonia Orchestra"], ["Seiji Ozawa", "Orchestre de Paris"], ["Michael Tilson Thomas", "San Francisco Symphony Orchestra"]]}}
{"result": "SELECT T2.Name, T1.Orchestra \nFROM orchestra AS T1 \nJOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID", "match": {"match": true, "result": [["Antal Dor\u00e1ti", "London Symphony Orchestra"], ["Igor Stravinsky", "Columbia Symphony Orchestra"], ["Colin Davis", "Royal Concertgebouw Orchestra"], ["Paul Jorgensen", "Royal Danish Orchestra"], ["Antal Brown", "Detroit Symphony Orchestra"], ["Charles Dutoit", "Montreal Symphony Orchestra"], ["Gerard Schwarz", "Seattle Symphony Orchestra"], ["Pierre Boulez", "Chicago Symphony Orchestra"], ["Valeri Gergiev", "Kirov Orchestra"], ["Robert Craft", "Philharmonia Orchestra"], ["Seiji Ozawa", "Orchestre de Paris"], ["Michael Tilson Thomas", "San Francisco Symphony Orchestra"]]}}
{"result": "SELECT T1.Name \nFROM conductor AS T1 \nJOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID \nGROUP BY T2.Conductor_ID \nHAVING COUNT(T2.Orchestra_ID) > 1", "match": {"match": true, "result": []}}
{"result": "SELECT Name \nFROM \"conductor\" \nWHERE Conductor_ID IN (\n  SELECT Conductor_ID \n  FROM \"orchestra\" \n  GROUP BY Conductor_ID \n  HAVING COUNT(DISTINCT Orchestra_ID) > 1\n)", "match": {"match": true, "result": []}}
{"result": "SELECT T3.Name \nFROM orchestra AS T1 \nJOIN conductor AS T3 ON T1.Conductor_ID = T3.Conductor_ID \nGROUP BY T3.Name \nORDER BY COUNT(T1.Orchestra_ID) DESC \nLIMIT 1;", "match": {"match": false, "result": [["Valeri Gergiev"]], "gt": [["Michael Tilson Thomas"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.Name \nFROM (\n  SELECT T2.Name, COUNT(T1.Orchestra_ID) AS Count \n  FROM performance AS T1 \n  JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID \n  GROUP BY T2.Name \n) AS T \nORDER BY T.Count DESC \nLIMIT 1", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Name"}}
{"result": "SELECT T2.Name \nFROM orchestra AS T1 \nINNER JOIN conductor AS T2 \nON T1.Conductor_ID = T2.Conductor_ID \nWHERE T1.Year_of_Founded > 2008;", "match": {"match": true, "result": [["Igor Stravinsky"]]}}
{"result": "SELECT T1.Name \nFROM conductor AS T1 \nINNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID \nWHERE T2.Year_of_Founded > 2008", "match": {"match": true, "result": [["Igor Stravinsky"]]}}
{"result": "SELECT Record_Company, COUNT(Orchestra_ID) AS Number_Of_Orchestras\nFROM orchestra\nGROUP BY Record_Company", "match": {"match": true, "result": [["Columbia Masterworks", 1], ["Decca Records", 2], ["Delos Records", 1], ["Deutsche Grammophon", 1], ["EMI", 1], ["Koch Records / Naxos Records", 1], ["Kultur", 1], ["Mercury Records", 1], ["Philips", 1], ["Philips Classics Records", 1], ["RCA", 1]]}}
{"result": "SELECT COUNT(T2.Orchestra_ID), T2.Record_Company \nFROM performance AS T1 \nJOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID\nGROUP BY T2.Record_Company", "match": {"match": false, "result": [[1, "Columbia Masterworks"], [2, "Decca Records"], [1, "Delos Records"], [1, "Deutsche Grammophon"], [1, "EMI"], [1, "Koch Records / Naxos Records"], [1, "Kultur"], [1, "Mercury Records"], [1, "Philips"], [1, "Philips Classics Records"]], "gt": [["Columbia Masterworks", 1], ["Decca Records", 2], ["Delos Records", 1], ["Deutsche Grammophon", 1], ["EMI", 1], ["Koch Records / Naxos Records", 1], ["Kultur", 1], ["Mercury Records", 1], ["Philips", 1], ["Philips Classics Records", 1], ["RCA", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(Major_Record_Format) ASC", "match": {"match": true, "result": [["CD / LP"], ["DVD"], ["CD"]]}}
{"result": "SELECT T2.Major_Record_Format, COUNT(T1.orchestra_id) AS frequency\nFROM performance AS T1\nJOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID\nGROUP BY T2.Major_Record_Format\nORDER BY frequency DESC", "match": {"match": false, "result": [["CD", 9], ["DVD", 1], ["CD / LP", 1]], "gt": [["CD / LP"], ["DVD"], ["CD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(Record_Company) DESC LIMIT 1", "match": {"match": true, "result": [["Decca Records"]]}}
{"result": "SELECT Record_Company, COUNT(*) as total \nFROM orchestra \nGROUP BY Record_Company \nORDER BY total DESC \nLIMIT 1;", "match": {"match": false, "result": [["Decca Records", 2]], "gt": [["Decca Records"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Orchestra \nFROM performance AS T1 \nLEFT JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID \nWHERE T1.Performance_ID IS NULL", "match": {"match": false, "result": [], "gt": [["San Francisco Symphony Orchestra"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name \nFROM orchestra \nWHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "match": {"match": false, "error": "Query execution failed with error: no such column: Name"}}
{"result": "SELECT Record_Company FROM orchestra WHERE YEAR_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE YEAR_of_Founded > 2003", "match": {"match": true, "result": [["Decca Records"]]}}
{"result": "SELECT T2.Record_Company \nFROM orchestra AS T1 \nJOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID \nJOIN show AS T3 ON T2.Performance_ID = T3.Performance_ID \nWHERE T1.Year_of_Founded < 2003 AND T3.If_first_show = 1\nINTERSECT\nSELECT T2.Record_Company \nFROM orchestra AS T1 \nJOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID \nJOIN show AS T3 ON T2.Performance_ID = T3.Performance_ID \nWHERE T1.Year_of_Founded > 2003 AND T3.If_first_show = 1", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Record_Company"}}
{"result": "SELECT COUNT(Orchestra_ID) \nFROM orchestra \nWHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD';", "match": {"match": true, "result": [[11]]}}
{"result": "SELECT COUNT(`Orchestra_ID`) FROM `orchestra` WHERE `Major_Record_Format` = 'CD' OR `Major_Record_Format` = 'DVD'", "match": {"match": true, "result": [[11]]}}
{"result": "SELECT T1.Year_of_Founded \nFROM orchestra AS T1 \nJOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID \nGROUP BY T1.Year_of_Founded \nHAVING COUNT(T2.Performance_ID) > 1;", "match": {"match": false, "result": [[2002.0], [2003.0], [2008.0]], "gt": [], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Year_of_Founded \nFROM performance AS T1 \nJOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID \nGROUP BY T2.Year_of_Founded \nHAVING COUNT(T1.Performance_ID) > 1", "match": {"match": false, "result": [[2002.0], [2003.0], [2008.0]], "gt": [], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) FROM Highschooler", "match": {"match": true, "result": [[16]]}}
{"result": "SELECT COUNT(ID) FROM Highschooler", "match": {"match": true, "result": [[16]]}}
{"result": "SELECT name, grade FROM Highschooler", "match": {"match": true, "result": [["Jordan", 9], ["Gabriel", 9], ["Tiffany", 9], ["Cassandra", 9], ["Haley", 10], ["Andrew", 10], ["Kris", 10], ["Brittany", 10], ["Alexis", 11], ["Austin", 11], ["Gabriel", 11], ["Jessica", 11], ["Jordan", 12], ["John", 12], ["Kyle", 12], ["Logan", 12]]}}
{"result": "SELECT name, grade FROM Highschooler;", "match": {"match": true, "result": [["Jordan", 9], ["Gabriel", 9], ["Tiffany", 9], ["Cassandra", 9], ["Haley", 10], ["Andrew", 10], ["Kris", 10], ["Brittany", 10], ["Alexis", 11], ["Austin", 11], ["Gabriel", 11], ["Jessica", 11], ["Jordan", 12], ["John", 12], ["Kyle", 12], ["Logan", 12]]}}
{"result": "SELECT grade FROM Highschooler", "match": {"match": true, "result": [[9], [9], [9], [9], [10], [10], [10], [10], [11], [11], [11], [11], [12], [12], [12], [12]]}}
{"result": "SELECT grade FROM Highschooler", "match": {"match": true, "result": [[9], [9], [9], [9], [10], [10], [10], [10], [11], [11], [11], [11], [12], [12], [12], [12]]}}
{"result": "SELECT grade FROM Highschooler WHERE name = 'Kyle'", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT grade \nFROM Highschooler \nWHERE name = 'Kyle';", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT name \nFROM Highschooler \nWHERE grade = 10;", "match": {"match": true, "result": [["Haley"], ["Andrew"], ["Kris"], ["Brittany"]]}}
{"result": "SELECT name \nFROM Highschooler \nWHERE grade = 10;", "match": {"match": true, "result": [["Haley"], ["Andrew"], ["Kris"], ["Brittany"]]}}
{"result": "SELECT ID FROM Highschooler WHERE name = 'Kyle'", "match": {"match": true, "result": [[1934]]}}
{"result": "SELECT ID FROM Highschooler WHERE name = 'Kyle';", "match": {"match": true, "result": [[1934]]}}
{"result": "SELECT COUNT(*) \nFROM Highschooler \nWHERE grade = 9 OR grade = 10;", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT COUNT(name)\nFROM Highschooler\nWHERE grade BETWEEN 9 AND 10", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT grade, COUNT(ID) FROM Highschooler GROUP BY grade;", "match": {"match": true, "result": [[9, 4], [10, 4], [11, 4], [12, 4]]}}
{"result": "SELECT grade, COUNT(*) \nFROM Highschooler \nGROUP BY grade", "match": {"match": true, "result": [[9, 4], [10, 4], [11, 4], [12, 4]]}}
{"result": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(ID) DESC LIMIT 1", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(ID) DESC LIMIT 1", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT grade \nFROM Highschooler \nGROUP BY grade \nHAVING COUNT(ID) >= 4;", "match": {"match": true, "result": [[9], [10], [11], [12]]}}
{"result": "SELECT grade \nFROM Highschooler \nGROUP BY grade \nHAVING COUNT(ID) >= 4", "match": {"match": true, "result": [[9], [10], [11], [12]]}}
{"result": "SELECT T1.ID, COUNT(T2.student_id) \nFROM Highschooler AS T1 \nLEFT JOIN Friend AS T2 ON T1.ID = T2.student_id \nGROUP BY T1.ID", "match": {"match": false, "result": [[1025, 0], [1101, 1], [1247, 2], [1304, 1], [1316, 1], [1381, 1], [1468, 2], [1501, 1], [1510, 2], [1641, 0], [1661, 1], [1689, 2], [1709, 1], [1782, 3], [1911, 1], [1934, 1]], "gt": [[1101, 1], [1247, 2], [1304, 1], [1316, 1], [1381, 1], [1468, 2], [1501, 1], [1510, 2], [1661, 1], [1689, 2], [1709, 1], [1782, 3], [1911, 1], [1934, 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT student_id, COUNT(*) \nFROM Friend \nGROUP BY student_id", "match": {"match": true, "result": [[1101, 1], [1247, 2], [1304, 1], [1316, 1], [1381, 1], [1468, 2], [1501, 1], [1510, 2], [1661, 1], [1689, 2], [1709, 1], [1782, 3], [1911, 1], [1934, 1]]}}
{"result": "SELECT name, ( SELECT COUNT(*) FROM Friend WHERE Highschooler.ID = Friend.student_id OR Highschooler.ID = Friend.friend_id ) AS num_friends \nFROM Highschooler", "match": {"match": false, "result": [["Jordan", 2], ["Gabriel", 3], ["Tiffany", 2], ["Cassandra", 2], ["Haley", 2], ["Andrew", 4], ["Kris", 3], ["Brittany", 2], ["Alexis", 4], ["Austin", 2], ["Gabriel", 2], ["Jessica", 3], ["Jordan", 3], ["John", 1], ["Kyle", 3], ["Logan", 2]], "gt": [["Haley", 1], ["Alexis", 2], ["Jordan", 1], ["Austin", 1], ["Tiffany", 1], ["Kris", 2], ["Jessica", 1], ["Jordan", 2], ["Logan", 1], ["Gabriel", 2], ["Cassandra", 1], ["Andrew", 3], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name, COUNT(*) as friends \nFROM Highschooler \nLEFT JOIN Friend \nON Highschooler.ID = Friend.student_id \nGROUP BY name", "match": {"match": false, "result": [["Alexis", 2], ["Andrew", 3], ["Austin", 1], ["Brittany", 1], ["Cassandra", 1], ["Gabriel", 3], ["Haley", 1], ["Jessica", 1], ["John", 1], ["Jordan", 3], ["Kris", 2], ["Kyle", 1], ["Logan", 1], ["Tiffany", 1]], "gt": [["Haley", 1], ["Alexis", 2], ["Jordan", 1], ["Austin", 1], ["Tiffany", 1], ["Kris", 2], ["Jessica", 1], ["Jordan", 2], ["Logan", 1], ["Gabriel", 2], ["Cassandra", 1], ["Andrew", 3], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.name \nFROM (\n  SELECT name, COUNT(*) as count \n  FROM Highschooler H \n  LEFT JOIN Friend F ON H.ID = F.student_id \n  GROUP BY name \n) T \nORDER BY T.count DESC \nLIMIT 1", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "SELECT H.name \nFROM Highschooler H \nJOIN ( SELECT student_id, COUNT(*) as num_friends \n       FROM Friend \n       GROUP BY student_id \n       ORDER BY num_friends DESC \n       LIMIT 1) F \nON H.ID = F.student_id;", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID IN (SELECT student_id \n              FROM Friend \n              GROUP BY student_id \n              HAVING COUNT(student_id) >= 3);", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "SELECT name FROM Highschooler WHERE ID IN (\n  SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) >= 3\n  UNION\n  SELECT friend_id FROM Friend GROUP BY friend_id HAVING COUNT(*) >= 3\n)", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "SELECT T2.name \nFROM Friend AS T1 \nJOIN Highschooler AS T2 ON T1.friend_id = T2.ID \nJOIN Highschooler AS T3 ON T1.student_id = T3.ID \nWHERE T3.name = 'Kyle'", "match": {"match": true, "result": [["Jordan"]]}}
{"result": "SELECT T1.name \nFROM Highschooler T1 \nJOIN Friend T2 ON T1.ID = T2.friend_id \nWHERE T1.name = 'Kyle'", "match": {"match": false, "result": [["Kyle"], ["Kyle"]], "gt": [["Jordan"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(T2.student_id) \nFROM Highschooler AS T1 \nJOIN Friend AS T2 ON T1.ID = T2.student_id \nWHERE T1.name = 'Kyle';", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT (friend_id) \nFROM Friend \nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT ID \nFROM Highschooler \nWHERE ID NOT IN (\n  SELECT student_id \n  FROM Friend \n  UNION \n  SELECT friend_id \n  FROM Friend\n);", "match": {"match": false, "result": [], "gt": [[1025], [1641]], "error": "Query result does not match ground truth."}}
{"result": "SELECT ID \nFROM Highschooler \nWHERE ID NOT IN (SELECT student_id FROM Friend);", "match": {"match": true, "result": [[1025], [1641]]}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID NOT IN (SELECT student_id FROM Friend);", "match": {"match": true, "result": [["Brittany"], ["John"]]}}
{"result": "SELECT DISTINCT T2.name \nFROM Friend AS T1 \nRIGHT JOIN Highschooler AS T2 ON T1.student_id = T2.ID", "match": {"match": false, "result": [["Jordan"], ["Gabriel"], ["Tiffany"], ["Cassandra"], ["Andrew"], ["Kris"], ["Haley"], ["Alexis"], ["Jessica"], ["Austin"], ["Kyle"], ["Logan"], ["Brittany"], ["John"]], "gt": [["Brittany"], ["John"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT H.ID \nFROM Highschooler H\nJOIN Friend F ON H.ID = F.student_id\nJOIN Likes L ON H.ID = L.student_id\nWHERE (H.ID, F.friend_id) IN (SELECT liked_id, student_id FROM Likes WHERE liked_id != student_id)", "match": {"match": false, "result": [[1247], [1501], [1689]], "gt": [[1101], [1247], [1304], [1468], [1501], [1689], [1709], [1934]], "error": "Query result does not match ground truth."}}
{"result": "SELECT ID \nFROM Highschooler \nWHERE ID IN (SELECT student_id FROM Friend) \nAND ID IN (SELECT liked_id FROM Likes);", "match": {"match": true, "result": [[1101], [1247], [1304], [1468], [1501], [1689], [1709], [1934]]}}
{"result": "SELECT H.name \nFROM Highschooler H \nJOIN Friend F ON H.ID = F.student_id \nJOIN Likes L ON H.ID = L.student_id \nWHERE 'F' IN (SELECT friend_id FROM Friend WHERE student_id = F.student_id) \n  AND 'L' IN (SELECT liked_id FROM Likes WHERE student_id = L.student_id);", "match": {"match": false, "result": [], "gt": [["Alexis"], ["Cassandra"], ["Gabriel"], ["Haley"], ["Jessica"], ["Jordan"], ["Kris"], ["Kyle"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID IN (SELECT student_id FROM Friend \n             INTERSECT \n             SELECT liked_id FROM Likes);", "match": {"match": false, "result": [["Haley"], ["Alexis"], ["Jordan"], ["Kris"], ["Jessica"], ["Gabriel"], ["Cassandra"], ["Kyle"]], "gt": [["Alexis"], ["Cassandra"], ["Gabriel"], ["Haley"], ["Jessica"], ["Jordan"], ["Kris"], ["Kyle"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) , student_id \nFROM Likes \nGROUP BY student_id", "match": {"match": false, "result": [[1, 1025], [1, 1247], [1, 1316], [1, 1501], [1, 1641], [1, 1689], [1, 1709], [1, 1782], [1, 1911], [1, 1934]], "gt": [[1025, 1], [1247, 1], [1316, 1], [1501, 1], [1641, 1], [1689, 1], [1709, 1], [1782, 1], [1911, 1], [1934, 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT student_id, COUNT(*) FROM Likes GROUP BY student_id", "match": {"match": true, "result": [[1025, 1], [1247, 1], [1316, 1], [1501, 1], [1641, 1], [1689, 1], [1709, 1], [1782, 1], [1911, 1], [1934, 1]]}}
{"result": "SELECT H.name, COUNT(*) as likes_from_others\nFROM Highschooler H\nJOIN Likes L ON H.ID = L.student_id\nGROUP BY H.name", "match": {"match": false, "result": [["Alexis", 1], ["Andrew", 1], ["Austin", 1], ["Brittany", 1], ["Cassandra", 1], ["Gabriel", 2], ["Jessica", 1], ["John", 1], ["Kyle", 1]], "gt": [["John", 1], ["Alexis", 1], ["Austin", 1], ["Jessica", 1], ["Brittany", 1], ["Gabriel", 1], ["Cassandra", 1], ["Andrew", 1], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.name, COUNT(T1.student_id) \nFROM Likes AS T1 \nGROUP BY T1.name", "match": {"match": false, "error": "Query execution failed with error: no such column: T1.name"}}
{"result": "SELECT name FROM Highschooler WHERE ID IN (\n  SELECT liked_id FROM Likes GROUP BY liked_id ORDER BY COUNT(liked_id) DESC LIMIT 1\n)", "match": {"match": false, "result": [["Cassandra"]], "gt": [["John"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.name FROM (\n    SELECT L.student_id, COUNT(*) likes \n    FROM Likes L GROUP BY L.student_id\n) AS subquery\nJOIN Highschooler T ON T.ID = subquery.student_id\nORDER BY likes DESC\nLIMIT 1;", "match": {"match": true, "result": [["John"]]}}
{"result": "SELECT T2.name \nFROM Likes AS T1 \nJOIN Highschooler AS T2 ON T1.student_id = T2.ID \nGROUP BY T1.student_id \nHAVING COUNT(T1.student_id) >= 2", "match": {"match": true, "result": []}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID IN (SELECT student_id \n              FROM Likes \n              GROUP BY student_id \n              HAVING COUNT(liked_id) >= 2);", "match": {"match": true, "result": []}}
{"result": "SELECT name \nFROM Highschooler \nWHERE grade > 5 AND ID IN (SELECT student_id \n                             FROM Friend \n                             GROUP BY student_id \n                             HAVING COUNT(*) >= 2)", "match": {"match": true, "result": [["Alexis"], ["Kris"], ["Jordan"], ["Gabriel"], ["Andrew"]]}}
{"result": "SELECT name \nFROM Highschooler \nWHERE grade > 5 AND ID IN ( \n  SELECT student_id \n  FROM Friend \n  GROUP BY student_id \n  HAVING COUNT(*) >= 2 \n);", "match": {"match": true, "result": [["Alexis"], ["Kris"], ["Jordan"], ["Gabriel"], ["Andrew"]]}}
{"result": "SELECT COUNT(*) \nFROM Likes \nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(*)\nFROM Likes\nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT AVG(grade) \nFROM Highschooler \nWHERE ID IN (SELECT student_id FROM Friend);", "match": {"match": true, "result": [[10.428571428571429]]}}
{"result": "SELECT AVG(T2.grade) \nFROM Friend AS T1 \nJOIN Highschooler AS T2 ON T1.student_id = T2.ID \nWHERE T1.student_id != T1.friend_id", "match": {"match": false, "result": [[10.25]], "gt": [[10.428571428571429]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MIN(grade) \nFROM Highschooler \nWHERE ID NOT IN (SELECT student_id FROM Friend)", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT MIN(grade) FROM Highschooler \nWHERE ID NOT IN (SELECT student_id FROM Friend);", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT state \nFROM Owners \nINTERSECT \nSELECT state \nFROM Professionals", "match": {"match": true, "result": [["Indiana"], ["Mississippi"], ["Wisconsin"]]}}
{"result": "SELECT DISTINCT state \nFROM Owners \nINTERSECT \nSELECT DISTINCT state \nFROM Professionals;", "match": {"match": true, "result": [["Indiana"], ["Mississippi"], ["Wisconsin"]]}}
{"result": "SELECT AVG(T2.age) \nFROM Treatments AS T1 \nJOIN Dogs AS T2 ON T1.dog_id = T2.dog_id", "match": {"match": false, "result": [[5.466666666666667]], "gt": [[5.111111111111111]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(Dogs.age) \nFROM Dogs \nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id", "match": {"match": false, "result": [[5.466666666666667]], "gt": [[5.111111111111111]], "error": "Query result does not match ground truth."}}
{"result": "SELECT `professional_id`, `last_name`, `cell_number`\nFROM `Professionals`\nWHERE `state` = 'Indiana'\nOR `professional_id` IN (\n  SELECT `professional_id`\n  FROM `Treatments`\n  GROUP BY `professional_id`\n  HAVING COUNT(`treatment_id`) > 2\n);", "match": {"match": true, "result": [[1, "Braun", "(275)939-2435x80863"], [8, "Hyatt", "328.842.3792"], [9, "Kshlerin", "962-983-8109x3509"]]}}
{"result": "SELECT `professional_id`, `last_name`, `cell_number` \nFROM `Professionals` \nWHERE `state` = 'IN' OR `professional_id` IN \n(\n  SELECT `professional_id` \n  FROM `Treatments` \n  GROUP BY `professional_id` \n  HAVING COUNT(`treatment_id`) > 2\n);", "match": {"match": false, "result": [[9, "Kshlerin", "962-983-8109x3509"]], "gt": [[1, "Braun", "(275)939-2435x80863"], [8, "Hyatt", "328.842.3792"], [9, "Kshlerin", "962-983-8109x3509"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.name \nFROM Dogs AS T1 \nJOIN Treatments AS T2 ON T1.dog_id = T2.dog_id \nWHERE T2.cost_of_treatment < 1000", "match": {"match": false, "result": [["Lyric"], ["Houston"], ["Lyric"], ["Hipolito"], ["Holden"], ["Troy"], ["Evangeline"], ["Hipolito"], ["Lyric"], ["Troy"], ["Evangeline"], ["Jesus"], ["Narciso"], ["Troy"], ["Kacey"]], "gt": [["Kacey"], ["Hipolito"], ["Mavis"], ["Houston"], ["Jeffrey"], ["Merritt"], ["Narciso"], ["George"], ["Bessie"], ["Betty"], ["Holden"], ["Jesus"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.name \nFROM Dogs T1 \nJOIN Treatments T2 ON T1.dog_id = T2.dog_id \nJOIN Owners T3 ON T3.owner_id = T1.owner_id \nGROUP BY T1.name \nHAVING SUM(T2.cost_of_treatment) > 0 AND SUM(T2.cost_of_treatment) <= 1000", "match": {"match": false, "result": [["Hipolito"], ["Holden"], ["Houston"], ["Jesus"], ["Kacey"], ["Narciso"]], "gt": [["Kacey"], ["Hipolito"], ["Mavis"], ["Houston"], ["Jeffrey"], ["Merritt"], ["Narciso"], ["George"], ["Bessie"], ["Betty"], ["Holden"], ["Jesus"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT first_name \nFROM ( \n  SELECT first_name FROM Owners \n  UNION ALL \n  SELECT first_name FROM Professionals \n  UNION ALL \n  SELECT name FROM Dogs \n) AS T \nWHERE first_name NOT IN ( \n  SELECT name \n  FROM Dogs \n);", "match": {"match": false, "result": [["Nora"], ["Melisa"], ["Jaclyn"], ["Tre"], ["Johann"], ["Kade"], ["Emelie"], ["Rolando"], ["Adelle"], ["Lorenz"], ["Gay"], ["Orlando"], ["Cindy"], ["Rachelle"], ["Heather"], ["Taryn"], ["Jayson"], ["Olaf"], ["Vernice"], ["Danny"], ["Ruben"], ["Velva"], ["Karley"], ["Monte"], ["Domenica"], ["Brady"], ["Winfield"], ["Ericka"], ["Sigurd"], ["Lesly"]], "gt": [["Adelle"], ["Brady"], ["Cindy"], ["Danny"], ["Domenica"], ["Emelie"], ["Ericka"], ["Gay"], ["Heather"], ["Jaclyn"], ["Jayson"], ["Johann"], ["Kade"], ["Karley"], ["Lesly"], ["Lorenz"], ["Melisa"], ["Monte"], ["Nora"], ["Olaf"], ["Orlando"], ["Rachelle"], ["Rolando"], ["Ruben"], ["Sigurd"], ["Taryn"], ["Tre"], ["Velva"], ["Vernice"], ["Winfield"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT first_name \nFROM Owners \nWHERE first_name NOT IN ( SELECT name FROM Dogs )\nINTERSECT\nSELECT first_name \nFROM Professionals;", "match": {"match": false, "result": [], "gt": [["Adelle"], ["Brady"], ["Cindy"], ["Danny"], ["Domenica"], ["Emelie"], ["Ericka"], ["Gay"], ["Heather"], ["Jaclyn"], ["Jayson"], ["Johann"], ["Kade"], ["Karley"], ["Lesly"], ["Lorenz"], ["Melisa"], ["Monte"], ["Nora"], ["Olaf"], ["Orlando"], ["Rachelle"], ["Rolando"], ["Ruben"], ["Sigurd"], ["Taryn"], ["Tre"], ["Velva"], ["Vernice"], ["Winfield"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT P.`professional_id`, P.`role_code`, P.`email_address` \nFROM `Professionals` P\nLEFT JOIN `Treatments` T ON P.`professional_id` = T.`professional_id`\nWHERE T.`treatment_id` IS NULL", "match": {"match": true, "result": [[1, "Employee", "deanna.schuster@example.com"], [2, "Employee", "lucile.shanahan@example.org"], [3, "Employee", "uboehm@example.org"], [11, "Employee", "west.eula@example.net"], [12, "Veterenarian", "marquardt.furman@example.org"], [13, "Veterenarian", "delphine29@example.com"], [15, "Employee", "jeichmann@example.com"]]}}
{"result": "SELECT P.`professional_id`, P.`role_code`, P.`email_address` \nFROM `Professionals` P\nWHERE P.`professional_id` NOT IN (\n  SELECT `professional_id` \n  FROM `Treatments`\n);", "match": {"match": true, "result": [[1, "Employee", "deanna.schuster@example.com"], [2, "Employee", "lucile.shanahan@example.org"], [3, "Employee", "uboehm@example.org"], [11, "Employee", "west.eula@example.net"], [12, "Veterenarian", "marquardt.furman@example.org"], [13, "Veterenarian", "delphine29@example.com"], [15, "Employee", "jeichmann@example.com"]]}}
{"result": "SELECT T1.owner_id, T1.first_name, T1.last_name \nFROM Owners AS T1 \nJOIN Dogs AS T2 ON T1.owner_id = T2.owner_id \nGROUP BY T1.owner_id, T1.first_name, T1.last_name \nORDER BY COUNT(T2.dog_id) DESC \nLIMIT 1", "match": {"match": true, "result": [[14, "Rachelle", "Funk"]]}}
{"result": "SELECT o.owner_id, o.first_name, o.last_name\nFROM Owners o\nJOIN (\n  SELECT owner_id, COUNT(dog_id) AS num_dogs\n  FROM Dogs\n  GROUP BY owner_id\n) d ON o.owner_id = d.owner_id\nORDER BY d.num_dogs DESC\nLIMIT 1", "match": {"match": true, "result": [[14, "Rachelle", "Funk"]]}}
{"result": "SELECT T1.professional_id, T1.role_code, T1.first_name \nFROM Professionals T1 \nJOIN Treatments T2 ON T1.professional_id = T2.professional_id \nGROUP BY T1.professional_id, T1.role_code, T1.first_name \nHAVING COUNT(T2.treatment_id) >= 2", "match": {"match": true, "result": [[4, "Veterenarian", "Vernice"], [6, "Veterenarian", "Ruben"], [8, "Employee", "Karley"], [9, "Veterenarian", "Monte"], [10, "Employee", "Domenica"], [14, "Employee", "Sigurd"]]}}
{"result": "SELECT T1.professional_id, T1.role_code, T1.first_name \nFROM Professionals T1 \nINNER JOIN Treatments T2 ON T1.professional_id = T2.professional_id \nGROUP BY T1.professional_id, T1.role_code, T1.first_name \nHAVING COUNT(T2.treatment_id) >= 2", "match": {"match": true, "result": [[4, "Veterenarian", "Vernice"], [6, "Veterenarian", "Ruben"], [8, "Employee", "Karley"], [9, "Veterenarian", "Monte"], [10, "Employee", "Domenica"], [14, "Employee", "Sigurd"]]}}
{"result": "SELECT B.breed_name \nFROM Breeds B \nJOIN Dogs D ON B.breed_code = D.breed_code \nGROUP BY B.breed_code \nORDER BY COUNT(D.dog_id) DESC \nLIMIT 1;", "match": {"match": true, "result": [["Bulldog"]]}}
{"result": "SELECT T1.breed_name \nFROM Breeds AS T1 \nJOIN Dogs AS T2 ON T1.breed_code = T2.breed_code \nGROUP BY T1.breed_code \nORDER BY COUNT(T2.dog_id) DESC \nLIMIT 1;", "match": {"match": true, "result": [["Bulldog"]]}}
{"result": "SELECT o.owner_id, o.last_name\nFROM Owners o\nJOIN (\n  SELECT t.dog_id, o.owner_id, COUNT(t.treatment_id) as num_treatments\n  FROM Treatments t\n  JOIN Dogs d ON t.dog_id = d.dog_id\n  JOIN Owners o ON d.owner_id = o.owner_id\n  GROUP BY t.dog_id, o.owner_id\n) dt ON o.owner_id = dt.owner_id\nGROUP BY o.owner_id, o.last_name\nORDER BY COUNT(dt.num_treatments) DESC\nLIMIT 1", "match": {"match": false, "result": [[3, "Stoltenberg"]], "gt": [[14, "Funk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.owner_id, T1.last_name \nFROM Owners T1 \nJOIN Dogs T2 ON T1.owner_id = T2.owner_id \nJOIN Treatments T3 ON T2.dog_id = T3.dog_id \nGROUP BY T1.owner_id \nORDER BY SUM(T3.cost_of_treatment) DESC \nLIMIT 1", "match": {"match": false, "result": [[3, "Stoltenberg"]], "gt": [[14, "Funk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.treatment_type_description \nFROM Treatments AS T1 \nJOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code \nGROUP BY T2.treatment_type_code \nORDER BY SUM(T1.cost_of_treatment) ASC \nLIMIT 1", "match": {"match": true, "result": [["Take for a Walk"]]}}
{"result": "SELECT tt.treatment_type_description \nFROM Treatment_Types tt \nJOIN Treatments t ON tt.treatment_type_code = t.treatment_type_code \nGROUP BY tt.treatment_type_code \nORDER BY SUM(t.cost_of_treatment) ASC \nLIMIT 1", "match": {"match": true, "result": [["Take for a Walk"]]}}
{"result": "SELECT T1.owner_id, T1.zip_code \nFROM Owners AS T1 \nJOIN Dogs AS T2 ON T1.owner_id = T2.owner_id \nJOIN Treatments AS T3 ON T2.dog_id = T3.dog_id \nJOIN Charges AS T4 ON T3.cost_of_treatment = T4.charge_amount \nGROUP BY T1.owner_id \nORDER BY SUM(T4.charge_amount) DESC \nLIMIT 1", "match": {"match": false, "result": [], "gt": [[3, "02647"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.owner_id, T1.zip_code\nFROM Owners T1\nJOIN (\n  SELECT owner_id, SUM(T2.cost_of_treatment) AS total_cost\n  FROM Treatments T2\n  GROUP BY owner_id\n) T3 ON T1.owner_id = T3.owner_id\nORDER BY T3.total_cost DESC\nLIMIT 1", "match": {"match": false, "error": "Query execution failed with error: no such column: owner_id"}}
{"result": "SELECT T1.professional_id, T1.cell_number \nFROM Professionals T1 \nJOIN (\n  SELECT professional_id, treatment_type_code \n  FROM Treatments \n  GROUP BY professional_id \n  HAVING COUNT(treatment_type_code) >= 2\n) T2 \nON T1.professional_id = T2.professional_id", "match": {"match": true, "result": [[4, "00230569697"], [6, "139-321-7313"], [8, "328.842.3792"], [9, "962-983-8109x3509"], [10, "461-801-2600"], [14, "1-185-137-1945x409"]]}}
{"result": "SELECT DISTINCT T1.professional_id, T1.cell_number \nFROM Professionals T1 \nJOIN Treatments T2 ON T1.professional_id = T2.professional_id \nGROUP BY T1.professional_id, T1.cell_number \nHAVING COUNT(T1.professional_id) >= 2", "match": {"match": true, "result": [[4, "00230569697"], [6, "139-321-7313"], [8, "328.842.3792"], [9, "962-983-8109x3509"], [10, "461-801-2600"], [14, "1-185-137-1945x409"]]}}
{"result": "SELECT DISTINCT T1.first_name, T1.last_name \nFROM Professionals T1\nJOIN Treatments T2 ON T1.professional_id = T2.professional_id\nWHERE T2.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);", "match": {"match": false, "result": [["Domenica", "Jacobs"], ["Vernice", "Tillman"], ["Karley", "Hyatt"], ["Ruben", "O'Reilly"], ["Monte", "Kshlerin"]], "gt": [["Taryn", "Braun"], ["Jayson", "Ullrich"], ["Olaf", "Watsica"], ["Vernice", "Tillman"], ["Danny", "Considine"], ["Ruben", "O'Reilly"], ["Velva", "Hayes"], ["Karley", "Hyatt"], ["Monte", "Kshlerin"], ["Domenica", "Jacobs"], ["Brady", "Pouros"], ["Winfield", "Christiansen"], ["Ericka", "Murazik"], ["Sigurd", "Frami"], ["Lesly", "Walter"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.first_name, T2.last_name \nFROM Treatments AS T1 \nJOIN Professionals AS T2 ON T1.professional_id = T2.professional_id \nWHERE T1.cost_of_treatment < ( SELECT AVG(cost_of_treatment) FROM Treatments );", "match": {"match": false, "result": [["Domenica", "Jacobs"], ["Vernice", "Tillman"], ["Karley", "Hyatt"], ["Vernice", "Tillman"], ["Ruben", "O'Reilly"], ["Domenica", "Jacobs"], ["Monte", "Kshlerin"], ["Monte", "Kshlerin"]], "gt": [["Taryn", "Braun"], ["Jayson", "Ullrich"], ["Olaf", "Watsica"], ["Vernice", "Tillman"], ["Danny", "Considine"], ["Ruben", "O'Reilly"], ["Velva", "Hayes"], ["Karley", "Hyatt"], ["Monte", "Kshlerin"], ["Domenica", "Jacobs"], ["Brady", "Pouros"], ["Winfield", "Christiansen"], ["Ericka", "Murazik"], ["Sigurd", "Frami"], ["Lesly", "Walter"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.date_of_treatment, T1.first_name \nFROM Professionals T1\nJOIN Treatments T2 ON T1.professional_id = T2.professional_id", "match": {"match": true, "result": [["2018-03-19 04:39:54", "Monte"], ["2018-03-15 20:25:34", "Domenica"], ["2018-03-08 05:26:23", "Vernice"], ["2018-03-01 04:14:46", "Karley"], ["2018-03-23 13:52:10", "Sigurd"], ["2018-03-11 04:23:15", "Vernice"], ["2018-03-10 11:45:58", "Sigurd"], ["2018-03-24 22:25:58", "Ruben"], ["2018-03-14 19:10:40", "Domenica"], ["2018-02-28 17:09:43", "Velva"], ["2018-03-13 12:22:58", "Danny"], ["2018-03-16 10:27:36", "Monte"], ["2018-02-26 09:08:53", "Karley"], ["2018-03-04 20:33:43", "Monte"], ["2018-03-15 19:10:02", "Ruben"]]}}
{"result": "SELECT date_of_treatment, T2.first_name \nFROM Treatments AS T1 \nJOIN Professionals AS T2 ON T1.professional_id = T2.professional_id", "match": {"match": true, "result": [["2018-03-19 04:39:54", "Monte"], ["2018-03-15 20:25:34", "Domenica"], ["2018-03-08 05:26:23", "Vernice"], ["2018-03-01 04:14:46", "Karley"], ["2018-03-23 13:52:10", "Sigurd"], ["2018-03-11 04:23:15", "Vernice"], ["2018-03-10 11:45:58", "Sigurd"], ["2018-03-24 22:25:58", "Ruben"], ["2018-03-14 19:10:40", "Domenica"], ["2018-02-28 17:09:43", "Velva"], ["2018-03-13 12:22:58", "Danny"], ["2018-03-16 10:27:36", "Monte"], ["2018-02-26 09:08:53", "Karley"], ["2018-03-04 20:33:43", "Monte"], ["2018-03-15 19:10:02", "Ruben"]]}}
{"result": "SELECT \n    T2.treatment_type_description, \n    T1.cost_of_treatment\nFROM \n    Treatments AS T1\nJOIN \n    Treatment_Types AS T2\nON \n    T1.treatment_type_code = T2.treatment_type_code", "match": {"match": false, "result": [["Take for a Walk", 567], ["Vaccination", 147], ["Physical examination", 429], ["Vaccination", 266], ["Vaccination", 668], ["Physical examination", 313], ["Physical examination", 852], ["Physical examination", 407], ["Take for a Walk", 139], ["Take for a Walk", 681], ["Vaccination", 514], ["Physical examination", 428], ["Vaccination", 945], ["Take for a Walk", 349], ["Take for a Walk", 656]], "gt": [[567, "Take for a Walk"], [147, "Vaccination"], [429, "Physical examination"], [266, "Vaccination"], [668, "Vaccination"], [313, "Physical examination"], [852, "Physical examination"], [407, "Physical examination"], [139, "Take for a Walk"], [681, "Take for a Walk"], [514, "Vaccination"], [428, "Physical examination"], [945, "Vaccination"], [349, "Take for a Walk"], [656, "Take for a Walk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.cost_of_treatment, T2.treatment_type_description\nFROM Treatments AS T1 \nINNER JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code", "match": {"match": true, "result": [[567, "Take for a Walk"], [147, "Vaccination"], [429, "Physical examination"], [266, "Vaccination"], [668, "Vaccination"], [313, "Physical examination"], [852, "Physical examination"], [407, "Physical examination"], [139, "Take for a Walk"], [681, "Take for a Walk"], [514, "Vaccination"], [428, "Physical examination"], [945, "Vaccination"], [349, "Take for a Walk"], [656, "Take for a Walk"]]}}
{"result": "SELECT o.first_name, o.last_name, d.size_code \nFROM Owners o \nJOIN Dogs d ON o.owner_id = d.owner_id", "match": {"match": true, "result": [["Jaclyn", "Stoltenberg", "LGE"], ["Gay", "Feil", "LGE"], ["Nora", "Haley", "MED"], ["Rachelle", "Funk", "LGE"], ["Emelie", "Mertz", "MED"], ["Johann", "Fisher", "MED"], ["Jaclyn", "Stoltenberg", "MED"], ["Rachelle", "Funk", "SML"], ["Melisa", "DuBuque", "MED"], ["Kade", "Rippin", "MED"], ["Cindy", "Schmitt", "LGE"], ["Orlando", "Price", "MED"], ["Rolando", "Prohaska", "SML"], ["Rachelle", "Funk", "MED"], ["Lorenz", "Nicolas", "MED"]]}}
{"result": "SELECT o.first_name, o.last_name, d.size_code \nFROM Owners o \nJOIN Dogs d ON o.owner_id = d.owner_id", "match": {"match": true, "result": [["Jaclyn", "Stoltenberg", "LGE"], ["Gay", "Feil", "LGE"], ["Nora", "Haley", "MED"], ["Rachelle", "Funk", "LGE"], ["Emelie", "Mertz", "MED"], ["Johann", "Fisher", "MED"], ["Jaclyn", "Stoltenberg", "MED"], ["Rachelle", "Funk", "SML"], ["Melisa", "DuBuque", "MED"], ["Kade", "Rippin", "MED"], ["Cindy", "Schmitt", "LGE"], ["Orlando", "Price", "MED"], ["Rolando", "Prohaska", "SML"], ["Rachelle", "Funk", "MED"], ["Lorenz", "Nicolas", "MED"]]}}
{"result": "SELECT T1.first_name, T2.name \nFROM Owners AS T1 \nINNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id", "match": {"match": true, "result": [["Jaclyn", "Kacey"], ["Gay", "Hipolito"], ["Nora", "Mavis"], ["Rachelle", "Houston"], ["Emelie", "Jeffrey"], ["Johann", "Merritt"], ["Jaclyn", "Narciso"], ["Rachelle", "George"], ["Melisa", "Bessie"], ["Kade", "Troy"], ["Cindy", "Betty"], ["Orlando", "Holden"], ["Rolando", "Jesus"], ["Rachelle", "Lyric"], ["Lorenz", "Evangeline"]]}}
{"result": "SELECT O.first_name, D.name \nFROM Owners O \nJOIN Dogs D ON O.owner_id = D.owner_id;", "match": {"match": true, "result": [["Jaclyn", "Kacey"], ["Gay", "Hipolito"], ["Nora", "Mavis"], ["Rachelle", "Houston"], ["Emelie", "Jeffrey"], ["Johann", "Merritt"], ["Jaclyn", "Narciso"], ["Rachelle", "George"], ["Melisa", "Bessie"], ["Kade", "Troy"], ["Cindy", "Betty"], ["Orlando", "Holden"], ["Rolando", "Jesus"], ["Rachelle", "Lyric"], ["Lorenz", "Evangeline"]]}}
{"result": "SELECT T1.name, T2.date_of_treatment \nFROM Dogs T1 \nJOIN Treatments T2 ON T1.dog_id = T2.dog_id \nJOIN Breeds T3 ON T1.breed_code = T3.breed_code \nWHERE T3.breed_name = (SELECT breed_name \n                       FROM Breeds \n                       GROUP BY breed_name \n                       ORDER BY COUNT(T1.dog_id) ASC \n                       LIMIT 1)", "match": {"match": false, "error": "Query execution failed with error: no such column: T1.dog_id"}}
{"result": "SELECT d.`name`, t.`date_of_treatment` \nFROM `Dogs` d \nJOIN `Treatments` t ON d.`dog_id` = t.`dog_id` \nJOIN `Breeds` b ON d.`breed_code` = b.`breed_code` \nWHERE b.`breed_name` = (SELECT `breed_name` FROM `Breeds` ORDER BY COUNT(d.`dog_id`) LIMIT 1)", "match": {"match": false, "error": "Query execution failed with error: no such column: d.dog_id"}}
{"result": "SELECT T1.first_name, T2.name \nFROM Owners T1 \nINNER JOIN Dogs T2 ON T1.owner_id = T2.owner_id \nWHERE T1.state = 'VA'", "match": {"match": false, "result": [], "gt": [["Melisa", "Bessie"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT o.first_name, d.name \nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nWHERE o.state = 'Virginia'", "match": {"match": true, "result": [["Melisa", "Bessie"]]}}
{"result": "SELECT T2.date_arrived, T2.date_departed \nFROM Treatments AS T1 \nJOIN Dogs AS T2 ON T1.dog_id = T2.dog_id", "match": {"match": false, "result": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "gt": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.date_arrived, T1.date_departed \nFROM Dogs AS T1 \nJOIN Treatments AS T2 ON T1.dog_id = T2.dog_id", "match": {"match": false, "result": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "gt": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.last_name \nFROM Owners AS T1 \nJOIN Dogs AS T2 ON T1.owner_id = T2.owner_id \nORDER BY T2.date_of_birth DESC \nLIMIT 1", "match": {"match": false, "result": [["Mertz"]], "gt": [["Feil"], ["Fisher"], ["Rippin"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.last_name \nFROM Owners AS T1 \nINNER JOIN Dogs AS T2 \nON T1.owner_id = T2.owner_id \nORDER BY T2.date_of_birth DESC \nLIMIT 1", "match": {"match": false, "result": [["Mertz"]], "gt": [["Feil"], ["Fisher"], ["Rippin"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT email_address \nFROM Professionals \nWHERE state IN ('HI', 'WI');", "match": {"match": false, "result": [], "gt": [["uboehm@example.org"], ["mekhi.little@example.org"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT email_address \nFROM Professionals \nWHERE state IN ('HI', 'WI');", "match": {"match": false, "result": [], "gt": [["uboehm@example.org"], ["mekhi.little@example.org"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT date_arrived, date_departed \nFROM Dogs", "match": {"match": true, "result": [["2017-09-08 20:10:13", "2018-03-25 06:58:44"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-25 10:14:05", "2018-03-25 10:25:46"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-10-25 00:55:34", "2018-03-25 04:50:22"], ["2017-04-15 09:25:31", "2018-03-25 13:07:04"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-10-16 20:06:21", "2018-03-25 02:47:40"], ["2018-01-17 11:44:16", "2018-03-25 06:46:07"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-07-25 15:19:07", "2018-03-25 15:05:16"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"]]}}
{"result": "SELECT date_arrived, date_departed \nFROM Dogs;", "match": {"match": true, "result": [["2017-09-08 20:10:13", "2018-03-25 06:58:44"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-25 10:14:05", "2018-03-25 10:25:46"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-10-25 00:55:34", "2018-03-25 04:50:22"], ["2017-04-15 09:25:31", "2018-03-25 13:07:04"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-10-16 20:06:21", "2018-03-25 02:47:40"], ["2018-01-17 11:44:16", "2018-03-25 06:46:07"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-07-25 15:19:07", "2018-03-25 15:05:16"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"]]}}
{"result": "SELECT COUNT(*) \nFROM Dogs \nWHERE dog_id IN ( SELECT dog_id \n                  FROM Treatments );", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(*) \nFROM Dogs \nWHERE dog_id IN (SELECT dog_id FROM Treatments);", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(*) \nFROM `Treatments` AS t \nJOIN `Professionals` AS p ON t.`professional_id` = p.`professional_id`", "match": {"match": false, "result": [[15]], "gt": [[8]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT professional_id) FROM Treatments", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT role_code, street, city, state \nFROM Professionals \nWHERE city LIKE '%West%'", "match": {"match": true, "result": [["Employee", "6915 Oberbrunner Point Suite 491\nGleasonville, LA ", "West Heidi", "Indiana"]]}}
{"result": "SELECT T2.role_code, T2.street, T2.city, T2.state \nFROM Owners AS T1 \nINNER JOIN Professionals AS T2 \nON T1.postal_code = T2.postal_code \nWHERE T1.city LIKE '%West%';", "match": {"match": false, "error": "Query execution failed with error: no such column: T1.postal_code"}}
{"result": "SELECT first_name, last_name, email_address \nFROM Owners \nWHERE state LIKE '%North%';", "match": {"match": true, "result": [["Johann", "Fisher", "zboncak.madonna@example.net"], ["Cindy", "Schmitt", "wpfeffer@example.net"]]}}
{"result": "SELECT first_name, last_name, email_address \nFROM Owners \nWHERE state LIKE '%North%';", "match": {"match": true, "result": [["Johann", "Fisher", "zboncak.madonna@example.net"], ["Cindy", "Schmitt", "wpfeffer@example.net"]]}}
{"result": "SELECT COUNT(*) \nFROM Dogs \nWHERE age < (SELECT AVG(age) FROM Dogs);", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(*) \nFROM Dogs \nWHERE age < (SELECT AVG(age) FROM Dogs);", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT MAX(cost_of_treatment) FROM Treatments", "match": {"match": false, "result": [[945]], "gt": [[407]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.cost_of_treatment FROM Treatments AS T1 INNER JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id ORDER BY T1.date_of_treatment DESC LIMIT 1", "match": {"match": true, "result": [[407]]}}
{"result": "SELECT COUNT(*) \nFROM Dogs \nWHERE dog_id NOT IN (SELECT dog_id FROM Treatments);", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(*) \nFROM Dogs \nWHERE dog_id NOT IN (SELECT dog_id FROM Treatments);", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(*) \nFROM Owners \nWHERE owner_id NOT IN (SELECT owner_id FROM Dogs);", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(owner_id) \nFROM Owners \nWHERE owner_id NOT IN (SELECT owner_id FROM Dogs);", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(*) \nFROM Professionals \nWHERE professional_id NOT IN ( SELECT professional_id FROM Treatments );", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT COUNT(*) \nFROM Professionals p \nLEFT JOIN Treatments t ON p.professional_id = t.professional_id \nWHERE t.treatment_id IS NULL", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT name, age, weight \nFROM Dogs \nWHERE abandoned_yn = '1';", "match": {"match": true, "result": [["Kacey", "6", "7.57"], ["Lyric", "4", "4.36"], ["Evangeline", "1", "4.01"]]}}
{"result": "SELECT name, age, weight \nFROM Dogs \nWHERE abandoned_yn = '1'", "match": {"match": true, "result": [["Kacey", "6", "7.57"], ["Lyric", "4", "4.36"], ["Evangeline", "1", "4.01"]]}}
{"result": "SELECT AVG(age) FROM Dogs", "match": {"match": true, "result": [[5.066666666666666]]}}
{"result": "SELECT AVG(age) FROM Dogs", "match": {"match": true, "result": [[5.066666666666666]]}}
{"result": "SELECT MAX(age) \nFROM Dogs", "match": {"match": true, "result": [["9"]]}}
{"result": "SELECT MAX(DATEDIFF(CURDATE(), date_of_birth)) AS age_of_oldest_dog", "match": {"match": false, "error": "Query execution failed with error: no such column: date_of_birth"}}
{"result": "SELECT charge_type, charge_amount \nFROM Charges;", "match": {"match": true, "result": [["Daily Accommodation", 98], ["Drugs", 322], ["Health Check", 640]]}}
{"result": "SELECT charge_type, charge_amount FROM Charges", "match": {"match": true, "result": [["Daily Accommodation", 98], ["Drugs", 322], ["Health Check", 640]]}}
{"result": "SELECT MAX(charge_amount) \nFROM Charges;", "match": {"match": true, "result": [[640]]}}
{"result": "SELECT T1.charge_type, MAX(T1.charge_amount) \nFROM Charges AS T1 \nGROUP BY T1.charge_type", "match": {"match": false, "result": [["Daily Accommodation", 98], ["Drugs", 322], ["Health Check", 640]], "gt": [[640]], "error": "Query result does not match ground truth."}}
{"result": "SELECT `email_address`, `cell_number`, `home_phone` FROM `Professionals`", "match": {"match": true, "result": [["deanna.schuster@example.com", "(275)939-2435x80863", "+71(6)2898266914"], ["lucile.shanahan@example.org", "889-940-2676", "+02(1)0259033559"], ["uboehm@example.org", "(369)908-7311x065", "325-155-0801x7005"], ["lourdes.lowe@example.net", "00230569697", "312.216.3352"], ["mekhi.little@example.org", "011.193.9081x3186", "1-609-566-2752x25197"], ["jacynthe.mclaughlin@example.net", "139-321-7313", "+43(5)1132733868"], ["lambert62@example.org", "499-434-0215x1628", "022.529.0550x1319"], ["goyette.roosevelt@example.net", "328.842.3792", "891.475.2256"], ["schneider.kathryne@example.org", "962-983-8109x3509", "320-508-6023"], ["jerrod.bahringer@example.org", "461-801-2600", "(230)338-3342x585"], ["west.eula@example.net", "609-405-2990", "(920)304-4499x59146"], ["marquardt.furman@example.org", "1-181-670-9466", "246-951-0080x76716"], ["delphine29@example.com", "880-659-7577x736", "346.594.3739"], ["cole.margarita@example.org", "1-185-137-1945x409", "971.048.3763x9404"], ["jeichmann@example.com", "1-258-285-4707x8020", "1-138-287-3775"]]}}
{"result": "SELECT `email_address`, `cell_number`, `home_phone` \nFROM `Professionals`", "match": {"match": true, "result": [["deanna.schuster@example.com", "(275)939-2435x80863", "+71(6)2898266914"], ["lucile.shanahan@example.org", "889-940-2676", "+02(1)0259033559"], ["uboehm@example.org", "(369)908-7311x065", "325-155-0801x7005"], ["lourdes.lowe@example.net", "00230569697", "312.216.3352"], ["mekhi.little@example.org", "011.193.9081x3186", "1-609-566-2752x25197"], ["jacynthe.mclaughlin@example.net", "139-321-7313", "+43(5)1132733868"], ["lambert62@example.org", "499-434-0215x1628", "022.529.0550x1319"], ["goyette.roosevelt@example.net", "328.842.3792", "891.475.2256"], ["schneider.kathryne@example.org", "962-983-8109x3509", "320-508-6023"], ["jerrod.bahringer@example.org", "461-801-2600", "(230)338-3342x585"], ["west.eula@example.net", "609-405-2990", "(920)304-4499x59146"], ["marquardt.furman@example.org", "1-181-670-9466", "246-951-0080x76716"], ["delphine29@example.com", "880-659-7577x736", "346.594.3739"], ["cole.margarita@example.org", "1-185-137-1945x409", "971.048.3763x9404"], ["jeichmann@example.com", "1-258-285-4707x8020", "1-138-287-3775"]]}}
{"result": "SELECT B.breed_code, S.size_code\nFROM Breeds B\nCROSS JOIN Sizes S", "match": {"match": false, "result": [["BUL", "LGE"], ["BUL", "MED"], ["BUL", "SML"], ["ESK", "LGE"], ["ESK", "MED"], ["ESK", "SML"], ["HUS", "LGE"], ["HUS", "MED"], ["HUS", "SML"]], "gt": [["ESK", "LGE"], ["BUL", "LGE"], ["BUL", "MED"], ["HUS", "MED"], ["ESK", "SML"], ["HUS", "SML"], ["ESK", "MED"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT breed_code, size_code \nFROM Dogs;", "match": {"match": true, "result": [["ESK", "LGE"], ["BUL", "LGE"], ["BUL", "MED"], ["HUS", "MED"], ["ESK", "SML"], ["HUS", "SML"], ["ESK", "MED"]]}}
{"result": "SELECT T1.first_name, T3.treatment_type_description \nFROM Professionals AS T1 \nJOIN Treatments AS T2 ON T1.professional_id = T2.professional_id \nJOIN Treatment_Types AS T3 ON T2.treatment_type_code = T3.treatment_type_code", "match": {"match": false, "result": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Vernice", "Physical examination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Karley", "Vaccination"], ["Monte", "Take for a Walk"], ["Ruben", "Take for a Walk"]], "gt": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Ruben", "Take for a Walk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT t1.first_name, tt.treatment_type_description \nFROM Professionals t1 \nJOIN Treatments t2 ON t1.professional_id = t2.professional_id \nJOIN Treatment_Types tt ON t2.treatment_type_code = tt.treatment_type_code", "match": {"match": false, "result": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Vernice", "Physical examination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Karley", "Vaccination"], ["Monte", "Take for a Walk"], ["Ruben", "Take for a Walk"]], "gt": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Ruben", "Take for a Walk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(Singer_ID) FROM singer", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT COUNT(Singer_ID) FROM singer", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "match": {"match": true, "result": [["Abigail Johnson"], ["Susanne Klatten"], ["Gina Rinehart"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Alice Walton"], ["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "match": {"match": true, "result": [["Abigail Johnson"], ["Susanne Klatten"], ["Gina Rinehart"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Alice Walton"], ["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT Birth_Year, Citizenship FROM singer", "match": {"match": true, "result": [[1944.0, "France"], [1948.0, "United States"], [1949.0, "United States"], [1942.0, "Chile"], [1940.0, "United States"], [1953.0, "Australia"], [1962.0, "Germany"], [1961.0, "United States"]]}}
{"result": "SELECT Birth_Year, Citizenship FROM singer", "match": {"match": true, "result": [[1944.0, "France"], [1948.0, "United States"], [1949.0, "United States"], [1942.0, "Chile"], [1940.0, "United States"], [1953.0, "Australia"], [1962.0, "Germany"], [1961.0, "United States"]]}}
{"result": "SELECT Name FROM singer WHERE Citizenship != 'France'", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]]}}
{"result": "SELECT Name \nFROM singer \nWHERE Citizenship != 'France'", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]]}}
{"result": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"]]}}
{"result": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"]]}}
{"result": "SELECT Name \nFROM singer \nORDER BY Net_Worth_Millions DESC \nLIMIT 1;", "match": {"match": true, "result": [["Liliane Bettencourt"]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "match": {"match": true, "result": [["Liliane Bettencourt"]]}}
{"result": "SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship", "match": {"match": true, "result": [["Australia", 1], ["Chile", 1], ["France", 1], ["Germany", 1], ["United States", 4]]}}
{"result": "SELECT Citizenship, COUNT(Singer_ID) FROM singer GROUP BY Citizenship", "match": {"match": true, "result": [["Australia", 1], ["Chile", 1], ["France", 1], ["Germany", 1], ["United States", 4]]}}
{"result": "SELECT Citizenship \nFROM singer \nGROUP BY Citizenship \nORDER BY COUNT(Citizenship) DESC \nLIMIT 1", "match": {"match": true, "result": [["United States"]]}}
{"result": "SELECT Citizenship \nFROM singer \nGROUP BY Citizenship \nORDER BY COUNT(Citizenship) DESC \nLIMIT 1", "match": {"match": true, "result": [["United States"]]}}
{"result": "SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth\nFROM singer\nGROUP BY Citizenship", "match": {"match": true, "result": [["Australia", 17.0], ["Chile", 17.4], ["France", 30.0], ["Germany", 14.3], ["United States", 28.8]]}}
{"result": "SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "match": {"match": true, "result": [["Australia", 17.0], ["Chile", 17.4], ["France", 30.0], ["Germany", 14.3], ["United States", 28.8]]}}
{"result": "SELECT T2.Title, T1.Name \nFROM singer AS T1 \nINNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID", "match": {"match": true, "result": [["Do They Know It's Christmas", "Liliane Bettencourt"], ["F**k It (I Don't Want You Back)", "Liliane Bettencourt"], ["Cha Cha Slide", "Christy Walton"], ["Call on Me", "Iris Fontbona"], ["Yeah", "Christy Walton"], ["All This Time", "Gina Rinehart"], ["Left Outside Alone", "Jacqueline Mars"], ["Mysterious Girl", "Susanne Klatten"]]}}
{"result": "SELECT T2.`Title`, T1.`Name` \nFROM singer AS T1 \nINNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID", "match": {"match": true, "result": [["Do They Know It's Christmas", "Liliane Bettencourt"], ["F**k It (I Don't Want You Back)", "Liliane Bettencourt"], ["Cha Cha Slide", "Christy Walton"], ["Call on Me", "Iris Fontbona"], ["Yeah", "Christy Walton"], ["All This Time", "Gina Rinehart"], ["Left Outside Alone", "Jacqueline Mars"], ["Mysterious Girl", "Susanne Klatten"]]}}
{"result": "SELECT DISTINCT T1.Name \nFROM singer AS T1 \nJOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID \nWHERE T2.Sales > 300000", "match": {"match": true, "result": [["Liliane Bettencourt"], ["Christy Walton"], ["Iris Fontbona"]]}}
{"result": "SELECT DISTINCT T1.Name \nFROM singer AS T1 \nJOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID \nWHERE T2.Sales > 300000", "match": {"match": true, "result": [["Liliane Bettencourt"], ["Christy Walton"], ["Iris Fontbona"]]}}
{"result": "SELECT T1.Name \nFROM singer AS T1 \nINNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID \nGROUP BY T1.Singer_ID \nHAVING COUNT(T2.Singer_ID) > 1", "match": {"match": false, "result": [["Liliane Bettencourt"], ["Christy Walton"]], "gt": [["Christy Walton"], ["Liliane Bettencourt"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name \nFROM singer AS T1 \nINNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID \nGROUP BY T1.Name \nHAVING COUNT(T2.Singer_ID) > 1", "match": {"match": true, "result": [["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT T1.Name, SUM(T2.Sales) \nFROM singer AS T1 \nJOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID \nGROUP BY T1.Name", "match": {"match": true, "result": [["Christy Walton", 651421.0], ["Gina Rinehart", 292000.0], ["Iris Fontbona", 335000.0], ["Jacqueline Mars", 275000.0], ["Liliane Bettencourt", 1646407.0], ["Susanne Klatten", 261000.0]]}}
{"result": "SELECT T2.Name, SUM(T1.Sales) \nFROM song AS T1 \nJOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID \nGROUP BY T2.Name", "match": {"match": true, "result": [["Christy Walton", 651421.0], ["Gina Rinehart", 292000.0], ["Iris Fontbona", 335000.0], ["Jacqueline Mars", 275000.0], ["Liliane Bettencourt", 1646407.0], ["Susanne Klatten", 261000.0]]}}
{"result": "SELECT \"Name\" FROM singer \nWHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);", "match": {"match": true, "result": [["Alice Walton"], ["Abigail Johnson"]]}}
{"result": "SELECT T2.Name \nFROM song AS T1 \nRIGHT JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID \nWHERE T1.Song_ID IS NULL", "match": {"match": true, "result": [["Alice Walton"], ["Abigail Johnson"]]}}
{"result": "SELECT Citizenship \nFROM singer \nWHERE Birth_Year < 1945 OR Birth_Year > 1955", "match": {"match": false, "result": [["France"], ["Chile"], ["United States"], ["Germany"], ["United States"]], "gt": [["United States"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T3.Citizenship \nFROM song AS T1 \nJOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID \nJOIN singer AS T3 ON T2.Name != T3.Name AND T2.Birth_Year < 1945 AND T3.Birth_Year > 1955", "match": {"match": false, "result": [["Germany"], ["United States"], ["Germany"], ["United States"], ["Germany"], ["United States"], ["Germany"], ["United States"]], "gt": [["United States"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(feature_id) FROM Other_Available_Features", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT T2.feature_type_name \nFROM Other_Available_Features AS T1 \nJOIN Ref_Feature_Types AS T2 \nON T1.feature_type_code = T2.feature_type_code \nWHERE T1.feature_name = 'AirCon';", "match": {"match": true, "result": [["Amenity, eg Pool."]]}}
{"result": "SELECT T2.property_type_description \nFROM Properties T1 \nJOIN Ref_Property_Types T2 ON T1.property_type_code = T2.property_type_code", "match": {"match": false, "result": [["House, Bungalow, etc."], ["House, Bungalow, etc."], ["Other, to be determined."], ["Field, Meadow."], ["Apartment, Flat, Condo, etc."], ["Shop, Retail Outlet."], ["Shop, Retail Outlet."], ["Apartment, Flat, Condo, etc."], ["Apartment, Flat, Condo, etc."], ["Apartment, Flat, Condo, etc."], ["Other, to be determined."], ["Apartment, Flat, Condo, etc."], ["Other, to be determined."], ["Other, to be determined."], ["Apartment, Flat, Condo, etc."]], "gt": [["Apartment, Flat, Condo, etc."], ["Field, Meadow."], ["House, Bungalow, etc."], ["Other, to be determined."], ["Shop, Retail Outlet."]], "error": "Query result does not match ground truth."}}
{"result": "SELECT P.property_name \nFROM Properties P\nWHERE P.room_count > 1 \nAND P.property_type_code IN (\n  SELECT property_type_code \n  FROM Ref_Property_Types \n  WHERE property_type_description IN ('House', 'Apartment')\n);", "match": {"match": false, "result": [], "gt": [["longacre"], ["parc coliseum"], ["parc east"], ["park"], ["renoir"], ["ten tower"], ["the cole"], ["vogue"]], "error": "Query result does not match ground truth."}}

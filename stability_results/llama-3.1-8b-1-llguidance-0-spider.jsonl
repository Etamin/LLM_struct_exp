
{"result": "SELECT COUNT(\"Singer_ID\") FROM singer", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(Singer_ID) FROM singer", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC", "match": {"match": true, "result": [["Joe Sharp", "Netherlands", 52], ["John Nizinik", "France", 43], ["Rose White", "France", 41], ["Timbaland", "United States", 32], ["Justin Brown", "France", 29], ["Tribal King", "France", 25]]}}
{"result": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC", "match": {"match": true, "result": [["Joe Sharp", "Netherlands", 52], ["John Nizinik", "France", 43], ["Rose White", "France", 41], ["Timbaland", "United States", 32], ["Justin Brown", "France", 29], ["Tribal King", "France", 25]]}}
{"result": "SELECT AVG(\"Age\") , MIN(\"Age\") , MAX(\"Age\") \nFROM \"singer\" \nWHERE \"Country\" = 'France';", "match": {"match": true, "result": [[34.5, 25, 43]]}}
{"result": "SELECT AVG(Age) , MIN(Age) , MAX(Age) FROM singer WHERE Country = 'France'", "match": {"match": true, "result": [[34.5, 25, 43]]}}
{"result": "SELECT T1.Name, T1.Song_Name, T1.Song_release_year \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID \nWHERE T1.Age = ( SELECT MIN(T1.Age) FROM singer AS T1 );", "match": {"match": false, "result": [["Tribal King", "Love", "2016"], ["Tribal King", "Love", "2016"]], "gt": [["Love", "2016"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Name, T2.\"Song_Name\", T2.\"Song_release_year\" \nFROM singer_in_concert AS T1 \nJOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID \nWHERE T2.Age = (SELECT MIN(T2.Age) FROM singer AS T2 JOIN singer_in_concert AS T1 ON T2.Singer_ID = T1.Singer_ID);", "match": {"match": false, "result": [["Tribal King", "Love", "2016"], ["Tribal King", "Love", "2016"]], "gt": [["Love", "2016"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT Country FROM singer WHERE Age > 20", "match": {"match": true, "result": [["Netherlands"], ["United States"], ["France"]]}}
{"result": "SELECT DISTINCT Country \nFROM singer \nWHERE Age > 20;", "match": {"match": true, "result": [["Netherlands"], ["United States"], ["France"]]}}
{"result": "SELECT Country, COUNT(Singer_ID) FROM singer GROUP BY Country", "match": {"match": true, "result": [["France", 4], ["Netherlands", 1], ["United States", 1]]}}
{"result": "SELECT Country, COUNT(Singer_ID) FROM singer GROUP BY Country", "match": {"match": true, "result": [["France", 4], ["Netherlands", 1], ["United States", 1]]}}
{"result": "SELECT T2.Song_Name \nFROM singer_in_concert AS T1 \nJOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID \nWHERE T2.Age > (SELECT AVG(Age) FROM singer)", "match": {"match": false, "result": [["Gentleman"], ["Gentleman"], ["Sun"]], "gt": [["You"], ["Sun"], ["Gentleman"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T3.\"Song_Name\" FROM singer_in_concert AS T1 \nJOIN singer AS T2 ON T1.\"Singer_ID\" = T2.\"Singer_ID\"\nJOIN concert AS T3 ON T1.\"concert_ID\" = T3.\"concert_ID\"\nWHERE T2.\"Age\" > (SELECT AVG(\"Age\") FROM singer)", "match": {"match": false, "error": "Query execution failed with error: no such column: T3.Song_Name"}}
{"result": "SELECT Location, Name \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000;", "match": {"match": true, "result": []}}
{"result": "SELECT Location, Name \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000", "match": {"match": true, "result": []}}
{"result": "SELECT MAX(Capacity), AVG(Average) FROM stadium", "match": {"match": false, "result": [[52500, 917.8888888888889]], "gt": [[52500, 730]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(Capacity) AS Average_Capacity, MAX(Capacity) AS Maximum_Capacity FROM stadium", "match": {"match": true, "result": [[10621.666666666666, 52500]]}}
{"result": "SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1;", "match": {"match": true, "result": [["Stark's Park", 10104]]}}
{"result": "SELECT Name, Capacity \nFROM stadium \nORDER BY Average DESC \nLIMIT 1;", "match": {"match": true, "result": [["Stark's Park", 10104]]}}
{"result": "SELECT count(*) FROM concert WHERE year = '2014' OR year = '2015'", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(concert_ID) \nFROM concert \nWHERE Year IN ('2014', '2015');", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT T3.Name, COUNT(T1.concert_ID) \nFROM concert AS T1 \nJOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nJOIN singer_in_concert AS T3 ON T1.concert_ID = T3.concert_ID \nGROUP BY T2.Stadium_ID", "match": {"match": false, "error": "Query execution failed with error: no such column: T3.Name"}}
{"result": "SELECT T1.Location, COUNT(T3.concert_ID) \nFROM stadium AS T1 \nJOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nJOIN singer_in_concert AS T3 ON T2.concert_ID = T3.concert_ID \nGROUP BY T1.Location", "match": {"match": false, "result": [["Alloa Athletic", 1], ["Ayr United", 3], ["Brechin City", 1], ["Peterhead", 2], ["Raith Rovers", 3]], "gt": [["Stark's Park", 1], ["Glebe Park", 1], ["Somerset Park", 2], ["Recreation Park", 1], ["Balmoor", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.Name, s.Capacity \nFROM stadium s \nJOIN concert c ON s.Stadium_ID = c.Stadium_ID \nWHERE c.Year >= '2014' \nGROUP BY s.Stadium_ID, s.Name, s.Capacity \nORDER BY COUNT(c.concert_ID) DESC \nLIMIT 1;", "match": {"match": true, "result": [["Somerset Park", 11998]]}}
{"result": "SELECT T1.Name, T1.Capacity \nFROM stadium AS T1 \nJOIN (\n  SELECT T3.Stadium_ID, COUNT(T4.concert_ID) as num_concerts\n  FROM singer_in_concert AS T4\n  JOIN concert AS T3 ON T4.concert_ID = T3.concert_ID\n  WHERE T3.Year > '2013'\n  GROUP BY T3.Stadium_ID\n) AS T2 ON T2.Stadium_ID = T1.Stadium_ID\nORDER BY T2.num_concerts DESC\nLIMIT 1", "match": {"match": false, "result": [["Stark's Park", 10104]], "gt": [["Somerset Park", 11998]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Year \nFROM concert \nGROUP BY Year \nORDER BY COUNT(concert_ID) DESC \nLIMIT 1;", "match": {"match": true, "result": [["2015"]]}}
{"result": "SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(Year) DESC LIMIT 1", "match": {"match": true, "result": [["2015"]]}}
{"result": "SELECT T1.Name \nFROM stadium AS T1 \nLEFT JOIN concert AS T2 ON T2.Stadium_ID = T1.Stadium_ID \nWHERE T2.concert_ID IS NULL", "match": {"match": true, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"]]}}
{"result": "SELECT T3.Name \nFROM concert AS T1 \nLEFT JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID \nLEFT JOIN stadium AS T3 ON T1.Stadium_ID = T3.Stadium_ID \nWHERE T2.concert_ID IS NULL;", "match": {"match": false, "result": [], "gt": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Country \nFROM singer_in_concert AS T1 \nJOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID \nJOIN concert AS T3 ON T1.concert_ID = T3.concert_ID \nJOIN stadium AS T4 ON T3.Stadium_ID = T4.Stadium_ID \nWHERE T2.Age > 40 OR T2.Age < 30", "match": {"match": false, "result": [["France"], ["France"], ["France"], ["France"], ["France"], ["France"], ["France"], ["France"]], "gt": [["France"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name \nFROM stadium \nWHERE Stadium_ID NOT IN (SELECT Stadium_ID \n                          FROM concert \n                          WHERE YEAR = '2014');", "match": {"match": false, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"], ["Recreation Park"], ["Balmoor"]], "gt": [["Balmoor"], ["Bayview Stadium"], ["Forthbank Stadium"], ["Gayfield Park"], ["Hampden Park"], ["Recreation Park"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name \nFROM stadium \nWHERE Stadium_ID NOT IN (\n  SELECT Stadium_ID \n  FROM concert \n  WHERE YEAR = '2014'\n);", "match": {"match": false, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"], ["Recreation Park"], ["Balmoor"]], "gt": [["Balmoor"], ["Bayview Stadium"], ["Forthbank Stadium"], ["Gayfield Park"], ["Hampden Park"], ["Recreation Park"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    c.concert_Name, \n    c.Theme, \n    COUNT(sc.Singer_ID) as Num_of_Singers\nFROM \n    concert c\nJOIN \n    singer_in_concert sc ON c.concert_ID = sc.concert_ID\nGROUP BY \n    c.concert_Name, c.Theme", "match": {"match": false, "result": [["Auditions", "Free choice", 3], ["Home Visits", "Bleeding Love", 1], ["Super bootcamp", "Free choice 2", 2], ["Week 1", "Happy Tonight", 2], ["Week 1", "Wide Awake", 1], ["Week 2", "Party All Night", 1]], "gt": [["Auditions", "Free choice", 3], ["Super bootcamp", "Free choice 2", 2], ["Home Visits", "Bleeding Love", 1], ["Week 1", "Wide Awake", 1], ["Week 1", "Happy Tonight", 2], ["Week 2", "Party All Night", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.concert_Name, T1.Theme, COUNT(T2.Singer_ID) as number_of_singers \nFROM concert as T1 \nJOIN singer_in_concert as T2 ON T1.concert_ID = T2.concert_ID \nGROUP BY T1.concert_Name, T1.Theme", "match": {"match": false, "result": [["Auditions", "Free choice", 3], ["Home Visits", "Bleeding Love", 1], ["Super bootcamp", "Free choice 2", 2], ["Week 1", "Happy Tonight", 2], ["Week 1", "Wide Awake", 1], ["Week 2", "Party All Night", 1]], "gt": [["Auditions", "Free choice", 3], ["Super bootcamp", "Free choice 2", 2], ["Home Visits", "Bleeding Love", 1], ["Week 1", "Wide Awake", 1], ["Week 1", "Happy Tonight", 2], ["Week 2", "Party All Night", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.`Name`, COUNT(T2.`concert_ID`) \nFROM `singer` AS T1 \nJOIN `singer_in_concert` AS T2 ON T1.`Singer_ID` = T2.`Singer_ID` \nGROUP BY T1.`Name`", "match": {"match": false, "result": [["John Nizinik", 2], ["Justin Brown", 3], ["Rose White", 1], ["Timbaland", 2], ["Tribal King", 2]], "gt": [["Timbaland", 2], ["Justin Brown", 3], ["Rose White", 1], ["John Nizinik", 2], ["Tribal King", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT S.Name, COUNT(concert.concert_ID) \nFROM singer AS S \nJOIN singer_in_concert AS sic ON S.Singer_ID = sic.Singer_ID \nJOIN concert AS c ON sic.concert_ID = c.concert_ID \nGROUP BY S.Name", "match": {"match": false, "error": "Query execution failed with error: no such column: concert.concert_ID"}}
{"result": "SELECT T2.Name \nFROM concert AS T1 \nINNER JOIN singer_in_concert AS T2 \nON T1.concert_ID = T2.concert_ID \nINNER JOIN singer AS T3 \nON T2.Singer_ID = T3.Singer_ID \nWHERE T1.Year = '2014';", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Name"}}
{"result": "SELECT T1.Name \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID \nJOIN concert AS T3 ON T3.concert_ID = T2.concert_ID \nWHERE T3.Year = '2014';", "match": {"match": true, "result": [["Timbaland"], ["Justin Brown"], ["John Nizinik"], ["Justin Brown"], ["Tribal King"], ["Rose White"]]}}
{"result": "SELECT T2.Name, T2.Country\nFROM singer_in_concert AS T1\nJOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID\nJOIN concert AS T3 ON T1.concert_ID = T3.concert_ID\nJOIN singer AS T4 ON T3.Singer_ID = T4.Singer_ID\nWHERE T4.Song_Name LIKE '%Hey%';", "match": {"match": false, "error": "Query execution failed with error: no such column: T3.Singer_ID"}}
{"result": "SELECT T1.Name, T1.Country \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID \nJOIN concert AS T3 ON T2.concert_ID = T3.concert_ID \nJOIN stadium AS T4 ON T3.Stadium_ID = T4.Stadium_ID \nJOIN (SELECT Song_Name FROM singer WHERE Song_Name LIKE '%Hey%') AS T5 ON T4.Name = T5.Song_Name", "match": {"match": false, "result": [], "gt": [["Justin Brown", "France"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name, T1.Location \nFROM stadium AS T1 \nJOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nWHERE T2.Year = '2014' INTERSECT \nSELECT T1.Name, T1.Location \nFROM stadium AS T1 \nJOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nWHERE T2.Year = '2015';", "match": {"match": true, "result": [["Somerset Park", "Ayr United"]]}}
{"result": "SELECT S.Name, S.Location \nFROM stadium S\nJOIN concert C ON S.Stadium_ID = C.Stadium_ID\nWHERE C.Year IN ('2014', '2015')", "match": {"match": false, "result": [["Stark's Park", "Raith Rovers"], ["Somerset Park", "Ayr United"], ["Somerset Park", "Ayr United"], ["Glebe Park", "Brechin City"], ["Balmoor", "Peterhead"], ["Recreation Park", "Alloa Athletic"]], "gt": [["Somerset Park", "Ayr United"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(T2.concert_ID) \nFROM stadium AS T1 \nJOIN concert AS T2 ON T2.Stadium_ID = T1.Stadium_ID \nWHERE T1.Capacity = ( SELECT MAX(Capacity) FROM stadium );", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(concert_ID) \nFROM concert \nWHERE Stadium_ID = (SELECT Stadium_ID \n                    FROM stadium \n                    ORDER BY Capacity DESC \n                    LIMIT 1);", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(*) \nFROM Pets \nWHERE weight > 10;", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(*) \nFROM Pets \nWHERE weight > 10;", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age ASC LIMIT 1", "match": {"match": true, "result": [[9.3]]}}
{"result": "SELECT weight \nFROM Pets \nWHERE PetType = 'Dog' \nORDER BY pet_age \nLIMIT 1;", "match": {"match": false, "result": [], "gt": [[9.3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(weight) , PetType\nFROM Pets", "match": {"match": false, "result": [[13.4, "dog"]], "gt": [[12.0, "cat"], [13.4, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT PetType, MAX(weight) \nFROM Pets \nGROUP BY PetType", "match": {"match": false, "result": [["cat", 12.0], ["dog", 13.4]], "gt": [[12.0, "cat"], [13.4, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT T1.StuID) \nFROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nWHERE T1.Age > 20", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(*) \nFROM Student \nWHERE Age > 20 \nINTERSECT \nSELECT COUNT(*) \nFROM Has_Pet hp \nJOIN Pets p ON hp.PetID = p.PetID;", "match": {"match": false, "result": [], "gt": [[0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT count(*) \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Student.Sex = 'F' AND Pets.PetType = 'dog';", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(*) \nFROM Student s \nJOIN Has_Pet hp ON s.StuID = hp.StuID \nJOIN Pets p ON hp.PetID = p.PetID \nWHERE s.Sex = 'F' AND p.PetType = 'dog';", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(DISTINCT PetType) FROM Pets", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(DISTINCT PetType) \nFROM Pets;", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT Fname \nFROM Student \nWHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'Cat' OR PetType = 'Dog'))", "match": {"match": false, "result": [], "gt": [["Linda"], ["Tracy"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'cat' OR T3.PetType = 'dog'", "match": {"match": false, "result": [["Linda"], ["Tracy"], ["Tracy"]], "gt": [["Linda"], ["Tracy"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'Cat' \nINTERSECT \nSELECT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'Dog'", "match": {"match": true, "result": []}}
{"result": "SELECT T2.Fname \nFROM Has_Pet AS T1 \nJOIN Student AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T1.PetID = T3.PetID \nWHERE T3.PetType  = 'cat' INTERSECT \nSELECT T2.Fname \nFROM Has_Pet AS T1 \nJOIN Student AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T1.PetID = T3.PetID \nWHERE T3.PetType  = 'dog'", "match": {"match": true, "result": []}}
{"result": "SELECT T1.LName, T1.Age, T1.Major\nFROM Student AS T1\nWHERE T1.StuID NOT IN (\n  SELECT T2.StuID\n  FROM Has_Pet AS T2\n  JOIN Pets AS T3 ON T2.PetID = T3.PetID\n  WHERE T3.PetType = 'Cat'\n)", "match": {"match": false, "result": [["Smith", 18, 600], ["Kim", 19, 600], ["Jones", 21, 600], ["Kumar", 20, 600], ["Gompers", 26, 600], ["Schultz", 18, 600], ["Apap", 18, 600], ["Nelson", 20, 600], ["Tai", 19, 600], ["Lee", 17, 600], ["Adams", 22, 600], ["Davis", 20, 600], ["Norris", 18, 600], ["Lee", 16, 600], ["Schwartz", 17, 600], ["Wilson", 27, 600], ["Leighton", 20, 600], ["Pang", 18, 600], ["Thornton", 22, 520], ["Andreou", 19, 520], ["Woods", 17, 540], ["Shieber", 20, 520], ["Prater", 18, 540], ["Goldman", 18, 520], ["Pang", 19, 520], ["Brody", 18, 520], ["Rugh", 20, 550], ["Han", 17, 100], ["Cheng", 21, 550], ["Smith", 20, 550], ["Brown", 20, 550], ["Simms", 18, 550], ["Epp", 18, 50], ["Schmidt", 26, 50]], "gt": [[600, 19], [600, 21], [600, 20], [600, 26], [600, 18], [600, 18], [600, 20], [600, 19], [600, 17], [600, 22], [600, 20], [600, 18], [600, 16], [600, 17], [600, 27], [600, 20], [600, 18], [520, 22], [520, 19], [540, 17], [520, 20], [540, 18], [520, 18], [520, 19], [520, 18], [550, 20], [100, 17], [550, 21], [550, 20], [550, 20], [550, 18], [50, 18], [50, 26]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Major, T1.Age\nFROM Student AS T1\nWHERE T1.StuID NOT IN (\n  SELECT T1.StuID\n  FROM Has_Pet AS T1\n  JOIN Pets AS T2 ON T1.PetID = T2.PetID\n  WHERE T2.PetType = 'cat'\n)", "match": {"match": true, "result": [[600, 19], [600, 21], [600, 20], [600, 26], [600, 18], [600, 18], [600, 20], [600, 19], [600, 17], [600, 22], [600, 20], [600, 18], [600, 16], [600, 17], [600, 27], [600, 20], [600, 18], [520, 22], [520, 19], [540, 17], [520, 20], [540, 18], [520, 18], [520, 19], [520, 18], [550, 20], [100, 17], [550, 21], [550, 20], [550, 20], [550, 18], [50, 18], [50, 26]]}}
{"result": "SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))", "match": {"match": true, "result": [[1002], [1003], [1004], [1005], [1006], [1007], [1008], [1009], [1010], [1011], [1012], [1014], [1015], [1016], [1017], [1018], [1019], [1020], [1021], [1022], [1023], [1024], [1025], [1026], [1027], [1028], [1029], [1030], [1031], [1032], [1033], [1034], [1035]]}}
{"result": "SELECT StuID \nFROM Student \nWHERE StuID NOT IN (\n    SELECT StuID \n    FROM Has_Pet \n    JOIN Pets ON Has_Pet.PetID = Pets.PetID \n    WHERE Pets.PetType = 'cat'\n);", "match": {"match": true, "result": [[1002], [1003], [1004], [1005], [1006], [1007], [1008], [1009], [1010], [1011], [1012], [1014], [1015], [1016], [1017], [1018], [1019], [1020], [1021], [1022], [1023], [1024], [1025], [1026], [1027], [1028], [1029], [1030], [1031], [1032], [1033], [1034], [1035]]}}
{"result": "SELECT S.Fname, S.Age \nFROM Student S \nJOIN Has_Pet HP ON S.StuID = HP.StuID \nJOIN Pets P ON HP.PetID = P.PetID \nWHERE P.PetType = 'Dog' AND HP.PetID NOT IN (SELECT PetID FROM Pets WHERE PetType = 'Cat')", "match": {"match": false, "result": [], "gt": [["Tracy", 19], ["Tracy", 19]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'dog' AND T3.PetType != 'cat'", "match": {"match": false, "result": [["Tracy"]], "gt": [["Tracy", 19], ["Tracy", 19]], "error": "Query result does not match ground truth."}}
{"result": "SELECT PetType, weight \nFROM Pets \nORDER BY pet_age ASC \nLIMIT 1;", "match": {"match": true, "result": [["dog", 9.3]]}}
{"result": "SELECT PetType, weight \nFROM Pets \nWHERE pet_age = (SELECT MIN(pet_age) FROM Pets)", "match": {"match": true, "result": [["dog", 9.3]]}}
{"result": "SELECT PetID, weight \nFROM Pets \nWHERE pet_age > 1;", "match": {"match": true, "result": [[2001, 12.0], [2002, 13.4]]}}
{"result": "SELECT PetID, weight FROM Pets WHERE pet_age > 1", "match": {"match": true, "result": [[2001, 12.0], [2002, 13.4]]}}
{"result": "SELECT PetType, AVG(weight) AS avg_weight, MAX(weight) AS max_weight\nFROM Pets\nGROUP BY PetType", "match": {"match": false, "result": [["cat", 12.0, 12.0], ["dog", 11.350000000000001, 13.4]], "gt": [[3.0, 3, "cat"], [1.5, 2, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT PetType, AVG(pet_age) AS average_age, MAX(pet_age) AS max_age \nFROM Pets \nGROUP BY PetType", "match": {"match": false, "result": [["cat", 3.0, 3], ["dog", 1.5, 2]], "gt": [[3.0, 3, "cat"], [1.5, 2, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(weight) ,  PetType FROM Pets GROUP BY PetType", "match": {"match": true, "result": [[12.0, "cat"], [11.350000000000001, "dog"]]}}
{"result": "SELECT PetType, AVG(weight) AS average_weight \nFROM Pets \nGROUP BY PetType;", "match": {"match": false, "result": [["cat", 12.0], ["dog", 11.350000000000001]], "gt": [[12.0, "cat"], [11.350000000000001, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT S.Fname, S.Age \nFROM Student S \nJOIN Has_Pet HP ON S.StuID = HP.StuID \nJOIN Pets P ON HP.PetID = P.PetID", "match": {"match": true, "result": [["Linda", 18], ["Tracy", 19]]}}
{"result": "SELECT Fname, Age \nFROM Student \nWHERE StuID IN (SELECT StuID \n                FROM Has_Pet)", "match": {"match": true, "result": [["Linda", 18], ["Tracy", 19]]}}
{"result": "SELECT T2.PetID \nFROM Student AS T1 \nINNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nWHERE T1.LName = 'Smith';", "match": {"match": true, "result": [[2001]]}}
{"result": "SELECT T1.PetID \nFROM Has_Pet AS T1 \nINNER JOIN Student AS T2 \nON T1.StuID = T2.StuID \nWHERE T2.LName = 'Smith'", "match": {"match": true, "result": [[2001]]}}
{"result": "SELECT StuID, COUNT(*) \nFROM Has_Pet \nGROUP BY StuID", "match": {"match": false, "result": [[1001, 1], [1002, 2]], "gt": [[1, 1001], [2, 1002]], "error": "Query result does not match ground truth."}}
{"result": "SELECT StuID, COUNT(PetID) FROM Has_Pet GROUP BY StuID", "match": {"match": false, "result": [[1001, 1], [1002, 2]], "gt": [[1, 1001], [2, 1002]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.Fname, s.Sex\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nGROUP BY s.StuID\nHAVING COUNT(hp.PetID) > 1", "match": {"match": true, "result": [["Tracy", "F"]]}}
{"result": "SELECT Fname, Sex \nFROM Student \nWHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*)  > 1);", "match": {"match": true, "result": [["Tracy", "F"]]}}
{"result": "SELECT T2.LName \nFROM Pets AS T1 \nJOIN Has_Pet AS T2 ON T1.PetID = T2.PetID \nJOIN Student AS T3 ON T2.StuID = T3.StuID \nWHERE T1.PetType = 'cat' AND T1.pet_age = 3", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.LName"}}
{"result": "SELECT LName FROM Student \nWHERE StuID IN (SELECT StuID FROM Has_Pet \n                JOIN Pets ON Has_Pet.PetID = Pets.PetID \n                WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3)", "match": {"match": true, "result": [["Smith"]]}}
{"result": "SELECT AVG(Age) \nFROM Student \nWHERE StuID NOT IN (SELECT StuID FROM Has_Pet);", "match": {"match": true, "result": [[19.625]]}}
{"result": "SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)", "match": {"match": true, "result": [[19.625]]}}
{"result": "SELECT COUNT(*) FROM employee", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT COUNT(Employee_ID) FROM employee", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT Name\nFROM employee\nORDER BY Age ASC", "match": {"match": true, "result": [["George Chuter"], ["Andrew Sheridan"], ["Lee Mears"], ["Tim Payne"], ["Matt Stevens"], ["Jason Hobson"], ["Steve Borthwick"], ["Louis Deacon"], ["Phil Vickery"], ["Mark Regan"]]}}
{"result": "SELECT Name FROM employee ORDER BY Age ASC", "match": {"match": true, "result": [["George Chuter"], ["Andrew Sheridan"], ["Lee Mears"], ["Tim Payne"], ["Matt Stevens"], ["Jason Hobson"], ["Steve Borthwick"], ["Louis Deacon"], ["Phil Vickery"], ["Mark Regan"]]}}
{"result": "SELECT City, COUNT(*) FROM employee GROUP BY City", "match": {"match": false, "result": [["Bath", 3], ["Bristol", 3], ["Leicester", 1], ["Sale", 1], ["Wasps", 2]], "gt": [[3, "Bath"], [3, "Bristol"], [1, "Leicester"], [1, "Sale"], [2, "Wasps"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT City, COUNT(*) FROM employee GROUP BY City", "match": {"match": false, "result": [["Bath", 3], ["Bristol", 3], ["Leicester", 1], ["Sale", 1], ["Wasps", 2]], "gt": [[3, "Bath"], [3, "Bristol"], [1, "Leicester"], [1, "Sale"], [2, "Wasps"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT City \nFROM employee \nWHERE Age < 30 \nGROUP BY City \nHAVING COUNT(Employee_ID) > 1", "match": {"match": true, "result": [["Bath"]]}}
{"result": "SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1", "match": {"match": true, "result": [["Bath"]]}}
{"result": "SELECT `Location`, COUNT(*) FROM `shop` GROUP BY `Location`;", "match": {"match": false, "result": [["Espoo", 1], ["Helsinki", 1], ["Jakobstad", 1], ["Kotka", 1], ["Kuopio", 1], ["Lahti", 1], ["Mariehamn", 1], ["Turku", 1], ["Valkeakoski", 1]], "gt": [[1, "Espoo"], [1, "Helsinki"], [1, "Jakobstad"], [1, "Kotka"], [1, "Kuopio"], [1, "Lahti"], [1, "Mariehamn"], [1, "Turku"], [1, "Valkeakoski"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Location, COUNT(Shop_ID) FROM shop GROUP BY Location", "match": {"match": false, "result": [["Espoo", 1], ["Helsinki", 1], ["Jakobstad", 1], ["Kotka", 1], ["Kuopio", 1], ["Lahti", 1], ["Mariehamn", 1], ["Turku", 1], ["Valkeakoski", 1]], "gt": [[1, "Espoo"], [1, "Helsinki"], [1, "Jakobstad"], [1, "Kotka"], [1, "Kuopio"], [1, "Lahti"], [1, "Mariehamn"], [1, "Turku"], [1, "Valkeakoski"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Manager_name, T2.District \nFROM shop AS T1 \nJOIN `shop` AS T2 ON T1.Number_products = ( SELECT MAX(Number_products) FROM shop ) \nAND T1.Shop_ID = T2.Shop_ID", "match": {"match": true, "result": [["Ilkka M\u00e4kel\u00e4", "Lahden Stadion"]]}}
{"result": "SELECT T2.Manager_name, T2.District \nFROM shop AS T1 \nJOIN evaluation AS T2 ON 1=1 \nJOIN hiring AS T3 ON 1=1 \nJOIN employee AS T4 ON 1=1 \nWHERE T1.Number_products = ( SELECT MAX(Number_products) FROM shop );", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Manager_name"}}
{"result": "SELECT MIN(`Number_products`) AS min_products, MAX(`Number_products`) AS max_products FROM shop", "match": {"match": true, "result": [[1600, 15000]]}}
{"result": "SELECT MIN(Number_products) , MAX(Number_products) FROM shop", "match": {"match": true, "result": [[1600, 15000]]}}
{"result": "SELECT Name, Location, District \nFROM shop \nORDER BY Number_products DESC;", "match": {"match": true, "result": [["FC Lahti", "Lahti", "Lahden Stadion"], ["HJK", "Helsinki", "Finnair Stadium"], ["FC Inter", "Turku", "Veritas Stadion"], ["FC Honka", "Espoo", "Tapiolan Urheilupuisto"], ["FF Jaro", "Jakobstad", "Jakobstads Centralplan"], ["FC KooTeePee", "Kotka", "Arto Tolsa Areena"], ["FC Haka", "Valkeakoski", "Tehtaan kentt\u00e4"], ["KuPS", "Kuopio", "Magnum Areena"], ["IFK Mariehamn", "Mariehamn", "Wikl\u00f6f Holding Arena"]]}}
{"result": "SELECT Name, Location, District\nFROM shop\nORDER BY Number_products DESC", "match": {"match": true, "result": [["FC Lahti", "Lahti", "Lahden Stadion"], ["HJK", "Helsinki", "Finnair Stadium"], ["FC Inter", "Turku", "Veritas Stadion"], ["FC Honka", "Espoo", "Tapiolan Urheilupuisto"], ["FF Jaro", "Jakobstad", "Jakobstads Centralplan"], ["FC KooTeePee", "Kotka", "Arto Tolsa Areena"], ["FC Haka", "Valkeakoski", "Tehtaan kentt\u00e4"], ["KuPS", "Kuopio", "Magnum Areena"], ["IFK Mariehamn", "Mariehamn", "Wikl\u00f6f Holding Arena"]]}}
{"result": "SELECT Name \nFROM shop \nWHERE Number_products > (SELECT AVG(Number_products) FROM shop);", "match": {"match": true, "result": [["HJK"], ["FC Inter"], ["FC Lahti"]]}}
{"result": "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)", "match": {"match": true, "result": [["HJK"], ["FC Inter"], ["FC Lahti"]]}}
{"result": "SELECT T2.Name FROM evaluation AS T1 INNER JOIN employee AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.Name ORDER BY COUNT(T1.Employee_ID) DESC LIMIT 1", "match": {"match": true, "result": [["George Chuter"]]}}
{"result": "SELECT T3.Name \nFROM evaluation \nJOIN employee AS T3 ON T3.Employee_ID = evaluation.Employee_ID \nGROUP BY T3.Name \nORDER BY COUNT(T3.Employee_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [["George Chuter"]]}}
{"result": "SELECT T2.Name \nFROM evaluation AS T1 \nJOIN employee AS T2 \nON T1.Employee_ID = T2.Employee_ID \nWHERE T1.Bonus = ( SELECT MAX(Bonus) \n                   FROM evaluation \n                   WHERE Bonus = ( SELECT MAX(Bonus) \n                                  FROM evaluation \n                                  GROUP BY Employee_ID \n                                  HAVING COUNT(Employee_ID) = 1 ) );", "match": {"match": true, "result": [["Louis Deacon"]]}}
{"result": "SELECT T2.Name \nFROM evaluation AS T1 \nJOIN employee AS T2 \nON T1.Employee_ID = T2.Employee_ID \nORDER BY T1.Bonus DESC \nLIMIT 1;", "match": {"match": true, "result": [["Louis Deacon"]]}}
{"result": "SELECT Name FROM employee \nWHERE Employee_ID NOT IN (\n  SELECT Employee_ID FROM evaluation\n);", "match": {"match": true, "result": [["Mark Regan"], ["Tim Payne"], ["Andrew Sheridan"], ["Phil Vickery"], ["Steve Borthwick"]]}}
{"result": "SELECT Name \nFROM employee \nWHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "match": {"match": true, "result": [["Mark Regan"], ["Tim Payne"], ["Andrew Sheridan"], ["Phil Vickery"], ["Steve Borthwick"]]}}
{"result": "SELECT T1.Name \nFROM shop AS T1 \nJOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID \nGROUP BY T2.Shop_ID \nORDER BY COUNT(T2.Shop_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [["FC Haka"]]}}
{"result": "SELECT T2.Name FROM hiring AS T1\nINNER JOIN shop AS T2\nON T1.Shop_ID = T2.Shop_ID\nGROUP BY T1.Shop_ID, T2.Name\nORDER BY COUNT(T1.Employee_ID) DESC\nLIMIT 1", "match": {"match": true, "result": [["FC Haka"]]}}
{"result": "SELECT Name \nFROM shop \nWHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring);", "match": {"match": true, "result": [["FC Honka"], ["KuPS"], ["IFK Mariehamn"]]}}
{"result": "SELECT T2.Name \nFROM shop AS T1 \nLEFT JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID \nWHERE T2.Shop_ID IS NULL", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Name"}}
{"result": "SELECT T2.Name, COUNT(T1.Employee_ID) \nFROM hiring AS T1 \nJOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID \nGROUP BY T2.Name", "match": {"match": false, "result": [["FC Haka", 2], ["FC Inter", 1], ["FC KooTeePee", 1], ["FC Lahti", 1], ["FF Jaro", 1], ["HJK", 1]], "gt": [[2, "FC Haka"], [1, "FC Inter"], [1, "FC KooTeePee"], [1, "FC Lahti"], [1, "FF Jaro"], [1, "HJK"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT e.Employee_ID), s.Name \nFROM hiring h \nJOIN employee e ON h.Employee_ID = e.Employee_ID \nJOIN shop s ON h.Shop_ID = s.Shop_ID \nGROUP BY s.Name", "match": {"match": true, "result": [[2, "FC Haka"], [1, "FC Inter"], [1, "FC KooTeePee"], [1, "FC Lahti"], [1, "FF Jaro"], [1, "HJK"]]}}
{"result": "SELECT SUM(Bonus) AS Total_Bonus FROM evaluation", "match": {"match": true, "result": [[19500.0]]}}
{"result": "SELECT SUM(`Bonus`) FROM `evaluation`", "match": {"match": true, "result": [[19500.0]]}}
{"result": "SELECT * \nFROM hiring", "match": {"match": true, "result": [[1, 1, "2009", "T"], [1, 2, "2003", "T"], [8, 3, "2011", "F"], [4, 4, "2012", "T"], [5, 5, "2013", "T"], [2, 6, "2010", "F"], [6, 7, "2008", "T"]]}}
{"result": "SELECT * FROM hiring", "match": {"match": true, "result": [[1, 1, "2009", "T"], [1, 2, "2003", "T"], [8, 3, "2011", "F"], [4, 4, "2012", "T"], [5, 5, "2013", "T"], [2, 6, "2010", "F"], [6, 7, "2008", "T"]]}}
{"result": "SELECT DISTINCT `District` \nFROM `shop` \nWHERE `Number_products` < 3000 INTERSECT \nSELECT DISTINCT `District` \nFROM `shop` \nWHERE `Number_products` > 10000", "match": {"match": true, "result": []}}
{"result": "SELECT DISTINCT T1.District \nFROM shop AS T1 \nJOIN shop AS T2 ON T1.District = T2.District \nWHERE (T1.Number_products < 3000 AND T2.Number_products > 10000)", "match": {"match": true, "result": []}}
{"result": "SELECT COUNT(DISTINCT Location) FROM shop", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(DISTINCT Location) FROM shop", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(Document_ID) FROM Documents", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(Document_ID) FROM Documents", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT Document_ID, Document_Name, Document_Description \nFROM Documents;", "match": {"match": true, "result": [[0, "Introduction of OS", "n"], [1, "Understanding DB", "y"], [3, "Summer Show", "u"], [76, "Robbin CV", "y"], [80, "Welcome to NY", "h"], [82, "Data base", "w"], [2394, "Customer reviews", "y"], [3830, "Do not panic", "k"], [33930, "How Google people work", "z"], [50123, "Learning French", "r"], [651512, "How to write a CV", "f"], [801801, "How to read a book", "w"], [3540024, "Palm reading", "y"], [16514113, "A history of Arts", "h"], [385906526, "About Korea", "b"]]}}
{"result": "SELECT Document_ID, Document_Name, Document_Description FROM Documents", "match": {"match": true, "result": [[0, "Introduction of OS", "n"], [1, "Understanding DB", "y"], [3, "Summer Show", "u"], [76, "Robbin CV", "y"], [80, "Welcome to NY", "h"], [82, "Data base", "w"], [2394, "Customer reviews", "y"], [3830, "Do not panic", "k"], [33930, "How Google people work", "z"], [50123, "Learning French", "r"], [651512, "How to write a CV", "f"], [801801, "How to read a book", "w"], [3540024, "Palm reading", "y"], [16514113, "A history of Arts", "h"], [385906526, "About Korea", "b"]]}}
{"result": "SELECT Document_Name, Template_ID \nFROM Documents \nWHERE Document_Description LIKE '%w%';", "match": {"match": true, "result": [["Data base", 11], ["How to read a book", 4]]}}
{"result": "SELECT Document_Name, Document_ID \nFROM Documents \nWHERE Document_Description LIKE '%w%';", "match": {"match": false, "result": [["Data base", 82], ["How to read a book", 801801]], "gt": [["Data base", 11], ["How to read a book", 4]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Document_ID, Template_ID, Document_Description\nFROM Documents\nWHERE Document_Name = 'Robbin CV';", "match": {"match": true, "result": [[76, 20, "y"]]}}
{"result": "SELECT Document_ID, Template_ID, Document_Description \nFROM Documents \nWHERE Document_Name = 'Robbin CV'", "match": {"match": true, "result": [[76, 20, "y"]]}}
{"result": "SELECT COUNT(DISTINCT T1.Template_Type_Code) \nFROM Templates T1 \nJOIN Documents T2 ON T1.Template_ID = T2.Template_ID", "match": {"match": false, "result": [[4]], "gt": [[12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(Template_ID) AS Different_Templates_Use\nFROM Templates\nGROUP BY Template_Type_Code", "match": {"match": false, "result": [[3], [6], [2], [6], [3]], "gt": [[12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(D.Documents_ID) \nFROM Documents D \nJOIN Templates T ON D.Template_ID = T.Template_ID \nWHERE T.Template_Type_Code = 'PPT';", "match": {"match": false, "error": "Query execution failed with error: no such column: D.Documents_ID"}}
{"result": "SELECT COUNT(DISTINCT T.Template_ID) \nFROM Templates T \nJOIN Ref_Template_Types RT ON T.Template_Type_Code = RT.Template_Type_Code \nWHERE RT.Template_Type_Description = 'PPT';", "match": {"match": false, "result": [[0]], "gt": [[3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.Template_ID, COUNT(D.Document_ID) AS Num_Documents\nFROM Templates T\nLEFT JOIN Documents D ON T.Template_ID = D.Template_ID\nGROUP BY T.Template_ID", "match": {"match": false, "result": [[0, 0], [1, 1], [4, 1], [6, 1], [7, 1], [8, 1], [9, 0], [10, 1], [11, 2], [14, 2], [15, 0], [16, 0], [18, 0], [19, 0], [20, 1], [21, 1], [22, 1], [23, 0], [24, 0], [25, 2]], "gt": [[1, 1], [4, 1], [6, 1], [7, 1], [8, 1], [10, 1], [11, 2], [14, 2], [20, 1], [21, 1], [22, 1], [25, 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    T.Template_ID, \n    COUNT(T.Template_ID) AS Document_Count\nFROM \n    Documents T\nGROUP BY \n    T.Template_ID", "match": {"match": true, "result": [[1, 1], [4, 1], [6, 1], [7, 1], [8, 1], [10, 1], [11, 2], [14, 2], [20, 1], [21, 1], [22, 1], [25, 2]]}}
{"result": "SELECT T.Template_ID, RT.Template_Type_Code\nFROM Templates T\nJOIN Documents D ON T.Template_ID = D.Template_ID\nJOIN (\n  SELECT Template_ID, COUNT(Document_ID) as total_documents\n  FROM Documents\n  GROUP BY Template_ID\n) subquery ON T.Template_ID = subquery.Template_ID\nJOIN Ref_Template_Types RT ON T.Template_Type_Code = RT.Template_Type_Code\nORDER BY subquery.total_documents DESC\nLIMIT 1;", "match": {"match": true, "result": [[25, "PP"]]}}
{"result": "SELECT T.Template_Type_Code, COUNT(D.Document_ID) \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID \nGROUP BY T.Template_Type_Code \nORDER BY COUNT(D.Document_ID) DESC \nLIMIT 1", "match": {"match": false, "result": [["BK", 5]], "gt": [[25, "PP"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.Template_ID\nFROM Templates T\nJOIN Documents D ON T.Template_ID = D.Template_ID\nGROUP BY T.Template_ID\nHAVING COUNT(D.Template_ID) > 1", "match": {"match": true, "result": [[11], [14], [25]]}}
{"result": "SELECT t.Template_ID \nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID\nGROUP BY t.Template_ID\nHAVING COUNT(d.Document_ID) > 1", "match": {"match": true, "result": [[11], [14], [25]]}}
{"result": "SELECT T.Template_ID \nFROM Templates T \nLEFT JOIN Documents D ON T.Template_ID = D.Template_ID \nWHERE D.Template_ID IS NULL", "match": {"match": true, "result": [[0], [9], [15], [16], [18], [19], [23], [24]]}}
{"result": "SELECT DISTINCT T.Template_ID \nFROM Templates T \nLEFT JOIN Documents D ON T.Template_ID = D.Template_ID \nWHERE D.Document_ID IS NULL;", "match": {"match": true, "result": [[0], [9], [15], [16], [18], [19], [23], [24]]}}
{"result": "SELECT COUNT(Template_ID) FROM Templates", "match": {"match": true, "result": [[20]]}}
{"result": "SELECT COUNT(Template_ID) FROM Templates", "match": {"match": true, "result": [[20]]}}
{"result": "SELECT Template_ID, Version_Number, Template_Type_Code \nFROM Templates", "match": {"match": true, "result": [[0, 5, "PP"], [1, 9, "PP"], [4, 4, "BK"], [6, 2, "PPT"], [7, 8, "PPT"], [8, 3, "BK"], [9, 2, "BK"], [10, 1, "PPT"], [11, 6, "BK"], [14, 7, "AD"], [15, 9, "CV"], [16, 5, "CV"], [18, 5, "PP"], [19, 7, "AD"], [20, 6, "BK"], [21, 9, "AD"], [22, 0, "PP"], [23, 2, "BK"], [24, 8, "PP"], [25, 5, "PP"]]}}
{"result": "SELECT Template_ID, Version_Number, Template_Type_Code \nFROM Templates;", "match": {"match": true, "result": [[0, 5, "PP"], [1, 9, "PP"], [4, 4, "BK"], [6, 2, "PPT"], [7, 8, "PPT"], [8, 3, "BK"], [9, 2, "BK"], [10, 1, "PPT"], [11, 6, "BK"], [14, 7, "AD"], [15, 9, "CV"], [16, 5, "CV"], [18, 5, "PP"], [19, 7, "AD"], [20, 6, "BK"], [21, 9, "AD"], [22, 0, "PP"], [23, 2, "BK"], [24, 8, "PP"], [25, 5, "PP"]]}}
{"result": "SELECT DISTINCT Template_Type_Code \nFROM Templates;", "match": {"match": true, "result": [["PP"], ["BK"], ["PPT"], ["AD"], ["CV"]]}}
{"result": "SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types", "match": {"match": false, "result": [["AD"], ["BK"], ["CV"], ["PP"], ["PPT"]], "gt": [["PP"], ["BK"], ["PPT"], ["AD"], ["CV"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Template_ID \nFROM Templates \nWHERE Template_Type_Code IN ('PP', 'PPT');", "match": {"match": true, "result": [[0], [1], [6], [7], [10], [18], [22], [24], [25]]}}
{"result": "SELECT Template_ID\nFROM Templates\nWHERE Template_Type_Code IN ('PP', 'PPT');", "match": {"match": true, "result": [[0], [1], [6], [7], [10], [18], [22], [24], [25]]}}
{"result": "SELECT COUNT(Template_ID) \nFROM Templates \nWHERE Template_Type_Code = 'CV'", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(Template_ID) \nFROM Templates \nWHERE Template_Type_Code = 'CV';", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT T.Template_Type_Code, T.Version_Number \nFROM Templates T \nWHERE T.Version_Number > 5", "match": {"match": false, "result": [["PP", 9], ["PPT", 8], ["BK", 6], ["AD", 7], ["CV", 9], ["AD", 7], ["BK", 6], ["AD", 9], ["PP", 8]], "gt": [[9, "PP"], [8, "PPT"], [6, "BK"], [7, "AD"], [9, "CV"], [7, "AD"], [6, "BK"], [9, "AD"], [8, "PP"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Version_Number, Template_Type_Code \nFROM Templates \nWHERE Version_Number > 5;", "match": {"match": true, "result": [[9, "PP"], [8, "PPT"], [6, "BK"], [7, "AD"], [9, "CV"], [7, "AD"], [6, "BK"], [9, "AD"], [8, "PP"]]}}
{"result": "SELECT \n  Template_Type_Code, \n  COUNT(Template_ID) AS Number_Of_Templates\nFROM \n  Templates\nGROUP BY \n  Template_Type_Code", "match": {"match": true, "result": [["AD", 3], ["BK", 6], ["CV", 2], ["PP", 6], ["PPT", 3]]}}
{"result": "SELECT \n    TTT.Template_Type_Code,\n    COUNT(T.Template_ID) AS Template_Count\nFROM \n    Ref_Template_Types TTT\nJOIN \n    Templates T ON TTT.Template_Type_Code = T.Template_Type_Code\nGROUP BY \n    TTT.Template_Type_Code", "match": {"match": true, "result": [["AD", 3], ["BK", 6], ["CV", 2], ["PP", 6], ["PPT", 3]]}}
{"result": "SELECT Template_Type_Code, COUNT(Template_ID) as total_templates\nFROM Templates\nGROUP BY Template_Type_Code\nORDER BY total_templates DESC\nLIMIT 1;", "match": {"match": false, "result": [["PP", 6]], "gt": [["PP"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.Template_Type_Code\nFROM Templates T\nGROUP BY T.Template_Type_Code\nORDER BY COUNT(T.Template_ID) DESC\nLIMIT 1", "match": {"match": true, "result": [["PP"]]}}
{"result": "SELECT T1.Template_Type_Code \nFROM Ref_Template_Types AS T1 \nJOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code \nGROUP BY T1.Template_Type_Code \nHAVING COUNT(T2.Template_ID) < 3;", "match": {"match": true, "result": [["CV"]]}}
{"result": "SELECT T1.Template_Type_Code \nFROM Ref_Template_Types AS T1 \nJOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code \nGROUP BY T1.Template_Type_Code \nHAVING COUNT(T2.Template_ID) < 3", "match": {"match": true, "result": [["CV"]]}}
{"result": "SELECT MIN(Version_Number), Template_Type_Code \nFROM Templates", "match": {"match": true, "result": [[0, "PP"]]}}
{"result": "SELECT MIN(T1.Version_Number), T1.Template_Type_Code \nFROM Templates T1 \nJOIN Ref_Template_Types T2 ON T1.Template_Type_Code = T2.Template_Type_Code", "match": {"match": true, "result": [[0, "PP"]]}}
{"result": "SELECT T.Template_Type_Code \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID \nWHERE D.Document_Name = 'Data base'", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT T.Template_Type_Code \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID \nWHERE D.Document_Name = 'Data base'", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT T1.Document_Name \nFROM Documents AS T1 \nJOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID \nJOIN Ref_Template_Types AS T3 ON T2.Template_Type_Code = T3.Template_Type_Code \nWHERE T3.Template_Type_Code = 'BK';", "match": {"match": true, "result": [["Robbin CV"], ["Data base"], ["How to read a book"], ["Palm reading"], ["About Korea"]]}}
{"result": "SELECT T2.Document_Name \nFROM Templates AS T1 \nJOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID \nWHERE T1.Template_Type_Code = 'BK';", "match": {"match": true, "result": [["Robbin CV"], ["Data base"], ["How to read a book"], ["Palm reading"], ["About Korea"]]}}
{"result": "SELECT \n    T1.Template_Type_Code, \n    COUNT(T3.Document_ID) AS Num_Documents\nFROM \n    Ref_Template_Types T1\nJOIN \n    Templates T2 ON T1.Template_Type_Code = T2.Template_Type_Code\nJOIN \n    Documents T3 ON T2.Template_ID = T3.Template_ID\nGROUP BY \n    T1.Template_Type_Code", "match": {"match": true, "result": [["AD", 3], ["BK", 5], ["PP", 4], ["PPT", 3]]}}
{"result": "SELECT \n    T1.Template_Type_Code, \n    COUNT(DISTINCT T2.Template_ID) AS Document_Count\nFROM \n    Ref_Template_Types T1\nLEFT JOIN \n    Templates T2 ON T1.Template_Type_Code = T2.Template_Type_Code\nGROUP BY \n    T1.Template_Type_Code", "match": {"match": false, "result": [["AD", 3], ["BK", 6], ["CV", 2], ["PP", 6], ["PPT", 3]], "gt": [["AD", 3], ["BK", 5], ["PP", 4], ["PPT", 3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.Template_Type_Code\nFROM (\n  SELECT Template_Type_Code, COUNT(DISTINCT Document_ID) AS Count\n  FROM Documents\n  GROUP BY Template_Type_Code\n) T\nORDER BY T.Count DESC\nLIMIT 1;", "match": {"match": false, "error": "Query execution failed with error: no such column: Template_Type_Code"}}
{"result": "SELECT \n  T1.Template_Type_Code, \n  COUNT(T3.Document_ID) AS Frequency\nFROM \n  Ref_Template_Types T1\n  INNER JOIN Templates T2 ON T1.Template_Type_Code = T2.Template_Type_Code\n  INNER JOIN Documents T3 ON T2.Template_ID = T3.Template_ID\nGROUP BY \n  T1.Template_Type_Code\nORDER BY \n  Frequency DESC\nLIMIT 1", "match": {"match": false, "result": [["BK", 5]], "gt": [["BK"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT TTT.Template_Type_Code\nFROM Ref_Template_Types TTT\nWHERE TTT.Template_Type_Code NOT IN (\n  SELECT D.Template_ID\n  FROM Documents D\n  GROUP BY D.Template_ID\n  HAVING COUNT(D.Template_ID) > 0\n);", "match": {"match": false, "result": [["AD"], ["BK"], ["CV"], ["PP"], ["PPT"]], "gt": [["CV"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Template_Type_Code \nFROM Ref_Template_Types \nWHERE Template_Type_Code NOT IN (\n  SELECT DISTINCT Template_Type_Code \n  FROM Templates \n  WHERE Template_ID IN (\n    SELECT Template_ID \n    FROM Documents\n  )\n);", "match": {"match": true, "result": [["CV"]]}}
{"result": "SELECT Template_Type_Code, Template_Type_Description \nFROM Ref_Template_Types", "match": {"match": true, "result": [["PPT", "Presentation"], ["CV", "CV"], ["AD", "Advertisement"], ["PP", "Paper"], ["BK", "Book"]]}}
{"result": "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;", "match": {"match": true, "result": [["PPT", "Presentation"], ["CV", "CV"], ["AD", "Advertisement"], ["PP", "Paper"], ["BK", "Book"]]}}
{"result": "SELECT Template_Type_Description \nFROM Ref_Template_Types \nWHERE Template_Type_Code = 'AD'", "match": {"match": true, "result": [["Advertisement"]]}}
{"result": "SELECT T.Template_Type_Description \nFROM Ref_Template_Types T \nWHERE T.Template_Type_Code = 'AD';", "match": {"match": true, "result": [["Advertisement"]]}}
{"result": "SELECT Template_Type_Code \nFROM Ref_Template_Types \nWHERE Template_Type_Description = 'Book';", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT Template_Type_Code \nFROM Ref_Template_Types \nWHERE Template_Type_Description = 'Book';", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT DISTINCT T1.Template_Type_Description \nFROM Ref_Template_Types AS T1 \nJOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code \nJOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID", "match": {"match": true, "result": [["Presentation"], ["Paper"], ["Book"], ["Advertisement"]]}}
{"result": "SELECT DISTINCT T.Template_Type_Description \nFROM Ref_Template_Types T \nJOIN Templates M ON T.Template_Type_Code = M.Template_Type_Code \nJOIN Documents D ON M.Template_ID = D.Template_ID", "match": {"match": true, "result": [["Presentation"], ["Paper"], ["Book"], ["Advertisement"]]}}
{"result": "SELECT T.Template_ID\nFROM Templates T\nJOIN Ref_Template_Types R ON T.Template_Type_Code = R.Template_Type_Code\nWHERE R.Template_Type_Description = 'Presentation';", "match": {"match": true, "result": [[6], [7], [10]]}}
{"result": "SELECT Template_ID FROM Templates WHERE Template_Details LIKE '%Presentation%'", "match": {"match": false, "result": [], "gt": [[6], [7], [10]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) FROM Paragraphs", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(Paragraph_ID) FROM Paragraphs", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) \nFROM Paragraphs \nWHERE Document_ID IN (\n  SELECT Document_ID \n  FROM Documents \n  WHERE Document_Name = 'Summer Show'\n);", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(P.Paragraph_ID) \nFROM Paragraphs P \nJOIN Documents D ON P.Document_ID = D.Document_ID \nWHERE D.Document_Name = 'Summer Show';", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT Paragraph_ID, Paragraph_Text, Other_Details\nFROM Paragraphs\nWHERE Paragraph_Text LIKE '%Korea%';", "match": {"match": false, "result": [[7, "Korea", null], [510442723, "Korea", null]], "gt": [[null], [null]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Paragraph_Text, T2.Document_Name \nFROM Paragraphs AS T1 \nJOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID \nWHERE T1.Paragraph_Text LIKE '%Korea%'", "match": {"match": false, "result": [["Korea", "Customer reviews"], ["Korea", "Customer reviews"]], "gt": [[null], [null]], "error": "Query result does not match ground truth."}}
{"result": "SELECT P.Paragraph_ID, P.Paragraph_Text\nFROM Paragraphs P\nJOIN Documents D ON P.Document_ID = D.Document_ID\nWHERE D.Document_Name = 'Welcome to NY'", "match": {"match": true, "result": [[16615, "Japan"], [608931827, "Micronesia"]]}}
{"result": "SELECT P.Paragraph_ID, P.Paragraph_Text\nFROM Paragraphs P\nINNER JOIN Documents D ON P.Document_ID = D.Document_ID\nWHERE D.Document_Name = 'Welcome to NY'", "match": {"match": true, "result": [[16615, "Japan"], [608931827, "Micronesia"]]}}
{"result": "SELECT T3.Paragraph_Text \nFROM Documents T1 \nJOIN Templates T2 ON T1.Template_ID = T2.Template_ID \nJOIN Paragraphs T3 ON T1.Document_ID = T3.Document_ID \nWHERE T1.Document_Name = 'Customer reviews'", "match": {"match": true, "result": [["Korea"], ["Ukraine"], ["Korea"]]}}
{"result": "SELECT Paragraph_Text FROM Paragraphs AS P \nJOIN Documents AS D ON P.Document_ID = D.Document_ID \nWHERE D.Document_Name = 'Customer reviews'", "match": {"match": true, "result": [["Korea"], ["Ukraine"], ["Korea"]]}}
{"result": "SELECT \n  D.Document_ID, \n  COUNT(P.Paragraph_ID) AS Num_Paragraphs\nFROM \n  Documents D\n  LEFT JOIN Paragraphs P ON D.Document_ID = P.Document_ID\nGROUP BY \n  D.Document_ID\nORDER BY \n  D.Document_ID", "match": {"match": false, "result": [[0, 0], [1, 0], [3, 1], [76, 0], [80, 2], [82, 0], [2394, 3], [3830, 1], [33930, 1], [50123, 1], [651512, 2], [801801, 0], [3540024, 1], [16514113, 2], [385906526, 1]], "gt": [[3, 1], [80, 2], [2394, 3], [3830, 1], [33930, 1], [50123, 1], [651512, 2], [3540024, 1], [16514113, 2], [385906526, 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Document_ID, COUNT(*) AS Paragraph_Count\nFROM Paragraphs\nGROUP BY Document_ID\nORDER BY Document_ID", "match": {"match": true, "result": [[3, 1], [80, 2], [2394, 3], [3830, 1], [33930, 1], [50123, 1], [651512, 2], [3540024, 1], [16514113, 2], [385906526, 1]]}}
{"result": "SELECT \n    D.Document_ID,\n    D.Document_Name,\n    COUNT(P.Paragraph_ID) AS Num_Paragraphs\nFROM \n    Documents D\nLEFT JOIN \n    Paragraphs P ON D.Document_ID = P.Document_ID\nGROUP BY \n    D.Document_ID, D.Document_Name", "match": {"match": false, "result": [[0, "Introduction of OS", 0], [1, "Understanding DB", 0], [3, "Summer Show", 1], [76, "Robbin CV", 0], [80, "Welcome to NY", 2], [82, "Data base", 0], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [801801, "How to read a book", 0], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "gt": [[3, "Summer Show", 1], [80, "Welcome to NY", 2], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) \nFROM Documents \nLEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID \nGROUP BY Documents.Document_ID, Documents.Document_Name", "match": {"match": false, "result": [[0, "Introduction of OS", 0], [1, "Understanding DB", 0], [3, "Summer Show", 1], [76, "Robbin CV", 0], [80, "Welcome to NY", 2], [82, "Data base", 0], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [801801, "How to read a book", 0], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "gt": [[3, "Summer Show", 1], [80, "Welcome to NY", 2], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Document_ID \nFROM Paragraphs \nGROUP BY Document_ID \nHAVING COUNT(Document_ID) >= 2;", "match": {"match": true, "result": [[80], [2394], [651512], [16514113]]}}
{"result": "SELECT T1.Document_ID \nFROM Documents AS T1 \nJOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID \nGROUP BY T1.Document_ID \nHAVING COUNT(T2.Paragraph_ID) >= 2", "match": {"match": true, "result": [[80], [2394], [651512], [16514113]]}}
{"result": "SELECT Document_ID, Document_Name \nFROM Documents \nORDER BY (SELECT COUNT(*) \n          FROM Paragraphs p \n          WHERE p.Document_ID = Documents.Document_ID) DESC \nLIMIT 1;", "match": {"match": true, "result": [[2394, "Customer reviews"]]}}
{"result": "SELECT Document_ID, Document_Name \nFROM Documents \nWHERE Document_ID = (SELECT Document_ID \n                     FROM Documents \n                     GROUP BY Document_ID \n                     ORDER BY COUNT(Paragraph_ID) DESC \n                     LIMIT 1);", "match": {"match": false, "error": "Query execution failed with error: no such column: Paragraph_ID"}}
{"result": "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(Document_ID) ASC LIMIT 1", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT T1.Document_ID \nFROM Documents T1 \nJOIN Paragraphs T2 ON T1.Document_ID = T2.Document_ID \nGROUP BY T1.Document_ID \nORDER BY COUNT(T2.Paragraph_ID) ASC \nLIMIT 1;", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT T2.Document_ID\nFROM Paragraphs AS T1\nJOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID\nGROUP BY T2.Document_ID\nHAVING COUNT(T1.Paragraph_ID) BETWEEN 1 AND 2;", "match": {"match": true, "result": [[3], [80], [3830], [33930], [50123], [651512], [3540024], [16514113], [385906526]]}}
{"result": "SELECT T1.Document_ID \nFROM Documents AS T1 \nJOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID \nGROUP BY T1.Document_ID \nHAVING COUNT(T2.Paragraph_ID) BETWEEN 1 AND 2", "match": {"match": true, "result": [[3], [80], [3830], [33930], [50123], [651512], [3540024], [16514113], [385906526]]}}
{"result": "SELECT Document_ID \nFROM Paragraphs \nWHERE Paragraph_Text IN ('Brazil', 'Ireland')", "match": {"match": false, "result": [[16514113], [16514113]], "gt": [[16514113]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T1.Document_ID\nFROM Paragraphs AS T1\nJOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID\nWHERE T1.Paragraph_Text IN ('Brazil', 'Ireland')", "match": {"match": true, "result": [[16514113]]}}
{"result": "SELECT COUNT(Teacher_ID) FROM teacher", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT COUNT(Teacher_ID) FROM teacher", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT Name FROM teacher ORDER BY Age ASC", "match": {"match": true, "result": [["Vicente Carretero"], ["Gustaaf Deloor"], ["Joseph Huts"], ["John Deloor"], ["Lucy Wong"], ["Anne Walker"], ["Kearsley Brown"]]}}
{"result": "SELECT Name FROM teacher ORDER BY Age ASC", "match": {"match": true, "result": [["Vicente Carretero"], ["Gustaaf Deloor"], ["Joseph Huts"], ["John Deloor"], ["Lucy Wong"], ["Anne Walker"], ["Kearsley Brown"]]}}
{"result": "SELECT Age, Hometown FROM teacher", "match": {"match": true, "result": [["32", "Blackrod Urban District"], ["29", "Bolton County Borough"], ["26", "Farnworth Municipal Borough"], ["33", "Horwich Urban District"], ["45", "Kearsley Urban District"], ["41", "Little Lever Urban District"], ["39", "Turton Urban District"]]}}
{"result": "SELECT `Age`, `Hometown` FROM teacher", "match": {"match": true, "result": [["32", "Blackrod Urban District"], ["29", "Bolton County Borough"], ["26", "Farnworth Municipal Borough"], ["33", "Horwich Urban District"], ["45", "Kearsley Urban District"], ["41", "Little Lever Urban District"], ["39", "Turton Urban District"]]}}
{"result": "SELECT Name \nFROM teacher \nWHERE Hometown != 'Little Lever Urban District';", "match": {"match": false, "result": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Lucy Wong"]], "gt": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Anne Walker"], ["Lucy Wong"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'", "match": {"match": false, "result": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Lucy Wong"]], "gt": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Anne Walker"], ["Lucy Wong"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Name \nFROM course_arrange AS T1 \nJOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nWHERE T2.Age = '32' OR T2.Age = '33'", "match": {"match": false, "result": [], "gt": [["Joseph Huts"], ["John Deloor"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name \nFROM teacher \nWHERE Age = '32' OR Age = '33'", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "match": {"match": true, "result": [["Farnworth Municipal Borough"]]}}
{"result": "SELECT Hometown FROM teacher WHERE Age = ( SELECT MIN(Age) FROM teacher );", "match": {"match": true, "result": [["Farnworth Municipal Borough"]]}}
{"result": "SELECT Hometown, COUNT(Teacher_ID) FROM teacher GROUP BY Hometown", "match": {"match": true, "result": [["Blackrod Urban District", 1], ["Bolton County Borough", 1], ["Farnworth Municipal Borough", 1], ["Horwich Urban District", 1], ["Kearsley Urban District", 1], ["Little Lever Urban District", 1], ["Turton Urban District", 1]]}}
{"result": "SELECT COUNT(Teacher_ID) \nFROM teacher \nGROUP BY Hometown", "match": {"match": false, "result": [[1], [1], [1], [1], [1], [1], [1]], "gt": [["Blackrod Urban District", 1], ["Bolton County Borough", 1], ["Farnworth Municipal Borough", 1], ["Horwich Urban District", 1], ["Kearsley Urban District", 1], ["Little Lever Urban District", 1], ["Turton Urban District", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(Hometown) DESC LIMIT 1", "match": {"match": true, "result": [["Turton Urban District"]]}}
{"result": "SELECT Hometown, COUNT(Hometown) AS Count\nFROM teacher\nGROUP BY Hometown\nORDER BY Count DESC", "match": {"match": false, "result": [["Turton Urban District", 1], ["Little Lever Urban District", 1], ["Kearsley Urban District", 1], ["Horwich Urban District", 1], ["Farnworth Municipal Borough", 1], ["Bolton County Borough", 1], ["Blackrod Urban District", 1]], "gt": [["Turton Urban District"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Hometown \nFROM teacher \nGROUP BY Hometown \nHAVING COUNT(Teacher_ID)  >= 2", "match": {"match": true, "result": []}}
{"result": "SELECT Name, Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) >= 2", "match": {"match": true, "result": []}}
{"result": "SELECT T1.`Name`, T2.`Course`\nFROM `teacher` AS T1\nINNER JOIN `course_arrange` AS T2 ON T1.`Teacher_ID` = T2.`Teacher_ID`\nINNER JOIN `course` AS T3 ON T2.`Course_ID` = T3.`Course_ID`", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Course"}}
{"result": "SELECT T1.Name, T2.Course \nFROM teacher AS T1 \nJOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nJOIN course AS T3 ON T2.Course_ID = T3.Course_ID", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Course"}}
{"result": "SELECT T1.Name, T2.Course \nFROM teacher AS T1 \nJOIN course_arrange AS T2 \nJOIN course AS T3 \nON T1.Teacher_ID = T2.Teacher_ID \nON T2.Course_ID = T3.Course_ID \nORDER BY T1.Name ASC", "match": {"match": false, "error": "Query execution failed with error: near \"ON\": syntax error"}}
{"result": "SELECT T1.Name, T2.Course \nFROM teacher T1 \nJOIN course_arrange T3 ON T1.Teacher_ID = T3.Teacher_ID \nJOIN course T2 ON T2.Course_ID = T3.Course_ID \nORDER BY T1.Name ASC", "match": {"match": true, "result": [["Anne Walker", "History"], ["Anne Walker", "Bible"], ["Gustaaf Deloor", "Science"], ["Kearsley Brown", "Math"], ["Lucy Wong", "Music"], ["Vicente Carretero", "Math"]]}}
{"result": "SELECT T2.Name \nFROM course \nINNER JOIN course_arrange \nON course.Course_ID = course_arrange.Course_ID \nINNER JOIN teacher T2 \nON course_arrange.Teacher_ID = T2.Teacher_ID \nWHERE course.`Course` = 'Math';", "match": {"match": true, "result": [["Kearsley Brown"], ["Vicente Carretero"]]}}
{"result": "SELECT T2.Name \nFROM course_arrange AS T1 \nJOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nJOIN course AS T3 ON T1.Course_ID = T3.Course_ID \nWHERE T3.Course = 'Math';", "match": {"match": true, "result": [["Kearsley Brown"], ["Vicente Carretero"]]}}
{"result": "SELECT T1.Name, COUNT(T2.Course_ID) AS num_courses\nFROM teacher AS T1\nJOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID\nGROUP BY T1.Name", "match": {"match": true, "result": [["Anne Walker", 2], ["Gustaaf Deloor", 1], ["Kearsley Brown", 1], ["Lucy Wong", 1], ["Vicente Carretero", 1]]}}
{"result": "SELECT T2.Name, COUNT(T1.Course_ID) FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name", "match": {"match": true, "result": [["Anne Walker", 2], ["Gustaaf Deloor", 1], ["Kearsley Brown", 1], ["Lucy Wong", 1], ["Vicente Carretero", 1]]}}
{"result": "SELECT T1.Name\nFROM teacher AS T1\nINNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID\nGROUP BY T1.Teacher_ID\nHAVING COUNT(T1.Teacher_ID) >= 2", "match": {"match": true, "result": [["Anne Walker"]]}}
{"result": "SELECT T2.Name \nFROM course_arrange AS T1 \nJOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T1.Teacher_ID \nHAVING COUNT(T1.Course_ID)  >= 2", "match": {"match": true, "result": [["Anne Walker"]]}}
{"result": "SELECT Name \nFROM teacher \nWHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange);", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT T2.Name \nFROM course_arrange AS T1 \nLEFT JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nWHERE T1.Course_ID IS NULL", "match": {"match": false, "result": [], "gt": [["Joseph Huts"], ["John Deloor"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) \nFROM visitor \nWHERE Age < 30", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Name \nFROM visitor \nWHERE Level_of_membership > 4 \nORDER BY Level_of_membership DESC", "match": {"match": true, "result": [["Gonzalo Higua\u00edn "], ["Fernando Gago"], ["Guti Midfielder"]]}}
{"result": "SELECT CAST(SUM(Age) AS REAL) / COUNT(*) \nFROM visitor \nWHERE Level_of_membership <= 4;", "match": {"match": true, "result": [[36.0]]}}
{"result": "SELECT Name, Level_of_membership\nFROM visitor\nWHERE Level_of_membership > 4\nORDER BY Age DESC;", "match": {"match": true, "result": [["Fernando Gago", 6], ["Gonzalo Higua\u00edn ", 8], ["Guti Midfielder", 5]]}}
{"result": "SELECT Museum_ID, Name \nFROM museum \nORDER BY Num_of_Staff DESC \nLIMIT 1;", "match": {"match": true, "result": [[1, "Plaza Museum"]]}}
{"result": "SELECT AVG(Num_of_Staff) \nFROM museum \nWHERE Open_Year < '2009';", "match": {"match": true, "result": [[31.333333333333332]]}}
{"result": "SELECT T2.Open_Year, T2.Num_of_Staff \nFROM visitor AS T1 \nINNER JOIN visit AS T3 ON T1.ID = T3.visitor_ID \nINNER JOIN museum AS T2 ON T3.Museum_ID = T2.Museum_ID \nWHERE T1.Name = 'Plaza Museum';", "match": {"match": false, "result": [], "gt": [[62, "2000"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name \nFROM museum AS T1 \nJOIN ( SELECT Museum_ID, Min(Num_of_Staff) AS min_staff \n       FROM museum \n       WHERE Open_Year > '2010' \n       GROUP BY Museum_ID \n     ) AS T2 \nON T1.Museum_ID = T2.Museum_ID \nWHERE T1.Num_of_Staff > T2.min_staff", "match": {"match": false, "result": [], "gt": [["Plaza Museum"], ["Capital Plaza Museum"], ["Jefferson Development Museum"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT t1.`ID`, t1.Name, t1.Age \nFROM visitor AS t1 \nJOIN visit AS t2 ON t1.`ID` = t2.visitor_ID \nGROUP BY t1.`ID` HAVING COUNT(t2.Museum_ID) > 1", "match": {"match": true, "result": [[3, "Arjen Robben", 27], [5, "Fernando Gago", 36], [6, "Rafael van der Vaart", 25]]}}
{"result": "SELECT t1.ID, t1.Name, t1.`Level_of_membership` \nFROM visitor t1 \nJOIN visit t2 ON t1.ID = t2.visitor_ID \nWHERE (t2.Museum_ID, t2.visitor_ID) IN (\n    SELECT t2.Museum_ID, t2.visitor_ID \n    FROM visit t2 \n    GROUP BY t2.Museum_ID, t2.visitor_ID \n    ORDER BY SUM(t2.Total_spent) DESC \n    LIMIT 1\n)", "match": {"match": false, "result": [[3, "Arjen Robben", 1]], "gt": [["3", "Arjen Robben", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.`Museum_ID`, T2.`Name` \nFROM visit AS T1 \nJOIN museum AS T2 \nON T1.`Museum_ID` = T2.`Museum_ID` \nGROUP BY T1.`Museum_ID` \nORDER BY SUM(T1.`Num_of_Ticket`) DESC \nLIMIT 1;", "match": {"match": true, "result": [[2, "Capital Plaza Museum"]]}}
{"result": "SELECT Name \nFROM museum \nWHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit);", "match": {"match": true, "result": [["Jefferson Development Museum"], ["RiverPark Museum"], ["Place Tower Museum"], ["Central City District Residential Museum"]]}}
{"result": "SELECT T1.Name, T1.Age \nFROM visitor AS T1 \nJOIN visit AS T2 ON T1.ID = T2.visitor_ID \nJOIN ( SELECT visitor_ID, MAX(Num_of_Ticket) AS max_tickets FROM visit GROUP BY visitor_ID ) AS T3 ON T2.visitor_ID = T3.visitor_ID AND T2.Num_of_Ticket = T3.max_tickets", "match": {"match": false, "result": [["Fernando Gago", 36], ["Arjen Robben", 27], ["Rafael van der Vaart", 25]], "gt": [["Arjen Robben", 27]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(`Num_of_Ticket`) AS avg_tickets, MAX(`Num_of_Ticket`) AS max_tickets\nFROM visit", "match": {"match": true, "result": [[10.5, 24]]}}
{"result": "SELECT SUM(T2.Total_spent) \nFROM visitor AS T1 \nINNER JOIN visit AS T2 ON T1.ID = T2.visitor_ID \nWHERE T1.Level_of_membership = 1", "match": {"match": true, "result": [[570.84]]}}
{"result": "SELECT T1.Name \nFROM visitor AS T1 \nJOIN visit AS T2 ON T1.ID = T2.visitor_ID \nJOIN museum AS T3 ON T2.Museum_ID = T3.Museum_ID \nWHERE T3.Open_Year < '2009' AND T3.Open_Year > '2011'", "match": {"match": false, "result": [], "gt": [["Fernando Gago"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) \nFROM visitor \nWHERE ID NOT IN (\n  SELECT visitor_ID \n  FROM visit \n  WHERE Museum_ID IN (\n    SELECT Museum_ID \n    FROM museum \n    WHERE Open_Year > '2010'\n  )\n);", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(Museum_ID) \nFROM museum \nWHERE Open_Year > 2013 OR Open_Year < 2008;", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(*) \nFROM ship \nWHERE disposition_of_ship = 'Captured';", "match": {"match": true, "result": [[4]]}}
{"result": "SELECT name, tonnage FROM ship ORDER BY name DESC", "match": {"match": true, "result": [["Three Brothers", "t"], ["Mary", "t"], ["Lettice", "t"], ["HMS Avon", "391"], ["HMS Atalanta", "225"], ["Bon Accord", "t"], ["Bacchus", "t"]]}}
{"result": "SELECT name, date, result \nFROM battle;", "match": {"match": false, "result": [["Battle of Adrianople", "14 April 1205", "Bulgarian victory"], ["Battle of Serres", "June 1205", "Bulgarian victory"], ["Battle of Rusion", "31 January 1206", "Bulgarian victory"], ["Battle of Rodosto", "February 1206", "Bulgarian victory"], ["Battle of Messinopolis", "4 September 1207", "Bulgarian victory"], ["Battle of Boruy", "June 1205", "Bulgarian victory"], ["Battle of Philippopolis", "31 June 1208", "Latin victory"], ["Siege of Constantinople", "1235", "Two Year Truce"]], "gt": [["Battle of Adrianople", "14 April 1205"], ["Battle of Serres", "June 1205"], ["Battle of Rusion", "31 January 1206"], ["Battle of Rodosto", "February 1206"], ["Battle of Messinopolis", "4 September 1207"], ["Battle of Boruy", "June 1205"], ["Battle of Philippopolis", "31 June 1208"], ["Siege of Constantinople", "1235"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(killed) AS max_death, MIN(killed) AS min_death FROM death", "match": {"match": true, "result": [[29, 0]]}}
{"result": "SELECT AVG(injured) FROM death", "match": {"match": true, "result": [[1.0769230769230769]]}}
{"result": "SELECT killed, injured FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE tonnage = 't')", "match": {"match": true, "result": [[8, 0], [3, 0], [25, 0], [2, 0], [0, 0], [4, 5], [0, 0], [29, 0], [0, 0], [0, 0], [14, 0]]}}
{"result": "SELECT name, result \nFROM battle \nWHERE bulgarian_commander != 'Boril';", "match": {"match": true, "result": [["Battle of Adrianople", "Bulgarian victory"], ["Battle of Serres", "Bulgarian victory"], ["Battle of Rusion", "Bulgarian victory"], ["Battle of Rodosto", "Bulgarian victory"], ["Battle of Messinopolis", "Bulgarian victory"], ["Siege of Constantinople", "Two Year Truce"]]}}
{"result": "SELECT T1.id, T1.name \nFROM battle AS T1 \nJOIN ship AS T2 ON T1.id = T2.lost_in_battle \nWHERE T2.ship_type = 'Brig'", "match": {"match": true, "result": [[8, "Siege of Constantinople"], [7, "Battle of Philippopolis"], [6, "Battle of Boruy"], [5, "Battle of Messinopolis"], [4, "Battle of Rodosto"]]}}
{"result": "SELECT `lost_in_battle`, `name` \nFROM `ship` \nJOIN `death` ON `ship`.`id` = `death`.`caused_by_ship_id` \nGROUP BY `lost_in_battle` \nHAVING `killed` > 10", "match": {"match": false, "result": [[6, "Mary"]], "gt": [[5, "Battle of Messinopolis"], [6, "Battle of Boruy"], [8, "Siege of Constantinople"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT caused_by_ship_id, name, injured FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY caused_by_ship_id ORDER BY sum(injured) DESC LIMIT 1", "match": {"match": false, "result": [[4, "HMS Avon", 0]], "gt": [[5, "Three Brothers"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'", "match": {"match": true, "result": [["Battle of Adrianople"]]}}
{"result": "SELECT COUNT(DISTINCT result) FROM battle", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(id) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225')", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT T2.name, T2.date \nFROM ship AS T1 \nJOIN battle AS T2 ON T1.lost_in_battle = T2.id \nWHERE T1.name = 'Lettice' OR T1.name = 'HMS Atalanta'", "match": {"match": false, "result": [["Siege of Constantinople", "1235"], ["Siege of Constantinople", "1235"]], "gt": [["Siege of Constantinople", "1235"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.name, T1.result, T1.bulgarian_commander \nFROM battle AS T1 \nLEFT JOIN ship AS T2 ON T1.id = T2.lost_in_battle \nWHERE T2.location != 'English Channel'", "match": {"match": false, "result": [["Battle of Messinopolis", "Bulgarian victory", "Unknown"], ["Siege of Constantinople", "Two Year Truce", "Ivan Asen II"]], "gt": [["Battle of Adrianople", "Bulgarian victory", "Kaloyan"], ["Battle of Rusion", "Bulgarian victory", "Kaloyan"], ["Battle of Serres", "Bulgarian victory", "Kaloyan"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT note FROM death WHERE note LIKE '%East%'", "match": {"match": true, "result": [["East Champaran, Bihar"]]}}
{"result": "SELECT line_1, line_2 \nFROM Addresses", "match": {"match": true, "result": [["2294 Grant Square Apt. 235", "Apt. 370"], ["3999 Aufderhar Ways Suite 593", "Apt. 388"], ["67942 Carlotta Ferry Apt. 686", "Apt. 583"], ["0144 Lamar Plaza Apt. 346", "Suite 703"], ["858 Peggie Bypass Suite 212", "Apt. 335"], ["16998 Mraz Lodge", "Apt. 689"], ["193 Marlin Brook", "Apt. 406"], ["202 Hessel Views Apt. 468", "Apt. 305"], ["0643 Muller Vista", "Suite 383"], ["7081 Eda Center", "Suite 830"], ["9283 Schulist Falls Apt. 037", "Suite 239"], ["979 Haag Shores Suite 656", "Apt. 468"], ["492 Wilkinson Route", "Suite 865"], ["186 Evan Motorway Apt. 409", "Suite 079"], ["74046 Metz Walk Apt. 113", "Suite 674"]]}}
{"result": "SELECT line_1, line_2 FROM Addresses;", "match": {"match": true, "result": [["2294 Grant Square Apt. 235", "Apt. 370"], ["3999 Aufderhar Ways Suite 593", "Apt. 388"], ["67942 Carlotta Ferry Apt. 686", "Apt. 583"], ["0144 Lamar Plaza Apt. 346", "Suite 703"], ["858 Peggie Bypass Suite 212", "Apt. 335"], ["16998 Mraz Lodge", "Apt. 689"], ["193 Marlin Brook", "Apt. 406"], ["202 Hessel Views Apt. 468", "Apt. 305"], ["0643 Muller Vista", "Suite 383"], ["7081 Eda Center", "Suite 830"], ["9283 Schulist Falls Apt. 037", "Suite 239"], ["979 Haag Shores Suite 656", "Apt. 468"], ["492 Wilkinson Route", "Suite 865"], ["186 Evan Motorway Apt. 409", "Suite 079"], ["74046 Metz Walk Apt. 113", "Suite 674"]]}}
{"result": "SELECT COUNT(course_id) FROM Courses", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) FROM Courses", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT T1.course_description \nFROM Courses AS T1 \nINNER JOIN Sections AS T2 \nON T1.course_id = T2.course_id \nWHERE T1.course_name = 'Math';", "match": {"match": false, "result": [], "gt": [["q"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.course_description \nFROM `Sections` AS T1 \nJOIN `Courses` AS T2 ON T1.course_id = T2.course_id \nJOIN `Departments` AS T3 ON T2.course_id = T3.department_id \nJOIN `Degree_Programs` AS T4 ON T3.department_id = T4.department_id \nWHERE T2.course_name LIKE '%Math%'", "match": {"match": false, "result": [["q"], ["q"]], "gt": [["q"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT zip_postcode \nFROM Addresses \nWHERE city = 'Port Chelsea';", "match": {"match": true, "result": [["148"]]}}
{"result": "SELECT `zip_postcode` \nFROM `Addresses` \nWHERE `city` = 'Port Chelsea';", "match": {"match": true, "result": [["148"]]}}
{"result": "SELECT T1.department_id, T1.department_name \nFROM Departments AS T1 \nJOIN Degree_Programs AS T2 \nON T2.department_id = T1.department_id \nGROUP BY T1.department_id \nORDER BY COUNT(T2.degree_program_id) DESC \nLIMIT 1", "match": {"match": false, "result": [[8, "statistics"]], "gt": [["statistics", 8]], "error": "Query result does not match ground truth."}}
{"result": "SELECT department_name, department_id \nFROM Degree_Programs \nGROUP BY department_id \nORDER BY COUNT(degree_program_id) DESC \nLIMIT 1", "match": {"match": false, "error": "Query execution failed with error: no such column: department_name"}}
{"result": "SELECT COUNT(DISTINCT department_id) \nFROM Degree_Programs", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT COUNT(DISTINCT department_id) FROM Degree_Programs", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT COUNT(DISTINCT `degree_summary_name`) AS distinct_degree_names \nFROM `Degree_Programs`", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(DISTINCT degree_program_id) FROM Degree_Programs", "match": {"match": false, "result": [[15]], "gt": [[3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) \nFROM Degree_Programs \nJOIN Departments ON Degree_Programs.department_id = Departments.department_id \nWHERE Departments.department_name = 'Engineering';", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(*) \nFROM `Degree_Programs` \nWHERE department_id IN (SELECT department_id FROM Departments WHERE department_name = 'Engineering')", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT course_id, section_name, section_description FROM Sections", "match": {"match": false, "result": [[9, "a", "non"], [2, "b", "voluptatem"], [8, "c", "qui"], [1, "d", "voluptas"], [5, "e", "ex"], [7, "f", "doloremque"], [12, "g", "provident"], [14, "h", "et"], [8, "j", "quis"], [14, "k", "nesciunt"], [1, "l", "ad"], [4, "o", "et"], [5, "p", "facilis"], [6, "u", "reprehenderit"], [10, "y", "qui"]], "gt": [["a", "non"], ["b", "voluptatem"], ["c", "qui"], ["d", "voluptas"], ["e", "ex"], ["f", "doloremque"], ["g", "provident"], ["h", "et"], ["j", "quis"], ["k", "nesciunt"], ["l", "ad"], ["o", "et"], ["p", "facilis"], ["u", "reprehenderit"], ["y", "qui"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT `section_name`, `section_description` FROM `Sections`", "match": {"match": true, "result": [["a", "non"], ["b", "voluptatem"], ["c", "qui"], ["d", "voluptas"], ["e", "ex"], ["f", "doloremque"], ["g", "provident"], ["h", "et"], ["j", "quis"], ["k", "nesciunt"], ["l", "ad"], ["o", "et"], ["p", "facilis"], ["u", "reprehenderit"], ["y", "qui"]]}}
{"result": "SELECT T1.course_name, T1.course_id\nFROM Courses AS T1\nJOIN Sections AS T2 ON T1.course_id = T2.course_id\nGROUP BY T1.course_name, T1.course_id\nHAVING COUNT(T2.section_id) <= 2", "match": {"match": false, "result": [["cal", 7], ["db", 12], ["dl", 9], ["ds", 1], ["en", 4], ["fr", 5], ["la", 6], ["math", 2], ["ml", 10], ["nlp", 8], ["pl", 14]], "gt": [["ds", 1], ["math", 2], ["en", 4], ["fr", 5], ["la", 6], ["cal", 7], ["nlp", 8], ["dl", 9], ["ml", 10], ["db", 12], ["pl", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.course_name, T1.course_id\nFROM Courses AS T1\nJOIN Sections AS T2 ON T1.course_id = T2.course_id\nGROUP BY T1.course_id\nHAVING COUNT(T2.section_id) < 2", "match": {"match": false, "result": [["math", 2], ["en", 4], ["la", 6], ["cal", 7], ["dl", 9], ["ml", 10], ["db", 12]], "gt": [["ds", 1], ["math", 2], ["en", 4], ["fr", 5], ["la", 6], ["cal", 7], ["nlp", 8], ["dl", 9], ["ml", 10], ["db", 12], ["pl", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT section_name \nFROM Sections \nORDER BY section_name DESC", "match": {"match": true, "result": [["y"], ["u"], ["p"], ["o"], ["l"], ["k"], ["j"], ["h"], ["g"], ["f"], ["e"], ["d"], ["c"], ["b"], ["a"]]}}
{"result": "SELECT section_name FROM Sections ORDER BY section_name DESC", "match": {"match": true, "result": [["y"], ["u"], ["p"], ["o"], ["l"], ["k"], ["j"], ["h"], ["g"], ["f"], ["e"], ["d"], ["c"], ["b"], ["a"]]}}
{"result": "SELECT S.semester_name, S.semester_id FROM Semesters S\nJOIN Student_Enrolment SE ON S.semester_id = SE.semester_id\nGROUP BY S.semester_id\nORDER BY COUNT(SE.student_id) DESC LIMIT 1", "match": {"match": true, "result": [["summer 2010", 2]]}}
{"result": "SELECT T1.semester_name, T1.semester_id \nFROM Semesters T1\nJOIN (\n  SELECT semester_id, COUNT(student_id) as student_count\n  FROM Student_Enrolment\n  GROUP BY semester_id\n  ORDER BY student_count DESC\n  LIMIT 1\n) T2 \nON T1.semester_id = T2.semester_id", "match": {"match": true, "result": [["summer 2010", 2]]}}
{"result": "SELECT `department_description` \nFROM `Departments` \nWHERE `department_name` LIKE '%the computer%';", "match": {"match": false, "result": [], "gt": [["error"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT department_description \nFROM Departments \nWHERE department_name LIKE '%computer%'", "match": {"match": true, "result": [["error"]]}}
{"result": "SELECT S.first_name, S.middle_name, S.last_name, SE.degree_program_id \nFROM Students S \nJOIN Student_Enrolment SE ON S.student_id = SE.student_id \nGROUP BY SE.student_id \nHAVING COUNT(DISTINCT SE.degree_program_id) = 2;", "match": {"match": false, "result": [["Jarvis", "Aaliyah", "Carroll", 9], ["Stanford", "Mona", "Rogahn", 2], ["Jordy", "Osborne", "Rempel", 12]], "gt": [["Jarvis", "Aaliyah", "Carroll", 4], ["Reva", "Golda", "Osinski", 9], ["Jordy", "Osborne", "Rempel", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    S.first_name, \n    S.middle_name, \n    S.last_name, \n    S.student_id \nFROM \n    Students S \nJOIN \n    Student_Enrolment SE ON S.student_id = SE.student_id \nGROUP BY \n    S.student_id \nHAVING \n    COUNT(DISTINCT SE.degree_program_id) = 2;", "match": {"match": false, "result": [["Jarvis", "Aaliyah", "Carroll", 4], ["Stanford", "Mona", "Rogahn", 6], ["Jordy", "Osborne", "Rempel", 14]], "gt": [["Jarvis", "Aaliyah", "Carroll", 4], ["Reva", "Golda", "Osinski", 9], ["Jordy", "Osborne", "Rempel", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.first_name, T1.middle_name, T1.last_name \nFROM Students AS T1 \nJOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id \nJOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id \nWHERE T3.degree_summary_name = 'Bachelor degree program'", "match": {"match": false, "result": [], "gt": [["Reva", "Golda", "Osinski"], ["Frida", "Aisha", "Huel"], ["Jarvis", "Aaliyah", "Carroll"], ["Milton", "Vaughn", "Christiansen"], ["Stanford", "Mona", "Rogahn"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.first_name, T1.middle_name, T1.last_name \nFROM Students AS T1 \nJOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id \nJOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id \nWHERE T3.degree_summary_name = 'Bachelors';", "match": {"match": false, "result": [], "gt": [["Reva", "Golda", "Osinski"], ["Frida", "Aisha", "Huel"], ["Jarvis", "Aaliyah", "Carroll"], ["Milton", "Vaughn", "Christiansen"], ["Stanford", "Mona", "Rogahn"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.degree_summary_name \nFROM Student_Enrolment AS T1 \nJOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id \nJOIN ( SELECT degree_program_id, COUNT(degree_program_id) as count FROM Student_Enrolment GROUP BY degree_program_id ORDER BY count DESC LIMIT 1 ) AS T3 ON T1.degree_program_id = T3.degree_program_id", "match": {"match": false, "result": [["Bachelor"], ["Bachelor"], ["Bachelor"]], "gt": [["Bachelor"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.degree_summary_name\nFROM Degree_Programs AS T1\nJOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id\nGROUP BY T1.degree_summary_name\nORDER BY COUNT(T2.student_enrolment_id) DESC\nLIMIT 1", "match": {"match": true, "result": [["Bachelor"]]}}
{"result": "SELECT \n    T1.degree_program_id, \n    T1.degree_summary_name\nFROM \n    Degree_Programs AS T1\nJOIN \n    (SELECT \n         degree_program_id, \n         COUNT(student_id) as count\n     FROM \n         Student_Enrolment\n     GROUP BY \n         degree_program_id) AS T2\nON \n    T1.degree_program_id = T2.degree_program_id\nORDER BY \n    T2.count DESC\nLIMIT 1", "match": {"match": true, "result": [[9, "Bachelor"]]}}
{"result": "SELECT T1.degree_program_id, T1.degree_summary_name\nFROM Degree_Programs AS T1\nJOIN (\n  SELECT T2.degree_program_id, COUNT(*) as num_students\n  FROM Student_Enrolment AS T2\n  GROUP BY T2.degree_program_id\n) AS T3 ON T1.degree_program_id = T3.degree_program_id\nORDER BY T3.num_students DESC\nLIMIT 1", "match": {"match": true, "result": [[9, "Bachelor"]]}}
{"result": "SELECT S.student_id, S.first_name, S.middle_name, S.last_name, COUNT(SE.student_enrolment_id) AS num_enrollments\nFROM Students S\nJOIN Student_Enrolment SE ON S.student_id = SE.student_id\nGROUP BY S.student_id, S.first_name, S.middle_name, S.last_name\nORDER BY num_enrollments DESC\nLIMIT 1", "match": {"match": false, "result": [[6, "Stanford", "Mona", "Rogahn", 3]], "gt": [[7, "Frida", "Aisha", "Huel", 3, 7]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    S.first_name, \n    S.middle_name, \n    S.last_name, \n    S.student_id, \n    COUNT(SE.degree_program_id) AS num_enrollments\nFROM \n    Students S\nJOIN \n    Student_Enrolment SE ON S.student_id = SE.student_id\nGROUP BY \n    S.student_id, S.first_name, S.middle_name, S.last_name\nORDER BY \n    COUNT(SE.degree_program_id) DESC\nLIMIT 1;", "match": {"match": false, "result": [["Stanford", "Mona", "Rogahn", 6, 3]], "gt": [[7, "Frida", "Aisha", "Huel", 3, 7]], "error": "Query result does not match ground truth."}}
{"result": "SELECT semester_name \nFROM Semesters \nWHERE semester_id NOT IN (SELECT semester_id \n                           FROM Student_Enrolment);", "match": {"match": true, "result": [["fall 2010"], ["spring 2013"], ["spring 2014"], ["spring 2016"], ["spring 2017"], ["winter 2018"]]}}
{"result": "SELECT T2.semester_name \nFROM Student_Enrolment AS T1 \nLEFT JOIN Semesters AS T2 ON T1.semester_id = T2.semester_id \nWHERE T1.student_id IS NULL", "match": {"match": false, "result": [], "gt": [["fall 2010"], ["spring 2013"], ["spring 2014"], ["spring 2016"], ["spring 2017"], ["winter 2018"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T2.course_name FROM `Student_Enrolment` AS T1 \nINNER JOIN `Student_Enrolment_Courses` AS T2 \nON T1.student_enrolment_id = T2.student_enrolment_id \nINNER JOIN `Courses` AS T3 \nON T2.course_id = T3.course_id", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.course_name"}}
{"result": "SELECT T1.course_name \nFROM Courses AS T1 \nJOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id", "match": {"match": false, "result": [["la"], ["la"], ["pl"], ["ai"], ["math"], ["ml"], ["math"], ["pl"], ["os"], ["en"], ["ml"], ["nlp"], ["rs"], ["rs"], ["db"]], "gt": [["la"], ["pl"], ["ai"], ["math"], ["ml"], ["os"], ["en"], ["nlp"], ["rs"], ["db"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.course_name \nFROM Student_Enrolment_Courses AS T1 \nJOIN Courses AS T2 ON T1.course_id = T2.course_id \nGROUP BY T2.course_name \nORDER BY COUNT(T1.student_course_id) DESC \nLIMIT 1", "match": {"match": true, "result": [["rs"]]}}
{"result": "SELECT T1.course_name \nFROM Courses AS T1 \nJOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id \nGROUP BY T1.course_id \nORDER BY COUNT(T1.course_id) DESC \nLIMIT 1", "match": {"match": false, "result": [["pl"]], "gt": [["rs"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.last_name \nFROM Students AS T1 \nINNER JOIN Addresses AS T2 \nON T1.permanent_address_id = T2.address_id \nWHERE T2.state_province_county = 'North Carolina' \nAND T1.student_id NOT IN (\n  SELECT T1.student_id \n  FROM Student_Enrolment AS T1 \n  INNER JOIN Degree_Programs AS T2 \n  ON T1.degree_program_id = T2.degree_program_id\n);", "match": {"match": false, "result": [], "gt": [["Gleichner"], ["Weimann"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.last_name \nFROM Students AS T1 \nJOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id \nWHERE T2.state_province_county = 'North Carolina' AND T1.student_id NOT IN \n(SELECT T1.student_id \nFROM Students AS T1 \nJOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id \nWHERE T2.degree_program_id IS NOT NULL);", "match": {"match": false, "result": [], "gt": [["Gleichner"], ["Weimann"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.transcript_date, T1.transcript_id \nFROM Transcripts AS T1 \nJOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id \nGROUP BY T1.transcript_id \nHAVING COUNT(T2.student_course_id) >= 2", "match": {"match": true, "result": [["2013-06-30 13:01:40", 5], ["2010-12-13 10:55:15", 6], ["1975-05-06 12:04:47", 8], ["1998-11-22 12:18:29", 15]]}}
{"result": "SELECT T.transcript_id, T.transcript_date \nFROM Transcripts T \nJOIN Transcript_Contents TC ON T.transcript_id = TC.transcript_id \nGROUP BY T.transcript_id \nHAVING COUNT(DISTINCT TC.student_course_id) >= 2", "match": {"match": false, "result": [[5, "2013-06-30 13:01:40"], [6, "2010-12-13 10:55:15"], [8, "1975-05-06 12:04:47"], [15, "1998-11-22 12:18:29"]], "gt": [["2013-06-30 13:01:40", 5], ["2010-12-13 10:55:15", 6], ["1975-05-06 12:04:47", 8], ["1998-11-22 12:18:29", 15]], "error": "Query result does not match ground truth."}}
{"result": "SELECT `cell_mobile_number` FROM `Students` WHERE `first_name` = 'Timmothy' AND `last_name` = 'Ward';", "match": {"match": true, "result": [["(096)889-8954x524"]]}}
{"result": "SELECT cell_mobile_number \nFROM Students \nWHERE first_name = 'Timmothy' \n  AND last_name = 'Ward';", "match": {"match": false, "result": [["(096)889-8954x524"]], "gt": [], "error": "Query result does not match ground truth."}}
{"result": "SELECT first_name, middle_name, last_name \nFROM Students \nWHERE date_first_registered = ( SELECT MIN(date_first_registered) FROM Students );", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT first_name, middle_name, last_name \nFROM Students \nWHERE date_first_registered = ( SELECT MIN(date_first_registered) \n                               FROM Students )", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT first_name, middle_name, last_name \nFROM Students \nWHERE date_first_registered = ( \n    SELECT MIN(date_first_registered) \n    FROM Students \n);", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT T.student_id, T.first_name \nFROM (\n  SELECT student_id, \n         first_name,\n         CASE \n           WHEN current_address_id = permanent_address_id THEN 'same'\n           ELSE 'different'\n         END AS address_diff\n  FROM Students\n) T\nWHERE T.address_diff = 'different'", "match": {"match": false, "result": [[1, "Timmothy"], [2, "Hobart"], [3, "Warren"], [4, "Jarvis"], [6, "Stanford"], [7, "Frida"], [8, "Delaney"], [9, "Reva"], [10, "Helga"], [11, "Gregg"], [12, "Orrin"], [13, "Deon"], [14, "Jordy"], [15, "Jett"]], "gt": [["Timmothy"], ["Hobart"], ["Warren"], ["Jarvis"], ["Stanford"], ["Frida"], ["Delaney"], ["Reva"], ["Helga"], ["Gregg"], ["Orrin"], ["Deon"], ["Jordy"], ["Jett"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT first_name \nFROM Students \nWHERE permanent_address_id != current_address_id", "match": {"match": true, "result": [["Timmothy"], ["Hobart"], ["Warren"], ["Jarvis"], ["Stanford"], ["Frida"], ["Delaney"], ["Reva"], ["Helga"], ["Gregg"], ["Orrin"], ["Deon"], ["Jordy"], ["Jett"]]}}
{"result": "SELECT \n    A.address_id, \n    A.line_1, \n    A.line_2, \n    A.line_3, \n    A.city, \n    A.zip_postcode, \n    A.state_province_county, \n    A.country, \n    A.other_address_details\nFROM \n    Addresses A\nINNER JOIN \n    Students S ON A.address_id = S.current_address_id\nGROUP BY \n    A.address_id\nORDER BY \n    COUNT(S.student_id) DESC\nLIMIT 1", "match": {"match": false, "result": [[9, "0643 Muller Vista", "Suite 383", null, "Port Elvisfurt", "777", "NorthCarolina", "Gabon", null]], "gt": [[9, "0643 Muller Vista", "Suite 383"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT a.address_id, a.line_1, a.line_2 \nFROM Addresses a \nJOIN Students s ON a.address_id = s.current_address_id OR a.address_id = s.permanent_address_id \nGROUP BY a.address_id \nORDER BY COUNT(s.student_id) DESC \nLIMIT 1;", "match": {"match": true, "result": [[9, "0643 Muller Vista", "Suite 383"]]}}
{"result": "SELECT AVG(transcript_date) \nFROM Transcripts", "match": {"match": true, "result": [[1989.9333333333334]]}}
{"result": "SELECT AVG(`transcript_date`) \nFROM `Transcripts`", "match": {"match": true, "result": [[1989.9333333333334]]}}
{"result": "SELECT T1.transcript_date, T1.other_details \nFROM Transcripts AS T1 \nWHERE T1.transcript_id = (SELECT MIN(T2.transcript_id) \n                          FROM Transcripts AS T2);", "match": {"match": false, "result": [["1988-04-30 01:19:47", null]], "gt": [["1975-05-06 12:04:47", null]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MIN(`transcript_date`) AS Earliest_Transcript_Release, `other_details` \nFROM `Transcripts`", "match": {"match": true, "result": [["1975-05-06 12:04:47", null]]}}
{"result": "SELECT COUNT(`transcript_id`) FROM `Transcripts`", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) FROM Transcripts", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT `transcript_date` FROM `Transcripts` ORDER BY `transcript_date` DESC LIMIT 1", "match": {"match": true, "result": [["2013-06-30 13:01:40"]]}}
{"result": "SELECT MAX(transcript_date) FROM `Transcripts`", "match": {"match": true, "result": [["2013-06-30 13:01:40"]]}}
{"result": "SELECT COUNT(T2.student_course_id), T1.student_course_id \nFROM Student_Enrolment_Courses T1 \nJOIN Transcript_Contents T2 ON T1.student_course_id = T2.student_course_id \nGROUP BY T1.student_course_id", "match": {"match": false, "result": [[4, 0], [1, 2], [1, 7], [1, 8], [3, 76], [2, 96], [1, 28982908], [1, 45105806], [1, 70882679]], "gt": [[4, 0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(T1.student_course_id), T2.student_enrolment_id \nFROM Transcript_Contents AS T1 \nJOIN Student_Enrolment_Courses AS T2 ON T1.student_course_id = T2.student_course_id \nGROUP BY T2.student_enrolment_id \nORDER BY COUNT(T1.student_course_id) DESC \nLIMIT 1", "match": {"match": false, "result": [[4, 2]], "gt": [[4, 0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.transcript_date, T2.transcript_id \nFROM Student_Enrolment_Courses \nJOIN Transcript_Contents ON Student_Enrolment_Courses.student_course_id = Transcript_Contents.student_course_id \nJOIN Transcripts T2 ON Transcript_Contents.transcript_id = T2.transcript_id \nJOIN Student_Enrolment ON Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id \nWHERE Transcript_Contents.student_course_id IN (SELECT student_course_id \n                                               FROM Transcript_Contents \n                                               GROUP BY student_course_id \n                                               ORDER BY COUNT(*) \n                                               LIMIT 1);", "match": {"match": false, "result": [["1975-05-06 12:04:47", 8]], "gt": [["1975-10-28 15:16:51", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.transcript_date, T2.transcript_id\nFROM Student_Enrolment_Courses\nINNER JOIN Transcripts T2 ON Student_Enrolment_Courses.student_course_id = T2.student_course_id\nGROUP BY T2.transcript_date, T2.transcript_id\nORDER BY COUNT(T2.student_course_id) ASC\nLIMIT 1", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.student_course_id"}}
{"result": "SELECT T1.semester_name \nFROM Semesters T1 \nJOIN Student_Enrolment T2 ON T1.semester_id = T2.semester_id \nWHERE T2.degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Master') \nINTERSECT \nSELECT T1.semester_name \nFROM Semesters T1 \nJOIN Student_Enrolment T2 ON T1.semester_id = T2.semester_id \nWHERE T2.degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelor');", "match": {"match": false, "result": [["fall 2018"]], "gt": [[13]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.semester_id \nFROM Semesters AS T1 \nJOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id \nGROUP BY T2.semester_id \nHAVING COUNT(CASE WHEN T3.degree_summary_name = 'Masters' THEN 1 ELSE NULL END) > 0 \nAND COUNT(CASE WHEN T3.degree_summary_name = 'Bachelors' THEN 1 ELSE NULL END) > 0;", "match": {"match": false, "error": "Query execution failed with error: no such column: T3.degree_summary_name"}}
{"result": "SELECT COUNT(DISTINCT current_address_id) \nFROM Students", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT DISTINCT T1.line_1, T1.line_2, T1.line_3, T1.city, T1.zip_postcode, T1.state_province_county, T1.country, T1.other_address_details \nFROM Addresses AS T1 \nJOIN Students AS T2 ON T1.address_id = T2.current_address_id", "match": {"match": false, "result": [["7081 Eda Center", "Suite 830", null, "Rutherfordtown", "839", "Delaware", "Kyrgyz Republic", null], ["979 Haag Shores Suite 656", "Apt. 468", null, "Prohaskafort", "590", "SouthDakota", "Lesotho", null], ["0643 Muller Vista", "Suite 383", null, "Port Elvisfurt", "777", "NorthCarolina", "Gabon", null], ["193 Marlin Brook", "Apt. 406", null, "Herzoghaven", "068", "Arkansas", "Cook Islands", null], ["16998 Mraz Lodge", "Apt. 689", null, "North Omer", "902", "Kentucky", "Gibraltar", null], ["74046 Metz Walk Apt. 113", "Suite 674", null, "Port Oceane", "669", "Wyoming", "Norfolk Island", null], ["2294 Grant Square Apt. 235", "Apt. 370", null, "Port Chelsea", "148", "Virginia", "Iceland", null], ["3999 Aufderhar Ways Suite 593", "Apt. 388", null, "Lake Laishafurt", "943", "Kentucky", "Burundi", null], ["186 Evan Motorway Apt. 409", "Suite 079", null, "Lake Careyberg", "895", "Kentucky", "New Caledonia", null]], "gt": [[9]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT *\nFROM Students\nORDER BY last_name DESC, first_name DESC, middle_name DESC;\n```", "match": {"match": false, "result": [[13, 9, 8, "Deon", "Brooklyn", "Weimann", "(213)445-0399x85208", "jhuel@example.com", "68095", "1986-02-24 21:12:23", "2014-05-30 23:32:02", "assumenda"], [1, 10, 15, "Timmothy", "Anna", "Ward", "(096)889-8954x524", "erwin.zboncak@example.com", "965", "1971-02-05 07:28:23", "1971-05-17 19:28:49", "quia"], [11, 14, 4, "Gregg", "Mossie", "Schuppe", "(462)246-7921", "nbruen@example.org", "494", "1989-05-24 23:31:29", "1975-10-09 00:49:27", "omnis"], [6, 6, 3, "Stanford", "Mona", "Rogahn", "436.613.7683", "skassulke@example.net", "248", "1997-03-20 16:47:25", "2016-04-09 12:27:04", "qui"], [14, 12, 11, "Jordy", "Osborne", "Rempel", "(605)919-3594x3661", "gracie29@example.com", "34458427", "2004-12-24 12:36:46", "1999-08-24 00:07:10", "et"], [9, 2, 15, "Reva", "Golda", "Osinski", "(507)365-8405", "qo'kon@example.com", "39", "2017-01-04 08:10:25", "1990-09-01 05:03:27", "nesciunt"], [10, 15, 14, "Helga", "Cleve", "Mohr", "677.401.9382", "nya.lesch@example.net", "43", "2009-09-25 00:14:25", "2017-07-09 21:38:43", "rerum"], [12, 14, 9, "Orrin", "Neal", "Kemmer", "(982)153-1469x1733", "beth42@example.org", "6274274", "2005-12-15 08:42:10", "2006-08-04 17:26:49", "non"], [15, 2, 9, "Jett", "Alberta", "Jaskolski", "877.549.9067x8723", "mya88@example.org", "156", "1982-06-19 13:15:18", "1982-06-11 00:25:39", "omnis"], [7, 15, 3, "Frida", "Aisha", "Huel", "1-879-796-8987x164", "baumbach.lucious@example.org", "668", "2018-03-13 09:56:22", "1997-11-16 08:54:33", "dolorum"], [3, 9, 5, "Warren", "Violet", "Gleichner", "07661787471", "johns.unique@example.net", "3", "2007-08-29 23:25:41", "2007-03-31 09:53:19", "facilis"], [5, 9, 9, "Milton", "Vaughn", "Christiansen", "171-642-5684", "lhartmann@example.org", "", "1973-05-19 19:12:46", "2007-11-28 12:50:21", "laborum"], [4, 7, 11, "Jarvis", "Aaliyah", "Carroll", "09700166582", "jillian26@example.net", "141072406", "2014-03-28 05:48:23", "2007-08-02 04:12:58", "atque"], [2, 12, 5, "Hobart", "Lorenz", "Balistreri", "1-009-710-5151", "swift.kolby@example.com", "304246", "1976-10-26 02:33:06", "2013-10-05 17:41:28", "autem"], [8, 1, 5, "Delaney", "Judd", "Ankunding", "03174364122", "dell43@example.net", "402", "1982-02-14 08:46:35", "2004-12-08 05:29:11", "voluptatem"]], "gt": [["voluptatem"], ["rerum"], ["quia"], ["qui"], ["omnis"], ["omnis"], ["non"], ["nesciunt"], ["laborum"], ["facilis"], ["et"], ["dolorum"], ["autem"], ["atque"], ["assumenda"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT other_student_details FROM Students ORDER BY last_name DESC", "match": {"match": false, "result": [["assumenda"], ["quia"], ["omnis"], ["qui"], ["et"], ["nesciunt"], ["rerum"], ["non"], ["omnis"], ["dolorum"], ["facilis"], ["laborum"], ["atque"], ["autem"], ["voluptatem"]], "gt": [["voluptatem"], ["rerum"], ["quia"], ["qui"], ["omnis"], ["omnis"], ["non"], ["nesciunt"], ["laborum"], ["facilis"], ["et"], ["dolorum"], ["autem"], ["atque"], ["assumenda"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT section_description \nFROM Sections \nWHERE section_name = 'H';", "match": {"match": false, "result": [], "gt": [["et"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT section_description \nFROM Sections \nWHERE section_name = 'h'", "match": {"match": true, "result": [["et"]]}}
{"result": "SELECT first_name \nFROM Students \nWHERE permanent_address_id IN (\n  SELECT address_id \n  FROM Addresses \n  WHERE country = 'Haiti'\n) \nOR cell_mobile_number = '09700166582'", "match": {"match": false, "result": [["Hobart"], ["Warren"], ["Jarvis"], ["Delaney"]], "gt": [["Jarvis"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT first_name \nFROM Students \nWHERE permanent_address_id IN (\n  SELECT address_id \n  FROM Addresses \n  WHERE country = 'Haiti'\n) OR cell_mobile_number = '09700166582'", "match": {"match": false, "result": [["Hobart"], ["Warren"], ["Jarvis"], ["Delaney"]], "gt": [["Jarvis"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Title FROM Cartoon ORDER BY Title ASC", "match": {"match": true, "result": [["Dawn of the Dead Man!"], ["Day of the Dark Knight!"], ["Deep Cover for Batman!"], ["Enter the Outsiders!"], ["Evil Under the Sea!"], ["Fall of the Blue Beetle!"], ["Invasion of the Secret Santas!"], ["Journey to the Center of the Bat!"], ["Return of the Fearsome Fangs!"], ["Terror on Dinosaur Island!"], ["The Eyes of Despero!"], ["The Rise of the Blue Beetle!"]]}}
{"result": "SELECT Title \nFROM Cartoon \nORDER BY Title ASC", "match": {"match": true, "result": [["Dawn of the Dead Man!"], ["Day of the Dark Knight!"], ["Deep Cover for Batman!"], ["Enter the Outsiders!"], ["Evil Under the Sea!"], ["Fall of the Blue Beetle!"], ["Invasion of the Secret Santas!"], ["Journey to the Center of the Bat!"], ["Return of the Fearsome Fangs!"], ["Terror on Dinosaur Island!"], ["The Eyes of Despero!"], ["The Rise of the Blue Beetle!"]]}}
{"result": "SELECT * \nFROM Cartoon \nWHERE Directed_by = 'Ben Jones';", "match": {"match": false, "result": [[1.0, "The Rise of the Blue Beetle!", "Ben Jones", "Michael Jelenic", "November14,2008", 101.0, "700"], [4.0, "Day of the Dark Knight!", "Ben Jones", "J. M. DeMatteis", "January2,2009", 104.0, "704"], [7.0, "Dawn of the Dead Man!", "Ben Jones", "Steven Melching", "January16,2009", 107.0, "707"], [10.0, "The Eyes of Despero!", "Ben Jones", "J. M. DeMatteis", "February6,2009", 110.0, "728"]], "gt": [["The Rise of the Blue Beetle!"], ["Day of the Dark Knight!"], ["Dawn of the Dead Man!"], ["The Eyes of Despero!"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Title \nFROM Cartoon \nWHERE Directed_by = 'Ben Jones';", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Day of the Dark Knight!"], ["Dawn of the Dead Man!"], ["The Eyes of Despero!"]]}}
{"result": "SELECT COUNT(id) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(id) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date", "match": {"match": true, "result": [["Invasion of the Secret Santas!", "Brandon Vietti"], ["Evil Under the Sea!", "Michael Chang"], ["Return of the Fearsome Fangs!", "Brandon Vietti"], ["Deep Cover for Batman!", "Michael Chang"], ["The Eyes of Despero!", "Ben Jones"], ["Dawn of the Dead Man!", "Ben Jones"], ["Day of the Dark Knight!", "Ben Jones"], ["Fall of the Blue Beetle!", "Brandon Vietti"], ["Journey to the Center of the Bat!", "Michael Chang"], ["Enter the Outsiders!", "Michael Chang"], ["The Rise of the Blue Beetle!", "Ben Jones"], ["Terror on Dinosaur Island!", "Brandon Vietti"]]}}
{"result": "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;", "match": {"match": true, "result": [["Invasion of the Secret Santas!", "Brandon Vietti"], ["Evil Under the Sea!", "Michael Chang"], ["Return of the Fearsome Fangs!", "Brandon Vietti"], ["Deep Cover for Batman!", "Michael Chang"], ["The Eyes of Despero!", "Ben Jones"], ["Dawn of the Dead Man!", "Ben Jones"], ["Day of the Dark Knight!", "Ben Jones"], ["Fall of the Blue Beetle!", "Brandon Vietti"], ["Journey to the Center of the Bat!", "Michael Chang"], ["Enter the Outsiders!", "Michael Chang"], ["The Rise of the Blue Beetle!", "Ben Jones"], ["Terror on Dinosaur Island!", "Brandon Vietti"]]}}
{"result": "SELECT DISTINCT Title \nFROM Cartoon \nWHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Terror on Dinosaur Island!"], ["Day of the Dark Knight!"], ["Invasion of the Secret Santas!"], ["Dawn of the Dead Man!"], ["Fall of the Blue Beetle!"], ["The Eyes of Despero!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT Title \nFROM Cartoon \nWHERE Directed_by = 'Ben Jones' \nOR Directed_by = 'Brandon Vietti'", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Terror on Dinosaur Island!"], ["Day of the Dark Knight!"], ["Invasion of the Secret Santas!"], ["Dawn of the Dead Man!"], ["Fall of the Blue Beetle!"], ["The Eyes of Despero!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT Country, COUNT(id) \nFROM TV_Channel \nGROUP BY Country \nORDER BY COUNT(id) DESC", "match": {"match": false, "result": [["Italy", 12], ["United Kingdom", 2], ["Poland", 1]], "gt": [["Italy", 12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Country, COUNT(id) FROM TV_Channel GROUP BY Country ORDER BY COUNT(id) DESC LIMIT 1", "match": {"match": true, "result": [["Italy", 12]]}}
{"result": "SELECT COUNT(DISTINCT \"series_name\") AS \"Different series\", COUNT(DISTINCT \"Content\") AS \"Different contents\" FROM \"TV_Channel\"", "match": {"match": true, "result": [[15, 1]]}}
{"result": "SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel", "match": {"match": true, "result": [[15, 1]]}}
{"result": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'", "match": {"match": true, "result": [["music"]]}}
{"result": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'", "match": {"match": true, "result": [["music"]]}}
{"result": "SELECT T1.Package_Option \nFROM TV_Channel AS T1 \nJOIN TV_series AS T2 ON T1.id = T2.Channel \nWHERE T2.\"series_name\" = 'Sky Radio';", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.series_name"}}
{"result": "SELECT DISTINCT T1.`Package_Option` \nFROM TV_Channel AS T1 \nINNER JOIN TV_series AS T2 \nON T1.`id` = T2.`Channel` \nWHERE T2.`series_name` = 'Sky Radio';", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.series_name"}}
{"result": "SELECT COUNT(id) FROM TV_Channel WHERE Language = 'English'", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(id) FROM TV_Channel WHERE Language = 'English'", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Language, COUNT(\"TV_Channel\".id) AS Least_TV_Channel FROM TV_Channel GROUP BY Language ORDER BY COUNT(\"TV_Channel\".id) ASC LIMIT 1", "match": {"match": true, "result": [["English", 3]]}}
{"result": "SELECT \"Language\", COUNT(`TV_Channel`) FROM \"TV_Channel\" GROUP BY \"Language\" ORDER BY COUNT(`TV_Channel`) ASC LIMIT 1", "match": {"match": false, "error": "Query execution failed with error: no such column: TV_Channel"}}
{"result": "SELECT Language, COUNT(id) FROM TV_Channel GROUP BY Language", "match": {"match": true, "result": [["English", 3], ["Italian", 12]]}}
{"result": "SELECT Language, COUNT(id) FROM TV_Channel GROUP BY Language", "match": {"match": true, "result": [["English", 3], ["Italian", 12]]}}
{"result": "SELECT T2.series_name \nFROM Cartoon AS T1 \nJOIN TV_Channel AS T2 \nON T1.Channel = T2.id \nWHERE T1.Title = 'The Rise of the Blue Beetle!';", "match": {"match": true, "result": [["Sky Radio"]]}}
{"result": "SELECT T1.series_name \nFROM TV_Channel AS T1 \nJOIN Cartoon AS T2 ON T2.Channel = T1.id \nWHERE T2.Title = 'The Rise of the Blue Beetle'", "match": {"match": false, "result": [], "gt": [["Sky Radio"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Title \nFROM Cartoon AS T1 \nJOIN TV_Channel AS T2 ON T1.Channel = T2.id \nWHERE T2.series_name = 'Sky Radio';", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT T1.Title \nFROM Cartoon AS T1 \nJOIN TV_Channel AS T2 ON T1.Channel = T2.id \nWHERE T2.series_name = 'Sky Radio';", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT Episode FROM TV_series ORDER BY Rating", "match": {"match": true, "result": [["The Hanged Man"], ["Double Down"], ["Home By Another Way"], ["Keepers"], ["Emily"], ["Blowback"], ["The Legend of Dylan McCleen"], ["Winterland"], ["The Year of the Rabbit"], ["Game Three"], ["Friendly Skies"], ["A Love of a Lifetime"]]}}
{"result": "SELECT Episode FROM `TV_series` ORDER BY CAST(REPLACE(Rating, ',', '') AS REAL) DESC", "match": {"match": false, "result": [["A Love of a Lifetime"], ["Friendly Skies"], ["Game Three"], ["The Year of the Rabbit"], ["Winterland"], ["The Legend of Dylan McCleen"], ["Keepers"], ["Emily"], ["Blowback"], ["Home By Another Way"], ["Double Down"], ["The Hanged Man"]], "gt": [["The Hanged Man"], ["Double Down"], ["Home By Another Way"], ["Keepers"], ["Emily"], ["Blowback"], ["The Legend of Dylan McCleen"], ["Winterland"], ["The Year of the Rabbit"], ["Game Three"], ["Friendly Skies"], ["A Love of a Lifetime"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT TOP 3 Episode, Rating FROM TV_series ORDER BY Rating DESC", "match": {"match": false, "error": "Query execution failed with error: near \"3\": syntax error"}}
{"result": "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3", "match": {"match": true, "result": [["A Love of a Lifetime", "5.8"], ["Friendly Skies", "5.3"], ["Game Three", "4.4"]]}}
{"result": "SELECT MIN(`Share`) AS min_share, MAX(`Share`) AS max_share FROM `TV_series`", "match": {"match": false, "result": [[5.0, 9.0]], "gt": [[9.0, 5.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(Share) ,  MIN(Share) FROM TV_series", "match": {"match": true, "result": [[9.0, 5.0]]}}
{"result": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'", "match": {"match": true, "result": [["September 24, 2007"]]}}
{"result": "SELECT Air_Date \nFROM TV_series \nWHERE Episode = 'A Love of a Lifetime';", "match": {"match": true, "result": [["September 24, 2007"]]}}
{"result": "SELECT SUM(T2.Weekly_Rank) \nFROM TV_Channel AS T1 \nJOIN TV_series AS T2 ON T1.id = T2.Channel \nWHERE T2.Episode = 'A Love of a Lifetime'", "match": {"match": true, "result": [[43.0]]}}
{"result": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'", "match": {"match": true, "result": [[43.0]]}}
{"result": "SELECT T2.series_name FROM TV_series AS T1 \nINNER JOIN TV_Channel AS T2 \nON T1.Channel = T2.id \nWHERE T1.Episode = 'A Love of a Lifetime';", "match": {"match": true, "result": [["Sky Radio"]]}}
{"result": "SELECT T2.`series_name` \nFROM `TV_series` T1 \nJOIN `TV_Channel` T2 ON T2.`id` = T1.`Channel` \nWHERE T1.`Episode` = 'A Love of a Lifetime';", "match": {"match": true, "result": [["Sky Radio"]]}}
{"result": "SELECT T2.Episode \nFROM TV_Channel AS T1 \nINNER JOIN TV_series AS T2 \nON T1.id = T2.Channel \nWHERE T1.series_name = 'Sky Radio'", "match": {"match": true, "result": [["A Love of a Lifetime"], ["Keepers"]]}}
{"result": "SELECT T1.`Episode` \nFROM `TV_series` AS T1 \nJOIN `TV_Channel` AS T2 ON T1.Channel = T2.id \nWHERE T2.`series_name` = 'Sky Radio';", "match": {"match": true, "result": [["A Love of a Lifetime"], ["Keepers"]]}}
{"result": "SELECT COUNT(id) ,  Directed_by\nFROM Cartoon\nGROUP BY Directed_by", "match": {"match": true, "result": [[4, "Ben Jones"], [4, "Brandon Vietti"], [4, "Michael Chang"]]}}
{"result": "SELECT COUNT(T1.id) ,  T1.Directed_by\nFROM Cartoon T1\nGROUP BY T1.Directed_by", "match": {"match": true, "result": [[4, "Ben Jones"], [4, "Brandon Vietti"], [4, "Michael Chang"]]}}
{"result": "SELECT T1.`Production_code`, T1.`Channel`\nFROM Cartoon AS T1\nORDER BY T1.`Original_air_date` DESC\nLIMIT 1", "match": {"match": true, "result": [[102.0, "701"]]}}
{"result": "SELECT MAX(id) AS max_id FROM Cartoon \nSELECT Title, Channel FROM Cartoon WHERE id = ( SELECT max_id FROM Cartoon )", "match": {"match": false, "error": "Query execution failed with error: near \"SELECT\": syntax error"}}
{"result": "SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes'", "match": {"match": false, "result": [], "gt": [["Sky Famiglia + Sky HD", "MTV Live HD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'True'", "match": {"match": false, "result": [], "gt": [["Sky Famiglia + Sky HD", "MTV Live HD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Country \nFROM TV_Channel AS T1 \nJOIN Cartoon AS T2 ON T1.id = T2.Channel \nWHERE T2.Written_by = 'Todd Casey'", "match": {"match": true, "result": [["United Kingdom"], ["Italy"]]}}
{"result": "SELECT T1.Country \nFROM TV_Channel AS T1 \nJOIN Cartoon AS T2 ON T1.id = T2.Channel \nWHERE T2.Written_by LIKE '%Todd Casey%';", "match": {"match": true, "result": [["United Kingdom"], ["Italy"]]}}
{"result": "SELECT Country \nFROM TV_Channel \nWHERE id IN (SELECT Channel FROM Cartoon WHERE Written_by != 'Todd Casey');", "match": {"match": false, "result": [["Italy"], ["Italy"], ["Italy"], ["Italy"], ["Italy"], ["United Kingdom"], ["Italy"], ["Italy"]], "gt": [["Poland"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T1.Country \nFROM TV_Channel AS T1 \nJOIN Cartoon AS T2 ON T1.id = T2.Channel \nWHERE T2.Written_by != 'Todd Casey'", "match": {"match": false, "result": [["Italy"], ["United Kingdom"]], "gt": [["Poland"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.series_name, T1.Country \nFROM TV_Channel AS T1 \nJOIN Cartoon AS T2 ON T1.id = T2.Channel \nWHERE T2.Directed_by IN ('Ben Jones', 'Michael Chang');", "match": {"match": false, "result": [["Sky Radio", "Italy"], ["Music Box Italia", "Italy"], ["MTV Hits", "Italy"], ["MTV Rocks", "United Kingdom"], ["MTV Dance", "United Kingdom"], ["MTV Dance", "United Kingdom"], ["Classica", "Italy"], ["MTV Dance", "United Kingdom"]], "gt": [["MTV Dance", "United Kingdom"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.series_name, T1.Country \nFROM TV_Channel AS T1 \nJOIN Cartoon AS T2 ON T1.id = T2.Channel \nWHERE T2.Directed_by = 'Ben Jones' OR T2.Directed_by = 'Michael Chang'", "match": {"match": false, "result": [["Sky Radio", "Italy"], ["Music Box Italia", "Italy"], ["MTV Hits", "Italy"], ["MTV Rocks", "United Kingdom"], ["MTV Dance", "United Kingdom"], ["MTV Dance", "United Kingdom"], ["Classica", "Italy"], ["MTV Dance", "United Kingdom"]], "gt": [["MTV Dance", "United Kingdom"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Pixel_aspect_ratio_PAR, Country \nFROM TV_Channel \nWHERE Language != 'English';", "match": {"match": true, "result": [["4:3", "Italy"], ["4:3", "Italy"], ["4:3 / 16:9", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3", "Italy"], ["4:3", "Italy"]]}}
{"result": "SELECT `Pixel_aspect_ratio_PAR`, `Country` FROM `TV_Channel` WHERE `Language` != 'English'", "match": {"match": true, "result": [["4:3", "Italy"], ["4:3", "Italy"], ["4:3 / 16:9", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3", "Italy"], ["4:3", "Italy"]]}}
{"result": "SELECT T1.id \nFROM TV_Channel AS T1 \nGROUP BY T1.Country \nHAVING COUNT(T1.id) > 2", "match": {"match": true, "result": [["700"]]}}
{"result": "SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(id) > 2", "match": {"match": false, "result": [], "gt": [["700"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT id FROM TV_Channel \nWHERE id NOT IN (\n  SELECT Channel \n  FROM Cartoon \n  WHERE Directed_by = 'Ben Jones'\n);", "match": {"match": true, "result": [["701"], ["703"], ["705"], ["706"], ["708"], ["709"], ["713"], ["714"], ["715"], ["717"], ["719"]]}}
{"result": "SELECT id \nFROM TV_Channel \nWHERE id NOT IN (SELECT Channel \n                  FROM Cartoon \n                  WHERE Directed_by = 'Ben Jones');", "match": {"match": true, "result": [["701"], ["703"], ["705"], ["706"], ["708"], ["709"], ["713"], ["714"], ["715"], ["717"], ["719"]]}}
{"result": "SELECT T1.Package_Option \nFROM \"TV_Channel\" AS T1 \nWHERE T1.id NOT IN (SELECT T2.Channel FROM Cartoon AS T2 WHERE T2.Directed_by = 'Ben Jones');", "match": {"match": true, "result": [["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["no ( FTV )"], ["Sky Famiglia + Sky HD"], ["no ( FTV )"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"]]}}
{"result": "SELECT Package_Option FROM TV_Channel\nWHERE id NOT IN (\n  SELECT Channel \n  FROM Cartoon \n  WHERE Directed_by = 'Ben Jones'\n);", "match": {"match": true, "result": [["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["no ( FTV )"], ["Sky Famiglia + Sky HD"], ["no ( FTV )"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"]]}}
{"result": "SELECT COUNT(*) FROM \"poker_player\"", "match": {"match": true, "result": [[5]]}}
{"result": "SELECT COUNT(Poker_Player_ID) FROM poker_player", "match": {"match": true, "result": [[5]]}}
{"result": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "match": {"match": true, "result": [[596462.0], [476090.0], [189233.0], [142800.0], [104871.0]]}}
{"result": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "match": {"match": true, "result": [[596462.0], [476090.0], [189233.0], [142800.0], [104871.0]]}}
{"result": "SELECT \"Final_Table_Made\", \"Best_Finish\" FROM \"poker_player\"", "match": {"match": true, "result": [[42.0, 1.0], [10.0, 2.0], [21.0, 1.0], [19.0, 2.0], [26.0, 3.0]]}}
{"result": "SELECT \"Final_Table_Made\", \"Best_Finish\" FROM \"poker_player\";", "match": {"match": true, "result": [[42.0, 1.0], [10.0, 2.0], [21.0, 1.0], [19.0, 2.0], [26.0, 3.0]]}}
{"result": "SELECT AVG(Earnings) FROM poker_player", "match": {"match": true, "result": [[301891.2]]}}
{"result": "SELECT AVG(Earnings) FROM poker_player", "match": {"match": true, "result": [[301891.2]]}}
{"result": "SELECT MAX(Money_Rank) FROM poker_player", "match": {"match": false, "result": [[166.0]], "gt": [[58.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(Money_Rank) FROM poker_player", "match": {"match": false, "result": [[166.0]], "gt": [[58.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000", "match": {"match": true, "result": [[26.0]]}}
{"result": "SELECT MAX(Final_Table_Made) \nFROM poker_player \nWHERE Earnings < 200000;", "match": {"match": true, "result": [[26.0]]}}
{"result": "SELECT DISTINCT p.`Name`, pp.`Poker_Player_ID` \nFROM people p \nJOIN poker_player pp ON p.`People_ID` = pp.`People_ID`;", "match": {"match": false, "result": [["Aleksey Ostapenko", 1], ["Teodor Salparov", 2], ["Yevgeni Sivozhelez", 3], ["Maksim Botin", 4], ["Semen Poltavskiy", 5]], "gt": [["Aleksey Ostapenko"], ["Teodor Salparov"], ["Yevgeni Sivozhelez"], ["Maksim Botin"], ["Semen Poltavskiy"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Name \nFROM poker_player AS T1 \nINNER JOIN people AS T2 \nON T1.People_ID = T2.People_ID;", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Teodor Salparov"], ["Yevgeni Sivozhelez"], ["Maksim Botin"], ["Semen Poltavskiy"]]}}
{"result": "SELECT T2.Name \nFROM poker_player AS T1 \nINNER JOIN people AS T2 ON T1.People_ID = T2.People_ID \nWHERE T1.Earnings > 300000", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Maksim Botin"]]}}
{"result": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID = T2.People_ID \nWHERE T1.Earnings > 300000", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Maksim Botin"]]}}
{"result": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID = T2.People_ID \nORDER BY T1.Final_Table_Made ASC", "match": {"match": true, "result": [["Teodor Salparov"], ["Maksim Botin"], ["Yevgeni Sivozhelez"], ["Semen Poltavskiy"], ["Aleksey Ostapenko"]]}}
{"result": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID = T2.People_ID \nORDER BY T1.Final_Table_Made ASC", "match": {"match": true, "result": [["Teodor Salparov"], ["Maksim Botin"], ["Yevgeni Sivozhelez"], ["Semen Poltavskiy"], ["Aleksey Ostapenko"]]}}
{"result": "SELECT T2.`Birth_Date` \nFROM poker_player AS T1 \nINNER JOIN people AS T2 \nON T1.`People_ID` = T2.`People_ID` \nORDER BY T1.`Earnings` ASC \nLIMIT 1;", "match": {"match": true, "result": [["August 8, 1986"]]}}
{"result": "SELECT T2.`Birth_Date` \nFROM poker_player AS T1 \nINNER JOIN people AS T2 \nON T1.`People_ID` = T2.`People_ID` \nORDER BY T1.`Earnings` ASC \nLIMIT 1;", "match": {"match": true, "result": [["August 8, 1986"]]}}
{"result": "SELECT T1.\"Money_Rank\" \nFROM poker_player AS T1 \nINNER JOIN people AS T2 \nON T1.\"People_ID\" = T2.\"People_ID\" \nWHERE T2.\"Height\" = ( SELECT MAX(\"Height\") FROM people );", "match": {"match": true, "result": [[68.0]]}}
{"result": "SELECT T1.\"Money_Rank\" \nFROM \"poker_player\" AS T1 \nJOIN \"people\" AS T2 ON T1.\"People_ID\" = T2.\"People_ID\" \nORDER BY T2.\"Height\" DESC \nLIMIT 1;", "match": {"match": true, "result": [[68.0]]}}
{"result": "SELECT AVG(Earnings) \nFROM poker_player \nWHERE People_ID IN (SELECT People_ID \n                    FROM people \n                    WHERE Height > 200);", "match": {"match": true, "result": [[309445.0]]}}
{"result": "SELECT AVG(Earnings) \nFROM poker_player \nJOIN people ON poker_player.People_ID = people.People_ID \nWHERE Height > 200;", "match": {"match": true, "result": [[309445.0]]}}
{"result": "SELECT T1.Name FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC", "match": {"match": true, "result": [["Maksim Botin"], ["Aleksey Ostapenko"], ["Teodor Salparov"], ["Semen Poltavskiy"], ["Yevgeni Sivozhelez"]]}}
{"result": "SELECT T1.Name \nFROM people AS T1 \nINNER JOIN poker_player AS T2 \nON T1.People_ID = T2.People_ID \nORDER BY T2.Earnings DESC", "match": {"match": true, "result": [["Maksim Botin"], ["Aleksey Ostapenko"], ["Teodor Salparov"], ["Semen Poltavskiy"], ["Yevgeni Sivozhelez"]]}}
{"result": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality", "match": {"match": true, "result": [["Bulgaria", 1], ["Russia", 6]]}}
{"result": "SELECT Nationality, COUNT(People_ID) AS Number_of_People\nFROM people\nGROUP BY Nationality", "match": {"match": true, "result": [["Bulgaria", 1], ["Russia", 6]]}}
{"result": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(People_ID) DESC LIMIT 1", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Nationality \nFROM people \nGROUP BY Nationality \nORDER BY COUNT(Nationality) DESC \nLIMIT 1", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Nationality \nFROM people \nGROUP BY Nationality \nHAVING COUNT(Nationality)  >  1", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Nationality \nFROM people \nGROUP BY Nationality \nHAVING COUNT(People_ID) >= 2", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Name, Birth_Date FROM people ORDER BY Name ASC", "match": {"match": true, "result": [["Aleksey Ostapenko", "May 26, 1986"], ["Maksim Botin", "July 14, 1983"], ["Roman Bragin", "April 17, 1987"], ["Semen Poltavskiy", "February 8, 1981"], ["Sergey Grankin", "January 22, 1987"], ["Teodor Salparov", "August 16, 1982"], ["Yevgeni Sivozhelez", "August 8, 1986"]]}}
{"result": "SELECT \"Name\", \"Birth_Date\" FROM \"people\" ORDER BY \"Name\" ASC", "match": {"match": true, "result": [["Aleksey Ostapenko", "May 26, 1986"], ["Maksim Botin", "July 14, 1983"], ["Roman Bragin", "April 17, 1987"], ["Semen Poltavskiy", "February 8, 1981"], ["Sergey Grankin", "January 22, 1987"], ["Teodor Salparov", "August 16, 1982"], ["Yevgeni Sivozhelez", "August 8, 1986"]]}}
{"result": "SELECT Name \nFROM people \nWHERE Nationality != 'Russia';", "match": {"match": true, "result": [["Teodor Salparov"]]}}
{"result": "SELECT Name \nFROM people \nWHERE Nationality != 'Russia';", "match": {"match": true, "result": [["Teodor Salparov"]]}}
{"result": "SELECT Name FROM people \nWHERE People_ID NOT IN (\n  SELECT People_ID \n  FROM poker_player\n);", "match": {"match": true, "result": [["Roman Bragin"], ["Sergey Grankin"]]}}
{"result": "SELECT Name \nFROM people \nWHERE People_ID NOT IN (SELECT People_ID FROM poker_player);", "match": {"match": true, "result": [["Roman Bragin"], ["Sergey Grankin"]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM people", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM people", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(*) FROM conductor", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT COUNT(Conductor_ID) FROM conductor", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT Name FROM conductor ORDER BY Age ASC", "match": {"match": true, "result": [["Antal Dor\u00e1ti"], ["Igor Stravinsky"], ["Colin Davis"], ["Michael Tilson Thomas"], ["Paul Jorgensen"], ["Antal Brown"], ["Charles Dutoit"], ["Seiji Ozawa"], ["Valeri Gergiev"], ["Pierre Boulez"], ["Gerard Schwarz"], ["Robert Craft"]]}}
{"result": "SELECT Name FROM conductor ORDER BY Age", "match": {"match": true, "result": [["Antal Dor\u00e1ti"], ["Igor Stravinsky"], ["Colin Davis"], ["Michael Tilson Thomas"], ["Paul Jorgensen"], ["Antal Brown"], ["Charles Dutoit"], ["Seiji Ozawa"], ["Valeri Gergiev"], ["Pierre Boulez"], ["Gerard Schwarz"], ["Robert Craft"]]}}
{"result": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "match": {"match": true, "result": [["Igor Stravinsky"], ["Paul Jorgensen"], ["Charles Dutoit"], ["Pierre Boulez"], ["Robert Craft"], ["Michael Tilson Thomas"]]}}
{"result": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "match": {"match": true, "result": [["Igor Stravinsky"], ["Paul Jorgensen"], ["Charles Dutoit"], ["Pierre Boulez"], ["Robert Craft"], ["Michael Tilson Thomas"]]}}
{"result": "SELECT Record_Company\nFROM orchestra\nORDER BY Year_of_Founded DESC", "match": {"match": true, "result": [["Columbia Masterworks"], ["Philips"], ["Philips Classics Records"], ["RCA"], ["EMI"], ["Koch Records / Naxos Records"], ["Decca Records"], ["Mercury Records"], ["Deutsche Grammophon"], ["Kultur"], ["Decca Records"], ["Delos Records"]]}}
{"result": "SELECT `Record_Company` FROM `orchestra` ORDER BY `Year_of_Founded` DESC", "match": {"match": true, "result": [["Columbia Masterworks"], ["Philips"], ["Philips Classics Records"], ["RCA"], ["EMI"], ["Koch Records / Naxos Records"], ["Decca Records"], ["Mercury Records"], ["Deutsche Grammophon"], ["Kultur"], ["Decca Records"], ["Delos Records"]]}}
{"result": "SELECT AVG(`Attendance`) FROM `show`;", "match": {"match": true, "result": [[1326.4]]}}
{"result": "SELECT AVG(`Attendance`) FROM `show`", "match": {"match": true, "result": [[1326.4]]}}
{"result": "SELECT MAX(`Share`) , MIN(`Share`) FROM performance WHERE `Type` != 'Live final'", "match": {"match": true, "result": [["44.7%", "22.7%"]]}}
{"result": "SELECT MAX(Share), MIN(Share) \nFROM performance \nWHERE Type != 'Live final';", "match": {"match": true, "result": [["44.7%", "22.7%"]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM conductor", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM conductor", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "match": {"match": true, "result": [["Robert Craft"], ["Antal Brown"], ["Gerard Schwarz"], ["Valeri Gergiev"], ["Charles Dutoit"], ["Michael Tilson Thomas"], ["Igor Stravinsky"], ["Paul Jorgensen"], ["Pierre Boulez"], ["Antal Dor\u00e1ti"], ["Seiji Ozawa"], ["Colin Davis"]]}}
{"result": "SELECT Name \nFROM conductor \nORDER BY Year_of_Work DESC", "match": {"match": true, "result": [["Robert Craft"], ["Antal Brown"], ["Gerard Schwarz"], ["Valeri Gergiev"], ["Charles Dutoit"], ["Michael Tilson Thomas"], ["Igor Stravinsky"], ["Paul Jorgensen"], ["Pierre Boulez"], ["Antal Dor\u00e1ti"], ["Seiji Ozawa"], ["Colin Davis"]]}}
{"result": "SELECT Name \nFROM conductor \nORDER BY Year_of_Work DESC \nLIMIT 1;", "match": {"match": true, "result": [["Robert Craft"]]}}
{"result": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "match": {"match": true, "result": [["Robert Craft"]]}}
{"result": "SELECT T2.Name, T1.Orchestra \nFROM orchestra AS T1 \nINNER JOIN conductor AS T2 \nON T1.Conductor_ID = T2.Conductor_ID", "match": {"match": true, "result": [["Antal Dor\u00e1ti", "London Symphony Orchestra"], ["Igor Stravinsky", "Columbia Symphony Orchestra"], ["Colin Davis", "Royal Concertgebouw Orchestra"], ["Paul Jorgensen", "Royal Danish Orchestra"], ["Antal Brown", "Detroit Symphony Orchestra"], ["Charles Dutoit", "Montreal Symphony Orchestra"], ["Gerard Schwarz", "Seattle Symphony Orchestra"], ["Pierre Boulez", "Chicago Symphony Orchestra"], ["Valeri Gergiev", "Kirov Orchestra"], ["Robert Craft", "Philharmonia Orchestra"], ["Seiji Ozawa", "Orchestre de Paris"], ["Michael Tilson Thomas", "San Francisco Symphony Orchestra"]]}}
{"result": "SELECT T1.Name, T2.Orchestra \nFROM conductor AS T1 \nINNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID", "match": {"match": true, "result": [["Antal Dor\u00e1ti", "London Symphony Orchestra"], ["Igor Stravinsky", "Columbia Symphony Orchestra"], ["Colin Davis", "Royal Concertgebouw Orchestra"], ["Paul Jorgensen", "Royal Danish Orchestra"], ["Antal Brown", "Detroit Symphony Orchestra"], ["Charles Dutoit", "Montreal Symphony Orchestra"], ["Gerard Schwarz", "Seattle Symphony Orchestra"], ["Pierre Boulez", "Chicago Symphony Orchestra"], ["Valeri Gergiev", "Kirov Orchestra"], ["Robert Craft", "Philharmonia Orchestra"], ["Seiji Ozawa", "Orchestre de Paris"], ["Michael Tilson Thomas", "San Francisco Symphony Orchestra"]]}}
{"result": "SELECT T2.Name\nFROM orchestra AS T1\nJOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID\nGROUP BY T1.Conductor_ID\nHAVING COUNT(T1.Orchestra_ID) > 1", "match": {"match": true, "result": []}}
{"result": "SELECT T1.Name \nFROM conductor AS T1 \nJOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID \nGROUP BY T2.Conductor_ID \nHAVING COUNT(DISTINCT T2.Orchestra_ID) > 1", "match": {"match": true, "result": []}}
{"result": "SELECT T.Name \nFROM (\n  SELECT c.Name, COUNT(o.Orchestra_ID) as num \n  FROM conductor c \n  JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID \n  GROUP BY c.Name \n) T \nORDER BY T.num DESC \nLIMIT 1", "match": {"match": false, "result": [["Antal Brown"]], "gt": [["Michael Tilson Thomas"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name FROM conductor \nJOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID \nGROUP BY conductor.Conductor_ID \nORDER BY COUNT(orchestra.Orchestra_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [["Michael Tilson Thomas"]]}}
{"result": "SELECT T1.Name \nFROM conductor AS T1 \nINNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID \nWHERE T2.Year_of_Founded > 2008", "match": {"match": true, "result": [["Igor Stravinsky"]]}}
{"result": "SELECT T1.Name \nFROM conductor AS T1 \nJOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID \nWHERE T2.Year_of_Founded > 2008;", "match": {"match": true, "result": [["Igor Stravinsky"]]}}
{"result": "SELECT Record_Company, COUNT(Orchestra_ID) AS num_orchestras \nFROM orchestra \nGROUP BY Record_Company", "match": {"match": true, "result": [["Columbia Masterworks", 1], ["Decca Records", 2], ["Delos Records", 1], ["Deutsche Grammophon", 1], ["EMI", 1], ["Koch Records / Naxos Records", 1], ["Kultur", 1], ["Mercury Records", 1], ["Philips", 1], ["Philips Classics Records", 1], ["RCA", 1]]}}
{"result": "SELECT Record_Company, COUNT(Orchestra_ID) FROM orchestra GROUP BY Record_Company", "match": {"match": true, "result": [["Columbia Masterworks", 1], ["Decca Records", 2], ["Delos Records", 1], ["Deutsche Grammophon", 1], ["EMI", 1], ["Koch Records / Naxos Records", 1], ["Kultur", 1], ["Mercury Records", 1], ["Philips", 1], ["Philips Classics Records", 1], ["RCA", 1]]}}
{"result": "SELECT Major_Record_Format, COUNT(Orchestra_ID) \nFROM orchestra \nGROUP BY Major_Record_Format \nORDER BY COUNT(Orchestra_ID) ASC", "match": {"match": false, "result": [["CD / LP", 1], ["DVD", 1], ["CD", 10]], "gt": [["CD / LP"], ["DVD"], ["CD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Major_Record_Format, COUNT(Major_Record_Format) as count \nFROM orchestra \nGROUP BY Major_Record_Format \nORDER BY count DESC;", "match": {"match": false, "result": [["CD", 10], ["DVD", 1], ["CD / LP", 1]], "gt": [["CD / LP"], ["DVD"], ["CD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(Record_Company) DESC LIMIT 1", "match": {"match": true, "result": [["Decca Records"]]}}
{"result": "SELECT Record_Company, COUNT(Conductor_ID) as count FROM orchestra GROUP BY Record_Company ORDER BY count DESC LIMIT 1", "match": {"match": false, "result": [["Decca Records", 2]], "gt": [["Decca Records"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Orchestra \nFROM performance AS T1 \nLEFT JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID \nWHERE T1.Performance_ID IS NULL", "match": {"match": false, "result": [], "gt": [["San Francisco Symphony Orchestra"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Orchestra \nFROM orchestra \nWHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);", "match": {"match": true, "result": [["San Francisco Symphony Orchestra"]]}}
{"result": "SELECT T.Record_Company \nFROM (\n  SELECT Record_Company, Year_of_Founded, ROW_NUMBER() OVER (PARTITION BY Record_Company ORDER BY Year_of_Founded) AS RN \n  FROM orchestra \n) T \nWHERE T.RN = 1 OR T.Year_of_Founded < 2003 OR T.Year_of_Founded > 2003", "match": {"match": false, "result": [["Columbia Masterworks"], ["Decca Records"], ["Decca Records"], ["Delos Records"], ["Deutsche Grammophon"], ["EMI"], ["Koch Records / Naxos Records"], ["Kultur"], ["Mercury Records"], ["Philips"], ["Philips Classics Records"], ["RCA"]], "gt": [["Decca Records"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Record_Company \nFROM orchestra AS T1 \nINNER JOIN \n( \n  SELECT Orchestra_ID \n  FROM orchestra \n  WHERE Year_of_Founded < 2003 \n  GROUP BY Orchestra_ID \n  HAVING COUNT(Orchestra_ID) > 1 \n) AS T2 \nON T1.Orchestra_ID = T2.Orchestra_ID \n\nUNION ALL \n\nSELECT T1.Record_Company \nFROM orchestra AS T1 \nINNER JOIN \n( \n  SELECT Orchestra_ID \n  FROM orchestra \n  WHERE Year_of_Founded >= 2003 \n  GROUP BY Orchestra_ID \n  HAVING COUNT(Orchestra_ID) > 1 \n) AS T2 \nON T1.Orchestra_ID = T2.Orchestra_ID", "match": {"match": false, "result": [], "gt": [["Decca Records"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(Orchestra_ID) \nFROM orchestra \nWHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD';", "match": {"match": true, "result": [[11]]}}
{"result": "SELECT COUNT(Orchestra_ID) \nFROM orchestra \nWHERE Major_Record_Format IN ('CD', 'DVD');", "match": {"match": true, "result": [[11]]}}
{"result": "SELECT DISTINCT T1.`Year_of_Founded` \nFROM `orchestra` AS T1 \nJOIN performance AS T2 ON T1.`Orchestra_ID` = T2.`Orchestra_ID` \nGROUP BY T2.`Orchestra_ID` \nHAVING COUNT(T2.`Performance_ID`) > 1", "match": {"match": true, "result": []}}
{"result": "SELECT T1.`Year_of_Founded` \nFROM `orchestra` AS T1 \nJOIN `performance` AS T2 ON T1.`Orchestra_ID` = T2.`Orchestra_ID` \nGROUP BY T1.`Orchestra_ID` \nHAVING COUNT(T2.`Performance_ID`) > 1", "match": {"match": true, "result": []}}
{"result": "SELECT COUNT(*) FROM Highschooler", "match": {"match": true, "result": [[16]]}}
{"result": "SELECT COUNT(ID) FROM Highschooler", "match": {"match": true, "result": [[16]]}}
{"result": "SELECT name, grade FROM Highschooler", "match": {"match": true, "result": [["Jordan", 9], ["Gabriel", 9], ["Tiffany", 9], ["Cassandra", 9], ["Haley", 10], ["Andrew", 10], ["Kris", 10], ["Brittany", 10], ["Alexis", 11], ["Austin", 11], ["Gabriel", 11], ["Jessica", 11], ["Jordan", 12], ["John", 12], ["Kyle", 12], ["Logan", 12]]}}
{"result": "SELECT name, grade FROM Highschooler", "match": {"match": true, "result": [["Jordan", 9], ["Gabriel", 9], ["Tiffany", 9], ["Cassandra", 9], ["Haley", 10], ["Andrew", 10], ["Kris", 10], ["Brittany", 10], ["Alexis", 11], ["Austin", 11], ["Gabriel", 11], ["Jessica", 11], ["Jordan", 12], ["John", 12], ["Kyle", 12], ["Logan", 12]]}}
{"result": "SELECT grade FROM Highschooler", "match": {"match": true, "result": [[9], [9], [9], [9], [10], [10], [10], [10], [11], [11], [11], [11], [12], [12], [12], [12]]}}
{"result": "SELECT grade FROM Highschooler", "match": {"match": true, "result": [[9], [9], [9], [9], [10], [10], [10], [10], [11], [11], [11], [11], [12], [12], [12], [12]]}}
{"result": "SELECT grade FROM Highschooler WHERE name = 'Kyle'", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT grade \nFROM Highschooler \nWHERE name = 'Kyle';", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT name \nFROM Highschooler \nWHERE grade = 10", "match": {"match": true, "result": [["Haley"], ["Andrew"], ["Kris"], ["Brittany"]]}}
{"result": "SELECT name \nFROM Highschooler \nWHERE grade = 10;", "match": {"match": true, "result": [["Haley"], ["Andrew"], ["Kris"], ["Brittany"]]}}
{"result": "SELECT ID\nFROM Highschooler\nWHERE name = 'Kyle';", "match": {"match": true, "result": [[1934]]}}
{"result": "SELECT ID FROM Highschooler WHERE name = 'Kyle';", "match": {"match": true, "result": [[1934]]}}
{"result": "SELECT COUNT(*) FROM Highschooler WHERE grade = 9 OR grade = 10", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT COUNT(*) \nFROM Highschooler \nWHERE grade BETWEEN 9 AND 10", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT grade, COUNT(*) \nFROM Highschooler \nGROUP BY grade", "match": {"match": true, "result": [[9, 4], [10, 4], [11, 4], [12, 4]]}}
{"result": "SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade", "match": {"match": true, "result": [[9, 4], [10, 4], [11, 4], [12, 4]]}}
{"result": "SELECT grade, COUNT(*) as count\nFROM Highschooler\nGROUP BY grade\nORDER BY count DESC\nLIMIT 1;", "match": {"match": false, "result": [[12, 4]], "gt": [[12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT grade, COUNT(*) \nFROM Highschooler \nGROUP BY grade \nORDER BY COUNT(*) DESC LIMIT 1", "match": {"match": false, "result": [[12, 4]], "gt": [[12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT grade \nFROM Highschooler \nGROUP BY grade \nHAVING COUNT(ID) >= 4;", "match": {"match": true, "result": [[9], [10], [11], [12]]}}
{"result": "SELECT grade\nFROM Highschooler\nGROUP BY grade\nHAVING COUNT(ID) >= 4;", "match": {"match": true, "result": [[9], [10], [11], [12]]}}
{"result": "SELECT student_id, COUNT(*) as friend_count\nFROM Friend\nGROUP BY student_id", "match": {"match": true, "result": [[1101, 1], [1247, 2], [1304, 1], [1316, 1], [1381, 1], [1468, 2], [1501, 1], [1510, 2], [1661, 1], [1689, 2], [1709, 1], [1782, 3], [1911, 1], [1934, 1]]}}
{"result": "SELECT H.name, COUNT(F.student_id) \nFROM Highschooler H \nJOIN Friend F ON H.ID = F.student_id \nGROUP BY H.name", "match": {"match": false, "result": [["Alexis", 2], ["Andrew", 3], ["Austin", 1], ["Cassandra", 1], ["Gabriel", 3], ["Haley", 1], ["Jessica", 1], ["Jordan", 3], ["Kris", 2], ["Kyle", 1], ["Logan", 1], ["Tiffany", 1]], "gt": [[1101, 1], [1247, 2], [1304, 1], [1316, 1], [1381, 1], [1468, 2], [1501, 1], [1510, 2], [1661, 1], [1689, 2], [1709, 1], [1782, 3], [1911, 1], [1934, 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name, COUNT(T2.student_id) AS num_friends\nFROM Highschooler\nLEFT JOIN Friend AS T2 ON Highschooler.ID = T2.student_id\nGROUP BY name", "match": {"match": false, "result": [["Alexis", 2], ["Andrew", 3], ["Austin", 1], ["Brittany", 0], ["Cassandra", 1], ["Gabriel", 3], ["Haley", 1], ["Jessica", 1], ["John", 0], ["Jordan", 3], ["Kris", 2], ["Kyle", 1], ["Logan", 1], ["Tiffany", 1]], "gt": [["Haley", 1], ["Alexis", 2], ["Jordan", 1], ["Austin", 1], ["Tiffany", 1], ["Kris", 2], ["Jessica", 1], ["Jordan", 2], ["Logan", 1], ["Gabriel", 2], ["Cassandra", 1], ["Andrew", 3], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name, COUNT(*) as num_friends \nFROM Highschooler \nLEFT JOIN Friend ON Highschooler.ID = Friend.student_id \nGROUP BY Highschooler.ID", "match": {"match": false, "result": [["John", 1], ["Haley", 1], ["Alexis", 2], ["Jordan", 1], ["Austin", 1], ["Tiffany", 1], ["Kris", 2], ["Jessica", 1], ["Jordan", 2], ["Brittany", 1], ["Logan", 1], ["Gabriel", 2], ["Cassandra", 1], ["Andrew", 3], ["Gabriel", 1], ["Kyle", 1]], "gt": [["Haley", 1], ["Alexis", 2], ["Jordan", 1], ["Austin", 1], ["Tiffany", 1], ["Kris", 2], ["Jessica", 1], ["Jordan", 2], ["Logan", 1], ["Gabriel", 2], ["Cassandra", 1], ["Andrew", 3], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID IN (\n  SELECT student_id \n  FROM Friend \n  GROUP BY student_id \n  ORDER BY COUNT(student_id) DESC \n  LIMIT 1\n);", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "SELECT T1.name \nFROM Highschooler AS T1 \nJOIN Friend AS T2 ON T1.ID = T2.student_id \nJOIN Friend AS T3 ON T3.friend_id = T2.student_id \nGROUP BY T1.name \nORDER BY COUNT(DISTINCT T3.student_id) DESC \nLIMIT 1", "match": {"match": false, "result": [["Kyle"]], "gt": [["Andrew"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name FROM Highschooler WHERE ID IN (\n  SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) >= 3\n)", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID IN (\n  SELECT student_id \n  FROM Friend \n  GROUP BY student_id \n  HAVING COUNT(*) >= 3\n);", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "SELECT T2.name \nFROM Friend AS T1 \nJOIN Highschooler AS T2 ON T1.friend_id = T2.ID \nWHERE T1.student_id = ( SELECT ID FROM Highschooler WHERE name = 'Kyle' );", "match": {"match": true, "result": [["Jordan"]]}}
{"result": "SELECT T2.name \nFROM Friend AS T1 \nJOIN Highschooler AS T2 \nON T1.friend_id = T2.ID \nJOIN Highschooler AS T3 \nON T1.student_id = T3.ID \nWHERE T3.name = 'Kyle'", "match": {"match": true, "result": [["Jordan"]]}}
{"result": "SELECT COUNT(T1.friend_id) \nFROM Friend AS T1\nJOIN Highschooler AS T2 ON T1.student_id = T2.ID\nWHERE T2.name = 'Kyle'", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(*) FROM Friend WHERE student_id = ( SELECT ID FROM Highschooler WHERE name = 'Kyle' )", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT ID \nFROM Highschooler \nWHERE ID NOT IN (SELECT student_id FROM Friend);", "match": {"match": true, "result": [[1025], [1641]]}}
{"result": "SELECT ID FROM Highschooler \nWHERE ID NOT IN (SELECT student_id FROM Friend) \nOR ID NOT IN (SELECT friend_id FROM Friend);", "match": {"match": false, "result": [[1025], [1510], [1641]], "gt": [[1025], [1641]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID NOT IN (\n  SELECT student_id \n  FROM Friend\n  UNION\n  SELECT friend_id \n  FROM Friend\n);", "match": {"match": false, "result": [], "gt": [["Brittany"], ["John"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID NOT IN (SELECT friend_id FROM Friend)", "match": {"match": false, "result": [["Jordan"]], "gt": [["Brittany"], ["John"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT H1.ID \nFROM Highschooler H1 \nJOIN Friend F ON H1.ID = F.student_id \nJOIN Highschooler H2 ON F.friend_id = H2.ID \nJOIN Likes L ON H2.ID = L.liked_id", "match": {"match": false, "result": [[1510], [1689], [1689], [1381], [1709], [1782], [1782], [1782], [1468], [1247], [1911], [1501], [1316], [1934]], "gt": [[1101], [1247], [1304], [1468], [1501], [1689], [1709], [1934]], "error": "Query result does not match ground truth."}}
{"result": "SELECT ID \nFROM Highschooler \nWHERE ID IN ( SELECT student_id FROM Friend \n              INTERSECT \n              SELECT student_id FROM Likes );", "match": {"match": false, "result": [[1247], [1316], [1501], [1689], [1709], [1782], [1911], [1934]], "gt": [[1101], [1247], [1304], [1468], [1501], [1689], [1709], [1934]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.name \nFROM Highschooler AS T1 \nINNER JOIN Friend AS T2 ON T1.ID = T2.student_id \nINNER JOIN Likes AS T3 ON T3.student_id != T3.liked_id AND T3.student_id = T1.ID", "match": {"match": false, "result": [["Gabriel"], ["Gabriel"], ["Cassandra"], ["Andrew"], ["Andrew"], ["Andrew"], ["Gabriel"], ["Alexis"], ["Alexis"], ["Austin"], ["Jessica"], ["Kyle"]], "gt": [["Alexis"], ["Cassandra"], ["Gabriel"], ["Haley"], ["Jessica"], ["Jordan"], ["Kris"], ["Kyle"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID IN (SELECT student_id FROM Friend) \n  AND ID IN (SELECT liked_id FROM Likes);", "match": {"match": false, "result": [["Haley"], ["Alexis"], ["Jordan"], ["Kris"], ["Jessica"], ["Gabriel"], ["Cassandra"], ["Kyle"]], "gt": [["Alexis"], ["Cassandra"], ["Gabriel"], ["Haley"], ["Jessica"], ["Jordan"], ["Kris"], ["Kyle"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT student_id, COUNT(*) as num_from \nFROM Likes \nGROUP BY student_id", "match": {"match": true, "result": [[1025, 1], [1247, 1], [1316, 1], [1501, 1], [1641, 1], [1689, 1], [1709, 1], [1782, 1], [1911, 1], [1934, 1]]}}
{"result": "SELECT student_id, COUNT(*)\nFROM Likes\nGROUP BY student_id;", "match": {"match": true, "result": [[1025, 1], [1247, 1], [1316, 1], [1501, 1], [1641, 1], [1689, 1], [1709, 1], [1782, 1], [1911, 1], [1934, 1]]}}
{"result": "SELECT H.name, COUNT(L.student_id) as num_likes\nFROM Highschooler H\nJOIN Likes L ON H.ID = L.student_id\nGROUP BY H.name", "match": {"match": false, "result": [["Alexis", 1], ["Andrew", 1], ["Austin", 1], ["Brittany", 1], ["Cassandra", 1], ["Gabriel", 2], ["Jessica", 1], ["John", 1], ["Kyle", 1]], "gt": [["John", 1], ["Alexis", 1], ["Austin", 1], ["Jessica", 1], ["Brittany", 1], ["Gabriel", 1], ["Cassandra", 1], ["Andrew", 1], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name, COUNT(*) AS likes\nFROM Highschooler\nWHERE ID IN (SELECT student_id FROM Likes)\nGROUP BY name", "match": {"match": false, "result": [["Alexis", 1], ["Andrew", 1], ["Austin", 1], ["Brittany", 1], ["Cassandra", 1], ["Gabriel", 2], ["Jessica", 1], ["John", 1], ["Kyle", 1]], "gt": [["John", 1], ["Alexis", 1], ["Austin", 1], ["Jessica", 1], ["Brittany", 1], ["Gabriel", 1], ["Cassandra", 1], ["Andrew", 1], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID IN (SELECT student_id \n             FROM Likes \n             GROUP BY student_id \n             ORDER BY COUNT(student_id) DESC \n             LIMIT 1)", "match": {"match": true, "result": [["John"]]}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID IN (\n  SELECT student_id \n  FROM Likes \n  GROUP BY student_id \n  ORDER BY COUNT(*) DESC \n  LIMIT 1\n)", "match": {"match": true, "result": [["John"]]}}
{"result": "SELECT DISTINCT T1.name \nFROM Highschooler AS T1 \nJOIN Likes AS T2 ON T1.ID = T2.student_id \nGROUP BY T1.name \nHAVING COUNT(T2.liked_id) >= 2", "match": {"match": false, "result": [["Gabriel"]], "gt": [], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.name \nFROM (\n  SELECT L.student_id, L.liked_id, H.name, \n         COUNT(*) AS likes_count \n  FROM Likes L\n  JOIN Highschooler H ON L.student_id = H.ID\n  GROUP BY L.student_id, L.liked_id, H.name\n) AS T \nWHERE T.likes_count >= 2;", "match": {"match": true, "result": []}}
{"result": "SELECT name \nFROM Highschooler \nWHERE grade > 5 \nINTERSECT \nSELECT H1.name \nFROM Highschooler H1 \nJOIN Friend F1 ON H1.ID = F1.student_id \nJOIN Friend F2 ON H1.ID = F2.friend_id \nGROUP BY H1.name \nHAVING COUNT(*) >= 2;", "match": {"match": false, "result": [["Alexis"], ["Andrew"], ["Gabriel"], ["Jessica"], ["Jordan"], ["Kris"], ["Kyle"]], "gt": [["Alexis"], ["Kris"], ["Jordan"], ["Gabriel"], ["Andrew"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name \nFROM Highschooler \nWHERE grade > 5 \nINTERSECT \nSELECT H1.name \nFROM Highschooler H1 \nJOIN Friend F ON H1.ID = F.student_id \nGROUP BY H1.ID \nHAVING COUNT(F.student_id) >= 2", "match": {"match": false, "result": [["Alexis"], ["Andrew"], ["Gabriel"], ["Jordan"], ["Kris"]], "gt": [["Alexis"], ["Kris"], ["Jordan"], ["Gabriel"], ["Andrew"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) \nFROM Likes \nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(DISTINCT liked_id) \nFROM Likes \nWHERE student_id IN (SELECT ID FROM Highschooler WHERE name = 'Kyle');", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT CAST(SUM(H.grade) AS REAL) / COUNT(DISTINCT H.ID) \nFROM Highschooler H \nJOIN Friend F ON H.ID = F.student_id", "match": {"match": false, "result": [[14.642857142857142]], "gt": [[10.428571428571429]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(T2.grade) \nFROM Friend AS T1 \nJOIN Highschooler AS T2 ON T1.student_id = T2.ID \nGROUP BY T1.student_id", "match": {"match": false, "result": [[10.0], [11.0], [12.0], [11.0], [9.0], [10.0], [11.0], [9.0], [12.0], [9.0], [9.0], [10.0], [11.0], [12.0]], "gt": [[10.428571428571429]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MIN(T.grade) \nFROM Highschooler T \nWHERE T.ID NOT IN (SELECT friend_id FROM Friend) \nOR T.ID NOT IN (SELECT student_id FROM Friend)", "match": {"match": false, "result": [[9]], "gt": [[10]], "error": "Query result does not match ground truth."}}
{"result": "SELECT min(T1.grade) \nFROM Highschooler AS T1 \nWHERE T1.ID NOT IN (SELECT T1.student_id \n                    FROM Friend AS T1);", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT DISTINCT state \nFROM Owners\nINTERSECT\nSELECT DISTINCT state \nFROM Professionals", "match": {"match": true, "result": [["Indiana"], ["Mississippi"], ["Wisconsin"]]}}
{"result": "SELECT DISTINCT state \nFROM Owners \nINTERSECT \nSELECT DISTINCT state \nFROM Professionals", "match": {"match": true, "result": [["Indiana"], ["Mississippi"], ["Wisconsin"]]}}
{"result": "SELECT AVG(T1.age) \nFROM Dogs AS T1 \nJOIN Treatments AS T2 ON T1.dog_id = T2.dog_id", "match": {"match": false, "result": [[5.466666666666667]], "gt": [[5.111111111111111]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(DATEDIFF(date_arrived, date_of_birth)) AS avg_age \nFROM Dogs \nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id", "match": {"match": false, "error": "Query execution failed with error: no such function: DATEDIFF"}}
{"result": "SELECT p.`professional_id`, p.`last_name`, p.`cell_number`\nFROM `Professionals` p\nWHERE p.`state` = 'Indiana'\nOR p.`professional_id` IN (\n  SELECT T.`professional_id`\n  FROM `Treatments` T\n  GROUP BY T.`professional_id`\n  HAVING COUNT(T.`treatment_id`) > 2\n);", "match": {"match": true, "result": [[1, "Braun", "(275)939-2435x80863"], [8, "Hyatt", "328.842.3792"], [9, "Kshlerin", "962-983-8109x3509"]]}}
{"result": "```sql\nSELECT \n    professional_id,\n    last_name,\n    cell_number\nFROM \n    Professionals\nWHERE \n    state = 'Indiana'\nUNION ALL\nSELECT \n    p.professional_id,\n    p.last_name,\n    p.cell_number\nFROM \n    Professionals p\nJOIN \n    Treatments t ON p.professional_id = t.professional_id\nGROUP BY \n    p.professional_id, p.last_name, p.cell_number\nHAVING \n    COUNT(t.treatment_id) > 2\n```", "match": {"match": true, "result": [[1, "Braun", "(275)939-2435x80863"], [8, "Hyatt", "328.842.3792"], [9, "Kshlerin", "962-983-8109x3509"]]}}
{"result": "SELECT d.name \nFROM Dogs d \nJOIN Treatments t ON d.dog_id = t.dog_id \nWHERE t.cost_of_treatment <= 1000", "match": {"match": false, "result": [["Lyric"], ["Houston"], ["Lyric"], ["Hipolito"], ["Holden"], ["Troy"], ["Evangeline"], ["Hipolito"], ["Lyric"], ["Troy"], ["Evangeline"], ["Jesus"], ["Narciso"], ["Troy"], ["Kacey"]], "gt": [["Kacey"], ["Hipolito"], ["Mavis"], ["Houston"], ["Jeffrey"], ["Merritt"], ["Narciso"], ["George"], ["Bessie"], ["Betty"], ["Holden"], ["Jesus"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT D.name \nFROM Dogs D \nJOIN Treatments T ON D.dog_id = T.dog_id \nJOIN Owners O ON D.owner_id = O.owner_id \nGROUP BY D.name \nHAVING SUM(T.cost_of_treatment) <= 1000", "match": {"match": false, "result": [["Hipolito"], ["Holden"], ["Houston"], ["Jesus"], ["Kacey"], ["Narciso"]], "gt": [["Kacey"], ["Hipolito"], ["Mavis"], ["Houston"], ["Jeffrey"], ["Merritt"], ["Narciso"], ["George"], ["Bessie"], ["Betty"], ["Holden"], ["Jesus"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT first_name \nFROM Professionals\nWHERE first_name NOT IN (\n  SELECT name \n  FROM Dogs\n)\nUNION\nSELECT first_name \nFROM Owners\nWHERE first_name NOT IN (\n  SELECT name \n  FROM Dogs\n)", "match": {"match": true, "result": [["Adelle"], ["Brady"], ["Cindy"], ["Danny"], ["Domenica"], ["Emelie"], ["Ericka"], ["Gay"], ["Heather"], ["Jaclyn"], ["Jayson"], ["Johann"], ["Kade"], ["Karley"], ["Lesly"], ["Lorenz"], ["Melisa"], ["Monte"], ["Nora"], ["Olaf"], ["Orlando"], ["Rachelle"], ["Rolando"], ["Ruben"], ["Sigurd"], ["Taryn"], ["Tre"], ["Velva"], ["Vernice"], ["Winfield"]]}}
{"result": "SELECT p.first_name \nFROM Professionals p\nWHERE p.first_name NOT IN (\n  SELECT d.name \n  FROM Dogs d\n);\n\nOR\n\nSELECT DISTINCT o.first_name \nFROM Owners o\nWHERE o.first_name NOT IN (\n  SELECT d.name \n  FROM Dogs d\n);\n\nOR\n\nSELECT p.first_name \nFROM Professionals p\nUNION ALL\nSELECT o.first_name \nFROM Owners o\nWHERE p.first_name NOT IN (\n  SELECT d.name \n  FROM Dogs d\n);", "match": {"match": false, "error": "Query execution failed with error: You can only execute one statement at a time."}}
{"result": "SELECT p.professional_id, p.role_code, p.email_address \nFROM Professionals p \nLEFT JOIN Treatments t ON p.professional_id = t.professional_id \nWHERE t.treatment_id IS NULL", "match": {"match": true, "result": [[1, "Employee", "deanna.schuster@example.com"], [2, "Employee", "lucile.shanahan@example.org"], [3, "Employee", "uboehm@example.org"], [11, "Employee", "west.eula@example.net"], [12, "Veterenarian", "marquardt.furman@example.org"], [13, "Veterenarian", "delphine29@example.com"], [15, "Employee", "jeichmann@example.com"]]}}
{"result": "SELECT p.professional_id, p.role_code, p.email_address \nFROM Professionals p \nWHERE p.professional_id NOT IN (SELECT professional_id FROM Treatments)", "match": {"match": true, "result": [[1, "Employee", "deanna.schuster@example.com"], [2, "Employee", "lucile.shanahan@example.org"], [3, "Employee", "uboehm@example.org"], [11, "Employee", "west.eula@example.net"], [12, "Veterenarian", "marquardt.furman@example.org"], [13, "Veterenarian", "delphine29@example.com"], [15, "Employee", "jeichmann@example.com"]]}}
{"result": "SELECT T.owner_id, T.first_name, T.last_name\nFROM (\n  SELECT o.owner_id, o.first_name, o.last_name, COUNT(d.dog_id) as dog_count\n  FROM Owners o\n  JOIN Dogs d ON o.owner_id = d.owner_id\n  GROUP BY o.owner_id, o.first_name, o.last_name\n) T\nORDER BY T.dog_count DESC\nLIMIT 1", "match": {"match": true, "result": [[14, "Rachelle", "Funk"]]}}
{"result": "SELECT DISTINCT T1.owner_id, T1.first_name, T1.last_name\nFROM Owners AS T1\nJOIN Dogs AS T2 ON T1.owner_id = T2.owner_id\nGROUP BY T1.owner_id, T1.first_name, T1.last_name\nORDER BY COUNT(T2.owner_id) DESC\nLIMIT 1", "match": {"match": true, "result": [[14, "Rachelle", "Funk"]]}}
{"result": "SELECT DISTINCT T1.professional_id, T1.role_code, T1.first_name\nFROM Professionals T1\nJOIN Treatments T2 ON T1.professional_id = T2.professional_id\nGROUP BY T1.professional_id, T1.role_code, T1.first_name\nHAVING COUNT(T2.treatment_id) >= 2", "match": {"match": true, "result": [[4, "Veterenarian", "Vernice"], [6, "Veterenarian", "Ruben"], [8, "Employee", "Karley"], [9, "Veterenarian", "Monte"], [10, "Employee", "Domenica"], [14, "Employee", "Sigurd"]]}}
{"result": "SELECT T1.professional_id, T1.role_code, T1.first_name \nFROM Professionals T1 \nJOIN Treatments T2 ON T1.professional_id = T2.professional_id \nGROUP BY T1.professional_id \nHAVING COUNT(T2.treatment_id) >= 2", "match": {"match": true, "result": [[4, "Veterenarian", "Vernice"], [6, "Veterenarian", "Ruben"], [8, "Employee", "Karley"], [9, "Veterenarian", "Monte"], [10, "Employee", "Domenica"], [14, "Employee", "Sigurd"]]}}
{"result": "SELECT b.breed_name \nFROM Breeds b \nJOIN Dogs d ON b.breed_code = d.breed_code \nGROUP BY b.breed_name \nORDER BY COUNT(d.dog_id) DESC \nLIMIT 1", "match": {"match": true, "result": [["Bulldog"]]}}
{"result": "SELECT T1.breed_name\nFROM Breeds AS T1\nJOIN Dogs AS T2 ON T1.breed_code = T2.breed_code\nGROUP BY T1.breed_name\nORDER BY COUNT(T2.dog_id) DESC\nLIMIT 1", "match": {"match": true, "result": [["Bulldog"]]}}
{"result": "```sql\nSELECT o.owner_id, o.last_name\nFROM Owners o\nJOIN (\n  SELECT t.dog_id, COUNT(t.treatment_id) as treatment_count\n  FROM Treatments t\n  GROUP BY t.dog_id\n) dg ON o.owner_id = dg.dog_id\nJOIN (\n  SELECT t.dog_id, COUNT(t.treatment_id) as treatment_count\n  FROM Treatments t\n  GROUP BY t.dog_id\n) dg2 ON dg.dog_id = dg2.dog_id\nWHERE dg2.treatment_count = (\n  SELECT MAX(treatment_count)\n  FROM (\n    SELECT t.dog_id, COUNT(t.treatment_id) as treatment_count\n    FROM Treatments t\n    GROUP BY t.dog_id\n  ) AS subquery\n)\n```\n\nThis SQL query will list the owner's ID and last name who has paid for the most treatments on his or her dogs. It first calculates the total treatments for each dog, then finds the max count, and finally returns the owner's ID and last name who has the dogs with the most treatments. \n\nHowever, please note that this query will return multiple rows if there are multiple owners with the maximum number of treatments. \n\nA more accurate query would be:\n\n```sql\nSELECT o.owner_id, o.last_name\nFROM Owners o\nJOIN (\n  SELECT t.dog_id, COUNT(t.treatment_id) as treatment_count\n  FROM Treatments t\n  GROUP BY t.dog_id\n) dg ON o.owner_id = dg.dog_id\nWHERE treatment_count = (\n  SELECT MAX(treatment_count)\n  FROM (\n    SELECT t.dog_id, COUNT(t.treatment_id) as treatment_count\n    FROM Treatments t\n    GROUP BY t.dog_id\n  ) AS subquery\n)\nGROUP BY o.owner_id, o.last_name\n```", "match": {"match": false, "error": "Query execution failed with error: near \"This\": syntax error"}}
{"result": "SELECT T1.owner_id, T1.last_name \nFROM Owners AS T1 \nJOIN (\n  SELECT dog_id, owner_id, SUM(cost_of_treatment) as total_spent \n  FROM Treatments \n  GROUP BY dog_id, owner_id \n  ORDER BY total_spent DESC \n  LIMIT 1 \n) AS T2 \nON T1.owner_id = T2.owner_id", "match": {"match": false, "error": "Query execution failed with error: no such column: owner_id"}}
{"result": "SELECT T2.treatment_type_description\nFROM Charges AS T1\nJOIN Treatments AS T2 ON T1.charge_id = T2.cost_of_treatment\nJOIN Treatment_Types AS T3 ON T2.treatment_type_code = T3.treatment_type_code\nGROUP BY T2.treatment_type_code\nORDER BY SUM(T1.charge_amount) ASC\nLIMIT 1", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.treatment_type_description"}}
{"result": "SELECT t2.treatment_type_description \nFROM Charges AS t1 \nJOIN Treatments AS t2 ON t1.charge_id = t2.treatment_id \nJOIN Treatment_Types AS t3 ON t3.treatment_type_code = t2.treatment_type_code \nGROUP BY t2.treatment_type_code \nORDER BY SUM(t1.charge_amount) ASC \nLIMIT 1", "match": {"match": false, "error": "Query execution failed with error: no such column: t2.treatment_type_description"}}
{"result": "```sql\nSELECT \n    o.owner_id,\n    o.zip_code,\n    SUM(c.charge_amount) AS total_cost\nFROM \n    Owners o\nJOIN \n    Dogs d ON o.owner_id = d.owner_id\nJOIN \n    Treatments t ON d.dog_id = t.dog_id\nJOIN \n    Charges c ON t.cost_of_treatment = c.charge_amount\nGROUP BY \n    o.owner_id, o.zip_code\nORDER BY \n    total_cost DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [], "gt": [[3, "02647"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT o.owner_id, o.zip_code\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nJOIN Treatments t ON d.dog_id = t.dog_id\nGROUP BY o.owner_id, o.zip_code\nORDER BY SUM(t.cost_of_treatment) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [[3, "02647"]]}}
{"result": "SELECT T1.professional_id, T1.cell_number \nFROM Professionals AS T1 \nJOIN (\n  SELECT professional_id \n  FROM Treatments \n  GROUP BY professional_id \n  HAVING COUNT(treatment_type_code)  >= 2 \n) AS T2 \nON T1.professional_id = T2.professional_id", "match": {"match": true, "result": [[4, "00230569697"], [6, "139-321-7313"], [8, "328.842.3792"], [9, "962-983-8109x3509"], [10, "461-801-2600"], [14, "1-185-137-1945x409"]]}}
{"result": "SELECT DISTINCT T1.professional_id, T1.cell_number \nFROM Professionals T1 \nJOIN Treatments T2 ON T1.professional_id = T2.professional_id \nGROUP BY T1.professional_id, T1.cell_number \nHAVING COUNT(T2.treatment_id) >= 2", "match": {"match": true, "result": [[4, "00230569697"], [6, "139-321-7313"], [8, "328.842.3792"], [9, "962-983-8109x3509"], [10, "461-801-2600"], [14, "1-185-137-1945x409"]]}}
{"result": "SELECT T2.first_name, T2.last_name \nFROM Treatments AS T1 \nJOIN Professionals AS T2 ON T1.professional_id = T2.professional_id \nWHERE T1.cost_of_treatment < ( SELECT AVG(cost_of_treatment) FROM Treatments )", "match": {"match": false, "result": [["Domenica", "Jacobs"], ["Vernice", "Tillman"], ["Karley", "Hyatt"], ["Vernice", "Tillman"], ["Ruben", "O'Reilly"], ["Domenica", "Jacobs"], ["Monte", "Kshlerin"], ["Monte", "Kshlerin"]], "gt": [["Taryn", "Braun"], ["Jayson", "Ullrich"], ["Olaf", "Watsica"], ["Vernice", "Tillman"], ["Danny", "Considine"], ["Ruben", "O'Reilly"], ["Velva", "Hayes"], ["Karley", "Hyatt"], ["Monte", "Kshlerin"], ["Domenica", "Jacobs"], ["Brady", "Pouros"], ["Winfield", "Christiansen"], ["Ericka", "Murazik"], ["Sigurd", "Frami"], ["Lesly", "Walter"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.first_name, T2.last_name \nFROM Treatments AS T1 \nJOIN Professionals AS T2 ON T1.professional_id = T2.professional_id \nWHERE T1.cost_of_treatment < ( SELECT AVG(cost_of_treatment) FROM Treatments );", "match": {"match": false, "result": [["Domenica", "Jacobs"], ["Vernice", "Tillman"], ["Karley", "Hyatt"], ["Vernice", "Tillman"], ["Ruben", "O'Reilly"], ["Domenica", "Jacobs"], ["Monte", "Kshlerin"], ["Monte", "Kshlerin"]], "gt": [["Taryn", "Braun"], ["Jayson", "Ullrich"], ["Olaf", "Watsica"], ["Vernice", "Tillman"], ["Danny", "Considine"], ["Ruben", "O'Reilly"], ["Velva", "Hayes"], ["Karley", "Hyatt"], ["Monte", "Kshlerin"], ["Domenica", "Jacobs"], ["Brady", "Pouros"], ["Winfield", "Christiansen"], ["Ericka", "Murazik"], ["Sigurd", "Frami"], ["Lesly", "Walter"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.`date_of_treatment`, T2.`first_name`\nFROM `Treatments` T1\nJOIN `Professionals` T2 ON T1.`professional_id` = T2.`professional_id`", "match": {"match": true, "result": [["2018-03-19 04:39:54", "Monte"], ["2018-03-15 20:25:34", "Domenica"], ["2018-03-08 05:26:23", "Vernice"], ["2018-03-01 04:14:46", "Karley"], ["2018-03-23 13:52:10", "Sigurd"], ["2018-03-11 04:23:15", "Vernice"], ["2018-03-10 11:45:58", "Sigurd"], ["2018-03-24 22:25:58", "Ruben"], ["2018-03-14 19:10:40", "Domenica"], ["2018-02-28 17:09:43", "Velva"], ["2018-03-13 12:22:58", "Danny"], ["2018-03-16 10:27:36", "Monte"], ["2018-02-26 09:08:53", "Karley"], ["2018-03-04 20:33:43", "Monte"], ["2018-03-15 19:10:02", "Ruben"]]}}
{"result": "SELECT T1.date_of_treatment, P.first_name \nFROM Treatments AS T1\nJOIN Professionals AS P ON T1.professional_id = P.professional_id", "match": {"match": true, "result": [["2018-03-19 04:39:54", "Monte"], ["2018-03-15 20:25:34", "Domenica"], ["2018-03-08 05:26:23", "Vernice"], ["2018-03-01 04:14:46", "Karley"], ["2018-03-23 13:52:10", "Sigurd"], ["2018-03-11 04:23:15", "Vernice"], ["2018-03-10 11:45:58", "Sigurd"], ["2018-03-24 22:25:58", "Ruben"], ["2018-03-14 19:10:40", "Domenica"], ["2018-02-28 17:09:43", "Velva"], ["2018-03-13 12:22:58", "Danny"], ["2018-03-16 10:27:36", "Monte"], ["2018-02-26 09:08:53", "Karley"], ["2018-03-04 20:33:43", "Monte"], ["2018-03-15 19:10:02", "Ruben"]]}}
{"result": "SELECT T1.cost_of_treatment, T3.treatment_type_description \nFROM Treatments AS T1 \nJOIN Treatment_Types AS T3 \nON T1.treatment_type_code = T3.treatment_type_code", "match": {"match": true, "result": [[567, "Take for a Walk"], [147, "Vaccination"], [429, "Physical examination"], [266, "Vaccination"], [668, "Vaccination"], [313, "Physical examination"], [852, "Physical examination"], [407, "Physical examination"], [139, "Take for a Walk"], [681, "Take for a Walk"], [514, "Vaccination"], [428, "Physical examination"], [945, "Vaccination"], [349, "Take for a Walk"], [656, "Take for a Walk"]]}}
{"result": "SELECT T1.cost_of_treatment, T2.treatment_type_description \nFROM Treatments AS T1 \nJOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code", "match": {"match": true, "result": [[567, "Take for a Walk"], [147, "Vaccination"], [429, "Physical examination"], [266, "Vaccination"], [668, "Vaccination"], [313, "Physical examination"], [852, "Physical examination"], [407, "Physical examination"], [139, "Take for a Walk"], [681, "Take for a Walk"], [514, "Vaccination"], [428, "Physical examination"], [945, "Vaccination"], [349, "Take for a Walk"], [656, "Take for a Walk"]]}}
{"result": "```sql\nSELECT o.first_name, o.last_name, d.size_code \nFROM Owners o \nJOIN Dogs d ON o.owner_id = d.owner_id;\n```", "match": {"match": true, "result": [["Jaclyn", "Stoltenberg", "LGE"], ["Gay", "Feil", "LGE"], ["Nora", "Haley", "MED"], ["Rachelle", "Funk", "LGE"], ["Emelie", "Mertz", "MED"], ["Johann", "Fisher", "MED"], ["Jaclyn", "Stoltenberg", "MED"], ["Rachelle", "Funk", "SML"], ["Melisa", "DuBuque", "MED"], ["Kade", "Rippin", "MED"], ["Cindy", "Schmitt", "LGE"], ["Orlando", "Price", "MED"], ["Rolando", "Prohaska", "SML"], ["Rachelle", "Funk", "MED"], ["Lorenz", "Nicolas", "MED"]]}}
{"result": "SELECT o.first_name, o.last_name, d.size_code\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id", "match": {"match": true, "result": [["Jaclyn", "Stoltenberg", "LGE"], ["Gay", "Feil", "LGE"], ["Nora", "Haley", "MED"], ["Rachelle", "Funk", "LGE"], ["Emelie", "Mertz", "MED"], ["Johann", "Fisher", "MED"], ["Jaclyn", "Stoltenberg", "MED"], ["Rachelle", "Funk", "SML"], ["Melisa", "DuBuque", "MED"], ["Kade", "Rippin", "MED"], ["Cindy", "Schmitt", "LGE"], ["Orlando", "Price", "MED"], ["Rolando", "Prohaska", "SML"], ["Rachelle", "Funk", "MED"], ["Lorenz", "Nicolas", "MED"]]}}
{"result": "SELECT o.first_name, d.name \nFROM Owners o \nJOIN Dogs d ON o.owner_id = d.owner_id;", "match": {"match": true, "result": [["Jaclyn", "Kacey"], ["Gay", "Hipolito"], ["Nora", "Mavis"], ["Rachelle", "Houston"], ["Emelie", "Jeffrey"], ["Johann", "Merritt"], ["Jaclyn", "Narciso"], ["Rachelle", "George"], ["Melisa", "Bessie"], ["Kade", "Troy"], ["Cindy", "Betty"], ["Orlando", "Holden"], ["Rolando", "Jesus"], ["Rachelle", "Lyric"], ["Lorenz", "Evangeline"]]}}
{"result": "SELECT O.first_name, D.name \nFROM Owners O \nJOIN Dogs D ON O.owner_id = D.owner_id", "match": {"match": true, "result": [["Jaclyn", "Kacey"], ["Gay", "Hipolito"], ["Nora", "Mavis"], ["Rachelle", "Houston"], ["Emelie", "Jeffrey"], ["Johann", "Merritt"], ["Jaclyn", "Narciso"], ["Rachelle", "George"], ["Melisa", "Bessie"], ["Kade", "Troy"], ["Cindy", "Betty"], ["Orlando", "Holden"], ["Rolando", "Jesus"], ["Rachelle", "Lyric"], ["Lorenz", "Evangeline"]]}}
{"result": "SELECT T1.name, T2.date_of_treatment \nFROM Dogs T1 \nJOIN Treatments T2 ON T1.dog_id = T2.dog_id \nJOIN Breeds T3 ON T1.breed_code = T3.breed_code \nWHERE T3.breed_name = (SELECT breed_name FROM Breeds ORDER BY COUNT(DISTINCT dog_id) LIMIT 1)", "match": {"match": false, "error": "Query execution failed with error: no such column: dog_id"}}
{"result": "SELECT d.name, t.date_of_treatment \nFROM Dogs d \nJOIN Treatments t ON d.dog_id = t.dog_id \nJOIN Breeds b ON d.breed_code = b.breed_code \nJOIN ( SELECT breed_code, COUNT(*) as count \n       FROM Dogs \n       GROUP BY breed_code \n     ) as breed_count ON b.breed_code = breed_count.breed_code \nWHERE breed_count.count = ( SELECT MIN(count) \n                           FROM ( SELECT breed_code, COUNT(*) as count \n                                 FROM Dogs \n                                 GROUP BY breed_code \n                               ) as breed_count", "match": {"match": false, "error": "Query execution failed with error: incomplete input"}}
{"result": "SELECT o.first_name, d.name \nFROM Owners o \nINNER JOIN Dogs d ON o.owner_id = d.owner_id \nWHERE o.state = 'VA';", "match": {"match": false, "result": [], "gt": [["Melisa", "Bessie"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT o.first_name, d.name \nFROM Owners o \nJOIN Dogs d ON o.owner_id = d.owner_id \nWHERE o.state = 'Virginia';", "match": {"match": true, "result": [["Melisa", "Bessie"]]}}
{"result": "SELECT T1.date_arrived, T1.date_departed \nFROM Dogs AS T1 \nJOIN Treatments AS T2 ON T1.dog_id = T2.dog_id", "match": {"match": false, "result": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "gt": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.date_arrived, T1.date_departed \nFROM Dogs T1 \nJOIN Treatments T2 ON T1.dog_id = T2.dog_id", "match": {"match": false, "result": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "gt": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.last_name \nFROM Owners AS T1 \nJOIN Dogs AS T2 ON T1.owner_id = T2.owner_id \nORDER BY T2.date_of_birth DESC \nLIMIT 1;", "match": {"match": false, "result": [["Mertz"]], "gt": [["Feil"], ["Fisher"], ["Rippin"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T3.last_name \nFROM Dogs AS T1 \nJOIN Owners AS T2 ON T1.owner_id = T2.owner_id \nJOIN ( SELECT owner_id, MIN(age) as youngest_age FROM Dogs GROUP BY owner_id ) AS T3 ON T2.owner_id = T3.owner_id", "match": {"match": false, "error": "Query execution failed with error: no such column: T3.last_name"}}
{"result": "SELECT email_address \nFROM Professionals \nWHERE state = 'HI' OR state = 'WI'", "match": {"match": false, "result": [], "gt": [["uboehm@example.org"], ["mekhi.little@example.org"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT email_address \nFROM Professionals \nWHERE state IN ('HI', 'WI');", "match": {"match": false, "result": [], "gt": [["uboehm@example.org"], ["mekhi.little@example.org"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT date_arrived, date_departed \nFROM Dogs", "match": {"match": true, "result": [["2017-09-08 20:10:13", "2018-03-25 06:58:44"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-25 10:14:05", "2018-03-25 10:25:46"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-10-25 00:55:34", "2018-03-25 04:50:22"], ["2017-04-15 09:25:31", "2018-03-25 13:07:04"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-10-16 20:06:21", "2018-03-25 02:47:40"], ["2018-01-17 11:44:16", "2018-03-25 06:46:07"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-07-25 15:19:07", "2018-03-25 15:05:16"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"]]}}
{"result": "SELECT date_arrived, date_departed\nFROM Dogs;", "match": {"match": true, "result": [["2017-09-08 20:10:13", "2018-03-25 06:58:44"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-25 10:14:05", "2018-03-25 10:25:46"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-10-25 00:55:34", "2018-03-25 04:50:22"], ["2017-04-15 09:25:31", "2018-03-25 13:07:04"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-10-16 20:06:21", "2018-03-25 02:47:40"], ["2018-01-17 11:44:16", "2018-03-25 06:46:07"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-07-25 15:19:07", "2018-03-25 15:05:16"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"]]}}
{"result": "SELECT COUNT(DISTINCT t.dog_id) \nFROM Treatments t;", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(T1.dog_id) \nFROM Treatments AS T1", "match": {"match": false, "result": [[15]], "gt": [[9]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT professional_id) \nFROM Treatments", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT COUNT(DISTINCT professional_id) \nFROM Treatments", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT \n    role_code,\n    street,\n    city,\n    state\nFROM \n    Professionals\nWHERE \n    city LIKE '%West%';", "match": {"match": true, "result": [["Employee", "6915 Oberbrunner Point Suite 491\nGleasonville, LA ", "West Heidi", "Indiana"]]}}
{"result": "SELECT T1.role_code, T1.street, T1.city, T1.state \nFROM Professionals AS T1 \nWHERE T1.city LIKE '%West%'", "match": {"match": true, "result": [["Employee", "6915 Oberbrunner Point Suite 491\nGleasonville, LA ", "West Heidi", "Indiana"]]}}
{"result": "SELECT first_name, last_name, email_address\nFROM Owners\nWHERE state LIKE '%North%'", "match": {"match": true, "result": [["Johann", "Fisher", "zboncak.madonna@example.net"], ["Cindy", "Schmitt", "wpfeffer@example.net"]]}}
{"result": "SELECT first_name, last_name, email_address \nFROM Owners \nWHERE state LIKE '%North%';", "match": {"match": true, "result": [["Johann", "Fisher", "zboncak.madonna@example.net"], ["Cindy", "Schmitt", "wpfeffer@example.net"]]}}
{"result": "SELECT COUNT(*) \nFROM Dogs \nWHERE age < (SELECT AVG(age) FROM Dogs);", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(*) \nFROM Dogs \nWHERE age < ( SELECT AVG(age) FROM Dogs );", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT T1.cost_of_treatment \nFROM Treatments AS T1 \nJOIN ( SELECT dog_id, MAX(date_of_treatment) AS max_date \n        FROM Treatments \n        GROUP BY dog_id ) AS T2 \nON T1.dog_id = T2.dog_id AND T1.date_of_treatment = T2.max_date", "match": {"match": false, "result": [[567], [147], [668], [313], [407], [514], [428], [945], [656]], "gt": [[407]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(cost_of_treatment) FROM Treatments", "match": {"match": false, "result": [[945]], "gt": [[407]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(dog_id) \nFROM `Dogs` \nLEFT JOIN `Treatments` \nON `Dogs`.dog_id = `Treatments`.dog_id \nWHERE `Treatments`.dog_id IS NULL", "match": {"match": false, "error": "Query execution failed with error: ambiguous column name: dog_id"}}
{"result": "SELECT COUNT(DISTINCT dog_id) \nFROM Treatments", "match": {"match": false, "result": [[9]], "gt": [[6]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) \nFROM Owners \nWHERE owner_id NOT IN (SELECT owner_id FROM Dogs);", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(`owner_id`) \nFROM `Dogs` \nWHERE `owner_id` IS NULL", "match": {"match": false, "result": [[0]], "gt": [[3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) \nFROM Professionals \nWHERE professional_id NOT IN (\n  SELECT professional_id \n  FROM Treatments \n);", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT COUNT(*) \nFROM Professionals p \nLEFT JOIN Treatments t ON p.professional_id = t.professional_id \nWHERE t.treatment_id IS NULL;", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT name, age, weight \nFROM Dogs \nWHERE abandoned_yn = '1';", "match": {"match": true, "result": [["Kacey", "6", "7.57"], ["Lyric", "4", "4.36"], ["Evangeline", "1", "4.01"]]}}
{"result": "SELECT name, age, weight \nFROM Dogs \nWHERE abandoned_yn = '1';", "match": {"match": true, "result": [["Kacey", "6", "7.57"], ["Lyric", "4", "4.36"], ["Evangeline", "1", "4.01"]]}}
{"result": "SELECT AVG(age) FROM Dogs", "match": {"match": true, "result": [[5.066666666666666]]}}
{"result": "SELECT CAST(SUM(`age`) AS DECIMAL(10,2)) / COUNT(`age`) \nFROM `Dogs`;", "match": {"match": false, "result": [[5]], "gt": [[5.066666666666666]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(age) FROM Dogs", "match": {"match": true, "result": [["9"]]}}
{"result": "SELECT MAX(SUBSTR(age, 1, INSTR(age, '-'))) AS oldest_dog_age\nFROM Dogs;", "match": {"match": false, "result": [[""]], "gt": [["9"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT charge_type, charge_amount FROM Charges", "match": {"match": true, "result": [["Daily Accommodation", 98], ["Drugs", 322], ["Health Check", 640]]}}
{"result": "SELECT charge_type, charge_amount \nFROM Charges;", "match": {"match": true, "result": [["Daily Accommodation", 98], ["Drugs", 322], ["Health Check", 640]]}}
{"result": "SELECT `charge_type`, MAX(`charge_amount`) FROM Charges GROUP BY `charge_type`", "match": {"match": false, "result": [["Daily Accommodation", 98], ["Drugs", 322], ["Health Check", 640]], "gt": [[640]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(`charge_amount`) \nFROM `Charges`", "match": {"match": true, "result": [[640]]}}
{"result": "SELECT email_address, cell_number, home_phone \nFROM Professionals", "match": {"match": true, "result": [["deanna.schuster@example.com", "(275)939-2435x80863", "+71(6)2898266914"], ["lucile.shanahan@example.org", "889-940-2676", "+02(1)0259033559"], ["uboehm@example.org", "(369)908-7311x065", "325-155-0801x7005"], ["lourdes.lowe@example.net", "00230569697", "312.216.3352"], ["mekhi.little@example.org", "011.193.9081x3186", "1-609-566-2752x25197"], ["jacynthe.mclaughlin@example.net", "139-321-7313", "+43(5)1132733868"], ["lambert62@example.org", "499-434-0215x1628", "022.529.0550x1319"], ["goyette.roosevelt@example.net", "328.842.3792", "891.475.2256"], ["schneider.kathryne@example.org", "962-983-8109x3509", "320-508-6023"], ["jerrod.bahringer@example.org", "461-801-2600", "(230)338-3342x585"], ["west.eula@example.net", "609-405-2990", "(920)304-4499x59146"], ["marquardt.furman@example.org", "1-181-670-9466", "246-951-0080x76716"], ["delphine29@example.com", "880-659-7577x736", "346.594.3739"], ["cole.margarita@example.org", "1-185-137-1945x409", "971.048.3763x9404"], ["jeichmann@example.com", "1-258-285-4707x8020", "1-138-287-3775"]]}}
{"result": "SELECT `email_address`, `cell_number`, `home_phone`\nFROM `Professionals`", "match": {"match": true, "result": [["deanna.schuster@example.com", "(275)939-2435x80863", "+71(6)2898266914"], ["lucile.shanahan@example.org", "889-940-2676", "+02(1)0259033559"], ["uboehm@example.org", "(369)908-7311x065", "325-155-0801x7005"], ["lourdes.lowe@example.net", "00230569697", "312.216.3352"], ["mekhi.little@example.org", "011.193.9081x3186", "1-609-566-2752x25197"], ["jacynthe.mclaughlin@example.net", "139-321-7313", "+43(5)1132733868"], ["lambert62@example.org", "499-434-0215x1628", "022.529.0550x1319"], ["goyette.roosevelt@example.net", "328.842.3792", "891.475.2256"], ["schneider.kathryne@example.org", "962-983-8109x3509", "320-508-6023"], ["jerrod.bahringer@example.org", "461-801-2600", "(230)338-3342x585"], ["west.eula@example.net", "609-405-2990", "(920)304-4499x59146"], ["marquardt.furman@example.org", "1-181-670-9466", "246-951-0080x76716"], ["delphine29@example.com", "880-659-7577x736", "346.594.3739"], ["cole.margarita@example.org", "1-185-137-1945x409", "971.048.3763x9404"], ["jeichmann@example.com", "1-258-285-4707x8020", "1-138-287-3775"]]}}
{"result": "SELECT DISTINCT b.breed_name, s.size_description \nFROM Breeds b \nINNER JOIN Dogs d ON b.breed_code = d.breed_code \nINNER JOIN Sizes s ON d.size_code = s.size_code", "match": {"match": false, "result": [["Eskimo", "Large"], ["Bulldog", "Large"], ["Bulldog", "Medium"], ["Husky", "Medium"], ["Eskimo", "Small"], ["Husky", "Small"], ["Eskimo", "Medium"]], "gt": [["ESK", "LGE"], ["BUL", "LGE"], ["BUL", "MED"], ["HUS", "MED"], ["ESK", "SML"], ["HUS", "SML"], ["ESK", "MED"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT breed_code, size_code \nFROM Dogs", "match": {"match": true, "result": [["ESK", "LGE"], ["BUL", "LGE"], ["BUL", "MED"], ["HUS", "MED"], ["ESK", "SML"], ["HUS", "SML"], ["ESK", "MED"]]}}
{"result": "SELECT P.first_name, TT.treatment_type_description \nFROM Professionals P \nJOIN Treatments T ON P.professional_id = T.professional_id \nJOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code", "match": {"match": false, "result": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Vernice", "Physical examination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Karley", "Vaccination"], ["Monte", "Take for a Walk"], ["Ruben", "Take for a Walk"]], "gt": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Ruben", "Take for a Walk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT p.first_name, tt.treatment_type_description \nFROM Professionals p \nJOIN Treatments t ON p.professional_id = t.professional_id \nJOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code", "match": {"match": false, "result": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Vernice", "Physical examination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Karley", "Vaccination"], ["Monte", "Take for a Walk"], ["Ruben", "Take for a Walk"]], "gt": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Ruben", "Take for a Walk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(Singer_ID) FROM singer", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT COUNT(\"Singer_ID\") FROM \"singer\";", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "match": {"match": true, "result": [["Abigail Johnson"], ["Susanne Klatten"], ["Gina Rinehart"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Alice Walton"], ["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "match": {"match": true, "result": [["Abigail Johnson"], ["Susanne Klatten"], ["Gina Rinehart"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Alice Walton"], ["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT Birth_Year, Citizenship FROM singer", "match": {"match": true, "result": [[1944.0, "France"], [1948.0, "United States"], [1949.0, "United States"], [1942.0, "Chile"], [1940.0, "United States"], [1953.0, "Australia"], [1962.0, "Germany"], [1961.0, "United States"]]}}
{"result": "SELECT Birth_Year, Citizenship FROM singer", "match": {"match": true, "result": [[1944.0, "France"], [1948.0, "United States"], [1949.0, "United States"], [1942.0, "Chile"], [1940.0, "United States"], [1953.0, "Australia"], [1962.0, "Germany"], [1961.0, "United States"]]}}
{"result": "SELECT Name FROM singer WHERE Citizenship != 'France'", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]]}}
{"result": "SELECT Name \nFROM singer \nWHERE Citizenship != 'French';", "match": {"match": false, "result": [["Liliane Bettencourt"], ["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]], "gt": [["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"]]}}
{"result": "SELECT Name \nFROM singer \nWHERE Birth_Year = 1948 OR Birth_Year = 1949", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"]]}}
{"result": "SELECT Name \nFROM singer \nORDER BY Net_Worth_Millions DESC \nLIMIT 1;", "match": {"match": true, "result": [["Liliane Bettencourt"]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "match": {"match": true, "result": [["Liliane Bettencourt"]]}}
{"result": "SELECT \"Citizenship\", COUNT(\"Singer_ID\") FROM \"singer\" GROUP BY \"Citizenship\";", "match": {"match": true, "result": [["Australia", 1], ["Chile", 1], ["France", 1], ["Germany", 1], ["United States", 4]]}}
{"result": "SELECT Citizenship, COUNT(*) as SingerCount\nFROM singer\nGROUP BY Citizenship", "match": {"match": true, "result": [["Australia", 1], ["Chile", 1], ["France", 1], ["Germany", 1], ["United States", 4]]}}
{"result": "SELECT Citizenship \nFROM singer \nGROUP BY Citizenship \nORDER BY COUNT(Citizenship) DESC \nLIMIT 1;", "match": {"match": true, "result": [["United States"]]}}
{"result": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(Citizenship) DESC LIMIT 1", "match": {"match": true, "result": [["United States"]]}}
{"result": "SELECT Citizenship, MAX(Net_Worth_Millions) \nFROM singer \nGROUP BY Citizenship", "match": {"match": true, "result": [["Australia", 17.0], ["Chile", 17.4], ["France", 30.0], ["Germany", 14.3], ["United States", 28.8]]}}
{"result": "SELECT Citizenship, MAX (Net_Worth_Millions) FROM singer GROUP BY Citizenship", "match": {"match": true, "result": [["Australia", 17.0], ["Chile", 17.4], ["France", 30.0], ["Germany", 14.3], ["United States", 28.8]]}}
{"result": "SELECT T2.Title, T1.Name \nFROM singer AS T1 \nJOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID", "match": {"match": true, "result": [["Do They Know It's Christmas", "Liliane Bettencourt"], ["F**k It (I Don't Want You Back)", "Liliane Bettencourt"], ["Cha Cha Slide", "Christy Walton"], ["Call on Me", "Iris Fontbona"], ["Yeah", "Christy Walton"], ["All This Time", "Gina Rinehart"], ["Left Outside Alone", "Jacqueline Mars"], ["Mysterious Girl", "Susanne Klatten"]]}}
{"result": "SELECT T2.Title, T1.Name \nFROM singer AS T1 \nINNER JOIN song AS T2 \nON T1.Singer_ID = T2.Singer_ID", "match": {"match": true, "result": [["Do They Know It's Christmas", "Liliane Bettencourt"], ["F**k It (I Don't Want You Back)", "Liliane Bettencourt"], ["Cha Cha Slide", "Christy Walton"], ["Call on Me", "Iris Fontbona"], ["Yeah", "Christy Walton"], ["All This Time", "Gina Rinehart"], ["Left Outside Alone", "Jacqueline Mars"], ["Mysterious Girl", "Susanne Klatten"]]}}
{"result": "SELECT DISTINCT T1.Name \nFROM singer AS T1 \nINNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID \nWHERE T2.Sales > 300000", "match": {"match": true, "result": [["Liliane Bettencourt"], ["Christy Walton"], ["Iris Fontbona"]]}}
{"result": "SELECT DISTINCT T1.Name \nFROM singer AS T1 \nINNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID \nWHERE T2.Sales > 300000", "match": {"match": true, "result": [["Liliane Bettencourt"], ["Christy Walton"], ["Iris Fontbona"]]}}
{"result": "SELECT T1.Name \nFROM singer AS T1 \nJOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID \nGROUP BY T1.Singer_ID \nHAVING COUNT(T2.Singer_ID) > 1", "match": {"match": false, "result": [["Liliane Bettencourt"], ["Christy Walton"]], "gt": [["Christy Walton"], ["Liliane Bettencourt"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name \nFROM singer AS T1 \nJOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID \nGROUP BY T1.Name, T2.Singer_ID \nHAVING COUNT(T2.Singer_ID) > 1", "match": {"match": true, "result": [["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT T1.Name, SUM(T2.Sales) \nFROM singer AS T1 \nJOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID \nGROUP BY T1.Name", "match": {"match": true, "result": [["Christy Walton", 651421.0], ["Gina Rinehart", 292000.0], ["Iris Fontbona", 335000.0], ["Jacqueline Mars", 275000.0], ["Liliane Bettencourt", 1646407.0], ["Susanne Klatten", 261000.0]]}}
{"result": "SELECT Name, SUM(Sales) FROM song GROUP BY Singer_ID", "match": {"match": false, "error": "Query execution failed with error: no such column: Name"}}
{"result": "SELECT Name \nFROM singer \nWHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);", "match": {"match": true, "result": [["Alice Walton"], ["Abigail Johnson"]]}}
{"result": "SELECT T1.Name \nFROM singer AS T1 \nLEFT JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID \nWHERE T2.Singer_ID IS NULL", "match": {"match": true, "result": [["Alice Walton"], ["Abigail Johnson"]]}}
{"result": "SELECT Citizenship \nFROM singer \nWHERE Birth_Year < 1945 OR Birth_Year > 1955", "match": {"match": false, "result": [["France"], ["Chile"], ["United States"], ["Germany"], ["United States"]], "gt": [["United States"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Citizenship \nFROM singer \nWHERE Birth_Year < 1945 OR Birth_Year > 1955 \nGROUP BY Citizenship;", "match": {"match": false, "result": [["Chile"], ["France"], ["Germany"], ["United States"]], "gt": [["United States"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(`feature_id`) FROM `Other_Available_Features`;", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT T2.feature_type_name \nFROM Other_Available_Features AS T1 \nJOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code \nWHERE T1.feature_name = 'AirCon';", "match": {"match": true, "result": [["Amenity, eg Pool."]]}}
{"result": "```sql\nSELECT p.property_type_description, pt.property_name\nFROM Properties p\nJOIN Ref_Property_Types pt ON p.property_type_code = pt.property_type_code;\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: p.property_type_description"}}
{"result": "SELECT `property_name` \nFROM `Properties` \nWHERE `room_count` > 1 AND (`property_type_code` = 'HSE' OR `property_type_code` = 'APT');", "match": {"match": false, "result": [], "gt": [["longacre"], ["parc coliseum"], ["parc east"], ["park"], ["renoir"], ["ten tower"], ["the cole"], ["vogue"]], "error": "Query result does not match ground truth."}}

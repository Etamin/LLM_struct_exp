
{"result": "SELECT COUNT(Singer_ID) FROM singer", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(Singer_ID) FROM singer", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT Name, Country, Age \nFROM singer \nORDER BY Age DESC;", "match": {"match": true, "result": [["Joe Sharp", "Netherlands", 52], ["John Nizinik", "France", 43], ["Rose White", "France", 41], ["Timbaland", "United States", 32], ["Justin Brown", "France", 29], ["Tribal King", "France", 25]]}}
{"result": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC", "match": {"match": true, "result": [["Joe Sharp", "Netherlands", 52], ["John Nizinik", "France", 43], ["Rose White", "France", 41], ["Timbaland", "United States", 32], ["Justin Brown", "France", 29], ["Tribal King", "France", 25]]}}
{"result": "SELECT AVG(\"Age\") , MIN(\"Age\") , MAX(\"Age\") \nFROM singer \nWHERE \"Country\" = 'France';", "match": {"match": true, "result": [[34.5, 25, 43]]}}
{"result": "SELECT AVG(Age) , MIN(Age) , MAX(Age) \nFROM singer \nWHERE Country = 'France';", "match": {"match": true, "result": [[34.5, 25, 43]]}}
{"result": "SELECT T2.`Song_Name`, T2.`Song_release_year` \nFROM singer_in_concert AS T1 \nJOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID \nWHERE T2.`Age` = ( SELECT MIN(T3.`Age`) FROM singer AS T3 );", "match": {"match": false, "result": [["Love", "2016"], ["Love", "2016"]], "gt": [["Love", "2016"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.`Song_Name`, T2.`Song_release_year` \nFROM singer_in_concert AS T1 \nJOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID \nJOIN (\n    SELECT Singer_ID, MIN(Age) as MinAge \n    FROM singer \n    GROUP BY Singer_ID\n) AS T3 ON T2.Singer_ID = T3.Singer_ID AND T2.Age = T3.MinAge", "match": {"match": false, "result": [["Dangerous", "2008"], ["Hey Oh", "2013"], ["Gentleman", "2014"], ["Hey Oh", "2013"], ["Love", "2016"], ["Gentleman", "2014"], ["Sun", "2003"], ["Love", "2016"], ["Hey Oh", "2013"], ["Dangerous", "2008"]], "gt": [["Love", "2016"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T2.Country \nFROM singer_in_concert AS T1 \nJOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID \nWHERE T2.Age > 20", "match": {"match": false, "result": [["United States"], ["France"]], "gt": [["Netherlands"], ["United States"], ["France"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T2.Country \nFROM singer_in_concert AS T1 \nJOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID \nWHERE T2.Age > 20", "match": {"match": false, "result": [["United States"], ["France"]], "gt": [["Netherlands"], ["United States"], ["France"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \"Country\", COUNT(\"Singer_ID\") \nFROM \"singer\" \nGROUP BY \"Country\";", "match": {"match": true, "result": [["France", 4], ["Netherlands", 1], ["United States", 1]]}}
{"result": "SELECT Country ,  COUNT(Singer_ID) AS Number_of_Singers\nFROM singer\nGROUP BY Country", "match": {"match": true, "result": [["France", 4], ["Netherlands", 1], ["United States", 1]]}}
{"result": "SELECT T1.Song_Name FROM singer_in_concert AS T2 \nJOIN singer AS T1 ON T2.Singer_ID = T1.Singer_ID \nJOIN concert AS T3 ON T2.concert_ID = T3.concert_ID \nJOIN stadium AS T4 ON T3.Stadium_ID = T4.Stadium_ID \nWHERE T1.Age > (SELECT AVG(Age) FROM singer)", "match": {"match": false, "result": [["Gentleman"], ["Gentleman"], ["Sun"]], "gt": [["You"], ["Sun"], ["Gentleman"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.`Song_Name` \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 ON T1.`Singer_ID` = T2.`Singer_ID` \nJOIN concert AS T3 ON T2.`concert_ID` = T3.`concert_ID` \nJOIN stadium AS T4 ON T3.`Stadium_ID` = T4.`Stadium_ID` \nWHERE T1.`Age` > ( SELECT AVG(`Age`) FROM singer )", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Song_Name"}}
{"result": "SELECT Location, Name \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000", "match": {"match": true, "result": []}}
{"result": "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000", "match": {"match": true, "result": []}}
{"result": "SELECT MAX(Capacity), AVG(Average) FROM stadium", "match": {"match": false, "result": [[52500, 917.8888888888889]], "gt": [[52500, 730]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(\"Capacity\") , MAX(\"Capacity\") FROM \"stadium\"", "match": {"match": true, "result": [[10621.666666666666, 52500]]}}
{"result": "SELECT Name, Capacity FROM stadium WHERE Average = ( SELECT MAX(Average) FROM stadium );", "match": {"match": true, "result": [["Stark's Park", 10104]]}}
{"result": "SELECT Name, Capacity \nFROM stadium \nORDER BY Average DESC \nLIMIT 1;", "match": {"match": true, "result": [["Stark's Park", 10104]]}}
{"result": "SELECT COUNT(concert_ID) \nFROM concert \nWHERE YEAR = '2014' OR YEAR = '2015'", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(concert_ID) \nFROM concert \nWHERE YEAR = '2014' OR YEAR = '2015'", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT T3.Name, COUNT(T1.concert_ID) \nFROM concert AS T1 \nJOIN stadium AS T3 ON T1.Stadium_ID = T3.Stadium_ID \nGROUP BY T3.Name", "match": {"match": false, "result": [["Balmoor", 1], ["Glebe Park", 1], ["Recreation Park", 1], ["Somerset Park", 2], ["Stark's Park", 1]], "gt": [["Stark's Park", 1], ["Glebe Park", 1], ["Somerset Park", 2], ["Recreation Park", 1], ["Balmoor", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(T2.concert_ID), T1.Name \nFROM stadium AS T1 \nJOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID", "match": {"match": false, "result": [[6, "Stark's Park"]], "gt": [["Stark's Park", 1], ["Glebe Park", 1], ["Somerset Park", 2], ["Recreation Park", 1], ["Balmoor", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name, T1.Capacity\nFROM stadium AS T1\nJOIN (\n  SELECT T3.Stadium_ID, COUNT(*) as count\n  FROM concert AS T2\n  JOIN singer_in_concert AS T3 ON T2.concert_ID = T3.concert_ID\n  WHERE T2.Year >= '2014'\n  GROUP BY T3.Stadium_ID\n) AS T4\nON T1.Stadium_ID = T4.Stadium_ID\nORDER BY T4.count DESC\nLIMIT 1;", "match": {"match": false, "error": "Query execution failed with error: no such column: T3.Stadium_ID"}}
{"result": "SELECT T1.Name, T1.Capacity \nFROM stadium AS T1 \nJOIN (\n  SELECT Stadium_ID \n  FROM concert \n  WHERE YEAR > '2013' \n  GROUP BY Stadium_ID \n  ORDER BY COUNT(concert_ID) DESC \n  LIMIT 1\n) AS T2 \nON T1.Stadium_ID = T2.Stadium_ID", "match": {"match": true, "result": [["Somerset Park", 11998]]}}
{"result": "SELECT YEAR \nFROM concert \nGROUP BY YEAR \nORDER BY COUNT(Stadium_ID) DESC \nLIMIT 1;", "match": {"match": true, "result": [["2015"]]}}
{"result": "SELECT T.Year \nFROM ( \n    SELECT Year, COUNT(concert_ID) AS total_concerts, ROW_NUMBER() \n    OVER (ORDER BY COUNT(concert_ID) DESC) AS row_num \n    FROM concert \n    GROUP BY Year \n) T \nWHERE T.row_num = 1", "match": {"match": true, "result": [["2015"]]}}
{"result": "SELECT T1.Name \nFROM stadium AS T1 \nLEFT JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nWHERE T2.Stadium_ID IS NULL", "match": {"match": true, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"]]}}
{"result": "SELECT Name \nFROM stadium \nWHERE Stadium_ID NOT IN ( SELECT Stadium_ID FROM concert );", "match": {"match": true, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"]]}}
{"result": "SELECT T1.Country \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID \nJOIN concert AS T3 ON T2.concert_ID = T3.concert_ID \nWHERE T1.Age > 40 AND T1.Age < 30;", "match": {"match": false, "result": [], "gt": [["France"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Name \nFROM concert AS T1 \nJOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nWHERE T1.Year != '2014'", "match": {"match": false, "result": [["Somerset Park"], ["Balmoor"], ["Recreation Park"]], "gt": [["Balmoor"], ["Bayview Stadium"], ["Forthbank Stadium"], ["Gayfield Park"], ["Hampden Park"], ["Recreation Park"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name \nFROM stadium \nWHERE Stadium_ID NOT IN (\n  SELECT Stadium_ID \n  FROM concert \n  WHERE YEAR = '2014'\n);", "match": {"match": false, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"], ["Recreation Park"], ["Balmoor"]], "gt": [["Balmoor"], ["Bayview Stadium"], ["Forthbank Stadium"], ["Gayfield Park"], ["Hampden Park"], ["Recreation Park"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT c.`concert_Name`, c.Theme, COUNT(s.`Singer_ID`) as num_singers\nFROM concert c\nJOIN singer_in_concert s ON c.`concert_ID` = s.`concert_ID`\nGROUP BY c.`concert_ID`", "match": {"match": true, "result": [["Auditions", "Free choice", 3], ["Super bootcamp", "Free choice 2", 2], ["Home Visits", "Bleeding Love", 1], ["Week 1", "Wide Awake", 1], ["Week 1", "Happy Tonight", 2], ["Week 2", "Party All Night", 1]]}}
{"result": "SELECT concert_Name, Theme, COUNT(Singer_ID) \nFROM concert \nJOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID \nGROUP BY concert.concert_ID", "match": {"match": true, "result": [["Auditions", "Free choice", 3], ["Super bootcamp", "Free choice 2", 2], ["Home Visits", "Bleeding Love", 1], ["Week 1", "Wide Awake", 1], ["Week 1", "Happy Tonight", 2], ["Week 2", "Party All Night", 1]]}}
{"result": "SELECT T1.Name, COUNT(T2.concert_ID) FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name", "match": {"match": false, "result": [["John Nizinik", 2], ["Justin Brown", 3], ["Rose White", 1], ["Timbaland", 2], ["Tribal King", 2]], "gt": [["Timbaland", 2], ["Justin Brown", 3], ["Rose White", 1], ["John Nizinik", 2], ["Tribal King", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name, COUNT(T2.concert_ID) \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID \nGROUP BY T1.Name", "match": {"match": false, "result": [["John Nizinik", 2], ["Justin Brown", 3], ["Rose White", 1], ["Timbaland", 2], ["Tribal King", 2]], "gt": [["Timbaland", 2], ["Justin Brown", 3], ["Rose White", 1], ["John Nizinik", 2], ["Tribal King", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name \nFROM singer_in_concert AS T2 \nJOIN concert AS T3 ON T2.concert_ID = T3.concert_ID \nJOIN singer AS T1 ON T2.Singer_ID = T1.Singer_ID \nWHERE T3.Year = '2014'", "match": {"match": true, "result": [["Timbaland"], ["Justin Brown"], ["John Nizinik"], ["Justin Brown"], ["Tribal King"], ["Rose White"]]}}
{"result": "SELECT T3.Name \nFROM concert AS T1 \nJOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID \nJOIN singer AS T3 ON T3.Singer_ID = T2.Singer_ID \nWHERE T1.Year = '2014';", "match": {"match": true, "result": [["Timbaland"], ["Justin Brown"], ["John Nizinik"], ["Justin Brown"], ["Tribal King"], ["Rose White"]]}}
{"result": "SELECT \"Name\", \"Country\" FROM singer_in_concert \nINNER JOIN singer ON singer_in_concert.\"Singer_ID\" = singer.\"Singer_ID\" \nINNER JOIN concert ON singer_in_concert.\"concert_ID\" = concert.\"concert_ID\" \nINNER JOIN stadium ON concert.\"Stadium_ID\" = stadium.\"Stadium_ID\" \nWHERE stadium.\"Stadium_ID\" IS NOT NULL AND singer_in_concert.\"concert_ID\" IS NOT NULL AND singer.\"Song_Name\" LIKE '%Hey%'", "match": {"match": false, "error": "Query execution failed with error: ambiguous column name: Name"}}
{"result": "SELECT T2.Name, T2.Country \nFROM singer_in_concert \nINNER JOIN singer AS T2 ON singer_in_concert.Singer_ID = T2.Singer_ID \nINNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID \nINNER JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID \nINNER JOIN (\n  SELECT singer_id, Song_Name \n  FROM singer \n  WHERE Song_Name LIKE '%Hey%'\n) AS T1 ON T2.Singer_ID = T1.singer_id", "match": {"match": false, "result": [["Justin Brown", "France"], ["Justin Brown", "France"], ["Justin Brown", "France"]], "gt": [["Justin Brown", "France"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name, T1.Location \nFROM stadium AS T1 \nJOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nWHERE T2.Year IN ('2014', '2015')", "match": {"match": false, "result": [["Stark's Park", "Raith Rovers"], ["Somerset Park", "Ayr United"], ["Somerset Park", "Ayr United"], ["Glebe Park", "Brechin City"], ["Balmoor", "Peterhead"], ["Recreation Park", "Alloa Athletic"]], "gt": [["Somerset Park", "Ayr United"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name, T1.Location \nFROM stadium AS T1 \nJOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nWHERE T2.Year IN ('2014', '2015')", "match": {"match": false, "result": [["Stark's Park", "Raith Rovers"], ["Somerset Park", "Ayr United"], ["Somerset Park", "Ayr United"], ["Glebe Park", "Brechin City"], ["Balmoor", "Peterhead"], ["Recreation Park", "Alloa Athletic"]], "gt": [["Somerset Park", "Ayr United"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(T2.concert_ID) \nFROM stadium AS T1 \nJOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nWHERE T1.Capacity = ( SELECT MAX(Capacity) FROM stadium );", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(T2.concert_ID) \nFROM stadium AS T1 \nJOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nWHERE T1.Capacity = ( SELECT MAX(Capacity) FROM stadium );", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(PetID) FROM Pets WHERE weight > 10", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(*)\nFROM Pets\nWHERE weight > 10;", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT weight \nFROM Pets \nWHERE PetType = 'dog' \nORDER BY pet_age \nLIMIT 1;", "match": {"match": true, "result": [[9.3]]}}
{"result": "SELECT weight \nFROM Pets \nWHERE PetType = 'Dog' \nORDER BY pet_age ASC \nLIMIT 1;", "match": {"match": false, "result": [], "gt": [[9.3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT PetType, MAX(weight) AS max_weight\nFROM Pets\nGROUP BY PetType", "match": {"match": false, "result": [["cat", 12.0], ["dog", 13.4]], "gt": [[12.0, "cat"], [13.4, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT PetType, MAX(weight) \nFROM Pets \nGROUP BY PetType", "match": {"match": false, "result": [["cat", 12.0], ["dog", 13.4]], "gt": [[12.0, "cat"], [13.4, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Pets.PetID = Has_Pet.PetID \nWHERE Student.Age > 20", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(*) \nFROM Student s \nJOIN Has_Pet hp ON s.StuID = hp.StuID \nJOIN Pets p ON hp.PetID = p.PetID \nWHERE s.Age > 20;", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(T1.StuID) \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T1.Sex = 'F' AND T3.PetType = 'dog';", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(*) \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Student.Sex = 'F' AND Pets.PetType = 'dog'", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(DISTINCT PetType) \nFROM Pets", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT DISTINCT PetType \nFROM Pets", "match": {"match": false, "result": [["cat"], ["dog"]], "gt": [[2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Fname \nFROM Student AS T1 \nINNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nINNER JOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'cat' OR T3.PetType = 'dog'", "match": {"match": false, "result": [["Linda"], ["Tracy"], ["Tracy"]], "gt": [["Linda"], ["Tracy"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID  = T2.StuID \nJOIN Pets AS T3 ON T2.PetID  = T3.PetID \nWHERE T3.PetType IN ('cat', 'dog');", "match": {"match": false, "result": [["Linda"], ["Tracy"], ["Tracy"]], "gt": [["Linda"], ["Tracy"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Fname \nFROM Student \nWHERE StuID IN (\n  SELECT StuID \n  FROM Has_Pet \n  WHERE PetID IN (\n    SELECT PetID \n    FROM Pets \n    WHERE PetType = 'cat' \n    INTERSECT \n    SELECT PetID \n    FROM Pets \n    WHERE PetType = 'dog'\n  )\n);", "match": {"match": true, "result": []}}
{"result": "SELECT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'Cat' INTERSECT \nSELECT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'Dog';", "match": {"match": true, "result": []}}
{"result": "SELECT T1.Major, T1.Age \nFROM Student AS T1 \nLEFT JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nLEFT JOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType != 'cat'", "match": {"match": false, "result": [[600, 19], [600, 19]], "gt": [[600, 19], [600, 21], [600, 20], [600, 26], [600, 18], [600, 18], [600, 20], [600, 19], [600, 17], [600, 22], [600, 20], [600, 18], [600, 16], [600, 17], [600, 27], [600, 20], [600, 18], [520, 22], [520, 19], [540, 17], [520, 20], [540, 18], [520, 18], [520, 19], [520, 18], [550, 20], [100, 17], [550, 21], [550, 20], [550, 20], [550, 18], [50, 18], [50, 26]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Major, T2.Age \nFROM Pets AS T1 \nJOIN Has_Pet AS T2 ON T1.PetID = T2.PetID \nJOIN Student AS T3 ON T2.StuID = T3.StuID \nWHERE T1.PetType = 'cat';", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Major"}}
{"result": "SELECT StuID \nFROM Student \nLEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nLEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType != 'Cat'", "match": {"match": false, "error": "Query execution failed with error: ambiguous column name: StuID"}}
{"result": "SELECT StuID \nFROM Student \nWHERE StuID NOT IN (\n  SELECT StuID \n  FROM Has_Pet \n  JOIN Pets ON Has_Pet.PetID = Pets.PetID \n  WHERE Pets.PetType = 'Cat'\n);", "match": {"match": false, "result": [[1001], [1002], [1003], [1004], [1005], [1006], [1007], [1008], [1009], [1010], [1011], [1012], [1014], [1015], [1016], [1017], [1018], [1019], [1020], [1021], [1022], [1023], [1024], [1025], [1026], [1027], [1028], [1029], [1030], [1031], [1032], [1033], [1034], [1035]], "gt": [[1002], [1003], [1004], [1005], [1006], [1007], [1008], [1009], [1010], [1011], [1012], [1014], [1015], [1016], [1017], [1018], [1019], [1020], [1021], [1022], [1023], [1024], [1025], [1026], [1027], [1028], [1029], [1030], [1031], [1032], [1033], [1034], [1035]], "error": "Query result does not match ground truth."}}
{"result": "SELECT S.Fname, S.Age \nFROM Student S \nJOIN Has_Pet HP ON S.StuID = HP.StuID \nJOIN Pets P ON HP.PetID = P.PetID \nWHERE P.PetType = 'dog' AND P.PetID NOT IN (SELECT PetID FROM Pets WHERE PetType = 'cat')", "match": {"match": true, "result": [["Tracy", 19], ["Tracy", 19]]}}
{"result": "SELECT Fname \nFROM Student \nWHERE StuID IN (SELECT StuID \n                FROM Has_Pet \n                WHERE PetID IN (SELECT PetID \n                                FROM Pets \n                                WHERE PetType = 'Dog') \n                EXCEPT \n                SELECT StuID \n                FROM Has_Pet \n                WHERE PetID IN (SELECT PetID \n                                FROM Pets \n                                WHERE PetType = 'Cat'))", "match": {"match": false, "result": [], "gt": [["Tracy", 19], ["Tracy", 19]], "error": "Query result does not match ground truth."}}
{"result": "SELECT PetType, weight \nFROM Pets \nORDER BY pet_age \nLIMIT 1;", "match": {"match": true, "result": [["dog", 9.3]]}}
{"result": "SELECT PetType, weight \nFROM Pets \nWHERE pet_age = (SELECT MIN(pet_age) FROM Pets);", "match": {"match": true, "result": [["dog", 9.3]]}}
{"result": "SELECT PetID, weight \nFROM Pets \nWHERE pet_age > 1;", "match": {"match": true, "result": [[2001, 12.0], [2002, 13.4]]}}
{"result": "SELECT PetID, weight \nFROM Pets \nWHERE pet_age > 1", "match": {"match": true, "result": [[2001, 12.0], [2002, 13.4]]}}
{"result": "SELECT PetType, AVG(pet_age) as AverageAge, MAX(pet_age) as MaxAge \nFROM Pets \nGROUP BY PetType", "match": {"match": false, "result": [["cat", 3.0, 3], ["dog", 1.5, 2]], "gt": [[3.0, 3, "cat"], [1.5, 2, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT PetType, AVG(pet_age) AS average_age, MAX(pet_age) AS max_age\nFROM Pets\nGROUP BY PetType", "match": {"match": false, "result": [["cat", 3.0, 3], ["dog", 1.5, 2]], "gt": [[3.0, 3, "cat"], [1.5, 2, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT PetType, AVG(weight) AS AverageWeight \nFROM Pets \nGROUP BY PetType", "match": {"match": false, "result": [["cat", 12.0], ["dog", 11.350000000000001]], "gt": [[12.0, "cat"], [11.350000000000001, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT PetType, AVG(weight) \nFROM Pets \nGROUP BY PetType", "match": {"match": false, "result": [["cat", 12.0], ["dog", 11.350000000000001]], "gt": [[12.0, "cat"], [11.350000000000001, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Fname, T1.Age \nFROM Student AS T1 \nINNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID", "match": {"match": false, "result": [["Linda", 18], ["Tracy", 19], ["Tracy", 19]], "gt": [["Linda", 18], ["Tracy", 19]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT Fname, Age\nFROM Student\nWHERE StuID IN (SELECT StuID FROM Has_Pet);", "match": {"match": true, "result": [["Linda", 18], ["Tracy", 19]]}}
{"result": "SELECT DISTINCT T2.PetID\nFROM Student AS T1\nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID\nWHERE T1.LName = 'Smith'", "match": {"match": true, "result": [[2001]]}}
{"result": "SELECT T1.PetID \nFROM Has_Pet AS T1 \nJOIN Student AS T2 \nON T1.StuID = T2.StuID \nWHERE T2.LName = 'Smith';", "match": {"match": true, "result": [[2001]]}}
{"result": "SELECT StuID, COUNT(*) as NumOfPets \nFROM Has_Pet \nGROUP BY StuID", "match": {"match": false, "result": [[1001, 1], [1002, 2]], "gt": [[1, 1001], [2, 1002]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.StuID, COUNT(*) \nFROM Pets AS T1 \nJOIN Has_Pet AS T2 ON T1.PetID = T2.PetID \nGROUP BY T2.StuID", "match": {"match": false, "result": [[1001, 1], [1002, 2]], "gt": [[1, 1001], [2, 1002]], "error": "Query result does not match ground truth."}}
{"result": "SELECT S.Fname, S.Sex\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nGROUP BY S.StuID\nHAVING COUNT(HP.StuID)  >  1", "match": {"match": true, "result": [["Tracy", "F"]]}}
{"result": "SELECT T1.Fname, T1.Sex\nFROM Student AS T1\nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID\nGROUP BY T1.StuID\nHAVING COUNT(T2.StuID)  >  1", "match": {"match": true, "result": [["Tracy", "F"]]}}
{"result": "SELECT T1.LName \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.pet_age = 3 AND T3.PetType = 'cat';", "match": {"match": true, "result": [["Smith"]]}}
{"result": "SELECT S.LName \nFROM Student S \nJOIN Has_Pet HP ON S.StuID = HP.StuID \nJOIN Pets P ON HP.PetID = P.PetID \nWHERE P.PetType = 'cat' AND P.pet_age = 3;", "match": {"match": true, "result": [["Smith"]]}}
{"result": "SELECT AVG(Age) \nFROM Student \nWHERE StuID NOT IN ( SELECT StuID FROM Has_Pet );", "match": {"match": true, "result": [[19.625]]}}
{"result": "SELECT AVG(Age) \nFROM Student \nWHERE StuID NOT IN (SELECT StuID FROM Has_Pet);", "match": {"match": true, "result": [[19.625]]}}
{"result": "SELECT COUNT(*) FROM employee", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT COUNT(Employee_ID) FROM employee", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT Name \nFROM employee \nORDER BY Age ASC", "match": {"match": true, "result": [["George Chuter"], ["Andrew Sheridan"], ["Lee Mears"], ["Tim Payne"], ["Matt Stevens"], ["Jason Hobson"], ["Steve Borthwick"], ["Louis Deacon"], ["Phil Vickery"], ["Mark Regan"]]}}
{"result": "SELECT Name \nFROM employee \nORDER BY Age ASC;", "match": {"match": true, "result": [["George Chuter"], ["Andrew Sheridan"], ["Lee Mears"], ["Tim Payne"], ["Matt Stevens"], ["Jason Hobson"], ["Steve Borthwick"], ["Louis Deacon"], ["Phil Vickery"], ["Mark Regan"]]}}
{"result": "SELECT City, COUNT(*) FROM employee GROUP BY City", "match": {"match": false, "result": [["Bath", 3], ["Bristol", 3], ["Leicester", 1], ["Sale", 1], ["Wasps", 2]], "gt": [[3, "Bath"], [3, "Bristol"], [1, "Leicester"], [1, "Sale"], [2, "Wasps"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT City, COUNT(*) FROM employee GROUP BY City", "match": {"match": false, "result": [["Bath", 3], ["Bristol", 3], ["Leicester", 1], ["Sale", 1], ["Wasps", 2]], "gt": [[3, "Bath"], [3, "Bristol"], [1, "Leicester"], [1, "Sale"], [2, "Wasps"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.City\nFROM employee AS T1\nJOIN shop AS T2 \nON T1.Shop_ID = T2.Shop_ID\nWHERE T1.Age < 30\nGROUP BY T2.City\nHAVING COUNT(T2.Shop_ID) > 1", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.City"}}
{"result": "SELECT T2.City \nFROM employee AS T1 \nJOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID \nWHERE T1.Age < 30 \nGROUP BY T2.City \nHAVING COUNT(T1.Name) > 1", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.City"}}
{"result": "SELECT COUNT(Shop_ID), Location \nFROM shop \nGROUP BY Location", "match": {"match": true, "result": [[1, "Espoo"], [1, "Helsinki"], [1, "Jakobstad"], [1, "Kotka"], [1, "Kuopio"], [1, "Lahti"], [1, "Mariehamn"], [1, "Turku"], [1, "Valkeakoski"]]}}
{"result": "SELECT Location, COUNT(Shop_ID) FROM shop GROUP BY Location", "match": {"match": false, "result": [["Espoo", 1], ["Helsinki", 1], ["Jakobstad", 1], ["Kotka", 1], ["Kuopio", 1], ["Lahti", 1], ["Mariehamn", 1], ["Turku", 1], ["Valkeakoski", 1]], "gt": [[1, "Espoo"], [1, "Helsinki"], [1, "Jakobstad"], [1, "Kotka"], [1, "Kuopio"], [1, "Lahti"], [1, "Mariehamn"], [1, "Turku"], [1, "Valkeakoski"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Manager_name, District \nFROM shop \nWHERE Number_products = (SELECT MAX(Number_products) FROM shop);", "match": {"match": true, "result": [["Ilkka M\u00e4kel\u00e4", "Lahden Stadion"]]}}
{"result": "SELECT T1.Manager_name, T1.District FROM shop AS T1 INNER JOIN ( SELECT Shop_ID, MAX(Number_products) AS max_products FROM shop GROUP BY Shop_ID ) AS T2 ON T1.Shop_ID = T2.Shop_ID WHERE T1.Number_products = T2.max_products", "match": {"match": false, "result": [["Olli Huttunen", "Tehtaan kentt\u00e4"], ["Antti Muurinen", "Finnair Stadium"], ["Mika Lehkosuo", "Tapiolan Urheilupuisto"], ["Job Dragtsma", "Veritas Stadion"], ["Mika Laurikainen", "Jakobstads Centralplan"], ["Tommi Kautonen", "Arto Tolsa Areena"], ["Kai Nyyss\u00f6nen", "Magnum Areena"], ["Ilkka M\u00e4kel\u00e4", "Lahden Stadion"], ["Pekka Lyyski", "Wikl\u00f6f Holding Arena"]], "gt": [["Ilkka M\u00e4kel\u00e4", "Lahden Stadion"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MIN(`Number_products`) , MAX(`Number_products`) FROM `shop`", "match": {"match": true, "result": [[1600, 15000]]}}
{"result": "SELECT MIN(`Number_products`) , MAX(`Number_products`) FROM shop", "match": {"match": true, "result": [[1600, 15000]]}}
{"result": "SELECT Name, Location, District \nFROM shop \nORDER BY Number_products DESC;", "match": {"match": true, "result": [["FC Lahti", "Lahti", "Lahden Stadion"], ["HJK", "Helsinki", "Finnair Stadium"], ["FC Inter", "Turku", "Veritas Stadion"], ["FC Honka", "Espoo", "Tapiolan Urheilupuisto"], ["FF Jaro", "Jakobstad", "Jakobstads Centralplan"], ["FC KooTeePee", "Kotka", "Arto Tolsa Areena"], ["FC Haka", "Valkeakoski", "Tehtaan kentt\u00e4"], ["KuPS", "Kuopio", "Magnum Areena"], ["IFK Mariehamn", "Mariehamn", "Wikl\u00f6f Holding Arena"]]}}
{"result": "SELECT Name, Location, District \nFROM shop \nORDER BY Number_products DESC;", "match": {"match": true, "result": [["FC Lahti", "Lahti", "Lahden Stadion"], ["HJK", "Helsinki", "Finnair Stadium"], ["FC Inter", "Turku", "Veritas Stadion"], ["FC Honka", "Espoo", "Tapiolan Urheilupuisto"], ["FF Jaro", "Jakobstad", "Jakobstads Centralplan"], ["FC KooTeePee", "Kotka", "Arto Tolsa Areena"], ["FC Haka", "Valkeakoski", "Tehtaan kentt\u00e4"], ["KuPS", "Kuopio", "Magnum Areena"], ["IFK Mariehamn", "Mariehamn", "Wikl\u00f6f Holding Arena"]]}}
{"result": "SELECT Name \nFROM shop \nWHERE Number_products > (SELECT AVG(Number_products) FROM shop);", "match": {"match": true, "result": [["HJK"], ["FC Inter"], ["FC Lahti"]]}}
{"result": "SELECT Name \nFROM shop \nWHERE Number_products > (SELECT AVG(Number_products) FROM shop);", "match": {"match": true, "result": [["HJK"], ["FC Inter"], ["FC Lahti"]]}}
{"result": "SELECT T1.Name \nFROM employee AS T1 \nJOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID \nGROUP BY T1.Employee_ID \nORDER BY COUNT(T2.Employee_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [["George Chuter"]]}}
{"result": "SELECT T2.Name FROM evaluation AS T1 \nINNER JOIN employee AS T2 ON T1.Employee_ID = T2.Employee_ID \nGROUP BY T2.Name \nORDER BY COUNT(T2.Name) DESC \nLIMIT 1;", "match": {"match": true, "result": [["George Chuter"]]}}
{"result": "SELECT T2.Name FROM evaluation AS T1 INNER JOIN employee AS T2 ON T1.Employee_ID = T2.Employee_ID WHERE T1.Bonus = ( SELECT MAX(Bonus) FROM evaluation WHERE Bonus = 1 )", "match": {"match": false, "result": [], "gt": [["Louis Deacon"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Name FROM evaluation AS T1 \nINNER JOIN employee AS T2 ON T1.Employee_ID = T2.Employee_ID \nORDER BY T1.Bonus DESC \nLIMIT 1;", "match": {"match": true, "result": [["Louis Deacon"]]}}
{"result": "SELECT T1.Name \nFROM employee AS T1 \nLEFT JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID \nWHERE T2.Employee_ID IS NULL", "match": {"match": true, "result": [["Mark Regan"], ["Tim Payne"], ["Andrew Sheridan"], ["Phil Vickery"], ["Steve Borthwick"]]}}
{"result": "SELECT Name \nFROM employee \nWHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);", "match": {"match": true, "result": [["Mark Regan"], ["Tim Payne"], ["Andrew Sheridan"], ["Phil Vickery"], ["Steve Borthwick"]]}}
{"result": "SELECT T1.Name \nFROM shop AS T1 \nINNER JOIN hiring AS T2 \nON T1.Shop_ID = T2.Shop_ID \nGROUP BY T2.Shop_ID \nORDER BY COUNT(T2.Employee_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [["FC Haka"]]}}
{"result": "SELECT T2.Name \nFROM hiring AS T1 \nJOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID \nGROUP BY T2.Shop_ID \nORDER BY COUNT(T1.Employee_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [["FC Haka"]]}}
{"result": "SELECT Name \nFROM shop \nWHERE Shop_ID NOT IN (\n  SELECT Shop_ID \n  FROM hiring\n);", "match": {"match": true, "result": [["FC Honka"], ["KuPS"], ["IFK Mariehamn"]]}}
{"result": "SELECT T1.Name \nFROM shop AS T1 \nLEFT JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID \nWHERE T2.Shop_ID IS NULL", "match": {"match": true, "result": [["FC Honka"], ["KuPS"], ["IFK Mariehamn"]]}}
{"result": "SELECT T1.Name, COUNT(T2.Employee_ID) FROM shop AS T1 INNER JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID", "match": {"match": false, "result": [["FC Haka", 2], ["HJK", 1], ["FC Inter", 1], ["FF Jaro", 1], ["FC KooTeePee", 1], ["FC Lahti", 1]], "gt": [[2, "FC Haka"], [1, "FC Inter"], [1, "FC KooTeePee"], [1, "FC Lahti"], [1, "FF Jaro"], [1, "HJK"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT T2.Employee_ID), T1.Name \nFROM shop AS T1 \nJOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID", "match": {"match": false, "result": [[7, "FC Haka"]], "gt": [[2, "FC Haka"], [1, "FC Inter"], [1, "FC KooTeePee"], [1, "FC Lahti"], [1, "FF Jaro"], [1, "HJK"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT SUM(Bonus) FROM evaluation", "match": {"match": true, "result": [[19500.0]]}}
{"result": "SELECT SUM(Bonus) FROM evaluation", "match": {"match": true, "result": [[19500.0]]}}
{"result": "SELECT *\nFROM hiring", "match": {"match": true, "result": [[1, 1, "2009", "T"], [1, 2, "2003", "T"], [8, 3, "2011", "F"], [4, 4, "2012", "T"], [5, 5, "2013", "T"], [2, 6, "2010", "F"], [6, 7, "2008", "T"]]}}
{"result": "SELECT * FROM hiring", "match": {"match": true, "result": [[1, 1, "2009", "T"], [1, 2, "2003", "T"], [8, 3, "2011", "F"], [4, 4, "2012", "T"], [5, 5, "2013", "T"], [2, 6, "2010", "F"], [6, 7, "2008", "T"]]}}
{"result": "SELECT District \nFROM shop \nWHERE Number_products < 3000 \nINTERSECT \nSELECT District \nFROM shop \nWHERE Number_products > 10000", "match": {"match": true, "result": []}}
{"result": "SELECT T1.District \nFROM shop AS T1 \nJOIN shop AS T2 ON T1.Location = T2.Location \nWHERE T1.Number_products < 3000 AND T2.Number_products > 10000", "match": {"match": true, "result": []}}
{"result": "SELECT COUNT(DISTINCT Location) FROM shop", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(DISTINCT Location) FROM shop", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(Document_ID) FROM Documents", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(Document_ID) FROM Documents", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT Document_ID, Document_Name, Document_Description FROM Documents", "match": {"match": true, "result": [[0, "Introduction of OS", "n"], [1, "Understanding DB", "y"], [3, "Summer Show", "u"], [76, "Robbin CV", "y"], [80, "Welcome to NY", "h"], [82, "Data base", "w"], [2394, "Customer reviews", "y"], [3830, "Do not panic", "k"], [33930, "How Google people work", "z"], [50123, "Learning French", "r"], [651512, "How to write a CV", "f"], [801801, "How to read a book", "w"], [3540024, "Palm reading", "y"], [16514113, "A history of Arts", "h"], [385906526, "About Korea", "b"]]}}
{"result": "SELECT Document_ID, Document_Name, Document_Description FROM Documents", "match": {"match": true, "result": [[0, "Introduction of OS", "n"], [1, "Understanding DB", "y"], [3, "Summer Show", "u"], [76, "Robbin CV", "y"], [80, "Welcome to NY", "h"], [82, "Data base", "w"], [2394, "Customer reviews", "y"], [3830, "Do not panic", "k"], [33930, "How Google people work", "z"], [50123, "Learning French", "r"], [651512, "How to write a CV", "f"], [801801, "How to read a book", "w"], [3540024, "Palm reading", "y"], [16514113, "A history of Arts", "h"], [385906526, "About Korea", "b"]]}}
{"result": "SELECT Document_Name, Template_ID \nFROM Documents \nWHERE Document_Description LIKE '%w%';", "match": {"match": true, "result": [["Data base", 11], ["How to read a book", 4]]}}
{"result": "SELECT DISTINCT Document_Name, Template_ID \nFROM Documents \nWHERE Document_Description LIKE '%w%';", "match": {"match": true, "result": [["Data base", 11], ["How to read a book", 4]]}}
{"result": "SELECT Document_ID, Template_ID, Document_Description \nFROM Documents \nWHERE Document_Name = 'Robbin CV';", "match": {"match": true, "result": [[76, 20, "y"]]}}
{"result": "SELECT \n  D.Document_ID, \n  T.Template_ID, \n  D.Document_Description\nFROM \n  Documents D\n  JOIN Templates T ON D.Template_ID = T.Template_ID\nWHERE \n  D.Document_Name = 'Robbin CV';", "match": {"match": true, "result": [[76, 20, "y"]]}}
{"result": "SELECT COUNT(DISTINCT T.Template_ID) \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT COUNT(DISTINCT Template_ID) FROM Documents", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT COUNT(DISTINCT Document_ID) \nFROM Documents \nWHERE Template_ID IN (\n  SELECT Template_ID \n  FROM Templates \n  WHERE Template_Type_Code = 'PPT'\n)", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(DISTINCT Document_ID) \nFROM Documents \nJOIN Templates ON Documents.Template_ID = Templates.Template_ID \nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \nWHERE Ref_Template_Types.Template_Type_Description = 'PPT';", "match": {"match": false, "result": [[0]], "gt": [[3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Template_ID, COUNT(T2.Document_ID) \nFROM Templates T1 \nJOIN Documents T2 ON T1.Template_ID = T2.Template_ID \nGROUP BY T1.Template_ID", "match": {"match": true, "result": [[1, 1], [4, 1], [6, 1], [7, 1], [8, 1], [10, 1], [11, 2], [14, 2], [20, 1], [21, 1], [22, 1], [25, 2]]}}
{"result": "SELECT Template_ID, COUNT(Template_ID) as \"Count\"\nFROM Documents\nGROUP BY Template_ID", "match": {"match": true, "result": [[1, 1], [4, 1], [6, 1], [7, 1], [8, 1], [10, 1], [11, 2], [14, 2], [20, 1], [21, 1], [22, 1], [25, 2]]}}
{"result": "SELECT T.Template_ID, TT.Template_Type_Code\nFROM Templates T\nJOIN Documents D ON T.Template_ID = D.Template_ID\nJOIN (\n  SELECT Template_ID, COUNT(Documents.Document_ID) AS Count\n  FROM Documents\n  GROUP BY Template_ID\n) AS C ON T.Template_ID = C.Template_ID\nJOIN Ref_Template_Types TT ON T.Template_Type_Code = TT.Template_Type_Code\nORDER BY C.Count DESC\nLIMIT 1;", "match": {"match": true, "result": [[25, "PP"]]}}
{"result": "SELECT T.Template_Type_Code\n     , COUNT(D.Document_ID) as count\nFROM Templates T\nJOIN Documents D ON T.Template_ID = D.Template_ID\nGROUP BY T.Template_Type_Code\nORDER BY count DESC\nLIMIT 1", "match": {"match": false, "result": [["BK", 5]], "gt": [[25, "PP"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.Template_ID\nFROM Templates T\nJOIN Documents D ON T.Template_ID = D.Template_ID\nGROUP BY T.Template_ID\nHAVING COUNT(D.Template_ID) > 1", "match": {"match": true, "result": [[11], [14], [25]]}}
{"result": "SELECT DISTINCT T.Template_ID \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID \nGROUP BY T.Template_ID \nHAVING COUNT(D.Template_ID) > 1", "match": {"match": true, "result": [[11], [14], [25]]}}
{"result": "SELECT T.Template_ID\nFROM Templates T\nLEFT JOIN Documents D ON T.Template_ID = D.Template_ID\nWHERE D.Template_ID IS NULL;", "match": {"match": true, "result": [[0], [9], [15], [16], [18], [19], [23], [24]]}}
{"result": "SELECT Template_ID \nFROM Templates \nWHERE Template_ID NOT IN (SELECT Template_ID FROM Documents);", "match": {"match": true, "result": [[0], [9], [15], [16], [18], [19], [23], [24]]}}
{"result": "SELECT COUNT(Template_ID) FROM Templates;", "match": {"match": true, "result": [[20]]}}
{"result": "SELECT COUNT(Template_ID) FROM Templates", "match": {"match": true, "result": [[20]]}}
{"result": "SELECT Template_ID, Version_Number, Template_Type_Code \nFROM Templates", "match": {"match": true, "result": [[0, 5, "PP"], [1, 9, "PP"], [4, 4, "BK"], [6, 2, "PPT"], [7, 8, "PPT"], [8, 3, "BK"], [9, 2, "BK"], [10, 1, "PPT"], [11, 6, "BK"], [14, 7, "AD"], [15, 9, "CV"], [16, 5, "CV"], [18, 5, "PP"], [19, 7, "AD"], [20, 6, "BK"], [21, 9, "AD"], [22, 0, "PP"], [23, 2, "BK"], [24, 8, "PP"], [25, 5, "PP"]]}}
{"result": "SELECT Template_ID, Version_Number, Template_Type_Code\nFROM Templates;", "match": {"match": true, "result": [[0, 5, "PP"], [1, 9, "PP"], [4, 4, "BK"], [6, 2, "PPT"], [7, 8, "PPT"], [8, 3, "BK"], [9, 2, "BK"], [10, 1, "PPT"], [11, 6, "BK"], [14, 7, "AD"], [15, 9, "CV"], [16, 5, "CV"], [18, 5, "PP"], [19, 7, "AD"], [20, 6, "BK"], [21, 9, "AD"], [22, 0, "PP"], [23, 2, "BK"], [24, 8, "PP"], [25, 5, "PP"]]}}
{"result": "SELECT DISTINCT Template_Type_Code \nFROM Templates;", "match": {"match": true, "result": [["PP"], ["BK"], ["PPT"], ["AD"], ["CV"]]}}
{"result": "SELECT DISTINCT Template_Type_Code \nFROM Ref_Template_Types", "match": {"match": false, "result": [["AD"], ["BK"], ["CV"], ["PP"], ["PPT"]], "gt": [["PP"], ["BK"], ["PPT"], ["AD"], ["CV"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.Template_ID\nFROM Templates T\nWHERE T.Template_Type_Code IN ('PP', 'PPT');", "match": {"match": true, "result": [[0], [1], [6], [7], [10], [18], [22], [24], [25]]}}
{"result": "SELECT Template_ID\nFROM Templates\nWHERE Template_Type_Code IN ('PP', 'PPT')", "match": {"match": true, "result": [[0], [1], [6], [7], [10], [18], [22], [24], [25]]}}
{"result": "SELECT COUNT(Template_ID) \nFROM Templates \nWHERE Template_Type_Code = 'CV';", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(Template_ID) \nFROM Templates \nWHERE Template_Type_Code = 'CV';", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT T1.Version_Number, T1.Template_Type_Code\nFROM Templates T1\nWHERE T1.Version_Number > 5;", "match": {"match": true, "result": [[9, "PP"], [8, "PPT"], [6, "BK"], [7, "AD"], [9, "CV"], [7, "AD"], [6, "BK"], [9, "AD"], [8, "PP"]]}}
{"result": "SELECT Version_Number, Template_Type_Code \nFROM Templates \nWHERE Version_Number > 5;", "match": {"match": true, "result": [[9, "PP"], [8, "PPT"], [6, "BK"], [7, "AD"], [9, "CV"], [7, "AD"], [6, "BK"], [9, "AD"], [8, "PP"]]}}
{"result": "SELECT \n  Ref_Template_Types.Template_Type_Code, \n  COUNT(Templates.Template_ID) AS Number_Of_Templates\nFROM \n  Ref_Template_Types\n  LEFT JOIN Templates\n    ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code\nGROUP BY \n  Ref_Template_Types.Template_Type_Code", "match": {"match": true, "result": [["AD", 3], ["BK", 6], ["CV", 2], ["PP", 6], ["PPT", 3]]}}
{"result": "SELECT \n  tt.Template_Type_Code, \n  COUNT(t.Template_ID) AS Num_Templates\nFROM \n  Ref_Template_Types tt\n  JOIN Templates t ON tt.Template_Type_Code = t.Template_Type_Code\nGROUP BY \n  tt.Template_Type_Code", "match": {"match": true, "result": [["AD", 3], ["BK", 6], ["CV", 2], ["PP", 6], ["PPT", 3]]}}
{"result": "SELECT \n    T1.Template_Type_Code, \n    COUNT(T2.Template_ID) AS Template_Count\nFROM \n    Ref_Template_Types AS T1\nJOIN \n    Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code\nGROUP BY \n    T1.Template_Type_Code\nORDER BY \n    Template_Count DESC\nLIMIT 1", "match": {"match": false, "result": [["PP", 6]], "gt": [["PP"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Template_Type_Code \nFROM Templates AS T1 \nJOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code \nGROUP BY T2.Template_Type_Code \nORDER BY COUNT(T2.Template_Type_Code) DESC \nLIMIT 1", "match": {"match": true, "result": [["PP"]]}}
{"result": "SELECT Template_Type_Code \nFROM Templates \nGROUP BY Template_Type_Code \nHAVING COUNT(Template_ID) < 3", "match": {"match": true, "result": [["CV"]]}}
{"result": "SELECT t.Template_Type_Code \nFROM Ref_Template_Types t \nJOIN (\n  SELECT Template_Type_Code, COUNT(Template_ID) AS Template_Count \n  FROM Templates \n  GROUP BY Template_Type_Code\n) AS template_counts \nON t.Template_Type_Code = template_counts.Template_Type_Code \nWHERE template_counts.Template_Count < 3", "match": {"match": true, "result": [["CV"]]}}
{"result": "SELECT MIN(Version_Number), Template_Type_Code \nFROM Templates;", "match": {"match": true, "result": [[0, "PP"]]}}
{"result": "SELECT MIN(T1.Version_Number), T2.Template_Type_Code\nFROM Templates T1\nJOIN Ref_Template_Types T2 ON T1.Template_Type_Code = T2.Template_Type_Code;", "match": {"match": true, "result": [[0, "PP"]]}}
{"result": "SELECT T.Template_Type_Code \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID \nWHERE D.Document_Name = 'Data base'", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT T.Template_Type_Code \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID \nWHERE D.Document_Name = 'Data base';", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT DISTINCT T1.Document_Name \nFROM Documents T1 \nJOIN Templates T2 ON T1.Template_ID = T2.Template_ID \nJOIN Ref_Template_Types T3 ON T2.Template_Type_Code = T3.Template_Type_Code \nWHERE T3.Template_Type_Code = 'BK'", "match": {"match": true, "result": [["Robbin CV"], ["Data base"], ["How to read a book"], ["Palm reading"], ["About Korea"]]}}
{"result": "SELECT D.Document_Name \nFROM Documents D \nJOIN Templates T ON D.Template_ID = T.Template_ID \nWHERE T.Template_Type_Code = 'BK';", "match": {"match": true, "result": [["Robbin CV"], ["Data base"], ["How to read a book"], ["Palm reading"], ["About Korea"]]}}
{"result": "SELECT DISTINCT TTT.Template_Type_Code, COUNT(DT.Document_ID) as Document_Count\nFROM Ref_Template_Types TTT\nLEFT JOIN Templates TT ON TTT.Template_Type_Code = TT.Template_Type_Code\nLEFT JOIN Documents DT ON TT.Template_ID = DT.Template_ID\nGROUP BY TTT.Template_Type_Code", "match": {"match": false, "result": [["AD", 3], ["BK", 5], ["CV", 0], ["PP", 4], ["PPT", 3]], "gt": [["AD", 3], ["BK", 5], ["PP", 4], ["PPT", 3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Template_Type_Code, COUNT(DISTINCT T3.Document_ID) \nFROM Templates T1 \nJOIN Ref_Template_Types T2 ON T1.Template_Type_Code = T2.Template_Type_Code \nJOIN Documents T3 ON T1.Template_ID = T3.Template_ID \nGROUP BY T2.Template_Type_Code", "match": {"match": true, "result": [["AD", 3], ["BK", 5], ["PP", 4], ["PPT", 3]]}}
{"result": "SELECT T2.Template_Type_Code\nFROM Documents D\nJOIN Templates T ON D.Template_ID = T.Template_ID\nJOIN Ref_Template_Types T2 ON T.Template_Type_Code = T2.Template_Type_Code\nGROUP BY T2.Template_Type_Code\nORDER BY COUNT(D.Document_ID) DESC\nLIMIT 1", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT T2.Template_Type_Code\nFROM Documents AS T1\nJOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID\nGROUP BY T2.Template_Type_Code\nORDER BY COUNT(T2.Template_Type_Code) DESC\nLIMIT 1", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT T1.Template_Type_Code \nFROM Ref_Template_Types AS T1 \nLEFT JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code \nLEFT JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID \nWHERE T3.Document_ID IS NULL;", "match": {"match": false, "result": [["AD"], ["BK"], ["BK"], ["CV"], ["CV"], ["PP"], ["PP"], ["PP"]], "gt": [["CV"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Template_Type_Code \nFROM Ref_Template_Types \nLEFT JOIN Documents ON Ref_Template_Types.Template_Type_Code = Documents.Template_ID\nWHERE Documents.Document_ID IS NULL", "match": {"match": false, "result": [["AD"], ["BK"], ["CV"], ["PP"], ["PPT"]], "gt": [["CV"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Template_Type_Code, Template_Type_Description \nFROM Ref_Template_Types;", "match": {"match": true, "result": [["PPT", "Presentation"], ["CV", "CV"], ["AD", "Advertisement"], ["PP", "Paper"], ["BK", "Book"]]}}
{"result": "SELECT Template_Type_Code, Template_Type_Description \nFROM Ref_Template_Types", "match": {"match": true, "result": [["PPT", "Presentation"], ["CV", "CV"], ["AD", "Advertisement"], ["PP", "Paper"], ["BK", "Book"]]}}
{"result": "SELECT Template_Type_Description \nFROM Ref_Template_Types \nWHERE Template_Type_Code = 'AD';", "match": {"match": true, "result": [["Advertisement"]]}}
{"result": "SELECT Template_Type_Description\nFROM Ref_Template_Types\nWHERE Template_Type_Code = 'AD';", "match": {"match": true, "result": [["Advertisement"]]}}
{"result": "SELECT Template_Type_Code \nFROM Ref_Template_Types \nWHERE Template_Type_Description = 'Book';", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT Template_Type_Code \nFROM Ref_Template_Types \nWHERE Template_Type_Description = 'Book';", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT DISTINCT TTT.Template_Type_Description \nFROM Ref_Template_Types TTT \nJOIN Templates TT ON TTT.Template_Type_Code = TT.Template_Type_Code \nWHERE TT.Template_ID IN (SELECT DISTINCT Template_ID FROM Documents);", "match": {"match": false, "result": [["Paper"], ["Book"], ["Presentation"], ["Advertisement"]], "gt": [["Presentation"], ["Paper"], ["Book"], ["Advertisement"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T.Template_Type_Description \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID", "match": {"match": false, "error": "Query execution failed with error: no such column: T.Template_Type_Description"}}
{"result": "SELECT T.Template_ID \nFROM Templates T \nJOIN Ref_Template_Types TT ON T.Template_Type_Code = TT.Template_Type_Code \nWHERE TT.Template_Type_Description = 'Presentation'", "match": {"match": true, "result": [[6], [7], [10]]}}
{"result": "SELECT T1.Template_ID \nFROM Templates T1 \nJOIN Ref_Template_Types T2 ON T1.Template_Type_Code = T2.Template_Type_Code \nWHERE T2.Template_Type_Description = 'Presentation'", "match": {"match": true, "result": [[6], [7], [10]]}}
{"result": "SELECT COUNT(*) AS Total_Paragraphs\nFROM Paragraphs", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(Paragraph_ID) AS Total_Paragraphs\nFROM Paragraphs;", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) \nFROM Paragraphs \nJOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID \nWHERE Documents.Document_Name = 'Summer Show';", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(T1.Paragraph_ID) \nFROM Paragraphs T1 \nJOIN Documents T2 ON T1.Document_ID = T2.Document_ID \nWHERE T2.Document_Name = 'Summer Show'", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT Paragraph_ID, Paragraph_Text, Other_Details \nFROM Paragraphs \nWHERE Paragraph_Text = 'Korea ';", "match": {"match": false, "result": [], "gt": [[null], [null]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Paragraph_Text, T2.Document_Name, T3.Template_Type_Description \nFROM Paragraphs T1 \nJOIN Documents T2 ON T1.Document_ID = T2.Document_ID \nJOIN Templates T3 ON T2.Template_ID = T3.Template_ID \nJOIN Ref_Template_Types T4 ON T3.Template_Type_Code = T4.Template_Type_Code \nWHERE T1.Paragraph_Text LIKE '%Korea%';", "match": {"match": false, "error": "Query execution failed with error: no such column: T3.Template_Type_Description"}}
{"result": "SELECT P.Paragraph_ID, P.Paragraph_Text \nFROM Paragraphs P \nJOIN Documents D ON P.Document_ID = D.Document_ID \nWHERE D.Document_Name = 'Welcome to NY';", "match": {"match": true, "result": [[16615, "Japan"], [608931827, "Micronesia"]]}}
{"result": "SELECT T3.Paragraph_ID, T3.Paragraph_Text \nFROM Documents T1 \nJOIN Paragraphs T3 ON T1.Document_ID = T3.Document_ID \nWHERE T1.Document_Name = 'Welcome to NY';", "match": {"match": true, "result": [[16615, "Japan"], [608931827, "Micronesia"]]}}
{"result": "SELECT P.Paragraph_Text \nFROM Paragraphs P \nJOIN Documents D ON P.Document_ID = D.Document_ID \nWHERE D.Document_Name = 'Customer reviews';", "match": {"match": true, "result": [["Korea"], ["Ukraine"], ["Korea"]]}}
{"result": "SELECT p.Paragraph_Text \nFROM Paragraphs p \nJOIN Documents d ON p.Document_ID = d.Document_ID \nWHERE d.Document_Name = 'Customer reviews';", "match": {"match": true, "result": [["Korea"], ["Ukraine"], ["Korea"]]}}
{"result": "SELECT Document_ID, COUNT(Parcel_ID) AS Num_Paragraphs \nFROM Paragraphs \nGROUP BY Document_ID \nORDER BY Document_ID", "match": {"match": false, "error": "Query execution failed with error: no such column: Parcel_ID"}}
{"result": "SELECT \n    Document_ID, \n    COUNT(*) \nFROM \n    Paragraphs \nGROUP BY \n    Document_ID \nORDER BY \n    Document_ID", "match": {"match": true, "result": [[3, 1], [80, 2], [2394, 3], [3830, 1], [33930, 1], [50123, 1], [651512, 2], [3540024, 1], [16514113, 2], [385906526, 1]]}}
{"result": "SELECT \n    D.Document_ID, \n    D.Document_Name, \n    COUNT(P.Paragraph_ID) AS Paragraph_Count\nFROM \n    Documents D\nLEFT JOIN \n    Paragraphs P ON D.Document_ID = P.Document_ID\nGROUP BY \n    D.Document_ID, \n    D.Document_Name;", "match": {"match": false, "result": [[0, "Introduction of OS", 0], [1, "Understanding DB", 0], [3, "Summer Show", 1], [76, "Robbin CV", 0], [80, "Welcome to NY", 2], [82, "Data base", 0], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [801801, "How to read a book", 0], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "gt": [[3, "Summer Show", 1], [80, "Welcome to NY", 2], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT D.Document_ID, D.Document_Name, COUNT(P.Paragraph_ID) \nFROM Documents D LEFT JOIN Paragraphs P ON D.Document_ID = P.Document_ID \nGROUP BY D.Document_ID, D.Document_Name", "match": {"match": false, "result": [[0, "Introduction of OS", 0], [1, "Understanding DB", 0], [3, "Summer Show", 1], [76, "Robbin CV", 0], [80, "Welcome to NY", 2], [82, "Data base", 0], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [801801, "How to read a book", 0], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "gt": [[3, "Summer Show", 1], [80, "Welcome to NY", 2], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Document_ID\nFROM Paragraphs\nGROUP BY Document_ID\nHAVING COUNT(Document_ID) >= 2", "match": {"match": true, "result": [[80], [2394], [651512], [16514113]]}}
{"result": "SELECT T1.Document_ID \nFROM Documents AS T1 \nJOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID \nGROUP BY T1.Document_ID \nHAVING COUNT(T2.Paragraph_ID) >= 2", "match": {"match": true, "result": [[80], [2394], [651512], [16514113]]}}
{"result": "SELECT Document_ID, Document_Name\nFROM Documents\nWHERE Document_ID = (\n  SELECT Document_ID\n  FROM Documents\n  GROUP BY Document_ID\n  ORDER BY COUNT(Paragraph_ID) DESC\n  LIMIT 1\n);", "match": {"match": false, "error": "Query execution failed with error: no such column: Paragraph_ID"}}
{"result": "SELECT T2.Document_ID, T2.Document_Name \nFROM Paragraphs AS T1 \nJOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID \nGROUP BY T2.Document_ID, T2.Document_Name \nORDER BY COUNT(T1.Paragraph_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [[2394, "Customer reviews"]]}}
{"result": "SELECT Document_ID, COUNT(T2.Paragraph_ID) \nFROM Documents \nJOIN Paragraphs AS T2 ON Documents.Document_ID = T2.Document_ID \nGROUP BY Documents.Document_ID \nORDER BY COUNT(T2.Paragraph_ID) ASC \nLIMIT 1", "match": {"match": false, "error": "Query execution failed with error: ambiguous column name: Document_ID"}}
{"result": "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(Document_ID) ASC LIMIT 1", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT T2.Document_ID\nFROM Paragraphs AS T1\nJOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID\nGROUP BY T2.Document_ID\nHAVING COUNT(T1.Paragraph_ID) BETWEEN 1 AND 2", "match": {"match": true, "result": [[3], [80], [3830], [33930], [50123], [651512], [3540024], [16514113], [385906526]]}}
{"result": "SELECT T1.Document_ID\nFROM Documents T1\nJOIN Paragraphs T2 ON T1.Document_ID = T2.Document_ID\nWHERE T2.Paragraph_ID >= 1 AND T2.Paragraph_ID <= 2", "match": {"match": false, "result": [], "gt": [[3], [80], [3830], [33930], [50123], [651512], [3540024], [16514113], [385906526]], "error": "Query result does not match ground truth."}}
{"result": "SELECT D.Document_ID \nFROM Paragraphs P \nJOIN Documents D ON P.Document_ID = D.Document_ID \nWHERE P.Paragraph_Text IN ('Brazil', 'Ireland');", "match": {"match": false, "result": [[16514113], [16514113]], "gt": [[16514113]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Document_ID \nFROM Paragraphs \nWHERE Paragraph_Text = 'Brazil' AND Paragraph_ID IN ( SELECT Paragraph_ID \n                                                     FROM Paragraphs \n                                                     WHERE Paragraph_Text = 'Ireland' );", "match": {"match": false, "result": [], "gt": [[16514113]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) FROM teacher", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT COUNT(Teacher_ID) FROM teacher", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT Name FROM teacher ORDER BY Age ASC", "match": {"match": true, "result": [["Vicente Carretero"], ["Gustaaf Deloor"], ["Joseph Huts"], ["John Deloor"], ["Lucy Wong"], ["Anne Walker"], ["Kearsley Brown"]]}}
{"result": "SELECT Name FROM teacher ORDER BY Age ASC", "match": {"match": true, "result": [["Vicente Carretero"], ["Gustaaf Deloor"], ["Joseph Huts"], ["John Deloor"], ["Lucy Wong"], ["Anne Walker"], ["Kearsley Brown"]]}}
{"result": "SELECT \"Age\", \"Hometown\" FROM \"teacher\";", "match": {"match": true, "result": [["32", "Blackrod Urban District"], ["29", "Bolton County Borough"], ["26", "Farnworth Municipal Borough"], ["33", "Horwich Urban District"], ["45", "Kearsley Urban District"], ["41", "Little Lever Urban District"], ["39", "Turton Urban District"]]}}
{"result": "SELECT Age, Hometown FROM teacher", "match": {"match": true, "result": [["32", "Blackrod Urban District"], ["29", "Bolton County Borough"], ["26", "Farnworth Municipal Borough"], ["33", "Horwich Urban District"], ["45", "Kearsley Urban District"], ["41", "Little Lever Urban District"], ["39", "Turton Urban District"]]}}
{"result": "SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'", "match": {"match": false, "result": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Lucy Wong"]], "gt": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Anne Walker"], ["Lucy Wong"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name \nFROM teacher \nWHERE Hometown != 'Little Lever Urban District';", "match": {"match": false, "result": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Lucy Wong"]], "gt": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Anne Walker"], ["Lucy Wong"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name \nFROM teacher \nWHERE Age = '32' OR Age = '33';", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT Name FROM teacher WHERE Age = '32' OR Age = '33'", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "match": {"match": true, "result": [["Farnworth Municipal Borough"]]}}
{"result": "SELECT Hometown FROM teacher WHERE Age = ( SELECT MIN(Age) FROM teacher );", "match": {"match": true, "result": [["Farnworth Municipal Borough"]]}}
{"result": "SELECT DISTINCT Hometown, COUNT(Teacher_ID) FROM teacher GROUP BY Hometown", "match": {"match": true, "result": [["Blackrod Urban District", 1], ["Bolton County Borough", 1], ["Farnworth Municipal Borough", 1], ["Horwich Urban District", 1], ["Kearsley Urban District", 1], ["Little Lever Urban District", 1], ["Turton Urban District", 1]]}}
{"result": "SELECT COUNT(Teacher_ID) FROM teacher GROUP BY Hometown", "match": {"match": false, "result": [[1], [1], [1], [1], [1], [1], [1]], "gt": [["Blackrod Urban District", 1], ["Bolton County Borough", 1], ["Farnworth Municipal Borough", 1], ["Horwich Urban District", 1], ["Kearsley Urban District", 1], ["Little Lever Urban District", 1], ["Turton Urban District", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Hometown , COUNT(Hometown) FROM teacher GROUP BY Hometown ORDER BY COUNT(Hometown) DESC LIMIT 1", "match": {"match": false, "result": [["Turton Urban District", 1]], "gt": [["Turton Urban District"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Hometown, COUNT(*) as Count \nFROM teacher \nGROUP BY Hometown \nORDER BY Count DESC LIMIT 10;", "match": {"match": false, "result": [["Turton Urban District", 1], ["Little Lever Urban District", 1], ["Kearsley Urban District", 1], ["Horwich Urban District", 1], ["Farnworth Municipal Borough", 1], ["Bolton County Borough", 1], ["Blackrod Urban District", 1]], "gt": [["Turton Urban District"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Hometown \nFROM teacher \nGROUP BY Hometown \nHAVING COUNT(teacher.Teacher_ID) >= 2", "match": {"match": true, "result": []}}
{"result": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) >= 2", "match": {"match": true, "result": []}}
{"result": "SELECT T1.Name, T2.Course \nFROM teacher AS T1 \nJOIN course_arrange AS T3 ON T1.Teacher_ID = T3.Teacher_ID \nJOIN course AS T2 ON T3.Course_ID = T2.Course_ID", "match": {"match": true, "result": [["Kearsley Brown", "Math"], ["Vicente Carretero", "Math"], ["Gustaaf Deloor", "Science"], ["Anne Walker", "History"], ["Anne Walker", "Bible"], ["Lucy Wong", "Music"]]}}
{"result": "SELECT T1.`Name`, T2.`Course` \nFROM `teacher` AS T1 \nJOIN `course_arrange` AS T2 \nON T1.`Teacher_ID` = T2.`Teacher_ID`", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Course"}}
{"result": "SELECT T1.`Name`, T2.`Course`\nFROM `teacher` AS T1\nJOIN `course_arrange` AS T2\nON T1.`Teacher_ID` = T2.`Teacher_ID`\nJOIN `course` AS T3\nON T2.`Course_ID` = T3.`Course_ID`\nORDER BY T1.`Name` ASC", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Course"}}
{"result": "SELECT Name, Course \nFROM teacher \nJOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID \nJOIN course ON course_arrange.Course_ID = course.Course_ID \nORDER BY Name ASC", "match": {"match": true, "result": [["Anne Walker", "History"], ["Anne Walker", "Bible"], ["Gustaaf Deloor", "Science"], ["Kearsley Brown", "Math"], ["Lucy Wong", "Music"], ["Vicente Carretero", "Math"]]}}
{"result": "SELECT T1.Name \nFROM teacher AS T1 \nINNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nINNER JOIN course AS T3 ON T2.Course_ID = T3.Course_ID \nWHERE T3.\"Course\" = 'math'", "match": {"match": false, "result": [], "gt": [["Kearsley Brown"], ["Vicente Carretero"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.`Name` \nFROM teacher AS T \nJOIN course_arrange AS CA ON T.`Teacher_ID` = CA.`Teacher_ID` \nJOIN course AS C ON CA.`Course_ID` = C.`Course_ID` \nWHERE C.`Course` = 'Math';", "match": {"match": true, "result": [["Kearsley Brown"], ["Vicente Carretero"]]}}
{"result": "SELECT `Name`, COUNT(`Course_ID`) \nFROM `teacher` \nJOIN `course_arrange` ON `teacher`.`Teacher_ID` = `course_arrange`.`Teacher_ID` \nGROUP BY `teacher`.`Name`", "match": {"match": true, "result": [["Anne Walker", 2], ["Gustaaf Deloor", 1], ["Kearsley Brown", 1], ["Lucy Wong", 1], ["Vicente Carretero", 1]]}}
{"result": "SELECT T2.Name, COUNT(T1.Course_ID) FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name", "match": {"match": true, "result": [["Anne Walker", 2], ["Gustaaf Deloor", 1], ["Kearsley Brown", 1], ["Lucy Wong", 1], ["Vicente Carretero", 1]]}}
{"result": "SELECT T2.Name \nFROM course_arrange AS T1 \nJOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T2.Name \nHAVING COUNT(T2.Name) >= 2", "match": {"match": true, "result": [["Anne Walker"]]}}
{"result": "SELECT T1.Name \nFROM teacher AS T1 \nJOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T2.Teacher_ID \nHAVING COUNT(T2.Course_ID) >= 2", "match": {"match": true, "result": [["Anne Walker"]]}}
{"result": "SELECT Name \nFROM teacher \nWHERE Teacher_ID NOT IN ( SELECT Teacher_ID FROM course_arrange );", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT T2.Name \nFROM course_arrange AS T1 \nRIGHT JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nWHERE T1.Course_ID IS NULL;", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT COUNT(*) FROM visitor WHERE Age < 30", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Name \nFROM visitor \nWHERE Level_of_membership > 4 \nORDER BY Level_of_membership DESC;", "match": {"match": true, "result": [["Gonzalo Higua\u00edn "], ["Fernando Gago"], ["Guti Midfielder"]]}}
{"result": "SELECT AVG(Age) \nFROM visitor \nWHERE Level_of_membership <= 4", "match": {"match": true, "result": [[36.0]]}}
{"result": "SELECT Name, Level_of_membership\nFROM visitor\nWHERE Level_of_membership > 4\nORDER BY Age DESC", "match": {"match": true, "result": [["Fernando Gago", 6], ["Gonzalo Higua\u00edn ", 8], ["Guti Midfielder", 5]]}}
{"result": "SELECT ID, Name \nFROM museum \nORDER BY Num_of_Staff DESC \nLIMIT 1", "match": {"match": false, "error": "Query execution failed with error: no such column: ID"}}
{"result": "SELECT AVG(`Num_of_Staff`) \nFROM museum \nWHERE Open_Year < 2009", "match": {"match": true, "result": [[31.333333333333332]]}}
{"result": "SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'", "match": {"match": false, "result": [["2000", 62]], "gt": [[62, "2000"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name \nFROM museum \nWHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) \n                      FROM museum \n                      WHERE Open_Year > '2010')", "match": {"match": true, "result": [["Plaza Museum"], ["Capital Plaza Museum"], ["Jefferson Development Museum"]]}}
{"result": "SELECT T1.ID, T1.Name, T1.Age\nFROM `visitor` AS T1\nJOIN visit AS T2 ON T1.ID = T2.visitor_ID\nGROUP BY T1.ID\nHAVING COUNT(T2.Museum_ID) > 1", "match": {"match": true, "result": [[3, "Arjen Robben", 27], [5, "Fernando Gago", 36], [6, "Rafael van der Vaart", 25]]}}
{"result": "SELECT T2.ID, T2.Name, T2.Level_of_membership \nFROM visit AS T1 \nJOIN visitor AS T2 ON T1.visitor_ID = T2.ID \nWHERE (T1.Museum_ID, T1.visitor_ID) IN (SELECT Museum_ID, visitor_ID FROM visit GROUP BY Museum_ID, visitor_ID ORDER BY SUM(T1.Total_spent) DESC LIMIT 1)", "match": {"match": false, "error": "Query execution failed with error: no such column: T1.Total_spent"}}
{"result": "SELECT T1.Museum_ID, T2.Name \nFROM visit AS T1 \nJOIN museum AS T2 ON T1.Museum_ID = T2.Museum_ID \nGROUP BY T1.Museum_ID \nORDER BY COUNT(T1.visitor_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [[2, "Capital Plaza Museum"]]}}
{"result": "SELECT Name \nFROM museum \nWHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit);", "match": {"match": true, "result": [["Jefferson Development Museum"], ["RiverPark Museum"], ["Place Tower Museum"], ["Central City District Residential Museum"]]}}
{"result": "SELECT v.Name, v.Age \nFROM visitor v \nJOIN visit vi ON v.ID = vi.visitor_ID \nWHERE vi.Num_of_Ticket = ( \n  SELECT MAX(Num_of_Ticket) \n  FROM visit \n);", "match": {"match": true, "result": [["Arjen Robben", 27]]}}
{"result": "SELECT AVG(Num_of_Ticket) AS average_tickets, MAX(Num_of_Ticket) AS max_tickets\nFROM visit", "match": {"match": true, "result": [[10.5, 24]]}}
{"result": "SELECT SUM(T1.Total_spent) \nFROM visit AS T1 \nJOIN visitor AS T2 ON T1.visitor_ID = T2.ID \nWHERE T2.Level_of_membership = 1;", "match": {"match": true, "result": [[570.84]]}}
{"result": "SELECT T1.Name \nFROM visitor AS T1 \nJOIN visit AS T2 ON T1.ID = T2.visitor_ID \nJOIN museum AS T3 ON T3.Museum_ID = T2.Museum_ID \nWHERE T3.Open_Year < '2009' AND T3.Open_Year > '2011'", "match": {"match": false, "result": [], "gt": [["Fernando Gago"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) \nFROM visitor \nWHERE ID NOT IN (SELECT visitor_ID \n                  FROM visit \n                  WHERE Museum_ID IN (SELECT Museum_ID \n                                      FROM museum \n                                      WHERE Open_Year > '2010'));", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(*) \nFROM museum \nWHERE Open_Year > 2013 OR Open_Year < 2008", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(id) FROM ship WHERE disposition_of_ship = 'Captured'", "match": {"match": true, "result": [[4]]}}
{"result": "SELECT name, tonnage FROM ship ORDER BY name DESC", "match": {"match": true, "result": [["Three Brothers", "t"], ["Mary", "t"], ["Lettice", "t"], ["HMS Avon", "391"], ["HMS Atalanta", "225"], ["Bon Accord", "t"], ["Bacchus", "t"]]}}
{"result": "SELECT name, date, result FROM battle", "match": {"match": false, "result": [["Battle of Adrianople", "14 April 1205", "Bulgarian victory"], ["Battle of Serres", "June 1205", "Bulgarian victory"], ["Battle of Rusion", "31 January 1206", "Bulgarian victory"], ["Battle of Rodosto", "February 1206", "Bulgarian victory"], ["Battle of Messinopolis", "4 September 1207", "Bulgarian victory"], ["Battle of Boruy", "June 1205", "Bulgarian victory"], ["Battle of Philippopolis", "31 June 1208", "Latin victory"], ["Siege of Constantinople", "1235", "Two Year Truce"]], "gt": [["Battle of Adrianople", "14 April 1205"], ["Battle of Serres", "June 1205"], ["Battle of Rusion", "31 January 1206"], ["Battle of Rodosto", "February 1206"], ["Battle of Messinopolis", "4 September 1207"], ["Battle of Boruy", "June 1205"], ["Battle of Philippopolis", "31 June 1208"], ["Siege of Constantinople", "1235"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(killed) AS max_death, MIN(killed) AS min_death FROM death", "match": {"match": true, "result": [[29, 0]]}}
{"result": "SELECT AVG(injured) FROM death", "match": {"match": true, "result": [[1.0769230769230769]]}}
{"result": "SELECT T1.note, T1.killed, T1.injured \nFROM death AS T1 \nJOIN ship AS T2 ON T1.caused_by_ship_id = T2.id \nWHERE T2.tonnage = 't'", "match": {"match": false, "result": [["Dantewada, Chhattisgarh", 8, 0], ["Dantewada, Chhattisgarh", 3, 0], ["Erraboru, Chhattisgarh", 25, 0], ["East Champaran, Bihar", 2, 0], ["Dantewada, Chhattisgarh", 0, 0], ["Dantewada, Chhattisgarh", 4, 5], ["Kanker, Chhattisgarh", 0, 0], ["Dantewada, Chhattisgarh", 29, 0], ["WestMidnapore, West Bengal", 0, 0], ["Bastar, Chattisgarh", 0, 0], ["Bokaro, Jharkhand", 14, 0]], "gt": [[8, 0], [3, 0], [25, 0], [2, 0], [0, 0], [4, 5], [0, 0], [29, 0], [0, 0], [0, 0], [14, 0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.name, T1.result \nFROM battle AS T1 \nWHERE T1.bulgarian_commander != 'Boril';", "match": {"match": true, "result": [["Battle of Adrianople", "Bulgarian victory"], ["Battle of Serres", "Bulgarian victory"], ["Battle of Rusion", "Bulgarian victory"], ["Battle of Rodosto", "Bulgarian victory"], ["Battle of Messinopolis", "Bulgarian victory"], ["Siege of Constantinople", "Two Year Truce"]]}}
{"result": "SELECT DISTINCT T1.id, T1.name\nFROM battle AS T1\nJOIN ship AS T2 ON T1.id = T2.lost_in_battle\nWHERE T2.ship_type = 'Brig'", "match": {"match": true, "result": [[8, "Siege of Constantinople"], [7, "Battle of Philippopolis"], [6, "Battle of Boruy"], [5, "Battle of Messinopolis"], [4, "Battle of Rodosto"]]}}
{"result": "SELECT T2.id, T1.name FROM battle AS T1 INNER JOIN ship AS T2 ON T1.id = T2.lost_in_battle INNER JOIN death AS T3 ON T3.caused_by_ship_id = T2.id WHERE T3.killed > 10", "match": {"match": false, "result": [[3, "Battle of Boruy"], [1, "Siege of Constantinople"], [5, "Battle of Messinopolis"]], "gt": [[5, "Battle of Messinopolis"], [6, "Battle of Boruy"], [8, "Siege of Constantinople"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT caused_by_ship_id, name \nFROM ship \nWHERE id IN (\n  SELECT caused_by_ship_id \n  FROM death \n  GROUP BY caused_by_ship_id \n  ORDER BY SUM(injured) DESC \n  LIMIT 1\n);", "match": {"match": false, "error": "Query execution failed with error: no such column: caused_by_ship_id"}}
{"result": "SELECT DISTINCT name \nFROM battle \nWHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'", "match": {"match": true, "result": [["Battle of Adrianople"]]}}
{"result": "SELECT COUNT(DISTINCT result) FROM battle", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(id) \nFROM battle \nWHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage = '225' );", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT T2.name, T2.date \nFROM ship AS T1 \nJOIN battle AS T2 ON T1.lost_in_battle = T2.id \nWHERE T1.name = 'Lettice' OR T1.name = 'HMS Atalanta';", "match": {"match": false, "result": [["Siege of Constantinople", "1235"], ["Siege of Constantinople", "1235"]], "gt": [["Siege of Constantinople", "1235"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.name, T1.result, T1.bulgarian_commander \nFROM battle AS T1 \nLEFT JOIN ship AS T2 ON T1.id = T2.lost_in_battle \nWHERE T2.name NOT LIKE '%English Channel%';", "match": {"match": false, "result": [["Battle of Rodosto", "Bulgarian victory", "Kaloyan"], ["Battle of Messinopolis", "Bulgarian victory", "Unknown"], ["Battle of Messinopolis", "Bulgarian victory", "Unknown"], ["Battle of Boruy", "Bulgarian victory", "Boril"], ["Battle of Philippopolis", "Latin victory", "Boril"], ["Siege of Constantinople", "Two Year Truce", "Ivan Asen II"], ["Siege of Constantinople", "Two Year Truce", "Ivan Asen II"]], "gt": [["Battle of Adrianople", "Bulgarian victory", "Kaloyan"], ["Battle of Rusion", "Bulgarian victory", "Kaloyan"], ["Battle of Serres", "Bulgarian victory", "Kaloyan"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT note \nFROM death \nWHERE note LIKE '%East%';", "match": {"match": true, "result": [["East Champaran, Bihar"]]}}
{"result": "SELECT line_1, line_2 FROM Addresses", "match": {"match": true, "result": [["2294 Grant Square Apt. 235", "Apt. 370"], ["3999 Aufderhar Ways Suite 593", "Apt. 388"], ["67942 Carlotta Ferry Apt. 686", "Apt. 583"], ["0144 Lamar Plaza Apt. 346", "Suite 703"], ["858 Peggie Bypass Suite 212", "Apt. 335"], ["16998 Mraz Lodge", "Apt. 689"], ["193 Marlin Brook", "Apt. 406"], ["202 Hessel Views Apt. 468", "Apt. 305"], ["0643 Muller Vista", "Suite 383"], ["7081 Eda Center", "Suite 830"], ["9283 Schulist Falls Apt. 037", "Suite 239"], ["979 Haag Shores Suite 656", "Apt. 468"], ["492 Wilkinson Route", "Suite 865"], ["186 Evan Motorway Apt. 409", "Suite 079"], ["74046 Metz Walk Apt. 113", "Suite 674"]]}}
{"result": "SELECT line_1, line_2 FROM Addresses", "match": {"match": true, "result": [["2294 Grant Square Apt. 235", "Apt. 370"], ["3999 Aufderhar Ways Suite 593", "Apt. 388"], ["67942 Carlotta Ferry Apt. 686", "Apt. 583"], ["0144 Lamar Plaza Apt. 346", "Suite 703"], ["858 Peggie Bypass Suite 212", "Apt. 335"], ["16998 Mraz Lodge", "Apt. 689"], ["193 Marlin Brook", "Apt. 406"], ["202 Hessel Views Apt. 468", "Apt. 305"], ["0643 Muller Vista", "Suite 383"], ["7081 Eda Center", "Suite 830"], ["9283 Schulist Falls Apt. 037", "Suite 239"], ["979 Haag Shores Suite 656", "Apt. 468"], ["492 Wilkinson Route", "Suite 865"], ["186 Evan Motorway Apt. 409", "Suite 079"], ["74046 Metz Walk Apt. 113", "Suite 674"]]}}
{"result": "SELECT COUNT(course_id) FROM Courses", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) \nFROM Courses;", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT T1.course_description \nFROM Courses AS T1 \nJOIN Sections AS T2 ON T1.course_id = T2.course_id \nWHERE T2.section_name = 'Math Course';", "match": {"match": false, "result": [], "gt": [["q"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.course_description \nFROM Courses AS T1 \nJOIN Sections AS T2 ON T1.course_id = T2.course_id \nWHERE T1.course_name LIKE '%Math%'", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.course_description"}}
{"result": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'", "match": {"match": true, "result": [["148"]]}}
{"result": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'", "match": {"match": true, "result": [["148"]]}}
{"result": "SELECT department_name, department_id \nFROM Departments \nWHERE department_id IN (SELECT department_id \n                         FROM Degree_Programs \n                         GROUP BY department_id \n                         ORDER BY COUNT(degree_program_id) DESC \n                         LIMIT 1);", "match": {"match": true, "result": [["statistics", 8]]}}
{"result": "SELECT department_id, department_name FROM Degree_Programs GROUP BY department_id ORDER BY COUNT(*) DESC LIMIT 1", "match": {"match": false, "error": "Query execution failed with error: no such column: department_name"}}
{"result": "SELECT COUNT(DISTINCT department_id) \nFROM Degree_Programs", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT COUNT(DISTINCT department_id) FROM Degree_Programs", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT COUNT(DISTINCT `degree_summary_name`) FROM `Degree_Programs`", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(DISTINCT degree_program_id) FROM Degree_Programs", "match": {"match": false, "result": [[15]], "gt": [[3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) \nFROM Degree_Programs \nJOIN Departments ON Degree_Programs.department_id = Departments.department_id \nWHERE Departments.department_name = 'Engineering';", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(*) \nFROM Degree_Programs \nJOIN Departments ON Degree_Programs.department_id = Departments.department_id \nWHERE Departments.department_name = 'Engineering';", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT section_name, section_description FROM Sections;", "match": {"match": true, "result": [["a", "non"], ["b", "voluptatem"], ["c", "qui"], ["d", "voluptas"], ["e", "ex"], ["f", "doloremque"], ["g", "provident"], ["h", "et"], ["j", "quis"], ["k", "nesciunt"], ["l", "ad"], ["o", "et"], ["p", "facilis"], ["u", "reprehenderit"], ["y", "qui"]]}}
{"result": "SELECT `section_name`, `section_description` FROM `Sections`", "match": {"match": true, "result": [["a", "non"], ["b", "voluptatem"], ["c", "qui"], ["d", "voluptas"], ["e", "ex"], ["f", "doloremque"], ["g", "provident"], ["h", "et"], ["j", "quis"], ["k", "nesciunt"], ["l", "ad"], ["o", "et"], ["p", "facilis"], ["u", "reprehenderit"], ["y", "qui"]]}}
{"result": "SELECT course_name, course_id \nFROM Courses \nWHERE course_id IN (\n  SELECT course_id \n  FROM Sections \n  GROUP BY course_id \n  HAVING COUNT(section_id) <= 2\n);", "match": {"match": true, "result": [["ds", 1], ["math", 2], ["en", 4], ["fr", 5], ["la", 6], ["cal", 7], ["nlp", 8], ["dl", 9], ["ml", 10], ["db", 12], ["pl", 14]]}}
{"result": "SELECT T1.course_name, T1.course_id \nFROM Courses AS T1 \nJOIN Sections AS T2 ON T1.course_id = T2.course_id \nGROUP BY T1.course_id \nHAVING COUNT(T2.section_id) < 2", "match": {"match": false, "result": [["math", 2], ["en", 4], ["la", 6], ["cal", 7], ["dl", 9], ["ml", 10], ["db", 12]], "gt": [["ds", 1], ["math", 2], ["en", 4], ["fr", 5], ["la", 6], ["cal", 7], ["nlp", 8], ["dl", 9], ["ml", 10], ["db", 12], ["pl", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT section_name FROM Sections ORDER BY section_name DESC", "match": {"match": true, "result": [["y"], ["u"], ["p"], ["o"], ["l"], ["k"], ["j"], ["h"], ["g"], ["f"], ["e"], ["d"], ["c"], ["b"], ["a"]]}}
{"result": "SELECT section_name \nFROM Sections \nORDER BY section_name DESC", "match": {"match": true, "result": [["y"], ["u"], ["p"], ["o"], ["l"], ["k"], ["j"], ["h"], ["g"], ["f"], ["e"], ["d"], ["c"], ["b"], ["a"]]}}
{"result": "SELECT T1.semester_id, T1.semester_name \nFROM Semesters T1 \nJOIN Student_Enrolment T2 ON T1.semester_id = T2.semester_id \nGROUP BY T1.semester_id \nORDER BY COUNT(T2.student_id) DESC \nLIMIT 1", "match": {"match": false, "result": [[2, "summer 2010"]], "gt": [["summer 2010", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.semester_name, T.semester_id \nFROM (\n  SELECT \n    S.semester_name, \n    S.semester_id, \n    COUNT(DISTINCT SE.student_id) AS student_count,\n    RANK() OVER (ORDER BY COUNT(DISTINCT SE.student_id) DESC) AS rank\n  FROM Semesters S\n  JOIN Student_Enrolment SE ON S.semester_id = SE.semester_id\n  GROUP BY S.semester_name, S.semester_id\n) T\nWHERE T.rank = 1", "match": {"match": false, "result": [["fall 2018", 13], ["summer 2010", 2]], "gt": [["summer 2010", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT department_description \nFROM Departments \nWHERE department_name LIKE '%the computer%'", "match": {"match": false, "result": [], "gt": [["error"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.department_description \nFROM Departments AS T1 \nWHERE T1.department_name LIKE '%computer%'", "match": {"match": true, "result": [["error"]]}}
{"result": "SELECT DISTINCT S.first_name, S.middle_name, S.last_name, S.student_id \nFROM Students S \nJOIN Student_Enrolment SE ON S.student_id = SE.student_id \nJOIN Degree_Programs DP ON SE.degree_program_id = DP.degree_program_id \nWHERE SE.semester_id IN ( SELECT semester_id \n                          FROM Student_Enrolment \n                          GROUP BY semester_id \n                          HAVING COUNT(DISTINCT degree_program_id) = 2 );", "match": {"match": false, "result": [["Reva", "Golda", "Osinski", 9], ["Stanford", "Mona", "Rogahn", 6]], "gt": [["Jarvis", "Aaliyah", "Carroll", 4], ["Reva", "Golda", "Osinski", 9], ["Jordy", "Osborne", "Rempel", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.first_name, s.middle_name, s.last_name, se.degree_program_id \nFROM Students s \nJOIN Student_Enrolment se ON s.student_id = se.student_id \nGROUP BY se.student_id \nHAVING COUNT(DISTINCT se.degree_program_id) = 2;", "match": {"match": false, "result": [["Jarvis", "Aaliyah", "Carroll", 9], ["Stanford", "Mona", "Rogahn", 2], ["Jordy", "Osborne", "Rempel", 12]], "gt": [["Jarvis", "Aaliyah", "Carroll", 4], ["Reva", "Golda", "Osinski", 9], ["Jordy", "Osborne", "Rempel", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T1.first_name, T1.middle_name, T1.last_name \nFROM Students AS T1 \nJOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id \nJOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id \nWHERE T3.degree_summary_name = 'Bachelor'", "match": {"match": true, "result": [["Reva", "Golda", "Osinski"], ["Frida", "Aisha", "Huel"], ["Jarvis", "Aaliyah", "Carroll"], ["Milton", "Vaughn", "Christiansen"], ["Stanford", "Mona", "Rogahn"]]}}
{"result": "SELECT T1.first_name, T1.middle_name, T1.last_name \nFROM Students AS T1 \nJOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id \nJOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id \nWHERE T3.degree_summary_name = 'Bachelors'", "match": {"match": false, "result": [], "gt": [["Reva", "Golda", "Osinski"], ["Frida", "Aisha", "Huel"], ["Jarvis", "Aaliyah", "Carroll"], ["Milton", "Vaughn", "Christiansen"], ["Stanford", "Mona", "Rogahn"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.degree_summary_name \nFROM Student_Enrolment \nJOIN Degree_Programs AS T2 ON Student_Enrolment.degree_program_id = T2.degree_program_id \nGROUP BY T2.degree_summary_name \nORDER BY COUNT(*) DESC \nLIMIT 1", "match": {"match": true, "result": [["Bachelor"]]}}
{"result": "SELECT T2.degree_summary_name\nFROM (\n  SELECT T1.degree_program_id, COUNT(T1.degree_program_id) as student_count\n  FROM Student_Enrolment\n  GROUP BY T1.degree_program_id\n) AS T1\nJOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id\nORDER BY T1.student_count DESC\nLIMIT 1", "match": {"match": false, "error": "Query execution failed with error: no such column: T1.degree_program_id"}}
{"result": "SELECT T.degree_program_id, T.degree_summary_name \nFROM (\n  SELECT \n      DE.degree_program_id, DE.degree_summary_name, \n      COUNT(SE.student_enrolment_id) AS enrollment_count\n  FROM Degree_Programs DE\n  JOIN Student_Enrolment SE ON DE.degree_program_id = SE.degree_program_id\n  GROUP BY DE.degree_program_id, DE.degree_summary_name\n) AS T\nORDER BY enrollment_count DESC\nLIMIT 1", "match": {"match": true, "result": [[9, "Bachelor"]]}}
{"result": "SELECT T1.degree_program_id, T1.degree_summary_name \nFROM Degree_Programs AS T1\nJOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id\nGROUP BY T1.degree_program_id\nORDER BY COUNT(T2.student_id) DESC\nLIMIT 1;", "match": {"match": true, "result": [[9, "Bachelor"]]}}
{"result": "SELECT \n    s.student_id, \n    s.first_name, \n    s.middle_name, \n    s.last_name, \n    COUNT(se.degree_program_id) as num_enrollments\nFROM \n    Students s\nJOIN \n    Student_Enrolment se ON s.student_id = se.student_id\nGROUP BY \n    s.student_id, s.first_name, s.middle_name, s.last_name\nORDER BY \n    num_enrollments DESC\nLIMIT 1;", "match": {"match": false, "result": [[6, "Stanford", "Mona", "Rogahn", 3]], "gt": [[7, "Frida", "Aisha", "Huel", 3, 7]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T1.first_name, T1.middle_name, T1.last_name, T1.student_id, \nCOUNT(T2.degree_program_id) as enrollments_count \nFROM Students T1 \nJOIN Student_Enrolment T2 ON T1.student_id = T2.student_id \nGROUP BY T1.student_id, T1.first_name, T1.middle_name, T1.last_name \nORDER BY enrollments_count DESC \nLIMIT 1;", "match": {"match": false, "result": [["Stanford", "Mona", "Rogahn", 6, 3]], "gt": [[7, "Frida", "Aisha", "Huel", 3, 7]], "error": "Query result does not match ground truth."}}
{"result": "SELECT semester_name \nFROM Semesters \nWHERE semester_id NOT IN (\n  SELECT semester_id \n  FROM Student_Enrolment \n);", "match": {"match": true, "result": [["fall 2010"], ["spring 2013"], ["spring 2014"], ["spring 2016"], ["spring 2017"], ["winter 2018"]]}}
{"result": "SELECT T1.semester_name FROM Semesters AS T1\nLEFT JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id\nWHERE T2.semester_id IS NULL", "match": {"match": true, "result": [["fall 2010"], ["spring 2013"], ["spring 2014"], ["spring 2016"], ["spring 2017"], ["winter 2018"]]}}
{"result": "SELECT T1.course_name \nFROM Courses AS T1 \nJOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id", "match": {"match": false, "result": [["la"], ["la"], ["pl"], ["ai"], ["math"], ["ml"], ["math"], ["pl"], ["os"], ["en"], ["ml"], ["nlp"], ["rs"], ["rs"], ["db"]], "gt": [["la"], ["pl"], ["ai"], ["math"], ["ml"], ["os"], ["en"], ["nlp"], ["rs"], ["db"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.course_name \nFROM Courses AS T1 \nJOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id", "match": {"match": false, "result": [["la"], ["la"], ["pl"], ["ai"], ["math"], ["ml"], ["math"], ["pl"], ["os"], ["en"], ["ml"], ["nlp"], ["rs"], ["rs"], ["db"]], "gt": [["la"], ["pl"], ["ai"], ["math"], ["ml"], ["os"], ["en"], ["nlp"], ["rs"], ["db"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.course_name \nFROM Courses AS T1 \nJOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id \nGROUP BY T1.course_id \nORDER BY COUNT(T2.student_enrolment_id) DESC \nLIMIT 1", "match": {"match": false, "result": [["pl"]], "gt": [["rs"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.course_name \nFROM Courses T1 \nJOIN Student_Enrolment_Courses T2 ON T1.course_id = T2.course_id \nJOIN Student_Enrolment T3 ON T2.student_enrolment_id = T3.student_enrolment_id \nGROUP BY T1.course_name \nORDER BY COUNT(T3.student_id) DESC \nLIMIT 1;", "match": {"match": true, "result": [["rs"]]}}
{"result": "SELECT T1.last_name \nFROM Students AS T1\nJOIN Addresses AS T2 ON T1.current_address_id = T2.address_id\nWHERE T2.state_province_county = 'North Carolina' AND T1.student_id NOT IN (SELECT student_id FROM Student_Enrolment)", "match": {"match": false, "result": [], "gt": [["Gleichner"], ["Weimann"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T1.last_name \nFROM Students AS T1 \nJOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id \nWHERE T2.state_province_county = 'North Carolina' \nAND T1.student_id NOT IN (SELECT student_id FROM Student_Enrolment);", "match": {"match": false, "result": [], "gt": [["Gleichner"], ["Weimann"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.transcript_id, T.transcript_date\nFROM Transcripts T\nJOIN Transcript_Contents TC ON T.transcript_id = TC.transcript_id\nGROUP BY T.transcript_id\nHAVING COUNT(DISTINCT TC.student_course_id) >= 2;", "match": {"match": false, "result": [[5, "2013-06-30 13:01:40"], [6, "2010-12-13 10:55:15"], [8, "1975-05-06 12:04:47"], [15, "1998-11-22 12:18:29"]], "gt": [["2013-06-30 13:01:40", 5], ["2010-12-13 10:55:15", 6], ["1975-05-06 12:04:47", 8], ["1998-11-22 12:18:29", 15]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.transcript_date, T2.transcript_id \nFROM Transcript_Contents AS T1 \nJOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id \nGROUP BY T2.transcript_id \nHAVING COUNT(T1.student_course_id) >= 2", "match": {"match": true, "result": [["2013-06-30 13:01:40", 5], ["2010-12-13 10:55:15", 6], ["1975-05-06 12:04:47", 8], ["1998-11-22 12:18:29", 15]]}}
{"result": "SELECT cell_mobile_number \nFROM Students \nWHERE first_name = 'Timmothy' AND last_name = 'Ward';", "match": {"match": true, "result": [["(096)889-8954x524"]]}}
{"result": "SELECT `cell_mobile_number` FROM `Students` WHERE `first_name` = 'Timmothy' AND `last_name` = 'Ward'", "match": {"match": false, "result": [["(096)889-8954x524"]], "gt": [], "error": "Query result does not match ground truth."}}
{"result": "SELECT first_name, middle_name, last_name \nFROM Students \nORDER BY date_first_registered \nLIMIT 1", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT first_name, middle_name, last_name \nFROM Students \nORDER BY date_first_registered ASC \nLIMIT 1", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT T1.first_name, T1.middle_name, T1.last_name \nFROM Students AS T1 \nWHERE T1.date_left IS NOT NULL \nORDER BY T1.date_left ASC \nLIMIT 1;", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT first_name, middle_name, last_name \nFROM Students \nWHERE date_first_registered = ( SELECT MIN(date_first_registered) FROM Students );", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT T.first_name \nFROM (SELECT S.first_name, \n             S.permanent_address_id, \n             S.current_address_id,\n             CASE \n                 WHEN S.permanent_address_id != S.current_address_id THEN 1 \n                 ELSE 0 \n             END AS is_different \n      FROM Students S) T \nWHERE T.is_different = 1", "match": {"match": true, "result": [["Timmothy"], ["Hobart"], ["Warren"], ["Jarvis"], ["Stanford"], ["Frida"], ["Delaney"], ["Reva"], ["Helga"], ["Gregg"], ["Orrin"], ["Deon"], ["Jordy"], ["Jett"]]}}
{"result": "SELECT T1.first_name FROM Students AS T1 INNER JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T1.current_address_id != T1.permanent_address_id", "match": {"match": true, "result": [["Timmothy"], ["Hobart"], ["Warren"], ["Jarvis"], ["Stanford"], ["Frida"], ["Delaney"], ["Reva"], ["Helga"], ["Gregg"], ["Orrin"], ["Deon"], ["Jordy"], ["Jett"]]}}
{"result": "SELECT T1.address_id, T1.line_1, T1.line_2, T1.line_3 \nFROM Addresses T1 \nJOIN Students T2 ON T1.address_id = T2.current_address_id \nGROUP BY T1.address_id \nORDER BY COUNT(T1.address_id) DESC \nLIMIT 1", "match": {"match": false, "result": [[9, "0643 Muller Vista", "Suite 383", null]], "gt": [[9, "0643 Muller Vista", "Suite 383"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT a.address_id, a.line_1, a.line_2 \nFROM Addresses a \nJOIN Students s ON a.address_id = s.permanent_address_id \nGROUP BY a.address_id \nORDER BY COUNT(s.student_id) DESC \nLIMIT 1", "match": {"match": true, "result": [[9, "0643 Muller Vista", "Suite 383"]]}}
{"result": "SELECT CAST(SUM(transcript_date) AS REAL) / COUNT(transcript_id) as average_transcript_date \nFROM Transcripts", "match": {"match": true, "result": [[1989.9333333333334]]}}
{"result": "SELECT AVG(`transcript_date`) FROM `Transcripts`", "match": {"match": true, "result": [[1989.9333333333334]]}}
{"result": "SELECT T1.transcript_date, T1.other_details \nFROM Transcripts AS T1 \nWHERE transcript_date = ( SELECT MIN(transcript_date) FROM Transcripts );", "match": {"match": true, "result": [["1975-05-06 12:04:47", null]]}}
{"result": "SELECT MIN(transcript_date), other_details \nFROM Transcripts", "match": {"match": true, "result": [["1975-05-06 12:04:47", null]]}}
{"result": "SELECT COUNT(*) FROM Transcripts", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) FROM Transcripts", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT MAX(`transcript_date`) FROM `Transcripts`", "match": {"match": true, "result": [["2013-06-30 13:01:40"]]}}
{"result": "SELECT MAX(transcript_date) FROM `Transcripts`", "match": {"match": true, "result": [["2013-06-30 13:01:40"]]}}
{"result": "SELECT COUNT(DISTINCT tc.student_course_id), sce.student_enrolment_id \nFROM Transcript_Contents tc\nJOIN Student_Enrolment_Courses sce ON tc.student_course_id = sce.student_course_id\nGROUP BY sce.student_enrolment_id", "match": {"match": false, "result": [[1, 2], [1, 4], [3, 5], [2, 9], [1, 13], [1, 14]], "gt": [[4, 0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.student_course_id, COUNT(T1.student_course_id) as max_courses, T2.student_enrolment_id \nFROM Transcript_Contents T1 \nJOIN Student_Enrolment_Courses T2 ON T1.student_course_id = T2.student_course_id \nGROUP BY T1.student_course_id \nORDER BY COUNT(T1.student_course_id) DESC LIMIT 1", "match": {"match": false, "result": [[0, 4, 2]], "gt": [[4, 0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.transcript_id \nFROM Transcripts AS T1 \nJOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id \nGROUP BY T1.transcript_id \nORDER BY COUNT(T2.student_course_id) ASC \nLIMIT 1", "match": {"match": false, "result": [[2]], "gt": [["1975-10-28 15:16:51", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT transcript_date, transcript_id FROM Transcripts GROUP BY transcript_id ORDER BY COUNT(student_course_id) ASC LIMIT 1", "match": {"match": false, "error": "Query execution failed with error: no such column: student_course_id"}}
{"result": "SELECT T2.semester_name \nFROM Student_Enrolment T1 \nJOIN Semesters T2 ON T1.semester_id = T2.semester_id \nJOIN Degree_Programs T3 ON T1.degree_program_id = T3.degree_program_id \nWHERE T3.degree_summary_name IN ('Master Degree', 'Bachelor Degree') \nGROUP BY T2.semester_name", "match": {"match": false, "result": [], "gt": [[13]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.semester_id \nFROM (\n    SELECT T1.semester_id \n    FROM Semesters T1 \n    JOIN Student_Enrolment T2 ON T1.semester_id = T2.semester_id \n    JOIN Degree_Programs T3 ON T2.degree_program_id = T3.degree_program_id \n    WHERE T3.degree_summary_name = 'Masters' GROUP BY T1.semester_id INTERSECT \n    SELECT T1.semester_id \n    FROM Semesters T1 \n    JOIN Student_Enrolment T2 ON T1.semester_id = T2.semester_id \n    JOIN Degree_Programs T3 ON T2.degree_program_id = T3.degree_program_id \n    WHERE T3.degree_summary_name = 'Bachelors' GROUP BY T1.semester_id\n) T", "match": {"match": false, "result": [], "gt": [[13]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT `current_address_id`) FROM `Students`;", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT DISTINCT T1.line_1, T1.line_2, T1.line_3, T1.city, T1.zip_postcode, T1.state_province_county, T1.country \nFROM Addresses AS T1 \nINNER JOIN Students AS T2 ON T1.address_id = T2.current_address_id", "match": {"match": false, "result": [["7081 Eda Center", "Suite 830", null, "Rutherfordtown", "839", "Delaware", "Kyrgyz Republic"], ["979 Haag Shores Suite 656", "Apt. 468", null, "Prohaskafort", "590", "SouthDakota", "Lesotho"], ["0643 Muller Vista", "Suite 383", null, "Port Elvisfurt", "777", "NorthCarolina", "Gabon"], ["193 Marlin Brook", "Apt. 406", null, "Herzoghaven", "068", "Arkansas", "Cook Islands"], ["16998 Mraz Lodge", "Apt. 689", null, "North Omer", "902", "Kentucky", "Gibraltar"], ["74046 Metz Walk Apt. 113", "Suite 674", null, "Port Oceane", "669", "Wyoming", "Norfolk Island"], ["2294 Grant Square Apt. 235", "Apt. 370", null, "Port Chelsea", "148", "Virginia", "Iceland"], ["3999 Aufderhar Ways Suite 593", "Apt. 388", null, "Lake Laishafurt", "943", "Kentucky", "Burundi"], ["186 Evan Motorway Apt. 409", "Suite 079", null, "Lake Careyberg", "895", "Kentucky", "New Caledonia"]], "gt": [[9]], "error": "Query result does not match ground truth."}}
{"result": "SELECT * \nFROM Students \nORDER BY first_name, middle_name, last_name DESC", "match": {"match": false, "result": [[8, 1, 5, "Delaney", "Judd", "Ankunding", "03174364122", "dell43@example.net", "402", "1982-02-14 08:46:35", "2004-12-08 05:29:11", "voluptatem"], [13, 9, 8, "Deon", "Brooklyn", "Weimann", "(213)445-0399x85208", "jhuel@example.com", "68095", "1986-02-24 21:12:23", "2014-05-30 23:32:02", "assumenda"], [7, 15, 3, "Frida", "Aisha", "Huel", "1-879-796-8987x164", "baumbach.lucious@example.org", "668", "2018-03-13 09:56:22", "1997-11-16 08:54:33", "dolorum"], [11, 14, 4, "Gregg", "Mossie", "Schuppe", "(462)246-7921", "nbruen@example.org", "494", "1989-05-24 23:31:29", "1975-10-09 00:49:27", "omnis"], [10, 15, 14, "Helga", "Cleve", "Mohr", "677.401.9382", "nya.lesch@example.net", "43", "2009-09-25 00:14:25", "2017-07-09 21:38:43", "rerum"], [2, 12, 5, "Hobart", "Lorenz", "Balistreri", "1-009-710-5151", "swift.kolby@example.com", "304246", "1976-10-26 02:33:06", "2013-10-05 17:41:28", "autem"], [4, 7, 11, "Jarvis", "Aaliyah", "Carroll", "09700166582", "jillian26@example.net", "141072406", "2014-03-28 05:48:23", "2007-08-02 04:12:58", "atque"], [15, 2, 9, "Jett", "Alberta", "Jaskolski", "877.549.9067x8723", "mya88@example.org", "156", "1982-06-19 13:15:18", "1982-06-11 00:25:39", "omnis"], [14, 12, 11, "Jordy", "Osborne", "Rempel", "(605)919-3594x3661", "gracie29@example.com", "34458427", "2004-12-24 12:36:46", "1999-08-24 00:07:10", "et"], [5, 9, 9, "Milton", "Vaughn", "Christiansen", "171-642-5684", "lhartmann@example.org", "", "1973-05-19 19:12:46", "2007-11-28 12:50:21", "laborum"], [12, 14, 9, "Orrin", "Neal", "Kemmer", "(982)153-1469x1733", "beth42@example.org", "6274274", "2005-12-15 08:42:10", "2006-08-04 17:26:49", "non"], [9, 2, 15, "Reva", "Golda", "Osinski", "(507)365-8405", "qo'kon@example.com", "39", "2017-01-04 08:10:25", "1990-09-01 05:03:27", "nesciunt"], [6, 6, 3, "Stanford", "Mona", "Rogahn", "436.613.7683", "skassulke@example.net", "248", "1997-03-20 16:47:25", "2016-04-09 12:27:04", "qui"], [1, 10, 15, "Timmothy", "Anna", "Ward", "(096)889-8954x524", "erwin.zboncak@example.com", "965", "1971-02-05 07:28:23", "1971-05-17 19:28:49", "quia"], [3, 9, 5, "Warren", "Violet", "Gleichner", "07661787471", "johns.unique@example.net", "3", "2007-08-29 23:25:41", "2007-03-31 09:53:19", "facilis"]], "gt": [["voluptatem"], ["rerum"], ["quia"], ["qui"], ["omnis"], ["omnis"], ["non"], ["nesciunt"], ["laborum"], ["facilis"], ["et"], ["dolorum"], ["autem"], ["atque"], ["assumenda"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT other_student_details \nFROM Students \nORDER BY other_student_details DESC;", "match": {"match": true, "result": [["voluptatem"], ["rerum"], ["quia"], ["qui"], ["omnis"], ["omnis"], ["non"], ["nesciunt"], ["laborum"], ["facilis"], ["et"], ["dolorum"], ["autem"], ["atque"], ["assumenda"]]}}
{"result": "SELECT * FROM Sections WHERE section_name = 'h';", "match": {"match": false, "result": [[8, 14, "h", "et", null]], "gt": [["et"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT `section_description` \nFROM `Sections` \nWHERE `section_name` = 'h'", "match": {"match": true, "result": [["et"]]}}
{"result": "SELECT T1.first_name \nFROM Students AS T1 \nINNER JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id \nWHERE T2.country = 'Haiti' OR T1.cell_mobile_number = '09700166582'", "match": {"match": false, "result": [["Hobart"], ["Warren"], ["Jarvis"], ["Delaney"]], "gt": [["Jarvis"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.first_name \nFROM Students AS T \nWHERE T.permanent_address_id IN (\n    SELECT address_id \n    FROM Addresses \n    WHERE country = 'Haiti'\n) \nOR T.cell_mobile_number = '09700166582';", "match": {"match": false, "result": [["Hobart"], ["Warren"], ["Jarvis"], ["Delaney"]], "gt": [["Jarvis"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Title FROM Cartoon ORDER BY Title ASC", "match": {"match": true, "result": [["Dawn of the Dead Man!"], ["Day of the Dark Knight!"], ["Deep Cover for Batman!"], ["Enter the Outsiders!"], ["Evil Under the Sea!"], ["Fall of the Blue Beetle!"], ["Invasion of the Secret Santas!"], ["Journey to the Center of the Bat!"], ["Return of the Fearsome Fangs!"], ["Terror on Dinosaur Island!"], ["The Eyes of Despero!"], ["The Rise of the Blue Beetle!"]]}}
{"result": "SELECT Title \nFROM Cartoon \nORDER BY Title ASC", "match": {"match": true, "result": [["Dawn of the Dead Man!"], ["Day of the Dark Knight!"], ["Deep Cover for Batman!"], ["Enter the Outsiders!"], ["Evil Under the Sea!"], ["Fall of the Blue Beetle!"], ["Invasion of the Secret Santas!"], ["Journey to the Center of the Bat!"], ["Return of the Fearsome Fangs!"], ["Terror on Dinosaur Island!"], ["The Eyes of Despero!"], ["The Rise of the Blue Beetle!"]]}}
{"result": "SELECT Title FROM Cartoon \nWHERE Directed_by = 'Ben Jones';", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Day of the Dark Knight!"], ["Dawn of the Dead Man!"], ["The Eyes of Despero!"]]}}
{"result": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Day of the Dark Knight!"], ["Dawn of the Dead Man!"], ["The Eyes of Despero!"]]}}
{"result": "SELECT COUNT(id) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(id) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT T1.Title, T1.Directed_by \nFROM Cartoon AS T1 \nORDER BY T1.`Original_air_date`", "match": {"match": true, "result": [["Invasion of the Secret Santas!", "Brandon Vietti"], ["Evil Under the Sea!", "Michael Chang"], ["Return of the Fearsome Fangs!", "Brandon Vietti"], ["Deep Cover for Batman!", "Michael Chang"], ["The Eyes of Despero!", "Ben Jones"], ["Dawn of the Dead Man!", "Ben Jones"], ["Day of the Dark Knight!", "Ben Jones"], ["Fall of the Blue Beetle!", "Brandon Vietti"], ["Journey to the Center of the Bat!", "Michael Chang"], ["Enter the Outsiders!", "Michael Chang"], ["The Rise of the Blue Beetle!", "Ben Jones"], ["Terror on Dinosaur Island!", "Brandon Vietti"]]}}
{"result": "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date", "match": {"match": true, "result": [["Invasion of the Secret Santas!", "Brandon Vietti"], ["Evil Under the Sea!", "Michael Chang"], ["Return of the Fearsome Fangs!", "Brandon Vietti"], ["Deep Cover for Batman!", "Michael Chang"], ["The Eyes of Despero!", "Ben Jones"], ["Dawn of the Dead Man!", "Ben Jones"], ["Day of the Dark Knight!", "Ben Jones"], ["Fall of the Blue Beetle!", "Brandon Vietti"], ["Journey to the Center of the Bat!", "Michael Chang"], ["Enter the Outsiders!", "Michael Chang"], ["The Rise of the Blue Beetle!", "Ben Jones"], ["Terror on Dinosaur Island!", "Brandon Vietti"]]}}
{"result": "SELECT Title \nFROM Cartoon \nWHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Terror on Dinosaur Island!"], ["Day of the Dark Knight!"], ["Invasion of the Secret Santas!"], ["Dawn of the Dead Man!"], ["Fall of the Blue Beetle!"], ["The Eyes of Despero!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT Title \nFROM Cartoon \nWHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Terror on Dinosaur Island!"], ["Day of the Dark Knight!"], ["Invasion of the Secret Santas!"], ["Dawn of the Dead Man!"], ["Fall of the Blue Beetle!"], ["The Eyes of Despero!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT Country, COUNT(id) \nFROM TV_Channel \nGROUP BY Country \nORDER BY COUNT(id) DESC", "match": {"match": false, "result": [["Italy", 12], ["United Kingdom", 2], ["Poland", 1]], "gt": [["Italy", 12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Country, COUNT(id) FROM \"TV_Channel\" GROUP BY Country ORDER BY COUNT(id) DESC LIMIT 1", "match": {"match": true, "result": [["Italy", 12]]}}
{"result": "SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM \"TV_Channel\"", "match": {"match": true, "result": [[15, 1]]}}
{"result": "SELECT DISTINCT series_name, Content FROM TV_Channel", "match": {"match": false, "result": [["Sky Radio", "music"], ["Sky Music", "music"], ["Music Box Italia", "music"], ["MTV Hits", "music"], ["MTV Classic", "music"], ["MTV Rocks", "music"], ["MTV Dance", "music"], ["MTV Music", "music"], ["MTV Live HD", "music"], ["Radio Capital TiV\u00f9", "music"], ["myDeejay", "music"], ["Match Music", "music"], ["Rock TV", "music"], ["Hip Hop TV", "music"], ["Classica", "music"]], "gt": [[15, 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Content FROM \"TV_Channel\" WHERE series_name = 'Sky Radio'", "match": {"match": true, "result": [["music"]]}}
{"result": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'", "match": {"match": true, "result": [["music"]]}}
{"result": "SELECT `Package_Option` FROM `TV_Channel` WHERE `series_name` = 'Sky Radio'", "match": {"match": true, "result": [["Sky Famiglia"]]}}
{"result": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'", "match": {"match": true, "result": [["Sky Famiglia"]]}}
{"result": "SELECT COUNT(id) FROM \"TV_Channel\" WHERE Language = 'English'", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(id) FROM TV_Channel WHERE Language = 'English'", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Language, COUNT(id) FROM TV_Channel GROUP BY Language ORDER BY COUNT(id) ASC LIMIT 1", "match": {"match": true, "result": [["English", 3]]}}
{"result": "SELECT Language, COUNT(Language) AS LanguageCount \nFROM TV_Channel \nGROUP BY Language \nORDER BY LanguageCount ASC \nLIMIT 1", "match": {"match": true, "result": [["English", 3]]}}
{"result": "SELECT `Language`, COUNT(`Language`) FROM \"TV_Channel\" GROUP BY `Language`", "match": {"match": true, "result": [["English", 3], ["Italian", 12]]}}
{"result": "SELECT Language, COUNT(Language) FROM TV_Channel GROUP BY Language", "match": {"match": true, "result": [["English", 3], ["Italian", 12]]}}
{"result": "SELECT T2.series_name \nFROM \"Cartoon\" AS T1 \nINNER JOIN TV_Channel AS T2 \nON T1.Channel = T2.id \nWHERE T1.Title = 'The Rise of the Blue Beetle!';", "match": {"match": true, "result": [["Sky Radio"]]}}
{"result": "SELECT T1.series_name \nFROM TV_Channel AS T1 \nJOIN Cartoon AS T2 ON T1.id = T2.Channel \nWHERE T2.Title = 'The Rise of the Blue Beetle';", "match": {"match": false, "result": [], "gt": [["Sky Radio"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Title \nFROM Cartoon AS T1 \nJOIN TV_Channel AS T2 \nON T1.Channel = T2.id \nWHERE T2.series_name = 'Sky Radio';", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT T2.Title \nFROM TV_Channel AS T1 \nJOIN Cartoon AS T2 ON T1.id = T2.Channel \nWHERE T1.series_name = 'Sky Radio'", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT Episode FROM `TV_series` ORDER BY Rating ASC", "match": {"match": true, "result": [["The Hanged Man"], ["Double Down"], ["Home By Another Way"], ["Keepers"], ["Emily"], ["Blowback"], ["The Legend of Dylan McCleen"], ["Winterland"], ["The Year of the Rabbit"], ["Game Three"], ["Friendly Skies"], ["A Love of a Lifetime"]]}}
{"result": "SELECT Episode \nFROM TV_series \nORDER BY Rating DESC;", "match": {"match": false, "result": [["A Love of a Lifetime"], ["Friendly Skies"], ["Game Three"], ["The Year of the Rabbit"], ["Winterland"], ["The Legend of Dylan McCleen"], ["Keepers"], ["Emily"], ["Blowback"], ["Home By Another Way"], ["Double Down"], ["The Hanged Man"]], "gt": [["The Hanged Man"], ["Double Down"], ["Home By Another Way"], ["Keepers"], ["Emily"], ["Blowback"], ["The Legend of Dylan McCleen"], ["Winterland"], ["The Year of the Rabbit"], ["Game Three"], ["Friendly Skies"], ["A Love of a Lifetime"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT TOP 3 Episode, Rating \nFROM \"TV_series\" \nORDER BY Rating DESC", "match": {"match": false, "error": "Query execution failed with error: near \"3\": syntax error"}}
{"result": "SELECT * FROM TV_series ORDER BY Rating DESC LIMIT 3", "match": {"match": false, "result": [[1.0, "A Love of a Lifetime", "September 24, 2007", "5.8", 9.0, "3.5/9", "9.16", 43.0, "700"], [2.0, "Friendly Skies", "October 1, 2007", "5.3", 9.0, "3.2/8", "8.23", 50.0, "701"], [3.0, "Game Three", "October 8, 2007", "4.4", 7.0, "2.9/7", "6.94", 61.0, "707"]], "gt": [["A Love of a Lifetime", "5.8"], ["Friendly Skies", "5.3"], ["Game Three", "4.4"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MIN(Share) as Min_Series_Share, MAX(Share) as Max_Series_Share FROM \"TV_series\"", "match": {"match": false, "result": [[5.0, 9.0]], "gt": [[9.0, 5.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(Share) as Max_Series_Share, MIN(Share) as Min_Series_Share FROM TV_series", "match": {"match": true, "result": [[9.0, 5.0]]}}
{"result": "SELECT Air_Date FROM `TV_series` WHERE Episode = 'A Love of a Lifetime'", "match": {"match": true, "result": [["September 24, 2007"]]}}
{"result": "SELECT \"Air_Date\" \nFROM \"TV_series\" \nWHERE \"Episode\" = 'A Love of a Lifetime';", "match": {"match": true, "result": [["September 24, 2007"]]}}
{"result": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'", "match": {"match": true, "result": [[43.0]]}}
{"result": "SELECT T2.Weekly_Rank \nFROM TV_Channel AS T1 \nINNER JOIN TV_series AS T2 \nON T1.id = T2.Channel \nWHERE T2.Episode = 'A Love of a Lifetime';", "match": {"match": true, "result": [[43.0]]}}
{"result": "SELECT T2.series_name \nFROM TV_series AS T1 \nINNER JOIN TV_Channel AS T2 \nON T1.Channel = T2.id \nWHERE T1.Episode = 'A Love of a Lifetime';", "match": {"match": true, "result": [["Sky Radio"]]}}
{"result": "SELECT T2.Series_name FROM TV_series AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Episode = 'A Love of a Lifetime'", "match": {"match": true, "result": [["Sky Radio"]]}}
{"result": "SELECT T2.Episode \nFROM \"TV_Channel\" AS T1 \nINNER JOIN \"TV_series\" AS T2 \nON T1.id = T2.Channel \nWHERE T1.series_name = 'Sky Radio';", "match": {"match": true, "result": [["A Love of a Lifetime"], ["Keepers"]]}}
{"result": "SELECT T2.Episode \nFROM TV_Channel AS T1 \nINNER JOIN TV_series AS T2 ON T1.id = T2.Channel \nWHERE T1.series_name = 'Sky Radio'", "match": {"match": true, "result": [["A Love of a Lifetime"], ["Keepers"]]}}
{"result": "SELECT COUNT(T1.id), T1.Directed_by \nFROM Cartoon AS T1 \nWHERE T1.Directed_by IN ('Name1', 'Name2', 'Name3')", "match": {"match": false, "result": [[0, null]], "gt": [[4, "Ben Jones"], [4, "Brandon Vietti"], [4, "Michael Chang"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by", "match": {"match": false, "result": [["Ben Jones", 4], ["Brandon Vietti", 4], ["Michael Chang", 4]], "gt": [[4, "Ben Jones"], [4, "Brandon Vietti"], [4, "Michael Chang"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.`Production_code`, T1.`Channel` \nFROM Cartoon T1 \nINNER JOIN ( SELECT MAX(`Original_air_date`) AS max_date \n             FROM Cartoon \n           ) T2 \nON T1.`Original_air_date` = T2.max_date", "match": {"match": true, "result": [[102.0, "701"]]}}
{"result": "SELECT MAX(`Production_code`), `Channel` FROM Cartoon", "match": {"match": false, "result": [[112.0, "707"]], "gt": [[102.0, "701"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes'", "match": {"match": false, "result": [], "gt": [["Sky Famiglia + Sky HD", "MTV Live HD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Package_Option, T1.series_name \nFROM TV_Channel AS T1 \nWHERE T1.Hight_definition_TV = 'yes'", "match": {"match": true, "result": [["Sky Famiglia + Sky HD", "MTV Live HD"]]}}
{"result": "SELECT T2.Country \nFROM Cartoon \nINNER JOIN TV_Channel AS T2 ON Cartoon.Channel = T2.id \nWHERE Written_by = 'Todd Casey';", "match": {"match": true, "result": [["United Kingdom"], ["Italy"]]}}
{"result": "SELECT T1.Country \nFROM TV_Channel AS T1 \nJOIN Cartoon AS T2 ON T1.id = T2.Channel \nWHERE T2.Written_by = 'Todd Casey';", "match": {"match": true, "result": [["United Kingdom"], ["Italy"]]}}
{"result": "SELECT T1.Country \nFROM TV_Channel AS T1 \nLEFT JOIN Cartoon AS T2 \nON T1.id = T2.Channel \nWHERE T2.Written_by IS NULL OR T2.Written_by != 'Todd Casey'", "match": {"match": false, "result": [["Italy"], ["Italy"], ["Italy"], ["Italy"], ["Italy"], ["United Kingdom"], ["United Kingdom"], ["United Kingdom"], ["Italy"], ["Poland"], ["Italy"], ["Italy"], ["Italy"], ["Italy"], ["Italy"], ["Italy"]], "gt": [["Poland"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Country \nFROM Cartoon AS T1 \nJOIN TV_Channel AS T2 ON T1.Channel = T2.id \nWHERE T1.Written_by = 'Todd Casey'", "match": {"match": false, "result": [["United Kingdom"], ["Italy"]], "gt": [["Poland"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.\"series_name\", T1.\"Country\"\nFROM TV_Channel AS T1\nJOIN Cartoon AS T2 ON T1.id = T2.Channel\nWHERE T2.Directed_by IN ('Ben Jones', 'Michael Chang')", "match": {"match": false, "result": [["Sky Radio", "Italy"], ["Music Box Italia", "Italy"], ["MTV Hits", "Italy"], ["MTV Rocks", "United Kingdom"], ["MTV Dance", "United Kingdom"], ["MTV Dance", "United Kingdom"], ["Classica", "Italy"], ["MTV Dance", "United Kingdom"]], "gt": [["MTV Dance", "United Kingdom"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.series_name, T1.Country \nFROM TV_Channel AS T1 \nJOIN Cartoon AS T2 \nON T1.id = T2.Channel \nWHERE T2.Directed_by = 'Ben Jones' OR T2.Directed_by = 'Michael Chang';", "match": {"match": false, "result": [["Sky Radio", "Italy"], ["Music Box Italia", "Italy"], ["MTV Hits", "Italy"], ["MTV Rocks", "United Kingdom"], ["MTV Dance", "United Kingdom"], ["MTV Dance", "United Kingdom"], ["Classica", "Italy"], ["MTV Dance", "United Kingdom"]], "gt": [["MTV Dance", "United Kingdom"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Pixel_aspect_ratio_PAR, Country \nFROM TV_Channel \nWHERE Language != 'English'", "match": {"match": true, "result": [["4:3", "Italy"], ["4:3", "Italy"], ["4:3 / 16:9", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3", "Italy"], ["4:3", "Italy"]]}}
{"result": "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'", "match": {"match": true, "result": [["4:3", "Italy"], ["4:3", "Italy"], ["4:3 / 16:9", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3", "Italy"], ["4:3", "Italy"]]}}
{"result": "SELECT id FROM TV_Channel \nGROUP BY Country \nHAVING COUNT(*)  >  2", "match": {"match": true, "result": [["700"]]}}
{"result": "SELECT \"id\" \nFROM TV_Channel \nGROUP BY \"id\" \nHAVING COUNT(\"id\") > 2", "match": {"match": false, "result": [], "gt": [["700"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT id FROM TV_Channel \nWHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')", "match": {"match": true, "result": [["701"], ["703"], ["705"], ["706"], ["708"], ["709"], ["713"], ["714"], ["715"], ["717"], ["719"]]}}
{"result": "SELECT id \nFROM TV_Channel \nWHERE id NOT IN (\n  SELECT Channel \n  FROM Cartoon \n  WHERE Directed_by = 'Ben Jones'\n);", "match": {"match": true, "result": [["701"], ["703"], ["705"], ["706"], ["708"], ["709"], ["713"], ["714"], ["715"], ["717"], ["719"]]}}
{"result": "SELECT T1.Package_Option \nFROM TV_Channel AS T1 \nWHERE T1.id NOT IN (SELECT T2.Channel \nFROM Cartoon AS T2 \nWHERE T2.Directed_by = 'Ben Jones');", "match": {"match": true, "result": [["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["no ( FTV )"], ["Sky Famiglia + Sky HD"], ["no ( FTV )"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"]]}}
{"result": "SELECT T1.Package_Option \nFROM TV_Channel AS T1 \nWHERE T1.id NOT IN (SELECT T2.Channel \n                     FROM Cartoon AS T2 \n                     WHERE T2.Directed_by = 'Ben Jones')", "match": {"match": true, "result": [["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["no ( FTV )"], ["Sky Famiglia + Sky HD"], ["no ( FTV )"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"]]}}
{"result": "SELECT COUNT(Poker_Player_ID) FROM poker_player", "match": {"match": true, "result": [[5]]}}
{"result": "SELECT COUNT(Poker_Player_ID) FROM poker_player", "match": {"match": true, "result": [[5]]}}
{"result": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "match": {"match": true, "result": [[596462.0], [476090.0], [189233.0], [142800.0], [104871.0]]}}
{"result": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "match": {"match": true, "result": [[596462.0], [476090.0], [189233.0], [142800.0], [104871.0]]}}
{"result": "SELECT \"Final_Table_Made\", \"Best_Finish\" FROM \"poker_player\";", "match": {"match": true, "result": [[42.0, 1.0], [10.0, 2.0], [21.0, 1.0], [19.0, 2.0], [26.0, 3.0]]}}
{"result": "SELECT Final_Table_Made, Best_Finish FROM poker_player", "match": {"match": true, "result": [[42.0, 1.0], [10.0, 2.0], [21.0, 1.0], [19.0, 2.0], [26.0, 3.0]]}}
{"result": "SELECT AVG(Earnings) FROM poker_player", "match": {"match": true, "result": [[301891.2]]}}
{"result": "SELECT AVG(Earnings) FROM poker_player", "match": {"match": true, "result": [[301891.2]]}}
{"result": "SELECT MAX(Money_Rank) FROM poker_player", "match": {"match": false, "result": [[166.0]], "gt": [[58.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(Money_Rank) FROM poker_player", "match": {"match": false, "result": [[166.0]], "gt": [[58.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000", "match": {"match": true, "result": [[26.0]]}}
{"result": "SELECT MAX(`Final_Table_Made`) \nFROM poker_player \nWHERE Earnings < 200000;", "match": {"match": true, "result": [[26.0]]}}
{"result": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID = T2.People_ID", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Teodor Salparov"], ["Yevgeni Sivozhelez"], ["Maksim Botin"], ["Semen Poltavskiy"]]}}
{"result": "SELECT T2.Name \nFROM poker_player AS T1 \nINNER JOIN people AS T2 ON T1.People_ID = T2.People_ID", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Teodor Salparov"], ["Yevgeni Sivozhelez"], ["Maksim Botin"], ["Semen Poltavskiy"]]}}
{"result": "SELECT T2.Name \nFROM poker_player AS T1 \nINNER JOIN people AS T2 ON T1.People_ID = T2.People_ID \nWHERE T1.Earnings > 300000;", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Maksim Botin"]]}}
{"result": "SELECT p.Name \nFROM people p \nJOIN poker_player pp ON p\"People_ID\" = pp\"People_ID\" \nWHERE pp.Earnings > 300000;", "match": {"match": false, "error": "Query execution failed with error: near \"\"People_ID\"\": syntax error"}}
{"result": "SELECT T2.Name \nFROM poker_player AS T1 \nINNER JOIN people AS T2 \nON T1.People_ID = T2.People_ID \nORDER BY T1.Final_Table_Made ASC;", "match": {"match": true, "result": [["Teodor Salparov"], ["Maksim Botin"], ["Yevgeni Sivozhelez"], ["Semen Poltavskiy"], ["Aleksey Ostapenko"]]}}
{"result": "SELECT T1.Name \nFROM people AS T1 \nINNER JOIN poker_player AS T2 \nON T1.People_ID = T2.People_ID \nORDER BY T2.Final_Table_Made ASC", "match": {"match": true, "result": [["Teodor Salparov"], ["Maksim Botin"], ["Yevgeni Sivozhelez"], ["Semen Poltavskiy"], ["Aleksey Ostapenko"]]}}
{"result": "SELECT T2.Birth_Date \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID = T2.People_ID \nWHERE T1.Earnings = (SELECT MIN(Earnings) FROM poker_player);", "match": {"match": true, "result": [["August 8, 1986"]]}}
{"result": "SELECT T2.`Birth_Date` \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.`People_ID` = T2.`People_ID` \nORDER BY T1.`Earnings` ASC \nLIMIT 1;", "match": {"match": true, "result": [["August 8, 1986"]]}}
{"result": "SELECT T1.\"Money_Rank\" \nFROM \"poker_player\" AS T1 \nJOIN \"people\" AS T2 ON T1.\"People_ID\" = T2.\"People_ID\" \nWHERE T2.\"Height\" = ( SELECT MAX(\"Height\") FROM \"people\" );", "match": {"match": true, "result": [[68.0]]}}
{"result": "SELECT T1.\"Money_Rank\" \nFROM \"poker_player\" T1 \nJOIN \"people\" T2 ON T1.\"People_ID\" = T2.\"People_ID\" \nORDER BY T2.\"Height\" DESC \nLIMIT 1", "match": {"match": true, "result": [[68.0]]}}
{"result": "SELECT AVG(T2.Earnings) \nFROM people AS T1 \nINNER JOIN poker_player AS T2 \nON T1.People_ID = T2.People_ID \nWHERE T1.Height > 200;", "match": {"match": true, "result": [[309445.0]]}}
{"result": "SELECT AVG(Earnings) \nFROM poker_player \nWHERE \"People_ID\" IN (SELECT People_ID \n                      FROM people \n                      WHERE Height > 200);", "match": {"match": true, "result": [[309445.0]]}}
{"result": "SELECT T1.Name \nFROM people AS T1 \nJOIN poker_player AS T2 ON T1.People_ID = T2.People_ID \nORDER BY T2.Earnings DESC", "match": {"match": true, "result": [["Maksim Botin"], ["Aleksey Ostapenko"], ["Teodor Salparov"], ["Semen Poltavskiy"], ["Yevgeni Sivozhelez"]]}}
{"result": "SELECT T2.Name FROM poker_player AS T1 \nINNER JOIN people AS T2 \nON T1.People_ID = T2.People_ID \nORDER BY T1.Earnings DESC;", "match": {"match": true, "result": [["Maksim Botin"], ["Aleksey Ostapenko"], ["Teodor Salparov"], ["Semen Poltavskiy"], ["Yevgeni Sivozhelez"]]}}
{"result": "SELECT Nationality, COUNT(People_ID) FROM people GROUP BY Nationality", "match": {"match": true, "result": [["Bulgaria", 1], ["Russia", 6]]}}
{"result": "SELECT Nationality, COUNT(People_ID) AS Count \nFROM people \nGROUP BY Nationality", "match": {"match": true, "result": [["Bulgaria", 1], ["Russia", 6]]}}
{"result": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(People_ID) DESC LIMIT 1", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(Nationality) DESC LIMIT 1", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(Nationality) >= 2", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(Nationality) >= 2", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Name, Birth_Date FROM people ORDER BY Name ASC;", "match": {"match": true, "result": [["Aleksey Ostapenko", "May 26, 1986"], ["Maksim Botin", "July 14, 1983"], ["Roman Bragin", "April 17, 1987"], ["Semen Poltavskiy", "February 8, 1981"], ["Sergey Grankin", "January 22, 1987"], ["Teodor Salparov", "August 16, 1982"], ["Yevgeni Sivozhelez", "August 8, 1986"]]}}
{"result": "SELECT `Name`, `Birth_Date` \nFROM `people` \nORDER BY `Name` ASC;", "match": {"match": true, "result": [["Aleksey Ostapenko", "May 26, 1986"], ["Maksim Botin", "July 14, 1983"], ["Roman Bragin", "April 17, 1987"], ["Semen Poltavskiy", "February 8, 1981"], ["Sergey Grankin", "January 22, 1987"], ["Teodor Salparov", "August 16, 1982"], ["Yevgeni Sivozhelez", "August 8, 1986"]]}}
{"result": "SELECT Name \nFROM people \nWHERE Nationality != 'Russia'", "match": {"match": true, "result": [["Teodor Salparov"]]}}
{"result": "SELECT Name FROM people WHERE Nationality != 'Russian'", "match": {"match": false, "result": [["Aleksey Ostapenko"], ["Teodor Salparov"], ["Roman Bragin"], ["Sergey Grankin"], ["Yevgeni Sivozhelez"], ["Maksim Botin"], ["Semen Poltavskiy"]], "gt": [["Teodor Salparov"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name \nFROM people \nWHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "match": {"match": true, "result": [["Roman Bragin"], ["Sergey Grankin"]]}}
{"result": "SELECT Name \nFROM people \nWHERE People_ID NOT IN (SELECT People_ID FROM poker_player);", "match": {"match": true, "result": [["Roman Bragin"], ["Sergey Grankin"]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM people", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM people", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(*) FROM conductor", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT COUNT(Conductor_ID) FROM conductor", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT Name \nFROM conductor \nORDER BY Age ASC", "match": {"match": true, "result": [["Antal Dor\u00e1ti"], ["Igor Stravinsky"], ["Colin Davis"], ["Michael Tilson Thomas"], ["Paul Jorgensen"], ["Antal Brown"], ["Charles Dutoit"], ["Seiji Ozawa"], ["Valeri Gergiev"], ["Pierre Boulez"], ["Gerard Schwarz"], ["Robert Craft"]]}}
{"result": "SELECT Name \nFROM conductor \nORDER BY Age", "match": {"match": true, "result": [["Antal Dor\u00e1ti"], ["Igor Stravinsky"], ["Colin Davis"], ["Michael Tilson Thomas"], ["Paul Jorgensen"], ["Antal Brown"], ["Charles Dutoit"], ["Seiji Ozawa"], ["Valeri Gergiev"], ["Pierre Boulez"], ["Gerard Schwarz"], ["Robert Craft"]]}}
{"result": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "match": {"match": true, "result": [["Igor Stravinsky"], ["Paul Jorgensen"], ["Charles Dutoit"], ["Pierre Boulez"], ["Robert Craft"], ["Michael Tilson Thomas"]]}}
{"result": "SELECT Name \nFROM conductor \nWHERE Nationality != 'USA';", "match": {"match": true, "result": [["Igor Stravinsky"], ["Paul Jorgensen"], ["Charles Dutoit"], ["Pierre Boulez"], ["Robert Craft"], ["Michael Tilson Thomas"]]}}
{"result": "SELECT Record_Company \nFROM orchestra \nORDER BY Year_of_Founded DESC", "match": {"match": true, "result": [["Columbia Masterworks"], ["Philips"], ["Philips Classics Records"], ["RCA"], ["EMI"], ["Koch Records / Naxos Records"], ["Decca Records"], ["Mercury Records"], ["Deutsche Grammophon"], ["Kultur"], ["Decca Records"], ["Delos Records"]]}}
{"result": "SELECT Record_Company \nFROM `orchestra` \nORDER BY Year_of_Founded DESC", "match": {"match": true, "result": [["Columbia Masterworks"], ["Philips"], ["Philips Classics Records"], ["RCA"], ["EMI"], ["Koch Records / Naxos Records"], ["Decca Records"], ["Mercury Records"], ["Deutsche Grammophon"], ["Kultur"], ["Decca Records"], ["Delos Records"]]}}
{"result": "SELECT AVG(Attendance) FROM show", "match": {"match": true, "result": [[1326.4]]}}
{"result": "SELECT AVG(`Attendance`) \nFROM `show`", "match": {"match": true, "result": [[1326.4]]}}
{"result": "SELECT MAX(`Share`) , MIN(`Share`) FROM performance WHERE `Type` != 'Live final'", "match": {"match": true, "result": [["44.7%", "22.7%"]]}}
{"result": "SELECT MAX(`Share`) , MIN(`Share`)\nFROM performance\nWHERE `Type` != 'Live final'", "match": {"match": true, "result": [["44.7%", "22.7%"]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM conductor", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM conductor", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "match": {"match": true, "result": [["Robert Craft"], ["Antal Brown"], ["Gerard Schwarz"], ["Valeri Gergiev"], ["Charles Dutoit"], ["Michael Tilson Thomas"], ["Igor Stravinsky"], ["Paul Jorgensen"], ["Pierre Boulez"], ["Antal Dor\u00e1ti"], ["Seiji Ozawa"], ["Colin Davis"]]}}
{"result": "SELECT Name \nFROM conductor \nORDER BY Year_of_Work DESC;", "match": {"match": true, "result": [["Robert Craft"], ["Antal Brown"], ["Gerard Schwarz"], ["Valeri Gergiev"], ["Charles Dutoit"], ["Michael Tilson Thomas"], ["Igor Stravinsky"], ["Paul Jorgensen"], ["Pierre Boulez"], ["Antal Dor\u00e1ti"], ["Seiji Ozawa"], ["Colin Davis"]]}}
{"result": "SELECT Name \nFROM conductor \nWHERE Year_of_Work = ( SELECT MAX(Year_of_Work) FROM conductor );", "match": {"match": true, "result": [["Robert Craft"]]}}
{"result": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "match": {"match": true, "result": [["Robert Craft"]]}}
{"result": "```sql\nSELECT c.Name, o.Orchestra\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;\n```", "match": {"match": true, "result": [["Antal Dor\u00e1ti", "London Symphony Orchestra"], ["Igor Stravinsky", "Columbia Symphony Orchestra"], ["Colin Davis", "Royal Concertgebouw Orchestra"], ["Paul Jorgensen", "Royal Danish Orchestra"], ["Antal Brown", "Detroit Symphony Orchestra"], ["Charles Dutoit", "Montreal Symphony Orchestra"], ["Gerard Schwarz", "Seattle Symphony Orchestra"], ["Pierre Boulez", "Chicago Symphony Orchestra"], ["Valeri Gergiev", "Kirov Orchestra"], ["Robert Craft", "Philharmonia Orchestra"], ["Seiji Ozawa", "Orchestre de Paris"], ["Michael Tilson Thomas", "San Francisco Symphony Orchestra"]]}}
{"result": "SELECT DISTINCT T1.Name, T2.Orchestra \nFROM conductor AS T1 \nINNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID", "match": {"match": true, "result": [["Antal Dor\u00e1ti", "London Symphony Orchestra"], ["Igor Stravinsky", "Columbia Symphony Orchestra"], ["Colin Davis", "Royal Concertgebouw Orchestra"], ["Paul Jorgensen", "Royal Danish Orchestra"], ["Antal Brown", "Detroit Symphony Orchestra"], ["Charles Dutoit", "Montreal Symphony Orchestra"], ["Gerard Schwarz", "Seattle Symphony Orchestra"], ["Pierre Boulez", "Chicago Symphony Orchestra"], ["Valeri Gergiev", "Kirov Orchestra"], ["Robert Craft", "Philharmonia Orchestra"], ["Seiji Ozawa", "Orchestre de Paris"], ["Michael Tilson Thomas", "San Francisco Symphony Orchestra"]]}}
{"result": "SELECT T1.Name \nFROM conductor AS T1 \nINNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID \nGROUP BY T1.Name, T1.Conductor_ID \nHAVING COUNT(T2.Orchestra_ID) > 1", "match": {"match": true, "result": []}}
{"result": "SELECT T1.Name \nFROM conductor AS T1 \nJOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID \nGROUP BY T2.Conductor_ID \nHAVING COUNT(T2.Orchestra_ID) > 1", "match": {"match": true, "result": []}}
{"result": "SELECT T1.Name \nFROM conductor AS T1 \nJOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID \nGROUP BY T1.Name \nORDER BY COUNT(T2.Orchestra_ID) DESC \nLIMIT 1", "match": {"match": false, "result": [["Valeri Gergiev"]], "gt": [["Michael Tilson Thomas"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Name \nFROM orchestra AS T1 \nJOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID \nGROUP BY T2.Name \nORDER BY COUNT(T1.Orchestra_ID) DESC \nLIMIT 1", "match": {"match": false, "result": [["Valeri Gergiev"]], "gt": [["Michael Tilson Thomas"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name \nFROM conductor AS T1 \nJOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID \nWHERE T2.Year_of_Founded > 2008", "match": {"match": true, "result": [["Igor Stravinsky"]]}}
{"result": "SELECT T1.Name \nFROM conductor AS T1 \nJOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID \nWHERE T2.Year_of_Founded > 2008", "match": {"match": true, "result": [["Igor Stravinsky"]]}}
{"result": "SELECT Record_Company, COUNT(*) \nFROM orchestra \nGROUP BY Record_Company;", "match": {"match": true, "result": [["Columbia Masterworks", 1], ["Decca Records", 2], ["Delos Records", 1], ["Deutsche Grammophon", 1], ["EMI", 1], ["Koch Records / Naxos Records", 1], ["Kultur", 1], ["Mercury Records", 1], ["Philips", 1], ["Philips Classics Records", 1], ["RCA", 1]]}}
{"result": "SELECT T2.Record_Company, COUNT(T1.Orchestra_ID) \nFROM orchestra AS T1 \nJOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID \nGROUP BY T2.Record_Company", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Record_Company"}}
{"result": "SELECT Major_Record_Format, COUNT(Major_Record_Format) FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(Major_Record_Format) ASC", "match": {"match": false, "result": [["CD / LP", 1], ["DVD", 1], ["CD", 10]], "gt": [["CD / LP"], ["DVD"], ["CD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Major_Record_Format, COUNT(Orchestra_ID) as Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC", "match": {"match": false, "result": [["CD", 10], ["DVD", 1], ["CD / LP", 1]], "gt": [["CD / LP"], ["DVD"], ["CD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Record_Company, COUNT(Orchestra_ID) as Count\nFROM orchestra\nGROUP BY Record_Company\nORDER BY Count DESC\nLIMIT 1", "match": {"match": false, "result": [["Decca Records", 2]], "gt": [["Decca Records"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Record_Company, COUNT(Conductor_ID) AS Count \nFROM orchestra \nGROUP BY Record_Company \nORDER BY COUNT(Conductor_ID) DESC \nLIMIT 1", "match": {"match": false, "result": [["Decca Records", 2]], "gt": [["Decca Records"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Orchestra \nFROM orchestra AS T1 \nLEFT JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID \nWHERE T2.Orchestra_ID IS NULL", "match": {"match": true, "result": [["San Francisco Symphony Orchestra"]]}}
{"result": "SELECT T2.Orchestra_ID, T2.Orchestra\nFROM performance AS T1\nRIGHT JOIN orchestra AS T2\nON T1.Orchestra_ID = T2.Orchestra_ID\nWHERE T1.Performance_ID IS NULL", "match": {"match": false, "result": [[12, "San Francisco Symphony Orchestra"]], "gt": [["San Francisco Symphony Orchestra"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Record_Company \nFROM orchestra AS T1 \nINNER JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID \nINNER JOIN show AS T3 ON T2.Performance_ID = T3.Performance_ID \nWHERE T1.Year_of_Founded < 2003 AND T3.Performance_ID IN \n  (SELECT Performance_ID FROM performance \n   WHERE Date LIKE '%/%/20%' \n   INTERSECT \n   SELECT Performance_ID FROM performance \n   WHERE Date LIKE '%/%/21%');", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Record_Company"}}
{"result": "SELECT Record_Company \nFROM orchestra \nWHERE Year_of_Founded < 2003 AND Record_Company IN \n  (SELECT Record_Company \n   FROM orchestra \n   WHERE Year_of_Founded >= 2003)", "match": {"match": true, "result": [["Decca Records"]]}}
{"result": "SELECT COUNT(Orchestra_ID) \nFROM orchestra \nWHERE Major_Record_Format IN ('CD', 'DVD');", "match": {"match": true, "result": [[11]]}}
{"result": "SELECT COUNT(Orchestra_ID) \nFROM orchestra \nWHERE Major_Record_Format IN ('CD', 'DVD');", "match": {"match": true, "result": [[11]]}}
{"result": "SELECT T2.Year_of_Founded\nFROM performance AS T1\nJOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID\nJOIN show AS T3 ON T1.Performance_ID = T3.Performance_ID\nGROUP BY T2.Year_of_Founded\nHAVING COUNT(DISTINCT T1.Performance_ID) > 1", "match": {"match": false, "result": [[2002.0]], "gt": [], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.`Year_of_Founded` FROM `orchestra` AS T1\nINNER JOIN `performance` AS T2\nON T1.`Orchestra_ID` = T2.`Orchestra_ID`\nGROUP BY T1.`Orchestra_ID`\nHAVING COUNT(T2.`Performance_ID`) > 1", "match": {"match": true, "result": []}}
{"result": "SELECT COUNT(ID) FROM Highschooler", "match": {"match": true, "result": [[16]]}}
{"result": "SELECT COUNT(ID) FROM Highschooler", "match": {"match": true, "result": [[16]]}}
{"result": "SELECT name, grade FROM Highschooler", "match": {"match": true, "result": [["Jordan", 9], ["Gabriel", 9], ["Tiffany", 9], ["Cassandra", 9], ["Haley", 10], ["Andrew", 10], ["Kris", 10], ["Brittany", 10], ["Alexis", 11], ["Austin", 11], ["Gabriel", 11], ["Jessica", 11], ["Jordan", 12], ["John", 12], ["Kyle", 12], ["Logan", 12]]}}
{"result": "SELECT name, grade FROM Highschooler;", "match": {"match": true, "result": [["Jordan", 9], ["Gabriel", 9], ["Tiffany", 9], ["Cassandra", 9], ["Haley", 10], ["Andrew", 10], ["Kris", 10], ["Brittany", 10], ["Alexis", 11], ["Austin", 11], ["Gabriel", 11], ["Jessica", 11], ["Jordan", 12], ["John", 12], ["Kyle", 12], ["Logan", 12]]}}
{"result": "SELECT DISTINCT grade FROM Highschooler", "match": {"match": false, "result": [[9], [10], [11], [12]], "gt": [[9], [9], [9], [9], [10], [10], [10], [10], [11], [11], [11], [11], [12], [12], [12], [12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT ID, grade FROM Highschooler", "match": {"match": false, "result": [[1510, 9], [1689, 9], [1381, 9], [1709, 9], [1101, 10], [1782, 10], [1468, 10], [1641, 10], [1247, 11], [1316, 11], [1911, 11], [1501, 11], [1304, 12], [1025, 12], [1934, 12], [1661, 12]], "gt": [[9], [9], [9], [9], [10], [10], [10], [10], [11], [11], [11], [11], [12], [12], [12], [12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT grade FROM Highschooler WHERE name = 'Kyle'", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT grade FROM Highschooler WHERE name = 'Kyle'", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT name \nFROM Highschooler \nWHERE grade = 10;", "match": {"match": true, "result": [["Haley"], ["Andrew"], ["Kris"], ["Brittany"]]}}
{"result": "SELECT name \nFROM Highschooler \nWHERE grade = 10;", "match": {"match": true, "result": [["Haley"], ["Andrew"], ["Kris"], ["Brittany"]]}}
{"result": "SELECT ID FROM Highschooler WHERE name = 'Kyle'", "match": {"match": true, "result": [[1934]]}}
{"result": "SELECT ID FROM Highschooler WHERE name = 'Kyle'", "match": {"match": true, "result": [[1934]]}}
{"result": "SELECT COUNT(ID) \nFROM Highschooler \nWHERE grade = 9 OR grade = 10;", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT COUNT(ID) \nFROM Highschooler \nWHERE grade BETWEEN 9 AND 10", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT grade, COUNT(*) \nFROM Highschooler \nGROUP BY grade;", "match": {"match": true, "result": [[9, 4], [10, 4], [11, 4], [12, 4]]}}
{"result": "SELECT grade, COUNT(ID) FROM Highschooler GROUP BY grade", "match": {"match": true, "result": [[9, 4], [10, 4], [11, 4], [12, 4]]}}
{"result": "SELECT grade, COUNT(*) \nFROM Highschooler \nGROUP BY grade \nORDER BY COUNT(*) DESC \nLIMIT 1;", "match": {"match": false, "result": [[12, 4]], "gt": [[12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT grade \nFROM Highschooler \nGROUP BY grade \nORDER BY COUNT(ID) DESC \nLIMIT 1;", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT grade\nFROM Highschooler\nGROUP BY grade\nHAVING COUNT(ID) >= 4;", "match": {"match": true, "result": [[9], [10], [11], [12]]}}
{"result": "SELECT grade \nFROM Highschooler \nGROUP BY grade \nHAVING COUNT(ID) >= 4;", "match": {"match": true, "result": [[9], [10], [11], [12]]}}
{"result": "SELECT T1.student_id, COUNT(T1.student_id) as num_friends\nFROM Friend AS T1\nGROUP BY T1.student_id", "match": {"match": true, "result": [[1101, 1], [1247, 2], [1304, 1], [1316, 1], [1381, 1], [1468, 2], [1501, 1], [1510, 2], [1661, 1], [1689, 2], [1709, 1], [1782, 3], [1911, 1], [1934, 1]]}}
{"result": "SELECT student_id, COUNT(*) \nFROM Friend \nGROUP BY student_id", "match": {"match": true, "result": [[1101, 1], [1247, 2], [1304, 1], [1316, 1], [1381, 1], [1468, 2], [1501, 1], [1510, 2], [1661, 1], [1689, 2], [1709, 1], [1782, 3], [1911, 1], [1934, 1]]}}
{"result": "SELECT T1.name, COUNT(T2.student_id) \nFROM Highschooler T1 \nLEFT JOIN Friend T2 ON T1.ID = T2.student_id \nGROUP BY T1.name", "match": {"match": false, "result": [["Alexis", 2], ["Andrew", 3], ["Austin", 1], ["Brittany", 0], ["Cassandra", 1], ["Gabriel", 3], ["Haley", 1], ["Jessica", 1], ["John", 0], ["Jordan", 3], ["Kris", 2], ["Kyle", 1], ["Logan", 1], ["Tiffany", 1]], "gt": [["Haley", 1], ["Alexis", 2], ["Jordan", 1], ["Austin", 1], ["Tiffany", 1], ["Kris", 2], ["Jessica", 1], ["Jordan", 2], ["Logan", 1], ["Gabriel", 2], ["Cassandra", 1], ["Andrew", 3], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name, COUNT(*) as friend_count\nFROM Highschooler\nLEFT JOIN Friend ON Highschooler.ID = Friend.student_id\nGROUP BY Highschooler.ID", "match": {"match": false, "result": [["John", 1], ["Haley", 1], ["Alexis", 2], ["Jordan", 1], ["Austin", 1], ["Tiffany", 1], ["Kris", 2], ["Jessica", 1], ["Jordan", 2], ["Brittany", 1], ["Logan", 1], ["Gabriel", 2], ["Cassandra", 1], ["Andrew", 3], ["Gabriel", 1], ["Kyle", 1]], "gt": [["Haley", 1], ["Alexis", 2], ["Jordan", 1], ["Austin", 1], ["Tiffany", 1], ["Kris", 2], ["Jessica", 1], ["Jordan", 2], ["Logan", 1], ["Gabriel", 2], ["Cassandra", 1], ["Andrew", 3], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID IN (\n  SELECT student_id \n  FROM Friend \n  GROUP BY student_id \n  ORDER BY COUNT(*) DESC \n  LIMIT 1\n)", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "SELECT T1.name \nFROM Highschooler AS T1 \nINNER JOIN Friend AS T2 \nON T1.id = T2.student_id \nGROUP BY T1.name \nORDER BY COUNT(T2.student_id) DESC \nLIMIT 1", "match": {"match": false, "result": [["Jordan"]], "gt": [["Andrew"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.name \nFROM Friend AS T1 \nJOIN Highschooler AS T2 ON T1.student_id = T2.ID \nGROUP BY T2.ID \nHAVING COUNT(T1.student_id) >= 3", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID IN (\n  SELECT student_id \n  FROM Friend \n  GROUP BY student_id \n  HAVING COUNT(*) >= 3\n)", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "SELECT name FROM Highschooler \nWHERE ID IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle'));", "match": {"match": true, "result": [["Jordan"]]}}
{"result": "SELECT T1.name \nFROM Highschooler AS T1 \nJOIN Friend AS T2 ON T1.ID = T2.student_id \nJOIN Highschooler AS T3 ON T3.ID = T2.friend_id \nWHERE T3.name = 'Kyle'", "match": {"match": false, "result": [["Jessica"], ["Austin"]], "gt": [["Jordan"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) \nFROM Friend \nWHERE student_id IN (SELECT ID FROM Highschooler WHERE name = 'Kyle')", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(T2.student_id) \nFROM Highschooler AS T1 \nINNER JOIN Friend AS T2 ON T1.ID = T2.student_id \nWHERE T1.name = 'Kyle';", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT ID \nFROM Highschooler \nWHERE ID NOT IN (\n  SELECT student_id \n  FROM Friend\n  UNION\n  SELECT friend_id \n  FROM Friend\n);", "match": {"match": false, "result": [], "gt": [[1025], [1641]], "error": "Query result does not match ground truth."}}
{"result": "SELECT ID \nFROM Highschooler \nWHERE ID NOT IN (\n  SELECT student_id \n  FROM Friend \n  UNION \n  SELECT friend_id \n  FROM Friend\n);", "match": {"match": false, "result": [], "gt": [[1025], [1641]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID NOT IN (\n  SELECT student_id \n  FROM Friend\n  UNION\n  SELECT friend_id \n  FROM Friend\n);", "match": {"match": false, "result": [], "gt": [["Brittany"], ["John"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID NOT IN (SELECT student_id FROM Friend);", "match": {"match": true, "result": [["Brittany"], ["John"]]}}
{"result": "SELECT H.ID, H.name\nFROM Highschooler H\nWHERE H.ID IN (\n  SELECT F.student_id\n  FROM Friend F\n  GROUP BY F.student_id\n  HAVING COUNT(F.student_id) > 1\n)\nINTERSECT\nSELECT L.student_id\nFROM Likes L\nGROUP BY L.student_id\nHAVING COUNT(L.student_id) > 1", "match": {"match": false, "error": "Query execution failed with error: SELECTs to the left and right of INTERSECT do not have the same number of result columns"}}
{"result": "SELECT H.ID \nFROM Highschooler H \nWHERE H.ID IN (SELECT F.student_id \n                FROM Friend F \n                UNION \n                SELECT L.student_id \n                FROM Likes L)", "match": {"match": false, "result": [[1025], [1101], [1247], [1304], [1316], [1381], [1468], [1501], [1510], [1641], [1661], [1689], [1709], [1782], [1911], [1934]], "gt": [[1101], [1247], [1304], [1468], [1501], [1689], [1709], [1934]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID IN (SELECT student_id FROM Friend) \nAND ID IN (SELECT student_id FROM Likes);", "match": {"match": false, "result": [["Alexis"], ["Austin"], ["Jessica"], ["Gabriel"], ["Cassandra"], ["Andrew"], ["Gabriel"], ["Kyle"]], "gt": [["Alexis"], ["Cassandra"], ["Gabriel"], ["Haley"], ["Jessica"], ["Jordan"], ["Kris"], ["Kyle"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.name\nFROM ( \n    SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) > 1)\n    INTERSECT\n    SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes GROUP BY liked_id HAVING COUNT(*) > 1)\n) AS T", "match": {"match": false, "result": [["Kris"]], "gt": [["Alexis"], ["Cassandra"], ["Gabriel"], ["Haley"], ["Jessica"], ["Jordan"], ["Kris"], ["Kyle"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT student_id, COUNT(*) \nFROM Likes \nGROUP BY student_id", "match": {"match": true, "result": [[1025, 1], [1247, 1], [1316, 1], [1501, 1], [1641, 1], [1689, 1], [1709, 1], [1782, 1], [1911, 1], [1934, 1]]}}
{"result": "SELECT student_id, COUNT(liked_id) FROM Likes GROUP BY student_id", "match": {"match": true, "result": [[1025, 1], [1247, 1], [1316, 1], [1501, 1], [1641, 1], [1689, 1], [1709, 1], [1782, 1], [1911, 1], [1934, 1]]}}
{"result": "SELECT T1.name, COUNT(T2.liked_id) as likes_count\nFROM Highschooler T1\nJOIN Likes T2 ON T1.ID = T2.student_id\nGROUP BY T1.name;", "match": {"match": false, "result": [["Alexis", 1], ["Andrew", 1], ["Austin", 1], ["Brittany", 1], ["Cassandra", 1], ["Gabriel", 2], ["Jessica", 1], ["John", 1], ["Kyle", 1]], "gt": [["John", 1], ["Alexis", 1], ["Austin", 1], ["Jessica", 1], ["Brittany", 1], ["Gabriel", 1], ["Cassandra", 1], ["Andrew", 1], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name ,  COUNT(*) FROM Highschooler \nWHERE ID IN (SELECT student_id FROM Likes \n             UNION \n             SELECT liked_id FROM Likes)", "match": {"match": false, "result": [["John", 13]], "gt": [["John", 1], ["Alexis", 1], ["Austin", 1], ["Jessica", 1], ["Brittany", 1], ["Gabriel", 1], ["Cassandra", 1], ["Andrew", 1], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID = (\n    SELECT student_id \n    FROM Likes \n    GROUP BY student_id \n    ORDER BY COUNT(liked_id) DESC \n    LIMIT 1\n);", "match": {"match": true, "result": [["John"]]}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID IN (\n  SELECT student_id \n  FROM Likes \n  GROUP BY student_id \n  ORDER BY COUNT(liked_id) DESC \n  LIMIT 1\n)", "match": {"match": true, "result": [["John"]]}}
{"result": "SELECT H.name \nFROM Highschooler H \nJOIN Likes L ON H.ID = L.student_id \nGROUP BY H.name \nHAVING COUNT(L.student_id) >= 2;", "match": {"match": false, "result": [["Gabriel"]], "gt": [], "error": "Query result does not match ground truth."}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID IN (SELECT student_id \n              FROM Likes \n              GROUP BY student_id \n              HAVING COUNT(liked_id) >= 2)", "match": {"match": true, "result": []}}
{"result": "SELECT name \nFROM Highschooler \nWHERE grade > 5 AND ID IN (\n  SELECT student_id \n  FROM Friend \n  GROUP BY student_id \n  HAVING COUNT(*) >= 2\n)", "match": {"match": true, "result": [["Alexis"], ["Kris"], ["Jordan"], ["Gabriel"], ["Andrew"]]}}
{"result": "SELECT name FROM Highschooler \nWHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) >= 2)\nAND grade > 5;", "match": {"match": true, "result": [["Alexis"], ["Kris"], ["Jordan"], ["Gabriel"], ["Andrew"]]}}
{"result": "SELECT COUNT(*) \nFROM Likes \nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(*) \nFROM Likes \nWHERE student_id IN (SELECT ID FROM Highschooler WHERE name = 'Kyle')", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT AVG(T1.grade) \nFROM Highschooler T1 \nJOIN Friend T2 ON T1.ID = T2.student_id \nGROUP BY T1.ID", "match": {"match": false, "result": [[10.0], [11.0], [12.0], [11.0], [9.0], [10.0], [11.0], [9.0], [12.0], [9.0], [9.0], [10.0], [11.0], [12.0]], "gt": [[10.428571428571429]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(T1.grade) \nFROM Highschooler T1 \nJOIN Friend T2 ON T1.ID = T2.student_id", "match": {"match": false, "result": [[10.25]], "gt": [[10.428571428571429]], "error": "Query result does not match ground truth."}}
{"result": "SELECT grade FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)", "match": {"match": false, "result": [[10], [12]], "gt": [[10]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MIN(T1.grade) \nFROM Highschooler AS T1 \nLEFT JOIN Friend AS T2 ON T1.ID = T2.student_id \nWHERE T2.student_id IS NULL", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT DISTINCT state \nFROM Owners \nINTERSECT \nSELECT state \nFROM Professionals;", "match": {"match": true, "result": [["Indiana"], ["Mississippi"], ["Wisconsin"]]}}
{"result": "SELECT DISTINCT o.state \nFROM Owners o \nJOIN Professionals p ON o.state = p.state", "match": {"match": false, "result": [["Wisconsin"], ["Indiana"], ["Mississippi"]], "gt": [["Indiana"], ["Mississippi"], ["Wisconsin"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(DATEDIFF(CURDATE(), date_of_birth)) AS AverageAge \nFROM Dogs \nWHERE dog_id IN (SELECT dog_id \n                 FROM Treatments);\n\nThis SQL query first selects the `dog_id`s that have gone through any treatments using the subquery. Then it selects the average age of the dogs with these `dog_id`s. The `DATEDIFF(CURDATE(), date_of_birth)` function calculates the age of each dog.", "match": {"match": false, "error": "Query execution failed with error: no such function: CURDATE"}}
{"result": "SELECT AVG(d.age) \nFROM Dogs d \nJOIN Treatments t ON d.dog_id = t.dog_id;", "match": {"match": false, "result": [[5.466666666666667]], "gt": [[5.111111111111111]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.professional_id, T1.last_name, T1.cell_number\nFROM Professionals AS T1\nWHERE T1.state = 'IN'\nOR T1.professional_id IN (\n  SELECT T1.professional_id\n  FROM Treatments AS T1\n  GROUP BY T1.professional_id\n  HAVING COUNT(T1.treatment_id) > 2\n);", "match": {"match": false, "result": [[9, "Kshlerin", "962-983-8109x3509"]], "gt": [[1, "Braun", "(275)939-2435x80863"], [8, "Hyatt", "328.842.3792"], [9, "Kshlerin", "962-983-8109x3509"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT p.professional_id, p.last_name, p.cell_number \nFROM Professionals p \nWHERE p.state = 'IN' \nOR p.professional_id IN (\n  SELECT t.professional_id \n  FROM Treatments t \n  GROUP BY t.professional_id \n  HAVING COUNT(t.professional_id) > 2\n);", "match": {"match": false, "result": [[9, "Kshlerin", "962-983-8109x3509"]], "gt": [[1, "Braun", "(275)939-2435x80863"], [8, "Hyatt", "328.842.3792"], [9, "Kshlerin", "962-983-8109x3509"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.name \nFROM Dogs AS T1 \nJOIN Treatments AS T2 ON T1.dog_id = T2.dog_id \nWHERE T2.cost_of_treatment < 1000", "match": {"match": false, "result": [["Lyric"], ["Houston"], ["Lyric"], ["Hipolito"], ["Holden"], ["Troy"], ["Evangeline"], ["Hipolito"], ["Lyric"], ["Troy"], ["Evangeline"], ["Jesus"], ["Narciso"], ["Troy"], ["Kacey"]], "gt": [["Kacey"], ["Hipolito"], ["Mavis"], ["Houston"], ["Jeffrey"], ["Merritt"], ["Narciso"], ["George"], ["Bessie"], ["Betty"], ["Holden"], ["Jesus"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.name \nFROM Charges AS T1 \nJOIN Treatments AS T2 ON T1.charge_id = T2.treatment_id \nJOIN Dogs AS T3 ON T2.dog_id = T3.dog_id \nWHERE T1.charge_amount <= 1000", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.name"}}
{"result": "SELECT DISTINCT first_name \nFROM Professionals \nUNION \nSELECT first_name \nFROM Owners \nEXCEPT \nSELECT name \nFROM Dogs", "match": {"match": true, "result": [["Adelle"], ["Brady"], ["Cindy"], ["Danny"], ["Domenica"], ["Emelie"], ["Ericka"], ["Gay"], ["Heather"], ["Jaclyn"], ["Jayson"], ["Johann"], ["Kade"], ["Karley"], ["Lesly"], ["Lorenz"], ["Melisa"], ["Monte"], ["Nora"], ["Olaf"], ["Orlando"], ["Rachelle"], ["Rolando"], ["Ruben"], ["Sigurd"], ["Taryn"], ["Tre"], ["Velva"], ["Vernice"], ["Winfield"]]}}
{"result": "SELECT first_name \nFROM (\n  SELECT first_name, 'owner' as type\n  FROM Owners\n  UNION ALL\n  SELECT first_name, 'professional'\n  FROM Professionals\n) AS t\nWHERE first_name NOT IN (\n  SELECT name\n  FROM Dogs\n)", "match": {"match": false, "result": [["Nora"], ["Melisa"], ["Jaclyn"], ["Tre"], ["Johann"], ["Kade"], ["Emelie"], ["Rolando"], ["Adelle"], ["Lorenz"], ["Gay"], ["Orlando"], ["Cindy"], ["Rachelle"], ["Heather"], ["Taryn"], ["Jayson"], ["Olaf"], ["Vernice"], ["Danny"], ["Ruben"], ["Velva"], ["Karley"], ["Monte"], ["Domenica"], ["Brady"], ["Winfield"], ["Ericka"], ["Sigurd"], ["Lesly"]], "gt": [["Adelle"], ["Brady"], ["Cindy"], ["Danny"], ["Domenica"], ["Emelie"], ["Ericka"], ["Gay"], ["Heather"], ["Jaclyn"], ["Jayson"], ["Johann"], ["Kade"], ["Karley"], ["Lesly"], ["Lorenz"], ["Melisa"], ["Monte"], ["Nora"], ["Olaf"], ["Orlando"], ["Rachelle"], ["Rolando"], ["Ruben"], ["Sigurd"], ["Taryn"], ["Tre"], ["Velva"], ["Vernice"], ["Winfield"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT p.professional_id, p.role_code, p.email_address\nFROM Professionals p\nLEFT JOIN Treatments t ON p.professional_id = t.professional_id\nWHERE t.treatment_id IS NULL;\n```\n\nThis query performs a LEFT JOIN between the `Professionals` table and the `Treatments` table, which ensures that all professionals are included in the result set, even if they do not have any associated treatments. The WHERE clause then filters out the professionals who have at least one treatment, leaving only the professionals who did not operate any treatments.", "match": {"match": false, "error": "Query execution failed with error: You can only execute one statement at a time."}}
{"result": "SELECT p.professional_id, p.role_code, p.email_address \nFROM Professionals p \nLEFT JOIN Treatments t ON p.professional_id = t.professional_id \nWHERE t.treatment_id IS NULL", "match": {"match": true, "result": [[1, "Employee", "deanna.schuster@example.com"], [2, "Employee", "lucile.shanahan@example.org"], [3, "Employee", "uboehm@example.org"], [11, "Employee", "west.eula@example.net"], [12, "Veterenarian", "marquardt.furman@example.org"], [13, "Veterenarian", "delphine29@example.com"], [15, "Employee", "jeichmann@example.com"]]}}
{"result": "SELECT o.owner_id, o.first_name, o.last_name \nFROM Owners o \nJOIN Dogs d ON o.owner_id = d.owner_id \nGROUP BY o.owner_id \nORDER BY COUNT(d.dog_id) DESC \nLIMIT 1", "match": {"match": true, "result": [[14, "Rachelle", "Funk"]]}}
{"result": "SELECT o.owner_id, o.first_name, o.last_name \nFROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id\nGROUP BY o.owner_id, o.first_name, o.last_name\nORDER BY COUNT(d.dog_id) DESC\nLIMIT 1", "match": {"match": true, "result": [[14, "Rachelle", "Funk"]]}}
{"result": "SELECT p.professional_id, p.role_code, p.first_name \nFROM Professionals p\nJOIN (\n  SELECT professional_id \n  FROM Treatments \n  GROUP BY professional_id \n  HAVING COUNT(treatment_id) >= 2 \n) t ON p.professional_id = t.professional_id", "match": {"match": true, "result": [[4, "Veterenarian", "Vernice"], [6, "Veterenarian", "Ruben"], [8, "Employee", "Karley"], [9, "Veterenarian", "Monte"], [10, "Employee", "Domenica"], [14, "Employee", "Sigurd"]]}}
{"result": "SELECT T1.professional_id, T1.role_code, T1.first_name\nFROM Professionals AS T1\nJOIN (\n  SELECT professional_id, COUNT(treatment_id) AS count\n  FROM Treatments\n  GROUP BY professional_id\n  HAVING COUNT(treatment_id) >= 2\n) AS T2\nON T1.professional_id = T2.professional_id", "match": {"match": true, "result": [[4, "Veterenarian", "Vernice"], [6, "Veterenarian", "Ruben"], [8, "Employee", "Karley"], [9, "Veterenarian", "Monte"], [10, "Employee", "Domenica"], [14, "Employee", "Sigurd"]]}}
{"result": "SELECT T1.breed_name \nFROM Breeds AS T1 \nJOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY COUNT(T2.breed_code) DESC LIMIT 1", "match": {"match": true, "result": [["Bulldog"]]}}
{"result": "SELECT T1.breed_name \nFROM Breeds AS T1 \nJOIN Dogs AS T2 ON T1.breed_code = T2.breed_code \nGROUP BY T1.breed_name \nORDER BY COUNT(T2.dog_id) DESC \nLIMIT 1", "match": {"match": true, "result": [["Bulldog"]]}}
{"result": "SELECT T1.owner_id, T1.last_name \nFROM Owners AS T1 \nJOIN (\n  SELECT dog_id, owner_id \n  FROM Treatments \n  GROUP BY dog_id, owner_id \n  ORDER BY COUNT(dog_id) DESC \n  LIMIT 1\n) AS T2 \nON T1.owner_id = T2.owner_id", "match": {"match": false, "error": "Query execution failed with error: no such column: owner_id"}}
{"result": "SELECT T1.owner_id, T2.last_name \nFROM Dogs AS T1 \nJOIN Owners AS T2 ON T1.owner_id = T2.owner_id \nJOIN Treatments AS T3 ON T1.dog_id = T3.dog_id \nJOIN Charges AS T4 ON T3.cost_of_treatment = T4.charge_amount \nGROUP BY T1.owner_id \nORDER BY SUM(T3.cost_of_treatment) DESC \nLIMIT 1", "match": {"match": false, "result": [], "gt": [[14, "Funk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT tt.treatment_type_description \nFROM Treatment_Types tt \nJOIN (\n  SELECT tt.treatment_type_code, SUM(t.cost_of_treatment) AS total_cost \n  FROM Treatment_Types tt \n  JOIN Treatments t ON tt.treatment_type_code = t.treatment_type_code \n  GROUP BY tt.treatment_type_code\n  ) AS subquery \nON tt.treatment_type_code = subquery.treatment_type_code \nORDER BY subquery.total_cost \nLIMIT 1;", "match": {"match": true, "result": [["Take for a Walk"]]}}
{"result": "SELECT T2.treatment_type_description \nFROM Treatments AS T1 \nINNER JOIN Treatment_Types AS T2 \nON T1.treatment_type_code = T2.treatment_type_code \nGROUP BY T2.treatment_type_description \nORDER BY SUM(T1.cost_of_treatment) ASC \nLIMIT 1", "match": {"match": true, "result": [["Take for a Walk"]]}}
{"result": "SELECT T2.owner_id, T2.zip_code \nFROM Charges AS T1 \nJOIN Dogs AS T2 ON T1.charge_id = ( SELECT charge_id FROM Charges WHERE charge_type = 'Adoption Fee' AND charge_amount = ( SELECT MAX(charge_amount) FROM Charges WHERE charge_type = 'Adoption Fee' ) )\nJOIN Owners AS T3 ON T2.owner_id = T3.owner_id", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.zip_code"}}
{"result": "SELECT T1.owner_id, T1.zip_code\nFROM Owners AS T1\nJOIN (\n  SELECT owner_id, SUM(cost_of_treatment) as total_spent\n  FROM Treatments\n  GROUP BY owner_id\n  ORDER BY total_spent DESC\n  LIMIT 1\n) AS T2 ON T1.owner_id = T2.owner_id", "match": {"match": false, "error": "Query execution failed with error: no such column: owner_id"}}
{"result": "SELECT T1.professional_id, T1.cell_number\nFROM Professionals AS T1\nJOIN (\n  SELECT professional_id\n  FROM Treatments\n  GROUP BY professional_id\n  HAVING COUNT(treatment_id) > 1\n) AS T2\nON T1.professional_id = T2.professional_id", "match": {"match": true, "result": [[4, "00230569697"], [6, "139-321-7313"], [8, "328.842.3792"], [9, "962-983-8109x3509"], [10, "461-801-2600"], [14, "1-185-137-1945x409"]]}}
{"result": "SELECT T1.professional_id, T1.cell_number\nFROM Professionals AS T1\nJOIN (\n    SELECT professional_id\n    FROM Treatments\n    GROUP BY professional_id\n    HAVING COUNT(*)  >= 2\n) AS T2\nON T1.professional_id = T2.professional_id", "match": {"match": true, "result": [[4, "00230569697"], [6, "139-321-7313"], [8, "328.842.3792"], [9, "962-983-8109x3509"], [10, "461-801-2600"], [14, "1-185-137-1945x409"]]}}
{"result": "SELECT T1.first_name, T1.last_name \nFROM Professionals AS T1 \nJOIN Treatments AS T2 ON T1.professional_id = T2.professional_id \nWHERE T2.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)", "match": {"match": false, "result": [["Domenica", "Jacobs"], ["Vernice", "Tillman"], ["Karley", "Hyatt"], ["Vernice", "Tillman"], ["Ruben", "O'Reilly"], ["Domenica", "Jacobs"], ["Monte", "Kshlerin"], ["Monte", "Kshlerin"]], "gt": [["Taryn", "Braun"], ["Jayson", "Ullrich"], ["Olaf", "Watsica"], ["Vernice", "Tillman"], ["Danny", "Considine"], ["Ruben", "O'Reilly"], ["Velva", "Hayes"], ["Karley", "Hyatt"], ["Monte", "Kshlerin"], ["Domenica", "Jacobs"], ["Brady", "Pouros"], ["Winfield", "Christiansen"], ["Ericka", "Murazik"], ["Sigurd", "Frami"], ["Lesly", "Walter"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.first_name, T1.last_name \nFROM Professionals T1 \nJOIN Treatments T2 ON T1.professional_id = T2.professional_id \nWHERE T2.cost_of_treatment < ( SELECT AVG(cost_of_treatment) FROM Treatments );", "match": {"match": false, "result": [["Domenica", "Jacobs"], ["Vernice", "Tillman"], ["Karley", "Hyatt"], ["Vernice", "Tillman"], ["Ruben", "O'Reilly"], ["Domenica", "Jacobs"], ["Monte", "Kshlerin"], ["Monte", "Kshlerin"]], "gt": [["Taryn", "Braun"], ["Jayson", "Ullrich"], ["Olaf", "Watsica"], ["Vernice", "Tillman"], ["Danny", "Considine"], ["Ruben", "O'Reilly"], ["Velva", "Hayes"], ["Karley", "Hyatt"], ["Monte", "Kshlerin"], ["Domenica", "Jacobs"], ["Brady", "Pouros"], ["Winfield", "Christiansen"], ["Ericka", "Murazik"], ["Sigurd", "Frami"], ["Lesly", "Walter"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.date_of_treatment, P.first_name \nFROM Treatments AS T1 \nINNER JOIN Professionals AS P ON T1.professional_id = P.professional_id \nINNER JOIN Dogs AS D ON T1.dog_id = D.dog_id \nINNER JOIN Treatments AS T2 ON T1.treatment_id = T2.treatment_id", "match": {"match": true, "result": [["2018-03-19 04:39:54", "Monte"], ["2018-03-15 20:25:34", "Domenica"], ["2018-03-08 05:26:23", "Vernice"], ["2018-03-01 04:14:46", "Karley"], ["2018-03-23 13:52:10", "Sigurd"], ["2018-03-11 04:23:15", "Vernice"], ["2018-03-10 11:45:58", "Sigurd"], ["2018-03-24 22:25:58", "Ruben"], ["2018-03-14 19:10:40", "Domenica"], ["2018-02-28 17:09:43", "Velva"], ["2018-03-13 12:22:58", "Danny"], ["2018-03-16 10:27:36", "Monte"], ["2018-02-26 09:08:53", "Karley"], ["2018-03-04 20:33:43", "Monte"], ["2018-03-15 19:10:02", "Ruben"]]}}
{"result": "SELECT T1.date_of_treatment, P.first_name \nFROM Treatments AS T1 \nJOIN Professionals AS P ON T1.professional_id = P.professional_id", "match": {"match": true, "result": [["2018-03-19 04:39:54", "Monte"], ["2018-03-15 20:25:34", "Domenica"], ["2018-03-08 05:26:23", "Vernice"], ["2018-03-01 04:14:46", "Karley"], ["2018-03-23 13:52:10", "Sigurd"], ["2018-03-11 04:23:15", "Vernice"], ["2018-03-10 11:45:58", "Sigurd"], ["2018-03-24 22:25:58", "Ruben"], ["2018-03-14 19:10:40", "Domenica"], ["2018-02-28 17:09:43", "Velva"], ["2018-03-13 12:22:58", "Danny"], ["2018-03-16 10:27:36", "Monte"], ["2018-02-26 09:08:53", "Karley"], ["2018-03-04 20:33:43", "Monte"], ["2018-03-15 19:10:02", "Ruben"]]}}
{"result": "SELECT T2.treatment_type_description, T1.cost_of_treatment\nFROM Treatments AS T1\nJOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code", "match": {"match": false, "result": [["Take for a Walk", 567], ["Vaccination", 147], ["Physical examination", 429], ["Vaccination", 266], ["Vaccination", 668], ["Physical examination", 313], ["Physical examination", 852], ["Physical examination", 407], ["Take for a Walk", 139], ["Take for a Walk", 681], ["Vaccination", 514], ["Physical examination", 428], ["Vaccination", 945], ["Take for a Walk", 349], ["Take for a Walk", 656]], "gt": [[567, "Take for a Walk"], [147, "Vaccination"], [429, "Physical examination"], [266, "Vaccination"], [668, "Vaccination"], [313, "Physical examination"], [852, "Physical examination"], [407, "Physical examination"], [139, "Take for a Walk"], [681, "Take for a Walk"], [514, "Vaccination"], [428, "Physical examination"], [945, "Vaccination"], [349, "Take for a Walk"], [656, "Take for a Walk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.cost_of_treatment, T1.treatment_type_description \nFROM Treatment_Types AS T1 \nINNER JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code", "match": {"match": true, "result": [[567, "Take for a Walk"], [147, "Vaccination"], [429, "Physical examination"], [266, "Vaccination"], [668, "Vaccination"], [313, "Physical examination"], [852, "Physical examination"], [407, "Physical examination"], [139, "Take for a Walk"], [681, "Take for a Walk"], [514, "Vaccination"], [428, "Physical examination"], [945, "Vaccination"], [349, "Take for a Walk"], [656, "Take for a Walk"]]}}
{"result": "SELECT O.first_name, O.last_name, D.size_code\nFROM Owners O\nJOIN Dogs D ON O.owner_id = D.owner_id;", "match": {"match": true, "result": [["Jaclyn", "Stoltenberg", "LGE"], ["Gay", "Feil", "LGE"], ["Nora", "Haley", "MED"], ["Rachelle", "Funk", "LGE"], ["Emelie", "Mertz", "MED"], ["Johann", "Fisher", "MED"], ["Jaclyn", "Stoltenberg", "MED"], ["Rachelle", "Funk", "SML"], ["Melisa", "DuBuque", "MED"], ["Kade", "Rippin", "MED"], ["Cindy", "Schmitt", "LGE"], ["Orlando", "Price", "MED"], ["Rolando", "Prohaska", "SML"], ["Rachelle", "Funk", "MED"], ["Lorenz", "Nicolas", "MED"]]}}
{"result": "SELECT o.first_name, o.last_name, d.size_code \nFROM Owners o \nJOIN Dogs d ON o.owner_id = d.owner_id", "match": {"match": true, "result": [["Jaclyn", "Stoltenberg", "LGE"], ["Gay", "Feil", "LGE"], ["Nora", "Haley", "MED"], ["Rachelle", "Funk", "LGE"], ["Emelie", "Mertz", "MED"], ["Johann", "Fisher", "MED"], ["Jaclyn", "Stoltenberg", "MED"], ["Rachelle", "Funk", "SML"], ["Melisa", "DuBuque", "MED"], ["Kade", "Rippin", "MED"], ["Cindy", "Schmitt", "LGE"], ["Orlando", "Price", "MED"], ["Rolando", "Prohaska", "SML"], ["Rachelle", "Funk", "MED"], ["Lorenz", "Nicolas", "MED"]]}}
{"result": "SELECT o.first_name, d.name \nFROM Owners o \nINNER JOIN Dogs d ON o.owner_id = d.owner_id", "match": {"match": true, "result": [["Jaclyn", "Kacey"], ["Gay", "Hipolito"], ["Nora", "Mavis"], ["Rachelle", "Houston"], ["Emelie", "Jeffrey"], ["Johann", "Merritt"], ["Jaclyn", "Narciso"], ["Rachelle", "George"], ["Melisa", "Bessie"], ["Kade", "Troy"], ["Cindy", "Betty"], ["Orlando", "Holden"], ["Rolando", "Jesus"], ["Rachelle", "Lyric"], ["Lorenz", "Evangeline"]]}}
{"result": "SELECT O.first_name, D.name \nFROM Owners O \nJOIN Dogs D ON O.owner_id = D.owner_id", "match": {"match": true, "result": [["Jaclyn", "Kacey"], ["Gay", "Hipolito"], ["Nora", "Mavis"], ["Rachelle", "Houston"], ["Emelie", "Jeffrey"], ["Johann", "Merritt"], ["Jaclyn", "Narciso"], ["Rachelle", "George"], ["Melisa", "Bessie"], ["Kade", "Troy"], ["Cindy", "Betty"], ["Orlando", "Holden"], ["Rolando", "Jesus"], ["Rachelle", "Lyric"], ["Lorenz", "Evangeline"]]}}
{"result": "SELECT T4.name, T3.date_of_treatment \nFROM Breeds AS T1 \nJOIN Dogs AS T2 ON T1.breed_code = T2.breed_code \nJOIN (\n  SELECT breed_code, COUNT(dog_id) as count \n  FROM Dogs \n  GROUP BY breed_code \n  ORDER BY count ASC \n  LIMIT 1 \n) AS T3 ON T1.breed_code = T3.breed_code \nJOIN Treatments AS T4 ON T2.dog_id = T4.dog_id", "match": {"match": false, "error": "Query execution failed with error: no such column: T4.name"}}
{"result": "SELECT T1.name, T2.date_of_treatment \nFROM Dogs AS T1 \nJOIN Treatments AS T2 ON T1.dog_id = T2.dog_id \nJOIN Breeds AS T3 ON T3.breed_code = T1.breed_code \nJOIN (\n  SELECT breed_code, COUNT(*) as cnt \n  FROM Dogs \n  GROUP BY breed_code \n) AS T4 ON T4.breed_code = T3.breed_code \nWHERE T4.cnt = ( SELECT MIN(cnt) \n                 FROM (\n                   SELECT breed_code, COUNT(*) as cnt \n                   FROM Dogs \n                   GROUP BY breed_code \n                 ) AS T5 \n                 WHERE breed_code IN ( SELECT breed_code \n                                       FROM Breeds \n                                       WHERE breed_name LIKE '%Rarest%' )\n               );", "match": {"match": false, "result": [], "gt": [["Lyric", "2018-03-19 04:39:54"], ["Houston", "2018-03-15 20:25:34"], ["Lyric", "2018-03-08 05:26:23"], ["Lyric", "2018-03-14 19:10:40"], ["Kacey", "2018-03-15 19:10:02"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT o.first_name, d.name \nFROM Owners o \nJOIN Dogs d ON o.owner_id = d.owner_id \nWHERE o.state = 'Virginia';", "match": {"match": true, "result": [["Melisa", "Bessie"]]}}
{"result": "SELECT O.first_name, D.name \nFROM Owners O \nINNER JOIN Dogs D ON O.owner_id = D.owner_id \nWHERE O.state = 'Virginia';", "match": {"match": true, "result": [["Melisa", "Bessie"]]}}
{"result": "SELECT T1.date_arrived, T1.date_departed \nFROM Dogs T1 \nJOIN Treatments T2 ON T1.dog_id = T2.dog_id", "match": {"match": false, "result": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "gt": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.date_arrived, T1.date_departed \nFROM Dogs T1 \nJOIN Treatments T2 ON T1.dog_id = T2.dog_id", "match": {"match": false, "result": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "gt": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.last_name \nFROM Dogs AS T1\nINNER JOIN Owners AS T2 ON T1.owner_id = T2.owner_id\nWHERE T1.date_of_birth = ( SELECT MAX(date_of_birth) \n                            FROM Dogs \n                            WHERE date_of_birth IS NOT NULL \n                            AND date_of_birth < DATE('now') );", "match": {"match": false, "result": [["Mertz"]], "gt": [["Feil"], ["Fisher"], ["Rippin"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.last_name \nFROM Owners AS T1 \nJOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id \nWHERE T2.date_of_birth  =  ( SELECT MAX(T3.date_of_birth) \n                            FROM Dogs AS T3 )", "match": {"match": false, "result": [["Mertz"]], "gt": [["Feil"], ["Fisher"], ["Rippin"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT email_address \nFROM Professionals \nWHERE state IN ('HI', 'WI');", "match": {"match": false, "result": [], "gt": [["uboehm@example.org"], ["mekhi.little@example.org"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT email_address \nFROM Professionals \nWHERE state IN ('HI', 'WI');", "match": {"match": false, "result": [], "gt": [["uboehm@example.org"], ["mekhi.little@example.org"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT date_arrived, date_departed FROM Dogs", "match": {"match": true, "result": [["2017-09-08 20:10:13", "2018-03-25 06:58:44"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-25 10:14:05", "2018-03-25 10:25:46"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-10-25 00:55:34", "2018-03-25 04:50:22"], ["2017-04-15 09:25:31", "2018-03-25 13:07:04"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-10-16 20:06:21", "2018-03-25 02:47:40"], ["2018-01-17 11:44:16", "2018-03-25 06:46:07"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-07-25 15:19:07", "2018-03-25 15:05:16"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"]]}}
{"result": "SELECT date_arrived, date_departed \nFROM Dogs", "match": {"match": true, "result": [["2017-09-08 20:10:13", "2018-03-25 06:58:44"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-25 10:14:05", "2018-03-25 10:25:46"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-10-25 00:55:34", "2018-03-25 04:50:22"], ["2017-04-15 09:25:31", "2018-03-25 13:07:04"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-10-16 20:06:21", "2018-03-25 02:47:40"], ["2018-01-17 11:44:16", "2018-03-25 06:46:07"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-07-25 15:19:07", "2018-03-25 15:05:16"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"]]}}
{"result": "SELECT COUNT(DISTINCT t1.dog_id) \nFROM Treatments t1", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(DISTINCT t.dog_id) \nFROM Treatments t;", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(DISTINCT professional_id) AS num_professionals \nFROM Treatments", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT COUNT(*) \nFROM Professionals", "match": {"match": false, "result": [[15]], "gt": [[8]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT role_code, street, city, state \nFROM Professionals \nWHERE city LIKE '%West%';", "match": {"match": true, "result": [["Employee", "6915 Oberbrunner Point Suite 491\nGleasonville, LA ", "West Heidi", "Indiana"]]}}
{"result": "SELECT T1.role_code, T1.street, T1.city, T1.state \nFROM Professionals T1 \nJOIN Owners T2 ON T1.professional_id = T2.owner_id \nWHERE T2.city LIKE '%West%';", "match": {"match": false, "result": [["Employee", "390 Bryce Drive\nNorth Dock, LA 65357-7228", "East Ila", "Connecticut"]], "gt": [["Employee", "6915 Oberbrunner Point Suite 491\nGleasonville, LA ", "West Heidi", "Indiana"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT first_name, last_name, email_address \nFROM Owners \nWHERE state LIKE '%North%';", "match": {"match": true, "result": [["Johann", "Fisher", "zboncak.madonna@example.net"], ["Cindy", "Schmitt", "wpfeffer@example.net"]]}}
{"result": "SELECT first_name, last_name, email_address \nFROM Owners \nWHERE state LIKE '%North%';", "match": {"match": true, "result": [["Johann", "Fisher", "zboncak.madonna@example.net"], ["Cindy", "Schmitt", "wpfeffer@example.net"]]}}
{"result": "SELECT COUNT(dog_id) FROM Dogs WHERE age < ( SELECT AVG(age) FROM Dogs );", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(*) \nFROM Dogs \nWHERE age < (SELECT AVG(age) FROM Dogs);", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT T1.cost_of_treatment \nFROM Treatments T1 \nJOIN ( SELECT dog_id, MAX(date_of_treatment) AS max_date \n        FROM Treatments \n        GROUP BY dog_id \n    ) T2 \nON T1.dog_id = T2.dog_id AND T1.date_of_treatment = T2.max_date", "match": {"match": false, "result": [[567], [147], [668], [313], [407], [514], [428], [945], [656]], "gt": [[407]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(`cost_of_treatment`) \nFROM `Treatments`", "match": {"match": false, "result": [[945]], "gt": [[407]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(dog_id) \nFROM Dogs \nWHERE dog_id NOT IN (SELECT dog_id FROM Treatments);", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(*) \nFROM Dogs \nWHERE dog_id NOT IN (SELECT dog_id FROM Treatments);", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(*) \nFROM Owners \nWHERE owner_id NOT IN ( SELECT owner_id FROM Dogs );", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(owner_id) \nFROM Owners \nWHERE owner_id NOT IN (SELECT owner_id FROM Dogs);", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(*) \nFROM `Professionals` \nWHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments);", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT COUNT(*) \nFROM Professionals \nWHERE professional_id NOT IN (SELECT professional_id FROM Treatments)", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT name, age, weight \nFROM Dogs \nWHERE abandoned_yn = 1;", "match": {"match": true, "result": [["Kacey", "6", "7.57"], ["Lyric", "4", "4.36"], ["Evangeline", "1", "4.01"]]}}
{"result": "SELECT name, age, weight \nFROM Dogs \nWHERE abandoned_yn = '1';", "match": {"match": true, "result": [["Kacey", "6", "7.57"], ["Lyric", "4", "4.36"], ["Evangeline", "1", "4.01"]]}}
{"result": "SELECT AVG(CAST(`age` AS INT)) FROM Dogs", "match": {"match": true, "result": [[5.066666666666666]]}}
{"result": "SELECT AVG(age) as average_age FROM Dogs", "match": {"match": true, "result": [[5.066666666666666]]}}
{"result": "SELECT MAX(age) \nFROM Dogs", "match": {"match": true, "result": [["9"]]}}
{"result": "SELECT MAX(SUBSTR(`date_arrived`, 1, 4) - SUBSTR(`date_of_birth`, 1, 4)) AS age\nFROM Dogs;", "match": {"match": false, "result": [[9]], "gt": [["9"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT charge_type, charge_amount FROM Charges", "match": {"match": true, "result": [["Daily Accommodation", 98], ["Drugs", 322], ["Health Check", 640]]}}
{"result": "SELECT charge_type, charge_amount FROM Charges", "match": {"match": true, "result": [["Daily Accommodation", 98], ["Drugs", 322], ["Health Check", 640]]}}
{"result": "SELECT `charge_type` , MAX(`charge_amount`) \nFROM `Charges`", "match": {"match": false, "result": [["Health Check", 640]], "gt": [[640]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.charge_type, T1.charge_amount \nFROM Charges T1 \nJOIN (\n  SELECT charge_type, MAX(charge_amount) as max_amount \n  FROM Charges \n  GROUP BY charge_type\n) T2 \nON T1.charge_type = T2.charge_type \nAND T1.charge_amount = T2.max_amount", "match": {"match": false, "result": [["Daily Accommodation", 98], ["Drugs", 322], ["Health Check", 640]], "gt": [[640]], "error": "Query result does not match ground truth."}}
{"result": "SELECT email_address, cell_number, home_phone FROM Professionals", "match": {"match": true, "result": [["deanna.schuster@example.com", "(275)939-2435x80863", "+71(6)2898266914"], ["lucile.shanahan@example.org", "889-940-2676", "+02(1)0259033559"], ["uboehm@example.org", "(369)908-7311x065", "325-155-0801x7005"], ["lourdes.lowe@example.net", "00230569697", "312.216.3352"], ["mekhi.little@example.org", "011.193.9081x3186", "1-609-566-2752x25197"], ["jacynthe.mclaughlin@example.net", "139-321-7313", "+43(5)1132733868"], ["lambert62@example.org", "499-434-0215x1628", "022.529.0550x1319"], ["goyette.roosevelt@example.net", "328.842.3792", "891.475.2256"], ["schneider.kathryne@example.org", "962-983-8109x3509", "320-508-6023"], ["jerrod.bahringer@example.org", "461-801-2600", "(230)338-3342x585"], ["west.eula@example.net", "609-405-2990", "(920)304-4499x59146"], ["marquardt.furman@example.org", "1-181-670-9466", "246-951-0080x76716"], ["delphine29@example.com", "880-659-7577x736", "346.594.3739"], ["cole.margarita@example.org", "1-185-137-1945x409", "971.048.3763x9404"], ["jeichmann@example.com", "1-258-285-4707x8020", "1-138-287-3775"]]}}
{"result": "SELECT `email_address`, `cell_number`, `home_phone` FROM `Professionals`", "match": {"match": true, "result": [["deanna.schuster@example.com", "(275)939-2435x80863", "+71(6)2898266914"], ["lucile.shanahan@example.org", "889-940-2676", "+02(1)0259033559"], ["uboehm@example.org", "(369)908-7311x065", "325-155-0801x7005"], ["lourdes.lowe@example.net", "00230569697", "312.216.3352"], ["mekhi.little@example.org", "011.193.9081x3186", "1-609-566-2752x25197"], ["jacynthe.mclaughlin@example.net", "139-321-7313", "+43(5)1132733868"], ["lambert62@example.org", "499-434-0215x1628", "022.529.0550x1319"], ["goyette.roosevelt@example.net", "328.842.3792", "891.475.2256"], ["schneider.kathryne@example.org", "962-983-8109x3509", "320-508-6023"], ["jerrod.bahringer@example.org", "461-801-2600", "(230)338-3342x585"], ["west.eula@example.net", "609-405-2990", "(920)304-4499x59146"], ["marquardt.furman@example.org", "1-181-670-9466", "246-951-0080x76716"], ["delphine29@example.com", "880-659-7577x736", "346.594.3739"], ["cole.margarita@example.org", "1-185-137-1945x409", "971.048.3763x9404"], ["jeichmann@example.com", "1-258-285-4707x8020", "1-138-287-3775"]]}}
{"result": "SELECT DISTINCT B.breed_code, S.size_code \nFROM Breeds B \nCROSS JOIN Sizes S;", "match": {"match": false, "result": [["BUL", "LGE"], ["BUL", "MED"], ["BUL", "SML"], ["ESK", "LGE"], ["ESK", "MED"], ["ESK", "SML"], ["HUS", "LGE"], ["HUS", "MED"], ["HUS", "SML"]], "gt": [["ESK", "LGE"], ["BUL", "LGE"], ["BUL", "MED"], ["HUS", "MED"], ["ESK", "SML"], ["HUS", "SML"], ["ESK", "MED"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT breed_code, size_code FROM Dogs", "match": {"match": true, "result": [["ESK", "LGE"], ["BUL", "LGE"], ["BUL", "MED"], ["HUS", "MED"], ["ESK", "SML"], ["HUS", "SML"], ["ESK", "MED"]]}}
{"result": "SELECT T1.first_name, T3.treatment_type_description \nFROM Professionals AS T1 \nJOIN Treatments AS T2 ON T1.professional_id = T2.professional_id \nJOIN Treatment_Types AS T3 ON T2.treatment_type_code = T3.treatment_type_code", "match": {"match": false, "result": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Vernice", "Physical examination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Karley", "Vaccination"], ["Monte", "Take for a Walk"], ["Ruben", "Take for a Walk"]], "gt": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Ruben", "Take for a Walk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT p.first_name, tt.treatment_type_description \nFROM Treatments t \nJOIN Professionals p ON t.professional_id = p.professional_id \nJOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code", "match": {"match": false, "result": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Vernice", "Physical examination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Karley", "Vaccination"], ["Monte", "Take for a Walk"], ["Ruben", "Take for a Walk"]], "gt": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Ruben", "Take for a Walk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(\"Singer_ID\") FROM singer", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT COUNT(Singer_ID) FROM singer", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "match": {"match": true, "result": [["Abigail Johnson"], ["Susanne Klatten"], ["Gina Rinehart"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Alice Walton"], ["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "match": {"match": true, "result": [["Abigail Johnson"], ["Susanne Klatten"], ["Gina Rinehart"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Alice Walton"], ["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT Birth_Year, Citizenship FROM singer", "match": {"match": true, "result": [[1944.0, "France"], [1948.0, "United States"], [1949.0, "United States"], [1942.0, "Chile"], [1940.0, "United States"], [1953.0, "Australia"], [1962.0, "Germany"], [1961.0, "United States"]]}}
{"result": "SELECT Birth_Year, Citizenship FROM singer", "match": {"match": true, "result": [[1944.0, "France"], [1948.0, "United States"], [1949.0, "United States"], [1942.0, "Chile"], [1940.0, "United States"], [1953.0, "Australia"], [1962.0, "Germany"], [1961.0, "United States"]]}}
{"result": "SELECT Name FROM singer WHERE Citizenship != 'France'", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]]}}
{"result": "SELECT Name FROM singer WHERE Citizenship != 'France';", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]]}}
{"result": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"]]}}
{"result": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "match": {"match": true, "result": [["Liliane Bettencourt"]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "match": {"match": true, "result": [["Liliane Bettencourt"]]}}
{"result": "SELECT Citizenship, COUNT(*) \nFROM singer \nGROUP BY Citizenship", "match": {"match": true, "result": [["Australia", 1], ["Chile", 1], ["France", 1], ["Germany", 1], ["United States", 4]]}}
{"result": "SELECT Citizenship, COUNT(Singer_ID) FROM singer GROUP BY Citizenship", "match": {"match": true, "result": [["Australia", 1], ["Chile", 1], ["France", 1], ["Germany", 1], ["United States", 4]]}}
{"result": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(Citizenship) DESC LIMIT 1", "match": {"match": true, "result": [["United States"]]}}
{"result": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(Citizenship) DESC LIMIT 1", "match": {"match": true, "result": [["United States"]]}}
{"result": "SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth \nFROM singer \nGROUP BY Citizenship", "match": {"match": true, "result": [["Australia", 17.0], ["Chile", 17.4], ["France", 30.0], ["Germany", 14.3], ["United States", 28.8]]}}
{"result": "SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "match": {"match": true, "result": [["Australia", 17.0], ["Chile", 17.4], ["France", 30.0], ["Germany", 14.3], ["United States", 28.8]]}}
{"result": "SELECT T1.Title, T2.Name \nFROM song AS T1 \nINNER JOIN singer AS T2 \nON T1.Singer_ID = T2.Singer_ID", "match": {"match": true, "result": [["Do They Know It's Christmas", "Liliane Bettencourt"], ["F**k It (I Don't Want You Back)", "Liliane Bettencourt"], ["Cha Cha Slide", "Christy Walton"], ["Call on Me", "Iris Fontbona"], ["Yeah", "Christy Walton"], ["All This Time", "Gina Rinehart"], ["Left Outside Alone", "Jacqueline Mars"], ["Mysterious Girl", "Susanne Klatten"]]}}
{"result": "SELECT T2.Title, T1.Name \nFROM singer AS T1 \nINNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID", "match": {"match": true, "result": [["Do They Know It's Christmas", "Liliane Bettencourt"], ["F**k It (I Don't Want You Back)", "Liliane Bettencourt"], ["Cha Cha Slide", "Christy Walton"], ["Call on Me", "Iris Fontbona"], ["Yeah", "Christy Walton"], ["All This Time", "Gina Rinehart"], ["Left Outside Alone", "Jacqueline Mars"], ["Mysterious Girl", "Susanne Klatten"]]}}
{"result": "SELECT DISTINCT T1.Name \nFROM singer AS T1 \nJOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID \nWHERE T2.Sales > 300000", "match": {"match": true, "result": [["Liliane Bettencourt"], ["Christy Walton"], ["Iris Fontbona"]]}}
{"result": "SELECT Name \nFROM singer \nWHERE Singer_ID IN ( SELECT Singer_ID \n                     FROM song \n                     WHERE Sales > 300000 );", "match": {"match": true, "result": [["Liliane Bettencourt"], ["Christy Walton"], ["Iris Fontbona"]]}}
{"result": "SELECT T1.Name \nFROM singer AS T1 \nJOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID \nGROUP BY T1.Singer_ID \nHAVING COUNT(T2.Singer_ID) > 1", "match": {"match": false, "result": [["Liliane Bettencourt"], ["Christy Walton"]], "gt": [["Christy Walton"], ["Liliane Bettencourt"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name \nFROM singer AS T1 \nJOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID \nGROUP BY T1.Name \nHAVING COUNT(T2.Singer_ID) > 1", "match": {"match": true, "result": [["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT T1.Name, SUM(T2.Sales) \nFROM singer AS T1 \nINNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID \nGROUP BY T1.Name", "match": {"match": true, "result": [["Christy Walton", 651421.0], ["Gina Rinehart", 292000.0], ["Iris Fontbona", 335000.0], ["Jacqueline Mars", 275000.0], ["Liliane Bettencourt", 1646407.0], ["Susanne Klatten", 261000.0]]}}
{"result": "SELECT T1.Name, SUM(T2.Sales) \nFROM singer AS T1 \nINNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID \nGROUP BY T1.Name", "match": {"match": true, "result": [["Christy Walton", 651421.0], ["Gina Rinehart", 292000.0], ["Iris Fontbona", 335000.0], ["Jacqueline Mars", 275000.0], ["Liliane Bettencourt", 1646407.0], ["Susanne Klatten", 261000.0]]}}
{"result": "SELECT Name \nFROM singer \nWHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "match": {"match": true, "result": [["Alice Walton"], ["Abigail Johnson"]]}}
{"result": "SELECT T2.Name \nFROM song AS T1 \nLEFT JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID \nWHERE T1.Song_ID IS NULL", "match": {"match": false, "result": [], "gt": [["Alice Walton"], ["Abigail Johnson"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T FROM (\n  SELECT Citizenship, \n         COUNT(Citizenship) AS Count,\n         ROW_NUMBER() OVER (PARTITION BY Citizenship ORDER BY COUNT(Citizenship) DESC) AS Row\n  FROM singer\n  WHERE Birth_Year < 1945 OR Birth_Year > 1955\n  GROUP BY Citizenship\n) T\nWHERE T.Row = 1", "match": {"match": false, "error": "Query execution failed with error: no such column: T"}}
{"result": "SELECT T2.Citizenship \nFROM singer AS T1 \nJOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID \nWHERE T1.Birth_Year < 1945 AND T1.Birth_Year > 1955", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Citizenship"}}
{"result": "SELECT COUNT(`feature_id`) FROM `Other_Available_Features`;", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT T2.feature_type_name \nFROM Other_Available_Features T1 \nINNER JOIN Ref_Feature_Types T2 ON T1.feature_type_code = T2.feature_type_code \nWHERE T1.feature_name = 'AirCon';", "match": {"match": true, "result": [["Amenity, eg Pool."]]}}
{"result": "```sql\nSELECT p.property_type_description, p.property_name\nFROM Properties p\nJOIN Ref_Property_Types rpt ON p.property_type_code = rpt.property_type_code;\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: p.property_type_description"}}
{"result": "SELECT DISTINCT p.property_name \nFROM Properties p \nJOIN Other_Property_Features of ON p.property_id = of.property_id \nJOIN Other_Available_Features af ON of.feature_id = af.feature_id \nWHERE af.feature_name IN ('house', 'apartment') AND p.room_count > 1", "match": {"match": false, "result": [], "gt": [["longacre"], ["parc coliseum"], ["parc east"], ["park"], ["renoir"], ["ten tower"], ["the cole"], ["vogue"]], "error": "Query result does not match ground truth."}}


{"result": "SELECT COUNT(DISTINCT Singer_ID) AS singer_count\nFROM singer;", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(*) AS total_singers\nFROM singer;", "match": {"match": true, "result": [[6]]}}
{"result": "```sql\nSELECT \"Name\", \"Country\", \"Age\"\nFROM \"singer\"\nORDER BY \"Age\" DESC;\n```", "match": {"match": true, "result": [["Joe Sharp", "Netherlands", 52], ["John Nizinik", "France", 43], ["Rose White", "France", 41], ["Timbaland", "United States", 32], ["Justin Brown", "France", 29], ["Tribal King", "France", 25]]}}
{"result": "SELECT Name, Country, Age\nFROM singer\nORDER BY Age DESC;", "match": {"match": true, "result": [["Joe Sharp", "Netherlands", 52], ["John Nizinik", "France", 43], ["Rose White", "France", 41], ["Timbaland", "United States", 32], ["Justin Brown", "France", 29], ["Tribal King", "France", 25]]}}
{"result": "SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age\nFROM singer\nWHERE Country = 'France';", "match": {"match": true, "result": [[34.5, 25, 43]]}}
{"result": "SELECT \n    AVG(\"Age\") AS \"Average Age\",\n    MIN(\"Age\") AS \"Minimum Age\",\n    MAX(\"Age\") AS \"Maximum Age\"\nFROM \n    \"singer\"\nWHERE \n    \"Country\" = 'France';", "match": {"match": true, "result": [[34.5, 25, 43]]}}
{"result": "SELECT Name, Song_release_year\nFROM singer\nWHERE Age = (SELECT MIN(Age) FROM singer);", "match": {"match": false, "result": [["Tribal King", "2016"]], "gt": [["Love", "2016"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.Name, s.Song_release_year\nFROM singer s\nWHERE s.Age = (SELECT MIN(Age) FROM singer);", "match": {"match": false, "result": [["Tribal King", "2016"]], "gt": [["Love", "2016"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT DISTINCT Country\nFROM singer\nWHERE Age > 20;\n```", "match": {"match": true, "result": [["Netherlands"], ["United States"], ["France"]]}}
{"result": "SELECT DISTINCT Country\nFROM singer\nWHERE Age > 20;", "match": {"match": true, "result": [["Netherlands"], ["United States"], ["France"]]}}
{"result": "SELECT s.Country, COUNT(DISTINCT s.Singer_ID) AS Number_of_Singers\nFROM singer s\nGROUP BY s.Country;", "match": {"match": true, "result": [["France", 4], ["Netherlands", 1], ["United States", 1]]}}
{"result": "SELECT Country, COUNT(*) as Singer_Count\nFROM singer\nGROUP BY Country\nORDER BY Singer_Count DESC;", "match": {"match": false, "result": [["France", 4], ["United States", 1], ["Netherlands", 1]], "gt": [["France", 4], ["Netherlands", 1], ["United States", 1]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT s.Name, s.Song_Name\nFROM singer s\nWHERE s.Age > (SELECT AVG(Age) FROM singer);\n```", "match": {"match": false, "result": [["Joe Sharp", "You"], ["Rose White", "Sun"], ["John Nizinik", "Gentleman"]], "gt": [["You"], ["Sun"], ["Gentleman"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT s.Song_Name\nFROM singer s\nWHERE s.Age > (SELECT AVG(Age) FROM singer);", "match": {"match": true, "result": [["You"], ["Sun"], ["Gentleman"]]}}
{"result": "SELECT Location, Name\nFROM stadium\nWHERE Capacity BETWEEN 5000 AND 10000;", "match": {"match": true, "result": []}}
{"result": "SELECT \"Location\", \"Name\"\nFROM \"stadium\"\nWHERE \"Capacity\" BETWEEN 5000 AND 10000;", "match": {"match": true, "result": []}}
{"result": "SELECT MAX(Capacity) AS Max_Capacity, AVG(Capacity) AS Average_Capacity\nFROM stadium;", "match": {"match": false, "result": [[52500, 10621.666666666666]], "gt": [[52500, 730]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(Capacity) AS Average_Capacity, MAX(Capacity) AS Maximum_Capacity FROM stadium;", "match": {"match": true, "result": [[10621.666666666666, 52500]]}}
{"result": "SELECT \"Name\", \"Capacity\"\nFROM \"stadium\"\nWHERE \"Average\" = (SELECT MAX(\"Average\") FROM \"stadium\");", "match": {"match": true, "result": [["Stark's Park", 10104]]}}
{"result": "SELECT Name, Capacity\nFROM stadium\nWHERE Average = (SELECT MAX(Average) FROM stadium);", "match": {"match": true, "result": [["Stark's Park", 10104]]}}
{"result": "SELECT COUNT(*) AS concert_count_2014_2015\nFROM concert\nWHERE Year IN ('2014', '2015');", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(DISTINCT concert_ID) AS concerts_2014_2015\nFROM concert\nWHERE Year IN ('2014', '2015');", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT s.Name, COUNT(c.concert_ID) AS Number_of_Concerts\nFROM stadium s\nLEFT JOIN concert c ON s.Stadium_ID::text = c.Stadium_ID\nGROUP BY s.Name\nORDER BY Number_of_Concerts DESC;", "match": {"match": false, "error": "Query execution failed with error: unrecognized token: \":\""}}
{"result": "SELECT s.\"Stadium_ID\", COUNT(DISTINCT c.\"concert_ID\") AS concert_count\nFROM \"stadium\" s\nLEFT JOIN \"concert\" c ON s.\"Stadium_ID\" = c.\"Stadium_ID\"\nGROUP BY s.\"Stadium_ID\";", "match": {"match": false, "result": [[1, 1], [2, 2], [3, 0], [4, 0], [5, 0], [6, 0], [7, 1], [9, 1], [10, 1]], "gt": [["Stark's Park", 1], ["Glebe Park", 1], ["Somerset Park", 2], ["Recreation Park", 1], ["Balmoor", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.\"Name\" AS stadium_name, s.\"Capacity\", COUNT(DISTINCT c.\"concert_ID\") AS concert_count\nFROM \"stadium\" s\nJOIN \"concert\" c ON s.\"Stadium_ID\" = c.\"Stadium_ID\"\nWHERE c.\"Year\" >= '2014'\nGROUP BY s.\"Stadium_ID\"\nORDER BY concert_count DESC\nLIMIT 1;", "match": {"match": false, "result": [["Somerset Park", 11998, 2]], "gt": [["Somerset Park", 11998]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT s.Name, s.Capacity\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.Year > '2013'\nGROUP BY s.Stadium_ID\nORDER BY COUNT(c.concert_ID) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [["Somerset Park", 11998]]}}
{"result": "SELECT Year, COUNT(*) as concert_count\nFROM concert\nGROUP BY Year\nORDER BY concert_count DESC\nLIMIT 1;", "match": {"match": false, "result": [["2015", 3]], "gt": [["2015"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Year, COUNT(*) as concert_count\nFROM concert\nGROUP BY Year\nORDER BY concert_count DESC\nLIMIT 1", "match": {"match": false, "result": [["2015", 3]], "gt": [["2015"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.Name\nFROM stadium s\nLEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.concert_ID IS NULL;", "match": {"match": true, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"]]}}
{"result": "SELECT s.Name\nFROM stadium s\nLEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.concert_ID IS NULL;", "match": {"match": true, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"]]}}
{"result": "SELECT DISTINCT s1.Country\nFROM singer s1\nJOIN singer_in_concert sic1 ON s1.Singer_ID = sic1.Singer_ID\nJOIN singer s2 ON sic1.Singer_ID = s2.Singer_ID\nWHERE s1.Age > 40 AND s2.Age < 30 AND s1.Country = s2.Country;", "match": {"match": false, "result": [], "gt": [["France"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name\nFROM stadium\nWHERE Stadium_ID NOT IN (\n    SELECT DISTINCT Stadium_ID\n    FROM concert\n    WHERE Year = '2014'\n);", "match": {"match": false, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"], ["Recreation Park"], ["Balmoor"]], "gt": [["Balmoor"], ["Bayview Stadium"], ["Forthbank Stadium"], ["Gayfield Park"], ["Hampden Park"], ["Recreation Park"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.Name\nFROM stadium s\nLEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID AND c.Year = '2014'\nWHERE c.concert_ID IS NULL;", "match": {"match": false, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"], ["Recreation Park"], ["Balmoor"]], "gt": [["Balmoor"], ["Bayview Stadium"], ["Forthbank Stadium"], ["Gayfield Park"], ["Hampden Park"], ["Recreation Park"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT \n    c.concert_Name,\n    c.Theme,\n    COUNT(sic.Singer_ID) AS Number_of_Singers\nFROM \n    concert c\nLEFT JOIN \n    singer_in_concert sic ON c.concert_ID = sic.concert_ID\nGROUP BY \n    c.concert_Name, c.Theme;\n```", "match": {"match": false, "result": [["Auditions", "Free choice", 3], ["Home Visits", "Bleeding Love", 1], ["Super bootcamp", "Free choice 2", 2], ["Week 1", "Happy Tonight", 2], ["Week 1", "Wide Awake", 1], ["Week 2", "Party All Night", 1]], "gt": [["Auditions", "Free choice", 3], ["Super bootcamp", "Free choice 2", 2], ["Home Visits", "Bleeding Love", 1], ["Week 1", "Wide Awake", 1], ["Week 1", "Happy Tonight", 2], ["Week 2", "Party All Night", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT c.concert_Name, c.Theme, COUNT(sic.Singer_ID) as Number_of_Singers\nFROM concert c\nLEFT JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID\nGROUP BY c.concert_ID, c.concert_Name, c.Theme;", "match": {"match": true, "result": [["Auditions", "Free choice", 3], ["Super bootcamp", "Free choice 2", 2], ["Home Visits", "Bleeding Love", 1], ["Week 1", "Wide Awake", 1], ["Week 1", "Happy Tonight", 2], ["Week 2", "Party All Night", 1]]}}
{"result": "SELECT s.Name, COUNT(sc.concert_ID) as Concert_Count\nFROM singer s\nLEFT JOIN singer_in_concert sc ON s.Singer_ID = sc.Singer_ID\nGROUP BY s.Singer_ID, s.Name\nORDER BY Concert_Count DESC;", "match": {"match": false, "result": [["Justin Brown", 3], ["Timbaland", 2], ["John Nizinik", 2], ["Tribal King", 2], ["Rose White", 1], ["Joe Sharp", 0]], "gt": [["Timbaland", 2], ["Justin Brown", 3], ["Rose White", 1], ["John Nizinik", 2], ["Tribal King", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.Name, COUNT(sic.concert_ID) AS Concert_Count\nFROM singer s\nLEFT JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID\nGROUP BY s.Singer_ID, s.Name;", "match": {"match": false, "result": [["Joe Sharp", 0], ["Timbaland", 2], ["Justin Brown", 3], ["Rose White", 1], ["John Nizinik", 2], ["Tribal King", 2]], "gt": [["Timbaland", 2], ["Justin Brown", 3], ["Rose White", 1], ["John Nizinik", 2], ["Tribal King", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT s.Name\nFROM singer s\nJOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID\nJOIN concert c ON sic.concert_ID = c.concert_ID\nWHERE c.Year = '2014';", "match": {"match": false, "result": [["Timbaland"], ["Justin Brown"], ["John Nizinik"], ["Tribal King"], ["Rose White"]], "gt": [["Timbaland"], ["Justin Brown"], ["John Nizinik"], ["Justin Brown"], ["Tribal King"], ["Rose White"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.Name\nFROM singer s\nJOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID\nJOIN concert c ON sic.concert_ID = c.concert_ID\nWHERE c.Year = '2014';", "match": {"match": true, "result": [["Timbaland"], ["Justin Brown"], ["John Nizinik"], ["Justin Brown"], ["Tribal King"], ["Rose White"]]}}
{"result": "SELECT s.Name, s.Country\nFROM singer s\nWHERE s.Song_Name LIKE '%Hey%';", "match": {"match": true, "result": [["Justin Brown", "France"]]}}
{"result": "SELECT DISTINCT s.Name, s.Country\nFROM singer s\nINNER JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID\nINNER JOIN concert c ON sic.concert_ID = c.concert_ID\nWHERE s.Song_Name LIKE '%Hey%';", "match": {"match": true, "result": [["Justin Brown", "France"]]}}
{"result": "```sql\nSELECT DISTINCT s.Name, s.Location\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE EXISTS (\n    SELECT 1\n    FROM concert c2\n    WHERE c2.Stadium_ID = c.Stadium_ID\n    AND c2.Year = '2014'\n)\nAND EXISTS (\n    SELECT 1\n    FROM concert c3\n    WHERE c3.Stadium_ID = c.Stadium_ID\n    AND c3.Year = '2015'\n);\n```", "match": {"match": true, "result": [["Somerset Park", "Ayr United"]]}}
{"result": "SELECT DISTINCT s.Name, s.Location\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.Year IN ('2014', '2015')\nGROUP BY s.Stadium_ID, s.Name, s.Location\nHAVING COUNT(DISTINCT c.Year) = 2", "match": {"match": true, "result": [["Somerset Park", "Ayr United"]]}}
{"result": "SELECT COUNT(*) AS concert_count\nFROM concert c\nJOIN stadium s ON c.Stadium_ID = s.Stadium_ID\nWHERE s.Capacity = (SELECT MAX(Capacity) FROM stadium);", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(concert_ID) AS concert_count\nFROM concert\nWHERE Stadium_ID = (\n    SELECT Stadium_ID\n    FROM stadium\n    ORDER BY Capacity DESC\n    LIMIT 1\n)", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(*)\nFROM Pets\nWHERE weight > 10;", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(*)\nFROM Pets\nWHERE weight > 10;", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT weight\nFROM Pets\nWHERE PetType = 'Dog'\nORDER BY pet_age ASC\nLIMIT 1;", "match": {"match": false, "result": [], "gt": [[9.3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MIN(weight) AS youngest_dog_weight\nFROM Pets\nWHERE PetType = 'dog' AND pet_age = (\n    SELECT MIN(pet_age)\n    FROM Pets\n    WHERE PetType = 'dog'\n);", "match": {"match": true, "result": [[9.3]]}}
{"result": "SELECT PetType, MAX(weight) as MaxWeight\nFROM Pets\nGROUP BY PetType;", "match": {"match": false, "result": [["cat", 12.0], ["dog", 13.4]], "gt": [[12.0, "cat"], [13.4, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT PetType, MAX(weight) AS MaxWeight\nFROM Pets\nGROUP BY PetType;\n```", "match": {"match": false, "result": [["cat", 12.0], ["dog", 13.4]], "gt": [[12.0, "cat"], [13.4, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT h.PetID)\nFROM Has_Pet h\nJOIN Student s ON h.StuID = s.StuID\nWHERE s.Age > 20;", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(DISTINCT p.PetID)\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nJOIN Pets p ON hp.PetID = p.PetID\nWHERE s.Age > 20;", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(DISTINCT p.PetID) AS DogPetCount\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nJOIN Pets p ON hp.PetID = p.PetID\nWHERE s.Sex = 'F' AND p.PetType = 'dog';", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(DISTINCT p.PetID) AS dog_count\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nJOIN Pets p ON hp.PetID = p.PetID\nWHERE s.Sex = 'F' AND p.PetType = 'dog';", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(DISTINCT PetType) AS DistinctPetTypes\nFROM Pets;", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(DISTINCT PetType) AS distinct_pet_types\nFROM Pets;", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT DISTINCT Fname\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nJOIN Pets p ON hp.PetID = p.PetID\nWHERE p.PetType IN ('cat', 'dog');", "match": {"match": true, "result": [["Linda"], ["Tracy"]]}}
{"result": "SELECT DISTINCT S.Fname\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nJOIN Pets P ON HP.PetID = P.PetID\nWHERE P.PetType IN ('cat', 'dog');", "match": {"match": true, "result": [["Linda"], ["Tracy"]]}}
{"result": "SELECT DISTINCT Fname\nFROM Student S\nWHERE EXISTS (\n    SELECT 1\n    FROM Has_Pet HP1\n    JOIN Pets P1 ON HP1.PetID = P1.PetID\n    WHERE HP1.StuID = S.StuID AND P1.PetType = 'cat'\n)\nAND EXISTS (\n    SELECT 1\n    FROM Has_Pet HP2\n    JOIN Pets P2 ON HP2.PetID = P2.PetID\n    WHERE HP2.StuID = S.StuID AND P2.PetType = 'dog'\n);", "match": {"match": true, "result": []}}
{"result": "```sql\nSELECT DISTINCT S.Fname\nFROM Student S\nJOIN Has_Pet HP_Cat ON S.StuID = HP_Cat.StuID\nJOIN Pets P_Cat ON HP_Cat.PetID = P_Cat.PetID AND P_Cat.PetType = 'Cat'\nJOIN Has_Pet HP_Dog ON S.StuID = HP_Dog.StuID\nJOIN Pets P_Dog ON HP_Dog.PetID = P_Dog.PetID AND P_Dog.PetType = 'Dog';\n```", "match": {"match": true, "result": []}}
{"result": "SELECT DISTINCT S.Major, S.Age\nFROM Student S\nLEFT JOIN Has_Pet HP ON S.StuID = HP.StuID\nLEFT JOIN Pets P ON HP.PetID = P.PetID AND P.PetType != 'Cat'\nWHERE P.PetID IS NULL;", "match": {"match": false, "result": [[600, 21], [600, 20], [600, 26], [600, 18], [600, 19], [600, 17], [600, 22], [600, 16], [600, 27], [520, 22], [520, 19], [540, 17], [520, 20], [540, 18], [520, 18], [550, 20], [100, 17], [550, 21], [550, 18], [50, 18], [50, 26]], "gt": [[600, 19], [600, 21], [600, 20], [600, 26], [600, 18], [600, 18], [600, 20], [600, 19], [600, 17], [600, 22], [600, 20], [600, 18], [600, 16], [600, 17], [600, 27], [600, 20], [600, 18], [520, 22], [520, 19], [540, 17], [520, 20], [540, 18], [520, 18], [520, 19], [520, 18], [550, 20], [100, 17], [550, 21], [550, 20], [550, 20], [550, 18], [50, 18], [50, 26]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.Major, s.Age\nFROM Student s\nWHERE s.StuID NOT IN (\n    SELECT h.StuID\n    FROM Has_Pet h\n    JOIN Pets p ON h.PetID = p.PetID\n    WHERE p.PetType = 'cat'\n);", "match": {"match": true, "result": [[600, 19], [600, 21], [600, 20], [600, 26], [600, 18], [600, 18], [600, 20], [600, 19], [600, 17], [600, 22], [600, 20], [600, 18], [600, 16], [600, 17], [600, 27], [600, 20], [600, 18], [520, 22], [520, 19], [540, 17], [520, 20], [540, 18], [520, 18], [520, 19], [520, 18], [550, 20], [100, 17], [550, 21], [550, 20], [550, 20], [550, 18], [50, 18], [50, 26]]}}
{"result": "```sql\nSELECT DISTINCT S.StuID\nFROM Student S\nLEFT JOIN Has_Pet HP ON S.StuID = HP.StuID\nLEFT JOIN Pets P ON HP.PetID = P.PetID AND P.PetType = 'Cat'\nWHERE P.PetID IS NULL;\n```", "match": {"match": false, "result": [[1001], [1002], [1003], [1004], [1005], [1006], [1007], [1008], [1009], [1010], [1011], [1012], [1014], [1015], [1016], [1017], [1018], [1019], [1020], [1021], [1022], [1023], [1024], [1025], [1026], [1027], [1028], [1029], [1030], [1031], [1032], [1033], [1034], [1035]], "gt": [[1002], [1003], [1004], [1005], [1006], [1007], [1008], [1009], [1010], [1011], [1012], [1014], [1015], [1016], [1017], [1018], [1019], [1020], [1021], [1022], [1023], [1024], [1025], [1026], [1027], [1028], [1029], [1030], [1031], [1032], [1033], [1034], [1035]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT S.StuID\nFROM Student S\nLEFT JOIN Has_Pet HP ON S.StuID = HP.StuID\nLEFT JOIN Pets P ON HP.PetID = P.PetID\nWHERE P.PetType != 'Cat' OR P.PetType IS NULL;", "match": {"match": false, "result": [[1001], [1002], [1003], [1004], [1005], [1006], [1007], [1008], [1009], [1010], [1011], [1012], [1014], [1015], [1016], [1017], [1018], [1019], [1020], [1021], [1022], [1023], [1024], [1025], [1026], [1027], [1028], [1029], [1030], [1031], [1032], [1033], [1034], [1035]], "gt": [[1002], [1003], [1004], [1005], [1006], [1007], [1008], [1009], [1010], [1011], [1012], [1014], [1015], [1016], [1017], [1018], [1019], [1020], [1021], [1022], [1023], [1024], [1025], [1026], [1027], [1028], [1029], [1030], [1031], [1032], [1033], [1034], [1035]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT S.Fname, S.Age\nFROM Student S\nJOIN Has_Pet HP1 ON S.StuID = HP1.StuID\nJOIN Pets P1 ON HP1.PetID = P1.PetID\nLEFT JOIN Has_Pet HP2 ON S.StuID = HP2.StuID\nLEFT JOIN Pets P2 ON HP2.PetID = P2.PetID\nWHERE P1.PetType = 'dog' AND P2.PetType != 'cat'\n  AND NOT EXISTS (\n    SELECT 1\n    FROM Has_Pet HP3\n    JOIN Pets P3 ON HP3.PetID = P3.PetID\n    WHERE HP3.StuID = S.StuID AND P3.PetType = 'cat'\n  );", "match": {"match": false, "result": [["Tracy", 19]], "gt": [["Tracy", 19], ["Tracy", 19]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT S.Fname\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nJOIN Pets P ON HP.PetID = P.PetID\nWHERE P.PetType = 'dog'\n  AND S.StuID NOT IN (\n    SELECT HP2.StuID\n    FROM Has_Pet HP2\n    JOIN Pets P2 ON HP2.PetID = P2.PetID\n    WHERE P2.PetType = 'cat'\n  );", "match": {"match": false, "result": [["Tracy"]], "gt": [["Tracy", 19], ["Tracy", 19]], "error": "Query result does not match ground truth."}}
{"result": "SELECT p.PetType, p.weight\nFROM Pets p\nWHERE p.pet_age = (SELECT MIN(pet_age) FROM Pets)\nORDER BY p.weight ASC\nLIMIT 1;", "match": {"match": true, "result": [["dog", 9.3]]}}
{"result": "SELECT PetType, weight\nFROM Pets\nWHERE pet_age = (SELECT MIN(pet_age) FROM Pets)\nORDER BY weight\nLIMIT 1;", "match": {"match": true, "result": [["dog", 9.3]]}}
{"result": "SELECT PetID, weight\nFROM Pets\nWHERE pet_age > 1;", "match": {"match": true, "result": [[2001, 12.0], [2002, 13.4]]}}
{"result": "SELECT PetID, weight\nFROM Pets\nWHERE pet_age > 1;", "match": {"match": true, "result": [[2001, 12.0], [2002, 13.4]]}}
{"result": "SELECT p.PetType, AVG(p.pet_age) AS avg_age, MAX(p.pet_age) AS max_age\nFROM Pets p\nGROUP BY p.PetType;", "match": {"match": false, "result": [["cat", 3.0, 3], ["dog", 1.5, 2]], "gt": [[3.0, 3, "cat"], [1.5, 2, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    p.PetType,\n    AVG(p.pet_age) AS avg_age,\n    MAX(p.pet_age) AS max_age\nFROM \n    Pets p\nGROUP BY \n    p.PetType;", "match": {"match": false, "result": [["cat", 3.0, 3], ["dog", 1.5, 2]], "gt": [[3.0, 3, "cat"], [1.5, 2, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT PetType, AVG(weight) AS AverageWeight\nFROM Pets\nGROUP BY PetType;", "match": {"match": false, "result": [["cat", 12.0], ["dog", 11.350000000000001]], "gt": [[12.0, "cat"], [11.350000000000001, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT p.PetType, AVG(p.weight) AS AverageWeight\nFROM Pets p\nGROUP BY p.PetType;", "match": {"match": false, "result": [["cat", 12.0], ["dog", 11.350000000000001]], "gt": [[12.0, "cat"], [11.350000000000001, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT S.Fname, S.Age\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID;", "match": {"match": true, "result": [["Linda", 18], ["Tracy", 19]]}}
{"result": "SELECT DISTINCT Fname, Age\nFROM Student\nWHERE StuID IN (SELECT StuID FROM Has_Pet);", "match": {"match": true, "result": [["Linda", 18], ["Tracy", 19]]}}
{"result": "```sql\nSELECT Pets.PetID\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nJOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Student.LName = 'Smith';\n```", "match": {"match": true, "result": [[2001]]}}
{"result": "SELECT p.PetID\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nJOIN Pets p ON hp.PetID = p.PetID\nWHERE s.LName = 'Smith';", "match": {"match": true, "result": [[2001]]}}
{"result": "SELECT StuID, COUNT(DISTINCT PetID) AS NumPets\nFROM Has_Pet\nGROUP BY StuID;", "match": {"match": false, "result": [[1001, 1], [1002, 2]], "gt": [[1, 1001], [2, 1002]], "error": "Query result does not match ground truth."}}
{"result": "SELECT StuID, COUNT(PetID) AS NumberOfPets\nFROM Has_Pet\nGROUP BY StuID\nORDER BY StuID;", "match": {"match": false, "result": [[1001, 1], [1002, 2]], "gt": [[1, 1001], [2, 1002]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Fname, Sex\nFROM Student\nWHERE StuID IN (\n    SELECT StuID\n    FROM Has_Pet\n    GROUP BY StuID\n    HAVING COUNT(DISTINCT PetID) > 1\n);", "match": {"match": true, "result": [["Tracy", "F"]]}}
{"result": "SELECT DISTINCT S.Fname, S.Sex\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nGROUP BY S.StuID\nHAVING COUNT(DISTINCT HP.PetID) > 1;", "match": {"match": true, "result": [["Tracy", "F"]]}}
{"result": "SELECT DISTINCT S.LName\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nJOIN Pets P ON HP.PetID = P.PetID\nWHERE P.PetType = 'cat' AND P.pet_age = 3;", "match": {"match": true, "result": [["Smith"]]}}
{"result": "SELECT S.LName\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nJOIN Pets P ON HP.PetID = P.PetID\nWHERE P.PetType = 'cat' AND P.pet_age = 3\nORDER BY S.StuID DESC\nLIMIT 1;", "match": {"match": true, "result": [["Smith"]]}}
{"result": "SELECT AVG(Age) AS AvgAgeWithoutPet\nFROM Student\nWHERE StuID NOT IN (\n    SELECT DISTINCT StuID\n    FROM Has_Pet\n);", "match": {"match": true, "result": [[19.625]]}}
{"result": "SELECT AVG(S.Age)\nFROM Student S\nLEFT JOIN Has_Pet HP ON S.StuID = HP.StuID\nWHERE HP.PetID IS NULL;", "match": {"match": true, "result": [[19.625]]}}
{"result": "SELECT COUNT(*) FROM employee;", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT COUNT(*) AS employee_count\nFROM employee;", "match": {"match": true, "result": [[10]]}}
{"result": "```sql\nSELECT Name\nFROM employee\nORDER BY Age ASC;\n```", "match": {"match": true, "result": [["George Chuter"], ["Andrew Sheridan"], ["Lee Mears"], ["Tim Payne"], ["Matt Stevens"], ["Jason Hobson"], ["Steve Borthwick"], ["Louis Deacon"], ["Phil Vickery"], ["Mark Regan"]]}}
{"result": "SELECT Name\nFROM employee\nORDER BY Age ASC;", "match": {"match": true, "result": [["George Chuter"], ["Andrew Sheridan"], ["Lee Mears"], ["Tim Payne"], ["Matt Stevens"], ["Jason Hobson"], ["Steve Borthwick"], ["Louis Deacon"], ["Phil Vickery"], ["Mark Regan"]]}}
{"result": "SELECT City, COUNT(*) AS Number_of_Employees\nFROM employee\nGROUP BY City;", "match": {"match": false, "result": [["Bath", 3], ["Bristol", 3], ["Leicester", 1], ["Sale", 1], ["Wasps", 2]], "gt": [[3, "Bath"], [3, "Bristol"], [1, "Leicester"], [1, "Sale"], [2, "Wasps"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT City, COUNT(*) AS Employee_Count\nFROM employee\nGROUP BY City;\n```", "match": {"match": false, "result": [["Bath", 3], ["Bristol", 3], ["Leicester", 1], ["Sale", 1], ["Wasps", 2]], "gt": [[3, "Bath"], [3, "Bristol"], [1, "Leicester"], [1, "Sale"], [2, "Wasps"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT City\nFROM employee\nWHERE Age < 30\nGROUP BY City\nHAVING COUNT(DISTINCT Employee_ID) > 1;", "match": {"match": true, "result": [["Bath"]]}}
{"result": "```sql\nSELECT City\nFROM employee\nWHERE Age < 30\nGROUP BY City\nHAVING COUNT(*) > 1;\n```", "match": {"match": true, "result": [["Bath"]]}}
{"result": "SELECT Location, COUNT(*) AS Shop_Count\nFROM shop\nGROUP BY Location;", "match": {"match": false, "result": [["Espoo", 1], ["Helsinki", 1], ["Jakobstad", 1], ["Kotka", 1], ["Kuopio", 1], ["Lahti", 1], ["Mariehamn", 1], ["Turku", 1], ["Valkeakoski", 1]], "gt": [[1, "Espoo"], [1, "Helsinki"], [1, "Jakobstad"], [1, "Kotka"], [1, "Kuopio"], [1, "Lahti"], [1, "Mariehamn"], [1, "Turku"], [1, "Valkeakoski"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Location, COUNT(*) as Shop_Count\nFROM shop\nGROUP BY Location;", "match": {"match": false, "result": [["Espoo", 1], ["Helsinki", 1], ["Jakobstad", 1], ["Kotka", 1], ["Kuopio", 1], ["Lahti", 1], ["Mariehamn", 1], ["Turku", 1], ["Valkeakoski", 1]], "gt": [[1, "Espoo"], [1, "Helsinki"], [1, "Jakobstad"], [1, "Kotka"], [1, "Kuopio"], [1, "Lahti"], [1, "Mariehamn"], [1, "Turku"], [1, "Valkeakoski"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \"Manager_name\", \"District\"\nFROM \"shop\"\nWHERE \"Number_products\" = (SELECT MAX(\"Number_products\") FROM \"shop\");", "match": {"match": true, "result": [["Ilkka M\u00e4kel\u00e4", "Lahden Stadion"]]}}
{"result": "```sql\nSELECT s.Manager_name, s.District\nFROM shop s\nJOIN (\n    SELECT Shop_ID\n    FROM shop\n    WHERE Number_products = (SELECT MAX(Number_products) FROM shop)\n) AS largest_shop ON s.Shop_ID = largest_shop.Shop_ID;\n```", "match": {"match": true, "result": [["Ilkka M\u00e4kel\u00e4", "Lahden Stadion"]]}}
{"result": "SELECT \n    MIN(\"Number_products\") AS \"Minimum_Products\",\n    MAX(\"Number_products\") AS \"Maximum_Products\"\nFROM \n    \"shop\";", "match": {"match": true, "result": [[1600, 15000]]}}
{"result": "```sql\nSELECT \n    MIN(\"Number_products\") AS \"Minimum_products\",\n    MAX(\"Number_products\") AS \"Maximum_products\"\nFROM \n    \"shop\";\n```", "match": {"match": true, "result": [[1600, 15000]]}}
{"result": "SELECT Name, Location, District\nFROM shop\nORDER BY Number_products DESC;", "match": {"match": true, "result": [["FC Lahti", "Lahti", "Lahden Stadion"], ["HJK", "Helsinki", "Finnair Stadium"], ["FC Inter", "Turku", "Veritas Stadion"], ["FC Honka", "Espoo", "Tapiolan Urheilupuisto"], ["FF Jaro", "Jakobstad", "Jakobstads Centralplan"], ["FC KooTeePee", "Kotka", "Arto Tolsa Areena"], ["FC Haka", "Valkeakoski", "Tehtaan kentt\u00e4"], ["KuPS", "Kuopio", "Magnum Areena"], ["IFK Mariehamn", "Mariehamn", "Wikl\u00f6f Holding Arena"]]}}
{"result": "SELECT \n    \"Name\",\n    \"Location\",\n    \"District\"\nFROM \n    \"shop\"\nORDER BY \n    \"Number_products\" DESC;", "match": {"match": true, "result": [["FC Lahti", "Lahti", "Lahden Stadion"], ["HJK", "Helsinki", "Finnair Stadium"], ["FC Inter", "Turku", "Veritas Stadion"], ["FC Honka", "Espoo", "Tapiolan Urheilupuisto"], ["FF Jaro", "Jakobstad", "Jakobstads Centralplan"], ["FC KooTeePee", "Kotka", "Arto Tolsa Areena"], ["FC Haka", "Valkeakoski", "Tehtaan kentt\u00e4"], ["KuPS", "Kuopio", "Magnum Areena"], ["IFK Mariehamn", "Mariehamn", "Wikl\u00f6f Holding Arena"]]}}
{"result": "```sql\nSELECT Name\nFROM shop\nWHERE Number_products > (SELECT AVG(Number_products) FROM shop);\n```", "match": {"match": true, "result": [["HJK"], ["FC Inter"], ["FC Lahti"]]}}
{"result": "SELECT s.Name\nFROM shop s\nWHERE s.Number_products > (SELECT AVG(Number_products) FROM shop);", "match": {"match": true, "result": [["HJK"], ["FC Inter"], ["FC Lahti"]]}}
{"result": "```sql\nSELECT e.Name, COUNT(e.Employee_ID) AS evaluation_count\nFROM employee e\nJOIN evaluation eval ON e.Employee_ID = eval.Employee_ID\nGROUP BY e.Employee_ID\nORDER BY evaluation_count DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [["George Chuter", 2]], "gt": [["George Chuter"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT e.Name\nFROM employee e\nJOIN evaluation ev ON e.Employee_ID = ev.Employee_ID\nGROUP BY e.Employee_ID, e.Name\nORDER BY COUNT(*) DESC\nLIMIT 1;", "match": {"match": true, "result": [["George Chuter"]]}}
{"result": "SELECT e.Name\nFROM employee e\nJOIN evaluation ev ON e.Employee_ID = ev.Employee_ID\nWHERE ev.Bonus = (\n    SELECT MAX(Bonus)\n    FROM evaluation\n);", "match": {"match": true, "result": [["Louis Deacon"]]}}
{"result": "SELECT e.Name\nFROM employee e\nJOIN evaluation ev ON e.Employee_ID = ev.Employee_ID\nWHERE ev.Bonus = (SELECT MAX(Bonus) FROM evaluation);", "match": {"match": true, "result": [["Louis Deacon"]]}}
{"result": "```sql\nSELECT Name\nFROM employee\nWHERE Employee_ID NOT IN (SELECT DISTINCT Employee_ID FROM evaluation);\n```", "match": {"match": true, "result": [["Mark Regan"], ["Tim Payne"], ["Andrew Sheridan"], ["Phil Vickery"], ["Steve Borthwick"]]}}
{"result": "SELECT e.Name\nFROM employee e\nLEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID\nWHERE ev.Employee_ID IS NULL;", "match": {"match": true, "result": [["Mark Regan"], ["Tim Payne"], ["Andrew Sheridan"], ["Phil Vickery"], ["Steve Borthwick"]]}}
{"result": "```sql\nSELECT s.Name\nFROM shop s\nJOIN hiring h ON s.Shop_ID = h.Shop_ID\nGROUP BY s.Shop_ID\nORDER BY COUNT(h.Employee_ID) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [["FC Haka"]]}}
{"result": "SELECT s.Name\nFROM shop s\nJOIN hiring h ON s.Shop_ID = h.Shop_ID\nGROUP BY s.Shop_ID, s.Name\nORDER BY COUNT(h.Employee_ID) DESC\nLIMIT 1;", "match": {"match": true, "result": [["FC Haka"]]}}
{"result": "SELECT s.Name\nFROM shop s\nLEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID\nWHERE h.Employee_ID IS NULL;", "match": {"match": true, "result": [["FC Honka"], ["KuPS"], ["IFK Mariehamn"]]}}
{"result": "```sql\nSELECT \"shop\".\"Name\"\nFROM \"shop\"\nLEFT JOIN \"hiring\" ON \"shop\".\"Shop_ID\" = \"hiring\".\"Shop_ID\"\nWHERE \"hiring\".\"Employee_ID\" IS NULL;\n```", "match": {"match": true, "result": [["FC Honka"], ["KuPS"], ["IFK Mariehamn"]]}}
{"result": "SELECT s.Name AS Shop_Name, COUNT(h.Employee_ID) AS Number_of_Employees_Hired\nFROM shop s\nJOIN hiring h ON s.Shop_ID = h.Shop_ID\nGROUP BY s.Shop_ID, s.Name;", "match": {"match": false, "result": [["FC Haka", 2], ["HJK", 1], ["FC Inter", 1], ["FF Jaro", 1], ["FC KooTeePee", 1], ["FC Lahti", 1]], "gt": [[2, "FC Haka"], [1, "FC Inter"], [1, "FC KooTeePee"], [1, "FC Lahti"], [1, "FF Jaro"], [1, "HJK"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT s.Name, COUNT(h.Employee_ID) AS Number_of_Employees\nFROM shop s\nLEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID\nGROUP BY s.Shop_ID\nORDER BY s.Name;\n```", "match": {"match": false, "result": [["FC Haka", 2], ["FC Honka", 0], ["FC Inter", 1], ["FC KooTeePee", 1], ["FC Lahti", 1], ["FF Jaro", 1], ["HJK", 1], ["IFK Mariehamn", 0], ["KuPS", 0]], "gt": [[2, "FC Haka"], [1, "FC Inter"], [1, "FC KooTeePee"], [1, "FC Lahti"], [1, "FF Jaro"], [1, "HJK"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT SUM(Bonus) AS Total_Bonus\nFROM evaluation;", "match": {"match": true, "result": [[19500.0]]}}
{"result": "```sql\nSELECT SUM(Bonus) AS Total_Bonus\nFROM evaluation;\n```", "match": {"match": true, "result": [[19500.0]]}}
{"result": "SELECT *\nFROM hiring;", "match": {"match": true, "result": [[1, 1, "2009", "T"], [1, 2, "2003", "T"], [8, 3, "2011", "F"], [4, 4, "2012", "T"], [5, 5, "2013", "T"], [2, 6, "2010", "F"], [6, 7, "2008", "T"]]}}
{"result": "SELECT \n    h.Shop_ID,\n    s.Name AS Shop_Name,\n    e.Employee_ID,\n    e.Name AS Employee_Name,\n    h.Start_from,\n    h.Is_full_time\nFROM \n    hiring h\nJOIN \n    employee e ON h.Employee_ID = e.Employee_ID\nJOIN \n    shop s ON h.Shop_ID = s.Shop_ID;", "match": {"match": false, "result": [[1, "FC Haka", 1, "George Chuter", "2009", "T"], [1, "FC Haka", 2, "Lee Mears", "2003", "T"], [8, "FC Lahti", 3, "Mark Regan", "2011", "F"], [4, "FC Inter", 4, "Jason Hobson", "2012", "T"], [5, "FF Jaro", 5, "Tim Payne", "2013", "T"], [2, "HJK", 6, "Andrew Sheridan", "2010", "F"], [6, "FC KooTeePee", 7, "Matt Stevens", "2008", "T"]], "gt": [[1, 1, "2009", "T"], [1, 2, "2003", "T"], [8, 3, "2011", "F"], [4, 4, "2012", "T"], [5, 5, "2013", "T"], [2, 6, "2010", "F"], [6, 7, "2008", "T"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT DISTINCT s1.District\nFROM shop s1\nJOIN shop s2 ON s1.District = s2.District\nWHERE s1.Number_products < 3000 AND s2.Number_products > 10000;\n```", "match": {"match": true, "result": []}}
{"result": "SELECT DISTINCT s1.District\nFROM shop s1\nJOIN shop s2 ON s1.District = s2.District\nWHERE s1.Number_products < 3000 AND s2.Number_products > 10000\n  AND s1.Shop_ID != s2.Shop_ID;", "match": {"match": true, "result": []}}
{"result": "SELECT COUNT(DISTINCT Location) AS different_locations\nFROM shop", "match": {"match": true, "result": [[9]]}}
{"result": "```sql\nSELECT COUNT(DISTINCT \"Location\") \nFROM \"shop\";\n```", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(DISTINCT Document_ID) AS Number_of_Documents\nFROM Documents;", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) AS Document_Count\nFROM Documents;", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT Document_ID, Document_Name, Document_Description\nFROM Documents;", "match": {"match": true, "result": [[0, "Introduction of OS", "n"], [1, "Understanding DB", "y"], [3, "Summer Show", "u"], [76, "Robbin CV", "y"], [80, "Welcome to NY", "h"], [82, "Data base", "w"], [2394, "Customer reviews", "y"], [3830, "Do not panic", "k"], [33930, "How Google people work", "z"], [50123, "Learning French", "r"], [651512, "How to write a CV", "f"], [801801, "How to read a book", "w"], [3540024, "Palm reading", "y"], [16514113, "A history of Arts", "h"], [385906526, "About Korea", "b"]]}}
{"result": "SELECT Document_ID, Document_Name, Document_Description\nFROM Documents;", "match": {"match": true, "result": [[0, "Introduction of OS", "n"], [1, "Understanding DB", "y"], [3, "Summer Show", "u"], [76, "Robbin CV", "y"], [80, "Welcome to NY", "h"], [82, "Data base", "w"], [2394, "Customer reviews", "y"], [3830, "Do not panic", "k"], [33930, "How Google people work", "z"], [50123, "Learning French", "r"], [651512, "How to write a CV", "f"], [801801, "How to read a book", "w"], [3540024, "Palm reading", "y"], [16514113, "A history of Arts", "h"], [385906526, "About Korea", "b"]]}}
{"result": "SELECT d.Document_Name, t.Template_ID\nFROM Documents d\nJOIN Templates t ON d.Template_ID = t.Template_ID\nWHERE d.Document_Description LIKE '%w%';", "match": {"match": true, "result": [["Data base", 11], ["How to read a book", 4]]}}
{"result": "SELECT DISTINCT d.Document_Name, t.Template_ID\nFROM Documents d\nJOIN Templates t ON d.Template_ID = t.Template_ID\nWHERE d.Document_Description LIKE '%w%'", "match": {"match": true, "result": [["Data base", 11], ["How to read a book", 4]]}}
{"result": "SELECT d.Document_ID, d.Template_ID, d.Document_Description\nFROM Documents d\nWHERE d.Document_Name = 'Robbin CV';", "match": {"match": true, "result": [[76, 20, "y"]]}}
{"result": "```sql\nSELECT d.Document_ID, t.Template_ID, d.Document_Description\nFROM Documents d\nJOIN Templates t ON d.Template_ID = t.Template_ID\nWHERE d.Document_Name = 'Robbin CV';\n```", "match": {"match": true, "result": [[76, 20, "y"]]}}
{"result": "SELECT COUNT(DISTINCT Template_ID) AS Different_Templates\nFROM Documents\nWHERE Template_ID IS NOT NULL;", "match": {"match": true, "result": [[12]]}}
{"result": "```sql\nSELECT COUNT(DISTINCT Template_ID) AS Number_of_Templates\nFROM Templates\nWHERE Template_ID IS NOT NULL;\n```", "match": {"match": false, "result": [[20]], "gt": [[12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT d.Document_ID) AS Document_Count\nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID\nWHERE t.Template_Type_Code = 'PPT';", "match": {"match": true, "result": [[3]]}}
{"result": "```sql\nSELECT COUNT(DISTINCT d.Document_ID) AS DocumentCount\nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID\nJOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code\nWHERE rtt.Template_Type_Description = 'PPT';\n```", "match": {"match": false, "result": [[0]], "gt": [[3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT t.Template_ID, COUNT(d.Document_ID) AS DocumentCount\nFROM Templates t\nLEFT JOIN Documents d ON t.Template_ID = d.Template_ID\nGROUP BY t.Template_ID", "match": {"match": false, "result": [[0, 0], [1, 1], [4, 1], [6, 1], [7, 1], [8, 1], [9, 0], [10, 1], [11, 2], [14, 2], [15, 0], [16, 0], [18, 0], [19, 0], [20, 1], [21, 1], [22, 1], [23, 0], [24, 0], [25, 2]], "gt": [[1, 1], [4, 1], [6, 1], [7, 1], [8, 1], [10, 1], [11, 2], [14, 2], [20, 1], [21, 1], [22, 1], [25, 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT t.Template_ID, COUNT(d.Document_ID) AS Usage_Count\nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID\nGROUP BY t.Template_ID", "match": {"match": true, "result": [[1, 1], [4, 1], [6, 1], [7, 1], [8, 1], [10, 1], [11, 2], [14, 2], [20, 1], [21, 1], [22, 1], [25, 2]]}}
{"result": "SELECT t.Template_ID, t.Template_Type_Code\nFROM Templates t\nJOIN (\n    SELECT Template_ID, COUNT(DISTINCT Document_ID) as doc_count\n    FROM Templates\n    GROUP BY Template_ID\n    ORDER BY doc_count DESC\n    LIMIT 1\n) top_template ON t.Template_ID = top_template.Template_ID;", "match": {"match": false, "error": "Query execution failed with error: no such column: Document_ID"}}
{"result": "SELECT t.Template_ID, t.Template_Type_Code\nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID\nGROUP BY t.Template_ID, t.Template_Type_Code\nHAVING COUNT(DISTINCT d.Document_ID) = (\n    SELECT COUNT(DISTINCT d2.Document_ID)\n    FROM Templates t2\n    JOIN Documents d2 ON t2.Template_ID = d2.Template_ID\n    GROUP BY t2.Template_ID\n    ORDER BY COUNT(DISTINCT d2.Document_ID) DESC\n    LIMIT 1\n);", "match": {"match": false, "result": [[11, "BK"], [14, "AD"], [25, "PP"]], "gt": [[25, "PP"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT t.Template_ID\nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID\nGROUP BY t.Template_ID\nHAVING COUNT(DISTINCT d.Document_ID) > 1;", "match": {"match": true, "result": [[11], [14], [25]]}}
{"result": "```sql\nSELECT t.Template_ID\nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID\nGROUP BY t.Template_ID\nHAVING COUNT(DISTINCT d.Document_ID) > 1;\n```", "match": {"match": true, "result": [[11], [14], [25]]}}
{"result": "SELECT t.Template_ID\nFROM Templates t\nLEFT JOIN Documents d ON t.Template_ID = d.Template_ID\nWHERE d.Document_ID IS NULL;", "match": {"match": true, "result": [[0], [9], [15], [16], [18], [19], [23], [24]]}}
{"result": "SELECT Template_ID\nFROM Templates\nWHERE Template_ID NOT IN (\n    SELECT DISTINCT Template_ID\n    FROM Documents\n    WHERE Template_ID IS NOT NULL\n);", "match": {"match": true, "result": [[0], [9], [15], [16], [18], [19], [23], [24]]}}
{"result": "```sql\nSELECT COUNT(*) FROM Templates;\n```", "match": {"match": true, "result": [[20]]}}
{"result": "SELECT COUNT(*) FROM Templates;", "match": {"match": true, "result": [[20]]}}
{"result": "SELECT \n    Template_ID, \n    Version_Number, \n    Template_Type_Code\nFROM \n    Templates;", "match": {"match": true, "result": [[0, 5, "PP"], [1, 9, "PP"], [4, 4, "BK"], [6, 2, "PPT"], [7, 8, "PPT"], [8, 3, "BK"], [9, 2, "BK"], [10, 1, "PPT"], [11, 6, "BK"], [14, 7, "AD"], [15, 9, "CV"], [16, 5, "CV"], [18, 5, "PP"], [19, 7, "AD"], [20, 6, "BK"], [21, 9, "AD"], [22, 0, "PP"], [23, 2, "BK"], [24, 8, "PP"], [25, 5, "PP"]]}}
{"result": "SELECT Template_ID, Version_Number, Template_Type_Code\nFROM Templates;", "match": {"match": true, "result": [[0, 5, "PP"], [1, 9, "PP"], [4, 4, "BK"], [6, 2, "PPT"], [7, 8, "PPT"], [8, 3, "BK"], [9, 2, "BK"], [10, 1, "PPT"], [11, 6, "BK"], [14, 7, "AD"], [15, 9, "CV"], [16, 5, "CV"], [18, 5, "PP"], [19, 7, "AD"], [20, 6, "BK"], [21, 9, "AD"], [22, 0, "PP"], [23, 2, "BK"], [24, 8, "PP"], [25, 5, "PP"]]}}
{"result": "SELECT DISTINCT Template_Type_Code\nFROM Templates;", "match": {"match": true, "result": [["PP"], ["BK"], ["PPT"], ["AD"], ["CV"]]}}
{"result": "SELECT DISTINCT Template_Type_Code\nFROM Ref_Template_Types;", "match": {"match": false, "result": [["AD"], ["BK"], ["CV"], ["PP"], ["PPT"]], "gt": [["PP"], ["BK"], ["PPT"], ["AD"], ["CV"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Template_ID\nFROM Templates\nWHERE Template_Type_Code IN ('PP', 'PPT');", "match": {"match": true, "result": [[0], [1], [6], [7], [10], [18], [22], [24], [25]]}}
{"result": "SELECT Template_ID\nFROM Templates\nWHERE Template_Type_Code IN ('PP', 'PPT');", "match": {"match": true, "result": [[0], [1], [6], [7], [10], [18], [22], [24], [25]]}}
{"result": "SELECT COUNT(*)\nFROM Templates\nWHERE Template_Type_Code = 'CV';", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(*) AS Template_Count\nFROM Templates\nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Ref_Template_Types.Template_Type_Description = 'CV';", "match": {"match": true, "result": [[2]]}}
{"result": "```sql\nSELECT Version_Number, Template_Type_Code\nFROM Templates\nWHERE Version_Number > 5;\n```", "match": {"match": true, "result": [[9, "PP"], [8, "PPT"], [6, "BK"], [7, "AD"], [9, "CV"], [7, "AD"], [6, "BK"], [9, "AD"], [8, "PP"]]}}
{"result": "SELECT Version_Number, Template_Type_Code\nFROM Templates\nWHERE Version_Number > 5;", "match": {"match": true, "result": [[9, "PP"], [8, "PPT"], [6, "BK"], [7, "AD"], [9, "CV"], [7, "AD"], [6, "BK"], [9, "AD"], [8, "PP"]]}}
{"result": "SELECT rtt.Template_Type_Code, COUNT(t.Template_ID) AS Number_of_Templates\nFROM Ref_Template_Types rtt\nLEFT JOIN Templates t ON rtt.Template_Type_Code = t.Template_Type_Code\nGROUP BY rtt.Template_Type_Code;", "match": {"match": true, "result": [["AD", 3], ["BK", 6], ["CV", 2], ["PP", 6], ["PPT", 3]]}}
{"result": "SELECT \n    rtt.Template_Type_Code,\n    COUNT(t.Template_ID) AS Template_Count\nFROM \n    Ref_Template_Types rtt\nLEFT JOIN \n    Templates t ON rtt.Template_Type_Code = t.Template_Type_Code\nGROUP BY \n    rtt.Template_Type_Code\nORDER BY \n    Template_Count DESC;", "match": {"match": false, "result": [["BK", 6], ["PP", 6], ["AD", 3], ["PPT", 3], ["CV", 2]], "gt": [["AD", 3], ["BK", 6], ["CV", 2], ["PP", 6], ["PPT", 3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Template_Type_Code\nFROM Templates\nGROUP BY Template_Type_Code\nORDER BY COUNT(*) DESC\nLIMIT 1;", "match": {"match": true, "result": [["PP"]]}}
{"result": "SQL Query:\nSELECT Template_Type_Code\nFROM Templates\nGROUP BY Template_Type_Code\nORDER BY COUNT(*) DESC\nLIMIT 1;", "match": {"match": false, "error": "Query execution failed with error: near \"SQL\": syntax error"}}
{"result": "SELECT Template_Type_Code\nFROM Ref_Template_Types\nWHERE Template_Type_Code IN (\n    SELECT Template_Type_Code\n    FROM Templates\n    GROUP BY Template_Type_Code\n    HAVING COUNT(*) < 3\n);", "match": {"match": true, "result": [["CV"]]}}
{"result": "SELECT Template_Type_Code\nFROM Ref_Template_Types rtt\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM Templates t\n    WHERE t.Template_Type_Code = rtt.Template_Type_Code\n    GROUP BY t.Template_Type_Code\n    HAVING COUNT(*) >= 3\n);", "match": {"match": true, "result": [["CV"]]}}
{"result": "SELECT MIN(Version_Number) AS Smallest_Version_Number,\n       Template_Type_Code\nFROM Templates\nGROUP BY Template_Type_Code\nHAVING MIN(Version_Number) = (\n    SELECT MIN(Version_Number)\n    FROM Templates\n)", "match": {"match": true, "result": [[0, "PP"]]}}
{"result": "SELECT Version_Number, Template_Type_Code\nFROM Templates t\nWHERE Version_Number = (SELECT MIN(Version_Number) FROM Templates)\nORDER BY Template_Type_Code\nLIMIT 1;", "match": {"match": true, "result": [[0, "PP"]]}}
{"result": "SELECT T.Template_Type_Code\nFROM Templates T\nJOIN Documents D ON T.Template_ID = D.Template_ID\nWHERE D.Document_Name = 'Data base';", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT DISTINCT t.Template_Type_Code\nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID\nWHERE d.Document_Name = 'Data base';", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT DISTINCT d.Document_Name\nFROM Documents d\nJOIN Templates t ON d.Template_ID = t.Template_ID\nJOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code\nWHERE rtt.Template_Type_Code = 'BK';", "match": {"match": true, "result": [["Robbin CV"], ["Data base"], ["How to read a book"], ["Palm reading"], ["About Korea"]]}}
{"result": "SELECT DISTINCT d.Document_Name\nFROM Documents d\nJOIN Templates t ON d.Template_ID = t.Template_ID\nWHERE t.Template_Type_Code = 'BK';", "match": {"match": true, "result": [["Robbin CV"], ["Data base"], ["How to read a book"], ["Palm reading"], ["About Korea"]]}}
{"result": "SELECT rt.Template_Type_Code, COUNT(d.Document_ID) AS Document_Count\nFROM Ref_Template_Types rt\nLEFT JOIN Templates t ON rt.Template_Type_Code = t.Template_Type_Code\nLEFT JOIN Documents d ON t.Template_ID = d.Template_ID\nGROUP BY rt.Template_Type_Code\nORDER BY rt.Template_Type_Code;", "match": {"match": false, "result": [["AD", 3], ["BK", 5], ["CV", 0], ["PP", 4], ["PPT", 3]], "gt": [["AD", 3], ["BK", 5], ["PP", 4], ["PPT", 3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT rtt.Template_Type_Code, COUNT(DISTINCT t.Template_ID) AS Document_Count\nFROM Ref_Template_Types rtt\nLEFT JOIN Templates t ON rtt.Template_Type_Code = t.Template_Type_Code\nLEFT JOIN Documents d ON t.Template_ID = d.Template_ID\nGROUP BY rtt.Template_Type_Code\nORDER BY rtt.Template_Type_Code;", "match": {"match": false, "result": [["AD", 3], ["BK", 6], ["CV", 2], ["PP", 6], ["PPT", 3]], "gt": [["AD", 3], ["BK", 5], ["PP", 4], ["PPT", 3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT t.Template_Type_Code\nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID\nGROUP BY t.Template_Type_Code\nORDER BY COUNT(DISTINCT d.Document_ID) DESC\nLIMIT 1;", "match": {"match": true, "result": [["BK"]]}}
{"result": "```sql\nSELECT t.Template_Type_Code\nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID\nGROUP BY t.Template_Type_Code\nORDER BY COUNT(d.Document_ID) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT Template_Type_Code\nFROM Ref_Template_Types\nWHERE Template_Type_Code NOT IN (\n    SELECT DISTINCT t.Template_Type_Code\n    FROM Templates t\n    JOIN Documents d ON t.Template_ID = d.Template_ID\n);", "match": {"match": true, "result": [["CV"]]}}
{"result": "SELECT DISTINCT r.Template_Type_Code\nFROM Ref_Template_Types r\nLEFT JOIN Templates t ON r.Template_Type_Code = t.Template_Type_Code\nLEFT JOIN Documents d ON t.Template_ID = d.Template_ID\nWHERE d.Document_ID IS NULL;", "match": {"match": false, "result": [["AD"], ["BK"], ["CV"], ["PP"]], "gt": [["CV"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Template_Type_Code, Template_Type_Description\nFROM Ref_Template_Types;", "match": {"match": true, "result": [["PPT", "Presentation"], ["CV", "CV"], ["AD", "Advertisement"], ["PP", "Paper"], ["BK", "Book"]]}}
{"result": "SELECT Template_Type_Code, Template_Type_Description\nFROM Ref_Template_Types;", "match": {"match": true, "result": [["PPT", "Presentation"], ["CV", "CV"], ["AD", "Advertisement"], ["PP", "Paper"], ["BK", "Book"]]}}
{"result": "SELECT Template_Type_Description \nFROM Ref_Template_Types \nWHERE Template_Type_Code = 'AD';", "match": {"match": true, "result": [["Advertisement"]]}}
{"result": "SELECT Template_Type_Description\nFROM Ref_Template_Types\nWHERE Template_Type_Code = 'AD';", "match": {"match": true, "result": [["Advertisement"]]}}
{"result": "SELECT Template_Type_Code \nFROM Ref_Template_Types\nWHERE Template_Type_Description = 'Book';", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT Template_Type_Code\nFROM Ref_Template_Types\nWHERE Template_Type_Description = 'Book';", "match": {"match": true, "result": [["BK"]]}}
{"result": "```sql\nSELECT DISTINCT rtt.Template_Type_Description\nFROM Templates t\nJOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code\nJOIN Documents d ON t.Template_ID = d.Template_ID\nWHERE t.Date_Effective_From IS NOT NULL\nAND (t.Date_Effective_To IS NULL OR t.Date_Effective_To > CURRENT_TIMESTAMP);\n```", "match": {"match": false, "result": [], "gt": [["Presentation"], ["Paper"], ["Book"], ["Advertisement"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT t.Template_Details\nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID;", "match": {"match": false, "result": [[""]], "gt": [["Presentation"], ["Paper"], ["Book"], ["Advertisement"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT t.Template_ID\nFROM Templates t\nJOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code\nWHERE rtt.Template_Type_Description = 'Presentation';", "match": {"match": true, "result": [[6], [7], [10]]}}
{"result": "```sql\nSELECT t.Template_ID\nFROM Templates t\nJOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code\nWHERE rtt.Template_Type_Description = 'Presentation';\n```", "match": {"match": true, "result": [[6], [7], [10]]}}
{"result": "SELECT COUNT(*) AS Total_Paragraphs\nFROM Paragraphs;", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) AS Paragraph_Count\nFROM Paragraphs;", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) AS Paragraph_Count\nFROM Paragraphs p\nJOIN Documents d ON p.Document_ID = d.Document_ID\nWHERE d.Document_Name = 'Summer Show';", "match": {"match": true, "result": [[1]]}}
{"result": "```sql\nSELECT COUNT(p.Paragraph_ID) AS Paragraph_Count\nFROM Paragraphs p\nJOIN Documents d ON p.Document_ID = d.Document_ID\nWHERE d.Document_Name = 'Summer Show';\n```", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT Paragraph_Text, Other_Details\nFROM Paragraphs\nWHERE Paragraph_Text = 'Korea ';", "match": {"match": false, "result": [], "gt": [[null], [null]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Paragraph_Text, Other_Details\nFROM Paragraphs\nWHERE Paragraph_Text LIKE '%Korea %';", "match": {"match": false, "result": [], "gt": [[null], [null]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    p.Paragraph_ID, \n    p.Paragraph_Text\nFROM \n    Paragraphs p\nJOIN \n    Documents d ON p.Document_ID = d.Document_ID\nWHERE \n    d.Document_Name = 'Welcome to NY';", "match": {"match": true, "result": [[16615, "Japan"], [608931827, "Micronesia"]]}}
{"result": "SELECT p.Paragraph_ID, p.Paragraph_Text\nFROM Paragraphs p\nJOIN Documents d ON p.Document_ID = d.Document_ID\nWHERE d.Document_Name = 'Welcome to NY';", "match": {"match": true, "result": [[16615, "Japan"], [608931827, "Micronesia"]]}}
{"result": "```sql\nSELECT Paragraph_Text\nFROM Paragraphs AS p\nJOIN Documents AS d ON p.Document_ID = d.Document_ID\nWHERE d.Document_Name = 'Customer reviews';\n```", "match": {"match": true, "result": [["Korea"], ["Ukraine"], ["Korea"]]}}
{"result": "SELECT p.Paragraph_Text\nFROM Paragraphs p\nJOIN Documents d ON p.Document_ID = d.Document_ID\nWHERE d.Document_Name = 'Customer reviews';", "match": {"match": true, "result": [["Korea"], ["Ukraine"], ["Korea"]]}}
{"result": "SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS Paragraph_Count\nFROM Documents d\nLEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID\nORDER BY d.Document_ID;", "match": {"match": false, "result": [[0, 0], [1, 0], [3, 1], [76, 0], [80, 2], [82, 0], [2394, 3], [3830, 1], [33930, 1], [50123, 1], [651512, 2], [801801, 0], [3540024, 1], [16514113, 2], [385906526, 1]], "gt": [[3, 1], [80, 2], [2394, 3], [3830, 1], [33930, 1], [50123, 1], [651512, 2], [3540024, 1], [16514113, 2], [385906526, 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    Document_ID, \n    COUNT(*) AS Paragraph_Count\nFROM \n    Paragraphs\nGROUP BY \n    Document_ID\nORDER BY \n    Document_ID;", "match": {"match": true, "result": [[3, 1], [80, 2], [2394, 3], [3830, 1], [33930, 1], [50123, 1], [651512, 2], [3540024, 1], [16514113, 2], [385906526, 1]]}}
{"result": "SELECT \n    d.Document_ID,\n    d.Document_Name,\n    COUNT(p.Paragraph_ID) AS Paragraph_Count\nFROM \n    Documents d\nLEFT JOIN \n    Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY \n    d.Document_ID, d.Document_Name", "match": {"match": false, "result": [[0, "Introduction of OS", 0], [1, "Understanding DB", 0], [3, "Summer Show", 1], [76, "Robbin CV", 0], [80, "Welcome to NY", 2], [82, "Data base", 0], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [801801, "How to read a book", 0], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "gt": [[3, "Summer Show", 1], [80, "Welcome to NY", 2], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    d.Document_ID,\n    d.Document_Name,\n    COUNT(p.Paragraph_ID) AS Paragraph_Count\nFROM \n    Documents d\nLEFT JOIN \n    Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY \n    d.Document_ID, d.Document_Name;", "match": {"match": false, "result": [[0, "Introduction of OS", 0], [1, "Understanding DB", 0], [3, "Summer Show", 1], [76, "Robbin CV", 0], [80, "Welcome to NY", 2], [82, "Data base", 0], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [801801, "How to read a book", 0], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "gt": [[3, "Summer Show", 1], [80, "Welcome to NY", 2], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT Document_ID\nFROM Paragraphs\nGROUP BY Document_ID\nHAVING COUNT(*) >= 2;", "match": {"match": true, "result": [[80], [2394], [651512], [16514113]]}}
{"result": "SELECT d.Document_ID\nFROM Documents d\nJOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID\nHAVING COUNT(DISTINCT p.Paragraph_ID) >= 2;", "match": {"match": true, "result": [[80], [2394], [651512], [16514113]]}}
{"result": "SELECT d.Document_ID, d.Document_Name\nFROM Documents d\nJOIN (\n    SELECT Document_ID, COUNT(*) as Paragraph_Count\n    FROM Paragraphs\n    GROUP BY Document_ID\n) p ON d.Document_ID = p.Document_ID\nWHERE p.Paragraph_Count = (\n    SELECT MAX(Paragraph_Count)\n    FROM (\n        SELECT Document_ID, COUNT(*) as Paragraph_Count\n        FROM Paragraphs\n        GROUP BY Document_ID\n    ) max_count\n)", "match": {"match": true, "result": [[2394, "Customer reviews"]]}}
{"result": "SELECT d.Document_ID, d.Document_Name\nFROM Documents d\nJOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID, d.Document_Name\nHAVING COUNT(p.Paragraph_ID) = (\n    SELECT MAX(paragraph_count)\n    FROM (\n        SELECT COUNT(Paragraph_ID) AS paragraph_count\n        FROM Paragraphs\n        GROUP BY Document_ID\n    ) AS subquery\n)", "match": {"match": true, "result": [[2394, "Customer reviews"]]}}
{"result": "SELECT Document_ID\nFROM Paragraphs\nGROUP BY Document_ID\nORDER BY COUNT(*) ASC\nLIMIT 1;", "match": {"match": true, "result": [[3]]}}
{"result": "```sql\nSELECT Document_ID\nFROM Paragraphs\nGROUP BY Document_ID\nORDER BY COUNT(Paragraph_ID) ASC\nLIMIT 1;\n```", "match": {"match": true, "result": [[3]]}}
{"result": "```sql\nSELECT Document_ID\nFROM Paragraphs\nGROUP BY Document_ID\nHAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2;\n```", "match": {"match": true, "result": [[3], [80], [3830], [33930], [50123], [651512], [3540024], [16514113], [385906526]]}}
{"result": "SELECT DISTINCT d.Document_ID\nFROM Documents d\nJOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID\nHAVING COUNT(p.Paragraph_ID) BETWEEN 1 AND 2;", "match": {"match": true, "result": [[3], [80], [3830], [33930], [50123], [651512], [3540024], [16514113], [385906526]]}}
{"result": "```sql\nSELECT DISTINCT d.Document_ID\nFROM Paragraphs p\nJOIN Documents d ON p.Document_ID = d.Document_ID\nWHERE p.Paragraph_Text IN ('Brazil', 'Ireland');\n```", "match": {"match": true, "result": [[16514113]]}}
{"result": "SELECT DISTINCT d.Document_ID\nFROM Documents d\nJOIN Paragraphs p ON d.Document_ID = p.Document_ID\nWHERE p.Paragraph_Text LIKE '%Brazil%'\n  AND EXISTS (\n    SELECT 1\n    FROM Paragraphs p2\n    WHERE p2.Document_ID = d.Document_ID\n      AND p2.Paragraph_Text LIKE '%Ireland%'\n  );", "match": {"match": true, "result": [[16514113]]}}
{"result": "SELECT COUNT(*) AS teacher_count\nFROM teacher;", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT COUNT(*) AS total_teachers\nFROM teacher", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT t.Name\nFROM teacher t\nORDER BY t.Age ASC;", "match": {"match": true, "result": [["Vicente Carretero"], ["Gustaaf Deloor"], ["Joseph Huts"], ["John Deloor"], ["Lucy Wong"], ["Anne Walker"], ["Kearsley Brown"]]}}
{"result": "SELECT t.Name\nFROM teacher t\nORDER BY t.Age ASC;", "match": {"match": true, "result": [["Vicente Carretero"], ["Gustaaf Deloor"], ["Joseph Huts"], ["John Deloor"], ["Lucy Wong"], ["Anne Walker"], ["Kearsley Brown"]]}}
{"result": "SELECT Age, Hometown\nFROM teacher;", "match": {"match": true, "result": [["32", "Blackrod Urban District"], ["29", "Bolton County Borough"], ["26", "Farnworth Municipal Borough"], ["33", "Horwich Urban District"], ["45", "Kearsley Urban District"], ["41", "Little Lever Urban District"], ["39", "Turton Urban District"]]}}
{"result": "SELECT Age, Hometown\nFROM teacher;", "match": {"match": true, "result": [["32", "Blackrod Urban District"], ["29", "Bolton County Borough"], ["26", "Farnworth Municipal Borough"], ["33", "Horwich Urban District"], ["45", "Kearsley Urban District"], ["41", "Little Lever Urban District"], ["39", "Turton Urban District"]]}}
{"result": "SELECT Name\nFROM teacher\nWHERE Hometown != 'Little Lever Urban District';", "match": {"match": false, "result": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Lucy Wong"]], "gt": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Anne Walker"], ["Lucy Wong"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT Name\nFROM teacher\nWHERE Hometown != 'Little Lever Urban District';\n```", "match": {"match": false, "result": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Lucy Wong"]], "gt": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Anne Walker"], ["Lucy Wong"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name\nFROM teacher\nWHERE Age IN ('32', '33');", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT Name\nFROM teacher\nWHERE Age IN ('32', '33');", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "```sql\nSELECT Hometown\nFROM teacher\nWHERE Age = (SELECT MIN(Age) FROM teacher);\n```", "match": {"match": true, "result": [["Farnworth Municipal Borough"]]}}
{"result": "SELECT Hometown\nFROM teacher\nORDER BY Age ASC\nLIMIT 1;", "match": {"match": true, "result": [["Farnworth Municipal Borough"]]}}
{"result": "SELECT Hometown, COUNT(*) AS NumberOfTeachers\nFROM teacher\nGROUP BY Hometown;", "match": {"match": true, "result": [["Blackrod Urban District", 1], ["Bolton County Borough", 1], ["Farnworth Municipal Borough", 1], ["Horwich Urban District", 1], ["Kearsley Urban District", 1], ["Little Lever Urban District", 1], ["Turton Urban District", 1]]}}
{"result": "SELECT Hometown, COUNT(*) AS Teacher_Count\nFROM teacher\nGROUP BY Hometown;", "match": {"match": true, "result": [["Blackrod Urban District", 1], ["Bolton County Borough", 1], ["Farnworth Municipal Borough", 1], ["Horwich Urban District", 1], ["Kearsley Urban District", 1], ["Little Lever Urban District", 1], ["Turton Urban District", 1]]}}
{"result": "SELECT Hometown, COUNT(*) as TeacherCount\nFROM teacher\nGROUP BY Hometown\nORDER BY TeacherCount DESC\nLIMIT 1;", "match": {"match": false, "result": [["Turton Urban District", 1]], "gt": [["Turton Urban District"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT Hometown, COUNT(*) as Teacher_Count\nFROM teacher\nGROUP BY Hometown\nORDER BY Teacher_Count DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [["Turton Urban District", 1]], "gt": [["Turton Urban District"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Hometown\nFROM teacher\nGROUP BY Hometown\nHAVING COUNT(DISTINCT Teacher_ID) >= 2;", "match": {"match": true, "result": []}}
{"result": "SELECT Hometown\nFROM teacher\nGROUP BY Hometown\nHAVING COUNT(*) >= 2;", "match": {"match": true, "result": []}}
{"result": "```sql\nSELECT t.Name, c.Course\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nJOIN course c ON ca.Course_ID = c.Course_ID;\n```", "match": {"match": true, "result": [["Kearsley Brown", "Math"], ["Vicente Carretero", "Math"], ["Gustaaf Deloor", "Science"], ["Anne Walker", "History"], ["Anne Walker", "Bible"], ["Lucy Wong", "Music"]]}}
{"result": "SELECT t.Name, c.Course\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nJOIN course c ON ca.Course_ID = c.Course_ID;", "match": {"match": true, "result": [["Kearsley Brown", "Math"], ["Vicente Carretero", "Math"], ["Gustaaf Deloor", "Science"], ["Anne Walker", "History"], ["Anne Walker", "Bible"], ["Lucy Wong", "Music"]]}}
{"result": "SELECT t.Name, c.Course\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nJOIN course c ON ca.Course_ID = c.Course_ID\nORDER BY t.Name ASC;", "match": {"match": true, "result": [["Anne Walker", "History"], ["Anne Walker", "Bible"], ["Gustaaf Deloor", "Science"], ["Kearsley Brown", "Math"], ["Lucy Wong", "Music"], ["Vicente Carretero", "Math"]]}}
{"result": "SELECT t.Name AS Teacher_Name, c.Course\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nJOIN course c ON ca.Course_ID = c.Course_ID\nORDER BY t.Name ASC;", "match": {"match": true, "result": [["Anne Walker", "History"], ["Anne Walker", "Bible"], ["Gustaaf Deloor", "Science"], ["Kearsley Brown", "Math"], ["Lucy Wong", "Music"], ["Vicente Carretero", "Math"]]}}
{"result": "SELECT t.Name\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nJOIN course c ON ca.Course_ID = c.Course_ID\nWHERE c.Course = 'math';", "match": {"match": false, "result": [], "gt": [["Kearsley Brown"], ["Vicente Carretero"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT t.Name\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nJOIN course c ON ca.Course_ID = c.Course_ID\nWHERE c.Course = 'math';", "match": {"match": false, "result": [], "gt": [["Kearsley Brown"], ["Vicente Carretero"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT t.Name, COUNT(ca.Course_ID) AS Number_of_Courses\nFROM teacher t\nLEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nGROUP BY t.Teacher_ID, t.Name;", "match": {"match": false, "result": [["Joseph Huts", 0], ["Gustaaf Deloor", 1], ["Vicente Carretero", 1], ["John Deloor", 0], ["Kearsley Brown", 1], ["Anne Walker", 2], ["Lucy Wong", 1]], "gt": [["Anne Walker", 2], ["Gustaaf Deloor", 1], ["Kearsley Brown", 1], ["Lucy Wong", 1], ["Vicente Carretero", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT t.Name, COUNT(ca.Course_ID) as Courses_Teached\nFROM teacher t\nLEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nGROUP BY t.Teacher_ID\nORDER BY Courses_Teached DESC;", "match": {"match": false, "result": [["Anne Walker", 2], ["Gustaaf Deloor", 1], ["Vicente Carretero", 1], ["Kearsley Brown", 1], ["Lucy Wong", 1], ["Joseph Huts", 0], ["John Deloor", 0]], "gt": [["Anne Walker", 2], ["Gustaaf Deloor", 1], ["Kearsley Brown", 1], ["Lucy Wong", 1], ["Vicente Carretero", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT t.Name\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nGROUP BY t.Teacher_ID, t.Name\nHAVING COUNT(DISTINCT ca.Course_ID) >= 2;", "match": {"match": true, "result": [["Anne Walker"]]}}
{"result": "SELECT DISTINCT t.Name\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nGROUP BY t.Teacher_ID, t.Name\nHAVING COUNT(DISTINCT ca.Course_ID) >= 2;", "match": {"match": true, "result": [["Anne Walker"]]}}
{"result": "SELECT Name\nFROM teacher t\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM course_arrange ca\n    WHERE ca.Teacher_ID = t.Teacher_ID\n);", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT DISTINCT t.Name\nFROM teacher t\nWHERE t.Teacher_ID NOT IN (\n    SELECT ca.Teacher_ID\n    FROM course_arrange ca\n);", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT COUNT(*)\nFROM visitor\nWHERE Age < 30;", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT DISTINCT visitor.Name\nFROM visitor\nJOIN visit ON visitor.ID = visit.visitor_ID\nWHERE visitor.Level_of_membership > 4\nORDER BY visitor.Level_of_membership DESC;", "match": {"match": false, "result": [["Fernando Gago"]], "gt": [["Gonzalo Higua\u00edn "], ["Fernando Gago"], ["Guti Midfielder"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(Age)\nFROM visitor\nWHERE Level_of_membership <= 4;", "match": {"match": true, "result": [[36.0]]}}
{"result": "SELECT v.Name, v.Level_of_membership\nFROM visitor v\nWHERE v.Level_of_membership > 4\nORDER BY v.Age DESC;", "match": {"match": true, "result": [["Fernando Gago", 6], ["Gonzalo Higua\u00edn ", 8], ["Guti Midfielder", 5]]}}
{"result": "SELECT \"Museum_ID\", \"Name\"\nFROM museum\nWHERE \"Num_of_Staff\" = (SELECT MAX(\"Num_of_Staff\") FROM museum);", "match": {"match": true, "result": [[1, "Plaza Museum"]]}}
{"result": "```sql\nSELECT AVG(Num_of_Staff) AS Average_Staff\nFROM museum\nWHERE CAST(Open_Year AS INTEGER) < 2009;\n```", "match": {"match": true, "result": [[31.333333333333332]]}}
{"result": "SELECT Open_Year, Num_of_Staff\nFROM museum\nWHERE Name = 'Plaza Museum';", "match": {"match": false, "result": [["2000", 62]], "gt": [[62, "2000"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name\nFROM museum\nWHERE Num_of_Staff > (\n    SELECT MIN(Num_of_Staff)\n    FROM museum\n    WHERE Open_Year > '2010'\n);", "match": {"match": true, "result": [["Plaza Museum"], ["Capital Plaza Museum"], ["Jefferson Development Museum"]]}}
{"result": "SELECT v.ID, v.Name, v.Age\nFROM visitor v\nJOIN visit vis ON v.ID = vis.visitor_ID\nGROUP BY v.ID, v.Name, v.Age\nHAVING COUNT(DISTINCT vis.Museum_ID) > 1;", "match": {"match": true, "result": [[3, "Arjen Robben", 27], [5, "Fernando Gago", 36], [6, "Rafael van der Vaart", 25]]}}
{"result": "```sql\nSELECT visitor.ID, visitor.Name, visitor.Level_of_membership\nFROM visitor\nJOIN (\n    SELECT visitor_ID, SUM(Total_spent) AS total_spent\n    FROM visit\n    GROUP BY visitor_ID\n) AS total_visit ON visitor.ID = total_visit.visitor_ID\nORDER BY total_spent DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [[3, "Arjen Robben", 1]], "gt": [["3", "Arjen Robben", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT m.Museum_ID, m.Name\nFROM museum m\nJOIN (\n    SELECT Museum_ID\n    FROM visit\n    GROUP BY Museum_ID\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n) v ON m.Museum_ID = v.Museum_ID;", "match": {"match": true, "result": [[2, "Capital Plaza Museum"]]}}
{"result": "SELECT m.Name\nFROM museum m\nLEFT JOIN visit v ON m.Museum_ID = v.Museum_ID\nWHERE v.Museum_ID IS NULL;", "match": {"match": true, "result": [["Jefferson Development Museum"], ["RiverPark Museum"], ["Place Tower Museum"], ["Central City District Residential Museum"]]}}
{"result": "SELECT v.Name, v.Age\nFROM visitor v\nJOIN visit vi ON v.ID = vi.visitor_ID\nWHERE vi.Num_of_Ticket = (\n    SELECT MAX(Num_of_Ticket)\n    FROM visit\n);", "match": {"match": true, "result": [["Arjen Robben", 27]]}}
{"result": "SELECT \n  AVG(\"Num_of_Ticket\") AS \"Average_Tickets\",\n  MAX(\"Num_of_Ticket\") AS \"Maximum_Tickets\"\nFROM \n  \"visit\";", "match": {"match": true, "result": [[10.5, 24]]}}
{"result": "SELECT SUM(v.Total_spent) AS Total_Expense\nFROM visit v\nJOIN visitor vis ON v.visitor_ID = vis.ID\nWHERE vis.Level_of_membership = 1;", "match": {"match": true, "result": [[570.84]]}}
{"result": "```sql\nSELECT v.Name\nFROM visitor v\nJOIN visit vt ON v.ID = vt.visitor_ID\nJOIN museum m ON vt.Museum_ID = m.Museum_ID\nWHERE EXISTS (\n    SELECT 1\n    FROM museum m1\n    JOIN visit vt1 ON m1.Museum_ID = vt1.Museum_ID\n    WHERE vt1.visitor_ID = v.ID AND m1.Open_Year < '2009'\n)\nAND EXISTS (\n    SELECT 1\n    FROM museum m2\n    JOIN visit vt2 ON m2.Museum_ID = vt2.Museum_ID\n    WHERE vt2.visitor_ID = v.ID AND m2.Open_Year > '2011'\n);\n```", "match": {"match": false, "result": [["Fernando Gago"], ["Fernando Gago"]], "gt": [["Fernando Gago"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT v.ID) AS non_current_visitors\nFROM visitor v\nLEFT JOIN visit vt ON v.ID = vt.visitor_ID\nLEFT JOIN museum m ON vt.Museum_ID = m.Museum_ID\nWHERE vt.Museum_ID IS NULL OR m.Open_Year > '2010';", "match": {"match": false, "result": [[6]], "gt": [[3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) \nFROM museum\nWHERE Open_Year > '2013' OR Open_Year < '2008';", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(*) AS captured_ships\nFROM ship\nWHERE disposition_of_ship = 'Captured';", "match": {"match": true, "result": [[4]]}}
{"result": "SELECT name, tonnage\nFROM ship\nORDER BY name DESC;", "match": {"match": true, "result": [["Three Brothers", "t"], ["Mary", "t"], ["Lettice", "t"], ["HMS Avon", "391"], ["HMS Atalanta", "225"], ["Bon Accord", "t"], ["Bacchus", "t"]]}}
{"result": "SELECT name, date, result\nFROM battle", "match": {"match": false, "result": [["Battle of Adrianople", "14 April 1205", "Bulgarian victory"], ["Battle of Serres", "June 1205", "Bulgarian victory"], ["Battle of Rusion", "31 January 1206", "Bulgarian victory"], ["Battle of Rodosto", "February 1206", "Bulgarian victory"], ["Battle of Messinopolis", "4 September 1207", "Bulgarian victory"], ["Battle of Boruy", "June 1205", "Bulgarian victory"], ["Battle of Philippopolis", "31 June 1208", "Latin victory"], ["Siege of Constantinople", "1235", "Two Year Truce"]], "gt": [["Battle of Adrianople", "14 April 1205"], ["Battle of Serres", "June 1205"], ["Battle of Rusion", "31 January 1206"], ["Battle of Rodosto", "February 1206"], ["Battle of Messinopolis", "4 September 1207"], ["Battle of Boruy", "June 1205"], ["Battle of Philippopolis", "31 June 1208"], ["Siege of Constantinople", "1235"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    b.name AS battle_name,\n    MAX(d.killed) AS max_death_toll,\n    MIN(d.killed) AS min_death_toll\nFROM \n    battle b\nJOIN \n    ship s ON b.id = s.lost_in_battle\nJOIN \n    death d ON s.id = d.caused_by_ship_id\nGROUP BY \n    b.name;", "match": {"match": false, "result": [["Battle of Boruy", 25, 0], ["Battle of Messinopolis", 14, 0], ["Battle of Philippopolis", 3, 0], ["Battle of Rodosto", 0, 0], ["Siege of Constantinople", 29, 8]], "gt": [[29, 0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(injured) AS avg_injuries_per_battle\nFROM death", "match": {"match": true, "result": [[1.0769230769230769]]}}
{"result": "SELECT d.id, d.note, d.killed, d.injured, s.name as ship_name\nFROM death d\nJOIN ship s ON d.caused_by_ship_id = s.id\nWHERE s.tonnage = 't';", "match": {"match": false, "result": [[1, "Dantewada, Chhattisgarh", 8, 0, "Lettice"], [2, "Dantewada, Chhattisgarh", 3, 0, "Bon Accord"], [13, "Erraboru, Chhattisgarh", 25, 0, "Mary"], [3, "East Champaran, Bihar", 2, 0, "Mary"], [6, "Dantewada, Chhattisgarh", 0, 0, "Three Brothers"], [7, "Dantewada, Chhattisgarh", 4, 5, "Three Brothers"], [8, "Kanker, Chhattisgarh", 0, 0, "Bacchus"], [9, "Dantewada, Chhattisgarh", 29, 0, "Lettice"], [10, "WestMidnapore, West Bengal", 0, 0, "Mary"], [11, "Bastar, Chattisgarh", 0, 0, "Bon Accord"], [12, "Bokaro, Jharkhand", 14, 0, "Three Brothers"]], "gt": [[8, 0], [3, 0], [25, 0], [2, 0], [0, 0], [4, 5], [0, 0], [29, 0], [0, 0], [0, 0], [14, 0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name, result\nFROM battle\nWHERE bulgarian_commander != 'Boril';", "match": {"match": true, "result": [["Battle of Adrianople", "Bulgarian victory"], ["Battle of Serres", "Bulgarian victory"], ["Battle of Rusion", "Bulgarian victory"], ["Battle of Rodosto", "Bulgarian victory"], ["Battle of Messinopolis", "Bulgarian victory"], ["Siege of Constantinople", "Two Year Truce"]]}}
{"result": "SELECT DISTINCT b.id, b.name\nFROM battle b\nJOIN ship s ON b.id = s.lost_in_battle\nWHERE s.ship_type = 'Brig'\n  AND b.result LIKE '%lost%';", "match": {"match": false, "result": [], "gt": [[8, "Siege of Constantinople"], [7, "Battle of Philippopolis"], [6, "Battle of Boruy"], [5, "Battle of Messinopolis"], [4, "Battle of Rodosto"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT b.id, b.name\nFROM battle b\nJOIN ship s ON b.id = s.lost_in_battle\nJOIN death d ON s.id = d.caused_by_ship_id\nGROUP BY b.id, b.name\nHAVING SUM(d.killed + d.injured) > 10\nORDER BY b.id;", "match": {"match": true, "result": [[5, "Battle of Messinopolis"], [6, "Battle of Boruy"], [8, "Siege of Constantinople"]]}}
{"result": "SELECT s.id, s.name\nFROM ship s\nJOIN death d ON s.id = d.caused_by_ship_id\nGROUP BY s.id, s.name\nORDER BY SUM(d.injured) DESC\nLIMIT 1;", "match": {"match": false, "result": [[4, "HMS Avon"]], "gt": [[5, "Three Brothers"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT battle.name\nFROM battle\nWHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';", "match": {"match": true, "result": [["Battle of Adrianople"]]}}
{"result": "SELECT COUNT(DISTINCT result) FROM battle;", "match": {"match": true, "result": [[3]]}}
{"result": "```sql\nSELECT COUNT(DISTINCT b.id) AS battles_without_losing_225ton_ship\nFROM battle b\nLEFT JOIN ship s ON b.id = s.lost_in_battle AND s.tonnage = '225'\nWHERE s.id IS NULL;\n```", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT b.name, b.date\nFROM battle b\nJOIN ship s1 ON b.id = s1.lost_in_battle\nJOIN ship s2 ON b.id = s2.lost_in_battle\nWHERE s1.name = 'Lettice' AND s2.name = 'HMS Atalanta';", "match": {"match": true, "result": [["Siege of Constantinople", "1235"]]}}
{"result": "SELECT b.name, b.result, b.bulgarian_commander\nFROM battle b\nLEFT JOIN ship s ON b.id = s.lost_in_battle\nWHERE s.id IS NULL\n  AND b.location = 'English Channel';", "match": {"match": false, "error": "Query execution failed with error: no such column: b.location"}}
{"result": "SELECT death.note\nFROM death\nJOIN ship ON death.caused_by_ship_id = ship.id\nJOIN battle ON ship.lost_in_battle = battle.id\nWHERE death.note LIKE '%East%';", "match": {"match": true, "result": [["East Champaran, Bihar"]]}}
{"result": "SELECT line_1, line_2\nFROM Addresses;", "match": {"match": true, "result": [["2294 Grant Square Apt. 235", "Apt. 370"], ["3999 Aufderhar Ways Suite 593", "Apt. 388"], ["67942 Carlotta Ferry Apt. 686", "Apt. 583"], ["0144 Lamar Plaza Apt. 346", "Suite 703"], ["858 Peggie Bypass Suite 212", "Apt. 335"], ["16998 Mraz Lodge", "Apt. 689"], ["193 Marlin Brook", "Apt. 406"], ["202 Hessel Views Apt. 468", "Apt. 305"], ["0643 Muller Vista", "Suite 383"], ["7081 Eda Center", "Suite 830"], ["9283 Schulist Falls Apt. 037", "Suite 239"], ["979 Haag Shores Suite 656", "Apt. 468"], ["492 Wilkinson Route", "Suite 865"], ["186 Evan Motorway Apt. 409", "Suite 079"], ["74046 Metz Walk Apt. 113", "Suite 674"]]}}
{"result": "SELECT line_1, line_2 FROM Addresses;", "match": {"match": true, "result": [["2294 Grant Square Apt. 235", "Apt. 370"], ["3999 Aufderhar Ways Suite 593", "Apt. 388"], ["67942 Carlotta Ferry Apt. 686", "Apt. 583"], ["0144 Lamar Plaza Apt. 346", "Suite 703"], ["858 Peggie Bypass Suite 212", "Apt. 335"], ["16998 Mraz Lodge", "Apt. 689"], ["193 Marlin Brook", "Apt. 406"], ["202 Hessel Views Apt. 468", "Apt. 305"], ["0643 Muller Vista", "Suite 383"], ["7081 Eda Center", "Suite 830"], ["9283 Schulist Falls Apt. 037", "Suite 239"], ["979 Haag Shores Suite 656", "Apt. 468"], ["492 Wilkinson Route", "Suite 865"], ["186 Evan Motorway Apt. 409", "Suite 079"], ["74046 Metz Walk Apt. 113", "Suite 674"]]}}
{"result": "SELECT COUNT(*) AS total_courses\nFROM Courses;", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) AS course_count\nFROM Courses;", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT course_description\nFROM Courses\nWHERE course_name = 'Math';", "match": {"match": false, "result": [], "gt": [["q"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT c.course_description\nFROM Courses c\nWHERE c.course_name LIKE '%Math%'", "match": {"match": true, "result": [["q"]]}}
{"result": "SELECT zip_postcode \nFROM Addresses \nWHERE city = 'Port Chelsea';", "match": {"match": true, "result": [["148"]]}}
{"result": "SELECT zip_postcode\nFROM Addresses\nWHERE city = 'Port Chelsea';", "match": {"match": true, "result": [["148"]]}}
{"result": "SELECT d.department_name, d.department_id\nFROM Departments d\nJOIN Degree_Programs dp ON d.department_id = dp.department_id\nGROUP BY d.department_id\nORDER BY COUNT(dp.degree_program_id) DESC\nLIMIT 1;", "match": {"match": true, "result": [["statistics", 8]]}}
{"result": "SELECT d.department_name, d.department_id\nFROM Departments d\nJOIN Degree_Programs dp ON d.department_id = dp.department_id\nGROUP BY d.department_id\nORDER BY COUNT(dp.degree_program_id) DESC\nLIMIT 1;", "match": {"match": true, "result": [["statistics", 8]]}}
{"result": "SELECT COUNT(DISTINCT department_id) AS departments_with_degree\nFROM Degree_Programs;", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT COUNT(DISTINCT department_id) AS unique_departments\nFROM Degree_Programs;", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT COUNT(DISTINCT degree_summary_name) AS distinct_degree_names\nFROM Degree_Programs;", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(DISTINCT degree_program_id) AS number_of_degrees\nFROM Degree_Programs;", "match": {"match": false, "result": [[15]], "gt": [[3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) AS degree_count\nFROM Degree_Programs\nJOIN Departments ON Degree_Programs.department_id = Departments.department_id\nWHERE Departments.department_name LIKE '%Engineering%';", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(*) AS engineering_degrees_count\nFROM Degree_Programs dp\nJOIN Departments d ON dp.department_id = d.department_id\nWHERE d.department_name = 'Engineering';", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT section_name, section_description\nFROM Sections;", "match": {"match": true, "result": [["a", "non"], ["b", "voluptatem"], ["c", "qui"], ["d", "voluptas"], ["e", "ex"], ["f", "doloremque"], ["g", "provident"], ["h", "et"], ["j", "quis"], ["k", "nesciunt"], ["l", "ad"], ["o", "et"], ["p", "facilis"], ["u", "reprehenderit"], ["y", "qui"]]}}
{"result": "SELECT section_name, section_description\nFROM Sections;", "match": {"match": true, "result": [["a", "non"], ["b", "voluptatem"], ["c", "qui"], ["d", "voluptas"], ["e", "ex"], ["f", "doloremque"], ["g", "provident"], ["h", "et"], ["j", "quis"], ["k", "nesciunt"], ["l", "ad"], ["o", "et"], ["p", "facilis"], ["u", "reprehenderit"], ["y", "qui"]]}}
{"result": "SELECT c.course_id, c.course_name\nFROM Courses c\nLEFT JOIN Sections s ON c.course_id = s.course_id\nGROUP BY c.course_id, c.course_name\nHAVING COUNT(DISTINCT s.section_id) <= 2;", "match": {"match": false, "result": [[1, "ds"], [2, "math"], [3, "os"], [4, "en"], [5, "fr"], [6, "la"], [7, "cal"], [8, "nlp"], [9, "dl"], [10, "ml"], [11, "ai"], [12, "db"], [13, "rs"], [14, "pl"], [15, "oop"]], "gt": [["ds", 1], ["math", 2], ["en", 4], ["fr", 5], ["la", 6], ["cal", 7], ["nlp", 8], ["dl", 9], ["ml", 10], ["db", 12], ["pl", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT c.course_id, c.course_name\nFROM Courses c\nLEFT JOIN Sections s ON c.course_id = s.course_id\nGROUP BY c.course_id, c.course_name\nHAVING COUNT(s.section_id) < 2", "match": {"match": false, "result": [[2, "math"], [3, "os"], [4, "en"], [6, "la"], [7, "cal"], [9, "dl"], [10, "ml"], [11, "ai"], [12, "db"], [13, "rs"], [15, "oop"]], "gt": [["ds", 1], ["math", 2], ["en", 4], ["fr", 5], ["la", 6], ["cal", 7], ["nlp", 8], ["dl", 9], ["ml", 10], ["db", 12], ["pl", 14]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT section_name\nFROM Sections\nORDER BY section_name DESC;\n```", "match": {"match": true, "result": [["y"], ["u"], ["p"], ["o"], ["l"], ["k"], ["j"], ["h"], ["g"], ["f"], ["e"], ["d"], ["c"], ["b"], ["a"]]}}
{"result": "SELECT section_name\nFROM Sections\nORDER BY section_name DESC;", "match": {"match": true, "result": [["y"], ["u"], ["p"], ["o"], ["l"], ["k"], ["j"], ["h"], ["g"], ["f"], ["e"], ["d"], ["c"], ["b"], ["a"]]}}
{"result": "SELECT s.semester_id, s.semester_name, COUNT(se.student_id) AS student_count\nFROM Semesters s\nJOIN Student_Enrolment se ON s.semester_id = se.semester_id\nGROUP BY s.semester_id, s.semester_name\nORDER BY student_count DESC\nLIMIT 1", "match": {"match": false, "result": [[2, "summer 2010", 4]], "gt": [["summer 2010", 2]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT s.semester_name, s.semester_id\nFROM Semesters s\nJOIN Student_Enrolment se ON s.semester_id = se.semester_id\nGROUP BY s.semester_id\nHAVING COUNT(se.student_id) = (\n    SELECT MAX(student_count)\n    FROM (\n        SELECT COUNT(student_id) AS student_count\n        FROM Student_Enrolment\n        GROUP BY semester_id\n    ) AS counts\n);\n```", "match": {"match": true, "result": [["summer 2010", 2]]}}
{"result": "SELECT department_description\nFROM Departments\nWHERE department_name LIKE '%computer%';", "match": {"match": true, "result": [["error"]]}}
{"result": "SELECT d.department_description\nFROM Departments d\nWHERE d.department_name LIKE '%computer%';", "match": {"match": true, "result": [["error"]]}}
{"result": "SELECT \n    s.first_name, \n    s.middle_name, \n    s.last_name, \n    s.student_id\nFROM \n    Students s\nINNER JOIN \n    Student_Enrolment se ON s.student_id = se.student_id\nINNER JOIN \n    Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nWHERE \n    se.semester_id = (SELECT semester_id \n                      FROM Semesters \n                      WHERE semester_name = 'One Semester Name')\nGROUP BY \n    s.student_id\nHAVING \n    COUNT(DISTINCT se.degree_program_id) >= 2;", "match": {"match": false, "result": [], "gt": [["Jarvis", "Aaliyah", "Carroll", 4], ["Reva", "Golda", "Osinski", 9], ["Jordy", "Osborne", "Rempel", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.student_id, s.first_name, s.middle_name, s.last_name, se.degree_program_id, se.semester_id\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nJOIN (\n    SELECT student_id, semester_id, COUNT(DISTINCT degree_program_id) as program_count\n    FROM Student_Enrolment\n    GROUP BY student_id, semester_id\n) sub ON s.student_id = sub.student_id AND se.semester_id = sub.semester_id\nWHERE sub.program_count = 2;", "match": {"match": false, "result": [[7, "Frida", "Aisha", "Huel", 10, 2], [7, "Frida", "Aisha", "Huel", 11, 2]], "gt": [["Jarvis", "Aaliyah", "Carroll", 4], ["Reva", "Golda", "Osinski", 9], ["Jordy", "Osborne", "Rempel", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT s.first_name, s.middle_name, s.last_name\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nJOIN Departments d ON dp.department_id = d.department_id\nWHERE d.department_name LIKE '%Bachelor%'\nORDER BY s.last_name, s.first_name;", "match": {"match": false, "result": [], "gt": [["Reva", "Golda", "Osinski"], ["Frida", "Aisha", "Huel"], ["Jarvis", "Aaliyah", "Carroll"], ["Milton", "Vaughn", "Christiansen"], ["Stanford", "Mona", "Rogahn"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    s.first_name, \n    s.middle_name, \n    s.last_name\nFROM \n    Students s\n    JOIN Student_Enrolment se ON s.student_id = se.student_id\n    JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\n    JOIN Departments d ON dp.department_id = d.department_id\nWHERE \n    d.department_name = 'Bachelors'", "match": {"match": false, "result": [], "gt": [["Reva", "Golda", "Osinski"], ["Frida", "Aisha", "Huel"], ["Jarvis", "Aaliyah", "Carroll"], ["Milton", "Vaughn", "Christiansen"], ["Stanford", "Mona", "Rogahn"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT d.department_name, COUNT(DISTINCT se.student_id) AS student_count\nFROM Degree_Programs dp\nJOIN Departments d ON dp.department_id = d.department_id\nJOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id\nGROUP BY d.department_name\nORDER BY student_count DESC\nLIMIT 1;", "match": {"match": false, "result": [["statistics", 3]], "gt": [["Bachelor"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT dp.degree_summary_name, COUNT(DISTINCT se.student_id) AS student_count\nFROM Degree_Programs dp\nJOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id\nGROUP BY dp.degree_program_id\nORDER BY student_count DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [["Bachelor", 3]], "gt": [["Bachelor"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT dp.degree_program_id, dp.degree_summary_name\nFROM Degree_Programs dp\nJOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id\nGROUP BY dp.degree_program_id, dp.degree_summary_name\nORDER BY COUNT(DISTINCT se.student_id) DESC\nLIMIT 1;", "match": {"match": true, "result": [[9, "Bachelor"]]}}
{"result": "SELECT \n    dp.degree_program_id,\n    dp.degree_summary_name,\n    COUNT(DISTINCT se.student_id) AS student_count\nFROM \n    Degree_Programs dp\n    JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id\nGROUP BY \n    dp.degree_program_id, dp.degree_summary_name\nORDER BY \n    student_count DESC\nLIMIT 1;", "match": {"match": false, "result": [[9, "Bachelor", 3]], "gt": [[9, "Bachelor"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_id) AS enrollment_count\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nGROUP BY s.student_id, s.first_name, s.middle_name, s.last_name\nORDER BY enrollment_count DESC\nLIMIT 1;", "match": {"match": false, "result": [[6, "Stanford", "Mona", "Rogahn", 3]], "gt": [[7, "Frida", "Aisha", "Huel", 3, 7]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(sec.student_enrolment_id) AS enrollment_count\nFROM Students s\nJOIN Student_Enrolment sec ON s.student_id = sec.student_id\nGROUP BY s.student_id, s.first_name, s.middle_name, s.last_name\nORDER BY enrollment_count DESC\nLIMIT 1;", "match": {"match": false, "result": [[6, "Stanford", "Mona", "Rogahn", 3]], "gt": [[7, "Frida", "Aisha", "Huel", 3, 7]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT semester_name\nFROM Semesters\nWHERE semester_id NOT IN (\n    SELECT DISTINCT se.semester_id\n    FROM Student_Enrolment se\n);\n```", "match": {"match": true, "result": [["fall 2010"], ["spring 2013"], ["spring 2014"], ["spring 2016"], ["spring 2017"], ["winter 2018"]]}}
{"result": "SELECT s.semester_name\nFROM Semesters s\nLEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id\nWHERE se.student_id IS NULL;", "match": {"match": true, "result": [["fall 2010"], ["spring 2013"], ["spring 2014"], ["spring 2016"], ["spring 2017"], ["winter 2018"]]}}
{"result": "SELECT DISTINCT c.course_name\nFROM Courses c\nJOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id\nJOIN Student_Enrolment se ON sec.student_enrolment_id = se.student_enrolment_id;", "match": {"match": true, "result": [["la"], ["pl"], ["ai"], ["math"], ["ml"], ["os"], ["en"], ["nlp"], ["rs"], ["db"]]}}
{"result": "SELECT DISTINCT c.course_name\nFROM Courses c\nJOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id;", "match": {"match": true, "result": [["la"], ["pl"], ["ai"], ["math"], ["ml"], ["os"], ["en"], ["nlp"], ["rs"], ["db"]]}}
{"result": "SELECT c.course_name\nFROM Courses c\nJOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id\nGROUP BY c.course_id\nORDER BY COUNT(sec.student_course_id) DESC\nLIMIT 1;", "match": {"match": false, "result": [["pl"]], "gt": [["rs"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT c.course_name, COUNT(sec.course_id) AS student_count\nFROM Courses c\nJOIN Sections sec ON c.course_id = sec.course_id\nGROUP BY c.course_id, c.course_name\nORDER BY student_count DESC\nLIMIT 1;", "match": {"match": false, "result": [["ds", 2]], "gt": [["rs"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT s.last_name\nFROM Students s\nJOIN Addresses a ON s.current_address_id = a.address_id\nLEFT JOIN Student_Enrolment se ON s.student_id = se.student_id\nWHERE a.state_province_county = 'North Carolina'\n  AND se.student_enrolment_id IS NULL;", "match": {"match": false, "result": [], "gt": [["Gleichner"], ["Weimann"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT s.last_name\nFROM Students s\nJOIN Addresses a ON s.current_address_id = a.address_id\nLEFT JOIN Student_Enrolment se ON s.student_id = se.student_id\nWHERE a.state_province_county = 'North Carolina'\n  AND se.student_enrolment_id IS NULL;", "match": {"match": false, "result": [], "gt": [["Gleichner"], ["Weimann"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT t.transcript_id, t.transcript_date\nFROM Transcripts t\nJOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id\nGROUP BY t.transcript_id, t.transcript_date\nHAVING COUNT(DISTINCT tc.student_course_id) >= 2;", "match": {"match": false, "result": [[5, "2013-06-30 13:01:40"], [6, "2010-12-13 10:55:15"], [8, "1975-05-06 12:04:47"], [15, "1998-11-22 12:18:29"]], "gt": [["2013-06-30 13:01:40", 5], ["2010-12-13 10:55:15", 6], ["1975-05-06 12:04:47", 8], ["1998-11-22 12:18:29", 15]], "error": "Query result does not match ground truth."}}
{"result": "SELECT t.transcript_date, t.transcript_id\nFROM Transcripts t\nJOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id\nGROUP BY t.transcript_id\nHAVING COUNT(DISTINCT tc.student_course_id) >= 2;", "match": {"match": true, "result": [["2013-06-30 13:01:40", 5], ["2010-12-13 10:55:15", 6], ["1975-05-06 12:04:47", 8], ["1998-11-22 12:18:29", 15]]}}
{"result": "SELECT cell_mobile_number\nFROM Students\nWHERE first_name = 'Timmothy' AND last_name = 'Ward';", "match": {"match": true, "result": [["(096)889-8954x524"]]}}
{"result": "SELECT s.cell_mobile_number\nFROM Students s\nWHERE s.first_name = 'Timmothy' AND s.last_name = 'Ward';", "match": {"match": false, "result": [["(096)889-8954x524"]], "gt": [], "error": "Query result does not match ground truth."}}
{"result": "SELECT first_name, middle_name, last_name\nFROM Students\nWHERE date_first_registered = (\n    SELECT MIN(date_first_registered)\n    FROM Students\n)", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT \n    s.first_name, \n    s.middle_name, \n    s.last_name\nFROM \n    Students s\nJOIN \n    Student_Enrolment se ON s.student_id = se.student_id\nORDER BY \n    se.date_first_registered ASC\nLIMIT 1", "match": {"match": false, "error": "Query execution failed with error: no such column: se.date_first_registered"}}
{"result": "SELECT DISTINCT s.first_name, s.middle_name, s.last_name\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nWHERE s.date_left IS NOT NULL\nORDER BY s.date_left\nLIMIT 1;", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT s.first_name, s.middle_name, s.last_name\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nJOIN Semesters sem ON se.semester_id = sem.semester_id\nWHERE se.student_enrolment_id IN (\n    SELECT DISTINCT se2.student_enrolment_id\n    FROM Student_Enrolment se2\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM Student_Enrolment_Courses sec\n        WHERE sec.student_enrolment_id = se2.student_enrolment_id\n    )\n)\nORDER BY s.date_first_registered ASC\nLIMIT 1;", "match": {"match": false, "result": [["Milton", "Vaughn", "Christiansen"]], "gt": [["Timmothy", "Anna", "Ward"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT S.first_name\nFROM Students S\nJOIN Addresses A ON S.current_address_id = A.address_id\nJOIN Addresses P ON S.permanent_address_id = P.address_id\nWHERE A.address_id <> P.address_id;", "match": {"match": true, "result": [["Timmothy"], ["Hobart"], ["Warren"], ["Jarvis"], ["Stanford"], ["Frida"], ["Delaney"], ["Reva"], ["Helga"], ["Gregg"], ["Orrin"], ["Deon"], ["Jordy"], ["Jett"]]}}
{"result": "SELECT Students.first_name\nFROM Students\nWHERE Students.permanent_address_id <> Students.current_address_id\nLIMIT 1;", "match": {"match": false, "result": [["Timmothy"]], "gt": [["Timmothy"], ["Hobart"], ["Warren"], ["Jarvis"], ["Stanford"], ["Frida"], ["Delaney"], ["Reva"], ["Helga"], ["Gregg"], ["Orrin"], ["Deon"], ["Jordy"], ["Jett"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT a.address_id, a.line_1, a.line_2, a.line_3, COUNT(s.student_id) AS student_count\nFROM Addresses a\nJOIN Students s ON a.address_id = s.current_address_id\nWHERE s.date_left IS NULL\nGROUP BY a.address_id, a.line_1, a.line_2, a.line_3\nORDER BY student_count DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [], "gt": [[9, "0643 Muller Vista", "Suite 383"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT a.address_id, a.line_1, a.line_2\nFROM Addresses a\nJOIN Students s ON a.address_id = s.current_address_id OR a.address_id = s.permanent_address_id\nGROUP BY a.address_id, a.line_1, a.line_2\nORDER BY COUNT(DISTINCT s.student_id) DESC\nLIMIT 1;", "match": {"match": true, "result": [[9, "0643 Muller Vista", "Suite 383"]]}}
{"result": "SELECT AVG(TIMESTAMPDIFF(MONTH, NULL, transcript_date)) AS avg_months_since_transcript\nFROM Transcripts;", "match": {"match": false, "error": "Query execution failed with error: no such column: MONTH"}}
{"result": "SELECT AVG(transcript_date) AS average_transcript_date\nFROM Transcripts;", "match": {"match": true, "result": [[1989.9333333333334]]}}
{"result": "SELECT transcript_date, other_details\nFROM Transcripts\nORDER BY transcript_date ASC\nLIMIT 1", "match": {"match": true, "result": [["1975-05-06 12:04:47", null]]}}
{"result": "SELECT MIN(transcript_date), transcript_id, tc.student_course_id, tc.transcript_id\nFROM Transcripts t\nJOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id\nGROUP BY tc.transcript_id\nORDER BY transcript_date ASC\nLIMIT 1;", "match": {"match": false, "error": "Query execution failed with error: ambiguous column name: transcript_id"}}
{"result": "SELECT COUNT(*) AS released_transcripts\nFROM Transcripts\nWHERE transcript_date IS NOT NULL;", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) AS transcript_count\nFROM Transcripts;", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT MAX(transcript_date) AS last_transcript_release_date\nFROM Transcripts;", "match": {"match": true, "result": [["2013-06-30 13:01:40"]]}}
{"result": "SELECT MAX(transcript_date) AS last_transcript_date\nFROM Transcripts;", "match": {"match": true, "result": [["2013-06-30 13:01:40"]]}}
{"result": "SELECT se.student_enrolment_id, COUNT(tc.transcript_id) AS enrollment_count\nFROM Student_Enrolment se\nLEFT JOIN Student_Enrolment_Courses sec ON se.student_enrolment_id = sec.student_enrolment_id\nLEFT JOIN Transcript_Contents tc ON sec.student_course_id = tc.student_course_id\nGROUP BY se.student_enrolment_id\nORDER BY enrollment_count DESC\nLIMIT 1;", "match": {"match": false, "result": [[2, 4]], "gt": [[4, 0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    SEC.student_course_id,\n    COUNT(DISTINCT TC.transcript_id) AS transcript_count\nFROM \n    Student_Enrolment_Courses SEC\nJOIN \n    Transcript_Contents TC ON SEC.student_course_id = TC.student_course_id\nGROUP BY \n    SEC.student_course_id\nORDER BY \n    transcript_count DESC\nLIMIT 1;", "match": {"match": false, "result": [[0, 4]], "gt": [[4, 0]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT t.transcript_id, t.transcript_date\nFROM Transcripts t\nJOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id\nGROUP BY t.transcript_id\nORDER BY COUNT(tc.student_course_id) ASC\nLIMIT 1;\n```", "match": {"match": false, "result": [[2, "1975-10-28 15:16:51"]], "gt": [["1975-10-28 15:16:51", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT t.transcript_id, t.transcript_date\nFROM Transcripts t\nJOIN (\n    SELECT tc.transcript_id, COUNT(*) as course_count\n    FROM Transcript_Contents tc\n    GROUP BY tc.transcript_id\n    ORDER BY course_count ASC\n    LIMIT 1\n) min_transcript ON t.transcript_id = min_transcript.transcript_id;", "match": {"match": false, "result": [[2, "1975-10-28 15:16:51"]], "gt": [["1975-10-28 15:16:51", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT se.semester_id, s.semester_name\nFROM Semesters s\nJOIN Student_Enrolment se ON s.semester_id = se.semester_id\nJOIN Students st ON se.student_id = st.student_id\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nWHERE dp.degree_summary_name IN ('Master', 'Bachelor')\nGROUP BY se.semester_id, s.semester_name\nHAVING COUNT(DISTINCT dp.degree_summary_name) = 2;", "match": {"match": false, "result": [[13, "fall 2018"]], "gt": [[13]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT se.semester_id\nFROM Student_Enrolment se\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nWHERE dp.department_name IN ('Bachelors', 'Masters')\nGROUP BY se.semester_id\nHAVING COUNT(DISTINCT dp.department_name) = 2;", "match": {"match": false, "error": "Query execution failed with error: no such column: dp.department_name"}}
{"result": "```sql\nSELECT COUNT(DISTINCT current_address_id) AS distinct_current_addresses\nFROM Students;\n```", "match": {"match": true, "result": [[9]]}}
{"result": "```sql\nSELECT DISTINCT a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, \n                a.state_province_county, a.country, a.other_address_details\nFROM Addresses a\nJOIN Students s ON a.address_id = s.current_address_id\nOR a.address_id = s.permanent_address_id;\n```", "match": {"match": false, "result": [[10, "7081 Eda Center", "Suite 830", null, "Rutherfordtown", "839", "Delaware", "Kyrgyz Republic", null], [15, "74046 Metz Walk Apt. 113", "Suite 674", null, "Port Oceane", "669", "Wyoming", "Norfolk Island", null], [5, "858 Peggie Bypass Suite 212", "Apt. 335", null, "Michelleburgh", "446", "Hawaii", "Haiti", null], [12, "979 Haag Shores Suite 656", "Apt. 468", null, "Prohaskafort", "590", "SouthDakota", "Lesotho", null], [9, "0643 Muller Vista", "Suite 383", null, "Port Elvisfurt", "777", "NorthCarolina", "Gabon", null], [7, "193 Marlin Brook", "Apt. 406", null, "Herzoghaven", "068", "Arkansas", "Cook Islands", null], [11, "9283 Schulist Falls Apt. 037", "Suite 239", null, "South Palma", "400", "WestVirginia", "Bermuda", null], [3, "67942 Carlotta Ferry Apt. 686", "Apt. 583", null, "Goodwinhaven", "541", "Kansas", "Saudi Arabia", null], [6, "16998 Mraz Lodge", "Apt. 689", null, "North Omer", "902", "Kentucky", "Gibraltar", null], [1, "2294 Grant Square Apt. 235", "Apt. 370", null, "Port Chelsea", "148", "Virginia", "Iceland", null], [2, "3999 Aufderhar Ways Suite 593", "Apt. 388", null, "Lake Laishafurt", "943", "Kentucky", "Burundi", null], [14, "186 Evan Motorway Apt. 409", "Suite 079", null, "Lake Careyberg", "895", "Kentucky", "New Caledonia", null], [4, "0144 Lamar Plaza Apt. 346", "Suite 703", null, "Port Evanston", "847", "Washington", "Angola", null], [8, "202 Hessel Views Apt. 468", "Apt. 305", null, "Mariliehaven", "638", "Idaho", "Croatia", null]], "gt": [[9]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    student_id,\n    last_name,\n    first_name,\n    middle_name,\n    email_address,\n    cell_mobile_number,\n    date_left,\n    date_first_registered,\n    ssn,\n    other_student_details\nFROM \n    Students\nORDER BY \n    last_name DESC,\n    first_name DESC,\n    middle_name DESC,\n    student_id DESC;", "match": {"match": false, "result": [[13, "Weimann", "Deon", "Brooklyn", "jhuel@example.com", "(213)445-0399x85208", "2014-05-30 23:32:02", "1986-02-24 21:12:23", "68095", "assumenda"], [1, "Ward", "Timmothy", "Anna", "erwin.zboncak@example.com", "(096)889-8954x524", "1971-05-17 19:28:49", "1971-02-05 07:28:23", "965", "quia"], [11, "Schuppe", "Gregg", "Mossie", "nbruen@example.org", "(462)246-7921", "1975-10-09 00:49:27", "1989-05-24 23:31:29", "494", "omnis"], [6, "Rogahn", "Stanford", "Mona", "skassulke@example.net", "436.613.7683", "2016-04-09 12:27:04", "1997-03-20 16:47:25", "248", "qui"], [14, "Rempel", "Jordy", "Osborne", "gracie29@example.com", "(605)919-3594x3661", "1999-08-24 00:07:10", "2004-12-24 12:36:46", "34458427", "et"], [9, "Osinski", "Reva", "Golda", "qo'kon@example.com", "(507)365-8405", "1990-09-01 05:03:27", "2017-01-04 08:10:25", "39", "nesciunt"], [10, "Mohr", "Helga", "Cleve", "nya.lesch@example.net", "677.401.9382", "2017-07-09 21:38:43", "2009-09-25 00:14:25", "43", "rerum"], [12, "Kemmer", "Orrin", "Neal", "beth42@example.org", "(982)153-1469x1733", "2006-08-04 17:26:49", "2005-12-15 08:42:10", "6274274", "non"], [15, "Jaskolski", "Jett", "Alberta", "mya88@example.org", "877.549.9067x8723", "1982-06-11 00:25:39", "1982-06-19 13:15:18", "156", "omnis"], [7, "Huel", "Frida", "Aisha", "baumbach.lucious@example.org", "1-879-796-8987x164", "1997-11-16 08:54:33", "2018-03-13 09:56:22", "668", "dolorum"], [3, "Gleichner", "Warren", "Violet", "johns.unique@example.net", "07661787471", "2007-03-31 09:53:19", "2007-08-29 23:25:41", "3", "facilis"], [5, "Christiansen", "Milton", "Vaughn", "lhartmann@example.org", "171-642-5684", "2007-11-28 12:50:21", "1973-05-19 19:12:46", "", "laborum"], [4, "Carroll", "Jarvis", "Aaliyah", "jillian26@example.net", "09700166582", "2007-08-02 04:12:58", "2014-03-28 05:48:23", "141072406", "atque"], [2, "Balistreri", "Hobart", "Lorenz", "swift.kolby@example.com", "1-009-710-5151", "2013-10-05 17:41:28", "1976-10-26 02:33:06", "304246", "autem"], [8, "Ankunding", "Delaney", "Judd", "dell43@example.net", "03174364122", "2004-12-08 05:29:11", "1982-02-14 08:46:35", "402", "voluptatem"]], "gt": [["voluptatem"], ["rerum"], ["quia"], ["qui"], ["omnis"], ["omnis"], ["non"], ["nesciunt"], ["laborum"], ["facilis"], ["et"], ["dolorum"], ["autem"], ["atque"], ["assumenda"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    CONCAT(s.last_name, ', ', s.first_name, ' - ', s.middle_name) AS student_name,\n    s.email_address,\n    s.cell_mobile_number,\n    a1.line_1 AS current_address,\n    a2.line_1 AS permanent_address\nFROM \n    Students s\nJOIN \n    Addresses a1 ON s.current_address_id = a1.address_id\nJOIN \n    Addresses a2 ON s.permanent_address_id = a2.address_id\nORDER BY \n    s.last_name DESC, s.first_name DESC, s.middle_name DESC;", "match": {"match": false, "result": [["Weimann, Deon - Brooklyn", "jhuel@example.com", "(213)445-0399x85208", "0643 Muller Vista", "202 Hessel Views Apt. 468"], ["Ward, Timmothy - Anna", "erwin.zboncak@example.com", "(096)889-8954x524", "7081 Eda Center", "74046 Metz Walk Apt. 113"], ["Schuppe, Gregg - Mossie", "nbruen@example.org", "(462)246-7921", "186 Evan Motorway Apt. 409", "0144 Lamar Plaza Apt. 346"], ["Rogahn, Stanford - Mona", "skassulke@example.net", "436.613.7683", "16998 Mraz Lodge", "67942 Carlotta Ferry Apt. 686"], ["Rempel, Jordy - Osborne", "gracie29@example.com", "(605)919-3594x3661", "979 Haag Shores Suite 656", "9283 Schulist Falls Apt. 037"], ["Osinski, Reva - Golda", "qo'kon@example.com", "(507)365-8405", "3999 Aufderhar Ways Suite 593", "74046 Metz Walk Apt. 113"], ["Mohr, Helga - Cleve", "nya.lesch@example.net", "677.401.9382", "74046 Metz Walk Apt. 113", "186 Evan Motorway Apt. 409"], ["Kemmer, Orrin - Neal", "beth42@example.org", "(982)153-1469x1733", "186 Evan Motorway Apt. 409", "0643 Muller Vista"], ["Jaskolski, Jett - Alberta", "mya88@example.org", "877.549.9067x8723", "3999 Aufderhar Ways Suite 593", "0643 Muller Vista"], ["Huel, Frida - Aisha", "baumbach.lucious@example.org", "1-879-796-8987x164", "74046 Metz Walk Apt. 113", "67942 Carlotta Ferry Apt. 686"], ["Gleichner, Warren - Violet", "johns.unique@example.net", "07661787471", "0643 Muller Vista", "858 Peggie Bypass Suite 212"], ["Christiansen, Milton - Vaughn", "lhartmann@example.org", "171-642-5684", "0643 Muller Vista", "0643 Muller Vista"], ["Carroll, Jarvis - Aaliyah", "jillian26@example.net", "09700166582", "193 Marlin Brook", "9283 Schulist Falls Apt. 037"], ["Balistreri, Hobart - Lorenz", "swift.kolby@example.com", "1-009-710-5151", "979 Haag Shores Suite 656", "858 Peggie Bypass Suite 212"], ["Ankunding, Delaney - Judd", "dell43@example.net", "03174364122", "2294 Grant Square Apt. 235", "858 Peggie Bypass Suite 212"]], "gt": [["voluptatem"], ["rerum"], ["quia"], ["qui"], ["omnis"], ["omnis"], ["non"], ["nesciunt"], ["laborum"], ["facilis"], ["et"], ["dolorum"], ["autem"], ["atque"], ["assumenda"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT section_name, section_description\nFROM Sections\nWHERE section_id = 8;", "match": {"match": false, "result": [["h", "et"]], "gt": [["et"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT section_description\nFROM Sections\nWHERE section_name = 'h';", "match": {"match": true, "result": [["et"]]}}
{"result": "SELECT DISTINCT s.first_name\nFROM Students s\nJOIN Addresses a ON s.permanent_address_id = a.address_id\nWHERE a.country = 'Haiti'\n   OR s.cell_mobile_number = '09700166582';", "match": {"match": false, "result": [["Hobart"], ["Warren"], ["Jarvis"], ["Delaney"]], "gt": [["Jarvis"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT s.first_name\nFROM Students s\nJOIN Addresses a ON s.permanent_address_id = a.address_id\nWHERE a.country = 'Haiti'\n   OR s.cell_mobile_number = '09700166582';", "match": {"match": false, "result": [["Hobart"], ["Warren"], ["Jarvis"], ["Delaney"]], "gt": [["Jarvis"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Title\nFROM Cartoon\nORDER BY Title ASC;", "match": {"match": true, "result": [["Dawn of the Dead Man!"], ["Day of the Dark Knight!"], ["Deep Cover for Batman!"], ["Enter the Outsiders!"], ["Evil Under the Sea!"], ["Fall of the Blue Beetle!"], ["Invasion of the Secret Santas!"], ["Journey to the Center of the Bat!"], ["Return of the Fearsome Fangs!"], ["Terror on Dinosaur Island!"], ["The Eyes of Despero!"], ["The Rise of the Blue Beetle!"]]}}
{"result": "SELECT Title\nFROM Cartoon\nORDER BY Title;", "match": {"match": true, "result": [["Dawn of the Dead Man!"], ["Day of the Dark Knight!"], ["Deep Cover for Batman!"], ["Enter the Outsiders!"], ["Evil Under the Sea!"], ["Fall of the Blue Beetle!"], ["Invasion of the Secret Santas!"], ["Journey to the Center of the Bat!"], ["Return of the Fearsome Fangs!"], ["Terror on Dinosaur Island!"], ["The Eyes of Despero!"], ["The Rise of the Blue Beetle!"]]}}
{"result": "SELECT Title\nFROM Cartoon\nWHERE Directed_by = 'Ben Jones';", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Day of the Dark Knight!"], ["Dawn of the Dead Man!"], ["The Eyes of Despero!"]]}}
{"result": "SELECT C.Title\nFROM Cartoon C\nJOIN TV_Channel TC ON C.Channel = TC.id\nWHERE C.Directed_by = 'Ben Jones';", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Day of the Dark Knight!"], ["Dawn of the Dead Man!"], ["The Eyes of Despero!"]]}}
{"result": "SELECT COUNT(*)\nFROM Cartoon\nWHERE Written_by = 'Joseph Kuhr';", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(*)\nFROM Cartoon\nWHERE Written_by = 'Joseph Kuhr';", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT Title, Directed_by\nFROM Cartoon\nORDER BY Original_air_date;", "match": {"match": true, "result": [["Invasion of the Secret Santas!", "Brandon Vietti"], ["Evil Under the Sea!", "Michael Chang"], ["Return of the Fearsome Fangs!", "Brandon Vietti"], ["Deep Cover for Batman!", "Michael Chang"], ["The Eyes of Despero!", "Ben Jones"], ["Dawn of the Dead Man!", "Ben Jones"], ["Day of the Dark Knight!", "Ben Jones"], ["Fall of the Blue Beetle!", "Brandon Vietti"], ["Journey to the Center of the Bat!", "Michael Chang"], ["Enter the Outsiders!", "Michael Chang"], ["The Rise of the Blue Beetle!", "Ben Jones"], ["Terror on Dinosaur Island!", "Brandon Vietti"]]}}
{"result": "SELECT c.Title, c.Directed_by\nFROM Cartoon c\nJOIN TV_Channel tc ON c.Channel = tc.id\nORDER BY c.Original_air_date;", "match": {"match": true, "result": [["Invasion of the Secret Santas!", "Brandon Vietti"], ["Evil Under the Sea!", "Michael Chang"], ["Return of the Fearsome Fangs!", "Brandon Vietti"], ["Deep Cover for Batman!", "Michael Chang"], ["The Eyes of Despero!", "Ben Jones"], ["Dawn of the Dead Man!", "Ben Jones"], ["Day of the Dark Knight!", "Ben Jones"], ["Fall of the Blue Beetle!", "Brandon Vietti"], ["Journey to the Center of the Bat!", "Michael Chang"], ["Enter the Outsiders!", "Michael Chang"], ["The Rise of the Blue Beetle!", "Ben Jones"], ["Terror on Dinosaur Island!", "Brandon Vietti"]]}}
{"result": "SELECT Title\nFROM Cartoon\nWHERE Directed_by IN ('Ben Jones', 'Brandon Vietti');", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Terror on Dinosaur Island!"], ["Day of the Dark Knight!"], ["Invasion of the Secret Santas!"], ["Dawn of the Dead Man!"], ["Fall of the Blue Beetle!"], ["The Eyes of Despero!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "```sql\nSELECT Title\nFROM Cartoon\nWHERE Directed_by IN ('Ben Jones', 'Brandon Vietti');\n```", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Terror on Dinosaur Island!"], ["Day of the Dark Knight!"], ["Invasion of the Secret Santas!"], ["Dawn of the Dead Man!"], ["Fall of the Blue Beetle!"], ["The Eyes of Despero!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT Country, COUNT(*) AS Channel_Count\nFROM TV_Channel\nGROUP BY Country\nORDER BY Channel_Count DESC\nLIMIT 1", "match": {"match": true, "result": [["Italy", 12]]}}
{"result": "SELECT Country, COUNT(*) as Channel_Count\nFROM TV_Channel\nGROUP BY Country\nORDER BY Channel_Count DESC\nLIMIT 1;", "match": {"match": true, "result": [["Italy", 12]]}}
{"result": "SELECT COUNT(DISTINCT series_name) as unique_series_names, \n       COUNT(DISTINCT Content) as unique_contents\nFROM TV_Channel;", "match": {"match": true, "result": [[15, 1]]}}
{"result": "SELECT COUNT(DISTINCT series_name) AS unique_series, \n       COUNT(DISTINCT Content) AS unique_contents\nFROM TV_Channel;", "match": {"match": true, "result": [[15, 1]]}}
{"result": "SELECT Content\nFROM TV_Channel\nWHERE series_name = 'Sky Radio';", "match": {"match": true, "result": [["music"]]}}
{"result": "SELECT Content\nFROM TV_Channel\nWHERE series_name = 'Sky Radio';", "match": {"match": true, "result": [["music"]]}}
{"result": "SELECT Package_Option\nFROM TV_Channel\nWHERE series_name = 'Sky Radio';", "match": {"match": true, "result": [["Sky Famiglia"]]}}
{"result": "SELECT DISTINCT Package_Option\nFROM TV_Channel\nWHERE series_name = 'Sky Radio';", "match": {"match": true, "result": [["Sky Famiglia"]]}}
{"result": "```sql\nSELECT COUNT(*) AS English_TV_Channels\nFROM TV_Channel\nWHERE Language = 'English';\n```", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(DISTINCT id) AS english_channel_count\nFROM TV_Channel\nWHERE Language = 'English';", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Language, COUNT(*) as Channel_Count\nFROM TV_Channel\nGROUP BY Language\nORDER BY Channel_Count ASC\nLIMIT 1;", "match": {"match": true, "result": [["English", 3]]}}
{"result": "SELECT Language, COUNT(*) as Channel_Count\nFROM TV_Channel\nGROUP BY Language\nORDER BY Channel_Count ASC\nLIMIT 1;", "match": {"match": true, "result": [["English", 3]]}}
{"result": "SELECT Language, COUNT(*) AS Channel_Count\nFROM TV_Channel\nGROUP BY Language;", "match": {"match": true, "result": [["English", 3], ["Italian", 12]]}}
{"result": "SELECT Language, COUNT(*) AS Channel_Count\nFROM TV_Channel\nGROUP BY Language\nORDER BY Channel_Count DESC;", "match": {"match": false, "result": [["Italian", 12], ["English", 3]], "gt": [["English", 3], ["Italian", 12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT TV_Channel.series_name\nFROM TV_Channel\nJOIN Cartoon ON TV_Channel.id = Cartoon.Channel\nWHERE Cartoon.Title = 'The Rise of the Blue Beetle!';", "match": {"match": true, "result": [["Sky Radio"]]}}
{"result": "SELECT TV_Channel.series_name\nFROM TV_Channel\nJOIN Cartoon ON TV_Channel.id = Cartoon.Channel\nWHERE Cartoon.Title = 'The Rise of the Blue Beetle';", "match": {"match": false, "result": [], "gt": [["Sky Radio"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT C.Title\nFROM Cartoon C\nJOIN TV_Channel TC ON C.Channel = TC.id\nWHERE TC.series_name = 'Sky Radio';", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT C.Title\nFROM Cartoon C\nJOIN TV_Channel TC ON C.Channel = TC.id\nWHERE TC.series_name = 'Sky Radio';", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT Episode\nFROM TV_series\nORDER BY Rating DESC;", "match": {"match": false, "result": [["A Love of a Lifetime"], ["Friendly Skies"], ["Game Three"], ["The Year of the Rabbit"], ["Winterland"], ["The Legend of Dylan McCleen"], ["Keepers"], ["Emily"], ["Blowback"], ["Home By Another Way"], ["Double Down"], ["The Hanged Man"]], "gt": [["The Hanged Man"], ["Double Down"], ["Home By Another Way"], ["Keepers"], ["Emily"], ["Blowback"], ["The Legend of Dylan McCleen"], ["Winterland"], ["The Year of the Rabbit"], ["Game Three"], ["Friendly Skies"], ["A Love of a Lifetime"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    TV_series.Episode, \n    TV_series.Rating\nFROM \n    TV_series\nORDER BY \n    TV_series.Rating DESC;", "match": {"match": false, "result": [["A Love of a Lifetime", "5.8"], ["Friendly Skies", "5.3"], ["Game Three", "4.4"], ["The Year of the Rabbit", "4.3"], ["Winterland", "4.0"], ["The Legend of Dylan McCleen", "3.8"], ["Keepers", "3.7"], ["Emily", "3.7"], ["Blowback", "3.7"], ["Home By Another Way", "3.5"], ["Double Down", "3.4"], ["The Hanged Man", "3.0"]], "gt": [["The Hanged Man"], ["Double Down"], ["Home By Another Way"], ["Keepers"], ["Emily"], ["Blowback"], ["The Legend of Dylan McCleen"], ["Winterland"], ["The Year of the Rabbit"], ["Game Three"], ["Friendly Skies"], ["A Love of a Lifetime"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Episode, Rating\nFROM TV_series\nORDER BY Rating DESC\nLIMIT 3;", "match": {"match": true, "result": [["A Love of a Lifetime", "5.8"], ["Friendly Skies", "5.3"], ["Game Three", "4.4"]]}}
{"result": "SELECT Episode, Rating\nFROM TV_series\nORDER BY Rating DESC\nLIMIT 3;", "match": {"match": true, "result": [["A Love of a Lifetime", "5.8"], ["Friendly Skies", "5.3"], ["Game Three", "4.4"]]}}
{"result": "```sql\nSELECT MIN(Share) AS min_share, MAX(Share) AS max_share\nFROM TV_series;\n```", "match": {"match": false, "result": [[5.0, 9.0]], "gt": [[9.0, 5.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    MAX(Share) AS max_share,\n    MIN(Share) AS min_share\nFROM \n    TV_series;", "match": {"match": true, "result": [[9.0, 5.0]]}}
{"result": "SELECT Air_Date\nFROM TV_series\nJOIN TV_Channel ON TV_series.Channel = TV_Channel.id\nWHERE Episode = 'A Love of a Lifetime';", "match": {"match": true, "result": [["September 24, 2007"]]}}
{"result": "SELECT t.Air_Date\nFROM TV_series t\nJOIN TV_Channel c ON t.Channel = c.id\nWHERE t.Episode = 'A Love of a Lifetime';", "match": {"match": true, "result": [["September 24, 2007"]]}}
{"result": "SELECT Weekly_Rank\nFROM TV_series\nJOIN TV_Channel ON TV_series.Channel = TV_Channel.id\nWHERE Episode = \"A Love of a Lifetime\";", "match": {"match": true, "result": [[43.0]]}}
{"result": "SELECT Weekly_Rank\nFROM TV_series\nWHERE Episode = \"A Love of a Lifetime\"\nAND Channel = (\n    SELECT id\n    FROM TV_Channel\n    WHERE series_name = (\n        SELECT series_name\n        FROM TV_series\n        WHERE Episode = \"A Love of a Lifetime\"\n    )\n)", "match": {"match": true, "result": [[43.0]]}}
{"result": "```sql\nSELECT TV_Channel.series_name\nFROM TV_Channel\nJOIN TV_series ON TV_Channel.id = TV_series.Channel\nWHERE TV_series.Episode = 'A Love of a Lifetime';\n```", "match": {"match": true, "result": [["Sky Radio"]]}}
{"result": "SELECT series_name\nFROM TV_Channel\nJOIN TV_series ON TV_Channel.id = TV_series.Channel\nWHERE Episode = 'A Love of a Lifetime';", "match": {"match": true, "result": [["Sky Radio"]]}}
{"result": "SELECT TV_series.Episode\nFROM TV_series\nJOIN TV_Channel ON TV_series.Channel = TV_Channel.id\nWHERE TV_Channel.series_name = 'Sky Radio';", "match": {"match": true, "result": [["A Love of a Lifetime"], ["Keepers"]]}}
{"result": "SELECT Episode\nFROM TV_series\nJOIN TV_Channel ON TV_series.Channel = TV_Channel.id\nWHERE TV_Channel.series_name = 'Sky Radio';", "match": {"match": true, "result": [["A Love of a Lifetime"], ["Keepers"]]}}
{"result": "SELECT Directed_by, COUNT(*) AS Number_of_Cartoons\nFROM Cartoon\nGROUP BY Directed_by\nORDER BY Number_of_Cartoons DESC;", "match": {"match": false, "result": [["Michael Chang", 4], ["Brandon Vietti", 4], ["Ben Jones", 4]], "gt": [[4, "Ben Jones"], [4, "Brandon Vietti"], [4, "Michael Chang"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Directed_by, COUNT(*) as Number_of_Cartoons\nFROM Cartoon\nGROUP BY Directed_by\nORDER BY Number_of_Cartoons DESC;", "match": {"match": false, "result": [["Michael Chang", 4], ["Brandon Vietti", 4], ["Ben Jones", 4]], "gt": [[4, "Ben Jones"], [4, "Brandon Vietti"], [4, "Michael Chang"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT c.Production_code, c.Channel\nFROM Cartoon c\nJOIN TV_series ts ON c.Channel = ts.Channel\nORDER BY ts.Air_Date DESC\nLIMIT 1;", "match": {"match": false, "result": [[101.0, "700"]], "gt": [[102.0, "701"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Production_code, Channel\nFROM Cartoon\nORDER BY Original_air_date DESC\nLIMIT 1;", "match": {"match": true, "result": [[102.0, "701"]]}}
{"result": "SELECT TV_Channel.Package_Option, TV_Channel.series_name\nFROM TV_Channel\nWHERE TV_Channel.Hight_definition_TV = 'Yes';", "match": {"match": false, "result": [], "gt": [["Sky Famiglia + Sky HD", "MTV Live HD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT Package_Option, series_name\nFROM TV_Channel\nWHERE Hight_definition_TV = 'Yes';", "match": {"match": false, "result": [], "gt": [["Sky Famiglia + Sky HD", "MTV Live HD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT TC.Country\nFROM TV_Channel TC\nJOIN TV_series TS ON TC.id = TS.Channel\nJOIN Cartoon C ON TC.id = C.Channel\nWHERE C.Written_by = 'Todd Casey'\n  AND C.Title IS NOT NULL;", "match": {"match": false, "result": [["Italy"]], "gt": [["United Kingdom"], ["Italy"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT DISTINCT TV_Channel.Country\nFROM TV_Channel\nJOIN Cartoon ON TV_Channel.id = Cartoon.Channel\nWHERE Cartoon.Written_by = 'Todd Casey';\n```", "match": {"match": true, "result": [["United Kingdom"], ["Italy"]]}}
{"result": "SELECT DISTINCT \"TV_Channel\".\"Country\"\nFROM \"TV_Channel\"\nWHERE \"TV_Channel\".\"id\" NOT IN (\n    SELECT \"TV_Channel\".\"id\"\n    FROM \"TV_Channel\"\n    JOIN \"Cartoon\" ON \"TV_Channel\".\"id\" = \"Cartoon\".\"Channel\"\n    WHERE \"Cartoon\".\"Written_by\" = 'Todd Casey'\n);", "match": {"match": false, "result": [["Italy"], ["United Kingdom"], ["Poland"]], "gt": [["Poland"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT DISTINCT TV_Channel.Country\nFROM TV_Channel\nJOIN TV_series ON TV_Channel.id = TV_series.Channel\nJOIN Cartoon ON TV_Channel.id = Cartoon.Channel\nWHERE Cartoon.Directed_by != 'Todd Casey';\n```", "match": {"match": false, "result": [["Italy"], ["United Kingdom"]], "gt": [["Poland"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT DISTINCT TV_Channel.series_name, TV_Channel.Country\nFROM TV_Channel\nJOIN TV_series ON TV_Channel.id = TV_series.Channel\nJOIN Cartoon ON TV_Channel.id = Cartoon.Channel\nWHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang');\n```", "match": {"match": false, "result": [["Sky Radio", "Italy"], ["MTV Dance", "United Kingdom"], ["Classica", "Italy"]], "gt": [["MTV Dance", "United Kingdom"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT TC.series_name, TC.Country\nFROM TV_Channel TC\nJOIN TV_series TS ON TC.id = TS.Channel\nJOIN Cartoon C ON TC.id = C.Channel\nWHERE (C.Directed_by = 'Ben Jones' OR C.Directed_by = 'Michael Chang')\n  AND TC.Content = 'Cartoon';", "match": {"match": false, "result": [], "gt": [["MTV Dance", "United Kingdom"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT \"Pixel_aspect_ratio_PAR\", \"Country\"\nFROM \"TV_Channel\"\nWHERE \"Language\" != 'English';", "match": {"match": false, "result": [["4:3", "Italy"], ["4:3 / 16:9", "Italy"], ["16:9", "Italy"]], "gt": [["4:3", "Italy"], ["4:3", "Italy"], ["4:3 / 16:9", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3", "Italy"], ["4:3", "Italy"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Pixel_aspect_ratio_PAR, Country\nFROM TV_Channel\nWHERE Language != 'English';", "match": {"match": true, "result": [["4:3", "Italy"], ["4:3", "Italy"], ["4:3 / 16:9", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3", "Italy"], ["4:3", "Italy"]]}}
{"result": "SELECT t1.id\nFROM TV_Channel t1\nWHERE t1.Country IN (\n    SELECT Country\n    FROM TV_Channel\n    GROUP BY Country\n    HAVING COUNT(DISTINCT id) > 2\n)\nORDER BY t1.id;", "match": {"match": false, "result": [["700"], ["701"], ["703"], ["704"], ["705"], ["708"], ["713"], ["714"], ["715"], ["717"], ["719"], ["728"]], "gt": [["700"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Channel\nFROM TV_series\nGROUP BY Channel\nHAVING COUNT(*) > 2;", "match": {"match": false, "result": [], "gt": [["700"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT DISTINCT TV_Channel.id\nFROM TV_Channel\nWHERE TV_Channel.id NOT IN (\n    SELECT DISTINCT Cartoon.Channel\n    FROM Cartoon\n    JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id\n    WHERE Cartoon.Directed_by = 'Ben Jones'\n);\n```", "match": {"match": true, "result": [["701"], ["703"], ["705"], ["706"], ["708"], ["709"], ["713"], ["714"], ["715"], ["717"], ["719"]]}}
{"result": "SELECT DISTINCT TV_Channel.id\nFROM TV_Channel\nLEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel\nWHERE Cartoon.Directed_by != 'Ben Jones' OR Cartoon.Directed_by IS NULL;", "match": {"match": false, "result": [["700"], ["701"], ["703"], ["705"], ["706"], ["707"], ["708"], ["709"], ["713"], ["714"], ["715"], ["717"], ["719"]], "gt": [["701"], ["703"], ["705"], ["706"], ["708"], ["709"], ["713"], ["714"], ["715"], ["717"], ["719"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT DISTINCT \"TV_Channel\".\"Package_Option\"\nFROM \"TV_Channel\"\nWHERE \"TV_Channel\".\"id\" NOT IN (\n    SELECT \"Cartoon\".\"Channel\"\n    FROM \"Cartoon\"\n    JOIN \"TV_Channel\" ON \"Cartoon\".\"Channel\" = \"TV_Channel\".\"id\"\n    WHERE \"Cartoon\".\"Directed_by\" = 'Ben Jones'\n);\n```", "match": {"match": false, "result": [["Sky Famiglia"], ["no ( FTV )"], ["Sky Famiglia + Sky HD"]], "gt": [["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["no ( FTV )"], ["Sky Famiglia + Sky HD"], ["no ( FTV )"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT tvc.Package_Option\nFROM TV_Channel tvc\nLEFT JOIN TV_series tvs ON tvc.id = tvs.Channel\nLEFT JOIN Cartoon c ON tvc.id = c.Channel\nWHERE c.Directed_by != 'Ben Jones' OR c.Directed_by IS NULL\nORDER BY tvc.Package_Option;", "match": {"match": false, "result": [["Sky Famiglia"], ["Sky Famiglia + Sky HD"], ["no ( FTV )"]], "gt": [["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["no ( FTV )"], ["Sky Famiglia + Sky HD"], ["no ( FTV )"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) FROM poker_player;", "match": {"match": true, "result": [[5]]}}
{"result": "SELECT COUNT(*) AS poker_player_count\nFROM poker_player;", "match": {"match": true, "result": [[5]]}}
{"result": "SELECT p.Name, pp.Earnings\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nORDER BY pp.Earnings DESC;", "match": {"match": false, "result": [["Maksim Botin", 596462.0], ["Aleksey Ostapenko", 476090.0], ["Teodor Salparov", 189233.0], ["Semen Poltavskiy", 142800.0], ["Yevgeni Sivozhelez", 104871.0]], "gt": [[596462.0], [476090.0], [189233.0], [142800.0], [104871.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT p.Poker_Player_ID, p.Earnings\nFROM poker_player p\nORDER BY p.Earnings DESC;", "match": {"match": false, "result": [[4, 596462.0], [1, 476090.0], [2, 189233.0], [5, 142800.0], [3, 104871.0]], "gt": [[596462.0], [476090.0], [189233.0], [142800.0], [104871.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT p.Name, pp.Final_Table_Made, pp.Best_Finish\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nWHERE pp.Final_Table_Made IS NOT NULL OR pp.Best_Finish IS NOT NULL;", "match": {"match": false, "result": [["Aleksey Ostapenko", 42.0, 1.0], ["Teodor Salparov", 10.0, 2.0], ["Yevgeni Sivozhelez", 21.0, 1.0], ["Maksim Botin", 19.0, 2.0], ["Semen Poltavskiy", 26.0, 3.0]], "gt": [[42.0, 1.0], [10.0, 2.0], [21.0, 1.0], [19.0, 2.0], [26.0, 3.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT p.Poker_Player_ID, p.Final_Table_Made, p.Best_Finish\nFROM poker_player p", "match": {"match": false, "result": [[1, 42.0, 1.0], [2, 10.0, 2.0], [3, 21.0, 1.0], [4, 19.0, 2.0], [5, 26.0, 3.0]], "gt": [[42.0, 1.0], [10.0, 2.0], [21.0, 1.0], [19.0, 2.0], [26.0, 3.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(Earnings) AS average_earnings\nFROM poker_player", "match": {"match": true, "result": [[301891.2]]}}
{"result": "```sql\nSELECT AVG(Earnings) AS Average_Earnings\nFROM poker_player;\n```", "match": {"match": true, "result": [[301891.2]]}}
{"result": "SELECT Money_Rank\nFROM poker_player\nWHERE Poker_Player_ID = (\n    SELECT Poker_Player_ID\n    FROM poker_player\n    ORDER BY Earnings DESC\n    LIMIT 1\n);", "match": {"match": true, "result": [[58.0]]}}
{"result": "```sql\nSELECT Money_Rank\nFROM poker_player\nWHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);\n```", "match": {"match": true, "result": [[58.0]]}}
{"result": "SELECT MAX(Final_Table_Made) as Max_Final_Tables\nFROM poker_player\nWHERE Earnings < 200000;", "match": {"match": true, "result": [[26.0]]}}
{"result": "```sql\nSELECT MAX(Final_Table_Made) AS Max_Final_Tables_Made\nFROM poker_player\nWHERE Earnings < 200000;\n```", "match": {"match": true, "result": [[26.0]]}}
{"result": "SELECT p.Name\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID;", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Teodor Salparov"], ["Yevgeni Sivozhelez"], ["Maksim Botin"], ["Semen Poltavskiy"]]}}
{"result": "SELECT p.Name\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID;", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Teodor Salparov"], ["Yevgeni Sivozhelez"], ["Maksim Botin"], ["Semen Poltavskiy"]]}}
{"result": "SELECT p.Name\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nWHERE pp.Earnings > 300000;", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Maksim Botin"]]}}
{"result": "SELECT p.Name\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nWHERE pp.Earnings > 300000;", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Maksim Botin"]]}}
{"result": "SELECT p.Name\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nORDER BY pp.Final_Table_Made ASC;", "match": {"match": true, "result": [["Teodor Salparov"], ["Maksim Botin"], ["Yevgeni Sivozhelez"], ["Semen Poltavskiy"], ["Aleksey Ostapenko"]]}}
{"result": "SELECT p.Name\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nORDER BY pp.Final_Table_Made ASC;", "match": {"match": true, "result": [["Teodor Salparov"], ["Maksim Botin"], ["Yevgeni Sivozhelez"], ["Semen Poltavskiy"], ["Aleksey Ostapenko"]]}}
{"result": "SELECT p.Birth_Date\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nWHERE pp.Earnings = (SELECT MIN(Earnings) FROM poker_player);", "match": {"match": true, "result": [["August 8, 1986"]]}}
{"result": "SELECT p.Birth_Date\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nORDER BY pp.Earnings ASC\nLIMIT 1;", "match": {"match": true, "result": [["August 8, 1986"]]}}
{"result": "```sql\nSELECT ppp.Money_Rank\nFROM poker_player ppp\nJOIN people pp ON ppp.People_ID = pp.People_ID\nORDER BY pp.Height DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [[68.0]]}}
{"result": "```sql\nSELECT pp.Money_Rank\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nORDER BY p.Height DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [[68.0]]}}
{"result": "SELECT AVG(Earnings) \nFROM poker_player \nJOIN people ON poker_player.People_ID = people.People_ID\nWHERE Height > 200;", "match": {"match": true, "result": [[309445.0]]}}
{"result": "SELECT AVG(p.Earnings) AS Avg_Earnings\nFROM poker_player p\nJOIN people pp ON p.People_ID = pp.People_ID\nWHERE pp.Height > 200;", "match": {"match": true, "result": [[309445.0]]}}
{"result": "SELECT people.Name\nFROM poker_player\nJOIN people ON poker_player.People_ID = people.People_ID\nORDER BY poker_player.Earnings DESC;", "match": {"match": true, "result": [["Maksim Botin"], ["Aleksey Ostapenko"], ["Teodor Salparov"], ["Semen Poltavskiy"], ["Yevgeni Sivozhelez"]]}}
{"result": "SELECT p.Name\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nORDER BY pp.Earnings DESC;", "match": {"match": true, "result": [["Maksim Botin"], ["Aleksey Ostapenko"], ["Teodor Salparov"], ["Semen Poltavskiy"], ["Yevgeni Sivozhelez"]]}}
{"result": "SELECT p.Nationality, COUNT(*) AS NumberOfPeople\nFROM people p\nGROUP BY p.Nationality\nORDER BY NumberOfPeople DESC;", "match": {"match": false, "result": [["Russia", 6], ["Bulgaria", 1]], "gt": [["Bulgaria", 1], ["Russia", 6]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Nationality, COUNT(*) as Number_of_People\nFROM people\nGROUP BY Nationality;", "match": {"match": true, "result": [["Bulgaria", 1], ["Russia", 6]]}}
{"result": "SELECT Nationality, COUNT(*) as Frequency\nFROM people\nGROUP BY Nationality\nORDER BY Frequency DESC\nLIMIT 1;", "match": {"match": false, "result": [["Russia", 6]], "gt": [["Russia"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT Nationality, COUNT(*) AS Frequency\nFROM people\nGROUP BY Nationality\nORDER BY Frequency DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [["Russia", 6]], "gt": [["Russia"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Nationality\nFROM people\nGROUP BY Nationality\nHAVING COUNT(*) >= 2;", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Nationality\nFROM people\nGROUP BY Nationality\nHAVING COUNT(*) >= 2;", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT p.Name, p.Birth_Date\nFROM people p\nORDER BY p.Name ASC;", "match": {"match": true, "result": [["Aleksey Ostapenko", "May 26, 1986"], ["Maksim Botin", "July 14, 1983"], ["Roman Bragin", "April 17, 1987"], ["Semen Poltavskiy", "February 8, 1981"], ["Sergey Grankin", "January 22, 1987"], ["Teodor Salparov", "August 16, 1982"], ["Yevgeni Sivozhelez", "August 8, 1986"]]}}
{"result": "SELECT p.Name, p.Birth_Date\nFROM people p\nORDER BY p.Name ASC;", "match": {"match": true, "result": [["Aleksey Ostapenko", "May 26, 1986"], ["Maksim Botin", "July 14, 1983"], ["Roman Bragin", "April 17, 1987"], ["Semen Poltavskiy", "February 8, 1981"], ["Sergey Grankin", "January 22, 1987"], ["Teodor Salparov", "August 16, 1982"], ["Yevgeni Sivozhelez", "August 8, 1986"]]}}
{"result": "```sql\nSELECT Name \nFROM people \nWHERE Nationality != 'Russia';\n```", "match": {"match": true, "result": [["Teodor Salparov"]]}}
{"result": "SELECT Name\nFROM people\nWHERE Nationality != 'Russia';", "match": {"match": true, "result": [["Teodor Salparov"]]}}
{"result": "SELECT Name\nFROM people\nWHERE People_ID NOT IN (SELECT DISTINCT People_ID FROM poker_player);", "match": {"match": true, "result": [["Roman Bragin"], ["Sergey Grankin"]]}}
{"result": "SELECT p.Name\nFROM people p\nLEFT JOIN poker_player pp ON p.People_ID = pp.People_ID\nWHERE pp.People_ID IS NULL;", "match": {"match": true, "result": [["Roman Bragin"], ["Sergey Grankin"]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) AS Distinct_Nationalities\nFROM people;", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) AS Nationality_Count\nFROM people;", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(*) FROM conductor", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT COUNT(*) AS Conductor_Count\nFROM conductor;", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT Name\nFROM conductor\nORDER BY Age ASC;", "match": {"match": true, "result": [["Antal Dor\u00e1ti"], ["Igor Stravinsky"], ["Colin Davis"], ["Michael Tilson Thomas"], ["Paul Jorgensen"], ["Antal Brown"], ["Charles Dutoit"], ["Seiji Ozawa"], ["Valeri Gergiev"], ["Pierre Boulez"], ["Gerard Schwarz"], ["Robert Craft"]]}}
{"result": "SELECT Name\nFROM conductor\nORDER BY Age;", "match": {"match": true, "result": [["Antal Dor\u00e1ti"], ["Igor Stravinsky"], ["Colin Davis"], ["Michael Tilson Thomas"], ["Paul Jorgensen"], ["Antal Brown"], ["Charles Dutoit"], ["Seiji Ozawa"], ["Valeri Gergiev"], ["Pierre Boulez"], ["Gerard Schwarz"], ["Robert Craft"]]}}
{"result": "SELECT Name\nFROM conductor\nWHERE Nationality != 'USA';", "match": {"match": true, "result": [["Igor Stravinsky"], ["Paul Jorgensen"], ["Charles Dutoit"], ["Pierre Boulez"], ["Robert Craft"], ["Michael Tilson Thomas"]]}}
{"result": "```sql\nSELECT Name\nFROM conductor\nWHERE Nationality != 'USA';\n```", "match": {"match": true, "result": [["Igor Stravinsky"], ["Paul Jorgensen"], ["Charles Dutoit"], ["Pierre Boulez"], ["Robert Craft"], ["Michael Tilson Thomas"]]}}
{"result": "SELECT DISTINCT Record_Company\nFROM orchestra\nORDER BY Year_of_Founded DESC;", "match": {"match": false, "result": [["Columbia Masterworks"], ["Philips"], ["Philips Classics Records"], ["RCA"], ["EMI"], ["Koch Records / Naxos Records"], ["Mercury Records"], ["Deutsche Grammophon"], ["Kultur"], ["Decca Records"], ["Delos Records"]], "gt": [["Columbia Masterworks"], ["Philips"], ["Philips Classics Records"], ["RCA"], ["EMI"], ["Koch Records / Naxos Records"], ["Decca Records"], ["Mercury Records"], ["Deutsche Grammophon"], ["Kultur"], ["Decca Records"], ["Delos Records"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Record_Company\nFROM orchestra\nORDER BY Year_of_Founded DESC;", "match": {"match": true, "result": [["Columbia Masterworks"], ["Philips"], ["Philips Classics Records"], ["RCA"], ["EMI"], ["Koch Records / Naxos Records"], ["Decca Records"], ["Mercury Records"], ["Deutsche Grammophon"], ["Kultur"], ["Decca Records"], ["Delos Records"]]}}
{"result": "```sql\nSELECT AVG(\"Attendance\") AS \"Average_Attendance\"\nFROM \"show\";\n```", "match": {"match": true, "result": [[1326.4]]}}
{"result": "SELECT AVG(Attendance) AS Average_Attendance\nFROM show", "match": {"match": true, "result": [[1326.4]]}}
{"result": "SELECT MAX(CAST(REPLACE(share, '%', '') AS DECIMAL(5,2))) AS max_share,\n       MIN(CAST(REPLACE(share, '%', '') AS DECIMAL(5,2))) AS min_share\nFROM performance\nWHERE type != 'Live final';", "match": {"match": false, "result": [[44.7, 22.7]], "gt": [["44.7%", "22.7%"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    MAX(SUBSTR(Share, 1, LENGTH(Share) - 1)) as max_share,\n    MIN(SUBSTR(Share, 1, LENGTH(Share) - 1)) as min_share\nFROM performance\nWHERE Type != 'Live final';", "match": {"match": false, "result": [["44.7", "22.7"]], "gt": [["44.7%", "22.7%"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM conductor;", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) AS Number_of_Nationalities\nFROM conductor;", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Name\nFROM conductor\nORDER BY Year_of_Work DESC;", "match": {"match": true, "result": [["Robert Craft"], ["Antal Brown"], ["Gerard Schwarz"], ["Valeri Gergiev"], ["Charles Dutoit"], ["Michael Tilson Thomas"], ["Igor Stravinsky"], ["Paul Jorgensen"], ["Pierre Boulez"], ["Antal Dor\u00e1ti"], ["Seiji Ozawa"], ["Colin Davis"]]}}
{"result": "SELECT Name, Year_of_Work\nFROM conductor\nORDER BY Year_of_Work DESC;", "match": {"match": false, "result": [["Robert Craft", 21], ["Antal Brown", 20], ["Gerard Schwarz", 20], ["Valeri Gergiev", 16], ["Charles Dutoit", 12], ["Michael Tilson Thomas", 12], ["Igor Stravinsky", 11], ["Paul Jorgensen", 11], ["Pierre Boulez", 11], ["Antal Dor\u00e1ti", 10], ["Seiji Ozawa", 10], ["Colin Davis", 6]], "gt": [["Robert Craft"], ["Antal Brown"], ["Gerard Schwarz"], ["Valeri Gergiev"], ["Charles Dutoit"], ["Michael Tilson Thomas"], ["Igor Stravinsky"], ["Paul Jorgensen"], ["Pierre Boulez"], ["Antal Dor\u00e1ti"], ["Seiji Ozawa"], ["Colin Davis"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT Name\nFROM conductor\nORDER BY Year_of_Work DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [["Robert Craft"]]}}
{"result": "```sql\nSELECT Name\nFROM conductor\nWHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor);\n```", "match": {"match": true, "result": [["Robert Craft"]]}}
{"result": "SELECT c.Name AS Conductor_Name, o.Orchestra\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;", "match": {"match": true, "result": [["Antal Dor\u00e1ti", "London Symphony Orchestra"], ["Igor Stravinsky", "Columbia Symphony Orchestra"], ["Colin Davis", "Royal Concertgebouw Orchestra"], ["Paul Jorgensen", "Royal Danish Orchestra"], ["Antal Brown", "Detroit Symphony Orchestra"], ["Charles Dutoit", "Montreal Symphony Orchestra"], ["Gerard Schwarz", "Seattle Symphony Orchestra"], ["Pierre Boulez", "Chicago Symphony Orchestra"], ["Valeri Gergiev", "Kirov Orchestra"], ["Robert Craft", "Philharmonia Orchestra"], ["Seiji Ozawa", "Orchestre de Paris"], ["Michael Tilson Thomas", "San Francisco Symphony Orchestra"]]}}
{"result": "```sql\nSELECT c.Name AS Conductor_Name, o.Orchestra AS Orchestra_Name\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;\n```", "match": {"match": true, "result": [["Antal Dor\u00e1ti", "London Symphony Orchestra"], ["Igor Stravinsky", "Columbia Symphony Orchestra"], ["Colin Davis", "Royal Concertgebouw Orchestra"], ["Paul Jorgensen", "Royal Danish Orchestra"], ["Antal Brown", "Detroit Symphony Orchestra"], ["Charles Dutoit", "Montreal Symphony Orchestra"], ["Gerard Schwarz", "Seattle Symphony Orchestra"], ["Pierre Boulez", "Chicago Symphony Orchestra"], ["Valeri Gergiev", "Kirov Orchestra"], ["Robert Craft", "Philharmonia Orchestra"], ["Seiji Ozawa", "Orchestre de Paris"], ["Michael Tilson Thomas", "San Francisco Symphony Orchestra"]]}}
{"result": "SELECT DISTINCT c.Name\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nGROUP BY c.Conductor_ID, c.Name\nHAVING COUNT(DISTINCT o.Orchestra_ID) > 1;", "match": {"match": true, "result": []}}
{"result": "SELECT DISTINCT c.Name\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nGROUP BY c.Conductor_ID, c.Name\nHAVING COUNT(DISTINCT o.Orchestra_ID) > 1", "match": {"match": true, "result": []}}
{"result": "```sql\nSELECT c.Name\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nGROUP BY c.Conductor_ID, c.Name\nORDER BY COUNT(o.Orchestra_ID) DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [["Antal Dor\u00e1ti"]], "gt": [["Michael Tilson Thomas"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT c.Name\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nGROUP BY c.Conductor_ID, c.Name\nORDER BY COUNT(o.Orchestra_ID) DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [["Antal Dor\u00e1ti"]], "gt": [["Michael Tilson Thomas"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT c.Name\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nWHERE o.Year_of_Founded > 2008;", "match": {"match": true, "result": [["Igor Stravinsky"]]}}
{"result": "SELECT DISTINCT c.Name\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nWHERE o.Year_of_Founded > 2008;", "match": {"match": true, "result": [["Igor Stravinsky"]]}}
{"result": "SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS Number_of_Orchestras\nFROM orchestra\nGROUP BY Record_Company\nORDER BY Number_of_Orchestras DESC;", "match": {"match": false, "result": [["Decca Records", 2], ["RCA", 1], ["Philips Classics Records", 1], ["Philips", 1], ["Mercury Records", 1], ["Kultur", 1], ["Koch Records / Naxos Records", 1], ["EMI", 1], ["Deutsche Grammophon", 1], ["Delos Records", 1], ["Columbia Masterworks", 1]], "gt": [["Columbia Masterworks", 1], ["Decca Records", 2], ["Delos Records", 1], ["Deutsche Grammophon", 1], ["EMI", 1], ["Koch Records / Naxos Records", 1], ["Kultur", 1], ["Mercury Records", 1], ["Philips", 1], ["Philips Classics Records", 1], ["RCA", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \"Record_Company\", COUNT(DISTINCT \"Orchestra_ID\") AS \"Number_of_Orchestras\"\nFROM \"orchestra\"\nGROUP BY \"Record_Company\"\nORDER BY \"Number_of_Orchestras\" DESC;", "match": {"match": false, "result": [["Decca Records", 2], ["RCA", 1], ["Philips Classics Records", 1], ["Philips", 1], ["Mercury Records", 1], ["Kultur", 1], ["Koch Records / Naxos Records", 1], ["EMI", 1], ["Deutsche Grammophon", 1], ["Delos Records", 1], ["Columbia Masterworks", 1]], "gt": [["Columbia Masterworks", 1], ["Decca Records", 2], ["Delos Records", 1], ["Deutsche Grammophon", 1], ["EMI", 1], ["Koch Records / Naxos Records", 1], ["Kultur", 1], ["Mercury Records", 1], ["Philips", 1], ["Philips Classics Records", 1], ["RCA", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT orchestra.Major_Record_Format, COUNT(*) as Format_Count\nFROM orchestra\nGROUP BY orchestra.Major_Record_Format\nORDER BY Format_Count ASC;", "match": {"match": false, "result": [["CD / LP", 1], ["DVD", 1], ["CD", 10]], "gt": [["CD / LP"], ["DVD"], ["CD"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT \"Major_Record_Format\", COUNT(*) AS Frequency\nFROM \"orchestra\"\nGROUP BY \"Major_Record_Format\"\nORDER BY Frequency DESC;\n```", "match": {"match": false, "result": [["CD", 10], ["DVD", 1], ["CD / LP", 1]], "gt": [["CD / LP"], ["DVD"], ["CD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) as Orchestra_Count\nFROM orchestra\nGROUP BY Record_Company\nORDER BY Orchestra_Count DESC\nLIMIT 1;", "match": {"match": false, "result": [["Decca Records", 2]], "gt": [["Decca Records"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS Orchestra_Count\nFROM orchestra\nGROUP BY Record_Company\nORDER BY Orchestra_Count DESC\nLIMIT 1;", "match": {"match": false, "result": [["Decca Records", 2]], "gt": [["Decca Records"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT o.Orchestra\nFROM orchestra o\nLEFT JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID\nWHERE p.Performance_ID IS NULL;\n```", "match": {"match": true, "result": [["San Francisco Symphony Orchestra"]]}}
{"result": "SELECT o.Orchestra\nFROM orchestra o\nLEFT JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID\nWHERE p.Performance_ID IS NULL;", "match": {"match": true, "result": [["San Francisco Symphony Orchestra"]]}}
{"result": "```sql\nSELECT DISTINCT o1.Record_Company\nFROM orchestra o1\nJOIN orchestra o2 ON o1.Record_Company = o2.Record_Company\nWHERE o1.Year_of_Founded < 2003\nAND o2.Year_of_Founded > 2003\nAND o1.Record_Company IS NOT NULL;\n```", "match": {"match": true, "result": [["Decca Records"]]}}
{"result": "SELECT DISTINCT o1.Record_Company\nFROM orchestra o1\nJOIN orchestra o2 ON o1.Record_Company = o2.Record_Company\nWHERE o1.Year_of_Founded < 2003\n  AND o2.Year_of_Founded > 2003;", "match": {"match": true, "result": [["Decca Records"]]}}
{"result": "SELECT COUNT(DISTINCT Orchestra_ID) AS NumberOfOrchestras\nFROM orchestra\nWHERE Major_Record_Format IN ('CD', 'DVD');", "match": {"match": true, "result": [[11]]}}
{"result": "SELECT COUNT(*)\nFROM orchestra\nWHERE Major_Record_Format IN ('CD', 'DVD');", "match": {"match": true, "result": [[11]]}}
{"result": "SELECT DISTINCT o.Year_of_Founded\nFROM orchestra o\nJOIN performance p ON o.Orchestra_ID = p.Orchestra_ID\nGROUP BY o.Orchestra_ID\nHAVING COUNT(DISTINCT p.Performance_ID) > 1;", "match": {"match": true, "result": []}}
{"result": "SELECT DISTINCT o.Year_of_Founded\nFROM orchestra o\nJOIN performance p ON o.Orchestra_ID = p.Orchestra_ID\nGROUP BY o.Orchestra_ID\nHAVING COUNT(DISTINCT p.Performance_ID) > 1;", "match": {"match": true, "result": []}}
{"result": "SELECT COUNT(*) FROM Highschooler;", "match": {"match": true, "result": [[16]]}}
{"result": "SELECT COUNT(*) FROM Highschooler;", "match": {"match": true, "result": [[16]]}}
{"result": "SELECT name, grade\nFROM Highschooler;", "match": {"match": true, "result": [["Jordan", 9], ["Gabriel", 9], ["Tiffany", 9], ["Cassandra", 9], ["Haley", 10], ["Andrew", 10], ["Kris", 10], ["Brittany", 10], ["Alexis", 11], ["Austin", 11], ["Gabriel", 11], ["Jessica", 11], ["Jordan", 12], ["John", 12], ["Kyle", 12], ["Logan", 12]]}}
{"result": "SELECT name, grade\nFROM Highschooler;", "match": {"match": true, "result": [["Jordan", 9], ["Gabriel", 9], ["Tiffany", 9], ["Cassandra", 9], ["Haley", 10], ["Andrew", 10], ["Kris", 10], ["Brittany", 10], ["Alexis", 11], ["Austin", 11], ["Gabriel", 11], ["Jessica", 11], ["Jordan", 12], ["John", 12], ["Kyle", 12], ["Logan", 12]]}}
{"result": "SELECT grade\nFROM Highschooler;", "match": {"match": true, "result": [[9], [9], [9], [9], [10], [10], [10], [10], [11], [11], [11], [11], [12], [12], [12], [12]]}}
{"result": "SELECT name, grade\nFROM Highschooler;", "match": {"match": false, "result": [["Jordan", 9], ["Gabriel", 9], ["Tiffany", 9], ["Cassandra", 9], ["Haley", 10], ["Andrew", 10], ["Kris", 10], ["Brittany", 10], ["Alexis", 11], ["Austin", 11], ["Gabriel", 11], ["Jessica", 11], ["Jordan", 12], ["John", 12], ["Kyle", 12], ["Logan", 12]], "gt": [[9], [9], [9], [9], [10], [10], [10], [10], [11], [11], [11], [11], [12], [12], [12], [12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT grade\nFROM Highschooler\nWHERE name = 'Kyle';", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT grade\nFROM Highschooler\nWHERE name = 'Kyle';", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT name\nFROM Highschooler\nWHERE grade = 10;", "match": {"match": true, "result": [["Haley"], ["Andrew"], ["Kris"], ["Brittany"]]}}
{"result": "SELECT name\nFROM Highschooler\nWHERE grade = 10;", "match": {"match": true, "result": [["Haley"], ["Andrew"], ["Kris"], ["Brittany"]]}}
{"result": "SELECT ID\nFROM Highschooler\nWHERE name = 'Kyle';", "match": {"match": true, "result": [[1934]]}}
{"result": "SELECT ID\nFROM Highschooler\nWHERE name = 'Kyle';", "match": {"match": true, "result": [[1934]]}}
{"result": "SELECT COUNT(*) \nFROM Highschooler \nWHERE grade = 9 OR grade = 10;", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT COUNT(*)\nFROM Highschooler\nWHERE grade IN (9, 10);", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT grade, COUNT(*) as number_of_students\nFROM Highschooler\nGROUP BY grade;", "match": {"match": true, "result": [[9, 4], [10, 4], [11, 4], [12, 4]]}}
{"result": "SELECT grade, COUNT(*) AS student_count\nFROM Highschooler\nGROUP BY grade\nORDER BY grade;", "match": {"match": true, "result": [[9, 4], [10, 4], [11, 4], [12, 4]]}}
{"result": "```sql\nSELECT grade, COUNT(*) AS student_count\nFROM Highschooler\nGROUP BY grade\nORDER BY student_count DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [[12, 4]], "gt": [[12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT grade\nFROM Highschooler\nGROUP BY grade\nORDER BY COUNT(*) DESC\nLIMIT 1;", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT grade\nFROM Highschooler\nGROUP BY grade\nHAVING COUNT(*) >= 4;", "match": {"match": true, "result": [[9], [10], [11], [12]]}}
{"result": "SELECT grade\nFROM Highschooler\nGROUP BY grade\nHAVING COUNT(*) >= 4;", "match": {"match": true, "result": [[9], [10], [11], [12]]}}
{"result": "SELECT ID, COUNT(friend_id) as num_friends\nFROM Highschooler\nLEFT JOIN Friend ON Highschooler.ID = Friend.student_id\nGROUP BY ID\nORDER BY ID", "match": {"match": false, "result": [[1025, 0], [1101, 1], [1247, 2], [1304, 1], [1316, 1], [1381, 1], [1468, 2], [1501, 1], [1510, 2], [1641, 0], [1661, 1], [1689, 2], [1709, 1], [1782, 3], [1911, 1], [1934, 1]], "gt": [[1101, 1], [1247, 2], [1304, 1], [1316, 1], [1381, 1], [1468, 2], [1501, 1], [1510, 2], [1661, 1], [1689, 2], [1709, 1], [1782, 3], [1911, 1], [1934, 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    H.ID,\n    H.name,\n    COUNT(F.friend_id) AS friend_count\nFROM \n    Highschooler H\nLEFT JOIN \n    Friend F ON H.ID = F.student_id\nGROUP BY \n    H.ID, H.name\nORDER BY \n    H.ID;", "match": {"match": false, "result": [[1025, "John", 0], [1101, "Haley", 1], [1247, "Alexis", 2], [1304, "Jordan", 1], [1316, "Austin", 1], [1381, "Tiffany", 1], [1468, "Kris", 2], [1501, "Jessica", 1], [1510, "Jordan", 2], [1641, "Brittany", 0], [1661, "Logan", 1], [1689, "Gabriel", 2], [1709, "Cassandra", 1], [1782, "Andrew", 3], [1911, "Gabriel", 1], [1934, "Kyle", 1]], "gt": [[1101, 1], [1247, 2], [1304, 1], [1316, 1], [1381, 1], [1468, 2], [1501, 1], [1510, 2], [1661, 1], [1689, 2], [1709, 1], [1782, 3], [1911, 1], [1934, 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT H.name, COUNT(F.friend_id) AS num_friends\nFROM Highschooler H\nLEFT JOIN Friend F ON H.ID = F.student_id\nGROUP BY H.ID, H.name\nORDER BY H.name;", "match": {"match": false, "result": [["Alexis", 2], ["Andrew", 3], ["Austin", 1], ["Brittany", 0], ["Cassandra", 1], ["Gabriel", 2], ["Gabriel", 1], ["Haley", 1], ["Jessica", 1], ["John", 0], ["Jordan", 1], ["Jordan", 2], ["Kris", 2], ["Kyle", 1], ["Logan", 1], ["Tiffany", 1]], "gt": [["Haley", 1], ["Alexis", 2], ["Jordan", 1], ["Austin", 1], ["Tiffany", 1], ["Kris", 2], ["Jessica", 1], ["Jordan", 2], ["Logan", 1], ["Gabriel", 2], ["Cassandra", 1], ["Andrew", 3], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT h.name, COUNT(f.friend_id) AS friend_count\nFROM Highschooler h\nLEFT JOIN Friend f ON h.ID = f.student_id\nGROUP BY h.ID, h.name\nORDER BY h.name;", "match": {"match": false, "result": [["Alexis", 2], ["Andrew", 3], ["Austin", 1], ["Brittany", 0], ["Cassandra", 1], ["Gabriel", 2], ["Gabriel", 1], ["Haley", 1], ["Jessica", 1], ["John", 0], ["Jordan", 1], ["Jordan", 2], ["Kris", 2], ["Kyle", 1], ["Logan", 1], ["Tiffany", 1]], "gt": [["Haley", 1], ["Alexis", 2], ["Jordan", 1], ["Austin", 1], ["Tiffany", 1], ["Kris", 2], ["Jessica", 1], ["Jordan", 2], ["Logan", 1], ["Gabriel", 2], ["Cassandra", 1], ["Andrew", 3], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name\nFROM Highschooler\nWHERE ID = (\n    SELECT student_id\n    FROM Friend\n    GROUP BY student_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n);", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "```sql\nSELECT name\nFROM Highschooler\nWHERE ID = (\n    SELECT student_id\n    FROM Friend\n    GROUP BY student_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n);\n```", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "SELECT name\nFROM Highschooler\nJOIN Friend ON Highschooler.ID = Friend.student_id\nGROUP BY Highschooler.ID, Highschooler.name\nHAVING COUNT(DISTINCT Friend.friend_id) >= 3;", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "SELECT name\nFROM Highschooler\nWHERE ID IN (\n    SELECT student_id\n    FROM Friend\n    GROUP BY student_id\n    HAVING COUNT(*) >= 3\n);", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "SELECT name\nFROM Highschooler\nWHERE ID IN (\n    SELECT friend_id\n    FROM Friend\n    WHERE student_id = (\n        SELECT ID\n        FROM Highschooler\n        WHERE name = 'Kyle'\n    )\n);", "match": {"match": true, "result": [["Jordan"]]}}
{"result": "SELECT DISTINCT H2.name\nFROM Highschooler H1\nJOIN Friend F ON H1.ID = F.student_id\nJOIN Highschooler H2 ON F.friend_id = H2.ID\nWHERE H1.name = 'Kyle';", "match": {"match": true, "result": [["Jordan"]]}}
{"result": "SELECT COUNT(*) \nFROM Friend \nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(*) AS kyles_friends\nFROM Friend\nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT ID\nFROM Highschooler\nWHERE ID NOT IN (\n    SELECT student_id FROM Friend\n    UNION\n    SELECT friend_id FROM Friend\n);", "match": {"match": false, "result": [], "gt": [[1025], [1641]], "error": "Query result does not match ground truth."}}
{"result": "SELECT ID\nFROM Highschooler\nWHERE ID NOT IN (\n    SELECT student_id FROM Friend\n    UNION\n    SELECT friend_id FROM Friend\n);", "match": {"match": false, "result": [], "gt": [[1025], [1641]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name\nFROM Highschooler\nWHERE ID NOT IN (\n    SELECT student_id\n    FROM Friend\n    UNION\n    SELECT friend_id\n    FROM Friend\n);", "match": {"match": false, "result": [], "gt": [["Brittany"], ["John"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT name\nFROM Highschooler\nWHERE ID NOT IN (\n    SELECT student_id\n    FROM Friend\n    UNION\n    SELECT friend_id\n    FROM Friend\n);\n```", "match": {"match": false, "result": [], "gt": [["Brittany"], ["John"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT h.ID\nFROM Highschooler h\nJOIN Friend f ON h.ID = f.student_id\nJOIN Likes l ON h.ID = l.liked_id;", "match": {"match": true, "result": [[1101], [1247], [1304], [1468], [1501], [1689], [1709], [1934]]}}
{"result": "SELECT DISTINCT h.ID\nFROM Highschooler h\nJOIN Friend f ON h.ID = f.student_id\nJOIN Likes l ON h.ID = l.student_id;", "match": {"match": false, "result": [[1247], [1316], [1501], [1689], [1709], [1782], [1911], [1934]], "gt": [[1101], [1247], [1304], [1468], [1501], [1689], [1709], [1934]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT name\nFROM Highschooler\nWHERE ID IN (\n    SELECT student_id\n    FROM Friend\n    UNION\n    SELECT liked_id\n    FROM Likes\n)\nAND ID IN (\n    SELECT liked_id\n    FROM Likes\n    UNION\n    SELECT student_id\n    FROM Friend\n);", "match": {"match": false, "result": [["Haley"], ["Alexis"], ["Jordan"], ["Austin"], ["Tiffany"], ["Kris"], ["Jessica"], ["Logan"], ["Gabriel"], ["Cassandra"], ["Andrew"], ["Kyle"]], "gt": [["Alexis"], ["Cassandra"], ["Gabriel"], ["Haley"], ["Jessica"], ["Jordan"], ["Kris"], ["Kyle"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT h1.name\nFROM Highschooler h1\nJOIN Friend f ON h1.ID = f.student_id\nJOIN Likes l ON h1.ID = l.student_id;", "match": {"match": false, "result": [["Gabriel"], ["Cassandra"], ["Andrew"], ["Alexis"], ["Jessica"], ["Austin"], ["Kyle"]], "gt": [["Alexis"], ["Cassandra"], ["Gabriel"], ["Haley"], ["Jessica"], ["Jordan"], ["Kris"], ["Kyle"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT student_id, COUNT(liked_id) AS like_count\nFROM Likes\nGROUP BY student_id;", "match": {"match": true, "result": [[1025, 1], [1247, 1], [1316, 1], [1501, 1], [1641, 1], [1689, 1], [1709, 1], [1782, 1], [1911, 1], [1934, 1]]}}
{"result": "SELECT student_id, COUNT(*) AS like_count\nFROM Likes\nGROUP BY student_id;", "match": {"match": true, "result": [[1025, 1], [1247, 1], [1316, 1], [1501, 1], [1641, 1], [1689, 1], [1709, 1], [1782, 1], [1911, 1], [1934, 1]]}}
{"result": "SELECT H.name, COUNT(L.liked_id) AS likes_count\nFROM Highschooler H\nJOIN Likes L ON H.ID = L.liked_id\nGROUP BY H.name;", "match": {"match": false, "result": [["Alexis", 1], ["Cassandra", 2], ["Gabriel", 1], ["Haley", 1], ["Jessica", 1], ["Jordan", 1], ["Kris", 2], ["Kyle", 1]], "gt": [["John", 1], ["Alexis", 1], ["Austin", 1], ["Jessica", 1], ["Brittany", 1], ["Gabriel", 1], ["Cassandra", 1], ["Andrew", 1], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT H.name, COUNT(L.liked_id) AS likes_count\nFROM Highschooler H\nJOIN Likes L ON H.ID = L.liked_id\nGROUP BY H.name;\n```", "match": {"match": false, "result": [["Alexis", 1], ["Cassandra", 2], ["Gabriel", 1], ["Haley", 1], ["Jessica", 1], ["Jordan", 1], ["Kris", 2], ["Kyle", 1]], "gt": [["John", 1], ["Alexis", 1], ["Austin", 1], ["Jessica", 1], ["Brittany", 1], ["Gabriel", 1], ["Cassandra", 1], ["Andrew", 1], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name\nFROM Highschooler\nWHERE ID = (\n    SELECT student_id\n    FROM Likes\n    GROUP BY student_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n);", "match": {"match": true, "result": [["John"]]}}
{"result": "SELECT H.name\nFROM Highschooler H\nJOIN (\n    SELECT student_id, COUNT(*) as like_count\n    FROM Likes\n    GROUP BY student_id\n    ORDER BY like_count DESC\n    LIMIT 1\n) L ON H.ID = L.student_id;", "match": {"match": true, "result": [["John"]]}}
{"result": "SELECT h.name\nFROM Highschooler h\nJOIN (\n    SELECT student_id\n    FROM Likes\n    GROUP BY student_id\n    HAVING COUNT(*) >= 2\n) l ON h.ID = l.student_id;", "match": {"match": true, "result": []}}
{"result": "SELECT H.name\nFROM Highschooler H\nJOIN Likes L ON H.ID = L.student_id\nGROUP BY H.ID, H.name\nHAVING COUNT(DISTINCT L.liked_id) >= 2;", "match": {"match": true, "result": []}}
{"result": "SELECT h.name\nFROM Highschooler h\nJOIN (\n    SELECT student_id\n    FROM Friend\n    GROUP BY student_id\n    HAVING COUNT(DISTINCT friend_id) >= 2\n) f ON h.ID = f.student_id\nWHERE h.grade > 5;", "match": {"match": true, "result": [["Alexis"], ["Kris"], ["Jordan"], ["Gabriel"], ["Andrew"]]}}
{"result": "SELECT name\nFROM Highschooler\nWHERE grade > 5 AND ID IN (\n    SELECT student_id\n    FROM Friend\n    GROUP BY student_id\n    HAVING COUNT(*) >= 2\n);", "match": {"match": true, "result": [["Alexis"], ["Kris"], ["Jordan"], ["Gabriel"], ["Andrew"]]}}
{"result": "SQL Query:\nSELECT COUNT(*) AS kyles_likes\nFROM Likes\nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');", "match": {"match": false, "error": "Query execution failed with error: near \"SQL\": syntax error"}}
{"result": "SELECT COUNT(*)\nFROM Likes\nWHERE liked_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT AVG(grade)\nFROM Highschooler\nWHERE ID IN (SELECT student_id FROM Friend)\n   OR ID IN (SELECT friend_id FROM Friend);", "match": {"match": false, "result": [[10.5]], "gt": [[10.428571428571429]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT AVG(grade)\nFROM Highschooler\nWHERE ID IN (\n    SELECT DISTINCT student_id\n    FROM Friend\n);\n```", "match": {"match": true, "result": [[10.428571428571429]]}}
{"result": "```sql\nSELECT MIN(grade)\nFROM Highschooler\nWHERE ID NOT IN (\n    SELECT student_id FROM Friend\n    UNION\n    SELECT friend_id FROM Friend\n);\n```", "match": {"match": false, "result": [[null]], "gt": [[10]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MIN(grade)\nFROM Highschooler\nWHERE ID NOT IN (\n    SELECT DISTINCT student_id\n    FROM Friend\n    UNION\n    SELECT DISTINCT friend_id\n    FROM Friend\n);", "match": {"match": false, "result": [[null]], "gt": [[10]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT o.state\nFROM Owners o\nJOIN Professionals p ON o.state = p.state\nORDER BY o.state;", "match": {"match": true, "result": [["Indiana"], ["Mississippi"], ["Wisconsin"]]}}
{"result": "```sql\nSELECT DISTINCT o.state\nFROM Owners o\nJOIN Professionals p ON o.state = p.state;\n```", "match": {"match": false, "result": [["Wisconsin"], ["Indiana"], ["Mississippi"]], "gt": [["Indiana"], ["Mississippi"], ["Wisconsin"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(\n    CASE \n        WHEN d.age LIKE '%year%' THEN CAST(SUBSTRING_INDEX(d.age, ' ', 1) AS UNSIGNED)\n        WHEN d.age LIKE '%month%' THEN CAST(SUBSTRING_INDEX(d.age, ' ', 1) AS UNSIGNED) / 12.0\n        ELSE 0\n    END\n) AS average_age\nFROM Dogs d\nWHERE d.dog_id IN (SELECT DISTINCT dog_id FROM Treatments);", "match": {"match": false, "error": "Query execution failed with error: no such function: SUBSTRING_INDEX"}}
{"result": "SELECT AVG(\n    CASE \n        WHEN age LIKE '%years%' THEN CAST(SUBSTRING_INDEX(age, ' ', 1) AS DECIMAL(10,2))\n        WHEN age LIKE '%months%' THEN CAST(SUBSTRING_INDEX(age, ' ', 1) AS DECIMAL(10,2)) / 12\n        WHEN age LIKE '%weeks%' THEN CAST(SUBSTRING_INDEX(age, ' ', 1) AS DECIMAL(10,2)) / 52\n        ELSE 0\n    END\n) AS average_age\nFROM Dogs\nWHERE dog_id IN (SELECT DISTINCT dog_id FROM Treatments);", "match": {"match": false, "error": "Query execution failed with error: no such function: SUBSTRING_INDEX"}}
{"result": "SELECT DISTINCT p.professional_id, p.last_name, p.cell_number\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nWHERE p.state = 'Indiana'\nUNION\nSELECT DISTINCT p.professional_id, p.last_name, p.cell_number\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nGROUP BY p.professional_id, p.last_name, p.cell_number\nHAVING COUNT(t.treatment_id) > 2\nORDER BY p.professional_id;", "match": {"match": false, "result": [[8, "Hyatt", "328.842.3792"], [9, "Kshlerin", "962-983-8109x3509"]], "gt": [[1, "Braun", "(275)939-2435x80863"], [8, "Hyatt", "328.842.3792"], [9, "Kshlerin", "962-983-8109x3509"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT \n    p.professional_id, \n    p.last_name, \n    p.cell_number\nFROM \n    Professionals p\nJOIN \n    Treatments t ON p.professional_id = t.professional_id\nWHERE \n    p.state = 'Indiana'\nGROUP BY \n    p.professional_id, p.last_name, p.cell_number\nHAVING \n    COUNT(t.treatment_id) > 2\nUNION\nSELECT \n    p.professional_id, \n    p.last_name, \n    p.cell_number\nFROM \n    Professionals p\nWHERE \n    p.state = 'Indiana';\n```", "match": {"match": false, "result": [[1, "Braun", "(275)939-2435x80863"], [8, "Hyatt", "328.842.3792"]], "gt": [[1, "Braun", "(275)939-2435x80863"], [8, "Hyatt", "328.842.3792"], [9, "Kshlerin", "962-983-8109x3509"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT d.name\nFROM Dogs d\nWHERE d.dog_id NOT IN (\n    SELECT t.dog_id\n    FROM Treatments t\n    GROUP BY t.dog_id\n    HAVING SUM(t.cost_of_treatment) > 1000\n);", "match": {"match": true, "result": [["Kacey"], ["Hipolito"], ["Mavis"], ["Houston"], ["Jeffrey"], ["Merritt"], ["Narciso"], ["George"], ["Bessie"], ["Betty"], ["Holden"], ["Jesus"]]}}
{"result": "SELECT d.name\nFROM Dogs d\nJOIN Owners o ON d.owner_id = o.owner_id\nLEFT JOIN Treatments t ON d.dog_id = t.dog_id\nGROUP BY d.dog_id\nHAVING COALESCE(SUM(t.cost_of_treatment), 0) <= 1000;", "match": {"match": true, "result": [["Kacey"], ["Hipolito"], ["Mavis"], ["Houston"], ["Jeffrey"], ["Merritt"], ["Narciso"], ["George"], ["Bessie"], ["Betty"], ["Holden"], ["Jesus"]]}}
{"result": "SELECT DISTINCT first_name\nFROM (\n    SELECT first_name FROM Owners\n    UNION ALL\n    SELECT first_name FROM Professionals\n) AS combined_names\nWHERE first_name NOT IN (\n    SELECT name FROM Dogs\n    WHERE name IS NOT NULL\n);", "match": {"match": false, "result": [["Nora"], ["Melisa"], ["Jaclyn"], ["Tre"], ["Johann"], ["Kade"], ["Emelie"], ["Rolando"], ["Adelle"], ["Lorenz"], ["Gay"], ["Orlando"], ["Cindy"], ["Rachelle"], ["Heather"], ["Taryn"], ["Jayson"], ["Olaf"], ["Vernice"], ["Danny"], ["Ruben"], ["Velva"], ["Karley"], ["Monte"], ["Domenica"], ["Brady"], ["Winfield"], ["Ericka"], ["Sigurd"], ["Lesly"]], "gt": [["Adelle"], ["Brady"], ["Cindy"], ["Danny"], ["Domenica"], ["Emelie"], ["Ericka"], ["Gay"], ["Heather"], ["Jaclyn"], ["Jayson"], ["Johann"], ["Kade"], ["Karley"], ["Lesly"], ["Lorenz"], ["Melisa"], ["Monte"], ["Nora"], ["Olaf"], ["Orlando"], ["Rachelle"], ["Rolando"], ["Ruben"], ["Sigurd"], ["Taryn"], ["Tre"], ["Velva"], ["Vernice"], ["Winfield"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT first_name\nFROM Owners\nWHERE first_name NOT IN (SELECT name FROM Dogs)\nUNION\nSELECT DISTINCT first_name\nFROM Professionals\nWHERE first_name NOT IN (SELECT name FROM Dogs);", "match": {"match": true, "result": [["Adelle"], ["Brady"], ["Cindy"], ["Danny"], ["Domenica"], ["Emelie"], ["Ericka"], ["Gay"], ["Heather"], ["Jaclyn"], ["Jayson"], ["Johann"], ["Kade"], ["Karley"], ["Lesly"], ["Lorenz"], ["Melisa"], ["Monte"], ["Nora"], ["Olaf"], ["Orlando"], ["Rachelle"], ["Rolando"], ["Ruben"], ["Sigurd"], ["Taryn"], ["Tre"], ["Velva"], ["Vernice"], ["Winfield"]]}}
{"result": "SELECT p.professional_id, p.role_code, p.email_address\nFROM Professionals p\nLEFT JOIN Treatments t ON p.professional_id = t.professional_id\nWHERE t.professional_id IS NULL;", "match": {"match": true, "result": [[1, "Employee", "deanna.schuster@example.com"], [2, "Employee", "lucile.shanahan@example.org"], [3, "Employee", "uboehm@example.org"], [11, "Employee", "west.eula@example.net"], [12, "Veterenarian", "marquardt.furman@example.org"], [13, "Veterenarian", "delphine29@example.com"], [15, "Employee", "jeichmann@example.com"]]}}
{"result": "SELECT p.professional_id, p.role_code, p.email_address\nFROM Professionals p\nLEFT JOIN Treatments t ON p.professional_id = t.professional_id\nWHERE t.treatment_id IS NULL", "match": {"match": true, "result": [[1, "Employee", "deanna.schuster@example.com"], [2, "Employee", "lucile.shanahan@example.org"], [3, "Employee", "uboehm@example.org"], [11, "Employee", "west.eula@example.net"], [12, "Veterenarian", "marquardt.furman@example.org"], [13, "Veterenarian", "delphine29@example.com"], [15, "Employee", "jeichmann@example.com"]]}}
{"result": "SELECT o.owner_id, o.first_name, o.last_name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nGROUP BY o.owner_id\nORDER BY COUNT(d.dog_id) DESC\nLIMIT 1;", "match": {"match": true, "result": [[14, "Rachelle", "Funk"]]}}
{"result": "SELECT o.owner_id, o.first_name, o.last_name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nGROUP BY o.owner_id, o.first_name, o.last_name\nHAVING COUNT(d.dog_id) = (\n    SELECT MAX(dog_count)\n    FROM (\n        SELECT COUNT(dog_id) AS dog_count\n        FROM Dogs\n        GROUP BY owner_id\n    ) AS subquery\n);", "match": {"match": true, "result": [[14, "Rachelle", "Funk"]]}}
{"result": "SELECT p.professional_id, p.role_code, p.first_name\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nGROUP BY p.professional_id, p.role_code, p.first_name\nHAVING COUNT(*) >= 2;", "match": {"match": true, "result": [[4, "Veterenarian", "Vernice"], [6, "Veterenarian", "Ruben"], [8, "Employee", "Karley"], [9, "Veterenarian", "Monte"], [10, "Employee", "Domenica"], [14, "Employee", "Sigurd"]]}}
{"result": "SELECT p.professional_id, p.role_code, p.first_name\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nGROUP BY p.professional_id, p.role_code, p.first_name\nHAVING COUNT(t.treatment_id) >= 2", "match": {"match": true, "result": [[4, "Veterenarian", "Vernice"], [6, "Veterenarian", "Ruben"], [8, "Employee", "Karley"], [9, "Veterenarian", "Monte"], [10, "Employee", "Domenica"], [14, "Employee", "Sigurd"]]}}
{"result": "SELECT b.breed_name, COUNT(d.dog_id) as dog_count\nFROM Breeds b\nJOIN Dogs d ON b.breed_code = d.breed_code\nGROUP BY b.breed_name\nORDER BY dog_count DESC\nLIMIT 1;", "match": {"match": false, "result": [["Bulldog", 7]], "gt": [["Bulldog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT b.breed_name\nFROM Breeds b\nJOIN Dogs d ON b.breed_code = d.breed_code\nGROUP BY b.breed_name\nORDER BY COUNT(d.dog_id) DESC\nLIMIT 1;", "match": {"match": true, "result": [["Bulldog"]]}}
{"result": "SELECT o.owner_id, o.last_name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nJOIN Treatments t ON d.dog_id = t.dog_id\nGROUP BY o.owner_id, o.last_name\nORDER BY COUNT(t.treatment_id) DESC\nLIMIT 1;", "match": {"match": true, "result": [[14, "Funk"]]}}
{"result": "SELECT o.owner_id, o.last_name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nJOIN Treatments t ON d.dog_id = t.dog_id\nGROUP BY o.owner_id, o.last_name\nHAVING SUM(t.cost_of_treatment) = (\n    SELECT MAX(total_cost)\n    FROM (\n        SELECT SUM(cost_of_treatment) as total_cost\n        FROM Treatments\n        GROUP BY dog_id\n    ) as dog_costs\n)", "match": {"match": false, "result": [[10, "Nicolas"]], "gt": [[14, "Funk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT t.treatment_type_description\nFROM Treatment_Types t\nJOIN Treatments te ON t.treatment_type_code = te.treatment_type_code\nGROUP BY t.treatment_type_description\nORDER BY SUM(te.cost_of_treatment) ASC\nLIMIT 1;", "match": {"match": true, "result": [["Take for a Walk"]]}}
{"result": "SELECT treatment_type_description\nFROM Treatment_Types tt\nJOIN Treatments t ON tt.treatment_type_code = t.treatment_type_code\nGROUP BY tt.treatment_type_code, tt.treatment_type_description\nORDER BY SUM(t.cost_of_treatment) ASC\nLIMIT 1;", "match": {"match": true, "result": [["Take for a Walk"]]}}
{"result": "SELECT o.owner_id, o.zip_code\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nJOIN Treatments t ON d.dog_id = t.dog_id\nGROUP BY o.owner_id, o.zip_code\nORDER BY SUM(t.cost_of_treatment) DESC\nLIMIT 1;", "match": {"match": true, "result": [[3, "02647"]]}}
{"result": "```sql\nSELECT\n    o.owner_id,\n    o.zip_code\nFROM\n    Owners o\nJOIN\n    Dogs d ON o.owner_id = d.owner_id\nJOIN\n    Treatments t ON d.dog_id = t.dog_id\nGROUP BY\n    o.owner_id, o.zip_code\nORDER BY\n    SUM(t.cost_of_treatment) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [[3, "02647"]]}}
{"result": "SELECT DISTINCT \n    professional_id, \n    cell_number\nFROM \n    Professionals\nWHERE \n    professional_id IN (\n        SELECT \n            professional_id\n        FROM \n            Treatments\n        GROUP BY \n            professional_id\n        HAVING \n            COUNT(DISTINCT treatment_type_code) >= 2\n    )", "match": {"match": false, "result": [[6, "139-321-7313"], [9, "962-983-8109x3509"], [10, "461-801-2600"], [14, "1-185-137-1945x409"]], "gt": [[4, "00230569697"], [6, "139-321-7313"], [8, "328.842.3792"], [9, "962-983-8109x3509"], [10, "461-801-2600"], [14, "1-185-137-1945x409"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT p.professional_id, p.cell_number\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nGROUP BY p.professional_id, p.cell_number\nHAVING COUNT(DISTINCT t.treatment_type_code) >= 2;", "match": {"match": false, "result": [[6, "139-321-7313"], [9, "962-983-8109x3509"], [10, "461-801-2600"], [14, "1-185-137-1945x409"]], "gt": [[4, "00230569697"], [6, "139-321-7313"], [8, "328.842.3792"], [9, "962-983-8109x3509"], [10, "461-801-2600"], [14, "1-185-137-1945x409"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT p.first_name, p.last_name\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nWHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);\n```", "match": {"match": false, "result": [["Domenica", "Jacobs"], ["Vernice", "Tillman"], ["Karley", "Hyatt"], ["Vernice", "Tillman"], ["Ruben", "O'Reilly"], ["Domenica", "Jacobs"], ["Monte", "Kshlerin"], ["Monte", "Kshlerin"]], "gt": [["Taryn", "Braun"], ["Jayson", "Ullrich"], ["Olaf", "Watsica"], ["Vernice", "Tillman"], ["Danny", "Considine"], ["Ruben", "O'Reilly"], ["Velva", "Hayes"], ["Karley", "Hyatt"], ["Monte", "Kshlerin"], ["Domenica", "Jacobs"], ["Brady", "Pouros"], ["Winfield", "Christiansen"], ["Ericka", "Murazik"], ["Sigurd", "Frami"], ["Lesly", "Walter"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT p.first_name, p.last_name\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nWHERE t.cost_of_treatment < (\n    SELECT AVG(cost_of_treatment)\n    FROM Treatments\n);", "match": {"match": false, "result": [["Domenica", "Jacobs"], ["Vernice", "Tillman"], ["Karley", "Hyatt"], ["Ruben", "O'Reilly"], ["Monte", "Kshlerin"]], "gt": [["Taryn", "Braun"], ["Jayson", "Ullrich"], ["Olaf", "Watsica"], ["Vernice", "Tillman"], ["Danny", "Considine"], ["Ruben", "O'Reilly"], ["Velva", "Hayes"], ["Karley", "Hyatt"], ["Monte", "Kshlerin"], ["Domenica", "Jacobs"], ["Brady", "Pouros"], ["Winfield", "Christiansen"], ["Ericka", "Murazik"], ["Sigurd", "Frami"], ["Lesly", "Walter"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT t.date_of_treatment, p.first_name\nFROM Treatments t\nJOIN Professionals p ON t.professional_id = p.professional_id;", "match": {"match": true, "result": [["2018-03-19 04:39:54", "Monte"], ["2018-03-15 20:25:34", "Domenica"], ["2018-03-08 05:26:23", "Vernice"], ["2018-03-01 04:14:46", "Karley"], ["2018-03-23 13:52:10", "Sigurd"], ["2018-03-11 04:23:15", "Vernice"], ["2018-03-10 11:45:58", "Sigurd"], ["2018-03-24 22:25:58", "Ruben"], ["2018-03-14 19:10:40", "Domenica"], ["2018-02-28 17:09:43", "Velva"], ["2018-03-13 12:22:58", "Danny"], ["2018-03-16 10:27:36", "Monte"], ["2018-02-26 09:08:53", "Karley"], ["2018-03-04 20:33:43", "Monte"], ["2018-03-15 19:10:02", "Ruben"]]}}
{"result": "SELECT t.date_of_treatment, p.first_name\nFROM Treatments t\nJOIN Professionals p ON t.professional_id = p.professional_id;", "match": {"match": true, "result": [["2018-03-19 04:39:54", "Monte"], ["2018-03-15 20:25:34", "Domenica"], ["2018-03-08 05:26:23", "Vernice"], ["2018-03-01 04:14:46", "Karley"], ["2018-03-23 13:52:10", "Sigurd"], ["2018-03-11 04:23:15", "Vernice"], ["2018-03-10 11:45:58", "Sigurd"], ["2018-03-24 22:25:58", "Ruben"], ["2018-03-14 19:10:40", "Domenica"], ["2018-02-28 17:09:43", "Velva"], ["2018-03-13 12:22:58", "Danny"], ["2018-03-16 10:27:36", "Monte"], ["2018-02-26 09:08:53", "Karley"], ["2018-03-04 20:33:43", "Monte"], ["2018-03-15 19:10:02", "Ruben"]]}}
{"result": "SELECT \n    t.cost_of_treatment,\n    tt.treatment_type_description\nFROM \n    Treatments t\nJOIN \n    Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code\nORDER BY \n    tt.treatment_type_description;", "match": {"match": false, "result": [[429, "Physical examination"], [313, "Physical examination"], [852, "Physical examination"], [407, "Physical examination"], [428, "Physical examination"], [567, "Take for a Walk"], [139, "Take for a Walk"], [681, "Take for a Walk"], [349, "Take for a Walk"], [656, "Take for a Walk"], [147, "Vaccination"], [266, "Vaccination"], [668, "Vaccination"], [514, "Vaccination"], [945, "Vaccination"]], "gt": [[567, "Take for a Walk"], [147, "Vaccination"], [429, "Physical examination"], [266, "Vaccination"], [668, "Vaccination"], [313, "Physical examination"], [852, "Physical examination"], [407, "Physical examination"], [139, "Take for a Walk"], [681, "Take for a Walk"], [514, "Vaccination"], [428, "Physical examination"], [945, "Vaccination"], [349, "Take for a Walk"], [656, "Take for a Walk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT t.cost_of_treatment, tt.treatment_type_description\nFROM Treatments t\nJOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;", "match": {"match": true, "result": [[567, "Take for a Walk"], [147, "Vaccination"], [429, "Physical examination"], [266, "Vaccination"], [668, "Vaccination"], [313, "Physical examination"], [852, "Physical examination"], [407, "Physical examination"], [139, "Take for a Walk"], [681, "Take for a Walk"], [514, "Vaccination"], [428, "Physical examination"], [945, "Vaccination"], [349, "Take for a Walk"], [656, "Take for a Walk"]]}}
{"result": "SELECT DISTINCT o.first_name, o.last_name, s.size_description\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nJOIN Sizes s ON d.size_code = s.size_code;", "match": {"match": false, "result": [["Jaclyn", "Stoltenberg", "Large"], ["Gay", "Feil", "Large"], ["Nora", "Haley", "Medium"], ["Rachelle", "Funk", "Large"], ["Emelie", "Mertz", "Medium"], ["Johann", "Fisher", "Medium"], ["Jaclyn", "Stoltenberg", "Medium"], ["Rachelle", "Funk", "Small"], ["Melisa", "DuBuque", "Medium"], ["Kade", "Rippin", "Medium"], ["Cindy", "Schmitt", "Large"], ["Orlando", "Price", "Medium"], ["Rolando", "Prohaska", "Small"], ["Rachelle", "Funk", "Medium"], ["Lorenz", "Nicolas", "Medium"]], "gt": [["Jaclyn", "Stoltenberg", "LGE"], ["Gay", "Feil", "LGE"], ["Nora", "Haley", "MED"], ["Rachelle", "Funk", "LGE"], ["Emelie", "Mertz", "MED"], ["Johann", "Fisher", "MED"], ["Jaclyn", "Stoltenberg", "MED"], ["Rachelle", "Funk", "SML"], ["Melisa", "DuBuque", "MED"], ["Kade", "Rippin", "MED"], ["Cindy", "Schmitt", "LGE"], ["Orlando", "Price", "MED"], ["Rolando", "Prohaska", "SML"], ["Rachelle", "Funk", "MED"], ["Lorenz", "Nicolas", "MED"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT o.first_name, o.last_name, s.size_description\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nJOIN Sizes s ON d.size_code = s.size_code;", "match": {"match": false, "result": [["Jaclyn", "Stoltenberg", "Large"], ["Gay", "Feil", "Large"], ["Nora", "Haley", "Medium"], ["Rachelle", "Funk", "Large"], ["Emelie", "Mertz", "Medium"], ["Johann", "Fisher", "Medium"], ["Jaclyn", "Stoltenberg", "Medium"], ["Rachelle", "Funk", "Small"], ["Melisa", "DuBuque", "Medium"], ["Kade", "Rippin", "Medium"], ["Cindy", "Schmitt", "Large"], ["Orlando", "Price", "Medium"], ["Rolando", "Prohaska", "Small"], ["Rachelle", "Funk", "Medium"], ["Lorenz", "Nicolas", "Medium"]], "gt": [["Jaclyn", "Stoltenberg", "LGE"], ["Gay", "Feil", "LGE"], ["Nora", "Haley", "MED"], ["Rachelle", "Funk", "LGE"], ["Emelie", "Mertz", "MED"], ["Johann", "Fisher", "MED"], ["Jaclyn", "Stoltenberg", "MED"], ["Rachelle", "Funk", "SML"], ["Melisa", "DuBuque", "MED"], ["Kade", "Rippin", "MED"], ["Cindy", "Schmitt", "LGE"], ["Orlando", "Price", "MED"], ["Rolando", "Prohaska", "SML"], ["Rachelle", "Funk", "MED"], ["Lorenz", "Nicolas", "MED"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT o.first_name, d.name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id;", "match": {"match": true, "result": [["Jaclyn", "Kacey"], ["Gay", "Hipolito"], ["Nora", "Mavis"], ["Rachelle", "Houston"], ["Emelie", "Jeffrey"], ["Johann", "Merritt"], ["Jaclyn", "Narciso"], ["Rachelle", "George"], ["Melisa", "Bessie"], ["Kade", "Troy"], ["Cindy", "Betty"], ["Orlando", "Holden"], ["Rolando", "Jesus"], ["Rachelle", "Lyric"], ["Lorenz", "Evangeline"]]}}
{"result": "SELECT o.first_name AS owner_first_name, d.name AS dog_name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id;", "match": {"match": true, "result": [["Jaclyn", "Kacey"], ["Gay", "Hipolito"], ["Nora", "Mavis"], ["Rachelle", "Houston"], ["Emelie", "Jeffrey"], ["Johann", "Merritt"], ["Jaclyn", "Narciso"], ["Rachelle", "George"], ["Melisa", "Bessie"], ["Kade", "Troy"], ["Cindy", "Betty"], ["Orlando", "Holden"], ["Rolando", "Jesus"], ["Rachelle", "Lyric"], ["Lorenz", "Evangeline"]]}}
{"result": "SELECT d.name, t.date_of_treatment\nFROM Dogs d\nJOIN Treatments t ON d.dog_id = t.dog_id\nJOIN Breeds b ON d.breed_code = b.breed_code\nWHERE b.breed_code = (\n    SELECT breed_code\n    FROM Dogs\n    GROUP BY breed_code\n    ORDER BY COUNT(*) ASC\n    LIMIT 1\n)\nORDER BY t.date_of_treatment;", "match": {"match": false, "result": [["Lyric", "2018-03-08 05:26:23"], ["Lyric", "2018-03-14 19:10:40"], ["Kacey", "2018-03-15 19:10:02"], ["Houston", "2018-03-15 20:25:34"], ["Lyric", "2018-03-19 04:39:54"]], "gt": [["Lyric", "2018-03-19 04:39:54"], ["Houston", "2018-03-15 20:25:34"], ["Lyric", "2018-03-08 05:26:23"], ["Lyric", "2018-03-14 19:10:40"], ["Kacey", "2018-03-15 19:10:02"]], "error": "Query result does not match ground truth."}}
{"result": "SQL Query:\nSELECT d.name, t.date_of_treatment\nFROM Dogs d\nJOIN Treatments t ON d.dog_id = t.dog_id\nWHERE d.breed_code = (\n    SELECT breed_code\n    FROM Dogs\n    GROUP BY breed_code\n    ORDER BY COUNT(*) ASC\n    LIMIT 1\n);", "match": {"match": false, "error": "Query execution failed with error: near \"SQL\": syntax error"}}
{"result": "SELECT DISTINCT o.first_name, d.name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nWHERE o.state = 'Virginia';", "match": {"match": true, "result": [["Melisa", "Bessie"]]}}
{"result": "SELECT DISTINCT o.first_name, d.name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nWHERE o.state = 'Virginia'", "match": {"match": true, "result": [["Melisa", "Bessie"]]}}
{"result": "```sql\nSELECT DISTINCT d.date_arrived, d.date_departed\nFROM Dogs d\nJOIN Treatments t ON d.dog_id = t.dog_id\nWHERE d.date_arrived IS NOT NULL OR d.date_departed IS NOT NULL;\n```", "match": {"match": true, "result": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]]}}
{"result": "SELECT DISTINCT d.date_arrived, d.date_departed\nFROM Dogs d\nJOIN Treatments t ON d.dog_id = t.dog_id", "match": {"match": true, "result": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]]}}
{"result": "SELECT o.last_name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nWHERE d.date_of_birth = (\n    SELECT MIN(date_of_birth)\n    FROM Dogs\n);", "match": {"match": false, "result": [["Haley"]], "gt": [["Feil"], ["Fisher"], ["Rippin"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT o.last_name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nWHERE d.date_of_birth = (\n    SELECT MIN(date_of_birth)\n    FROM Dogs\n)", "match": {"match": false, "result": [["Haley"]], "gt": [["Feil"], ["Fisher"], ["Rippin"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT email_address\nFROM Professionals\nWHERE state IN ('Hawaii', 'Wisconsin');\n```", "match": {"match": true, "result": [["uboehm@example.org"], ["mekhi.little@example.org"]]}}
{"result": "```sql\nSELECT email_address\nFROM Professionals\nWHERE state IN ('Hawaii', 'Wisconsin');\n```", "match": {"match": true, "result": [["uboehm@example.org"], ["mekhi.little@example.org"]]}}
{"result": "SELECT \n    date_arrived AS arriving_date,\n    date_departed AS departing_date\nFROM \n    Dogs\nWHERE \n    date_arrived IS NOT NULL\n    OR date_departed IS NOT NULL\nORDER BY \n    date_arrived;", "match": {"match": false, "result": [["2017-04-15 09:25:31", "2018-03-25 13:07:04"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-06-25 10:14:05", "2018-03-25 10:25:46"], ["2017-07-25 15:19:07", "2018-03-25 15:05:16"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"], ["2017-10-16 20:06:21", "2018-03-25 02:47:40"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-10-25 00:55:34", "2018-03-25 04:50:22"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2018-01-17 11:44:16", "2018-03-25 06:46:07"]], "gt": [["2017-09-08 20:10:13", "2018-03-25 06:58:44"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-25 10:14:05", "2018-03-25 10:25:46"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-10-25 00:55:34", "2018-03-25 04:50:22"], ["2017-04-15 09:25:31", "2018-03-25 13:07:04"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-10-16 20:06:21", "2018-03-25 02:47:40"], ["2018-01-17 11:44:16", "2018-03-25 06:46:07"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-07-25 15:19:07", "2018-03-25 15:05:16"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    date_arrived,\n    date_departed\nFROM \n    Dogs;", "match": {"match": true, "result": [["2017-09-08 20:10:13", "2018-03-25 06:58:44"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-25 10:14:05", "2018-03-25 10:25:46"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-10-25 00:55:34", "2018-03-25 04:50:22"], ["2017-04-15 09:25:31", "2018-03-25 13:07:04"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-10-16 20:06:21", "2018-03-25 02:47:40"], ["2018-01-17 11:44:16", "2018-03-25 06:46:07"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-07-25 15:19:07", "2018-03-25 15:05:16"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"]]}}
{"result": "SELECT COUNT(DISTINCT dog_id) AS dogs_treated\nFROM Treatments;", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(DISTINCT dog_id) AS dogs_treated\nFROM Treatments;", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(DISTINCT professional_id) AS num_professionals\nFROM Treatments;", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT COUNT(DISTINCT professional_id) AS num_professionals\nFROM Treatments;", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT \n    p.role_code,\n    p.street,\n    p.city,\n    p.state\nFROM \n    Professionals p\nWHERE \n    p.city LIKE '%West%';", "match": {"match": true, "result": [["Employee", "6915 Oberbrunner Point Suite 491\nGleasonville, LA ", "West Heidi", "Indiana"]]}}
{"result": "SELECT role_code, street, city, state\nFROM Professionals\nWHERE city LIKE '%West%';", "match": {"match": true, "result": [["Employee", "6915 Oberbrunner Point Suite 491\nGleasonville, LA ", "West Heidi", "Indiana"]]}}
{"result": "SELECT first_name, last_name, email_address\nFROM Owners\nWHERE state LIKE '%North%';", "match": {"match": true, "result": [["Johann", "Fisher", "zboncak.madonna@example.net"], ["Cindy", "Schmitt", "wpfeffer@example.net"]]}}
{"result": "SELECT first_name, last_name, email_address\nFROM Owners\nWHERE state LIKE '%North%'", "match": {"match": true, "result": [["Johann", "Fisher", "zboncak.madonna@example.net"], ["Cindy", "Schmitt", "wpfeffer@example.net"]]}}
{"result": "SELECT COUNT(*) AS dogs_below_average_age\nFROM Dogs\nWHERE CAST(SUBSTRING_INDEX(age, ' ', 1) AS UNSIGNED) < \n      (SELECT AVG(CAST(SUBSTRING_INDEX(age, ' ', 1) AS UNSIGNED))\n       FROM Dogs\n       WHERE age LIKE '%years%');", "match": {"match": false, "error": "Query execution failed with error: no such function: SUBSTRING_INDEX"}}
{"result": "SELECT COUNT(*) AS dogs_below_average_age\nFROM Dogs\nWHERE CAST(REPLACE(age, 'years', '') AS DECIMAL) < (\n    SELECT AVG(CAST(REPLACE(age, 'years', '') AS DECIMAL))\n    FROM Dogs\n);", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT MAX(cost_of_treatment) AS most_recent_treatment_cost\nFROM Treatments\nWHERE date_of_treatment = (SELECT MAX(date_of_treatment) FROM Treatments);", "match": {"match": true, "result": [[407]]}}
{"result": "SELECT MAX(cost_of_treatment) AS most_recent_treatment_cost\nFROM Treatments\nWHERE date_of_treatment = (SELECT MAX(date_of_treatment) FROM Treatments);", "match": {"match": true, "result": [[407]]}}
{"result": "SELECT COUNT(*) AS dogs_without_treatments\nFROM Dogs d\nLEFT JOIN Treatments t ON d.dog_id = t.dog_id\nWHERE t.treatment_id IS NULL;", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(DISTINCT d.dog_id) AS dogs_without_treatment\nFROM Dogs d\nLEFT JOIN Treatments t ON d.dog_id = t.dog_id\nWHERE t.treatment_id IS NULL;", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(DISTINCT o.owner_id) AS owner_count\nFROM Owners o\nLEFT JOIN Dogs d ON o.owner_id = d.owner_id\nWHERE d.dog_id IS NULL;", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(*) AS unowned_owners\nFROM Owners\nWHERE owner_id NOT IN (\n    SELECT DISTINCT owner_id\n    FROM Dogs\n);", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(*) AS professionals_without_treatments\nFROM Professionals p\nLEFT JOIN Treatments t ON p.professional_id = t.professional_id\nWHERE t.treatment_id IS NULL;", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT COUNT(*) AS unassigned_professionals\nFROM Professionals\nWHERE professional_id NOT IN (\n    SELECT DISTINCT professional_id\n    FROM Treatments\n);", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT \n    d.name AS dog_name,\n    d.age,\n    d.weight\nFROM \n    Dogs d\nWHERE \n    d.abandoned_yn = '1';", "match": {"match": true, "result": [["Kacey", "6", "7.57"], ["Lyric", "4", "4.36"], ["Evangeline", "1", "4.01"]]}}
{"result": "SELECT d.name, d.age, d.weight\nFROM Dogs d\nWHERE d.abandoned_yn = '1';", "match": {"match": true, "result": [["Kacey", "6", "7.57"], ["Lyric", "4", "4.36"], ["Evangeline", "1", "4.01"]]}}
{"result": "SELECT AVG(\n    CASE \n        WHEN age LIKE '%year%' THEN CAST(SUBSTRING_INDEX(age, ' ', 1) AS DECIMAL(10,2))\n        WHEN age LIKE '%month%' THEN CAST(SUBSTRING_INDEX(age, ' ', 1) AS DECIMAL(10,2)) / 12\n        ELSE 0 \n    END\n) AS average_age\nFROM Dogs;", "match": {"match": false, "error": "Query execution failed with error: no such function: SUBSTRING_INDEX"}}
{"result": "SELECT AVG(\n    CASE \n        WHEN age LIKE '%year%' THEN CAST(SUBSTRING_INDEX(age, ' ', 1) AS DECIMAL(10,2))\n        WHEN age LIKE '%month%' THEN CAST(SUBSTRING_INDEX(age, ' ', 1) AS DECIMAL(10,2)) / 12\n        WHEN age LIKE '%week%' THEN CAST(SUBSTRING_INDEX(age, ' ', 1) AS DECIMAL(10,2)) / 52\n        WHEN age LIKE '%day%' THEN CAST(SUBSTRING_INDEX(age, ' ', 1) AS DECIMAL(10,2)) / 365\n        ELSE NULL\n    END\n) AS average_age\nFROM Dogs", "match": {"match": false, "error": "Query execution failed with error: no such function: SUBSTRING_INDEX"}}
{"result": "SELECT age\nFROM Dogs\nORDER BY date_of_birth ASC\nLIMIT 1;", "match": {"match": false, "result": [["8"]], "gt": [["9"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(age) AS oldest_dog_age\nFROM Dogs;", "match": {"match": true, "result": [["9"]]}}
{"result": "SELECT charge_type, charge_amount\nFROM Charges;", "match": {"match": true, "result": [["Daily Accommodation", 98], ["Drugs", 322], ["Health Check", 640]]}}
{"result": "SELECT charge_type, charge_amount\nFROM Charges;", "match": {"match": true, "result": [["Daily Accommodation", 98], ["Drugs", 322], ["Health Check", 640]]}}
{"result": "SELECT MAX(charge_amount) AS most_expensive_charge\nFROM Charges;", "match": {"match": true, "result": [[640]]}}
{"result": "SELECT MAX(charge_amount) AS most_expensive_charge\nFROM Charges;", "match": {"match": true, "result": [[640]]}}
{"result": "SELECT email_address, cell_number, home_phone\nFROM Professionals", "match": {"match": true, "result": [["deanna.schuster@example.com", "(275)939-2435x80863", "+71(6)2898266914"], ["lucile.shanahan@example.org", "889-940-2676", "+02(1)0259033559"], ["uboehm@example.org", "(369)908-7311x065", "325-155-0801x7005"], ["lourdes.lowe@example.net", "00230569697", "312.216.3352"], ["mekhi.little@example.org", "011.193.9081x3186", "1-609-566-2752x25197"], ["jacynthe.mclaughlin@example.net", "139-321-7313", "+43(5)1132733868"], ["lambert62@example.org", "499-434-0215x1628", "022.529.0550x1319"], ["goyette.roosevelt@example.net", "328.842.3792", "891.475.2256"], ["schneider.kathryne@example.org", "962-983-8109x3509", "320-508-6023"], ["jerrod.bahringer@example.org", "461-801-2600", "(230)338-3342x585"], ["west.eula@example.net", "609-405-2990", "(920)304-4499x59146"], ["marquardt.furman@example.org", "1-181-670-9466", "246-951-0080x76716"], ["delphine29@example.com", "880-659-7577x736", "346.594.3739"], ["cole.margarita@example.org", "1-185-137-1945x409", "971.048.3763x9404"], ["jeichmann@example.com", "1-258-285-4707x8020", "1-138-287-3775"]]}}
{"result": "SELECT \n    email_address, \n    cell_number, \n    home_phone\nFROM \n    Professionals;", "match": {"match": true, "result": [["deanna.schuster@example.com", "(275)939-2435x80863", "+71(6)2898266914"], ["lucile.shanahan@example.org", "889-940-2676", "+02(1)0259033559"], ["uboehm@example.org", "(369)908-7311x065", "325-155-0801x7005"], ["lourdes.lowe@example.net", "00230569697", "312.216.3352"], ["mekhi.little@example.org", "011.193.9081x3186", "1-609-566-2752x25197"], ["jacynthe.mclaughlin@example.net", "139-321-7313", "+43(5)1132733868"], ["lambert62@example.org", "499-434-0215x1628", "022.529.0550x1319"], ["goyette.roosevelt@example.net", "328.842.3792", "891.475.2256"], ["schneider.kathryne@example.org", "962-983-8109x3509", "320-508-6023"], ["jerrod.bahringer@example.org", "461-801-2600", "(230)338-3342x585"], ["west.eula@example.net", "609-405-2990", "(920)304-4499x59146"], ["marquardt.furman@example.org", "1-181-670-9466", "246-951-0080x76716"], ["delphine29@example.com", "880-659-7577x736", "346.594.3739"], ["cole.margarita@example.org", "1-185-137-1945x409", "971.048.3763x9404"], ["jeichmann@example.com", "1-258-285-4707x8020", "1-138-287-3775"]]}}
{"result": "SELECT DISTINCT b.breed_name, s.size_description\nFROM Breeds b\nCROSS JOIN Sizes s\nORDER BY b.breed_name, s.size_description;", "match": {"match": false, "result": [["Bulldog", "Large"], ["Bulldog", "Medium"], ["Bulldog", "Small"], ["Eskimo", "Large"], ["Eskimo", "Medium"], ["Eskimo", "Small"], ["Husky", "Large"], ["Husky", "Medium"], ["Husky", "Small"]], "gt": [["ESK", "LGE"], ["BUL", "LGE"], ["BUL", "MED"], ["HUS", "MED"], ["ESK", "SML"], ["HUS", "SML"], ["ESK", "MED"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT B.breed_name, S.size_description\nFROM Dogs D\nJOIN Breeds B ON D.breed_code = B.breed_code\nJOIN Sizes S ON D.size_code = S.size_code;", "match": {"match": false, "result": [["Eskimo", "Large"], ["Bulldog", "Large"], ["Bulldog", "Medium"], ["Husky", "Medium"], ["Eskimo", "Small"], ["Husky", "Small"], ["Eskimo", "Medium"]], "gt": [["ESK", "LGE"], ["BUL", "LGE"], ["BUL", "MED"], ["HUS", "MED"], ["ESK", "SML"], ["HUS", "SML"], ["ESK", "MED"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT \n    P.first_name, \n    TT.treatment_type_description\nFROM \n    Professionals P\nJOIN \n    Treatments T ON P.professional_id = T.professional_id\nJOIN \n    Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code;\n```", "match": {"match": false, "result": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Vernice", "Physical examination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Karley", "Vaccination"], ["Monte", "Take for a Walk"], ["Ruben", "Take for a Walk"]], "gt": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Ruben", "Take for a Walk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    p.first_name,\n    tt.treatment_type_description\nFROM \n    Professionals p\nJOIN \n    Treatments t ON p.professional_id = t.professional_id\nJOIN \n    Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;", "match": {"match": false, "result": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Vernice", "Physical examination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Karley", "Vaccination"], ["Monte", "Take for a Walk"], ["Ruben", "Take for a Walk"]], "gt": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Ruben", "Take for a Walk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) FROM singer;", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT COUNT(*) FROM singer;", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT Name\nFROM singer\nORDER BY Net_Worth_Millions ASC;", "match": {"match": true, "result": [["Abigail Johnson"], ["Susanne Klatten"], ["Gina Rinehart"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Alice Walton"], ["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT Name\nFROM singer\nORDER BY Net_Worth_Millions ASC;", "match": {"match": true, "result": [["Abigail Johnson"], ["Susanne Klatten"], ["Gina Rinehart"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Alice Walton"], ["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT Birth_Year, Citizenship\nFROM singer;", "match": {"match": true, "result": [[1944.0, "France"], [1948.0, "United States"], [1949.0, "United States"], [1942.0, "Chile"], [1940.0, "United States"], [1953.0, "Australia"], [1962.0, "Germany"], [1961.0, "United States"]]}}
{"result": "SELECT \"Birth_Year\", \"Citizenship\"\nFROM \"singer\";", "match": {"match": true, "result": [[1944.0, "France"], [1948.0, "United States"], [1949.0, "United States"], [1942.0, "Chile"], [1940.0, "United States"], [1953.0, "Australia"], [1962.0, "Germany"], [1961.0, "United States"]]}}
{"result": "SELECT Name\nFROM singer\nWHERE Citizenship != 'France';", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]]}}
{"result": "SELECT Name\nFROM singer\nWHERE Citizenship != 'French';", "match": {"match": false, "result": [["Liliane Bettencourt"], ["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]], "gt": [["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name\nFROM singer\nWHERE Birth_Year IN (1948, 1949);", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"]]}}
{"result": "```sql\nSELECT Name\nFROM singer\nWHERE Birth_Year IN (1948, 1949);\n```", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"]]}}
{"result": "SELECT Name\nFROM singer\nWHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);", "match": {"match": true, "result": [["Liliane Bettencourt"]]}}
{"result": "SELECT Name\nFROM singer\nWHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);", "match": {"match": true, "result": [["Liliane Bettencourt"]]}}
{"result": "SELECT Citizenship, COUNT(*) AS Number_of_Singers\nFROM singer\nGROUP BY Citizenship;", "match": {"match": true, "result": [["Australia", 1], ["Chile", 1], ["France", 1], ["Germany", 1], ["United States", 4]]}}
{"result": "SELECT Citizenship, COUNT(*) as Number_of_Singers\nFROM singer\nGROUP BY Citizenship;", "match": {"match": true, "result": [["Australia", 1], ["Chile", 1], ["France", 1], ["Germany", 1], ["United States", 4]]}}
{"result": "SELECT Citizenship, COUNT(*) as Frequency\nFROM singer\nGROUP BY Citizenship\nORDER BY Frequency DESC\nLIMIT 1;", "match": {"match": false, "result": [["United States", 4]], "gt": [["United States"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT \"Citizenship\", COUNT(*) as Frequency\nFROM \"singer\"\nGROUP BY \"Citizenship\"\nORDER BY Frequency DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [["United States", 4]], "gt": [["United States"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    Citizenship,\n    MAX(Net_Worth_Millions) AS Max_Net_Worth\nFROM \n    singer\nGROUP BY \n    Citizenship;", "match": {"match": true, "result": [["Australia", 17.0], ["Chile", 17.4], ["France", 30.0], ["Germany", 14.3], ["United States", 28.8]]}}
{"result": "SELECT citizenship, MAX(Net_Worth_Millions) as Max_Net_Worth\nFROM singer\nGROUP BY citizenship;", "match": {"match": true, "result": [["Australia", 17.0], ["Chile", 17.4], ["France", 30.0], ["Germany", 14.3], ["United States", 28.8]]}}
{"result": "SELECT song.Title, singer.Name\nFROM song\nJOIN singer ON song.Singer_ID = singer.Singer_ID;", "match": {"match": true, "result": [["Do They Know It's Christmas", "Liliane Bettencourt"], ["F**k It (I Don't Want You Back)", "Liliane Bettencourt"], ["Cha Cha Slide", "Christy Walton"], ["Call on Me", "Iris Fontbona"], ["Yeah", "Christy Walton"], ["All This Time", "Gina Rinehart"], ["Left Outside Alone", "Jacqueline Mars"], ["Mysterious Girl", "Susanne Klatten"]]}}
{"result": "SELECT song.Title, singer.Name\nFROM song\nJOIN singer ON song.Singer_ID = singer.Singer_ID;", "match": {"match": true, "result": [["Do They Know It's Christmas", "Liliane Bettencourt"], ["F**k It (I Don't Want You Back)", "Liliane Bettencourt"], ["Cha Cha Slide", "Christy Walton"], ["Call on Me", "Iris Fontbona"], ["Yeah", "Christy Walton"], ["All This Time", "Gina Rinehart"], ["Left Outside Alone", "Jacqueline Mars"], ["Mysterious Girl", "Susanne Klatten"]]}}
{"result": "SELECT DISTINCT s.Name\nFROM singer s\nJOIN song ON s.Singer_ID = song.Singer_ID\nWHERE song.Sales > 300000;", "match": {"match": true, "result": [["Liliane Bettencourt"], ["Christy Walton"], ["Iris Fontbona"]]}}
{"result": "SELECT DISTINCT s.Name\nFROM singer s\nJOIN song so ON s.Singer_ID = so.Singer_ID\nWHERE so.Sales > 300000;", "match": {"match": true, "result": [["Liliane Bettencourt"], ["Christy Walton"], ["Iris Fontbona"]]}}
{"result": "SELECT DISTINCT s.Name\nFROM singer s\nJOIN song so ON s.Singer_ID = so.Singer_ID\nGROUP BY s.Singer_ID\nHAVING COUNT(so.Song_ID) > 1;", "match": {"match": false, "result": [["Liliane Bettencourt"], ["Christy Walton"]], "gt": [["Christy Walton"], ["Liliane Bettencourt"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.Name\nFROM singer s\nJOIN song so ON s.Singer_ID = so.Singer_ID\nGROUP BY s.Singer_ID, s.Name\nHAVING COUNT(so.Song_ID) > 1;", "match": {"match": false, "result": [["Liliane Bettencourt"], ["Christy Walton"]], "gt": [["Christy Walton"], ["Liliane Bettencourt"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.Name, SUM(sg.Sales) AS Total_Sales\nFROM singer s\nJOIN song sg ON s.Singer_ID = sg.Singer_ID\nGROUP BY s.Name;", "match": {"match": true, "result": [["Christy Walton", 651421.0], ["Gina Rinehart", 292000.0], ["Iris Fontbona", 335000.0], ["Jacqueline Mars", 275000.0], ["Liliane Bettencourt", 1646407.0], ["Susanne Klatten", 261000.0]]}}
{"result": "SELECT s.Name, SUM(sg.Sales) AS Total_Sales\nFROM singer s\nJOIN song sg ON s.Singer_ID = sg.Singer_ID\nGROUP BY s.Name;", "match": {"match": true, "result": [["Christy Walton", 651421.0], ["Gina Rinehart", 292000.0], ["Iris Fontbona", 335000.0], ["Jacqueline Mars", 275000.0], ["Liliane Bettencourt", 1646407.0], ["Susanne Klatten", 261000.0]]}}
{"result": "SELECT Name FROM singer\nWHERE Singer_ID NOT IN (\n    SELECT DISTINCT Singer_ID FROM song\n);", "match": {"match": true, "result": [["Alice Walton"], ["Abigail Johnson"]]}}
{"result": "```sql\nSELECT s.\"Name\" AS sname\nFROM \"singer\" s\nLEFT JOIN \"song\" ON s.\"Singer_ID\" = \"Singer_ID\"\nWHERE \"Song_ID\" IS NULL;\n```", "match": {"match": false, "error": "Query execution failed with error: ambiguous column name: Singer_ID"}}
{"result": "SELECT DISTINCT s1.Citizenship\nFROM singer s1\nJOIN singer s2 ON s1.Citizenship = s2.Citizenship\nWHERE s1.Birth_Year < 1945 AND s2.Birth_Year > 1955\n  AND s1.Singer_ID != s2.Singer_ID;", "match": {"match": true, "result": [["United States"]]}}
{"result": "SELECT DISTINCT s1.Citizenship\nFROM singer s1\nWHERE EXISTS (\n    SELECT 1\n    FROM singer s2\n    WHERE s2.Citizenship = s1.Citizenship\n    AND s2.Birth_Year < 1945\n)\nAND EXISTS (\n    SELECT 1\n    FROM singer s3\n    WHERE s3.Citizenship = s1.Citizenship\n    AND s3.Birth_Year > 1955\n);", "match": {"match": true, "result": [["United States"]]}}
{"result": "SELECT COUNT(*) AS total_features\nFROM Other_Available_Features;", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT feature_type_name\nFROM Ref_Feature_Types\nWHERE feature_type_code = (\n    SELECT feature_type_code\n    FROM Other_Available_Features\n    WHERE feature_name = 'AirCon'\n);", "match": {"match": true, "result": [["Amenity, eg Pool."]]}}
{"result": "SELECT DISTINCT rpt.property_type_description\nFROM Properties p\nJOIN Ref_Property_Types rpt ON p.property_type_code = rpt.property_type_code;", "match": {"match": false, "result": [["House, Bungalow, etc."], ["Other, to be determined."], ["Field, Meadow."], ["Apartment, Flat, Condo, etc."], ["Shop, Retail Outlet."]], "gt": [["Apartment, Flat, Condo, etc."], ["Field, Meadow."], ["House, Bungalow, etc."], ["Other, to be determined."], ["Shop, Retail Outlet."]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT DISTINCT p.property_name\nFROM Properties p\nJOIN Ref_Property_Types rpt ON p.property_type_code = rpt.property_type_code\nWHERE (rpt.property_type_description = 'House' OR rpt.property_type_description = 'Apartment')\nAND p.room_count > 1;\n```", "match": {"match": false, "result": [], "gt": [["longacre"], ["parc coliseum"], ["parc east"], ["park"], ["renoir"], ["ten tower"], ["the cole"], ["vogue"]], "error": "Query result does not match ground truth."}}

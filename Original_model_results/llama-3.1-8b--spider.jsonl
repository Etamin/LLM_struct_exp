
{"result": "SELECT COUNT(Singer_ID) FROM singer", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(Singer_ID) FROM singer", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT Name, Country, Age \nFROM singer \nORDER BY Age DESC;", "match": {"match": true, "result": [["Joe Sharp", "Netherlands", 52], ["John Nizinik", "France", 43], ["Rose White", "France", 41], ["Timbaland", "United States", 32], ["Justin Brown", "France", 29], ["Tribal King", "France", 25]]}}
{"result": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC", "match": {"match": true, "result": [["Joe Sharp", "Netherlands", 52], ["John Nizinik", "France", 43], ["Rose White", "France", 41], ["Timbaland", "United States", 32], ["Justin Brown", "France", 29], ["Tribal King", "France", 25]]}}
{"result": "SELECT AVG(Age), MIN(Age), MAX(Age) \nFROM singer \nWHERE Country = 'France';", "match": {"match": true, "result": [[34.5, 25, 43]]}}
{"result": "SELECT AVG(Age) , MIN(Age) , MAX(Age) \nFROM singer \nWHERE Country = 'France';", "match": {"match": true, "result": [[34.5, 25, 43]]}}
{"result": "SELECT T.Name, T.Song_Name FROM (\nSELECT S1.Name, S1.Song_Name, S1.Age, ROW_NUMBER() OVER (ORDER BY S1.Age ASC) as row_num\nFROM singer AS S1\n) T\nWHERE T.row_num = 1", "match": {"match": false, "result": [["Tribal King", "Love"]], "gt": [["Love", "2016"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \"Song_Name\", \"Song_release_year\" \nFROM \"singer\" \nWHERE \"Age\" = ( SELECT MIN(\"Age\") FROM \"singer\" );", "match": {"match": true, "result": [["Love", "2016"]]}}
{"result": "SELECT DISTINCT T1.Country \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID \nWHERE T1.Age > 20", "match": {"match": false, "result": [["United States"], ["France"]], "gt": [["Netherlands"], ["United States"], ["France"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T2.Country \nFROM singer_in_concert AS T1 \nJOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID \nWHERE T2.Age > 20", "match": {"match": false, "result": [["United States"], ["France"]], "gt": [["Netherlands"], ["United States"], ["France"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Country, COUNT(Singer_ID) FROM singer GROUP BY Country", "match": {"match": true, "result": [["France", 4], ["Netherlands", 1], ["United States", 1]]}}
{"result": "SELECT Country, COUNT(*) FROM singer GROUP BY Country", "match": {"match": true, "result": [["France", 4], ["Netherlands", 1], ["United States", 1]]}}
{"result": "SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)", "match": {"match": true, "result": [["You"], ["Sun"], ["Gentleman"]]}}
{"result": "SELECT T3.\"Song_Name\" \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 ON T1.\"Singer_ID\" = T2.\"Singer_ID\" \nJOIN concert AS T3 ON T2.\"concert_ID\" = T3.\"concert_ID\" \nWHERE T1.age > (SELECT AVG(age) FROM singer);", "match": {"match": false, "error": "Query execution failed with error: no such column: T3.Song_Name"}}
{"result": "SELECT Location, Name \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000;", "match": {"match": true, "result": []}}
{"result": "SELECT Location, Name \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000;", "match": {"match": true, "result": []}}
{"result": "SELECT MAX(Capacity) ,  AVG(Average) FROM stadium", "match": {"match": false, "result": [[52500, 917.8888888888889]], "gt": [[52500, 730]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(Capacity), MAX(Capacity) FROM stadium", "match": {"match": true, "result": [[10621.666666666666, 52500]]}}
{"result": "SELECT Name, Capacity \nFROM stadium \nORDER BY Average DESC \nLIMIT 1;", "match": {"match": true, "result": [["Stark's Park", 10104]]}}
{"result": "SELECT Name, Capacity \nFROM stadium \nORDER BY Average DESC \nLIMIT 1;", "match": {"match": true, "result": [["Stark's Park", 10104]]}}
{"result": "SELECT COUNT(concert_ID) \nFROM concert \nWHERE YEAR = '2014' OR YEAR = '2015';", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(concert_ID) \nFROM concert \nWHERE Year = '2014' OR Year = '2015';", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT T1.Name, COUNT(T2.concert_ID) \nFROM stadium AS T1 \nJOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nGROUP BY T1.Name", "match": {"match": false, "result": [["Balmoor", 1], ["Glebe Park", 1], ["Recreation Park", 1], ["Somerset Park", 2], ["Stark's Park", 1]], "gt": [["Stark's Park", 1], ["Glebe Park", 1], ["Somerset Park", 2], ["Recreation Park", 1], ["Balmoor", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name, COUNT(T2.concert_ID) \nFROM stadium AS T1 \nJOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nGROUP BY T1.Name", "match": {"match": false, "result": [["Balmoor", 1], ["Glebe Park", 1], ["Recreation Park", 1], ["Somerset Park", 2], ["Stark's Park", 1]], "gt": [["Stark's Park", 1], ["Glebe Park", 1], ["Somerset Park", 2], ["Recreation Park", 1], ["Balmoor", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name, T1.Capacity \nFROM stadium AS T1 \nJOIN (\n  SELECT T2.Stadium_ID, COUNT(T2.concert_ID) as count \n  FROM concert AS T2 \n  WHERE T2.Year > '2014' \n  GROUP BY T2.Stadium_ID \n  ORDER BY count DESC LIMIT 1\n) AS T3 \nON T1.Stadium_ID = T3.Stadium_ID", "match": {"match": false, "result": [["Balmoor", 4000]], "gt": [["Somerset Park", 11998]], "error": "Query result does not match ground truth."}}
{"result": "SELECT t1.Name, t1.Capacity \nFROM stadium AS t1 \nJOIN (\n  SELECT Stadium_ID, COUNT(concert_ID) as count \n  FROM singer_in_concert \n  JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID \n  WHERE concert.Year > '2013' \n  GROUP BY Stadium_ID \n  ORDER BY count DESC \n  LIMIT 1 \n) as t2 \nON t1.Stadium_ID = t2.Stadium_ID", "match": {"match": false, "error": "Query execution failed with error: ambiguous column name: concert_ID"}}
{"result": "SELECT YEAR \nFROM concert \nGROUP BY YEAR \nORDER BY COUNT(*) DESC \nLIMIT 1;", "match": {"match": true, "result": [["2015"]]}}
{"result": "SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(concert_ID) DESC LIMIT 1", "match": {"match": true, "result": [["2015"]]}}
{"result": "SELECT Name \nFROM stadium \nWHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)", "match": {"match": true, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"]]}}
{"result": "SELECT Name \nFROM stadium \nWHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert);", "match": {"match": true, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"]]}}
{"result": "SELECT T.Country \nFROM ( \n    SELECT T.Country \n    FROM singer AS T \n    WHERE T.Age > 40 \n    INTERSECT \n    SELECT T.Country \n    FROM singer AS T \n    WHERE T.Age < 30\n) AS T", "match": {"match": true, "result": [["France"]]}}
{"result": "SELECT T1.Name \nFROM stadium AS T1 \nLEFT JOIN concert AS T2 ON T2.Stadium_ID = T1.Stadium_ID \nWHERE T2.Year != '2014'", "match": {"match": false, "result": [["Somerset Park"], ["Balmoor"], ["Recreation Park"]], "gt": [["Balmoor"], ["Bayview Stadium"], ["Forthbank Stadium"], ["Gayfield Park"], ["Hampden Park"], ["Recreation Park"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name \nFROM stadium AS T1 \nLEFT JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nWHERE T2.Stadium_ID IS NULL OR T2.Year != '2014'", "match": {"match": false, "result": [["Somerset Park"], ["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"], ["Recreation Park"], ["Balmoor"]], "gt": [["Balmoor"], ["Bayview Stadium"], ["Forthbank Stadium"], ["Gayfield Park"], ["Hampden Park"], ["Recreation Park"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT c.concert_Name, c.Theme, COUNT(DISTINCT si.Singer_ID) AS num_singers \nFROM concert c \nJOIN singer_in_concert si ON c.concert_ID = si.concert_ID \nGROUP BY c.concert_Name, c.Theme", "match": {"match": false, "result": [["Auditions", "Free choice", 3], ["Home Visits", "Bleeding Love", 1], ["Super bootcamp", "Free choice 2", 2], ["Week 1", "Happy Tonight", 2], ["Week 1", "Wide Awake", 1], ["Week 2", "Party All Night", 1]], "gt": [["Auditions", "Free choice", 3], ["Super bootcamp", "Free choice 2", 2], ["Home Visits", "Bleeding Love", 1], ["Week 1", "Wide Awake", 1], ["Week 1", "Happy Tonight", 2], ["Week 2", "Party All Night", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT C.concert_Name, C.Theme, COUNT(S.Singer_ID) \nFROM concert C \nJOIN singer_in_concert SIC ON C.concert_ID = SIC.concert_ID \nJOIN singer S ON SIC.Singer_ID = S.Singer_ID \nGROUP BY C.concert_Name, C.Theme;", "match": {"match": false, "result": [["Auditions", "Free choice", 3], ["Home Visits", "Bleeding Love", 1], ["Super bootcamp", "Free choice 2", 2], ["Week 1", "Happy Tonight", 2], ["Week 1", "Wide Awake", 1], ["Week 2", "Party All Night", 1]], "gt": [["Auditions", "Free choice", 3], ["Super bootcamp", "Free choice 2", 2], ["Home Visits", "Bleeding Love", 1], ["Week 1", "Wide Awake", 1], ["Week 1", "Happy Tonight", 2], ["Week 2", "Party All Night", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name, COUNT(T1.Singer_ID) \nAS Number_of_concerts \nFROM singer_in_concert AS T2 INNER JOIN singer AS T1 ON T2.Singer_ID = T1.Singer_ID \nGROUP BY T1.Name", "match": {"match": false, "result": [["John Nizinik", 2], ["Justin Brown", 3], ["Rose White", 1], ["Timbaland", 2], ["Tribal King", 2]], "gt": [["Timbaland", 2], ["Justin Brown", 3], ["Rose White", 1], ["John Nizinik", 2], ["Tribal King", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name, COUNT(T3.concert_ID) \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID \nJOIN concert AS T3 ON T2.concert_ID = T3.concert_ID \nGROUP BY T1.Name", "match": {"match": false, "result": [["John Nizinik", 2], ["Justin Brown", 3], ["Rose White", 1], ["Timbaland", 2], ["Tribal King", 2]], "gt": [["Timbaland", 2], ["Justin Brown", 3], ["Rose White", 1], ["John Nizinik", 2], ["Tribal King", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Name \nFROM concert AS T1 \nINNER JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID \nINNER JOIN singer AS T3 ON T3.Singer_ID = T2.Singer_ID \nWHERE T1.Year = '2014';", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Name"}}
{"result": "SELECT T2.Name \nFROM concert AS T1 \nJOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID \nJOIN singer AS T3 ON T2.Singer_ID = T3.Singer_ID \nWHERE T1.Year = '2014';", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Name"}}
{"result": "SELECT T2.Name, T2.Country \nFROM singer_in_concert AS T1 \nJOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID \nJOIN concert AS T3 ON T1.concert_ID = T3.concert_ID \nJOIN (SELECT Singer_ID, Song_Name FROM singer) AS T4 ON T2.Singer_ID = T4.Singer_ID \nWHERE T4.Song_Name LIKE '%Hey%'", "match": {"match": false, "result": [["Justin Brown", "France"], ["Justin Brown", "France"], ["Justin Brown", "France"]], "gt": [["Justin Brown", "France"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name, Country \nFROM singer \nWHERE Singer_ID IN (\n  SELECT Singer_ID \n  FROM singer \n  WHERE Song_Name LIKE '%Hey%'\n);", "match": {"match": true, "result": [["Justin Brown", "France"]]}}
{"result": "SELECT T1.Location, T1.Name \nFROM stadium AS T1 \nJOIN concert AS T2 \nON T1.Stadium_ID = T2.Stadium_ID \nWHERE T2.Year IN ('2014', '2015')", "match": {"match": false, "result": [["Raith Rovers", "Stark's Park"], ["Ayr United", "Somerset Park"], ["Ayr United", "Somerset Park"], ["Brechin City", "Glebe Park"], ["Peterhead", "Balmoor"], ["Alloa Athletic", "Recreation Park"]], "gt": [["Somerset Park", "Ayr United"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Name, T2.Location \nFROM concert AS T1 \nJOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nWHERE T1.Year = '2014' INTERSECT \nSELECT T2.Name, T2.Location \nFROM concert AS T1 \nJOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nWHERE T1.Year = '2015'", "match": {"match": true, "result": [["Somerset Park", "Ayr United"]]}}
{"result": "SELECT COUNT(concert_ID) \nFROM concert \nWHERE Stadium_ID IN (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(T1.concert_ID) FROM `concert` AS T1 \nJOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nWHERE T2.Capacity = ( SELECT MAX(Capacity) FROM stadium );", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(*) \nFROM Pets \nWHERE weight > 10", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT SUM(CASE WHEN pet_age > 10 THEN 1 ELSE 0 END) FROM Pets", "match": {"match": false, "result": [[0]], "gt": [[2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT weight \nFROM Pets \nWHERE PetType = 'Dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'Dog');", "match": {"match": false, "result": [], "gt": [[9.3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MIN(weight) \nFROM Pets \nWHERE PetType = 'dog'", "match": {"match": true, "result": [[9.3]]}}
{"result": "SELECT MAX(weight) ,  PetType FROM Pets GROUP BY PetType", "match": {"match": true, "result": [[12.0, "cat"], [13.4, "dog"]]}}
{"result": "SELECT PetType, MAX(weight) \nFROM Pets \nGROUP BY PetType", "match": {"match": false, "result": [["cat", 12.0], ["dog", 13.4]], "gt": [[12.0, "cat"], [13.4, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(PetID) \nFROM Has_Pet \nJOIN Student ON Has_Pet.StuID = Student.StuID \nWHERE Student.Age > 20", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(*) \nFROM Has_Pet \nJOIN Student ON Has_Pet.StuID = Student.StuID \nWHERE Student.Age > 20", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(*) \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Student.Sex = 'F' AND Pets.PetType = 'Dog'", "match": {"match": false, "result": [[0]], "gt": [[2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT T1.StuID) \nFROM Student T1 \nJOIN Has_Pet T2 ON T1.StuID = T2.StuID \nJOIN Pets T3 ON T2.PetID = T3.PetID \nWHERE T1.Sex = 'F' AND T3.PetType = 'dog'", "match": {"match": false, "result": [[1]], "gt": [[2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT count(*) FROM Pets", "match": {"match": false, "result": [[3]], "gt": [[2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT PetType) FROM Pets", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'cat' OR T3.PetType = 'dog'", "match": {"match": false, "result": [["Linda"], ["Tracy"], ["Tracy"]], "gt": [["Linda"], ["Tracy"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'cat' OR T3.PetType = 'dog'", "match": {"match": false, "result": [["Linda"], ["Tracy"], ["Tracy"]], "gt": [["Linda"], ["Tracy"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Fname \nFROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nINNER JOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'cat' INTERSECT \nSELECT T1.Fname \nFROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nINNER JOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'dog'", "match": {"match": true, "result": []}}
{"result": "SELECT DISTINCT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T3.PetID = T2.PetID \nWHERE T3.PetType = 'cat' \nINTERSECT \nSELECT DISTINCT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T3.PetID = T2.PetID \nWHERE T3.PetType = 'dog'", "match": {"match": true, "result": []}}
{"result": "SELECT T1.Major, T1.Age \nFROM Student AS T1 \nLEFT JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nLEFT JOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType IS NULL", "match": {"match": false, "result": [[600, 21], [600, 20], [600, 26], [600, 18], [600, 18], [600, 20], [600, 19], [600, 17], [600, 22], [600, 20], [600, 18], [600, 16], [600, 17], [600, 27], [600, 20], [600, 18], [520, 22], [520, 19], [540, 17], [520, 20], [540, 18], [520, 18], [520, 19], [520, 18], [550, 20], [100, 17], [550, 21], [550, 20], [550, 20], [550, 18], [50, 18], [50, 26]], "gt": [[600, 19], [600, 21], [600, 20], [600, 26], [600, 18], [600, 18], [600, 20], [600, 19], [600, 17], [600, 22], [600, 20], [600, 18], [600, 16], [600, 17], [600, 27], [600, 20], [600, 18], [520, 22], [520, 19], [540, 17], [520, 20], [540, 18], [520, 18], [520, 19], [520, 18], [550, 20], [100, 17], [550, 21], [550, 20], [550, 20], [550, 18], [50, 18], [50, 26]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Major, T1.Age \nFROM Student AS T1 \nLEFT JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nLEFT JOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType != 'cat'", "match": {"match": false, "result": [[600, 19], [600, 19]], "gt": [[600, 19], [600, 21], [600, 20], [600, 26], [600, 18], [600, 18], [600, 20], [600, 19], [600, 17], [600, 22], [600, 20], [600, 18], [600, 16], [600, 17], [600, 27], [600, 20], [600, 18], [520, 22], [520, 19], [540, 17], [520, 20], [540, 18], [520, 18], [520, 19], [520, 18], [550, 20], [100, 17], [550, 21], [550, 20], [550, 20], [550, 18], [50, 18], [50, 26]], "error": "Query result does not match ground truth."}}
{"result": "SELECT StuID \nFROM Student \nWHERE StuID NOT IN (\n    SELECT StuID \n    FROM Has_Pet \n    JOIN Pets ON Has_Pet.PetID = Pets.PetID \n    WHERE Pets.PetType = 'cat'\n);", "match": {"match": true, "result": [[1002], [1003], [1004], [1005], [1006], [1007], [1008], [1009], [1010], [1011], [1012], [1014], [1015], [1016], [1017], [1018], [1019], [1020], [1021], [1022], [1023], [1024], [1025], [1026], [1027], [1028], [1029], [1030], [1031], [1032], [1033], [1034], [1035]]}}
{"result": "SELECT StuID \nFROM Student \nWHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'Cat'));", "match": {"match": false, "result": [[1001], [1002], [1003], [1004], [1005], [1006], [1007], [1008], [1009], [1010], [1011], [1012], [1014], [1015], [1016], [1017], [1018], [1019], [1020], [1021], [1022], [1023], [1024], [1025], [1026], [1027], [1028], [1029], [1030], [1031], [1032], [1033], [1034], [1035]], "gt": [[1002], [1003], [1004], [1005], [1006], [1007], [1008], [1009], [1010], [1011], [1012], [1014], [1015], [1016], [1017], [1018], [1019], [1020], [1021], [1022], [1023], [1024], [1025], [1026], [1027], [1028], [1029], [1030], [1031], [1032], [1033], [1034], [1035]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.fname, T1.Age \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'Dog' \nAND T2.PetID NOT IN (SELECT PetID FROM Pets WHERE PetType = 'Cat');", "match": {"match": false, "result": [], "gt": [["Tracy", 19], ["Tracy", 19]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T3.PetID = T2.PetID \nWHERE T3.PetType = 'Dog' AND T3.PetID NOT IN (\n  SELECT PetID \n  FROM Pets \n  WHERE PetType = 'Cat'\n);", "match": {"match": false, "result": [], "gt": [["Tracy", 19], ["Tracy", 19]], "error": "Query result does not match ground truth."}}
{"result": "SELECT PetType, weight FROM Pets ORDER BY pet_age LIMIT 1", "match": {"match": true, "result": [["dog", 9.3]]}}
{"result": "SELECT PetType, weight \nFROM Pets \nWHERE pet_age = ( SELECT MIN(pet_age) FROM Pets );", "match": {"match": true, "result": [["dog", 9.3]]}}
{"result": "SELECT PetID, weight \nFROM Pets \nWHERE pet_age > 1", "match": {"match": true, "result": [[2001, 12.0], [2002, 13.4]]}}
{"result": "SELECT petID, weight FROM Pets WHERE pet_age > 1", "match": {"match": true, "result": [[2001, 12.0], [2002, 13.4]]}}
{"result": "SELECT PetType, AVG(pet_age) as avg_age, MAX(pet_age) as max_age \nFROM Pets \nGROUP BY PetType", "match": {"match": false, "result": [["cat", 3.0, 3], ["dog", 1.5, 2]], "gt": [[3.0, 3, "cat"], [1.5, 2, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT PetType, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age\nFROM Pets\nGROUP BY PetType", "match": {"match": false, "result": [["cat", 3.0, 3], ["dog", 1.5, 2]], "gt": [[3.0, 3, "cat"], [1.5, 2, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT PetType, AVG(weight) as average_weight \nFROM Pets \nGROUP BY PetType", "match": {"match": false, "result": [["cat", 12.0], ["dog", 11.350000000000001]], "gt": [[12.0, "cat"], [11.350000000000001, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT PetType, AVG(weight) \nFROM Pets \nGROUP BY PetType", "match": {"match": false, "result": [["cat", 12.0], ["dog", 11.350000000000001]], "gt": [[12.0, "cat"], [11.350000000000001, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T1.Fname, T1.Age \nFROM Student AS T1 \nINNER JOIN Has_Pet AS T2 \nON T1.StuID = T2.StuID", "match": {"match": true, "result": [["Linda", 18], ["Tracy", 19]]}}
{"result": "SELECT DISTINCT Fname, Age \nFROM Student \nWHERE StuID IN (SELECT StuID \n                FROM Has_Pet);", "match": {"match": true, "result": [["Linda", 18], ["Tracy", 19]]}}
{"result": "SELECT T2.PetID \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T2.StuID = T1.StuID \nWHERE T1.LName = 'Smith';", "match": {"match": true, "result": [[2001]]}}
{"result": "SELECT T3.PetID \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T1.LName = 'Smith'", "match": {"match": true, "result": [[2001]]}}
{"result": "SELECT StuID, COUNT(*) \nFROM Has_Pet GROUP BY StuID", "match": {"match": false, "result": [[1001, 1], [1002, 2]], "gt": [[1, 1001], [2, 1002]], "error": "Query result does not match ground truth."}}
{"result": "SELECT StuID, COUNT(*) as PetCount\nFROM Has_Pet\nGROUP BY StuID", "match": {"match": false, "result": [[1001, 1], [1002, 2]], "gt": [[1, 1001], [2, 1002]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT T1.Fname, T1.Sex\nFROM Student AS T1\nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID\nGROUP BY T1.Fname, T1.Sex\nHAVING COUNT(T2.StuID) > 1;\n```", "match": {"match": true, "result": [["Tracy", "F"]]}}
{"result": "SELECT T1.Fname, T1.Sex \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nGROUP BY T1.StuID \nHAVING COUNT(*)  >  1", "match": {"match": true, "result": [["Tracy", "F"]]}}
{"result": "SELECT T1.LName \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T3.PetID = T2.PetID \nWHERE T3.pet_age = 3 AND T3.PetType = 'Cat';", "match": {"match": false, "result": [], "gt": [["Smith"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT LName \nFROM Student \nWHERE StuID IN (SELECT StuID \n                FROM Has_Pet \n                JOIN Pets ON Has_Pet.PetID = Pets.PetID \n                WHERE Pets.PetType = 'Cat' \n                AND Pets.pet_age = 3);", "match": {"match": false, "result": [], "gt": [["Smith"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(Age) \nFROM Student \nWHERE StuID NOT IN (SELECT StuID FROM Has_Pet);", "match": {"match": true, "result": [[19.625]]}}
{"result": "SELECT AVG(Age) \nFROM Student \nWHERE StuID NOT IN (SELECT StuID FROM Has_Pet);", "match": {"match": true, "result": [[19.625]]}}
{"result": "SELECT COUNT(Employee_ID) FROM employee", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT COUNT(Employee_ID) FROM employee", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT Name FROM employee ORDER BY Age ASC;", "match": {"match": true, "result": [["George Chuter"], ["Andrew Sheridan"], ["Lee Mears"], ["Tim Payne"], ["Matt Stevens"], ["Jason Hobson"], ["Steve Borthwick"], ["Louis Deacon"], ["Phil Vickery"], ["Mark Regan"]]}}
{"result": "SELECT Name \nFROM employee \nORDER BY Age ASC;", "match": {"match": true, "result": [["George Chuter"], ["Andrew Sheridan"], ["Lee Mears"], ["Tim Payne"], ["Matt Stevens"], ["Jason Hobson"], ["Steve Borthwick"], ["Louis Deacon"], ["Phil Vickery"], ["Mark Regan"]]}}
{"result": "SELECT COUNT(*) ,  City \nFROM employee \nGROUP BY City", "match": {"match": true, "result": [[3, "Bath"], [3, "Bristol"], [1, "Leicester"], [1, "Sale"], [2, "Wasps"]]}}
{"result": "SELECT City, COUNT(*) FROM employee GROUP BY City", "match": {"match": false, "result": [["Bath", 3], ["Bristol", 3], ["Leicester", 1], ["Sale", 1], ["Wasps", 2]], "gt": [[3, "Bath"], [3, "Bristol"], [1, "Leicester"], [1, "Sale"], [2, "Wasps"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT City\nFROM employee\nWHERE Age < 30\nGROUP BY City\nHAVING COUNT(Employee_ID) > 1", "match": {"match": true, "result": [["Bath"]]}}
{"result": "SELECT T2.City \nFROM employee AS T1 \nINNER JOIN shop AS T2 \n  ON T1.Employee_ID = ( SELECT Shop_ID \n                       FROM hiring \n                       WHERE Employee_ID = T1.Employee_ID \n                       GROUP BY Shop_ID \n                       HAVING COUNT(DISTINCT Employee_ID) > 1 \n                         AND Start_from = 'now' \n                         AND Is_full_time = 't' \n                         AND Age < 30 \n                       )", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.City"}}
{"result": "SELECT COUNT(Shop_ID), Location \nFROM shop \nGROUP BY Location", "match": {"match": true, "result": [[1, "Espoo"], [1, "Helsinki"], [1, "Jakobstad"], [1, "Kotka"], [1, "Kuopio"], [1, "Lahti"], [1, "Mariehamn"], [1, "Turku"], [1, "Valkeakoski"]]}}
{"result": "SELECT Location, COUNT(*) \nFROM shop \nGROUP BY Location", "match": {"match": false, "result": [["Espoo", 1], ["Helsinki", 1], ["Jakobstad", 1], ["Kotka", 1], ["Kuopio", 1], ["Lahti", 1], ["Mariehamn", 1], ["Turku", 1], ["Valkeakoski", 1]], "gt": [[1, "Espoo"], [1, "Helsinki"], [1, "Jakobstad"], [1, "Kotka"], [1, "Kuopio"], [1, "Lahti"], [1, "Mariehamn"], [1, "Turku"], [1, "Valkeakoski"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Manager_name, District \nFROM shop \nORDER BY Number_products DESC \nLIMIT 1;", "match": {"match": true, "result": [["Ilkka M\u00e4kel\u00e4", "Lahden Stadion"]]}}
{"result": "SELECT T2.Manager_name, T2.District \nFROM shop AS T1 INNER JOIN \n( SELECT Shop_ID, MAX(Number_products) AS max_number_products \n  FROM shop \n  GROUP BY Shop_ID \n) AS T3 ON T1.Shop_ID = T3.Shop_ID INNER JOIN \nshop AS T2 ON T1.Shop_ID = T2.Shop_ID \nWHERE T1.Number_products = T3.max_number_products", "match": {"match": false, "result": [["Olli Huttunen", "Tehtaan kentt\u00e4"], ["Antti Muurinen", "Finnair Stadium"], ["Mika Lehkosuo", "Tapiolan Urheilupuisto"], ["Job Dragtsma", "Veritas Stadion"], ["Mika Laurikainen", "Jakobstads Centralplan"], ["Tommi Kautonen", "Arto Tolsa Areena"], ["Kai Nyyss\u00f6nen", "Magnum Areena"], ["Ilkka M\u00e4kel\u00e4", "Lahden Stadion"], ["Pekka Lyyski", "Wikl\u00f6f Holding Arena"]], "gt": [["Ilkka M\u00e4kel\u00e4", "Lahden Stadion"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MIN(`Number_products`) , MAX(`Number_products`) FROM `shop`", "match": {"match": true, "result": [[1600, 15000]]}}
{"result": "SELECT MIN(Number_products), MAX(Number_products) FROM shop", "match": {"match": true, "result": [[1600, 15000]]}}
{"result": "SELECT Name, Location, District\nFROM shop\nORDER BY Number_products DESC", "match": {"match": true, "result": [["FC Lahti", "Lahti", "Lahden Stadion"], ["HJK", "Helsinki", "Finnair Stadium"], ["FC Inter", "Turku", "Veritas Stadion"], ["FC Honka", "Espoo", "Tapiolan Urheilupuisto"], ["FF Jaro", "Jakobstad", "Jakobstads Centralplan"], ["FC KooTeePee", "Kotka", "Arto Tolsa Areena"], ["FC Haka", "Valkeakoski", "Tehtaan kentt\u00e4"], ["KuPS", "Kuopio", "Magnum Areena"], ["IFK Mariehamn", "Mariehamn", "Wikl\u00f6f Holding Arena"]]}}
{"result": "SELECT Name, Location, District\nFROM shop\nORDER BY Number_products DESC", "match": {"match": true, "result": [["FC Lahti", "Lahti", "Lahden Stadion"], ["HJK", "Helsinki", "Finnair Stadium"], ["FC Inter", "Turku", "Veritas Stadion"], ["FC Honka", "Espoo", "Tapiolan Urheilupuisto"], ["FF Jaro", "Jakobstad", "Jakobstads Centralplan"], ["FC KooTeePee", "Kotka", "Arto Tolsa Areena"], ["FC Haka", "Valkeakoski", "Tehtaan kentt\u00e4"], ["KuPS", "Kuopio", "Magnum Areena"], ["IFK Mariehamn", "Mariehamn", "Wikl\u00f6f Holding Arena"]]}}
{"result": "SELECT Name \nFROM shop \nWHERE Number_products > (SELECT AVG(Number_products) FROM shop);", "match": {"match": true, "result": [["HJK"], ["FC Inter"], ["FC Lahti"]]}}
{"result": "SELECT Name \nFROM shop \nWHERE Number_products > ( SELECT AVG(Number_products) FROM shop );", "match": {"match": true, "result": [["HJK"], ["FC Inter"], ["FC Lahti"]]}}
{"result": "SELECT T2.Name FROM evaluation AS T1 \nINNER JOIN employee AS T2 ON T1.Employee_ID = T2.Employee_ID \nGROUP BY T1.Employee_ID \nORDER BY COUNT(T1.Employee_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [["George Chuter"]]}}
{"result": "SELECT T2.Name \nFROM evaluation AS T1 \nJOIN employee AS T2 ON T1.Employee_ID = T2.Employee_ID \nGROUP BY T2.Name \nORDER BY COUNT(T2.Name) DESC \nLIMIT 1;", "match": {"match": true, "result": [["George Chuter"]]}}
{"result": "SELECT T1.Name \nFROM employee AS T1 \nINNER JOIN evaluation AS T2 \nON T1.Employee_ID = T2.Employee_ID \nWHERE T2.Bonus = (\n  SELECT MAX(Bonus) \n  FROM evaluation \n  WHERE Bonus != 0 \n  GROUP BY Employee_ID \n  HAVING COUNT(Employee_ID) = 1\n)", "match": {"match": true, "result": [["Louis Deacon"]]}}
{"result": "SELECT T1.Name \nFROM employee AS T1 \nINNER JOIN evaluation AS T2 \nON T1.Employee_ID = T2.Employee_ID \nORDER BY T2.Bonus DESC \nLIMIT 1", "match": {"match": true, "result": [["Louis Deacon"]]}}
{"result": "SELECT Name \nFROM employee \nWHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "match": {"match": true, "result": [["Mark Regan"], ["Tim Payne"], ["Andrew Sheridan"], ["Phil Vickery"], ["Steve Borthwick"]]}}
{"result": "SELECT Name \nFROM employee \nWHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);", "match": {"match": true, "result": [["Mark Regan"], ["Tim Payne"], ["Andrew Sheridan"], ["Phil Vickery"], ["Steve Borthwick"]]}}
{"result": "SELECT T1.Name \nFROM shop AS T1 \nJOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID \nGROUP BY T1.Name \nORDER BY COUNT(T2.Employee_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [["FC Haka"]]}}
{"result": "SELECT T1.Name \nFROM shop AS T1 \nJOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID \nJOIN employee AS T3 ON T2.Employee_ID = T3.Employee_ID \nGROUP BY T1.Name \nORDER BY COUNT(T3.Employee_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [["FC Haka"]]}}
{"result": "SELECT Name \nFROM shop \nWHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)", "match": {"match": true, "result": [["FC Honka"], ["KuPS"], ["IFK Mariehamn"]]}}
{"result": "SELECT T2.Name \nFROM hiring AS T1 \nRIGHT JOIN shop AS T2 \nON T1.Shop_ID = T2.Shop_ID \nWHERE T1.Shop_ID IS NULL", "match": {"match": true, "result": [["FC Honka"], ["KuPS"], ["IFK Mariehamn"]]}}
{"result": "SELECT T3.Name, COUNT(T1.Employee_ID) \nFROM hiring AS T1 \nJOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID \nJOIN employee AS T3 ON T1.Employee_ID = T3.Employee_ID \nGROUP BY T2.Name", "match": {"match": false, "result": [["George Chuter", 2], ["Jason Hobson", 1], ["Matt Stevens", 1], ["Mark Regan", 1], ["Tim Payne", 1], ["Andrew Sheridan", 1]], "gt": [[2, "FC Haka"], [1, "FC Inter"], [1, "FC KooTeePee"], [1, "FC Lahti"], [1, "FF Jaro"], [1, "HJK"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(T1.Employee_ID), T2.Name \nFROM hiring AS T1 \nJOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID", "match": {"match": false, "result": [[7, "FC Haka"]], "gt": [[2, "FC Haka"], [1, "FC Inter"], [1, "FC KooTeePee"], [1, "FC Lahti"], [1, "FF Jaro"], [1, "HJK"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT SUM(Bonus) FROM evaluation", "match": {"match": true, "result": [[19500.0]]}}
{"result": "SELECT SUM(Bonus) FROM evaluation", "match": {"match": true, "result": [[19500.0]]}}
{"result": "SELECT * FROM `hiring`;", "match": {"match": true, "result": [[1, 1, "2009", "T"], [1, 2, "2003", "T"], [8, 3, "2011", "F"], [4, 4, "2012", "T"], [5, 5, "2013", "T"], [2, 6, "2010", "F"], [6, 7, "2008", "T"]]}}
{"result": "SELECT * \nFROM hiring;", "match": {"match": true, "result": [[1, 1, "2009", "T"], [1, 2, "2003", "T"], [8, 3, "2011", "F"], [4, 4, "2012", "T"], [5, 5, "2013", "T"], [2, 6, "2010", "F"], [6, 7, "2008", "T"]]}}
{"result": "SELECT T1.District \nFROM shop AS T1 \nJOIN shop AS T2 ON T1.District = T2.District \nWHERE T1.Number_products < 3000 \n  AND T2.Number_products > 10000", "match": {"match": true, "result": []}}
{"result": "SELECT T.District \nFROM (\n  SELECT District, \n  CASE WHEN Number_products < 3000 THEN 'less_than_3000' \n  WHEN Number_products > 10000 THEN 'more_than_10000' END AS Type\n  FROM shop\n) AS T\nGROUP BY T.District\nHAVING COUNT(DISTINCT Type) = 2", "match": {"match": true, "result": []}}
{"result": "SELECT COUNT(DISTINCT Location) FROM shop", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(DISTINCT Location) FROM shop", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(Document_ID) \nFROM Documents", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(Document_ID) \nFROM Documents", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT Document_ID, Document_Name, Document_Description \nFROM Documents", "match": {"match": true, "result": [[0, "Introduction of OS", "n"], [1, "Understanding DB", "y"], [3, "Summer Show", "u"], [76, "Robbin CV", "y"], [80, "Welcome to NY", "h"], [82, "Data base", "w"], [2394, "Customer reviews", "y"], [3830, "Do not panic", "k"], [33930, "How Google people work", "z"], [50123, "Learning French", "r"], [651512, "How to write a CV", "f"], [801801, "How to read a book", "w"], [3540024, "Palm reading", "y"], [16514113, "A history of Arts", "h"], [385906526, "About Korea", "b"]]}}
{"result": "SELECT Document_ID, Document_Name, Document_Description\nFROM Documents;", "match": {"match": true, "result": [[0, "Introduction of OS", "n"], [1, "Understanding DB", "y"], [3, "Summer Show", "u"], [76, "Robbin CV", "y"], [80, "Welcome to NY", "h"], [82, "Data base", "w"], [2394, "Customer reviews", "y"], [3830, "Do not panic", "k"], [33930, "How Google people work", "z"], [50123, "Learning French", "r"], [651512, "How to write a CV", "f"], [801801, "How to read a book", "w"], [3540024, "Palm reading", "y"], [16514113, "A history of Arts", "h"], [385906526, "About Korea", "b"]]}}
{"result": "SELECT Document_Name, Template_ID\nFROM Documents\nWHERE Document_Description LIKE '%w%';", "match": {"match": true, "result": [["Data base", 11], ["How to read a book", 4]]}}
{"result": "SELECT Document_Name, Template_ID \nFROM Documents \nWHERE Document_Description LIKE '%w%';", "match": {"match": true, "result": [["Data base", 11], ["How to read a book", 4]]}}
{"result": "SELECT Document_ID, Template_ID, Document_Description \nFROM Documents \nWHERE Document_Name = 'Robbin CV';", "match": {"match": true, "result": [[76, 20, "y"]]}}
{"result": "SELECT Document_ID, Template_ID, Document_Description \nFROM Documents \nWHERE Document_Name = 'Robbin CV';", "match": {"match": true, "result": [[76, 20, "y"]]}}
{"result": "SELECT COUNT(DISTINCT t.Template_ID) \nFROM Documents d \nJOIN Templates t ON d.Template_ID = t.Template_ID", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT COUNT(DISTINCT Template_ID) \nFROM Documents", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT COUNT(DISTINCT Document_ID) \nFROM Templates \nJOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Templates.Template_Type_Code = 'PPT'", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(T2.Document_ID) \nFROM Ref_Template_Types AS T1 \nJOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code \nJOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID \nWHERE T1.Template_Type_Code = 'PPT';", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Document_ID"}}
{"result": "SELECT T.Template_ID, COUNT(D.Document_ID) AS Num_Documents\nFROM Templates T\nJOIN Documents D ON T.Template_ID = D.Template_ID\nGROUP BY T.Template_ID", "match": {"match": true, "result": [[1, 1], [4, 1], [6, 1], [7, 1], [8, 1], [10, 1], [11, 2], [14, 2], [20, 1], [21, 1], [22, 1], [25, 2]]}}
{"result": "SELECT Document_ID, COUNT(Document_ID) AS Frequency \nFROM Documents \nGROUP BY Document_ID", "match": {"match": false, "result": [[0, 1], [1, 1], [3, 1], [76, 1], [80, 1], [82, 1], [2394, 1], [3830, 1], [33930, 1], [50123, 1], [651512, 1], [801801, 1], [3540024, 1], [16514113, 1], [385906526, 1]], "gt": [[1, 1], [4, 1], [6, 1], [7, 1], [8, 1], [10, 1], [11, 2], [14, 2], [20, 1], [21, 1], [22, 1], [25, 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.Template_ID, TT.Template_Type_Code\nFROM Templates T\nJOIN Ref_Template_Types TT ON T.Template_Type_Code = TT.Template_Type_Code\nJOIN (\n  SELECT T.Template_ID, COUNT(D.Document_ID) as Document_Count\n  FROM Templates T\n  JOIN Documents D ON T.Template_ID = D.Template_ID\n  GROUP BY T.Template_ID\n) AS T_CTE ON T.Template_ID = T_CTE.Template_ID\nORDER BY T_CTE.Document_Count DESC\nLIMIT 1", "match": {"match": false, "result": [[11, "BK"]], "gt": [[25, "PP"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.Template_ID, T.Template_Type_Code \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID \nGROUP BY T.Template_ID, T.Template_Type_Code \nORDER BY COUNT(*) DESC \nLIMIT 1", "match": {"match": false, "result": [[11, "BK"]], "gt": [[25, "PP"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.Template_ID \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID \nGROUP BY T.Template_ID \nHAVING COUNT(D.Template_ID) > 1", "match": {"match": true, "result": [[11], [14], [25]]}}
{"result": "SELECT T.Template_ID \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID \nGROUP BY T.Template_ID \nHAVING COUNT(D.Document_ID) > 1", "match": {"match": true, "result": [[11], [14], [25]]}}
{"result": "SELECT T.Template_ID \nFROM Templates T \nLEFT JOIN Documents D ON T.Template_ID = D.Template_ID \nWHERE D.Document_ID IS NULL", "match": {"match": true, "result": [[0], [9], [15], [16], [18], [19], [23], [24]]}}
{"result": "SELECT T.Template_ID \nFROM Templates T \nLEFT JOIN Documents D ON T.Template_ID = D.Template_ID \nWHERE D.Template_ID IS NULL", "match": {"match": true, "result": [[0], [9], [15], [16], [18], [19], [23], [24]]}}
{"result": "SELECT COUNT(*) FROM Templates", "match": {"match": true, "result": [[20]]}}
{"result": "SELECT COUNT(Template_ID) FROM Templates", "match": {"match": true, "result": [[20]]}}
{"result": "SELECT Template_ID, Version_Number, Template_Type_Code\nFROM Templates;", "match": {"match": true, "result": [[0, 5, "PP"], [1, 9, "PP"], [4, 4, "BK"], [6, 2, "PPT"], [7, 8, "PPT"], [8, 3, "BK"], [9, 2, "BK"], [10, 1, "PPT"], [11, 6, "BK"], [14, 7, "AD"], [15, 9, "CV"], [16, 5, "CV"], [18, 5, "PP"], [19, 7, "AD"], [20, 6, "BK"], [21, 9, "AD"], [22, 0, "PP"], [23, 2, "BK"], [24, 8, "PP"], [25, 5, "PP"]]}}
{"result": "SELECT Template_ID, Version_Number, Template_Type_Code \nFROM Templates;", "match": {"match": true, "result": [[0, 5, "PP"], [1, 9, "PP"], [4, 4, "BK"], [6, 2, "PPT"], [7, 8, "PPT"], [8, 3, "BK"], [9, 2, "BK"], [10, 1, "PPT"], [11, 6, "BK"], [14, 7, "AD"], [15, 9, "CV"], [16, 5, "CV"], [18, 5, "PP"], [19, 7, "AD"], [20, 6, "BK"], [21, 9, "AD"], [22, 0, "PP"], [23, 2, "BK"], [24, 8, "PP"], [25, 5, "PP"]]}}
{"result": "SELECT DISTINCT T.Template_Type_Code\nFROM Templates T", "match": {"match": true, "result": [["PP"], ["BK"], ["PPT"], ["AD"], ["CV"]]}}
{"result": "SELECT DISTINCT Template_Type_Code \nFROM Ref_Template_Types", "match": {"match": false, "result": [["AD"], ["BK"], ["CV"], ["PP"], ["PPT"]], "gt": [["PP"], ["BK"], ["PPT"], ["AD"], ["CV"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Template_ID \nFROM Templates T1 \nINNER JOIN Ref_Template_Types T2 ON T1.Template_Type_Code = T2.Template_Type_Code \nWHERE T2.Template_Type_Code IN ('PP', 'PPT')", "match": {"match": false, "result": [[0], [1], [18], [22], [24], [25], [6], [7], [10]], "gt": [[0], [1], [6], [7], [10], [18], [22], [24], [25]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Template_ID \nFROM Templates \nWHERE Template_Type_Code IN ('PP', 'PPT')", "match": {"match": true, "result": [[0], [1], [6], [7], [10], [18], [22], [24], [25]]}}
{"result": "SELECT COUNT(Template_ID) \nFROM Templates \nWHERE Template_Type_Code = 'CV';", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(Template_ID) \nFROM Templates \nWHERE Template_Type_Code = 'CV';", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT Version_Number, Template_Type_Code\nFROM Templates\nWHERE Version_Number > 5;", "match": {"match": true, "result": [[9, "PP"], [8, "PPT"], [6, "BK"], [7, "AD"], [9, "CV"], [7, "AD"], [6, "BK"], [9, "AD"], [8, "PP"]]}}
{"result": "SELECT Version_Number, Template_Type_Code \nFROM Templates \nWHERE Version_Number > 5;", "match": {"match": true, "result": [[9, "PP"], [8, "PPT"], [6, "BK"], [7, "AD"], [9, "CV"], [7, "AD"], [6, "BK"], [9, "AD"], [8, "PP"]]}}
{"result": "SELECT \n    rt.Template_Type_Code, \n    COUNT(t.Template_ID) AS Number_Of_Templates\nFROM \n    Templates t\nJOIN \n    Ref_Template_Types rt ON t.Template_Type_Code = rt.Template_Type_Code\nGROUP BY \n    rt.Template_Type_Code", "match": {"match": true, "result": [["AD", 3], ["BK", 6], ["CV", 2], ["PP", 6], ["PPT", 3]]}}
{"result": "SELECT \n  rt.Template_Type_Code, \n  COUNT(t.Template_ID) AS Num_Templates\nFROM \n  Ref_Template_Types rt \n  JOIN Templates t ON rt.Template_Type_Code = t.Template_Type_Code\nGROUP BY \n  rt.Template_Type_Code", "match": {"match": true, "result": [["AD", 3], ["BK", 6], ["CV", 2], ["PP", 6], ["PPT", 3]]}}
{"result": "SELECT Template_Type_Code \nFROM Templates \nGROUP BY Template_Type_Code \nORDER BY COUNT(*) DESC \nLIMIT 1", "match": {"match": true, "result": [["PP"]]}}
{"result": "SELECT T1.Template_Type_Code \nFROM Ref_Template_Types AS T1 \nJOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code \nGROUP BY T1.Template_Type_Code \nORDER BY COUNT(T2.Template_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [["PP"]]}}
{"result": "SELECT Template_Type_Code\nFROM Templates \nGROUP BY Template_Type_Code\nHAVING COUNT(Template_ID) < 3;", "match": {"match": true, "result": [["CV"]]}}
{"result": "SELECT DISTINCT Template_Type_Code \nFROM Templates \nGROUP BY Template_Type_Code \nHAVING COUNT(Template_ID) < 3;", "match": {"match": true, "result": [["CV"]]}}
{"result": "SELECT MIN(Version_Number), Template_Type_Code \nFROM Templates", "match": {"match": true, "result": [[0, "PP"]]}}
{"result": "SELECT MIN(Version_Number), T.Template_Type_Code \nFROM Templates T \nJOIN Ref_Template_Types RT ON T.Template_Type_Code = RT.Template_Type_Code", "match": {"match": true, "result": [[0, "PP"]]}}
{"result": "SELECT T.Template_Type_Code \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID \nWHERE D.Document_Name = 'Data base';", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT T.Template_Type_Code \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID \nWHERE D.Document_Name = 'Data base';", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT DISTINCT Document_Name \nFROM Documents \nJOIN Templates ON Documents.Template_ID = Templates.Template_ID \nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \nWHERE Ref_Template_Types.Template_Type_Code = 'BK';", "match": {"match": true, "result": [["Robbin CV"], ["Data base"], ["How to read a book"], ["Palm reading"], ["About Korea"]]}}
{"result": "SELECT T1.Document_Name \nFROM Documents AS T1 \nJOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID \nWHERE T2.Template_Type_Code = 'BK';", "match": {"match": true, "result": [["Robbin CV"], ["Data base"], ["How to read a book"], ["Palm reading"], ["About Korea"]]}}
{"result": "SELECT \n    T1.Template_Type_Code,\n    COUNT(DISTINCT T2.Document_ID) AS Document_Count\nFROM \n    Ref_Template_Types T1\nJOIN \n    Templates T2 ON T1.Template_Type_Code = T2.Template_Type_Code\nJOIN \n    Documents T3 ON T2.Template_ID = T3.Template_ID\nGROUP BY \n    T1.Template_Type_Code;", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Document_ID"}}
{"result": "SELECT \n  RTT.Template_Type_Code,\n  RTT.Template_Type_Description,\n  COUNT(D.Documents_ID) AS Number_Of_Documents\nFROM \n  Ref_Template_Types RTT\n  LEFT JOIN Templates T ON RTT.Template_Type_Code = T.Template_Type_Code\n  LEFT JOIN Documents D ON T.Template_ID = D.Template_ID\nGROUP BY \n  RTT.Template_Type_Code, RTT.Template_Type_Description", "match": {"match": false, "error": "Query execution failed with error: no such column: D.Documents_ID"}}
{"result": "SELECT T.Template_Type_Code, COUNT(D.Document_ID) as Count\nFROM Templates T\nJOIN Documents D ON T.Template_ID = D.Template_ID\nGROUP BY T.Template_Type_Code\nORDER BY Count DESC\nLIMIT 1", "match": {"match": false, "result": [["BK", 5]], "gt": [["BK"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Template_Type_Code\nFROM Ref_Template_Types AS T1\nJOIN (\n  SELECT T2.Template_Type_Code, COUNT(DISTINCT T3.Document_ID) AS Document_Count\n  FROM Templates AS T2\n  JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID\n  GROUP BY T2.Template_Type_Code\n) AS T4 ON T1.Template_Type_Code = T4.Template_Type_Code\nORDER BY T4.Document_Count DESC\nLIMIT 1", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT T.Template_Type_Code \nFROM Ref_Template_Types T \nLEFT JOIN Documents D ON T.Template_Type_Code = D.Template_ID \nWHERE D.Document_ID IS NULL", "match": {"match": false, "result": [["AD"], ["BK"], ["CV"], ["PP"], ["PPT"]], "gt": [["CV"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Template_Type_Code \nFROM Ref_Template_Types \nWHERE Template_Type_Code NOT IN (\n  SELECT T.Template_Type_Code \n  FROM Templates T \n  JOIN Documents D ON T.Template_ID = D.Template_ID\n);", "match": {"match": true, "result": [["CV"]]}}
{"result": "SELECT Template_Type_Code, Template_Type_Description \nFROM Ref_Template_Types;", "match": {"match": true, "result": [["PPT", "Presentation"], ["CV", "CV"], ["AD", "Advertisement"], ["PP", "Paper"], ["BK", "Book"]]}}
{"result": "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types", "match": {"match": true, "result": [["PPT", "Presentation"], ["CV", "CV"], ["AD", "Advertisement"], ["PP", "Paper"], ["BK", "Book"]]}}
{"result": "SELECT Template_Type_Description \nFROM Ref_Template_Types \nWHERE Template_Type_Code = 'AD';", "match": {"match": true, "result": [["Advertisement"]]}}
{"result": "SELECT Template_Type_Description \nFROM Ref_Template_Types \nWHERE Template_Type_Code = 'AD';", "match": {"match": true, "result": [["Advertisement"]]}}
{"result": "SELECT Template_Type_Code\nFROM Ref_Template_Types\nWHERE Template_Type_Description = 'Book';", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT Template_Type_Code \nFROM Ref_Template_Types \nWHERE Template_Type_Description = 'Book';", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT DISTINCT T.Template_Type_Description\nFROM Ref_Template_Types T\nJOIN Templates M ON T.Template_Type_Code = M.Template_Type_Code\nJOIN Documents D ON M.Template_ID = D.Template_ID", "match": {"match": true, "result": [["Presentation"], ["Paper"], ["Book"], ["Advertisement"]]}}
{"result": "SELECT DISTINCT T.Template_Type_Description \nFROM Ref_Template_Types T \nJOIN Templates template ON T.Template_Type_Code = template.Template_Type_Code \nJOIN Documents document ON template.Template_ID = document.Template_ID", "match": {"match": true, "result": [["Presentation"], ["Paper"], ["Book"], ["Advertisement"]]}}
{"result": "SELECT T.Template_ID \nFROM Templates T \nJOIN Ref_Template_Types RTT ON T.Template_Type_Code = RTT.Template_Type_Code \nWHERE RTT.Template_Type_Description = 'Presentation';", "match": {"match": true, "result": [[6], [7], [10]]}}
{"result": "SELECT T2.Template_ID\nFROM Ref_Template_Types AS T1\nJOIN Templates AS T2 ON T2.Template_Type_Code = T1.Template_Type_Code\nWHERE T1.Template_Type_Description = 'Presentation';", "match": {"match": true, "result": [[6], [7], [10]]}}
{"result": "SELECT COUNT(Paragraph_ID) AS Total_Paragraphs FROM Paragraphs", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) FROM Paragraphs", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(Paragraph_ID) \nFROM Paragraphs \nWHERE Document_ID IN (\n  SELECT Document_ID \n  FROM Documents \n  WHERE Document_Name = 'Summer Show'\n);", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(P.Paragraph_ID) \nFROM Paragraphs P \nJOIN Documents D ON P.Document_ID = D.Document_ID \nWHERE D.Document_Name = 'Summer Show';", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT Paragraph_ID, Paragraph_Text, Other_Details \nFROM Paragraphs \nWHERE Paragraph_Text LIKE '%Korea%';", "match": {"match": false, "result": [[7, "Korea", null], [510442723, "Korea", null]], "gt": [[null], [null]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Other_Details \nFROM Paragraphs \nWHERE Paragraph_Text LIKE '%Korea%'", "match": {"match": true, "result": [[null], [null]]}}
{"result": "SELECT P.Paragraph_ID, P.Paragraph_Text\nFROM Paragraphs P\nJOIN Documents D ON P.Document_ID = D.Document_ID\nWHERE D.Document_Name = 'Welcome to NY'", "match": {"match": true, "result": [[16615, "Japan"], [608931827, "Micronesia"]]}}
{"result": "SELECT Paragraph_ID, Paragraph_Text\nFROM Paragraphs\nINNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID\nWHERE Documents.Document_Name = 'Welcome to NY'", "match": {"match": true, "result": [[16615, "Japan"], [608931827, "Micronesia"]]}}
{"result": "SELECT P.Paragraph_Text \nFROM Paragraphs P \nINNER JOIN Documents D ON P.Document_ID = D.Document_ID \nWHERE D.Document_Name = 'Customer reviews';", "match": {"match": true, "result": [["Korea"], ["Ukraine"], ["Korea"]]}}
{"result": "SELECT Paragraph_Text \nFROM Paragraphs \nJOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID \nWHERE Documents.Document_Name = 'Customer reviews';", "match": {"match": true, "result": [["Korea"], ["Ukraine"], ["Korea"]]}}
{"result": "SELECT \n  Document_ID, \n  COUNT(Paragraph_ID) AS Paragraph_Count\nFROM \n  Paragraphs\nGROUP BY \n  Document_ID\nORDER BY \n  Document_ID", "match": {"match": true, "result": [[3, 1], [80, 2], [2394, 3], [3830, 1], [33930, 1], [50123, 1], [651512, 2], [3540024, 1], [16514113, 2], [385906526, 1]]}}
{"result": "SELECT \n    Document_ID, \n    COUNT(Parent_Paragraph_ID) AS Paragraph_Count\nFROM \n    Paragraphs\nGROUP BY \n    Document_ID\nORDER BY \n    Document_ID", "match": {"match": false, "error": "Query execution failed with error: no such column: Parent_Paragraph_ID"}}
{"result": "SELECT \n  D.Document_ID, \n  D.Document_Name, \n  COUNT(P.Paragraph_ID) AS Num_Paragraphs\nFROM \n  Documents D\n  LEFT JOIN Paragraphs P ON D.Document_ID = P.Document_ID\nGROUP BY \n  D.Document_ID, \n  D.Document_Name", "match": {"match": false, "result": [[0, "Introduction of OS", 0], [1, "Understanding DB", 0], [3, "Summer Show", 1], [76, "Robbin CV", 0], [80, "Welcome to NY", 2], [82, "Data base", 0], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [801801, "How to read a book", 0], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "gt": [[3, "Summer Show", 1], [80, "Welcome to NY", 2], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n  D.Document_ID, \n  D.Document_Name, \n  COUNT(P.Paragraph_ID) AS Paragraph_Count\nFROM \n  Documents D\n  LEFT JOIN Paragraphs P ON D.Document_ID = P.Document_ID\nGROUP BY \n  D.Document_ID, \n  D.Document_Name", "match": {"match": false, "result": [[0, "Introduction of OS", 0], [1, "Understanding DB", 0], [3, "Summer Show", 1], [76, "Robbin CV", 0], [80, "Welcome to NY", 2], [82, "Data base", 0], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [801801, "How to read a book", 0], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "gt": [[3, "Summer Show", 1], [80, "Welcome to NY", 2], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Document_ID\nFROM Paragraphs\nGROUP BY Document_ID\nHAVING COUNT(Document_ID) >= 2", "match": {"match": true, "result": [[80], [2394], [651512], [16514113]]}}
{"result": "SELECT Document_ID \nFROM Documents \nWHERE Document_ID IN (\n  SELECT Document_ID \n  FROM Paragraphs \n  GROUP BY Document_ID \n  HAVING COUNT(Document_ID) >= 2\n);", "match": {"match": true, "result": [[80], [2394], [651512], [16514113]]}}
{"result": "SELECT Document_ID, Document_Name \nFROM Documents \nJOIN (SELECT Document_ID, COUNT(*) as Paragraphs FROM Paragraphs GROUP BY Document_ID) as ParagraphCounts \nON Documents.Document_ID = ParagraphCounts.Document_ID \nORDER BY ParagraphCounts.Paragraphs DESC \nLIMIT 1;", "match": {"match": false, "error": "Query execution failed with error: ambiguous column name: Document_ID"}}
{"result": "SELECT T1.Document_ID, T1.Document_Name \nFROM Documents AS T1 \nJOIN ( SELECT Document_ID, COUNT(*) as Paragraph_Count \n       FROM Paragraphs \n       GROUP BY Document_ID \n     ) AS T2 \nON T1.Document_ID = T2.Document_ID \nORDER BY T2.Paragraph_Count DESC \nLIMIT 1;", "match": {"match": true, "result": [[2394, "Customer reviews"]]}}
{"result": "SELECT Document_ID \nFROM Paragraphs \nGROUP BY Document_ID \nORDER BY COUNT(Document_ID) ASC \nLIMIT 1;", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Document_ID \nFROM (\n  SELECT Document_ID, COUNT(*) as paragraph_count \n  FROM Paragraphs \n  GROUP BY Document_ID\n) as doc_paragraph_count \nORDER BY paragraph_count \nLIMIT 1", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Document_ID \nFROM Paragraphs \nGROUP BY Document_ID \nHAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2", "match": {"match": true, "result": [[3], [80], [3830], [33930], [50123], [651512], [3540024], [16514113], [385906526]]}}
{"result": "SELECT T1.Document_ID \nFROM Documents AS T1 \nINNER JOIN Paragraphs AS T2 \nON T1.Document_ID = T2.Document_ID \nGROUP BY T1.Document_ID \nHAVING COUNT(T2.Paragraph_ID) BETWEEN 1 AND 2", "match": {"match": true, "result": [[3], [80], [3830], [33930], [50123], [651512], [3540024], [16514113], [385906526]]}}
{"result": "SELECT D.Document_ID\nFROM Paragraphs P\nJOIN Documents D ON P.Document_ID = D.Document_ID\nWHERE P.Paragraph_Text IN ('Brazil', 'Ireland')", "match": {"match": false, "result": [[16514113], [16514113]], "gt": [[16514113]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T.Document_ID \nFROM Documents D\nJOIN Paragraphs P ON D.Document_ID = P.Document_ID\nWHERE P.Paragraph_Text LIKE '%Brazil%' \n  AND P.Paragraph_ID IN (\n    SELECT P2.Paragraph_ID \n    FROM Paragraphs P2 \n    WHERE P2.Paragraph_Text LIKE '%Ireland%' \n  );", "match": {"match": false, "error": "Query execution failed with error: no such column: T.Document_ID"}}
{"result": "SELECT COUNT(Teacher_ID) FROM teacher", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT COUNT(Teacher_ID) FROM teacher", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT Name FROM teacher ORDER BY Age ASC", "match": {"match": true, "result": [["Vicente Carretero"], ["Gustaaf Deloor"], ["Joseph Huts"], ["John Deloor"], ["Lucy Wong"], ["Anne Walker"], ["Kearsley Brown"]]}}
{"result": "SELECT Name FROM teacher ORDER BY Age ASC", "match": {"match": true, "result": [["Vicente Carretero"], ["Gustaaf Deloor"], ["Joseph Huts"], ["John Deloor"], ["Lucy Wong"], ["Anne Walker"], ["Kearsley Brown"]]}}
{"result": "SELECT \"Age\", \"Hometown\" FROM \"teacher\";", "match": {"match": true, "result": [["32", "Blackrod Urban District"], ["29", "Bolton County Borough"], ["26", "Farnworth Municipal Borough"], ["33", "Horwich Urban District"], ["45", "Kearsley Urban District"], ["41", "Little Lever Urban District"], ["39", "Turton Urban District"]]}}
{"result": "SELECT Age, Hometown FROM teacher", "match": {"match": true, "result": [["32", "Blackrod Urban District"], ["29", "Bolton County Borough"], ["26", "Farnworth Municipal Borough"], ["33", "Horwich Urban District"], ["45", "Kearsley Urban District"], ["41", "Little Lever Urban District"], ["39", "Turton Urban District"]]}}
{"result": "SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'", "match": {"match": false, "result": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Lucy Wong"]], "gt": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Anne Walker"], ["Lucy Wong"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'", "match": {"match": false, "result": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Lucy Wong"]], "gt": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Anne Walker"], ["Lucy Wong"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name \nFROM teacher \nWHERE Age = '32' OR Age = '33'", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT Name \nFROM teacher \nWHERE Age = '32' OR Age = '33'", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT Hometown FROM teacher ORDER BY Age DESC LIMIT 1", "match": {"match": false, "result": [["Kearsley Urban District"]], "gt": [["Farnworth Municipal Borough"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Hometown FROM teacher WHERE Age = 'youngest'", "match": {"match": false, "result": [], "gt": [["Farnworth Municipal Borough"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Hometown, COUNT(Teacher_ID) \nFROM teacher \nGROUP BY Hometown", "match": {"match": true, "result": [["Blackrod Urban District", 1], ["Bolton County Borough", 1], ["Farnworth Municipal Borough", 1], ["Horwich Urban District", 1], ["Kearsley Urban District", 1], ["Little Lever Urban District", 1], ["Turton Urban District", 1]]}}
{"result": "SELECT COUNT(Teacher_ID) , Hometown \nFROM teacher \nGROUP BY Hometown", "match": {"match": false, "result": [[1, "Blackrod Urban District"], [1, "Bolton County Borough"], [1, "Farnworth Municipal Borough"], [1, "Horwich Urban District"], [1, "Kearsley Urban District"], [1, "Little Lever Urban District"], [1, "Turton Urban District"]], "gt": [["Blackrod Urban District", 1], ["Bolton County Borough", 1], ["Farnworth Municipal Borough", 1], ["Horwich Urban District", 1], ["Kearsley Urban District", 1], ["Little Lever Urban District", 1], ["Turton Urban District", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(Hometown) DESC LIMIT 1", "match": {"match": true, "result": [["Turton Urban District"]]}}
{"result": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "match": {"match": true, "result": [["Turton Urban District"]]}}
{"result": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) >= 2", "match": {"match": true, "result": []}}
{"result": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) >= 2", "match": {"match": true, "result": []}}
{"result": "SELECT T1.Name, T2.Course\nFROM teacher AS T1\nJOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID\nJOIN course AS T3 ON T3.Course_ID = T2.Course_ID", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Course"}}
{"result": "SELECT T1.Name, T2.Course \nFROM teacher AS T1 \nJOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nJOIN course AS T3 ON T2.Course_ID = T3.Course_ID", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Course"}}
{"result": "SELECT T2.Name, T1.`Course` \nFROM course_arrange AS T1 \nJOIN teacher AS T2 ON T1.`Course_ID` = T2.`Teacher_ID` \nORDER BY T2.Name ASC", "match": {"match": false, "error": "Query execution failed with error: no such column: T1.Course"}}
{"result": "SELECT DISTINCT T2.Name, T1.Course \nFROM course_arrange AS T1 \nJOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nORDER BY T2.Name ASC", "match": {"match": false, "error": "Query execution failed with error: no such column: T1.Course"}}
{"result": "SELECT T2.Name \nFROM course_arrange AS T1 \nJOIN course AS T2 \nON T1.Course_ID = T2.Course_ID \nJOIN teacher AS T3 \nON T1.Teacher_ID = T3.Teacher_ID \nJOIN ( SELECT Course_ID FROM course WHERE Course = 'math' ) AS T4 \nON T1.Course_ID = T4.Course_ID", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Name"}}
{"result": "SELECT t.Name \nFROM course_arrange ca \nJOIN course c ON ca.Course_ID = c.Course_ID \nJOIN teacher t ON ca.Teacher_ID = t.Teacher_ID \nWHERE c.Course = 'math';", "match": {"match": false, "result": [], "gt": [["Kearsley Brown"], ["Vicente Carretero"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name, COUNT(T2.Course_ID) \nFROM teacher AS T1 \nJOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T1.Name", "match": {"match": true, "result": [["Anne Walker", 2], ["Gustaaf Deloor", 1], ["Kearsley Brown", 1], ["Lucy Wong", 1], ["Vicente Carretero", 1]]}}
{"result": "SELECT T1.Name, COUNT(T2.Course_ID) \nFROM teacher AS T1 \nINNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T1.Name", "match": {"match": true, "result": [["Anne Walker", 2], ["Gustaaf Deloor", 1], ["Kearsley Brown", 1], ["Lucy Wong", 1], ["Vicente Carretero", 1]]}}
{"result": "SELECT T2.Name \nFROM course_arrange AS T1 \nJOIN teacher AS T2 \nON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T1.Teacher_ID \nHAVING COUNT(DISTINCT T1.Course_ID) >= 2", "match": {"match": true, "result": [["Anne Walker"]]}}
{"result": "SELECT T2.Name \nFROM course_arrange AS T1 \nJOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T1.Teacher_ID \nHAVING COUNT(DISTINCT T1.Course_ID) >= 2", "match": {"match": true, "result": [["Anne Walker"]]}}
{"result": "SELECT Name \nFROM teacher \nWHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange);", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT Name \nFROM teacher \nWHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT COUNT(ID) FROM visitor WHERE Age < 30", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Name \nFROM visitor \nWHERE Level_of_membership > 4 \nORDER BY Level_of_membership DESC", "match": {"match": true, "result": [["Gonzalo Higua\u00edn "], ["Fernando Gago"], ["Guti Midfielder"]]}}
{"result": "SELECT AVG(Age) \nFROM visitor \nWHERE Level_of_membership <= 4;", "match": {"match": true, "result": [[36.0]]}}
{"result": "SELECT Name, Level_of_membership \nFROM visitor \nWHERE Level_of_membership > 4 \nORDER BY Age DESC;", "match": {"match": true, "result": [["Fernando Gago", 6], ["Gonzalo Higua\u00edn ", 8], ["Guti Midfielder", 5]]}}
{"result": "SELECT Museum_ID, Name \nFROM museum \nORDER BY Num_of_Staff DESC \nLIMIT 1;", "match": {"match": true, "result": [[1, "Plaza Museum"]]}}
{"result": "SELECT AVG(Num_of_Staff) \nFROM museum \nWHERE Open_Year < '2009';", "match": {"match": true, "result": [[31.333333333333332]]}}
{"result": "SELECT Open_Year, Num_of_Staff \nFROM museum \nWHERE Name = 'Plaza Museum';", "match": {"match": false, "result": [["2000", 62]], "gt": [[62, "2000"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name \nFROM museum \nWHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) \n                      FROM museum \n                      WHERE Open_Year > '2010')", "match": {"match": true, "result": [["Plaza Museum"], ["Capital Plaza Museum"], ["Jefferson Development Museum"]]}}
{"result": "SELECT DISTINCT T1.ID, T1.Name, T1.Age \nFROM visitor AS T1 \nJOIN visit AS T2 ON T1.ID = T2.visitor_ID \nGROUP BY T2.visitor_ID \nHAVING COUNT(DISTINCT T2.Museum_ID) > 1", "match": {"match": true, "result": [[3, "Arjen Robben", 27], [5, "Fernando Gago", 36], [6, "Rafael van der Vaart", 25]]}}
{"result": "SELECT T.visitor_ID, T.Name, T.Level_of_membership\nFROM visitor AS T\nJOIN visit AS V ON T.ID = V.visitor_ID\nJOIN (\n  SELECT visitor_ID, SUM(Total_spent) as Total_spent\n  FROM visit\n  GROUP BY visitor_ID\n  ORDER BY Total_spent DESC\n  LIMIT 1\n) AS MaxSpent ON V.visitor_ID = MaxSpent.visitor_ID", "match": {"match": false, "error": "Query execution failed with error: no such column: T.visitor_ID"}}
{"result": "SELECT T1.Museum_ID, T1.Name \nFROM museum AS T1 \nJOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID \nGROUP BY T1.Museum_ID, T1.Name \nORDER BY COUNT(T2.Museum_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [[2, "Capital Plaza Museum"]]}}
{"result": "SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)", "match": {"match": true, "result": [["Jefferson Development Museum"], ["RiverPark Museum"], ["Place Tower Museum"], ["Central City District Residential Museum"]]}}
{"result": "SELECT T2.Name, T2.Age \nFROM visit AS T1 \nJOIN visitor AS T2 ON T1.visitor_ID = T2.ID \nWHERE (T1.Num_of_Ticket, T1.Museum_ID) IN (SELECT Num_of_Ticket, Museum_ID FROM visit GROUP BY Museum_ID ORDER BY Num_of_Ticket DESC LIMIT 1)", "match": {"match": true, "result": [["Arjen Robben", 27]]}}
{"result": "SELECT avg(Num_of_Ticket) as \"Average Number of Tickets\", max(Num_of_Ticket) as \"Maximum Number of Tickets\" \nFROM `visit`;", "match": {"match": true, "result": [[10.5, 24]]}}
{"result": "SELECT SUM(T1.Total_spent) \nFROM visit AS T1 \nINNER JOIN visitor AS T2 ON T1.visitor_ID = T2.ID \nWHERE T2.Level_of_membership = 1;", "match": {"match": true, "result": [[570.84]]}}
{"result": "SELECT T2.Name \nFROM visit AS T1 \nINNER JOIN visitor AS T2 ON T1.visitor_ID = T2.ID \nINNER JOIN museum AS T3 ON T1.Museum_ID = T3.Museum_ID \nWHERE (T3.Open_Year < '2009' \nOR T3.Open_Year > '2011')", "match": {"match": false, "result": [["Fernando Gago"], ["Arjen Robben"], ["Fernando Gago"]], "gt": [["Fernando Gago"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) \nFROM visitor \nWHERE ID NOT IN (SELECT visitor_ID \n                 FROM visit \n                 WHERE Museum_ID IN (SELECT Museum_ID \n                                     FROM museum \n                                     WHERE Open_Year > '2010'));", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(Museum_ID) \nFROM museum \nWHERE Open_Year > '2013' OR Open_Year < '2008';", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(*) \nFROM ship \nWHERE disposition_of_ship = 'Captured';", "match": {"match": true, "result": [[4]]}}
{"result": "SELECT name, tonnage FROM ship ORDER BY name DESC", "match": {"match": true, "result": [["Three Brothers", "t"], ["Mary", "t"], ["Lettice", "t"], ["HMS Avon", "391"], ["HMS Atalanta", "225"], ["Bon Accord", "t"], ["Bacchus", "t"]]}}
{"result": "SELECT name, date, result FROM battle", "match": {"match": false, "result": [["Battle of Adrianople", "14 April 1205", "Bulgarian victory"], ["Battle of Serres", "June 1205", "Bulgarian victory"], ["Battle of Rusion", "31 January 1206", "Bulgarian victory"], ["Battle of Rodosto", "February 1206", "Bulgarian victory"], ["Battle of Messinopolis", "4 September 1207", "Bulgarian victory"], ["Battle of Boruy", "June 1205", "Bulgarian victory"], ["Battle of Philippopolis", "31 June 1208", "Latin victory"], ["Siege of Constantinople", "1235", "Two Year Truce"]], "gt": [["Battle of Adrianople", "14 April 1205"], ["Battle of Serres", "June 1205"], ["Battle of Rusion", "31 January 1206"], ["Battle of Rodosto", "February 1206"], ["Battle of Messinopolis", "4 September 1207"], ["Battle of Boruy", "June 1205"], ["Battle of Philippopolis", "31 June 1208"], ["Siege of Constantinople", "1235"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(killed) as max_death_toll, MIN(killed) as min_death_toll \nFROM death", "match": {"match": true, "result": [[29, 0]]}}
{"result": "SELECT AVG(injured) FROM death", "match": {"match": true, "result": [[1.0769230769230769]]}}
{"result": "SELECT note, killed, injured \nFROM death \nWHERE caused_by_ship_id IN (SELECT id FROM ship WHERE tonnage = 't')", "match": {"match": false, "result": [["Dantewada, Chhattisgarh", 8, 0], ["Dantewada, Chhattisgarh", 3, 0], ["Erraboru, Chhattisgarh", 25, 0], ["East Champaran, Bihar", 2, 0], ["Dantewada, Chhattisgarh", 0, 0], ["Dantewada, Chhattisgarh", 4, 5], ["Kanker, Chhattisgarh", 0, 0], ["Dantewada, Chhattisgarh", 29, 0], ["WestMidnapore, West Bengal", 0, 0], ["Bastar, Chattisgarh", 0, 0], ["Bokaro, Jharkhand", 14, 0]], "gt": [[8, 0], [3, 0], [25, 0], [2, 0], [0, 0], [4, 5], [0, 0], [29, 0], [0, 0], [0, 0], [14, 0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.name, T1.result \nFROM battle AS T1 \nWHERE T1.bulgarian_commander != 'Boril'", "match": {"match": true, "result": [["Battle of Adrianople", "Bulgarian victory"], ["Battle of Serres", "Bulgarian victory"], ["Battle of Rusion", "Bulgarian victory"], ["Battle of Rodosto", "Bulgarian victory"], ["Battle of Messinopolis", "Bulgarian victory"], ["Siege of Constantinople", "Two Year Truce"]]}}
{"result": "SELECT T2.id, T1.name \nFROM ship AS T1 \nJOIN battle AS T2 ON T1.lost_in_battle = T2.id \nWHERE T1.ship_type = 'Brig'", "match": {"match": false, "result": [[8, "Lettice"], [7, "Bon Accord"], [6, "Mary"], [5, "Three Brothers"], [4, "Bacchus"]], "gt": [[8, "Siege of Constantinople"], [7, "Battle of Philippopolis"], [6, "Battle of Boruy"], [5, "Battle of Messinopolis"], [4, "Battle of Rodosto"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.id, T1.name \nFROM battle AS T1 \nJOIN death AS T2 ON T1.id = T2.caused_by_ship_id \nWHERE T2.killed > 10", "match": {"match": false, "result": [[3, "Battle of Rusion"], [1, "Battle of Adrianople"], [5, "Battle of Messinopolis"]], "gt": [[5, "Battle of Messinopolis"], [6, "Battle of Boruy"], [8, "Siege of Constantinople"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT caused_by_ship_id, name FROM ship \nJOIN death ON ship.id = death.caused_by_ship_id \nGROUP BY ship.id \nORDER BY injured DESC \nLIMIT 1", "match": {"match": false, "result": [[6, "Bacchus"]], "gt": [[5, "Three Brothers"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT name \nFROM battle \nWHERE bulgarian_commander = 'Kaloyan' \n  AND latin_commander = 'Baldwin I';", "match": {"match": true, "result": [["Battle of Adrianople"]]}}
{"result": "SELECT COUNT(DISTINCT result) FROM battle", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(id) \nFROM battle \nWHERE id NOT IN (\n  SELECT lost_in_battle \n  FROM ship \n  WHERE tonnage = '225'\n);", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT T2.name, T2.date \nFROM ship AS T1 \nJOIN battle AS T2 ON T1.lost_in_battle = T2.id \nWHERE T1.name = 'Lettice' OR T1.name = 'HMS Atalanta';", "match": {"match": false, "result": [["Siege of Constantinople", "1235"], ["Siege of Constantinople", "1235"]], "gt": [["Siege of Constantinople", "1235"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.name, T1.result, T1.bulgarian_commander \nFROM battle AS T1 \nLEFT JOIN ship AS T2 ON T1.id = T2.lost_in_battle \nWHERE T2.location != 'English Channel';", "match": {"match": false, "result": [["Battle of Messinopolis", "Bulgarian victory", "Unknown"], ["Siege of Constantinople", "Two Year Truce", "Ivan Asen II"]], "gt": [["Battle of Adrianople", "Bulgarian victory", "Kaloyan"], ["Battle of Rusion", "Bulgarian victory", "Kaloyan"], ["Battle of Serres", "Bulgarian victory", "Kaloyan"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT note FROM death WHERE note LIKE '%East%'", "match": {"match": true, "result": [["East Champaran, Bihar"]]}}
{"result": "SELECT line_1, line_2 FROM Addresses", "match": {"match": true, "result": [["2294 Grant Square Apt. 235", "Apt. 370"], ["3999 Aufderhar Ways Suite 593", "Apt. 388"], ["67942 Carlotta Ferry Apt. 686", "Apt. 583"], ["0144 Lamar Plaza Apt. 346", "Suite 703"], ["858 Peggie Bypass Suite 212", "Apt. 335"], ["16998 Mraz Lodge", "Apt. 689"], ["193 Marlin Brook", "Apt. 406"], ["202 Hessel Views Apt. 468", "Apt. 305"], ["0643 Muller Vista", "Suite 383"], ["7081 Eda Center", "Suite 830"], ["9283 Schulist Falls Apt. 037", "Suite 239"], ["979 Haag Shores Suite 656", "Apt. 468"], ["492 Wilkinson Route", "Suite 865"], ["186 Evan Motorway Apt. 409", "Suite 079"], ["74046 Metz Walk Apt. 113", "Suite 674"]]}}
{"result": "SELECT line_1, line_2 FROM Addresses", "match": {"match": true, "result": [["2294 Grant Square Apt. 235", "Apt. 370"], ["3999 Aufderhar Ways Suite 593", "Apt. 388"], ["67942 Carlotta Ferry Apt. 686", "Apt. 583"], ["0144 Lamar Plaza Apt. 346", "Suite 703"], ["858 Peggie Bypass Suite 212", "Apt. 335"], ["16998 Mraz Lodge", "Apt. 689"], ["193 Marlin Brook", "Apt. 406"], ["202 Hessel Views Apt. 468", "Apt. 305"], ["0643 Muller Vista", "Suite 383"], ["7081 Eda Center", "Suite 830"], ["9283 Schulist Falls Apt. 037", "Suite 239"], ["979 Haag Shores Suite 656", "Apt. 468"], ["492 Wilkinson Route", "Suite 865"], ["186 Evan Motorway Apt. 409", "Suite 079"], ["74046 Metz Walk Apt. 113", "Suite 674"]]}}
{"result": "SELECT COUNT(course_id) FROM Courses", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) FROM Courses", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT T1.course_description \nFROM Courses AS T1 \nJOIN Sections AS T2 ON T2.course_id = T1.course_id \nWHERE T1.course_name = 'Math'", "match": {"match": false, "result": [], "gt": [["q"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.course_description \nFROM Courses AS T1 \nJOIN Sections AS T2 ON T1.course_id = T2.course_id \nWHERE T2.section_name LIKE '%Math%'", "match": {"match": false, "result": [], "gt": [["q"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.zip_postcode \nFROM Addresses AS T1 \nJOIN Students AS T2 ON T2.permanent_address_id = T1.address_id \nWHERE T1.city = 'Port Chelsea'", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.zip_postcode"}}
{"result": "SELECT zip_postcode \nFROM Addresses \nWHERE city = 'Port Chelsea';", "match": {"match": true, "result": [["148"]]}}
{"result": "SELECT T3.department_id, T3.department_name \nFROM Degree_Programs AS T1 \nJOIN Departments AS T2 ON T1.department_id = T2.department_id \nJOIN ( SELECT department_id, COUNT(degree_program_id) as degree_count \n      FROM Degree_Programs \n      GROUP BY department_id \n      ORDER BY degree_count DESC \n      LIMIT 1 \n    ) AS T3 ON T2.department_id = T3.department_id", "match": {"match": false, "error": "Query execution failed with error: no such column: T3.department_name"}}
{"result": "SELECT department_id, department_name \nFROM Departments \nWHERE department_id = (\n  SELECT department_id \n  FROM Degree_Programs \n  GROUP BY department_id \n  ORDER BY COUNT(degree_program_id) DESC \n  LIMIT 1\n);", "match": {"match": false, "result": [[8, "statistics"]], "gt": [["statistics", 8]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT department_id) \nFROM Degree_Programs;", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT COUNT(DISTINCT department_id) FROM Degree_Programs", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(DISTINCT degree_program_id) FROM Degree_Programs", "match": {"match": false, "result": [[15]], "gt": [[3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) \nFROM Degree_Programs \nJOIN Departments ON Degree_Programs.department_id = Departments.department_id \nWHERE Departments.department_name = 'Engineering';", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(degree_program_id) \nFROM Degree_Programs \nJOIN Departments ON Degree_Programs.department_id = Departments.department_id \nWHERE department_name = 'Engineering';", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT section_name, section_description FROM Sections", "match": {"match": true, "result": [["a", "non"], ["b", "voluptatem"], ["c", "qui"], ["d", "voluptas"], ["e", "ex"], ["f", "doloremque"], ["g", "provident"], ["h", "et"], ["j", "quis"], ["k", "nesciunt"], ["l", "ad"], ["o", "et"], ["p", "facilis"], ["u", "reprehenderit"], ["y", "qui"]]}}
{"result": "SELECT section_name, section_description FROM Sections", "match": {"match": true, "result": [["a", "non"], ["b", "voluptatem"], ["c", "qui"], ["d", "voluptas"], ["e", "ex"], ["f", "doloremque"], ["g", "provident"], ["h", "et"], ["j", "quis"], ["k", "nesciunt"], ["l", "ad"], ["o", "et"], ["p", "facilis"], ["u", "reprehenderit"], ["y", "qui"]]}}
{"result": "SELECT `T1`.`course_id`, `T1`.`course_name` FROM `Courses` AS `T1`", "match": {"match": false, "result": [[1, "ds"], [2, "math"], [3, "os"], [4, "en"], [5, "fr"], [6, "la"], [7, "cal"], [8, "nlp"], [9, "dl"], [10, "ml"], [11, "ai"], [12, "db"], [13, "rs"], [14, "pl"], [15, "oop"]], "gt": [["ds", 1], ["math", 2], ["en", 4], ["fr", 5], ["la", 6], ["cal", 7], ["nlp", 8], ["dl", 9], ["ml", 10], ["db", 12], ["pl", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.course_name, T1.course_id\nFROM Courses AS T1\nLEFT JOIN Sections AS T2 ON T1.course_id = T2.course_id\nGROUP BY T1.course_id\nHAVING COUNT(T2.section_id) < 2", "match": {"match": false, "result": [["math", 2], ["os", 3], ["en", 4], ["la", 6], ["cal", 7], ["dl", 9], ["ml", 10], ["ai", 11], ["db", 12], ["rs", 13], ["oop", 15]], "gt": [["ds", 1], ["math", 2], ["en", 4], ["fr", 5], ["la", 6], ["cal", 7], ["nlp", 8], ["dl", 9], ["ml", 10], ["db", 12], ["pl", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT section_name \nFROM Sections \nORDER BY section_name DESC;", "match": {"match": true, "result": [["y"], ["u"], ["p"], ["o"], ["l"], ["k"], ["j"], ["h"], ["g"], ["f"], ["e"], ["d"], ["c"], ["b"], ["a"]]}}
{"result": "SELECT section_name FROM Sections ORDER BY section_name DESC", "match": {"match": true, "result": [["y"], ["u"], ["p"], ["o"], ["l"], ["k"], ["j"], ["h"], ["g"], ["f"], ["e"], ["d"], ["c"], ["b"], ["a"]]}}
{"result": "SELECT s.semester_name, s.semester_id \nFROM Semesters s \nJOIN Student_Enrolment se ON s.semester_id = se.semester_id \nGROUP BY s.semester_id \nORDER BY COUNT(se.student_id) DESC \nLIMIT 1", "match": {"match": true, "result": [["summer 2010", 2]]}}
{"result": "SELECT \n    S.semester_name, \n    S.semester_id, \n    COUNT(SE.student_id) AS total_students\nFROM \n    Semesters S\nJOIN \n    Student_Enrolment SE ON S.semester_id = SE.semester_id\nGROUP BY \n    S.semester_id, S.semester_name\nORDER BY \n    total_students DESC\nLIMIT 1", "match": {"match": false, "result": [["summer 2010", 2, 4]], "gt": [["summer 2010", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT department_description FROM Departments \nWHERE department_name LIKE '%the computer%';", "match": {"match": false, "result": [], "gt": [["error"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT department_description \nFROM Departments \nWHERE department_name LIKE '%computer%'", "match": {"match": true, "result": [["error"]]}}
{"result": "SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id \nFROM Students AS T1 \nJOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id \nJOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id \nWHERE T3.degree_program_id IN ( SELECT degree_program_id \n                                FROM Student_Enrolment \n                                GROUP BY degree_program_id \n                                HAVING COUNT(DISTINCT semester_id) = 1 AND COUNT(DISTINCT semester_id) = 2 )", "match": {"match": false, "result": [], "gt": [["Jarvis", "Aaliyah", "Carroll", 4], ["Reva", "Golda", "Osinski", 9], ["Jordy", "Osborne", "Rempel", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n  s.first_name, \n  s.middle_name, \n  s.last_name, \n  s.student_id \nFROM \n  Students s \nJOIN \n  Student_Enrolment se ON s.student_id = se.student_id \nGROUP BY \n  s.first_name, \n  s.middle_name, \n  s.last_name, \n  s.student_id \nHAVING \n  COUNT(DISTINCT se.degree_program_id) = 2;", "match": {"match": false, "result": [["Jarvis", "Aaliyah", "Carroll", 4], ["Jordy", "Osborne", "Rempel", 14], ["Stanford", "Mona", "Rogahn", 6]], "gt": [["Jarvis", "Aaliyah", "Carroll", 4], ["Reva", "Golda", "Osinski", 9], ["Jordy", "Osborne", "Rempel", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT S.first_name, S.middle_name, S.last_name \nFROM Students S\nJOIN Student_Enrolment SE ON S.student_id = SE.student_id\nJOIN Degree_Programs DP ON SE.degree_program_id = DP.degree_program_id\nWHERE DP.degree_summary_name LIKE '%Bachelor%'", "match": {"match": true, "result": [["Reva", "Golda", "Osinski"], ["Frida", "Aisha", "Huel"], ["Jarvis", "Aaliyah", "Carroll"], ["Milton", "Vaughn", "Christiansen"], ["Stanford", "Mona", "Rogahn"]]}}
{"result": "SELECT T1.first_name, T1.middle_name, T1.last_name \nFROM Students AS T1 \nJOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id \nJOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id \nWHERE T3.degree_summary_name = 'Bachelors';", "match": {"match": false, "result": [], "gt": [["Reva", "Golda", "Osinski"], ["Frida", "Aisha", "Huel"], ["Jarvis", "Aaliyah", "Carroll"], ["Milton", "Vaughn", "Christiansen"], ["Stanford", "Mona", "Rogahn"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.degree_summary_name \nFROM Student_Enrolment AS T1 \nJOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id \nGROUP BY T2.degree_summary_name \nORDER BY COUNT(T1.degree_program_id) DESC \nLIMIT 1", "match": {"match": true, "result": [["Bachelor"]]}}
{"result": "SELECT T.degree_summary_name, COUNT(T.student_id) as total_enrolled \nFROM (\n  SELECT d.degree_summary_name, se.student_id \n  FROM Degree_Programs d \n  JOIN Student_Enrolment se ON d.degree_program_id = se.degree_program_id \n  GROUP BY d.degree_summary_name, se.student_id \n) T \nGROUP BY T.degree_summary_name \nORDER BY total_enrolled DESC \nLIMIT 1", "match": {"match": false, "result": [["Master", 5]], "gt": [["Bachelor"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT degree_program_id, degree_summary_name\nFROM Degree_Programs\nJOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id\nGROUP BY degree_program_id\nORDER BY COUNT(student_enrolment_id) DESC\nLIMIT 1", "match": {"match": false, "error": "Query execution failed with error: ambiguous column name: degree_program_id"}}
{"result": "SELECT dp.degree_summary_name \nFROM Degree_Programs dp \nJOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id \nGROUP BY dp.degree_summary_name \nORDER BY COUNT(se.student_enrolment_id) DESC \nLIMIT 1;", "match": {"match": false, "result": [["Bachelor"]], "gt": [[9, "Bachelor"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    S.student_id, \n    S.first_name, \n    S.middle_name, \n    S.last_name, \n    COUNT(SE.degree_program_id) AS num_enrollments\nFROM \n    Students S\nJOIN \n    Student_Enrolment SE ON S.student_id = SE.student_id\nGROUP BY \n    S.student_id, S.first_name, S.middle_name, S.last_name\nORDER BY \n    num_enrollments DESC\nLIMIT 1", "match": {"match": false, "result": [[6, "Stanford", "Mona", "Rogahn", 3]], "gt": [[7, "Frida", "Aisha", "Huel", 3, 7]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    T1.first_name, \n    T1.middle_name, \n    T1.last_name, \n    T1.student_id, \n    COUNT(T2.student_enrolment_id) AS enrollments_count\nFROM \n    Students T1\nJOIN \n    Student_Enrolment T2 ON T2.student_id = T1.student_id\nGROUP BY \n    T1.student_id\nORDER BY \n    COUNT(T2.student_enrolment_id) DESC\nLIMIT 1", "match": {"match": false, "result": [["Frida", "Aisha", "Huel", 7, 3]], "gt": [[7, "Frida", "Aisha", "Huel", 3, 7]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.semester_name \nFROM Semesters s \nLEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id \nWHERE se.semester_id IS NULL", "match": {"match": true, "result": [["fall 2010"], ["spring 2013"], ["spring 2014"], ["spring 2016"], ["spring 2017"], ["winter 2018"]]}}
{"result": "SELECT T1.semester_name \nFROM Semesters AS T1 \nLEFT JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id \nWHERE T2.semester_id IS NULL", "match": {"match": true, "result": [["fall 2010"], ["spring 2013"], ["spring 2014"], ["spring 2016"], ["spring 2017"], ["winter 2018"]]}}
{"result": "SELECT T2.course_name \nFROM Student_Enrolment_Courses \nINNER JOIN Courses AS T2 ON Student_Enrolment_Courses.course_id = T2.course_id;", "match": {"match": false, "result": [["la"], ["la"], ["pl"], ["ai"], ["math"], ["ml"], ["math"], ["pl"], ["os"], ["en"], ["ml"], ["nlp"], ["rs"], ["rs"], ["db"]], "gt": [["la"], ["pl"], ["ai"], ["math"], ["ml"], ["os"], ["en"], ["nlp"], ["rs"], ["db"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.course_name \nFROM Courses AS T1 \nJOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id", "match": {"match": false, "result": [["la"], ["la"], ["pl"], ["ai"], ["math"], ["ml"], ["math"], ["pl"], ["os"], ["en"], ["ml"], ["nlp"], ["rs"], ["rs"], ["db"]], "gt": [["la"], ["pl"], ["ai"], ["math"], ["ml"], ["os"], ["en"], ["nlp"], ["rs"], ["db"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.course_name\nFROM Courses AS T1\nJOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id\nGROUP BY T1.course_name\nORDER BY COUNT(T2.student_enrolment_id) DESC\nLIMIT 1", "match": {"match": true, "result": [["rs"]]}}
{"result": "SELECT T1.course_name \nFROM Courses AS T1 \nJOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id \nJOIN Student_Enrolment AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id \nJOIN Students AS T4 ON T3.student_id = T4.student_id \nGROUP BY T1.course_name \nORDER BY COUNT(T4.student_id) DESC \nLIMIT 1", "match": {"match": true, "result": [["rs"]]}}
{"result": "SELECT T1.last_name \nFROM Students AS T1 \nINNER JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id \nWHERE T2.state_province_county = 'North Carolina' \nAND T1.student_id NOT IN (SELECT student_id FROM Student_Enrolment);", "match": {"match": false, "result": [], "gt": [["Gleichner"], ["Weimann"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.last_name \nFROM Students AS T1 \nJOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id \nWHERE T2.state_province_county = 'North Carolina' \nAND T1.student_id NOT IN (SELECT student_id FROM Student_Enrolment);", "match": {"match": false, "result": [], "gt": [["Gleichner"], ["Weimann"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.transcript_date, T2.transcript_id \nFROM Transcript_Contents AS T1 \nJOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id \nGROUP BY T1.transcript_id \nHAVING COUNT(T1.student_course_id) >= 2", "match": {"match": true, "result": [["2013-06-30 13:01:40", 5], ["2010-12-13 10:55:15", 6], ["1975-05-06 12:04:47", 8], ["1998-11-22 12:18:29", 15]]}}
{"result": "SELECT T1.transcript_id, T1.transcript_date \nFROM Transcripts AS T1 \nJOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id \nGROUP BY T2.transcript_id \nHAVING COUNT(DISTINCT T2.student_course_id) >= 2", "match": {"match": false, "result": [[5, "2013-06-30 13:01:40"], [6, "2010-12-13 10:55:15"], [8, "1975-05-06 12:04:47"], [15, "1998-11-22 12:18:29"]], "gt": [["2013-06-30 13:01:40", 5], ["2010-12-13 10:55:15", 6], ["1975-05-06 12:04:47", 8], ["1998-11-22 12:18:29", 15]], "error": "Query result does not match ground truth."}}
{"result": "SELECT cell_mobile_number \nFROM Students \nWHERE first_name = 'Timmothy' AND last_name = 'Ward';", "match": {"match": true, "result": [["(096)889-8954x524"]]}}
{"result": "SELECT `cell_mobile_number` \nFROM `Students` \nWHERE `first_name` = 'Timmothy' AND `last_name` = 'Ward';", "match": {"match": false, "result": [["(096)889-8954x524"]], "gt": [], "error": "Query result does not match ground truth."}}
{"result": "SELECT first_name, middle_name, last_name \nFROM Students \nORDER BY date_first_registered ASC \nLIMIT 1;", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT `first_name`, `middle_name`, `last_name` \nFROM `Students` \nORDER BY `date_first_registered` ASC \nLIMIT 1;", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT first_name, middle_name, last_name \nFROM Students \nWHERE date_first_registered IS NOT NULL \nAND date_left IS NOT NULL", "match": {"match": false, "result": [["Timmothy", "Anna", "Ward"], ["Hobart", "Lorenz", "Balistreri"], ["Warren", "Violet", "Gleichner"], ["Jarvis", "Aaliyah", "Carroll"], ["Milton", "Vaughn", "Christiansen"], ["Stanford", "Mona", "Rogahn"], ["Frida", "Aisha", "Huel"], ["Delaney", "Judd", "Ankunding"], ["Reva", "Golda", "Osinski"], ["Helga", "Cleve", "Mohr"], ["Gregg", "Mossie", "Schuppe"], ["Orrin", "Neal", "Kemmer"], ["Deon", "Brooklyn", "Weimann"], ["Jordy", "Osborne", "Rempel"], ["Jett", "Alberta", "Jaskolski"]], "gt": [["Timmothy", "Anna", "Ward"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.first_name, T1.middle_name, T1.last_name \nFROM Students AS T1 \nJOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id \nJOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id \nWHERE T3.degree_summary_name = 'Early school graduate' \nORDER BY T1.date_first_registered ASC \nLIMIT 1", "match": {"match": false, "result": [], "gt": [["Timmothy", "Anna", "Ward"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T1.first_name \nFROM Students AS T1 \nJOIN Addresses AS T2 ON T1.current_address_id = T2.address_id \nJOIN Addresses AS T3 ON T1.permanent_address_id = T3.address_id \nWHERE T2.address_id <> T3.address_id", "match": {"match": true, "result": [["Timmothy"], ["Hobart"], ["Warren"], ["Jarvis"], ["Stanford"], ["Frida"], ["Delaney"], ["Reva"], ["Helga"], ["Gregg"], ["Orrin"], ["Deon"], ["Jordy"], ["Jett"]]}}
{"result": "SELECT first_name \nFROM Students \nWHERE permanent_address_id != current_address_id", "match": {"match": true, "result": [["Timmothy"], ["Hobart"], ["Warren"], ["Jarvis"], ["Stanford"], ["Frida"], ["Delaney"], ["Reva"], ["Helga"], ["Gregg"], ["Orrin"], ["Deon"], ["Jordy"], ["Jett"]]}}
{"result": "SELECT current_address_id, line_1, line_2, line_3 \nFROM Addresses \nWHERE current_address_id = (SELECT current_address_id \n                            FROM Students \n                            GROUP BY current_address_id \n                            ORDER BY COUNT(current_address_id) DESC \n                            LIMIT 1);", "match": {"match": false, "error": "Query execution failed with error: no such column: current_address_id"}}
{"result": "SELECT T1.address_id, T1.line_1, T1.line_2 \nFROM Addresses AS T1 \nJOIN Students AS T2 ON T1.address_id = T2.current_address_id \nGROUP BY T1.address_id \nORDER BY COUNT(T2.student_id) DESC \nLIMIT 1;", "match": {"match": true, "result": [[9, "0643 Muller Vista", "Suite 383"]]}}
{"result": "SELECT AVG(transcript_date) AS average_transcript_date \nFROM Transcripts", "match": {"match": true, "result": [[1989.9333333333334]]}}
{"result": "SELECT AVG(`transcript_date`) FROM `Transcripts`", "match": {"match": true, "result": [[1989.9333333333334]]}}
{"result": "SELECT T1.transcript_date, T1.other_details \nFROM Transcripts AS T1 \nORDER BY T1.transcript_date ASC \nLIMIT 1", "match": {"match": true, "result": [["1975-05-06 12:04:47", null]]}}
{"result": "SELECT MIN(t.transcript_date), t.other_details\nFROM Transcripts t;", "match": {"match": true, "result": [["1975-05-06 12:04:47", null]]}}
{"result": "SELECT COUNT(`transcript_id`) FROM `Transcripts`;", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(`transcript_id`) FROM `Transcripts`", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT MAX(transcript_date) FROM Transcripts", "match": {"match": true, "result": [["2013-06-30 13:01:40"]]}}
{"result": "SELECT CONCAT(YEAR(t.transcript_date), '-',\nCASE \n  WHEN MONTH(t.transcript_date) < 10 THEN '0' \n  ELSE '' \nEND, MONTH(t.transcript_date)) AS last_transcript_year, \nCONCAT(MONTH(t.transcript_date), '-',\nCASE \n  WHEN DAY(t.transcript_date) < 10 THEN '0' \n  ELSE '' \nEND, DAY(t.transcript_date)) AS last_transcript_month\n\nFROM Transcripts t\nORDER BY t.transcript_date DESC\nLIMIT 1;", "match": {"match": false, "error": "Query execution failed with error: no such function: YEAR"}}
{"result": "SELECT COUNT(T1.student_course_id), T1.student_enrolment_id\nFROM `Transcript_Contents` AS T1\nJOIN `Student_Enrolment_Courses` AS T2\nON T1.student_course_id = T2.student_course_id\nGROUP BY T2.student_enrolment_id;", "match": {"match": false, "error": "Query execution failed with error: no such column: T1.student_enrolment_id"}}
{"result": "SELECT COUNT(T2.student_course_id), T1.course_id \nFROM Courses T1 \nJOIN Student_Enrolment_Courses T2 ON T1.course_id = T2.course_id \nJOIN Transcript_Contents T3 ON T2.student_course_id = T3.student_course_id \nGROUP BY T1.course_id \nORDER BY COUNT(T2.student_course_id) DESC \nLIMIT 1", "match": {"match": false, "result": [[4, 6]], "gt": [[4, 0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.transcript_date, T1.transcript_id \nFROM Transcripts AS T1 \nJOIN ( SELECT transcript_id, COUNT(*) as count \n       FROM Transcript_Contents \n       GROUP BY transcript_id ) AS T2 \nON T1.transcript_id = T2.transcript_id \nORDER BY T2.count \nLIMIT 1", "match": {"match": true, "result": [["1975-10-28 15:16:51", 2]]}}
{"result": "SELECT T1.transcript_date, T1.transcript_id \nFROM Transcripts AS T1 \nJOIN ( SELECT transcript_id, COUNT(*) as num_results \n      FROM Transcript_Contents \n      GROUP BY transcript_id ) \nAS T2 ON T1.transcript_id = T2.transcript_id \nORDER BY num_results \nLIMIT 1", "match": {"match": true, "result": [["1975-10-28 15:16:51", 2]]}}
{"result": "SELECT DISTINCT T.semester_name \nFROM Student_Enrolment AS SE \nJOIN Semesters AS T ON SE.semester_id = T.semester_id \nJOIN Degree_Programs AS DP ON SE.degree_program_id = DP.degree_program_id \nWHERE DP.degree_summary_name IN ('Master', 'Bachelor')", "match": {"match": false, "result": [["fall 2018"], ["summer 2010"], ["spring 2019"], ["spring 2010"], ["spring 2015"], ["spring 2018"], ["spring 2012"], ["winter 2010"]], "gt": [[13]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.semester_id \nFROM \n(SELECT T2.semester_id \n FROM Student_Enrolment AS T1 \n INNER JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id \n WHERE T2.degree_summary_name IN ('Masters', 'Bachelors') GROUP BY T2.degree_summary_name, T2.degree_program_id, T1.semester_id) AS T\nGROUP BY T.semester_id", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.semester_id"}}
{"result": "SELECT COUNT(DISTINCT current_address_id) \nFROM Students", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT DISTINCT A.* \nFROM Addresses A \nJOIN Students S ON A.address_id = S.current_address_id OR A.address_id = S.permanent_address_id;", "match": {"match": false, "result": [[10, "7081 Eda Center", "Suite 830", null, "Rutherfordtown", "839", "Delaware", "Kyrgyz Republic", null], [15, "74046 Metz Walk Apt. 113", "Suite 674", null, "Port Oceane", "669", "Wyoming", "Norfolk Island", null], [5, "858 Peggie Bypass Suite 212", "Apt. 335", null, "Michelleburgh", "446", "Hawaii", "Haiti", null], [12, "979 Haag Shores Suite 656", "Apt. 468", null, "Prohaskafort", "590", "SouthDakota", "Lesotho", null], [9, "0643 Muller Vista", "Suite 383", null, "Port Elvisfurt", "777", "NorthCarolina", "Gabon", null], [7, "193 Marlin Brook", "Apt. 406", null, "Herzoghaven", "068", "Arkansas", "Cook Islands", null], [11, "9283 Schulist Falls Apt. 037", "Suite 239", null, "South Palma", "400", "WestVirginia", "Bermuda", null], [3, "67942 Carlotta Ferry Apt. 686", "Apt. 583", null, "Goodwinhaven", "541", "Kansas", "Saudi Arabia", null], [6, "16998 Mraz Lodge", "Apt. 689", null, "North Omer", "902", "Kentucky", "Gibraltar", null], [1, "2294 Grant Square Apt. 235", "Apt. 370", null, "Port Chelsea", "148", "Virginia", "Iceland", null], [2, "3999 Aufderhar Ways Suite 593", "Apt. 388", null, "Lake Laishafurt", "943", "Kentucky", "Burundi", null], [14, "186 Evan Motorway Apt. 409", "Suite 079", null, "Lake Careyberg", "895", "Kentucky", "New Caledonia", null], [4, "0144 Lamar Plaza Apt. 346", "Suite 703", null, "Port Evanston", "847", "Washington", "Angola", null], [8, "202 Hessel Views Apt. 468", "Apt. 305", null, "Mariliehaven", "638", "Idaho", "Croatia", null]], "gt": [[9]], "error": "Query result does not match ground truth."}}
{"result": "SELECT * FROM Students ORDER BY first_name, middle_name, last_name DESC", "match": {"match": false, "result": [[8, 1, 5, "Delaney", "Judd", "Ankunding", "03174364122", "dell43@example.net", "402", "1982-02-14 08:46:35", "2004-12-08 05:29:11", "voluptatem"], [13, 9, 8, "Deon", "Brooklyn", "Weimann", "(213)445-0399x85208", "jhuel@example.com", "68095", "1986-02-24 21:12:23", "2014-05-30 23:32:02", "assumenda"], [7, 15, 3, "Frida", "Aisha", "Huel", "1-879-796-8987x164", "baumbach.lucious@example.org", "668", "2018-03-13 09:56:22", "1997-11-16 08:54:33", "dolorum"], [11, 14, 4, "Gregg", "Mossie", "Schuppe", "(462)246-7921", "nbruen@example.org", "494", "1989-05-24 23:31:29", "1975-10-09 00:49:27", "omnis"], [10, 15, 14, "Helga", "Cleve", "Mohr", "677.401.9382", "nya.lesch@example.net", "43", "2009-09-25 00:14:25", "2017-07-09 21:38:43", "rerum"], [2, 12, 5, "Hobart", "Lorenz", "Balistreri", "1-009-710-5151", "swift.kolby@example.com", "304246", "1976-10-26 02:33:06", "2013-10-05 17:41:28", "autem"], [4, 7, 11, "Jarvis", "Aaliyah", "Carroll", "09700166582", "jillian26@example.net", "141072406", "2014-03-28 05:48:23", "2007-08-02 04:12:58", "atque"], [15, 2, 9, "Jett", "Alberta", "Jaskolski", "877.549.9067x8723", "mya88@example.org", "156", "1982-06-19 13:15:18", "1982-06-11 00:25:39", "omnis"], [14, 12, 11, "Jordy", "Osborne", "Rempel", "(605)919-3594x3661", "gracie29@example.com", "34458427", "2004-12-24 12:36:46", "1999-08-24 00:07:10", "et"], [5, 9, 9, "Milton", "Vaughn", "Christiansen", "171-642-5684", "lhartmann@example.org", "", "1973-05-19 19:12:46", "2007-11-28 12:50:21", "laborum"], [12, 14, 9, "Orrin", "Neal", "Kemmer", "(982)153-1469x1733", "beth42@example.org", "6274274", "2005-12-15 08:42:10", "2006-08-04 17:26:49", "non"], [9, 2, 15, "Reva", "Golda", "Osinski", "(507)365-8405", "qo'kon@example.com", "39", "2017-01-04 08:10:25", "1990-09-01 05:03:27", "nesciunt"], [6, 6, 3, "Stanford", "Mona", "Rogahn", "436.613.7683", "skassulke@example.net", "248", "1997-03-20 16:47:25", "2016-04-09 12:27:04", "qui"], [1, 10, 15, "Timmothy", "Anna", "Ward", "(096)889-8954x524", "erwin.zboncak@example.com", "965", "1971-02-05 07:28:23", "1971-05-17 19:28:49", "quia"], [3, 9, 5, "Warren", "Violet", "Gleichner", "07661787471", "johns.unique@example.net", "3", "2007-08-29 23:25:41", "2007-03-31 09:53:19", "facilis"]], "gt": [["voluptatem"], ["rerum"], ["quia"], ["qui"], ["omnis"], ["omnis"], ["non"], ["nesciunt"], ["laborum"], ["facilis"], ["et"], ["dolorum"], ["autem"], ["atque"], ["assumenda"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT other_student_details FROM Students ORDER BY last_name DESC", "match": {"match": false, "result": [["assumenda"], ["quia"], ["omnis"], ["qui"], ["et"], ["nesciunt"], ["rerum"], ["non"], ["omnis"], ["dolorum"], ["facilis"], ["laborum"], ["atque"], ["autem"], ["voluptatem"]], "gt": [["voluptatem"], ["rerum"], ["quia"], ["qui"], ["omnis"], ["omnis"], ["non"], ["nesciunt"], ["laborum"], ["facilis"], ["et"], ["dolorum"], ["autem"], ["atque"], ["assumenda"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT section_description FROM Sections WHERE section_name = 'h'", "match": {"match": true, "result": [["et"]]}}
{"result": "SELECT section_description \nFROM Sections \nWHERE section_name = 'h';", "match": {"match": true, "result": [["et"]]}}
{"result": "SELECT T1.first_name \nFROM Students AS T1 \nINNER JOIN Addresses AS T2 \nON T1.permanent_address_id = T2.address_id \nWHERE T2.country = 'Haiti' \nOR T1.cell_mobile_number = '09700166582'", "match": {"match": false, "result": [["Hobart"], ["Warren"], ["Jarvis"], ["Delaney"]], "gt": [["Jarvis"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.first_name \nFROM Students AS T1 \nINNER JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id \nWHERE T2.country = 'Haiti' \nUNION \nSELECT T1.first_name \nFROM Students AS T1 \nWHERE T1.cell_mobile_number = '09700166582'", "match": {"match": false, "result": [["Delaney"], ["Hobart"], ["Jarvis"], ["Warren"]], "gt": [["Jarvis"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Title FROM Cartoon ORDER BY Title ASC", "match": {"match": true, "result": [["Dawn of the Dead Man!"], ["Day of the Dark Knight!"], ["Deep Cover for Batman!"], ["Enter the Outsiders!"], ["Evil Under the Sea!"], ["Fall of the Blue Beetle!"], ["Invasion of the Secret Santas!"], ["Journey to the Center of the Bat!"], ["Return of the Fearsome Fangs!"], ["Terror on Dinosaur Island!"], ["The Eyes of Despero!"], ["The Rise of the Blue Beetle!"]]}}
{"result": "SELECT Title FROM Cartoon ORDER BY Title ASC", "match": {"match": true, "result": [["Dawn of the Dead Man!"], ["Day of the Dark Knight!"], ["Deep Cover for Batman!"], ["Enter the Outsiders!"], ["Evil Under the Sea!"], ["Fall of the Blue Beetle!"], ["Invasion of the Secret Santas!"], ["Journey to the Center of the Bat!"], ["Return of the Fearsome Fangs!"], ["Terror on Dinosaur Island!"], ["The Eyes of Despero!"], ["The Rise of the Blue Beetle!"]]}}
{"result": "SELECT Title \nFROM Cartoon \nWHERE Directed_by = 'Ben Jones';", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Day of the Dark Knight!"], ["Dawn of the Dead Man!"], ["The Eyes of Despero!"]]}}
{"result": "SELECT Title \nFROM Cartoon \nWHERE Directed_by = 'Ben Jones'", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Day of the Dark Knight!"], ["Dawn of the Dead Man!"], ["The Eyes of Despero!"]]}}
{"result": "SELECT COUNT(id) \nFROM Cartoon \nWHERE Written_by = 'Joseph Kuhr'", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(id) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT T1.Title, T1.Directed_by \nFROM Cartoon AS T1 \nORDER BY T1.`Original_air_date`", "match": {"match": true, "result": [["Invasion of the Secret Santas!", "Brandon Vietti"], ["Evil Under the Sea!", "Michael Chang"], ["Return of the Fearsome Fangs!", "Brandon Vietti"], ["Deep Cover for Batman!", "Michael Chang"], ["The Eyes of Despero!", "Ben Jones"], ["Dawn of the Dead Man!", "Ben Jones"], ["Day of the Dark Knight!", "Ben Jones"], ["Fall of the Blue Beetle!", "Brandon Vietti"], ["Journey to the Center of the Bat!", "Michael Chang"], ["Enter the Outsiders!", "Michael Chang"], ["The Rise of the Blue Beetle!", "Ben Jones"], ["Terror on Dinosaur Island!", "Brandon Vietti"]]}}
{"result": "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date", "match": {"match": true, "result": [["Invasion of the Secret Santas!", "Brandon Vietti"], ["Evil Under the Sea!", "Michael Chang"], ["Return of the Fearsome Fangs!", "Brandon Vietti"], ["Deep Cover for Batman!", "Michael Chang"], ["The Eyes of Despero!", "Ben Jones"], ["Dawn of the Dead Man!", "Ben Jones"], ["Day of the Dark Knight!", "Ben Jones"], ["Fall of the Blue Beetle!", "Brandon Vietti"], ["Journey to the Center of the Bat!", "Michael Chang"], ["Enter the Outsiders!", "Michael Chang"], ["The Rise of the Blue Beetle!", "Ben Jones"], ["Terror on Dinosaur Island!", "Brandon Vietti"]]}}
{"result": "SELECT Title \nFROM Cartoon \nWHERE Directed_by = 'Ben Jones' \nOR Directed_by = 'Brandon Vietti';", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Terror on Dinosaur Island!"], ["Day of the Dark Knight!"], ["Invasion of the Secret Santas!"], ["Dawn of the Dead Man!"], ["Fall of the Blue Beetle!"], ["The Eyes of Despero!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT Title \nFROM Cartoon \nWHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Terror on Dinosaur Island!"], ["Day of the Dark Knight!"], ["Invasion of the Secret Santas!"], ["Dawn of the Dead Man!"], ["Fall of the Blue Beetle!"], ["The Eyes of Despero!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT Country, COUNT(Country) FROM TV_Channel GROUP BY Country ORDER BY COUNT(Country) DESC LIMIT 1", "match": {"match": true, "result": [["Italy", 12]]}}
{"result": "SELECT Country, COUNT(id) as Total_Channels FROM TV_Channel GROUP BY Country ORDER BY Total_Channels DESC LIMIT 1", "match": {"match": true, "result": [["Italy", 12]]}}
{"result": "SELECT COUNT(DISTINCT \"series_name\"), COUNT(DISTINCT \"Content\") FROM \"TV_Channel\"", "match": {"match": true, "result": [[15, 1]]}}
{"result": "SELECT COUNT(DISTINCT series_name) as series_count, COUNT(DISTINCT Content) as content_count FROM TV_Channel", "match": {"match": true, "result": [[15, 1]]}}
{"result": "SELECT `Content` FROM `TV_Channel` WHERE `series_name` = 'Sky Radio'", "match": {"match": true, "result": [["music"]]}}
{"result": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'", "match": {"match": true, "result": [["music"]]}}
{"result": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'", "match": {"match": true, "result": [["Sky Famiglia"]]}}
{"result": "SELECT T2.Package_Option \nFROM TV_Channel AS T1 \nJOIN TV_series AS T2 ON T1.id = T2.Channel \nWHERE T1.series_name = 'Sky Radio';", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Package_Option"}}
{"result": "SELECT COUNT(id) FROM TV_Channel WHERE Language = 'English'", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(id) FROM TV_Channel WHERE Language = 'English'", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Language, COUNT(Language) AS \"Number of TV Channels\" \nFROM TV_Channel \nGROUP BY Language \nORDER BY COUNT(Language) ASC", "match": {"match": false, "result": [["English", 3], ["Italian", 12]], "gt": [["English", 3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Language, COUNT(Language) AS Channel_Count FROM TV_Channel GROUP BY Language ORDER BY Channel_Count ASC LIMIT 1", "match": {"match": true, "result": [["English", 3]]}}
{"result": "SELECT Language, COUNT(id) FROM TV_Channel GROUP BY Language", "match": {"match": true, "result": [["English", 3], ["Italian", 12]]}}
{"result": "SELECT Language, COUNT(id) FROM \"TV_Channel\" GROUP BY Language", "match": {"match": true, "result": [["English", 3], ["Italian", 12]]}}
{"result": "SELECT T2.series_name \nFROM Cartoon AS T1 \nINNER JOIN TV_Channel AS T2 \nON T1.Channel = T2.id \nWHERE T1.Title = 'The Rise of the Blue Beetle!';", "match": {"match": true, "result": [["Sky Radio"]]}}
{"result": "SELECT T2.series_name \nFROM Cartoon AS T1 \nJOIN TV_Channel AS T2 \nON T1.Channel = T2.id \nWHERE T1.Title = 'The Rise of the Blue Beetle';", "match": {"match": false, "result": [], "gt": [["Sky Radio"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Title \nFROM TV_Channel AS T1 \nINNER JOIN Cartoon AS T2 \nON T1.id = T2.Channel \nWHERE T1.series_name = 'Sky Radio';", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT T1.Title \nFROM Cartoon AS T1 \nJOIN TV_Channel AS T2 ON T1.Channel = T2.id \nWHERE T2.series_name = 'Sky Radio';", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT DISTINCT `Episode`, `Rating` FROM `TV_series` ORDER BY `Rating`", "match": {"match": false, "result": [["The Hanged Man", "3.0"], ["Double Down", "3.4"], ["Home By Another Way", "3.5"], ["Keepers", "3.7"], ["Emily", "3.7"], ["Blowback", "3.7"], ["The Legend of Dylan McCleen", "3.8"], ["Winterland", "4.0"], ["The Year of the Rabbit", "4.3"], ["Game Three", "4.4"], ["Friendly Skies", "5.3"], ["A Love of a Lifetime", "5.8"]], "gt": [["The Hanged Man"], ["Double Down"], ["Home By Another Way"], ["Keepers"], ["Emily"], ["Blowback"], ["The Legend of Dylan McCleen"], ["Winterland"], ["The Year of the Rabbit"], ["Game Three"], ["Friendly Skies"], ["A Love of a Lifetime"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT( `Episode` ) ,  `Rating` \nFROM `TV_series` \nWHERE `Rating` IS NOT NULL \nGROUP BY `Rating` \nORDER BY CAST(`Rating` AS REAL)", "match": {"match": false, "result": [[1, "3.0"], [1, "3.4"], [1, "3.5"], [3, "3.7"], [1, "3.8"], [1, "4.0"], [1, "4.3"], [1, "4.4"], [1, "5.3"], [1, "5.8"]], "gt": [["The Hanged Man"], ["Double Down"], ["Home By Another Way"], ["Keepers"], ["Emily"], ["Blowback"], ["The Legend of Dylan McCleen"], ["Winterland"], ["The Year of the Rabbit"], ["Game Three"], ["Friendly Skies"], ["A Love of a Lifetime"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT TOP 3 `Episode`, `Rating` \nFROM `TV_series` \nORDER BY `Rating` DESC;", "match": {"match": false, "error": "Query execution failed with error: near \"3\": syntax error"}}
{"result": "SELECT TOP 3 \"Rating\" FROM \"TV_series\" ORDER BY \"Rating\" DESC", "match": {"match": false, "error": "Query execution failed with error: near \"3\": syntax error"}}
{"result": "SELECT MIN(Share) as Min_Share, MAX(Share) as Max_Share FROM TV_series", "match": {"match": false, "result": [[5.0, 9.0]], "gt": [[9.0, 5.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(Share) AS max_share, MIN(Share) AS min_share FROM `TV_series`", "match": {"match": true, "result": [[9.0, 5.0]]}}
{"result": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'", "match": {"match": true, "result": [["September 24, 2007"]]}}
{"result": "SELECT Air_Date FROM `TV_series` WHERE Episode = 'A Love of a Lifetime'", "match": {"match": true, "result": [["September 24, 2007"]]}}
{"result": "SELECT T1.Weekly_Rank \nFROM `TV_series` AS T1 \nINNER JOIN (SELECT id, Episode FROM `TV_series` WHERE Episode = 'A Love of a Lifetime') AS T2 \nON T1.id = T2.id", "match": {"match": true, "result": [[43.0]]}}
{"result": "SELECT COUNT(T3.Weekly_Rank) \nFROM \"TV_series\" AS T1 \nINNER JOIN \"TV_Channel\" AS T2 \nON T1.Channel = T2.id \nINNER JOIN \"Episode\" AS T3 \nON T1.Episode = T3.Episode \nWHERE T3.Episode = 'A Love of a Lifetime';", "match": {"match": false, "error": "Query execution failed with error: no such table: Episode"}}
{"result": "SELECT T2.series_name \nFROM TV_series AS T1 \nINNER JOIN TV_Channel AS T2 \nON T1.Channel = T2.id \nWHERE T1.Episode = 'A Love of a Lifetime';", "match": {"match": true, "result": [["Sky Radio"]]}}
{"result": "SELECT series_name FROM TV_Channel WHERE id IN ( SELECT Channel FROM TV_series WHERE Episode = 'A Love of a Lifetime' )", "match": {"match": true, "result": [["Sky Radio"]]}}
{"result": "SELECT T2.`Episode` \nFROM `TV_Channel` AS T1 \nJOIN `TV_series` AS T2 ON T1.id = T2.Channel \nWHERE T1.`series_name` = 'Sky Radio';", "match": {"match": true, "result": [["A Love of a Lifetime"], ["Keepers"]]}}
{"result": "SELECT T2.Episode\nFROM TV_Channel AS T1\nINNER JOIN TV_series AS T2\nON T1.id = T2.Channel\nWHERE T1.series_name = 'Sky Radio'", "match": {"match": true, "result": [["A Love of a Lifetime"], ["Keepers"]]}}
{"result": "SELECT COUNT(T1.id) ,  T1.Directed_by \nFROM Cartoon AS T1 \nGROUP BY T1.Directed_by", "match": {"match": true, "result": [[4, "Ben Jones"], [4, "Brandon Vietti"], [4, "Michael Chang"]]}}
{"result": "SELECT T1.Directed_by, COUNT(*) FROM Cartoon AS T1 GROUP BY T1.Directed_by", "match": {"match": false, "result": [["Ben Jones", 4], ["Brandon Vietti", 4], ["Michael Chang", 4]], "gt": [[4, "Ben Jones"], [4, "Brandon Vietti"], [4, "Michael Chang"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.`Production_code`, T1.Channel \nFROM Cartoon AS T1 \nWHERE T1.`Original_air_date` = ( \n    SELECT MAX(`Original_air_date`) \n    FROM Cartoon \n);", "match": {"match": true, "result": [[102.0, "701"]]}}
{"result": "SELECT MAX(`Original_air_date`) AS 'most_recent_date', `Production_code`, `Channel`\nFROM Cartoon", "match": {"match": false, "result": [["November21,2008", 102.0, "701"]], "gt": [[102.0, "701"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes'", "match": {"match": false, "result": [], "gt": [["Sky Famiglia + Sky HD", "MTV Live HD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'True'", "match": {"match": false, "result": [], "gt": [["Sky Famiglia + Sky HD", "MTV Live HD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T3.Country \nFROM Cartoon AS T1 \nJOIN TV_Channel AS T2 ON T1.Channel = T2.id \nJOIN TV_Channel AS T3 ON T2.id = T3.id \nWHERE T1.`Written_by` = 'Todd Casey'", "match": {"match": true, "result": [["United Kingdom"], ["Italy"]]}}
{"result": "SELECT T1.Country \nFROM TV_Channel AS T1 \nJOIN Cartoon AS T2 ON T1.id = T2.Channel \nWHERE T2.Written_by = 'Todd Casey';", "match": {"match": true, "result": [["United Kingdom"], ["Italy"]]}}
{"result": "SELECT T1.Country \nFROM TV_Channel AS T1 \nWHERE T1.id NOT IN (SELECT T3.Channel \n                    FROM Cartoon AS T3 \n                    WHERE T3.Written_by = 'Todd Casey')", "match": {"match": false, "result": [["Italy"], ["Italy"], ["Italy"], ["Italy"], ["United Kingdom"], ["Italy"], ["Poland"], ["Italy"], ["Italy"], ["Italy"], ["Italy"], ["Italy"], ["Italy"]], "gt": [["Poland"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Country FROM TV_Channel \nWHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey');", "match": {"match": false, "result": [["Italy"], ["Italy"], ["Italy"], ["Italy"], ["United Kingdom"], ["Italy"], ["Poland"], ["Italy"], ["Italy"], ["Italy"], ["Italy"], ["Italy"], ["Italy"]], "gt": [["Poland"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.series_name, T1.Country \nFROM TV_Channel AS T1 \nJOIN Cartoon AS T2 ON T1.id = T2.Channel \nWHERE T2.Directed_by = 'Ben Jones' OR T2.Directed_by = 'Michael Chang'", "match": {"match": false, "result": [["Sky Radio", "Italy"], ["Music Box Italia", "Italy"], ["MTV Hits", "Italy"], ["MTV Rocks", "United Kingdom"], ["MTV Dance", "United Kingdom"], ["MTV Dance", "United Kingdom"], ["Classica", "Italy"], ["MTV Dance", "United Kingdom"]], "gt": [["MTV Dance", "United Kingdom"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.series_name, T1.Country \nFROM TV_Channel AS T1 \nINNER JOIN Cartoon AS T2 \nON T1.id = T2.Channel \nWHERE T2.Directed_by = 'Ben Jones' OR T2.Directed_by = 'Michael Chang';", "match": {"match": false, "result": [["Sky Radio", "Italy"], ["Music Box Italia", "Italy"], ["MTV Hits", "Italy"], ["MTV Rocks", "United Kingdom"], ["MTV Dance", "United Kingdom"], ["MTV Dance", "United Kingdom"], ["Classica", "Italy"], ["MTV Dance", "United Kingdom"]], "gt": [["MTV Dance", "United Kingdom"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \"Pixel_aspect_ratio_PAR\", \"Country\" \nFROM \"TV_Channel\" \nWHERE \"Language\" != 'English'", "match": {"match": true, "result": [["4:3", "Italy"], ["4:3", "Italy"], ["4:3 / 16:9", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3", "Italy"], ["4:3", "Italy"]]}}
{"result": "SELECT Pixel_aspect_ratio_PAR, Country \nFROM TV_Channel \nWHERE Language != 'English';", "match": {"match": true, "result": [["4:3", "Italy"], ["4:3", "Italy"], ["4:3 / 16:9", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3", "Italy"], ["4:3", "Italy"]]}}
{"result": "SELECT T.id\nFROM ( \n  SELECT COUNT(id) as num, Country \n  FROM TV_Channel \n  GROUP BY Country \n  HAVING COUNT(id) > 2 \n) AS T\nJOIN TV_Channel ON T.Country = TV_Channel.Country", "match": {"match": false, "error": "Query execution failed with error: no such column: T.id"}}
{"result": "SELECT id FROM TV_Channel\nGROUP BY id\nHAVING COUNT(id) > 2", "match": {"match": false, "result": [], "gt": [["700"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT id FROM \"TV_Channel\"\nWHERE id NOT IN (\n  SELECT Channel FROM \"Cartoon\"\n  WHERE Directed_by = 'Ben Jones'\n);", "match": {"match": true, "result": [["701"], ["703"], ["705"], ["706"], ["708"], ["709"], ["713"], ["714"], ["715"], ["717"], ["719"]]}}
{"result": "SELECT id \nFROM TV_Channel \nWHERE id NOT IN (\n  SELECT Channel \n  FROM Cartoon \n  WHERE Directed_by = 'Ben Jones'\n);", "match": {"match": true, "result": [["701"], ["703"], ["705"], ["706"], ["708"], ["709"], ["713"], ["714"], ["715"], ["717"], ["719"]]}}
{"result": "SELECT T1.`Package_Option` \nFROM `TV_Channel` AS T1 \nINNER JOIN Cartoon AS T2 \nON T1.id = T2.Channel \nWHERE T2.`Directed_by` != 'Ben Jones'", "match": {"match": false, "result": [["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["no ( FTV )"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"]], "gt": [["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["no ( FTV )"], ["Sky Famiglia + Sky HD"], ["no ( FTV )"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Package_Option \nFROM TV_Channel AS T1 \nWHERE T1.id NOT IN (SELECT T2.Channel \n                    FROM Cartoon AS T2 \n                    WHERE T2.Directed_by = 'Ben Jones');", "match": {"match": true, "result": [["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["no ( FTV )"], ["Sky Famiglia + Sky HD"], ["no ( FTV )"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"]]}}
{"result": "SELECT COUNT(\"Poker_Player_ID\") FROM \"poker_player\";", "match": {"match": true, "result": [[5]]}}
{"result": "SELECT COUNT(Poker_Player_ID) FROM poker_player", "match": {"match": true, "result": [[5]]}}
{"result": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "match": {"match": true, "result": [[596462.0], [476090.0], [189233.0], [142800.0], [104871.0]]}}
{"result": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "match": {"match": true, "result": [[596462.0], [476090.0], [189233.0], [142800.0], [104871.0]]}}
{"result": "SELECT \"Final_Table_Made\", \"Best_Finish\" FROM poker_player", "match": {"match": true, "result": [[42.0, 1.0], [10.0, 2.0], [21.0, 1.0], [19.0, 2.0], [26.0, 3.0]]}}
{"result": "SELECT \"Final_Table_Made\", \"Best_Finish\" FROM \"poker_player\"", "match": {"match": true, "result": [[42.0, 1.0], [10.0, 2.0], [21.0, 1.0], [19.0, 2.0], [26.0, 3.0]]}}
{"result": "SELECT AVG(Earnings) FROM poker_player", "match": {"match": true, "result": [[301891.2]]}}
{"result": "SELECT AVG(Earnings) FROM poker_player", "match": {"match": true, "result": [[301891.2]]}}
{"result": "SELECT MAX(Money_Rank) FROM poker_player", "match": {"match": false, "result": [[166.0]], "gt": [[58.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(Money_Rank) \nFROM poker_player", "match": {"match": false, "result": [[166.0]], "gt": [[58.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX \"Final_Table_Made\" \nFROM poker_player \nWHERE \"Earnings\" < 200000", "match": {"match": false, "error": "Query execution failed with error: no such column: MAX"}}
{"result": "SELECT MAX (`Final_Table_Made`) \nFROM `poker_player` \nWHERE `Earnings` < 200000", "match": {"match": true, "result": [[26.0]]}}
{"result": "SELECT T1.Name \nFROM people AS T1 \nINNER JOIN poker_player AS T2 \nON T1.PEOPLE_ID = T2.People_ID;", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Teodor Salparov"], ["Yevgeni Sivozhelez"], ["Maksim Botin"], ["Semen Poltavskiy"]]}}
{"result": "SELECT T2.Name \nFROM poker_player AS T1 \nINNER JOIN people AS T2 ON T1.People_ID = T2.People_ID", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Teodor Salparov"], ["Yevgeni Sivozhelez"], ["Maksim Botin"], ["Semen Poltavskiy"]]}}
{"result": "SELECT T1.Name \nFROM people AS T1 \nINNER JOIN poker_player AS T2 \nON T1.Poker_Player_ID = T2.Poker_Player_ID \nWHERE T2.Earnings > 300000", "match": {"match": false, "error": "Query execution failed with error: no such column: T1.Poker_Player_ID"}}
{"result": "SELECT DISTINCT T1.Name FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Maksim Botin"]]}}
{"result": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID = T2.People_ID \nORDER BY T1.Final_Table_Made ASC", "match": {"match": true, "result": [["Teodor Salparov"], ["Maksim Botin"], ["Yevgeni Sivozhelez"], ["Semen Poltavskiy"], ["Aleksey Ostapenko"]]}}
{"result": "SELECT T1.Name FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made ASC", "match": {"match": true, "result": [["Teodor Salparov"], ["Maksim Botin"], ["Yevgeni Sivozhelez"], ["Semen Poltavskiy"], ["Aleksey Ostapenko"]]}}
{"result": "SELECT Birth_Date \nFROM people \nWHERE People_ID IN (SELECT People_ID \n                    FROM poker_player \n                    ORDER BY Earnings ASC \n                    LIMIT 1)", "match": {"match": true, "result": [["August 8, 1986"]]}}
{"result": "SELECT T2.Birth_Date \nFROM poker_player AS T1 \nINNER JOIN people AS T2 \nON T1.People_ID = T2.People_ID \nORDER BY T1.Earnings ASC \nLIMIT 1;", "match": {"match": true, "result": [["August 8, 1986"]]}}
{"result": "SELECT T1.`Money_Rank` \nFROM `poker_player` AS T1 \nJOIN `people` AS T2 ON T1.`People_ID` = T2.`People_ID` \nORDER BY T2.`Height` DESC \nLIMIT 1", "match": {"match": true, "result": [[68.0]]}}
{"result": "SELECT T1.`Money_Rank` \nFROM `poker_player` T1 \nJOIN `people` T2 ON T1.`People_ID` = T2.`People_ID` \nORDER BY T2.`Height` DESC \nLIMIT 1", "match": {"match": true, "result": [[68.0]]}}
{"result": "SELECT AVG(T2.Earnings) \nFROM people AS T1 \nJOIN poker_player AS T2 ON T1.People_ID = T2.People_ID \nWHERE T1.Height > 200", "match": {"match": true, "result": [[309445.0]]}}
{"result": "SELECT AVG(`Earnings`) \nFROM poker_player \nJOIN people ON poker_player.`People_ID` = people.`People_ID` \nWHERE Height > 200", "match": {"match": true, "result": [[309445.0]]}}
{"result": "SELECT Name FROM poker_player ORDER BY Earnings DESC;", "match": {"match": false, "error": "Query execution failed with error: no such column: Name"}}
{"result": "SELECT t1.Name \nFROM people t1 \nINNER JOIN poker_player t2 ON t1.People_ID = t2.People_ID \nORDER BY t2.Earnings DESC", "match": {"match": true, "result": [["Maksim Botin"], ["Aleksey Ostapenko"], ["Teodor Salparov"], ["Semen Poltavskiy"], ["Yevgeni Sivozhelez"]]}}
{"result": "SELECT Nationality, COUNT(People_ID) \nFROM people \nGROUP BY Nationality;", "match": {"match": true, "result": [["Bulgaria", 1], ["Russia", 6]]}}
{"result": "SELECT Nationality, COUNT(People_ID) AS Count FROM people GROUP BY Nationality", "match": {"match": true, "result": [["Bulgaria", 1], ["Russia", 6]]}}
{"result": "SELECT Nationality, COUNT(People_ID) as count FROM people GROUP BY Nationality ORDER BY count DESC LIMIT 1", "match": {"match": false, "result": [["Russia", 6]], "gt": [["Russia"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(Nationality) DESC LIMIT 1", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Nationality \nFROM people \nGROUP BY Nationality \nHAVING COUNT(People_ID) > 1", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Nationality \nFROM people \nGROUP BY Nationality \nHAVING COUNT(People_ID) >= 2", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT `Name`, `Birth_Date` FROM `people` ORDER BY `Name` ASC", "match": {"match": true, "result": [["Aleksey Ostapenko", "May 26, 1986"], ["Maksim Botin", "July 14, 1983"], ["Roman Bragin", "April 17, 1987"], ["Semen Poltavskiy", "February 8, 1981"], ["Sergey Grankin", "January 22, 1987"], ["Teodor Salparov", "August 16, 1982"], ["Yevgeni Sivozhelez", "August 8, 1986"]]}}
{"result": "SELECT Name, Birth_Date FROM people ORDER BY Name ASC", "match": {"match": true, "result": [["Aleksey Ostapenko", "May 26, 1986"], ["Maksim Botin", "July 14, 1983"], ["Roman Bragin", "April 17, 1987"], ["Semen Poltavskiy", "February 8, 1981"], ["Sergey Grankin", "January 22, 1987"], ["Teodor Salparov", "August 16, 1982"], ["Yevgeni Sivozhelez", "August 8, 1986"]]}}
{"result": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "match": {"match": true, "result": [["Teodor Salparov"]]}}
{"result": "SELECT \"Name\" FROM people WHERE \"Nationality\" != 'Russian'", "match": {"match": false, "result": [["Aleksey Ostapenko"], ["Teodor Salparov"], ["Roman Bragin"], ["Sergey Grankin"], ["Yevgeni Sivozhelez"], ["Maksim Botin"], ["Semen Poltavskiy"]], "gt": [["Teodor Salparov"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name \nFROM people \nWHERE People_ID NOT IN (SELECT People_ID FROM poker_player);", "match": {"match": true, "result": [["Roman Bragin"], ["Sergey Grankin"]]}}
{"result": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "match": {"match": true, "result": [["Roman Bragin"], ["Sergey Grankin"]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM people", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM people", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(Conductor_ID) FROM conductor", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT COUNT(Conductor_ID) FROM conductor", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT Name \nFROM conductor \nORDER BY Age ASC", "match": {"match": true, "result": [["Antal Dor\u00e1ti"], ["Igor Stravinsky"], ["Colin Davis"], ["Michael Tilson Thomas"], ["Paul Jorgensen"], ["Antal Brown"], ["Charles Dutoit"], ["Seiji Ozawa"], ["Valeri Gergiev"], ["Pierre Boulez"], ["Gerard Schwarz"], ["Robert Craft"]]}}
{"result": "SELECT Name FROM conductor ORDER BY Age", "match": {"match": true, "result": [["Antal Dor\u00e1ti"], ["Igor Stravinsky"], ["Colin Davis"], ["Michael Tilson Thomas"], ["Paul Jorgensen"], ["Antal Brown"], ["Charles Dutoit"], ["Seiji Ozawa"], ["Valeri Gergiev"], ["Pierre Boulez"], ["Gerard Schwarz"], ["Robert Craft"]]}}
{"result": "SELECT Name \nFROM conductor \nWHERE Nationality != 'USA';", "match": {"match": true, "result": [["Igor Stravinsky"], ["Paul Jorgensen"], ["Charles Dutoit"], ["Pierre Boulez"], ["Robert Craft"], ["Michael Tilson Thomas"]]}}
{"result": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "match": {"match": true, "result": [["Igor Stravinsky"], ["Paul Jorgensen"], ["Charles Dutoit"], ["Pierre Boulez"], ["Robert Craft"], ["Michael Tilson Thomas"]]}}
{"result": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "match": {"match": true, "result": [["Columbia Masterworks"], ["Philips"], ["Philips Classics Records"], ["RCA"], ["EMI"], ["Koch Records / Naxos Records"], ["Decca Records"], ["Mercury Records"], ["Deutsche Grammophon"], ["Kultur"], ["Decca Records"], ["Delos Records"]]}}
{"result": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "match": {"match": true, "result": [["Columbia Masterworks"], ["Philips"], ["Philips Classics Records"], ["RCA"], ["EMI"], ["Koch Records / Naxos Records"], ["Decca Records"], ["Mercury Records"], ["Deutsche Grammophon"], ["Kultur"], ["Decca Records"], ["Delos Records"]]}}
{"result": "SELECT AVG(`Attendance`) FROM `show`", "match": {"match": true, "result": [[1326.4]]}}
{"result": "SELECT AVG(`Attendance`) FROM `show`", "match": {"match": true, "result": [[1326.4]]}}
{"result": "SELECT MAX(`Share`) , MIN(`Share`) \nFROM performance \nWHERE `Type` != 'Live final';", "match": {"match": true, "result": [["44.7%", "22.7%"]]}}
{"result": "SELECT MAX(`Share`) AS max_share, MIN(`Share`) AS min_share \nFROM performance \nWHERE `Type` != 'Live final'", "match": {"match": true, "result": [["44.7%", "22.7%"]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM conductor", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM conductor", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Name \nFROM conductor \nORDER BY Year_of_Work DESC", "match": {"match": true, "result": [["Robert Craft"], ["Antal Brown"], ["Gerard Schwarz"], ["Valeri Gergiev"], ["Charles Dutoit"], ["Michael Tilson Thomas"], ["Igor Stravinsky"], ["Paul Jorgensen"], ["Pierre Boulez"], ["Antal Dor\u00e1ti"], ["Seiji Ozawa"], ["Colin Davis"]]}}
{"result": "SELECT Name \nFROM conductor \nORDER BY Year_of_Work DESC", "match": {"match": true, "result": [["Robert Craft"], ["Antal Brown"], ["Gerard Schwarz"], ["Valeri Gergiev"], ["Charles Dutoit"], ["Michael Tilson Thomas"], ["Igor Stravinsky"], ["Paul Jorgensen"], ["Pierre Boulez"], ["Antal Dor\u00e1ti"], ["Seiji Ozawa"], ["Colin Davis"]]}}
{"result": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "match": {"match": true, "result": [["Robert Craft"]]}}
{"result": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "match": {"match": true, "result": [["Robert Craft"]]}}
{"result": "SELECT T1.Name, T3.Orchestra \nFROM conductor AS T1 \nINNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID \nINNER JOIN orchestra AS T3 ON T2.Conductor_ID = T3.Conductor_ID", "match": {"match": true, "result": [["Antal Dor\u00e1ti", "London Symphony Orchestra"], ["Igor Stravinsky", "Columbia Symphony Orchestra"], ["Colin Davis", "Royal Concertgebouw Orchestra"], ["Paul Jorgensen", "Royal Danish Orchestra"], ["Antal Brown", "Detroit Symphony Orchestra"], ["Charles Dutoit", "Montreal Symphony Orchestra"], ["Gerard Schwarz", "Seattle Symphony Orchestra"], ["Pierre Boulez", "Chicago Symphony Orchestra"], ["Valeri Gergiev", "Kirov Orchestra"], ["Robert Craft", "Philharmonia Orchestra"], ["Seiji Ozawa", "Orchestre de Paris"], ["Michael Tilson Thomas", "San Francisco Symphony Orchestra"]]}}
{"result": "SELECT T1.`Name`, T2.`Orchestra` \nFROM `conductor` T1 \nINNER JOIN `orchestra` T2 ON T1.`Conductor_ID` = T2.`Conductor_ID`;", "match": {"match": true, "result": [["Antal Dor\u00e1ti", "London Symphony Orchestra"], ["Igor Stravinsky", "Columbia Symphony Orchestra"], ["Colin Davis", "Royal Concertgebouw Orchestra"], ["Paul Jorgensen", "Royal Danish Orchestra"], ["Antal Brown", "Detroit Symphony Orchestra"], ["Charles Dutoit", "Montreal Symphony Orchestra"], ["Gerard Schwarz", "Seattle Symphony Orchestra"], ["Pierre Boulez", "Chicago Symphony Orchestra"], ["Valeri Gergiev", "Kirov Orchestra"], ["Robert Craft", "Philharmonia Orchestra"], ["Seiji Ozawa", "Orchestre de Paris"], ["Michael Tilson Thomas", "San Francisco Symphony Orchestra"]]}}
{"result": "SELECT T1.Name \nFROM conductor AS T1 \nJOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID \nGROUP BY T1.Name \nHAVING COUNT(T2.Orchestra_ID) > 1", "match": {"match": true, "result": []}}
{"result": "SELECT T1.Name \nFROM conductor AS T1 \nINNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID \nGROUP BY T1.Name \nHAVING COUNT(T2.Orchestra_ID) > 1;", "match": {"match": true, "result": []}}
{"result": "SELECT T.Conductor_ID, T.Name, COUNT(T.Orchestra_ID) as num_Orchestras \nFROM (\n  SELECT C.Conductor_ID, C.Name, O.Orchestra_ID \n  FROM conductor C \n  INNER JOIN orchestra O ON C.Conductor_ID = O.Conductor_ID \n  GROUP BY C.Conductor_ID, C.Name \n) T \nGROUP BY T.Conductor_ID, T.Name \nORDER BY num_Orchestras DESC \nLIMIT 1", "match": {"match": false, "result": [[1, "Antal Dor\u00e1ti", 1]], "gt": [["Michael Tilson Thomas"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID ORDER BY COUNT(T2.Orchestra_ID) DESC LIMIT 1", "match": {"match": true, "result": [["Michael Tilson Thomas"]]}}
{"result": "SELECT T2.Name \nFROM orchestra AS T1 \nJOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID \nWHERE T1.Year_of_Founded > 2008", "match": {"match": true, "result": [["Igor Stravinsky"]]}}
{"result": "SELECT T1.`Name` \nFROM `conductor` T1 \nJOIN `orchestra` T2 \nON T1.`Conductor_ID` = T2.`Conductor_ID` \nWHERE T2.`Year_of_Founded` > 2008", "match": {"match": true, "result": [["Igor Stravinsky"]]}}
{"result": "SELECT DISTINCT Record_Company, COUNT(*) \nFROM orchestra GROUP BY Record_Company", "match": {"match": true, "result": [["Columbia Masterworks", 1], ["Decca Records", 2], ["Delos Records", 1], ["Deutsche Grammophon", 1], ["EMI", 1], ["Koch Records / Naxos Records", 1], ["Kultur", 1], ["Mercury Records", 1], ["Philips", 1], ["Philips Classics Records", 1], ["RCA", 1]]}}
{"result": "SELECT Record_Company, COUNT(*) \nFROM orchestra GROUP BY Record_Company", "match": {"match": true, "result": [["Columbia Masterworks", 1], ["Decca Records", 2], ["Delos Records", 1], ["Deutsche Grammophon", 1], ["EMI", 1], ["Koch Records / Naxos Records", 1], ["Kultur", 1], ["Mercury Records", 1], ["Philips", 1], ["Philips Classics Records", 1], ["RCA", 1]]}}
{"result": "SELECT Major_Record_Format \nFROM ( SELECT Major_Record_Format, COUNT(Orchestra_ID) AS Count \n      FROM orchestra \n      GROUP BY Major_Record_Format ) \nORDER BY Count ASC", "match": {"match": true, "result": [["CD / LP"], ["DVD"], ["CD"]]}}
{"result": "SELECT Major_Record_Format, COUNT(Orchestra_ID) AS Frequency \nFROM orchestra \nGROUP BY Major_Record_Format \nORDER BY Frequency DESC;", "match": {"match": false, "result": [["CD", 10], ["DVD", 1], ["CD / LP", 1]], "gt": [["CD / LP"], ["DVD"], ["CD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Record_Company, COUNT(T2.Orchestra_ID) \nFROM performance AS T1 \nJOIN orchestra AS T2 ON T2.Orchestra_ID = T1.Orchestra_ID \nGROUP BY T2.Record_Company \nORDER BY COUNT(T2.Orchestra_ID) DESC LIMIT 1", "match": {"match": false, "result": [["Decca Records", 2]], "gt": [["Decca Records"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Record_Company, COUNT(Orchestra_ID) AS num_Orchestras FROM orchestra GROUP BY Record_Company ORDER BY num_Orchestras DESC LIMIT 1", "match": {"match": false, "result": [["Decca Records", 2]], "gt": [["Decca Records"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Orchestra \nFROM performance AS T1 \nRIGHT JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID \nWHERE T1.Performance_ID IS NULL;", "match": {"match": true, "result": [["San Francisco Symphony Orchestra"]]}}
{"result": "SELECT T1.Orchestra \nFROM orchestra AS T1 \nLEFT JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID \nWHERE T2.Performance_ID IS NULL", "match": {"match": true, "result": [["San Francisco Symphony Orchestra"]]}}
{"result": "SELECT T1.Record_Company \nFROM orchestra AS T1 \nJOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID \nWHERE T2.`Date` LIKE '2003%' AND T1.`Year_of_Founded` < 2003 \nINTERSECT \nSELECT T1.Record_Company \nFROM orchestra AS T1 \nJOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID \nWHERE T2.`Date` LIKE '2003%' AND T1.`Year_of_Founded` > 2003", "match": {"match": false, "result": [], "gt": [["Decca Records"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Record_Company\nFROM orchestra\nGROUP BY Record_Company\nHAVING COUNT(CASE WHEN Year_of_Founded < 2003 THEN 1 END) > 0\nAND COUNT(CASE WHEN Year_of_Founded >= 2003 THEN 1 END) > 0;", "match": {"match": true, "result": [["Decca Records"]]}}
{"result": "SELECT COUNT(*) \nFROM orchestra \nWHERE Major_Record_Format IN ('CD', 'DVD')", "match": {"match": true, "result": [[11]]}}
{"result": "SELECT COUNT(Orchestra_ID) \nFROM orchestra \nWHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD';", "match": {"match": true, "result": [[11]]}}
{"result": "SELECT T1.Year_of_Founded \nFROM orchestra AS T1 \nINNER JOIN performance AS T2 \nON T1.Orchestra_ID = T2.Orchestra_ID \nGROUP BY T1.Year_of_Founded \nHAVING COUNT(T2.Performance_ID) > 1", "match": {"match": false, "result": [[2002.0], [2003.0], [2008.0]], "gt": [], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.`Year_of_Founded` \nFROM `orchestra` AS T1\nJOIN `performance` AS T2 ON T1.`Orchestra_ID` = T2.`Orchestra_ID`\nGROUP BY T1.`Year_of_Founded`\nHAVING COUNT(T2.`Performance_ID`) > 1;", "match": {"match": false, "result": [[2002.0], [2003.0], [2008.0]], "gt": [], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(ID) FROM Highschooler", "match": {"match": true, "result": [[16]]}}
{"result": "SELECT COUNT(ID) FROM Highschooler", "match": {"match": true, "result": [[16]]}}
{"result": "SELECT name, grade FROM Highschooler", "match": {"match": true, "result": [["Jordan", 9], ["Gabriel", 9], ["Tiffany", 9], ["Cassandra", 9], ["Haley", 10], ["Andrew", 10], ["Kris", 10], ["Brittany", 10], ["Alexis", 11], ["Austin", 11], ["Gabriel", 11], ["Jessica", 11], ["Jordan", 12], ["John", 12], ["Kyle", 12], ["Logan", 12]]}}
{"result": "SELECT name, grade FROM Highschooler", "match": {"match": true, "result": [["Jordan", 9], ["Gabriel", 9], ["Tiffany", 9], ["Cassandra", 9], ["Haley", 10], ["Andrew", 10], ["Kris", 10], ["Brittany", 10], ["Alexis", 11], ["Austin", 11], ["Gabriel", 11], ["Jessica", 11], ["Jordan", 12], ["John", 12], ["Kyle", 12], ["Logan", 12]]}}
{"result": "SELECT grade FROM Highschooler", "match": {"match": true, "result": [[9], [9], [9], [9], [10], [10], [10], [10], [11], [11], [11], [11], [12], [12], [12], [12]]}}
{"result": "SELECT name, grade FROM Highschooler", "match": {"match": false, "result": [["Jordan", 9], ["Gabriel", 9], ["Tiffany", 9], ["Cassandra", 9], ["Haley", 10], ["Andrew", 10], ["Kris", 10], ["Brittany", 10], ["Alexis", 11], ["Austin", 11], ["Gabriel", 11], ["Jessica", 11], ["Jordan", 12], ["John", 12], ["Kyle", 12], ["Logan", 12]], "gt": [[9], [9], [9], [9], [10], [10], [10], [10], [11], [11], [11], [11], [12], [12], [12], [12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT grade FROM Highschooler WHERE name = 'Kyle'", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT grade \nFROM Highschooler \nWHERE name = 'Kyle';", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT name FROM Highschooler WHERE grade = 10", "match": {"match": true, "result": [["Haley"], ["Andrew"], ["Kris"], ["Brittany"]]}}
{"result": "SELECT name \nFROM Highschooler \nWHERE grade = 10;", "match": {"match": true, "result": [["Haley"], ["Andrew"], ["Kris"], ["Brittany"]]}}
{"result": "SELECT ID FROM Highschooler WHERE name = 'Kyle'", "match": {"match": true, "result": [[1934]]}}
{"result": "SELECT ID FROM Highschooler WHERE name = 'Kyle'", "match": {"match": true, "result": [[1934]]}}
{"result": "SELECT COUNT(ID) \nFROM Highschooler \nWHERE grade BETWEEN 9 AND 10;", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT COUNT(ID) \nFROM Highschooler \nWHERE grade BETWEEN 9 AND 10", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT grade, COUNT(ID) FROM Highschooler GROUP BY grade;", "match": {"match": true, "result": [[9, 4], [10, 4], [11, 4], [12, 4]]}}
{"result": "SELECT grade, COUNT(ID) FROM Highschooler GROUP BY grade;", "match": {"match": true, "result": [[9, 4], [10, 4], [11, 4], [12, 4]]}}
{"result": "SELECT grade, COUNT(ID) as count\nFROM Highschooler\nGROUP BY grade\nORDER BY count DESC\nLIMIT 1;", "match": {"match": false, "result": [[12, 4]], "gt": [[12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT grade, COUNT(ID) \nFROM Highschooler \nGROUP BY grade \nORDER BY COUNT(ID) DESC \nLIMIT 1", "match": {"match": false, "result": [[12, 4]], "gt": [[12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT grade \nFROM Highschooler \nGROUP BY grade \nHAVING COUNT(ID) >= 4;", "match": {"match": true, "result": [[9], [10], [11], [12]]}}
{"result": "SELECT grade FROM Highschooler\nGROUP BY grade\nHAVING COUNT(ID) >= 4", "match": {"match": true, "result": [[9], [10], [11], [12]]}}
{"result": "SELECT student_id, COUNT(*) \nFROM Friend \nGROUP BY student_id;", "match": {"match": true, "result": [[1101, 1], [1247, 2], [1304, 1], [1316, 1], [1381, 1], [1468, 2], [1501, 1], [1510, 2], [1661, 1], [1689, 2], [1709, 1], [1782, 3], [1911, 1], [1934, 1]]}}
{"result": "SELECT student_id, COUNT(*) \nFROM Friend \nGROUP BY student_id;", "match": {"match": true, "result": [[1101, 1], [1247, 2], [1304, 1], [1316, 1], [1381, 1], [1468, 2], [1501, 1], [1510, 2], [1661, 1], [1689, 2], [1709, 1], [1782, 3], [1911, 1], [1934, 1]]}}
{"result": "SELECT name, COUNT(*) as friends_count \nFROM Highschooler \nWHERE ID IN (SELECT student_id FROM Friend) \nGROUP BY name", "match": {"match": false, "result": [["Alexis", 1], ["Andrew", 1], ["Austin", 1], ["Cassandra", 1], ["Gabriel", 2], ["Haley", 1], ["Jessica", 1], ["Jordan", 2], ["Kris", 1], ["Kyle", 1], ["Logan", 1], ["Tiffany", 1]], "gt": [["Haley", 1], ["Alexis", 2], ["Jordan", 1], ["Austin", 1], ["Tiffany", 1], ["Kris", 2], ["Jessica", 1], ["Jordan", 2], ["Logan", 1], ["Gabriel", 2], ["Cassandra", 1], ["Andrew", 3], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name, COUNT(friend_id) as num_friends \nFROM Highschooler LEFT JOIN Friend \nON Highschooler.ID = Friend.student_id \nGROUP BY Highschooler.ID;", "match": {"match": false, "result": [["John", 0], ["Haley", 1], ["Alexis", 2], ["Jordan", 1], ["Austin", 1], ["Tiffany", 1], ["Kris", 2], ["Jessica", 1], ["Jordan", 2], ["Brittany", 0], ["Logan", 1], ["Gabriel", 2], ["Cassandra", 1], ["Andrew", 3], ["Gabriel", 1], ["Kyle", 1]], "gt": [["Haley", 1], ["Alexis", 2], ["Jordan", 1], ["Austin", 1], ["Tiffany", 1], ["Kris", 2], ["Jessica", 1], ["Jordan", 2], ["Logan", 1], ["Gabriel", 2], ["Cassandra", 1], ["Andrew", 3], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name FROM Highschooler WHERE ID = ( SELECT student_id FROM Friend GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1 )", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID = (\n  SELECT T2.ID \n  FROM Friend AS T1 \n  JOIN Highschooler AS T2 \n  ON T1.student_id = T2.ID \n  GROUP BY T2.ID \n  ORDER BY COUNT(T1.student_id) DESC \n  LIMIT 1\n);", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID IN \n  (SELECT student_id \n   FROM Friend \n   GROUP BY student_id \n   HAVING COUNT(DISTINCT friend_id) >= 3);", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID IN (SELECT friend_id \n             FROM Friend \n             GROUP BY friend_id \n             HAVING COUNT(student_id) >= 3)", "match": {"match": false, "result": [], "gt": [["Andrew"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.name \nFROM Friend AS T1 \nJOIN Highschooler AS T2 ON T1.student_id = T2.ID \nWHERE T1.friend_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')", "match": {"match": false, "result": [["Jessica"], ["Austin"]], "gt": [["Jordan"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.name \nFROM Friend AS T1 \nINNER JOIN Highschooler AS T2 ON T1.friend_id = T2.ID \nINNER JOIN Highschooler AS T3 ON T1.student_id = T3.ID \nWHERE T3.name = 'Kyle'", "match": {"match": true, "result": [["Jordan"]]}}
{"result": "SELECT COUNT(T2.student_id) \nFROM Highschooler AS T1 \nINNER JOIN Friend AS T2 \nON T1.ID = T2.student_id \nWHERE T1.name = 'Kyle';", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(T2.friend_id) \nFROM Friend AS T1 \nLEFT JOIN Highschooler AS T2 \nON T1.student_id = T2.ID \nWHERE T2.name = 'Kyle';", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.friend_id"}}
{"result": "SELECT ID FROM Highschooler \nWHERE ID NOT IN (SELECT student_id FROM Friend)", "match": {"match": true, "result": [[1025], [1641]]}}
{"result": "SELECT ID \nFROM Highschooler \nWHERE ID NOT IN ( SELECT student_id \n                  FROM Friend \n                );", "match": {"match": true, "result": [[1025], [1641]]}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend);", "match": {"match": false, "result": [], "gt": [["Brittany"], ["John"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name FROM Highschooler\nWHERE ID NOT IN (\n  SELECT student_id FROM Friend\n  UNION\n  SELECT friend_id FROM Friend\n);", "match": {"match": false, "result": [], "gt": [["Brittany"], ["John"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT ID \nFROM Highschooler \nWHERE ID IN ( SELECT student_id FROM Friend ) \nAND ID IN ( SELECT liked_id FROM Likes );", "match": {"match": true, "result": [[1101], [1247], [1304], [1468], [1501], [1689], [1709], [1934]]}}
{"result": "SELECT H.ID \nFROM Highschooler H \nWHERE H.ID IN (\n    SELECT student_id FROM Friend\n    INTERSECT\n    SELECT student_id FROM Likes\n)", "match": {"match": false, "result": [[1247], [1316], [1501], [1689], [1709], [1782], [1911], [1934]], "gt": [[1101], [1247], [1304], [1468], [1501], [1689], [1709], [1934]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.name FROM Highschooler AS T1 \nINNER JOIN Friend AS T2 \nON T1.ID = T2.student_id \nINNER JOIN Likes AS T3 \nON T1.ID = T3.student_id WHERE T1.ID IN (SELECT friend_id FROM Friend)", "match": {"match": false, "result": [["Alexis"], ["Alexis"], ["Austin"], ["Jessica"], ["Gabriel"], ["Gabriel"], ["Cassandra"], ["Andrew"], ["Andrew"], ["Andrew"], ["Gabriel"], ["Kyle"]], "gt": [["Alexis"], ["Cassandra"], ["Gabriel"], ["Haley"], ["Jessica"], ["Jordan"], ["Kris"], ["Kyle"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name FROM Highschooler WHERE ID IN (\n    SELECT student_id FROM Friend\n    INTERSECT\n    SELECT liked_id FROM Likes\n)", "match": {"match": false, "result": [["Haley"], ["Alexis"], ["Jordan"], ["Kris"], ["Jessica"], ["Gabriel"], ["Cassandra"], ["Kyle"]], "gt": [["Alexis"], ["Cassandra"], ["Gabriel"], ["Haley"], ["Jessica"], ["Jordan"], ["Kris"], ["Kyle"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT student_id, COUNT(*) \nFROM Likes \nGROUP BY student_id", "match": {"match": true, "result": [[1025, 1], [1247, 1], [1316, 1], [1501, 1], [1641, 1], [1689, 1], [1709, 1], [1782, 1], [1911, 1], [1934, 1]]}}
{"result": "SELECT student_id, COUNT(*) as total_likes\nFROM Likes\nGROUP BY student_id", "match": {"match": true, "result": [[1025, 1], [1247, 1], [1316, 1], [1501, 1], [1641, 1], [1689, 1], [1709, 1], [1782, 1], [1911, 1], [1934, 1]]}}
{"result": "SELECT name, COUNT(*) \nFROM Likes \nJOIN Highschooler ON Likes.student_id = Highschooler.ID \nGROUP BY name", "match": {"match": false, "result": [["Alexis", 1], ["Andrew", 1], ["Austin", 1], ["Brittany", 1], ["Cassandra", 1], ["Gabriel", 2], ["Jessica", 1], ["John", 1], ["Kyle", 1]], "gt": [["John", 1], ["Alexis", 1], ["Austin", 1], ["Jessica", 1], ["Brittany", 1], ["Gabriel", 1], ["Cassandra", 1], ["Andrew", 1], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name, COUNT(*) FROM Highschooler\nJOIN Likes ON Highschooler.ID = Likes.student_id\nGROUP BY name", "match": {"match": false, "result": [["Alexis", 1], ["Andrew", 1], ["Austin", 1], ["Brittany", 1], ["Cassandra", 1], ["Gabriel", 2], ["Jessica", 1], ["John", 1], ["Kyle", 1]], "gt": [["John", 1], ["Alexis", 1], ["Austin", 1], ["Jessica", 1], ["Brittany", 1], ["Gabriel", 1], ["Cassandra", 1], ["Andrew", 1], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name FROM Highschooler WHERE ID IN (\n    SELECT student_id \n    FROM Likes \n    GROUP BY student_id \n    ORDER BY COUNT(liked_id) DESC \n    LIMIT 1\n);", "match": {"match": true, "result": [["John"]]}}
{"result": "SELECT H.name \nFROM Highschooler H \nJOIN (\n    SELECT student_id \n    FROM Likes \n    GROUP BY student_id \n    ORDER BY COUNT(student_id) DESC \n    LIMIT 1\n) M ON H.ID = M.student_id", "match": {"match": true, "result": [["John"]]}}
{"result": "SELECT T1.name \nFROM Highschooler AS T1 \nJOIN Likes AS T2 ON T1.ID = T2.student_id \nGROUP BY T2.student_id \nHAVING COUNT(T2.liked_id) >= 2", "match": {"match": true, "result": []}}
{"result": "SELECT T.name FROM (\n  SELECT L.liked_id, COUNT(*) AS likes FROM Likes L\n  GROUP BY L.liked_id\n  HAVING COUNT(*) >= 2\n) AS T\nJOIN Highschooler H ON T.liked_id = H.ID", "match": {"match": false, "error": "Query execution failed with error: no such column: T.name"}}
{"result": "SELECT T1.name \nFROM Highschooler T1 \nJOIN Friend T2 ON T1.ID = T2.student_id \nGROUP BY T1.name \nHAVING COUNT(DISTINCT T2.friend_id) >= 2 AND T1.grade > 5", "match": {"match": false, "result": [["Alexis"], ["Andrew"], ["Gabriel"], ["Jordan"], ["Kris"]], "gt": [["Alexis"], ["Kris"], ["Jordan"], ["Gabriel"], ["Andrew"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name FROM Highschooler \nWHERE grade > 5 AND ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) >= 2)", "match": {"match": true, "result": [["Alexis"], ["Kris"], ["Jordan"], ["Gabriel"], ["Andrew"]]}}
{"result": "SELECT COUNT(*) \nFROM Likes \nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(liked_id) FROM Likes WHERE student_id IN (SELECT ID FROM Highschooler WHERE name = 'Kyle')", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT AVG(T1.grade) \nFROM Highschooler AS T1 \nJOIN Friend AS T2 \nON T1.ID = T2.student_id", "match": {"match": false, "result": [[10.25]], "gt": [[10.428571428571429]], "error": "Query result does not match ground truth."}}
{"result": "SELECT avg(T1.grade) \nFROM Highschooler AS T1 \nJOIN Friend AS T2 ON T1.ID = T2.student_id \nGROUP BY T1.ID", "match": {"match": false, "result": [[10.0], [11.0], [12.0], [11.0], [9.0], [10.0], [11.0], [9.0], [12.0], [9.0], [9.0], [10.0], [11.0], [12.0]], "gt": [[10.428571428571429]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MIN(T1.grade) \nFROM Highschooler AS T1 \nLEFT JOIN Friend AS T2 \nON T1.ID = T2.student_id \nWHERE T2/student_id IS NULL", "match": {"match": false, "error": "Query execution failed with error: no such column: T2"}}
{"result": "SELECT grade FROM Highschooler \nWHERE ID NOT IN (SELECT student_id FROM Friend)", "match": {"match": false, "result": [[10], [12]], "gt": [[10]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T1.state \nFROM Owners AS T1 \nINTERSECT \nSELECT DISTINCT T1.state \nFROM Professionals AS T1", "match": {"match": true, "result": [["Indiana"], ["Mississippi"], ["Wisconsin"]]}}
{"result": "SELECT DISTINCT T1.state \nFROM Owners T1 \nINTERSECT \nSELECT DISTINCT T1.state \nFROM Professionals T1;", "match": {"match": true, "result": [["Indiana"], ["Mississippi"], ["Wisconsin"]]}}
{"result": "SELECT AVG(D.age) \nFROM Dogs D\nJOIN Treatments T ON D.dog_id = T.dog_id", "match": {"match": false, "result": [[5.466666666666667]], "gt": [[5.111111111111111]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(Dogs.age) \nFROM Dogs \nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id", "match": {"match": false, "result": [[5.466666666666667]], "gt": [[5.111111111111111]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT P.professional_id, P.last_name, P.cell_number\nFROM Professionals P\nWHERE P.state = 'IN'\nOR P.professional_id IN (\n  SELECT T.professional_id\n  FROM Treatments T\n  GROUP BY T.professional_id\n  HAVING COUNT(T.treatment_id) > 2\n);\n```", "match": {"match": false, "result": [[9, "Kshlerin", "962-983-8109x3509"]], "gt": [[1, "Braun", "(275)939-2435x80863"], [8, "Hyatt", "328.842.3792"], [9, "Kshlerin", "962-983-8109x3509"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.professional_id, T1.last_name, T1.cell_number \nFROM Professionals AS T1 \nINNER JOIN (\n  SELECT T2.professional_id, COUNT(*) as treatment_count \n  FROM Treatments AS T2 \n  GROUP BY T2.professional_id \n  HAVING COUNT(*) > 2\n  UNION\n  SELECT T3.professional_id \n  FROM Treatments AS T3 \n  INNER JOIN Owners AS T4 ON T3.dog_id = T4.dog_id \n  WHERE T4.state = 'IN'\n) AS T3 ON T1.professional_id = T3.professional_id", "match": {"match": false, "error": "Query execution failed with error: no such column: T4.dog_id"}}
{"result": "SELECT D.name \nFROM Dogs D \nJOIN Treatments T ON D.dog_id = T.dog_id \nWHERE T.cost_of_treatment <= 1000", "match": {"match": false, "result": [["Lyric"], ["Houston"], ["Lyric"], ["Hipolito"], ["Holden"], ["Troy"], ["Evangeline"], ["Hipolito"], ["Lyric"], ["Troy"], ["Evangeline"], ["Jesus"], ["Narciso"], ["Troy"], ["Kacey"]], "gt": [["Kacey"], ["Hipolito"], ["Mavis"], ["Houston"], ["Jeffrey"], ["Merritt"], ["Narciso"], ["George"], ["Bessie"], ["Betty"], ["Holden"], ["Jesus"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.name \nFROM Dogs AS T1 \nJOIN Treatments AS T2 ON T1.dog_id = T2.dog_id \nJOIN Charges AS T3 ON T3.charge_id = T2.cost_of_treatment \nJOIN Owners AS T4 ON T4.owner_id = T1.owner_id \nWHERE T3.charge_amount <= 1000", "match": {"match": false, "result": [], "gt": [["Kacey"], ["Hipolito"], ["Mavis"], ["Houston"], ["Jeffrey"], ["Merritt"], ["Narciso"], ["George"], ["Bessie"], ["Betty"], ["Holden"], ["Jesus"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT first_name\nFROM (\n  SELECT first_name \n  FROM Owners\n  UNION ALL\n  SELECT first_name \n  FROM Professionals\n) AS Names\nWHERE first_name NOT IN (\n  SELECT name \n  FROM Dogs\n);", "match": {"match": false, "result": [["Nora"], ["Melisa"], ["Jaclyn"], ["Tre"], ["Johann"], ["Kade"], ["Emelie"], ["Rolando"], ["Adelle"], ["Lorenz"], ["Gay"], ["Orlando"], ["Cindy"], ["Rachelle"], ["Heather"], ["Taryn"], ["Jayson"], ["Olaf"], ["Vernice"], ["Danny"], ["Ruben"], ["Velva"], ["Karley"], ["Monte"], ["Domenica"], ["Brady"], ["Winfield"], ["Ericka"], ["Sigurd"], ["Lesly"]], "gt": [["Adelle"], ["Brady"], ["Cindy"], ["Danny"], ["Domenica"], ["Emelie"], ["Ericka"], ["Gay"], ["Heather"], ["Jaclyn"], ["Jayson"], ["Johann"], ["Kade"], ["Karley"], ["Lesly"], ["Lorenz"], ["Melisa"], ["Monte"], ["Nora"], ["Olaf"], ["Orlando"], ["Rachelle"], ["Rolando"], ["Ruben"], ["Sigurd"], ["Taryn"], ["Tre"], ["Velva"], ["Vernice"], ["Winfield"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT first_name \nFROM Professionals \nWHERE first_name NOT IN (SELECT name FROM Dogs) \nUNION \nSELECT first_name \nFROM Owners \nWHERE first_name NOT IN (SELECT name FROM Dogs);", "match": {"match": true, "result": [["Adelle"], ["Brady"], ["Cindy"], ["Danny"], ["Domenica"], ["Emelie"], ["Ericka"], ["Gay"], ["Heather"], ["Jaclyn"], ["Jayson"], ["Johann"], ["Kade"], ["Karley"], ["Lesly"], ["Lorenz"], ["Melisa"], ["Monte"], ["Nora"], ["Olaf"], ["Orlando"], ["Rachelle"], ["Rolando"], ["Ruben"], ["Sigurd"], ["Taryn"], ["Tre"], ["Velva"], ["Vernice"], ["Winfield"]]}}
{"result": "SELECT p.professional_id, p.role_code, p.email_address \nFROM Professionals p \nLEFT JOIN Treatments t ON p.professional_id = t.professional_id \nWHERE t.treatment_id IS NULL", "match": {"match": true, "result": [[1, "Employee", "deanna.schuster@example.com"], [2, "Employee", "lucile.shanahan@example.org"], [3, "Employee", "uboehm@example.org"], [11, "Employee", "west.eula@example.net"], [12, "Veterenarian", "marquardt.furman@example.org"], [13, "Veterenarian", "delphine29@example.com"], [15, "Employee", "jeichmann@example.com"]]}}
{"result": "SELECT \n    `professional_id`, \n    `role_code` AS role, \n    `email_address`\nFROM \n    `Professionals`\nWHERE \n    `professional_id` NOT IN (\n        SELECT \n            `professional_id`\n        FROM \n            `Treatments`\n    );", "match": {"match": true, "result": [[1, "Employee", "deanna.schuster@example.com"], [2, "Employee", "lucile.shanahan@example.org"], [3, "Employee", "uboehm@example.org"], [11, "Employee", "west.eula@example.net"], [12, "Veterenarian", "marquardt.furman@example.org"], [13, "Veterenarian", "delphine29@example.com"], [15, "Employee", "jeichmann@example.com"]]}}
{"result": "SELECT T2.owner_id, T2.first_name, T2.last_name\nFROM Dogs AS T1\nJOIN Owners AS T2 ON T1.owner_id = T2.owner_id\nGROUP BY T2.owner_id, T2.first_name, T2.last_name\nORDER BY COUNT(T1.dog_id) DESC\nLIMIT 1", "match": {"match": true, "result": [[14, "Rachelle", "Funk"]]}}
{"result": "```sql\nSELECT o.owner_id, o.first_name, o.last_name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nGROUP BY o.owner_id, o.first_name, o.last_name\nORDER BY COUNT(d.owner_id) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [[14, "Rachelle", "Funk"]]}}
{"result": "SELECT T3.professional_id, T3.role_code, T3.first_name \nFROM Treatments AS T1 \nJOIN Dogs AS T2 ON T1.dog_id = T2.dog_id \nJOIN Professionals AS T3 ON T1.professional_id = T3.professional_id \nGROUP BY T3.professional_id, T3.role_code, T3.first_name \nHAVING COUNT(T1.treatment_id) >= 2;", "match": {"match": true, "result": [[4, "Veterenarian", "Vernice"], [6, "Veterenarian", "Ruben"], [8, "Employee", "Karley"], [9, "Veterenarian", "Monte"], [10, "Employee", "Domenica"], [14, "Employee", "Sigurd"]]}}
{"result": "SELECT T1.professional_id, T1.role_code, T1.first_name\nFROM Professionals AS T1\nJOIN (\n  SELECT dog_id, professional_id, COUNT(*) as cnt\n  FROM Treatments\n  GROUP BY dog_id, professional_id\n  HAVING COUNT(*) >= 2\n) AS T2 ON T1.professional_id = T2.professional_id", "match": {"match": false, "result": [], "gt": [[4, "Veterenarian", "Vernice"], [6, "Veterenarian", "Ruben"], [8, "Employee", "Karley"], [9, "Veterenarian", "Monte"], [10, "Employee", "Domenica"], [14, "Employee", "Sigurd"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.breed_name \nFROM Dogs T1 \nJOIN Breeds T2 ON T1.breed_code = T2.breed_code \nGROUP BY T1.breed_code \nORDER BY COUNT(T1.dog_id) DESC \nLIMIT 1", "match": {"match": true, "result": [["Bulldog"]]}}
{"result": "SELECT T1.breed_name \nFROM Breeds AS T1 \nJOIN Dogs AS T2 ON T1.breed_code = T2.breed_code \nGROUP BY T1.breed_code \nORDER BY COUNT(T2.dog_id) DESC \nLIMIT 1;", "match": {"match": true, "result": [["Bulldog"]]}}
{"result": "SELECT T2.owner_id, T1.last_name\nFROM Owners T1\nJOIN Dogs T3 ON T1.owner_id = T3.owner_id\nJOIN Treatments T4 ON T3.dog_id = T4.dog_id\nJOIN Charges T5 ON T4.cost_of_treatment = T5.charge_amount\nJOIN (SELECT T4.dog_id, COUNT(T4.dog_id) as count\n     FROM Treatments T4\n     JOIN Charges T5 ON T4.cost_of_treatment = T5.charge_amount\n     GROUP BY T4.dog_id) AS subquery ON T4.dog_id = subquery.dog_id\nGROUP BY T2.owner_id, T1.last_name\nORDER BY count DESC\nLIMIT 1", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.owner_id"}}
{"result": "SELECT T1.owner_id, T1.last_name \nFROM Owners AS T1 \nJOIN Dogs AS T2 ON T1.owner_id = T2.owner_id \nJOIN Treatments AS T3 ON T2.dog_id = T3.dog_id \nJOIN Charges AS T4 ON T3.cost_of_treatment = T4.charge_amount \nORDER BY T3.cost_of_treatment DESC \nLIMIT 1", "match": {"match": false, "result": [], "gt": [[14, "Funk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT t2.treatment_type_description \nFROM Charges c \nJOIN Treatments t ON c.charge_id = t.cost_of_treatment \nJOIN Treatment_Types t2 ON t2.treatment_type_code = t.treatment_type_code \nGROUP BY t2.treatment_type_code \nORDER BY SUM(c.charge_amount) ASC \nLIMIT 1", "match": {"match": false, "result": [], "gt": [["Take for a Walk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT tt.treatment_type_description \nFROM Treatment_Types tt \nJOIN Treatments t ON tt.treatment_type_code = t.treatment_type_code \nGROUP BY tt.treatment_type_code \nORDER BY SUM(t.cost_of_treatment) ASC \nLIMIT 1", "match": {"match": true, "result": [["Take for a Walk"]]}}
{"result": "```sql\nSELECT O.owner_id, O.zip_code\nFROM Owners O\nJOIN Dogs D ON O.owner_id = D.owner_id\nJOIN Treatments T ON D.dog_id = T.dog_id\nJOIN Charges C ON T.cost_of_treatment = C.charge_amount\nGROUP BY O.owner_id, O.zip_code\nORDER BY SUM(C.charge_amount) DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [], "gt": [[3, "02647"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT o.owner_id, o.zip_code \nFROM Owners o\nJOIN (\n  SELECT owner_id, SUM(T1.charge_amount) as total_spend\n  FROM Charges T1\n  JOIN Treatments T2 ON T1.charge_id = T2.treatment_id\n  GROUP BY owner_id\n) T3 \nON o.owner_id = T3.owner_id\nORDER BY T3.total_spend DESC\nLIMIT 1", "match": {"match": false, "error": "Query execution failed with error: no such column: owner_id"}}
{"result": "SELECT DISTINCT T1.professional_id, T1.cell_number\nFROM Professionals AS T1\nJOIN Treatments AS T2 ON T1.professional_id = T2.professional_id\nJOIN Treatment_Types AS T3 ON T2.treatment_type_code = T3.treatment_type_code\nGROUP BY T1.professional_id\nHAVING COUNT(DISTINCT T3.treatment_type_code) >= 2", "match": {"match": false, "result": [[6, "139-321-7313"], [9, "962-983-8109x3509"], [10, "461-801-2600"], [14, "1-185-137-1945x409"]], "gt": [[4, "00230569697"], [6, "139-321-7313"], [8, "328.842.3792"], [9, "962-983-8109x3509"], [10, "461-801-2600"], [14, "1-185-137-1945x409"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT `professional_id`, `cell_number` \nFROM `Professionals` \nWHERE `professional_id` IN ( \n  SELECT `professional_id` \n  FROM `Treatments` \n  GROUP BY `professional_id` \n  HAVING COUNT(`treatment_id`)  >= 2 \n);", "match": {"match": true, "result": [[4, "00230569697"], [6, "139-321-7313"], [8, "328.842.3792"], [9, "962-983-8109x3509"], [10, "461-801-2600"], [14, "1-185-137-1945x409"]]}}
{"result": "SELECT T2.first_name, T2.last_name \nFROM Treatments AS T1 \nJOIN Professionals AS T2 ON T1.professional_id = T2.professional_id \nJOIN Charges AS T3 ON T3.charge_id = ( SELECT charge_id FROM Charges WHERE charge_type = 'Average' AND charge_amount > ( SELECT AVG(charge_amount) FROM Charges ) ) \nWHERE T1.cost_of_treatment < T3.charge_amount", "match": {"match": false, "result": [], "gt": [["Taryn", "Braun"], ["Jayson", "Ullrich"], ["Olaf", "Watsica"], ["Vernice", "Tillman"], ["Danny", "Considine"], ["Ruben", "O'Reilly"], ["Velva", "Hayes"], ["Karley", "Hyatt"], ["Monte", "Kshlerin"], ["Domenica", "Jacobs"], ["Brady", "Pouros"], ["Winfield", "Christiansen"], ["Ericka", "Murazik"], ["Sigurd", "Frami"], ["Lesly", "Walter"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT p.first_name, p.last_name \nFROM Professionals p \nJOIN Treatments t ON p.professional_id = t.professional_id \nWHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)", "match": {"match": false, "result": [["Domenica", "Jacobs"], ["Vernice", "Tillman"], ["Karley", "Hyatt"], ["Vernice", "Tillman"], ["Ruben", "O'Reilly"], ["Domenica", "Jacobs"], ["Monte", "Kshlerin"], ["Monte", "Kshlerin"]], "gt": [["Taryn", "Braun"], ["Jayson", "Ullrich"], ["Olaf", "Watsica"], ["Vernice", "Tillman"], ["Danny", "Considine"], ["Ruben", "O'Reilly"], ["Velva", "Hayes"], ["Karley", "Hyatt"], ["Monte", "Kshlerin"], ["Domenica", "Jacobs"], ["Brady", "Pouros"], ["Winfield", "Christiansen"], ["Ericka", "Murazik"], ["Sigurd", "Frami"], ["Lesly", "Walter"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.date_of_treatment, P.first_name \nFROM Treatments AS T1 \nJOIN Professionals AS P \nON T1.professional_id = P.professional_id", "match": {"match": true, "result": [["2018-03-19 04:39:54", "Monte"], ["2018-03-15 20:25:34", "Domenica"], ["2018-03-08 05:26:23", "Vernice"], ["2018-03-01 04:14:46", "Karley"], ["2018-03-23 13:52:10", "Sigurd"], ["2018-03-11 04:23:15", "Vernice"], ["2018-03-10 11:45:58", "Sigurd"], ["2018-03-24 22:25:58", "Ruben"], ["2018-03-14 19:10:40", "Domenica"], ["2018-02-28 17:09:43", "Velva"], ["2018-03-13 12:22:58", "Danny"], ["2018-03-16 10:27:36", "Monte"], ["2018-02-26 09:08:53", "Karley"], ["2018-03-04 20:33:43", "Monte"], ["2018-03-15 19:10:02", "Ruben"]]}}
{"result": "SELECT T1.date_of_treatment, P.first_name\nFROM Treatments AS T1\nJOIN Professionals AS P ON T1.professional_id = P.professional_id", "match": {"match": true, "result": [["2018-03-19 04:39:54", "Monte"], ["2018-03-15 20:25:34", "Domenica"], ["2018-03-08 05:26:23", "Vernice"], ["2018-03-01 04:14:46", "Karley"], ["2018-03-23 13:52:10", "Sigurd"], ["2018-03-11 04:23:15", "Vernice"], ["2018-03-10 11:45:58", "Sigurd"], ["2018-03-24 22:25:58", "Ruben"], ["2018-03-14 19:10:40", "Domenica"], ["2018-02-28 17:09:43", "Velva"], ["2018-03-13 12:22:58", "Danny"], ["2018-03-16 10:27:36", "Monte"], ["2018-02-26 09:08:53", "Karley"], ["2018-03-04 20:33:43", "Monte"], ["2018-03-15 19:10:02", "Ruben"]]}}
{"result": "SELECT T1.cost_of_treatment, T2.treatment_type_description \nFROM Treatments AS T1 \nJOIN Treatment_Types AS T2 \nON T1.treatment_type_code = T2.treatment_type_code", "match": {"match": true, "result": [[567, "Take for a Walk"], [147, "Vaccination"], [429, "Physical examination"], [266, "Vaccination"], [668, "Vaccination"], [313, "Physical examination"], [852, "Physical examination"], [407, "Physical examination"], [139, "Take for a Walk"], [681, "Take for a Walk"], [514, "Vaccination"], [428, "Physical examination"], [945, "Vaccination"], [349, "Take for a Walk"], [656, "Take for a Walk"]]}}
{"result": "SELECT T1.cost_of_treatment, T2.treatment_type_description\nFROM Treatments AS T1\nJOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code", "match": {"match": true, "result": [[567, "Take for a Walk"], [147, "Vaccination"], [429, "Physical examination"], [266, "Vaccination"], [668, "Vaccination"], [313, "Physical examination"], [852, "Physical examination"], [407, "Physical examination"], [139, "Take for a Walk"], [681, "Take for a Walk"], [514, "Vaccination"], [428, "Physical examination"], [945, "Vaccination"], [349, "Take for a Walk"], [656, "Take for a Walk"]]}}
{"result": "SELECT o.first_name, o.last_name, d.size_code \nFROM Owners o \nJOIN Dogs d ON o.owner_id = d.owner_id;", "match": {"match": true, "result": [["Jaclyn", "Stoltenberg", "LGE"], ["Gay", "Feil", "LGE"], ["Nora", "Haley", "MED"], ["Rachelle", "Funk", "LGE"], ["Emelie", "Mertz", "MED"], ["Johann", "Fisher", "MED"], ["Jaclyn", "Stoltenberg", "MED"], ["Rachelle", "Funk", "SML"], ["Melisa", "DuBuque", "MED"], ["Kade", "Rippin", "MED"], ["Cindy", "Schmitt", "LGE"], ["Orlando", "Price", "MED"], ["Rolando", "Prohaska", "SML"], ["Rachelle", "Funk", "MED"], ["Lorenz", "Nicolas", "MED"]]}}
{"result": "SELECT o.first_name, o.last_name, d.size_code \nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id;", "match": {"match": true, "result": [["Jaclyn", "Stoltenberg", "LGE"], ["Gay", "Feil", "LGE"], ["Nora", "Haley", "MED"], ["Rachelle", "Funk", "LGE"], ["Emelie", "Mertz", "MED"], ["Johann", "Fisher", "MED"], ["Jaclyn", "Stoltenberg", "MED"], ["Rachelle", "Funk", "SML"], ["Melisa", "DuBuque", "MED"], ["Kade", "Rippin", "MED"], ["Cindy", "Schmitt", "LGE"], ["Orlando", "Price", "MED"], ["Rolando", "Prohaska", "SML"], ["Rachelle", "Funk", "MED"], ["Lorenz", "Nicolas", "MED"]]}}
{"result": "SELECT T1.first_name, T2.name \nFROM Owners AS T1 \nINNER JOIN Dogs AS T2 \nON T1.owner_id = T2.owner_id", "match": {"match": true, "result": [["Jaclyn", "Kacey"], ["Gay", "Hipolito"], ["Nora", "Mavis"], ["Rachelle", "Houston"], ["Emelie", "Jeffrey"], ["Johann", "Merritt"], ["Jaclyn", "Narciso"], ["Rachelle", "George"], ["Melisa", "Bessie"], ["Kade", "Troy"], ["Cindy", "Betty"], ["Orlando", "Holden"], ["Rolando", "Jesus"], ["Rachelle", "Lyric"], ["Lorenz", "Evangeline"]]}}
{"result": "SELECT o.first_name, d.name \nFROM Owners o \nJOIN Dogs d ON o.owner_id = d.owner_id", "match": {"match": true, "result": [["Jaclyn", "Kacey"], ["Gay", "Hipolito"], ["Nora", "Mavis"], ["Rachelle", "Houston"], ["Emelie", "Jeffrey"], ["Johann", "Merritt"], ["Jaclyn", "Narciso"], ["Rachelle", "George"], ["Melisa", "Bessie"], ["Kade", "Troy"], ["Cindy", "Betty"], ["Orlando", "Holden"], ["Rolando", "Jesus"], ["Rachelle", "Lyric"], ["Lorenz", "Evangeline"]]}}
{"result": "SELECT T1.name, T2.treatment_type_description, T1.breed_name, T2.date_of_treatment \nFROM Dogs AS T1 \nJOIN Breeds AS T3 ON T1.breed_code = T3.breed_code \nJOIN Treatments AS T2 ON T1.dog_id = T2.dog_id \nJOIN Treatment_Types AS T4 ON T2.treatment_type_code = T4.treatment_type_code \nWHERE T1.breed_name = ( SELECT breed_name FROM Breeds ORDER BY COUNT(DISTINCT T1.dog_id) ASC LIMIT 1 )", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.treatment_type_description"}}
{"result": "SELECT T1.name, T3.treatment_date \nFROM Dogs T1 \nJOIN Breeds T2 ON T1.breed_code = T2.breed_code \nJOIN (\n  SELECT breed_code, MAX(count) as max_count \n  FROM (\n    SELECT breed_code, COUNT(*) as count \n    FROM Treatments \n    GROUP BY breed_code \n  ) as sub \n  GROUP BY breed_code \n) T4 ON T2.breed_code = T4.breed_code \nJOIN (\n  SELECT breed_code, treatment_id, treatment_date \n  FROM Treatments \n  GROUP BY breed_code, treatment_id, treatment_date \n) T3 ON T1.dog_id = T3.dog_id", "match": {"match": false, "error": "Query execution failed with error: no such column: breed_code"}}
{"result": "SELECT o.first_name, d.name \nFROM Owners o \nJOIN Dogs d ON o.owner_id = d.owner_id \nWHERE o.state = 'VA';", "match": {"match": false, "result": [], "gt": [["Melisa", "Bessie"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT o.first_name, d.name \nFROM Owners o \nJOIN Dogs d ON o.owner_id = d.owner_id \nWHERE o.state = 'Virginia';", "match": {"match": true, "result": [["Melisa", "Bessie"]]}}
{"result": "SELECT T1.date_arrived, T1.date_departed \nFROM Dogs T1 \nJOIN Treatments T2 ON T1.dog_id = T2.dog_id", "match": {"match": false, "result": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "gt": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.date_arrived, T2.date_departed \nFROM Treatments AS T1 \nJOIN Dogs AS T2 ON T1.dog_id = T2.dog_id", "match": {"match": false, "result": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "gt": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.last_name \nFROM Dogs T1 \nJOIN Owners T2 ON T1.owner_id = T2.owner_id \nORDER BY T1.date_of_birth DESC \nLIMIT 1", "match": {"match": false, "result": [["Mertz"]], "gt": [["Feil"], ["Fisher"], ["Rippin"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.last_name \nFROM Dogs AS T1 \nJOIN Owners AS T2 ON T1.owner_id = T2.owner_id \nWHERE T1.age = ( SELECT MIN(age) \n                 FROM Dogs );", "match": {"match": false, "result": [["Nicolas"]], "gt": [["Feil"], ["Fisher"], ["Rippin"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT email_address \nFROM Professionals \nWHERE state = 'HI' OR state = 'WI'", "match": {"match": false, "result": [], "gt": [["uboehm@example.org"], ["mekhi.little@example.org"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT email_address \nFROM Professionals \nWHERE state IN ('HI', 'WI');", "match": {"match": false, "result": [], "gt": [["uboehm@example.org"], ["mekhi.little@example.org"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT date_arrived, date_departed \nFROM Dogs", "match": {"match": true, "result": [["2017-09-08 20:10:13", "2018-03-25 06:58:44"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-25 10:14:05", "2018-03-25 10:25:46"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-10-25 00:55:34", "2018-03-25 04:50:22"], ["2017-04-15 09:25:31", "2018-03-25 13:07:04"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-10-16 20:06:21", "2018-03-25 02:47:40"], ["2018-01-17 11:44:16", "2018-03-25 06:46:07"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-07-25 15:19:07", "2018-03-25 15:05:16"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"]]}}
{"result": "SELECT date_arrived, date_departed \nFROM Dogs;", "match": {"match": true, "result": [["2017-09-08 20:10:13", "2018-03-25 06:58:44"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-25 10:14:05", "2018-03-25 10:25:46"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-10-25 00:55:34", "2018-03-25 04:50:22"], ["2017-04-15 09:25:31", "2018-03-25 13:07:04"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-10-16 20:06:21", "2018-03-25 02:47:40"], ["2018-01-17 11:44:16", "2018-03-25 06:46:07"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-07-25 15:19:07", "2018-03-25 15:05:16"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"]]}}
{"result": "SELECT COUNT(DISTINCT T1.dog_id) \nFROM Treatments AS T1;", "match": {"match": true, "result": [[9]]}}
{"result": "```sql\nSELECT COUNT(DISTINCT d.dog_id) \nFROM Dogs d \nJOIN Treatments t ON d.dog_id = t.dog_id;\n```", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(DISTINCT professional_id) \nFROM Treatments", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT COUNT(*) \nFROM Professionals \nWHERE professional_id IN (SELECT professional_id FROM Treatments);", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT T1.role_code, T1.street, T1.city, T1.state \nFROM Professionals AS T1 \nJOIN Owners AS T2 ON T1.professional_id = T2.owner_id \nWHERE T2.city LIKE '%West%'", "match": {"match": false, "result": [["Employee", "390 Bryce Drive\nNorth Dock, LA 65357-7228", "East Ila", "Connecticut"]], "gt": [["Employee", "6915 Oberbrunner Point Suite 491\nGleasonville, LA ", "West Heidi", "Indiana"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.role_code, T2.street, T2.city, T2.state\nFROM Owners AS T1\nJOIN Professionals AS T2 ON T2.zip_code = T1.zip_code\nWHERE T1.city LIKE '%West%';", "match": {"match": false, "result": [], "gt": [["Employee", "6915 Oberbrunner Point Suite 491\nGleasonville, LA ", "West Heidi", "Indiana"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT first_name, last_name, email_address \nFROM Owners \nWHERE state LIKE '%North%';", "match": {"match": true, "result": [["Johann", "Fisher", "zboncak.madonna@example.net"], ["Cindy", "Schmitt", "wpfeffer@example.net"]]}}
{"result": "SELECT `first_name`, `last_name`, `email_address` \nFROM `Owners` \nWHERE `state` LIKE '%North%';", "match": {"match": true, "result": [["Johann", "Fisher", "zboncak.madonna@example.net"], ["Cindy", "Schmitt", "wpfeffer@example.net"]]}}
{"result": "SELECT COUNT(*) \nFROM Dogs \nWHERE age < (SELECT AVG(age) FROM Dogs);", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(*) \nFROM Dogs \nWHERE age < (SELECT AVG(age) FROM Dogs);", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT cost_of_treatment \nFROM Treatments \nORDER BY date_of_treatment DESC \nLIMIT 1", "match": {"match": true, "result": [[407]]}}
{"result": "SELECT MAX(t1.cost_of_treatment) \nFROM Treatments t1;", "match": {"match": false, "result": [[945]], "gt": [[407]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) \nFROM Dogs \nLEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id \nWHERE Treatments.treatment_id IS NULL", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(*) \nFROM Dogs \nWHERE dog_id NOT IN (SELECT dog_id FROM Treatments);", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(owner_id) FROM Dogs WHERE abandoned_yn = 'Y'", "match": {"match": false, "result": [[0]], "gt": [[3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(owner_id) \nFROM Owners \nWHERE owner_id NOT IN (SELECT owner_id \n                        FROM Dogs);", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(*) \nFROM Professionals \nLEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id \nWHERE Treatments.treatment_id IS NULL", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT COUNT(*) \nFROM Professionals \nLEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id \nWHERE Treatments.treatment_id IS NULL", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT name, age, weight \nFROM Dogs \nWHERE abandoned_yn = '1';", "match": {"match": true, "result": [["Kacey", "6", "7.57"], ["Lyric", "4", "4.36"], ["Evangeline", "1", "4.01"]]}}
{"result": "SELECT name, age, weight\nFROM Dogs\nWHERE abandoned_yn = '1';", "match": {"match": true, "result": [["Kacey", "6", "7.57"], ["Lyric", "4", "4.36"], ["Evangeline", "1", "4.01"]]}}
{"result": "SELECT AVG(`age`) FROM `Dogs`", "match": {"match": true, "result": [[5.066666666666666]]}}
{"result": "SELECT CAST(SUM(COALESCE(age, 0)) AS DECIMAL(10,2)) / COUNT(dog_id) AS average_age\nFROM Dogs", "match": {"match": false, "result": [[5]], "gt": [[5.066666666666666]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(age) FROM Dogs", "match": {"match": true, "result": [["9"]]}}
{"result": "SELECT MAX(STR_TO_DATE(date_of_birth, '%Y-%m-%d')) AS oldest_dog \nFROM Dogs", "match": {"match": false, "error": "Query execution failed with error: no such function: STR_TO_DATE"}}
{"result": "SELECT charge_type, charge_amount FROM Charges", "match": {"match": true, "result": [["Daily Accommodation", 98], ["Drugs", 322], ["Health Check", 640]]}}
{"result": "SELECT charge_type, charge_amount FROM Charges", "match": {"match": true, "result": [["Daily Accommodation", 98], ["Drugs", 322], ["Health Check", 640]]}}
{"result": "SELECT charge_type, MAX(charge_amount) \nFROM Charges \nGROUP BY charge_type;", "match": {"match": false, "result": [["Daily Accommodation", 98], ["Drugs", 322], ["Health Check", 640]], "gt": [[640]], "error": "Query result does not match ground truth."}}
{"result": "SELECT charge_type, MAX(charge_amount) as max_charge FROM Charges GROUP BY charge_type", "match": {"match": false, "result": [["Daily Accommodation", 98], ["Drugs", 322], ["Health Check", 640]], "gt": [[640]], "error": "Query result does not match ground truth."}}
{"result": "SELECT email_address, cell_number, home_phone FROM Professionals", "match": {"match": true, "result": [["deanna.schuster@example.com", "(275)939-2435x80863", "+71(6)2898266914"], ["lucile.shanahan@example.org", "889-940-2676", "+02(1)0259033559"], ["uboehm@example.org", "(369)908-7311x065", "325-155-0801x7005"], ["lourdes.lowe@example.net", "00230569697", "312.216.3352"], ["mekhi.little@example.org", "011.193.9081x3186", "1-609-566-2752x25197"], ["jacynthe.mclaughlin@example.net", "139-321-7313", "+43(5)1132733868"], ["lambert62@example.org", "499-434-0215x1628", "022.529.0550x1319"], ["goyette.roosevelt@example.net", "328.842.3792", "891.475.2256"], ["schneider.kathryne@example.org", "962-983-8109x3509", "320-508-6023"], ["jerrod.bahringer@example.org", "461-801-2600", "(230)338-3342x585"], ["west.eula@example.net", "609-405-2990", "(920)304-4499x59146"], ["marquardt.furman@example.org", "1-181-670-9466", "246-951-0080x76716"], ["delphine29@example.com", "880-659-7577x736", "346.594.3739"], ["cole.margarita@example.org", "1-185-137-1945x409", "971.048.3763x9404"], ["jeichmann@example.com", "1-258-285-4707x8020", "1-138-287-3775"]]}}
{"result": "SELECT email_address, cell_number, home_phone FROM Professionals", "match": {"match": true, "result": [["deanna.schuster@example.com", "(275)939-2435x80863", "+71(6)2898266914"], ["lucile.shanahan@example.org", "889-940-2676", "+02(1)0259033559"], ["uboehm@example.org", "(369)908-7311x065", "325-155-0801x7005"], ["lourdes.lowe@example.net", "00230569697", "312.216.3352"], ["mekhi.little@example.org", "011.193.9081x3186", "1-609-566-2752x25197"], ["jacynthe.mclaughlin@example.net", "139-321-7313", "+43(5)1132733868"], ["lambert62@example.org", "499-434-0215x1628", "022.529.0550x1319"], ["goyette.roosevelt@example.net", "328.842.3792", "891.475.2256"], ["schneider.kathryne@example.org", "962-983-8109x3509", "320-508-6023"], ["jerrod.bahringer@example.org", "461-801-2600", "(230)338-3342x585"], ["west.eula@example.net", "609-405-2990", "(920)304-4499x59146"], ["marquardt.furman@example.org", "1-181-670-9466", "246-951-0080x76716"], ["delphine29@example.com", "880-659-7577x736", "346.594.3739"], ["cole.margarita@example.org", "1-185-137-1945x409", "971.048.3763x9404"], ["jeichmann@example.com", "1-258-285-4707x8020", "1-138-287-3775"]]}}
{"result": "SELECT DISTINCT breed_code, size_code \nFROM Dogs;", "match": {"match": true, "result": [["ESK", "LGE"], ["BUL", "LGE"], ["BUL", "MED"], ["HUS", "MED"], ["ESK", "SML"], ["HUS", "SML"], ["ESK", "MED"]]}}
{"result": "SELECT DISTINCT breed_code, size_code FROM Dogs", "match": {"match": true, "result": [["ESK", "LGE"], ["BUL", "LGE"], ["BUL", "MED"], ["HUS", "MED"], ["ESK", "SML"], ["HUS", "SML"], ["ESK", "MED"]]}}
{"result": "SELECT T1.first_name, TT.treatment_type_description \nFROM Professionals AS T1 \nINNER JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id \nINNER JOIN Treatment_Types AS TT ON T2.treatment_type_code = TT.treatment_type_code", "match": {"match": false, "result": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Vernice", "Physical examination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Karley", "Vaccination"], ["Monte", "Take for a Walk"], ["Ruben", "Take for a Walk"]], "gt": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Ruben", "Take for a Walk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.first_name, T2.treatment_type_description \nFROM Professionals T1 \nINNER JOIN Treatments T3 ON T1.professional_id = T3.professional_id \nINNER JOIN Treatment_Types T2 ON T2.treatment_type_code = T3.treatment_type_code", "match": {"match": false, "result": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Vernice", "Physical examination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Karley", "Vaccination"], ["Monte", "Take for a Walk"], ["Ruben", "Take for a Walk"]], "gt": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Ruben", "Take for a Walk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(Singer_ID) FROM singer", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT COUNT(*) FROM singer", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "match": {"match": true, "result": [["Abigail Johnson"], ["Susanne Klatten"], ["Gina Rinehart"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Alice Walton"], ["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "match": {"match": true, "result": [["Abigail Johnson"], ["Susanne Klatten"], ["Gina Rinehart"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Alice Walton"], ["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT Birth_Year, Citizenship FROM singer", "match": {"match": true, "result": [[1944.0, "France"], [1948.0, "United States"], [1949.0, "United States"], [1942.0, "Chile"], [1940.0, "United States"], [1953.0, "Australia"], [1962.0, "Germany"], [1961.0, "United States"]]}}
{"result": "SELECT Birth_Year, Citizenship FROM singer", "match": {"match": true, "result": [[1944.0, "France"], [1948.0, "United States"], [1949.0, "United States"], [1942.0, "Chile"], [1940.0, "United States"], [1953.0, "Australia"], [1962.0, "Germany"], [1961.0, "United States"]]}}
{"result": "SELECT Name \nFROM singer \nWHERE Citizenship != \"France\";", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]]}}
{"result": "SELECT Name FROM singer WHERE Citizenship != 'France'", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]]}}
{"result": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"]]}}
{"result": "SELECT Name \nFROM singer \nWHERE Birth_Year = 1948 OR Birth_Year = 1949", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "match": {"match": true, "result": [["Liliane Bettencourt"]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "match": {"match": true, "result": [["Liliane Bettencourt"]]}}
{"result": "SELECT Citizenship, COUNT(Name) \nFROM singer \nGROUP BY Citizenship", "match": {"match": true, "result": [["Australia", 1], ["Chile", 1], ["France", 1], ["Germany", 1], ["United States", 4]]}}
{"result": "SELECT Citizenship, COUNT(Singer_ID) FROM singer GROUP BY Citizenship", "match": {"match": true, "result": [["Australia", 1], ["Chile", 1], ["France", 1], ["Germany", 1], ["United States", 4]]}}
{"result": "SELECT Citizenship\nFROM singer\nGROUP BY Citizenship\nORDER BY COUNT(Citizenship) DESC\nLIMIT 1;", "match": {"match": true, "result": [["United States"]]}}
{"result": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(Citizenship) DESC LIMIT 1;", "match": {"match": true, "result": [["United States"]]}}
{"result": "SELECT Citizenship, MAX ( Net_Worth_Millions ) FROM singer GROUP BY Citizenship", "match": {"match": true, "result": [["Australia", 17.0], ["Chile", 17.4], ["France", 30.0], ["Germany", 14.3], ["United States", 28.8]]}}
{"result": "SELECT Citizenship, MAX(Net_Worth_Millions) as max_net_worth\nFROM singer\nGROUP BY Citizenship", "match": {"match": true, "result": [["Australia", 17.0], ["Chile", 17.4], ["France", 30.0], ["Germany", 14.3], ["United States", 28.8]]}}
{"result": "SELECT T2.Title, T1.Name \nFROM singer AS T1 \nJOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID", "match": {"match": true, "result": [["Do They Know It's Christmas", "Liliane Bettencourt"], ["F**k It (I Don't Want You Back)", "Liliane Bettencourt"], ["Cha Cha Slide", "Christy Walton"], ["Call on Me", "Iris Fontbona"], ["Yeah", "Christy Walton"], ["All This Time", "Gina Rinehart"], ["Left Outside Alone", "Jacqueline Mars"], ["Mysterious Girl", "Susanne Klatten"]]}}
{"result": "SELECT T2.Title, T1.Name \nFROM singer AS T1 \nINNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID", "match": {"match": true, "result": [["Do They Know It's Christmas", "Liliane Bettencourt"], ["F**k It (I Don't Want You Back)", "Liliane Bettencourt"], ["Cha Cha Slide", "Christy Walton"], ["Call on Me", "Iris Fontbona"], ["Yeah", "Christy Walton"], ["All This Time", "Gina Rinehart"], ["Left Outside Alone", "Jacqueline Mars"], ["Mysterious Girl", "Susanne Klatten"]]}}
{"result": "SELECT DISTINCT T2.Name \nFROM song AS T1 \nINNER JOIN singer AS T2 \nON T1.Singer_ID = T2.Singer_ID \nWHERE T1.Sales > 300000", "match": {"match": true, "result": [["Liliane Bettencourt"], ["Christy Walton"], ["Iris Fontbona"]]}}
{"result": "SELECT DISTINCT T1.Name \nFROM singer AS T1 \nJOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID \nWHERE T2.Sales > 300000", "match": {"match": true, "result": [["Liliane Bettencourt"], ["Christy Walton"], ["Iris Fontbona"]]}}
{"result": "SELECT Name \nFROM singer \nWHERE Singer_ID IN (SELECT Singer_ID \n                    FROM song \n                    GROUP BY Singer_ID \n                    HAVING COUNT(Singer_ID) > 1);", "match": {"match": false, "result": [["Liliane Bettencourt"], ["Christy Walton"]], "gt": [["Christy Walton"], ["Liliane Bettencourt"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name \nFROM singer AS T1 \nINNER JOIN song AS T2 \nON T1.Singer_ID = T2.Singer_ID \nGROUP BY T1.Name \nHAVING COUNT(T2.Singer_ID) > 1", "match": {"match": true, "result": [["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT T1.Name, SUM(T2.Sales) \nFROM singer AS T1 \nINNER JOIN song AS T2 \nON T1.Singer_ID = T2.Singer_ID \nGROUP BY T1.Name", "match": {"match": true, "result": [["Christy Walton", 651421.0], ["Gina Rinehart", 292000.0], ["Iris Fontbona", 335000.0], ["Jacqueline Mars", 275000.0], ["Liliane Bettencourt", 1646407.0], ["Susanne Klatten", 261000.0]]}}
{"result": "SELECT T2.Name, SUM(T1.Sales) FROM song AS T1 INNER JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Name", "match": {"match": true, "result": [["Christy Walton", 651421.0], ["Gina Rinehart", 292000.0], ["Iris Fontbona", 335000.0], ["Jacqueline Mars", 275000.0], ["Liliane Bettencourt", 1646407.0], ["Susanne Klatten", 261000.0]]}}
{"result": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "match": {"match": true, "result": [["Alice Walton"], ["Abigail Johnson"]]}}
{"result": "SELECT s.Name AS sname \nFROM singer s \nLEFT JOIN song ON s.Singer_ID = song.Singer_ID \nWHERE song.Singer_ID IS NULL", "match": {"match": true, "result": [["Alice Walton"], ["Abigail Johnson"]]}}
{"result": "SELECT Citizenship \nFROM singer \nWHERE Birth_Year < 1945 \nINTERSECT \nSELECT Citizenship \nFROM singer \nWHERE Birth_Year > 1955", "match": {"match": true, "result": [["United States"]]}}
{"result": "SELECT T1.Citizenship \nFROM singer AS T1 \nJOIN singer AS T2 \nON T1.Citizenship = T2.Citizenship \nWHERE T1.Birth_Year < 1945 \nAND T1.Birth_Year > 1955 \nAND T2.Birth_Year < 1945 \nAND T2.Birth_Year > 1955 \nGROUP BY T1.Citizenship \nHAVING COUNT(DISTINCT T1.Singer_ID) > 1;", "match": {"match": false, "result": [], "gt": [["United States"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) \nFROM Other_Available_Features", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT T1.feature_type_name \nFROM Ref_Feature_Types AS T1 \nINNER JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code \nWHERE T2.feature_name = 'AirCon';", "match": {"match": true, "result": [["Amenity, eg Pool."]]}}
{"result": "SELECT T1.property_type_description \nFROM Ref_Property_Types AS T1 \nINNER JOIN Properties AS T2 ON T1.property_type_code = T2.property_type_code", "match": {"match": false, "result": [["House, Bungalow, etc."], ["House, Bungalow, etc."], ["Other, to be determined."], ["Field, Meadow."], ["Apartment, Flat, Condo, etc."], ["Shop, Retail Outlet."], ["Shop, Retail Outlet."], ["Apartment, Flat, Condo, etc."], ["Apartment, Flat, Condo, etc."], ["Apartment, Flat, Condo, etc."], ["Other, to be determined."], ["Apartment, Flat, Condo, etc."], ["Other, to be determined."], ["Other, to be determined."], ["Apartment, Flat, Condo, etc."]], "gt": [["Apartment, Flat, Condo, etc."], ["Field, Meadow."], ["House, Bungalow, etc."], ["Other, to be determined."], ["Shop, Retail Outlet."]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    P.property_name, \n    P.property_type_description\nFROM \n    Properties P\nINNER JOIN \n    Ref_Property_Types RPT ON P.property_type_code = RPT.property_type_code\nWHERE \n    (RPT.property_type_description = 'House' OR RPT.property_type_description = 'Apartment') \n    AND P.room_count > 1", "match": {"match": false, "error": "Query execution failed with error: no such column: P.property_type_description"}}

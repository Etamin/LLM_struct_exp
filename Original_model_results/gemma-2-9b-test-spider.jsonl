
{"result": "SELECT COUNT(*) FROM singer; \n", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(*) FROM singer;", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC;", "match": {"match": true, "result": [["Joe Sharp", "Netherlands", 52], ["John Nizinik", "France", 43], ["Rose White", "France", 41], ["Timbaland", "United States", 32], ["Justin Brown", "France", 29], ["Tribal King", "France", 25]]}}
{"result": "SELECT Name, Country, Age \nFROM singer \nORDER BY Age DESC;", "match": {"match": true, "result": [["Joe Sharp", "Netherlands", 52], ["John Nizinik", "France", 43], ["Rose White", "France", 41], ["Timbaland", "United States", 32], ["Justin Brown", "France", 29], ["Tribal King", "France", 25]]}}
{"result": "SELECT AVG(s.Age), MIN(s.Age), MAX(s.Age)\nFROM singer s\nWHERE s.Country = 'France'; \n", "match": {"match": true, "result": [[34.5, 25, 43]]}}
{"result": "SELECT AVG(Age), MIN(Age), MAX(Age)\nFROM singer\nWHERE Country = 'France'; \n", "match": {"match": true, "result": [[34.5, 25, 43]]}}
{"result": "SELECT s.Name, sc.Song_release_year\nFROM singer s\nJOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID\nJOIN concert c ON sic.concert_ID = c.concert_ID\nJOIN singer_in_concert sic2 ON c.concert_ID = sic2.concert_ID\nJOIN singer s2 ON sic2.Singer_ID = s2.Singer_ID\nWHERE s.Age = (SELECT MIN(Age) FROM singer)\nORDER BY s.Age;", "match": {"match": false, "error": "Query execution failed with error: no such column: sc.Song_release_year"}}
{"result": "SELECT s.Name, sc.Song_release_year \nFROM singer s\nJOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID\nJOIN concert c ON sic.concert_ID = c.concert_ID\nJOIN singer_in_concert sic2 ON c.concert_ID = sic2.concert_ID\nJOIN singer s2 ON sic2.Singer_ID = s2.Singer_ID\nWHERE s.Age = (SELECT MIN(Age) FROM singer)\nORDER BY s.Name, sc.Song_release_year;\n", "match": {"match": false, "error": "Query execution failed with error: no such column: sc.Song_release_year"}}
{"result": "```sql\nSELECT DISTINCT Country\nFROM singer\nWHERE Age > 20;\n```", "match": {"match": true, "result": [["Netherlands"], ["United States"], ["France"]]}}
{"result": "SELECT DISTINCT Country\nFROM singer\nWHERE Age > 20; \n", "match": {"match": true, "result": [["Netherlands"], ["United States"], ["France"]]}}
{"result": "SELECT \"Country\", COUNT(\"Singer_ID\") AS \"Number_of_Singers\"\nFROM \"singer\"\nGROUP BY \"Country\";", "match": {"match": true, "result": [["France", 4], ["Netherlands", 1], ["United States", 1]]}}
{"result": "SELECT singer.Country, COUNT(*) AS NumberOfSingers\nFROM singer\nGROUP BY singer.Country;", "match": {"match": true, "result": [["France", 4], ["Netherlands", 1], ["United States", 1]]}}
{"result": "SELECT s.SongName\r\nFROM singer s\r\nJOIN singer_in_concert sic ON s.SingerID = sic.SingerID\r\nWHERE s.Age > (SELECT AVG(Age) FROM singer);\r\n", "match": {"match": false, "error": "Query execution failed with error: no such column: s.SongName"}}
{"result": "SELECT s.SongName\nFROM singer s\nJOIN singer_in_concert sic ON s.SingerID = sic.SingerID\nJOIN concert c ON sic.concertID = c.concertID\nWHERE s.Age > (SELECT AVG(Age) FROM singer);", "match": {"match": false, "error": "Query execution failed with error: no such column: s.SongName"}}
{"result": "SELECT Location, Name \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000;  \n", "match": {"match": true, "result": []}}
{"result": "SELECT Location, Name\nFROM stadium\nWHERE Capacity BETWEEN 5000 AND 10000; \n", "match": {"match": true, "result": []}}
{"result": "SELECT MAX(Capacity), AVG(Capacity) FROM stadium; \n", "match": {"match": false, "result": [[52500, 10621.666666666666]], "gt": [[52500, 730]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(Capacity) AS AverageCapacity, MAX(Capacity) AS MaxCapacity FROM stadium; \n", "match": {"match": true, "result": [[10621.666666666666, 52500]]}}
{"result": "SELECT s.Name, s.Capacity\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nGROUP BY s.Stadium_ID, s.Name, s.Capacity\nORDER BY AVG(c.Attendance) DESC\nLIMIT 1; \n\n\n", "match": {"match": false, "error": "Query execution failed with error: no such column: c.Attendance"}}
{"result": "SELECT s.Name, s.Capacity\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nGROUP BY s.Stadium_ID, s.Name, s.Capacity\nORDER BY AVG(c.Attendance) DESC\nLIMIT 1; \n\n\n", "match": {"match": false, "error": "Query execution failed with error: no such column: c.Attendance"}}
{"result": "SELECT COUNT(*) \nFROM concert\nWHERE Year IN ('2014', '2015');", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(*)\nFROM concert\nWHERE Year IN ('2014', '2015'); \n", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT \"stadium\".\"Name\",COUNT(\"concert\".\"concert_ID\")\nFROM \"stadium\"\nJOIN \"concert\" ON \"stadium\".\"Stadium_ID\" = \"concert\".\"Stadium_ID\"\nGROUP BY \"stadium\".\"Name\"; \n\n", "match": {"match": false, "result": [["Balmoor", 1], ["Glebe Park", 1], ["Recreation Park", 1], ["Somerset Park", 2], ["Stark's Park", 1]], "gt": [["Stark's Park", 1], ["Glebe Park", 1], ["Somerset Park", 2], ["Recreation Park", 1], ["Balmoor", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT  stadium.Name, COUNT(concert.concert_Name) AS ConcertCount\nFROM stadium\nJOIN concert ON stadium.Stadium_ID = concert.Stadium_ID\nGROUP BY stadium.Name;", "match": {"match": false, "result": [["Balmoor", 1], ["Glebe Park", 1], ["Recreation Park", 1], ["Somerset Park", 2], ["Stark's Park", 1]], "gt": [["Stark's Park", 1], ["Glebe Park", 1], ["Somerset Park", 2], ["Recreation Park", 1], ["Balmoor", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.Name, s.Capacity\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.Year >= 2014\nGROUP BY s.Name, s.Capacity\nORDER BY COUNT(*) DESC\nLIMIT 1;\n", "match": {"match": true, "result": [["Somerset Park", 11998]]}}
{"result": "SELECT s.Name, s.Capacity\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.Year > 2013\nGROUP BY s.Stadium_ID, s.Name, s.Capacity\nORDER BY COUNT(c.concert_ID) DESC\nLIMIT 1; \n", "match": {"match": true, "result": [["Somerset Park", 11998]]}}
{"result": "SELECT Year, COUNT(*) AS NumberOfConcerts\r\nFROM concert\r\nGROUP BY Year\r\nORDER BY NumberOfConcerts DESC\r\nLIMIT 1; \n", "match": {"match": false, "result": [["2015", 3]], "gt": [["2015"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Year\nFROM concert\nGROUP BY Year\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n", "match": {"match": true, "result": [["2015"]]}}
{"result": "SELECT s.Name\nFROM stadium s\nLEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.Stadium_ID IS NULL;", "match": {"match": true, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"]]}}
{"result": "SELECT s.Name\nFROM stadium s\nLEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.Stadium_ID IS NULL; \n", "match": {"match": true, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"]]}}
{"result": "SELECT DISTINCT Country\nFROM singer\nWHERE Age > 40\nUNION\nSELECT DISTINCT Country\nFROM singer\nWHERE Age < 30;   \n", "match": {"match": false, "result": [["France"], ["Netherlands"]], "gt": [["France"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.Name\nFROM stadium s\nLEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.Year != 2014;", "match": {"match": false, "result": [["Somerset Park"], ["Balmoor"], ["Recreation Park"]], "gt": [["Balmoor"], ["Bayview Stadium"], ["Forthbank Stadium"], ["Gayfield Park"], ["Hampden Park"], ["Recreation Park"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.Name \nFROM stadium s \nLEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.Year IS NULL OR c.Year != '2014'; -- Assuming Year is stored as a string \n\n\n\n", "match": {"match": false, "result": [["Somerset Park"], ["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"], ["Recreation Park"], ["Balmoor"]], "gt": [["Balmoor"], ["Bayview Stadium"], ["Forthbank Stadium"], ["Gayfield Park"], ["Hampden Park"], ["Recreation Park"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT c.concertName, c.Theme, COUNT(sc.SingerID) AS NumberOfSingers\r\nFROM concert c\r\nLEFT JOIN singer_in_concert sc ON c.concertID = sc.concertID\r\nGROUP BY c.concertName, c.Theme;  \n", "match": {"match": false, "error": "Query execution failed with error: no such column: c.concertName"}}
{"result": "SELECT \n    c.concert_Name,\n    c.Theme,\n    COUNT(s.Singer_ID) \nFROM \n    concert c\nJOIN \n    singer_in_concert s ON c.concert_ID = s.concert_ID\nGROUP BY \n    c.concert_Name, c.Theme; \n", "match": {"match": false, "result": [["Auditions", "Free choice", 3], ["Home Visits", "Bleeding Love", 1], ["Super bootcamp", "Free choice 2", 2], ["Week 1", "Happy Tonight", 2], ["Week 1", "Wide Awake", 1], ["Week 2", "Party All Night", 1]], "gt": [["Auditions", "Free choice", 3], ["Super bootcamp", "Free choice 2", 2], ["Home Visits", "Bleeding Love", 1], ["Week 1", "Wide Awake", 1], ["Week 1", "Happy Tonight", 2], ["Week 2", "Party All Night", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.Name, COUNT(sc.concert_ID) AS NumberOfConcerts\nFROM singer s\nJOIN singer_in_concert sc ON s.Singer_ID = sc.Singer_ID\nGROUP BY s.Name;", "match": {"match": false, "result": [["John Nizinik", 2], ["Justin Brown", 3], ["Rose White", 1], ["Timbaland", 2], ["Tribal King", 2]], "gt": [["Timbaland", 2], ["Justin Brown", 3], ["Rose White", 1], ["John Nizinik", 2], ["Tribal King", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    s.Name, \n    COUNT(sic.concert_ID) AS NumberOfConcerts\nFROM \n    singer s\nJOIN \n    singer_in_concert sic ON s.Singer_ID = sic.Singer_ID\nGROUP BY \n    s.Name;", "match": {"match": false, "result": [["John Nizinik", 2], ["Justin Brown", 3], ["Rose White", 1], ["Timbaland", 2], ["Tribal King", 2]], "gt": [["Timbaland", 2], ["Justin Brown", 3], ["Rose White", 1], ["John Nizinik", 2], ["Tribal King", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.Name\r\nFROM singer s\r\nJOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID\r\nJOIN concert c ON sic.concert_ID = c.concert_ID\r\nWHERE c.Year = '2014';", "match": {"match": true, "result": [["Timbaland"], ["Justin Brown"], ["John Nizinik"], ["Justin Brown"], ["Tribal King"], ["Rose White"]]}}
{"result": "SELECT s.Name\nFROM singer s\nJOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID\nJOIN concert c ON sic.concert_ID = c.concert_ID\nWHERE c.Year = '2014';", "match": {"match": true, "result": [["Timbaland"], ["Justin Brown"], ["John Nizinik"], ["Justin Brown"], ["Tribal King"], ["Rose White"]]}}
{"result": "SELECT s.Name, s.Country\nFROM singer s\nJOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID\nJOIN concert c ON sic.concert_ID = c.concert_ID\nWHERE c.concert_Name LIKE '%Hey%'; \n", "match": {"match": false, "result": [], "gt": [["Justin Brown", "France"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.Name, s.Country \nFROM singer s\nJOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID\nJOIN concert c ON sic.concert_ID = c.concert_ID\nWHERE c.concert_Name LIKE '%Hey%';", "match": {"match": false, "result": [], "gt": [["Justin Brown", "France"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT\n  s.Name,\n  s.Location\nFROM\n  stadium s\nJOIN\n  concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE\n  c.Year IN ('2014', '2015')\nGROUP BY\n  s.Name, s.Location\nHAVING\n  COUNT(DISTINCT c.Year) = 2;", "match": {"match": true, "result": [["Somerset Park", "Ayr United"]]}}
{"result": "SELECT s.Name, s.Location\nFROM stadium s\nJOIN concert c ON s.StadiumID = c.StadiumID\nWHERE c.Year IN ('2014', '2015')\nGROUP BY s.Name, s.Location\nHAVING COUNT(DISTINCT c.Year) = 2; \n", "match": {"match": false, "error": "Query execution failed with error: no such column: s.StadiumID"}}
{"result": "SELECT COUNT(*) \nFROM concert \nWHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1);", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(*) \r\nFROM concert\r\nJOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID\r\nWHERE stadium.Capacity = (SELECT MAX(Capacity) FROM stadium); \n", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(*)\nFROM Pets\nWHERE weight > 10;\n", "match": {"match": true, "result": [[2]]}}
{"result": "```sql\nSELECT COUNT(*)\nFROM Pets\nWHERE weight > 10;\n```", "match": {"match": true, "result": [[2]]}}
{"result": "```sql\nSELECT weight\nFROM Pets\nWHERE PetType = 'Dog'\nORDER BY pet_age ASC\nLIMIT 1;\n```", "match": {"match": false, "result": [], "gt": [[9.3]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT weight\nFROM Pets\nWHERE PetType = 'dog'\nORDER BY pet_age ASC\nLIMIT 1;\n```", "match": {"match": true, "result": [[9.3]]}}
{"result": "SELECT PetType, MAX(weight) \nFROM Pets\nGROUP BY PetType; \n", "match": {"match": false, "result": [["cat", 12.0], ["dog", 13.4]], "gt": [[12.0, "cat"], [13.4, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT PetType, MAX(weight) AS MaxWeight\nFROM Pets\nGROUP BY PetType; \n", "match": {"match": false, "result": [["cat", 12.0], ["dog", 13.4]], "gt": [[12.0, "cat"], [13.4, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT COUNT(*)\nFROM Has_Pet\nWHERE StuID IN (SELECT StuID FROM Student WHERE Age > 20);\n```", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(*) \r\nFROM Has_Pet \r\nJOIN Student ON Has_Pet.StuID = Student.StuID\r\nWHERE Student.Age > 20; \n", "match": {"match": true, "result": [[0]]}}
{"result": "```sql\nSELECT COUNT(*)\nFROM Has_Pet\nJOIN Pets ON Has_Pet.PetID = Pets.PetID\nJOIN Student ON Has_Pet.StuID = Student.StuID\nWHERE Pets.PetType = 'Dog' AND Student.Sex = 'F';\n```", "match": {"match": false, "result": [[0]], "gt": [[2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*)\nFROM Has_Pet\nJOIN Student ON Has_Pet.StuID = Student.StuID\nJOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.PetType = 'Dog' AND Student.Sex = 'F';", "match": {"match": false, "result": [[0]], "gt": [[2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT PetType) FROM Pets;", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(DISTINCT PetType) FROM Pets; \n", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT s.Fname\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nJOIN Pets p ON hp.PetID = p.PetID\nWHERE p.PetType IN ('cat', 'dog');", "match": {"match": false, "result": [["Linda"], ["Tracy"], ["Tracy"]], "gt": [["Linda"], ["Tracy"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.Fname\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nJOIN Pets p ON hp.PetID = p.PetID\nWHERE p.PetType IN ('cat', 'dog');", "match": {"match": false, "result": [["Linda"], ["Tracy"], ["Tracy"]], "gt": [["Linda"], ["Tracy"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT s.Fname\nFROM Student s\nJOIN Has_Pet hp1 ON s.StuID = hp1.StuID\nJOIN Has_Pet hp2 ON s.StuID = hp2.StuID\nJOIN Pets p1 ON hp1.PetID = p1.PetID\nJOIN Pets p2 ON hp2.PetID = p2.PetID\nWHERE p1.PetType = 'cat' AND p2.PetType = 'dog'; \n```", "match": {"match": true, "result": []}}
{"result": "SELECT s.Fname\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nJOIN Pets p ON hp.PetID = p.PetID\nWHERE p.PetType = 'cat'\n  AND EXISTS (\n    SELECT 1\n    FROM Pets p2\n    WHERE p2.PetType = 'dog'\n    AND hp.StuID = p2.PetID\n  );\n\n\n", "match": {"match": true, "result": []}}
{"result": "SELECT s.Major, s.Age\nFROM Student s\nLEFT JOIN Has_Pet hp ON s.StuID = hp.StuID\nLEFT JOIN Pets p ON hp.PetID = p.PetID\nWHERE p.PetType != 'Cat';", "match": {"match": false, "result": [[600, 18], [600, 19], [600, 19]], "gt": [[600, 19], [600, 21], [600, 20], [600, 26], [600, 18], [600, 18], [600, 20], [600, 19], [600, 17], [600, 22], [600, 20], [600, 18], [600, 16], [600, 17], [600, 27], [600, 20], [600, 18], [520, 22], [520, 19], [540, 17], [520, 20], [540, 18], [520, 18], [520, 19], [520, 18], [550, 20], [100, 17], [550, 21], [550, 20], [550, 20], [550, 18], [50, 18], [50, 26]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.Major, s.Age\nFROM Student s\nLEFT JOIN Has_Pet hp ON s.StuID = hp.StuID\nLEFT JOIN Pets p ON hp.PetID = p.PetID\nWHERE p.PetType <> 'Cat';", "match": {"match": false, "result": [[600, 18], [600, 19], [600, 19]], "gt": [[600, 19], [600, 21], [600, 20], [600, 26], [600, 18], [600, 18], [600, 20], [600, 19], [600, 17], [600, 22], [600, 20], [600, 18], [600, 16], [600, 17], [600, 27], [600, 20], [600, 18], [520, 22], [520, 19], [540, 17], [520, 20], [540, 18], [520, 18], [520, 19], [520, 18], [550, 20], [100, 17], [550, 21], [550, 20], [550, 20], [550, 18], [50, 18], [50, 26]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.StuID \nFROM Student s\nLEFT JOIN Has_Pet hp ON s.StuID = hp.StuID\nLEFT JOIN Pets p ON hp.PetID = p.PetID\nWHERE p.PetType != 'Cat';\n", "match": {"match": false, "result": [[1001], [1002], [1002]], "gt": [[1002], [1003], [1004], [1005], [1006], [1007], [1008], [1009], [1010], [1011], [1012], [1014], [1015], [1016], [1017], [1018], [1019], [1020], [1021], [1022], [1023], [1024], [1025], [1026], [1027], [1028], [1029], [1030], [1031], [1032], [1033], [1034], [1035]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.StuID \nFROM Student s\nLEFT JOIN Has_Pet hp ON s.StuID = hp.StuID\nLEFT JOIN Pets p ON hp.PetID = p.PetID\nWHERE p.PetType != 'Cat'\nAND p.PetID IS NULL;\n", "match": {"match": false, "result": [], "gt": [[1002], [1003], [1004], [1005], [1006], [1007], [1008], [1009], [1010], [1011], [1012], [1014], [1015], [1016], [1017], [1018], [1019], [1020], [1021], [1022], [1023], [1024], [1025], [1026], [1027], [1028], [1029], [1030], [1031], [1032], [1033], [1034], [1035]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.Fname, s.Age\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nJOIN Pets p ON hp.PetID = p.PetID\nWHERE p.PetType = 'dog'\nAND NOT EXISTS (SELECT 1 FROM Pets c WHERE c.PetType = 'cat' AND hp.PetID = c.PetID);", "match": {"match": true, "result": [["Tracy", 19], ["Tracy", 19]]}}
{"result": "SELECT s.Fname\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nJOIN Pets p ON hp.PetID = p.PetID\nWHERE p.PetType = 'dog'\nAND NOT EXISTS (\n    SELECT 1\n    FROM Pets c\n    WHERE c.PetType = 'cat'\n    AND hp.StuID = c.StuID\n);", "match": {"match": false, "error": "Query execution failed with error: no such column: c.StuID"}}
{"result": "SELECT PetType, weight\nFROM Pets\nORDER BY pet_age\nLIMIT 1; \n", "match": {"match": true, "result": [["dog", 9.3]]}}
{"result": "SELECT PetType, weight\nFROM Pets\nWHERE PetID = (SELECT PetID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID ORDER BY Pets.pet_age ASC LIMIT 1);", "match": {"match": false, "error": "Query execution failed with error: ambiguous column name: PetID"}}
{"result": "SELECT \nPetID, weight\nFROM Pets\nWHERE pet_age > 1; \n\n", "match": {"match": true, "result": [[2001, 12.0], [2002, 13.4]]}}
{"result": "SELECT p.PetID, p.weight\nFROM Pets p\nWHERE p.pet_age > 1;", "match": {"match": true, "result": [[2001, 12.0], [2002, 13.4]]}}
{"result": "SELECT PetType, AVG(pet_age) as average_age, MAX(pet_age) as max_age\nFROM Pets\nGROUP BY PetType;\n\n", "match": {"match": false, "result": [["cat", 3.0, 3], ["dog", 1.5, 2]], "gt": [[3.0, 3, "cat"], [1.5, 2, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT PetType, AVG(pet_age) AS average_age, MAX(pet_age) AS max_age\nFROM Pets\nGROUP BY PetType;\n```", "match": {"match": false, "result": [["cat", 3.0, 3], ["dog", 1.5, 2]], "gt": [[3.0, 3, "cat"], [1.5, 2, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT PetType, AVG(weight) FROM Pets GROUP BY PetType;\n```", "match": {"match": false, "result": [["cat", 12.0], ["dog", 11.350000000000001]], "gt": [[12.0, "cat"], [11.350000000000001, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT PetType, AVG(weight)  FROM Pets GROUP BY PetType;", "match": {"match": false, "result": [["cat", 12.0], ["dog", 11.350000000000001]], "gt": [[12.0, "cat"], [11.350000000000001, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT S.Fname, S.Age\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID;", "match": {"match": false, "result": [["Linda", 18], ["Tracy", 19], ["Tracy", 19]], "gt": [["Linda", 18], ["Tracy", 19]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT s.Fname, s.Age\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID;", "match": {"match": true, "result": [["Linda", 18], ["Tracy", 19]]}}
{"result": "SELECT p.PetID \r\nFROM Student s\r\nJOIN Has_Pet hp ON s.StuID = hp.StuID\r\nJOIN Pets p ON hp.PetID = p.PetID\r\nWHERE s.LName = 'Smith';", "match": {"match": true, "result": [[2001]]}}
{"result": "SELECT DISTINCT\n  h.PetID\nFROM Student s\nJOIN Has_Pet h ON s.StuID = h.StuID\nWHERE s.LName = 'Smith';\n", "match": {"match": true, "result": [[2001]]}}
{"result": "SELECT\n    s.StuID,\n    COUNT(p.PetID) AS NumPets\nFROM\n    Student s\nJOIN\n    Has_Pet hp ON s.StuID = hp.StuID\nJOIN\n    Pets p ON hp.PetID = p.PetID\nGROUP BY\n    s.StuID;", "match": {"match": false, "result": [[1001, 1], [1002, 2]], "gt": [[1, 1001], [2, 1002]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.StuID, COUNT(p.PetID)\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nJOIN Pets p ON hp.PetID = p.PetID\nGROUP BY s.StuID; \n\n\n", "match": {"match": false, "result": [[1001, 1], [1002, 2]], "gt": [[1, 1001], [2, 1002]], "error": "Query result does not match ground truth."}}
{"result": "SELECT S.Fname, S.Sex\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nGROUP BY S.StuID, S.Fname, S.Sex\nHAVING COUNT(DISTINCT HP.PetID) > 1;  \n", "match": {"match": true, "result": [["Tracy", "F"]]}}
{"result": "SELECT S.Fname, S.Sex\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nGROUP BY S.StuID, S.Fname, S.Sex\nHAVING COUNT(HP.PetID) > 1; \n", "match": {"match": true, "result": [["Tracy", "F"]]}}
{"result": "SELECT s.LName\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nJOIN Pets p ON hp.PetID = p.PetID\nWHERE p.PetType = 'cat' AND p.pet_age = 3; \n", "match": {"match": true, "result": [["Smith"]]}}
{"result": "SELECT s.LName\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nJOIN Pets p ON hp.PetID = p.PetID\nWHERE p.PetType = 'cat' AND p.pet_age = 3; \n", "match": {"match": true, "result": [["Smith"]]}}
{"result": "```sql\nSELECT AVG(Age) \nFROM Student\nWHERE StuID NOT IN (SELECT StuID FROM Has_Pet);\n```", "match": {"match": true, "result": [[19.625]]}}
{"result": "SELECT AVG(Age)\nFROM Student\nWHERE StuID NOT IN (SELECT StuID FROM Has_Pet); \n", "match": {"match": true, "result": [[19.625]]}}
{"result": "SELECT COUNT(*) FROM employee;", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT COUNT(*) FROM employee;", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT Name\r\nFROM employee\r\nORDER BY Age ASC;", "match": {"match": true, "result": [["George Chuter"], ["Andrew Sheridan"], ["Lee Mears"], ["Tim Payne"], ["Matt Stevens"], ["Jason Hobson"], ["Steve Borthwick"], ["Louis Deacon"], ["Phil Vickery"], ["Mark Regan"]]}}
{"result": "SELECT Name FROM employee ORDER BY Age ASC;", "match": {"match": true, "result": [["George Chuter"], ["Andrew Sheridan"], ["Lee Mears"], ["Tim Payne"], ["Matt Stevens"], ["Jason Hobson"], ["Steve Borthwick"], ["Louis Deacon"], ["Phil Vickery"], ["Mark Regan"]]}}
{"result": "SELECT City, COUNT(*) AS NumberOfEmployees \nFROM employee \nGROUP BY City; \n", "match": {"match": false, "result": [["Bath", 3], ["Bristol", 3], ["Leicester", 1], ["Sale", 1], ["Wasps", 2]], "gt": [[3, "Bath"], [3, "Bristol"], [1, "Leicester"], [1, "Sale"], [2, "Wasps"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT City, COUNT(*) AS NumberOfEmployees\nFROM employee\nGROUP BY City;", "match": {"match": false, "result": [["Bath", 3], ["Bristol", 3], ["Leicester", 1], ["Sale", 1], ["Wasps", 2]], "gt": [[3, "Bath"], [3, "Bristol"], [1, "Leicester"], [1, "Sale"], [2, "Wasps"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT City \nFROM employee \nGROUP BY City \nHAVING COUNT(*) > 1\nAND Age < 30;\n", "match": {"match": false, "result": [["Bath"], ["Bristol"], ["Wasps"]], "gt": [["Bath"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT City \r\nFROM employee \r\nWHERE Age < 30\r\nGROUP BY City\r\nHAVING COUNT(*) > 1;", "match": {"match": true, "result": [["Bath"]]}}
{"result": "SELECT Location, COUNT(*) AS NumberOfShops\nFROM shop\nGROUP BY Location;", "match": {"match": false, "result": [["Espoo", 1], ["Helsinki", 1], ["Jakobstad", 1], ["Kotka", 1], ["Kuopio", 1], ["Lahti", 1], ["Mariehamn", 1], ["Turku", 1], ["Valkeakoski", 1]], "gt": [[1, "Espoo"], [1, "Helsinki"], [1, "Jakobstad"], [1, "Kotka"], [1, "Kuopio"], [1, "Lahti"], [1, "Mariehamn"], [1, "Turku"], [1, "Valkeakoski"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Location, COUNT(*) AS NumberOfShops\nFROM shop\nGROUP BY Location; \n", "match": {"match": false, "result": [["Espoo", 1], ["Helsinki", 1], ["Jakobstad", 1], ["Kotka", 1], ["Kuopio", 1], ["Lahti", 1], ["Mariehamn", 1], ["Turku", 1], ["Valkeakoski", 1]], "gt": [[1, "Espoo"], [1, "Helsinki"], [1, "Jakobstad"], [1, "Kotka"], [1, "Kuopio"], [1, "Lahti"], [1, "Mariehamn"], [1, "Turku"], [1, "Valkeakoski"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.Manager_name, s.District\nFROM shop s\nORDER BY s.Number_products DESC\nLIMIT 1;", "match": {"match": true, "result": [["Ilkka M\u00e4kel\u00e4", "Lahden Stadion"]]}}
{"result": "SELECT s.Manager_name, s.District\nFROM shop AS s\nORDER BY s.Number_products DESC\nLIMIT 1;", "match": {"match": true, "result": [["Ilkka M\u00e4kel\u00e4", "Lahden Stadion"]]}}
{"result": "SELECT MIN(Number_products), MAX(Number_products) FROM shop;\n", "match": {"match": true, "result": [[1600, 15000]]}}
{"result": "SELECT MIN(Number_products) AS Min_Products, MAX(Number_products) AS Max_Products FROM shop;\n\n\n", "match": {"match": true, "result": [[1600, 15000]]}}
{"result": "SELECT Name, Location, District\nFROM shop\nORDER BY Number_products DESC; \n", "match": {"match": true, "result": [["FC Lahti", "Lahti", "Lahden Stadion"], ["HJK", "Helsinki", "Finnair Stadium"], ["FC Inter", "Turku", "Veritas Stadion"], ["FC Honka", "Espoo", "Tapiolan Urheilupuisto"], ["FF Jaro", "Jakobstad", "Jakobstads Centralplan"], ["FC KooTeePee", "Kotka", "Arto Tolsa Areena"], ["FC Haka", "Valkeakoski", "Tehtaan kentt\u00e4"], ["KuPS", "Kuopio", "Magnum Areena"], ["IFK Mariehamn", "Mariehamn", "Wikl\u00f6f Holding Arena"]]}}
{"result": "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;", "match": {"match": true, "result": [["FC Lahti", "Lahti", "Lahden Stadion"], ["HJK", "Helsinki", "Finnair Stadium"], ["FC Inter", "Turku", "Veritas Stadion"], ["FC Honka", "Espoo", "Tapiolan Urheilupuisto"], ["FF Jaro", "Jakobstad", "Jakobstads Centralplan"], ["FC KooTeePee", "Kotka", "Arto Tolsa Areena"], ["FC Haka", "Valkeakoski", "Tehtaan kentt\u00e4"], ["KuPS", "Kuopio", "Magnum Areena"], ["IFK Mariehamn", "Mariehamn", "Wikl\u00f6f Holding Arena"]]}}
{"result": "```sql\nSELECT Name\nFROM shop\nWHERE Number_products > (SELECT AVG(Number_products) FROM shop);\n```", "match": {"match": true, "result": [["HJK"], ["FC Inter"], ["FC Lahti"]]}}
{"result": "SELECT Name \nFROM shop\nWHERE Number_products > (SELECT AVG(Number_products) FROM shop); \n", "match": {"match": true, "result": [["HJK"], ["FC Inter"], ["FC Lahti"]]}}
{"result": "SELECT Name\nFROM employee\nORDER BY (SELECT COUNT(*) FROM evaluation WHERE employee.Employee_ID = evaluation.Employee_ID) DESC\nLIMIT 1;", "match": {"match": true, "result": [["George Chuter"]]}}
{"result": "SELECT Name \nFROM employee \nWHERE Employee_ID IN (\n    SELECT Employee_ID \n    FROM evaluation \n    GROUP BY Employee_ID \n    ORDER BY COUNT(*) DESC \n    LIMIT 1\n);", "match": {"match": true, "result": [["George Chuter"]]}}
{"result": "```sql\nSELECT e.Name\nFROM employee e\nJOIN evaluation ev ON e.Employee_ID = ev.Employee_ID\nWHERE ev.Year_awarded = (SELECT MAX(Year_awarded) FROM evaluation)\nORDER BY ev.Bonus DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [["Matt Stevens"]], "gt": [["Louis Deacon"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name\nFROM employee\nJOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID\nORDER BY evaluation.Bonus DESC\nLIMIT 1; \n", "match": {"match": true, "result": [["Louis Deacon"]]}}
{"result": "SELECT e.Name\nFROM employee e\nLEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID\nWHERE ev.Employee_ID IS NULL;", "match": {"match": true, "result": [["Mark Regan"], ["Tim Payne"], ["Andrew Sheridan"], ["Phil Vickery"], ["Steve Borthwick"]]}}
{"result": "SELECT e.Name\nFROM employee e\nLEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID\nWHERE ev.Employee_ID IS NULL; \n\n\n", "match": {"match": true, "result": [["Mark Regan"], ["Tim Payne"], ["Andrew Sheridan"], ["Phil Vickery"], ["Steve Borthwick"]]}}
{"result": "SELECT s.Name\nFROM shop s\nJOIN hiring h ON s.Shop_ID = h.Shop_ID\nGROUP BY s.Name\nORDER BY COUNT(h.Employee_ID) DESC\nLIMIT 1; \n", "match": {"match": true, "result": [["FC Haka"]]}}
{"result": "SELECT Name FROM shop s\nJOIN hiring h ON s.Shop_ID = h.Shop_ID\nGROUP BY s.Name\nORDER BY COUNT(h.Shop_ID) DESC\nLIMIT 1; \n", "match": {"match": true, "result": [["FC Haka"]]}}
{"result": "SELECT s.Name \nFROM shop s\nLEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID\nWHERE h.Shop_ID IS NULL;", "match": {"match": true, "result": [["FC Honka"], ["KuPS"], ["IFK Mariehamn"]]}}
{"result": "SELECT Name\nFROM shop\nWHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring); \n", "match": {"match": true, "result": [["FC Honka"], ["KuPS"], ["IFK Mariehamn"]]}}
{"result": "SELECT \n  s.Name AS ShopName, \n  COUNT(h.Employee_ID) AS NumberOfEmployees\nFROM \n  shop s\nLEFT JOIN \n  hiring h ON s.Shop_ID = h.Shop_ID\nGROUP BY \n  s.Name;\n", "match": {"match": false, "result": [["FC Haka", 2], ["FC Honka", 0], ["FC Inter", 1], ["FC KooTeePee", 1], ["FC Lahti", 1], ["FF Jaro", 1], ["HJK", 1], ["IFK Mariehamn", 0], ["KuPS", 0]], "gt": [[2, "FC Haka"], [1, "FC Inter"], [1, "FC KooTeePee"], [1, "FC Lahti"], [1, "FF Jaro"], [1, "HJK"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.Name, COUNT(h.Employee_ID) AS Number_of_employees\nFROM shop s\nLEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID\nGROUP BY s.Name; \n", "match": {"match": false, "result": [["FC Haka", 2], ["FC Honka", 0], ["FC Inter", 1], ["FC KooTeePee", 1], ["FC Lahti", 1], ["FF Jaro", 1], ["HJK", 1], ["IFK Mariehamn", 0], ["KuPS", 0]], "gt": [[2, "FC Haka"], [1, "FC Inter"], [1, "FC KooTeePee"], [1, "FC Lahti"], [1, "FF Jaro"], [1, "HJK"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT SUM(Bonus) FROM evaluation;", "match": {"match": true, "result": [[19500.0]]}}
{"result": "SELECT SUM(Bonus) FROM evaluation;", "match": {"match": true, "result": [[19500.0]]}}
{"result": "SELECT * FROM hiring;", "match": {"match": true, "result": [[1, 1, "2009", "T"], [1, 2, "2003", "T"], [8, 3, "2011", "F"], [4, 4, "2012", "T"], [5, 5, "2013", "T"], [2, 6, "2010", "F"], [6, 7, "2008", "T"]]}}
{"result": "SELECT * FROM hiring;", "match": {"match": true, "result": [[1, 1, "2009", "T"], [1, 2, "2003", "T"], [8, 3, "2011", "F"], [4, 4, "2012", "T"], [5, 5, "2013", "T"], [2, 6, "2010", "F"], [6, 7, "2008", "T"]]}}
{"result": "```sql\nSELECT District\nFROM shop\nGROUP BY District\nHAVING COUNT(CASE WHEN Number_products < 3000 THEN 1 END) > 0\n  AND COUNT(CASE WHEN Number_products > 10000 THEN 1 END) > 0;\n```", "match": {"match": true, "result": []}}
{"result": "SELECT DISTINCT s.District\nFROM shop s\nWHERE s.Number_products < 3000\n  AND EXISTS (SELECT 1 FROM shop s2 WHERE s2.District = s.District AND s2.Number_products > 10000);\n", "match": {"match": true, "result": []}}
{"result": "SELECT DISTINCT Location FROM shop; \n", "match": {"match": false, "result": [["Valkeakoski"], ["Helsinki"], ["Espoo"], ["Turku"], ["Jakobstad"], ["Kotka"], ["Kuopio"], ["Lahti"], ["Mariehamn"]], "gt": [[9]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT Location FROM shop;", "match": {"match": false, "result": [["Valkeakoski"], ["Helsinki"], ["Espoo"], ["Turku"], ["Jakobstad"], ["Kotka"], ["Kuopio"], ["Lahti"], ["Mariehamn"]], "gt": [[9]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) FROM Documents;", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) FROM Documents;", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT d.Document_ID, d.Document_Name, d.Document_Description\nFROM Documents d;", "match": {"match": true, "result": [[0, "Introduction of OS", "n"], [1, "Understanding DB", "y"], [3, "Summer Show", "u"], [76, "Robbin CV", "y"], [80, "Welcome to NY", "h"], [82, "Data base", "w"], [2394, "Customer reviews", "y"], [3830, "Do not panic", "k"], [33930, "How Google people work", "z"], [50123, "Learning French", "r"], [651512, "How to write a CV", "f"], [801801, "How to read a book", "w"], [3540024, "Palm reading", "y"], [16514113, "A history of Arts", "h"], [385906526, "About Korea", "b"]]}}
{"result": "SELECT\n  Documents.Document_ID,\n  Documents.Document_Name,\n  Documents.Document_Description\nFROM Documents;", "match": {"match": true, "result": [[0, "Introduction of OS", "n"], [1, "Understanding DB", "y"], [3, "Summer Show", "u"], [76, "Robbin CV", "y"], [80, "Welcome to NY", "h"], [82, "Data base", "w"], [2394, "Customer reviews", "y"], [3830, "Do not panic", "k"], [33930, "How Google people work", "z"], [50123, "Learning French", "r"], [651512, "How to write a CV", "f"], [801801, "How to read a book", "w"], [3540024, "Palm reading", "y"], [16514113, "A history of Arts", "h"], [385906526, "About Korea", "b"]]}}
{"result": "SELECT \n    D.Document_Name,\n    D.Template_ID\nFROM \n    Documents D\nWHERE \n    D.Document_Description LIKE '%w%';  \n", "match": {"match": true, "result": [["Data base", 11], ["How to read a book", 4]]}}
{"result": "```sql\nSELECT d.Document_Name, t.Template_ID\nFROM Documents d\nJOIN Templates t ON d.Template_ID = t.Template_ID\nWHERE d.Document_Description LIKE '%w%';\n```\n", "match": {"match": true, "result": [["Data base", 11], ["How to read a book", 4]]}}
{"result": "SELECT d.Document_ID, t.Template_ID, d.Document_Description\nFROM Documents d\nJOIN Templates t ON d.Template_ID = t.Template_ID\nWHERE d.Document_Name = 'Robbin CV'; \n", "match": {"match": true, "result": [[76, 20, "y"]]}}
{"result": "```sql\nSELECT d.Document_ID, t.Template_ID, d.Document_Description\nFROM Documents d\nJOIN Templates t ON d.Template_ID = t.Template_ID\nWHERE d.Document_Name = 'Robbin CV';\n```", "match": {"match": true, "result": [[76, 20, "y"]]}}
{"result": "SELECT COUNT(DISTINCT Templates.Template_ID)\nFROM Documents\nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID; \n", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT COUNT(DISTINCT Templates.Template_ID) FROM Templates;", "match": {"match": false, "result": [[20]], "gt": [[12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*)\nFROM Documents\nWHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE TemplateType_Code = 'PPT'); \n", "match": {"match": false, "error": "Query execution failed with error: no such column: TemplateType_Code"}}
{"result": "SELECT COUNT(*) \nFROM Documents \nWHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE TemplateType = 'PPT'); \n", "match": {"match": false, "error": "Query execution failed with error: no such column: TemplateType"}}
{"result": "SELECT T.Template_ID, COUNT(D.Document_ID) AS NumberOfDocuments\nFROM Templates T\nLEFT JOIN Documents D ON T.Template_ID = D.Template_ID\nGROUP BY T.Template_ID;", "match": {"match": false, "result": [[0, 0], [1, 1], [4, 1], [6, 1], [7, 1], [8, 1], [9, 0], [10, 1], [11, 2], [14, 2], [15, 0], [16, 0], [18, 0], [19, 0], [20, 1], [21, 1], [22, 1], [23, 0], [24, 0], [25, 2]], "gt": [[1, 1], [4, 1], [6, 1], [7, 1], [8, 1], [10, 1], [11, 2], [14, 2], [20, 1], [21, 1], [22, 1], [25, 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT t.Template_ID, COUNT(d.Document_ID) AS DocumentCount\nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID\nGROUP BY t.Template_ID; \n\n\n", "match": {"match": true, "result": [[1, 1], [4, 1], [6, 1], [7, 1], [8, 1], [10, 1], [11, 2], [14, 2], [20, 1], [21, 1], [22, 1], [25, 2]]}}
{"result": "```sql\nSELECT T.Template_Code, COUNT(D.Document_ID) AS DocumentCount\nFROM Templates T\nJOIN Documents D ON T.Template_ID = D.Template_ID\nGROUP BY T.Template_Code\nORDER BY DocumentCount DESC\nLIMIT 1;\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: T.Template_Code"}}
{"result": "SELECT t.Template_ID, t.Template_Type_Code\nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID\nGROUP BY t.Template_ID, t.Template_Type_Code\nORDER BY COUNT(d.Document_ID) DESC\nLIMIT 1;  \n", "match": {"match": false, "result": [[11, "BK"]], "gt": [[25, "PP"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT t.Template_ID\nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID\nGROUP BY t.Template_ID\nHAVING COUNT(DISTINCT d.Document_ID) > 1;  \n", "match": {"match": true, "result": [[11], [14], [25]]}}
{"result": "SELECT t.Template_ID \nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID\nGROUP BY t.Template_ID\nHAVING COUNT(DISTINCT d.Document_ID) > 1;", "match": {"match": true, "result": [[11], [14], [25]]}}
{"result": "SELECT t.Template_ID\nFROM Templates t\nLEFT JOIN Documents d ON t.Template_ID = d.Template_ID\nWHERE d.Template_ID IS NULL;", "match": {"match": true, "result": [[0], [9], [15], [16], [18], [19], [23], [24]]}}
{"result": "SELECT t.Template_ID\nFROM Templates t\nLEFT JOIN Documents d ON t.Template_ID = d.Template_ID\nWHERE d.Template_ID IS NULL;\n", "match": {"match": true, "result": [[0], [9], [15], [16], [18], [19], [23], [24]]}}
{"result": "SELECT COUNT(*) FROM Templates;", "match": {"match": true, "result": [[20]]}}
{"result": "SELECT COUNT(*) FROM Templates;", "match": {"match": true, "result": [[20]]}}
{"result": "SELECT \n    T.Template_ID,\n    T.Version_Number,\n    T.Template_Type_Code\nFROM \n    Templates T;\n", "match": {"match": true, "result": [[0, 5, "PP"], [1, 9, "PP"], [4, 4, "BK"], [6, 2, "PPT"], [7, 8, "PPT"], [8, 3, "BK"], [9, 2, "BK"], [10, 1, "PPT"], [11, 6, "BK"], [14, 7, "AD"], [15, 9, "CV"], [16, 5, "CV"], [18, 5, "PP"], [19, 7, "AD"], [20, 6, "BK"], [21, 9, "AD"], [22, 0, "PP"], [23, 2, "BK"], [24, 8, "PP"], [25, 5, "PP"]]}}
{"result": "SELECT \n    T.Template_ID,\n    T.Version_Number,\n    T.Template_Code\nFROM Templates T; \n", "match": {"match": false, "error": "Query execution failed with error: no such column: T.Template_Code"}}
{"result": "SELECT DISTINCT Template_Code FROM Templates;", "match": {"match": false, "error": "Query execution failed with error: no such column: Template_Code"}}
{"result": "SELECT Template_Code FROM Ref_TemplateTypes;", "match": {"match": false, "error": "Query execution failed with error: no such table: Ref_TemplateTypes"}}
{"result": "SELECT T.Template_ID \nFROM Templates T\nWHERE T.Template_Type_Code IN ('PP', 'PPT');", "match": {"match": true, "result": [[0], [1], [6], [7], [10], [18], [22], [24], [25]]}}
{"result": "SELECT DISTINCT Template_ID\nFROM Templates\nWHERE Template_Code IN ('PP', 'PPT'); \n", "match": {"match": false, "error": "Query execution failed with error: no such column: Template_Code"}}
{"result": "SELECT COUNT(*)\nFROM Templates\nWHERE Template_Type_Code = 'CV';", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(*)\nFROM Templates\nWHERE Template_Type_Code = 'CV';", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT \n    t.Version_Number,\n    rt.Template_Code\nFROM Templates t\nJOIN Ref_Template_Types rt ON t.Template_Code = rt.Template_Code\nWHERE t.Version_Number > 5;  \n", "match": {"match": false, "error": "Query execution failed with error: no such column: rt.Template_Code"}}
{"result": "SELECT Version_Number, Template_Code\nFROM Templates\nWHERE Version_Number > 5; \n", "match": {"match": false, "error": "Query execution failed with error: no such column: Template_Code"}}
{"result": "SELECT Ref_TemplateTypes.Template_Code, COUNT(Templates.Template_Code) AS NumTemplates\nFROM RefTemplateTypes\nLEFT JOIN Templates ON RefTemplateTypes.Template_Code = Templates.Template_Code\nGROUP BY Ref_TemplateTypes.Template_Code;", "match": {"match": false, "error": "Query execution failed with error: no such table: RefTemplateTypes"}}
{"result": "SELECT Ref_Template.TemplateCode, COUNT(*) AS NumTemplates\nFROM Ref_Template\nINNER JOIN Templates ON Ref_Template.TemplateCode = Templates.TemplateCode\nGROUP BY Ref_Template.TemplateCode;", "match": {"match": false, "error": "Query execution failed with error: no such table: Ref_Template"}}
{"result": "SELECT rt.Template_Code, COUNT(t.Template_ID) AS TemplateCount\nFROM Ref_TemplateTypes rt\nJOIN Templates t ON rt.Template_Code = t.Template_Code\nGROUP BY rt.Template_Code\nORDER BY TemplateCount DESC\nLIMIT 1;", "match": {"match": false, "error": "Query execution failed with error: no such table: Ref_TemplateTypes"}}
{"result": "```sql\nSELECT Template_Type FROM (\n    SELECT Ref_Template.TemplateType AS Template_Type, COUNT(*) AS TemplateCount\n    FROM Ref_Template\n    GROUP BY Template_Type\n    ORDER BY TemplateCount DESC\n    LIMIT 1\n) AS MostCommonTemplateType;\n```\n", "match": {"match": false, "error": "Query execution failed with error: no such table: Ref_Template"}}
{"result": "SELECT RefTemplateTypes.Template_Code\nFROM RefTemplateTypes\nJOIN Templates ON RefTemplateTypes.Template_Code = Templates.Template_Code\nGROUP BY RefTemplateTypes.Template_Code\nHAVING COUNT(Templates.Template_Code) < 3;", "match": {"match": false, "error": "Query execution failed with error: no such table: RefTemplateTypes"}}
{"result": "SELECT Ref_TemplateTypes.Template_Code \nFROM Ref_TemplateTypes\nJOIN Templates ON Ref_TemplateTypes.Template_Code = Templates.Template_Code\nGROUP BY Ref_TemplateTypes.Template_Code\nHAVING COUNT(*) < 3; \n", "match": {"match": false, "error": "Query execution failed with error: no such table: Ref_TemplateTypes"}}
{"result": "SELECT MIN(Version_Number), rt.Template_Code\nFROM Templates t\nJOIN Ref_Template_Types rt ON t.Template_Code = rt.Template_Code;", "match": {"match": false, "error": "Query execution failed with error: no such column: rt.Template_Code"}}
{"result": "SELECT MIN(Version_Number), Template_Type_Code \nFROM Templates\nGROUP BY Template_Type_Code;", "match": {"match": false, "result": [[7, "AD"], [2, "BK"], [5, "CV"], [0, "PP"], [1, "PPT"]], "gt": [[0, "PP"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT t.Template_Code\nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID\nWHERE d.Document_Name = 'Data base';\n", "match": {"match": false, "error": "Query execution failed with error: no such column: t.Template_Code"}}
{"result": "```sql\nSELECT t.TemplateType\nFROM Documents d\nJOIN Templates t ON d.TemplateID = t.TemplateID\nWHERE d.DocumentName = 'Data base';\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: t.TemplateType"}}
{"result": "```sql\nSELECT d.Document_Name\nFROM Documents d\nJOIN Templates t ON d.Template_ID = t.Template_ID\nWHERE t.Template_Type_Code = 'BK';\n```", "match": {"match": true, "result": [["Robbin CV"], ["Data base"], ["How to read a book"], ["Palm reading"], ["About Korea"]]}}
{"result": "SELECT d.Document_Name\nFROM Documents d\nJOIN Templates t ON d.Template_ID = t.Template_ID\nWHERE t.Template_Code = 'BK';", "match": {"match": false, "error": "Query execution failed with error: no such column: t.Template_Code"}}
{"result": "SELECT rt.Template_Code, COUNT(t.Template_ID) AS NumberOfDocuments\nFROM Ref_Template_Types rt\nLEFT JOIN Templates t ON rt.Template_Code = t.Template_Code\nGROUP BY rt.Template_Code;", "match": {"match": false, "error": "Query execution failed with error: no such column: rt.Template_Code"}}
{"result": "```sql\nSELECT  rt.Template_Type_Code, COUNT(t.Template_ID) AS DocumentCount\nFROM Ref_Template_Types rt\nLEFT JOIN Templates t ON rt.Template_Type_Code = t.Template_Type_Code\nGROUP BY rt.Template_Type_Code;\n```", "match": {"match": false, "result": [["AD", 3], ["BK", 6], ["CV", 2], ["PP", 6], ["PPT", 3]], "gt": [["AD", 3], ["BK", 5], ["PP", 4], ["PPT", 3]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT  rt.Template_Code\nFROM Ref_TemplateTypes rt\nJOIN Templates t ON rt.Template_Code = t.Template_Code\nJOIN Documents d ON t.Template_ID = d.Template_ID\nGROUP BY rt.Template_Code\nORDER BY COUNT(d.Document_ID) DESC\nLIMIT 1; \n```", "match": {"match": false, "error": "Query execution failed with error: no such table: Ref_TemplateTypes"}}
{"result": "SELECT  `Ref_Template_Types`.`Template_Code`\nFROM `Ref_Template_Types`\nJOIN `Templates` ON `Ref_Template_Types`.`Template_Code` = `Templates`.`Template_Code`\nJOIN `Documents` ON `Templates`.`Template_ID` = `Documents`.`Template_ID`\nGROUP BY `Ref_Template_Types`.`Template_Code`\nORDER BY COUNT(*) DESC\nLIMIT 1;", "match": {"match": false, "error": "Query execution failed with error: no such column: Ref_Template_Types.Template_Code"}}
{"result": "SELECT rt.Template_Code\nFROM Ref_Template_Types rt\nLEFT JOIN Templates t ON rt.Template_Code = t.Template_Code\nWHERE t.Template_Code IS NULL;\n", "match": {"match": false, "error": "Query execution failed with error: no such column: rt.Template_Code"}}
{"result": "SELECT rt.Template_Code\nFROM Ref_Template_Types rt\nLEFT JOIN Templates t ON rt.Template_Code = t.Template_Code\nWHERE t.Template_Code IS NULL;", "match": {"match": false, "error": "Query execution failed with error: no such column: rt.Template_Code"}}
{"result": "SELECT Template_Code, TemplateDescription \nFROM Ref_TemplateTypes;", "match": {"match": false, "error": "Query execution failed with error: no such table: Ref_TemplateTypes"}}
{"result": "SELECT Template_Type, TemplateDescription FROM Ref_TemplateTypes;\n", "match": {"match": false, "error": "Query execution failed with error: no such table: Ref_TemplateTypes"}}
{"result": "SELECT Ref_TemplateTypes.Template_Description\nFROM Ref_TemplateTypes\nWHERE Ref_TemplateTypes.Template_Code = 'AD'; \n", "match": {"match": false, "error": "Query execution failed with error: no such table: Ref_TemplateTypes"}}
{"result": "SELECT TemplateDescription \nFROM Ref_TemplateTypes \nWHERE TemplateCode = 'AD';", "match": {"match": false, "error": "Query execution failed with error: no such table: Ref_TemplateTypes"}}
{"result": "SELECT Template_Code \nFROM Ref_Template_Types \nWHERE Template_Description = 'Book';", "match": {"match": false, "error": "Query execution failed with error: no such column: Template_Code"}}
{"result": "SELECT TemplateCode\nFROM Ref_TemplateTypes\nWHERE TemplateDescription = 'Book';\n", "match": {"match": false, "error": "Query execution failed with error: no such table: Ref_TemplateTypes"}}
{"result": "SELECT DISTINCT rt.TemplateDescription\nFROM Ref_TemplateTypes rt\nJOIN Templates t ON rt.TemplateCode = t.TemplateCode\nJOIN Documents d ON t.TemplateID = d.TemplateID; \n", "match": {"match": false, "error": "Query execution failed with error: no such table: Ref_TemplateTypes"}}
{"result": "SELECT DISTINCT rt.TemplateDescription\nFROM Ref_TemplateTypes rt\nJOIN Templates t ON rt.TemplateCode = t.TemplateCode\nJOIN Documents d ON t.TemplateID = d.TemplateID;  \n", "match": {"match": false, "error": "Query execution failed with error: no such table: Ref_TemplateTypes"}}
{"result": "SELECT T.Template_ID \nFROM Templates T\nJOIN Ref_Template_Types RT ON T.Template_Type_Code = RT.Template_Code\nWHERE RT.Template_Description = 'Presentation';\n", "match": {"match": false, "error": "Query execution failed with error: no such column: RT.Template_Description"}}
{"result": "SELECT t.Template_ID\nFROM Templates t\nJOIN RefTemplateTypes rt ON t.Template_Type_Code = rt.Template_Type_Code\nWHERE rt.Template_Description = 'Presentation';\n", "match": {"match": false, "error": "Query execution failed with error: no such table: RefTemplateTypes"}}
{"result": "SELECT COUNT(*) FROM Paragraphs;", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) FROM Paragraphs; \n", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) \nFROM Paragraphs\nWHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show'); \n", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(*) \r\nFROM Paragraphs \r\nWHERE DocumentName = 'Summer Show';", "match": {"match": false, "error": "Query execution failed with error: no such column: DocumentName"}}
{"result": "```sql\nSELECT \n    p.Paragraph_Text,\n    p.Other_Details\nFROM \n    Paragraphs p\nWHERE \n    p.Paragraph_Text = 'Korea ';\n```", "match": {"match": false, "result": [], "gt": [[null], [null]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    p.Paragraph_Text,\n    p.Other_Details\nFROM Paragraphs p\nWHERE p.Paragraph_Text LIKE '%Korea%';  \n", "match": {"match": false, "result": [["Korea", null], ["Korea", null]], "gt": [[null], [null]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Paragraph_ID, Paragraph_Text\nFROM Paragraphs\nWHERE Document_ID IN (\n  SELECT Document_ID\n  FROM Documents\n  WHERE Document_Name = 'Welcome to NY'\n);", "match": {"match": true, "result": [[16615, "Japan"], [608931827, "Micronesia"]]}}
{"result": "SELECT P.Paragraph_ID, P.Paragraph_Text\nFROM Paragraphs P\nJOIN Documents D ON P.Document_ID = D.Document_ID\nWHERE D.Document_Name = 'Welcome to NY';", "match": {"match": true, "result": [[16615, "Japan"], [608931827, "Micronesia"]]}}
{"result": "SELECT Paragraph_Text\nFROM Paragraphs\nWHERE Document_Name = 'Customer reviews';", "match": {"match": false, "error": "Query execution failed with error: no such column: Document_Name"}}
{"result": "SELECT P.ParagraphText\nFROM Paragraphs P\nJOIN Documents D ON P.DocumentID = D.DocumentID\nWHERE D.DocumentName = 'Customer reviews';", "match": {"match": false, "error": "Query execution failed with error: no such column: P.ParagraphText"}}
{"result": "SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS ParagraphCount\nFROM Documents\nLEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID\nORDER BY Documents.Document_ID;", "match": {"match": false, "result": [[0, 0], [1, 0], [3, 1], [76, 0], [80, 2], [82, 0], [2394, 3], [3830, 1], [33930, 1], [50123, 1], [651512, 2], [801801, 0], [3540024, 1], [16514113, 2], [385906526, 1]], "gt": [[3, 1], [80, 2], [2394, 3], [3830, 1], [33930, 1], [50123, 1], [651512, 2], [3540024, 1], [16514113, 2], [385906526, 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS ParagraphCount\r\nFROM Documents\r\nLEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\r\nGROUP BY Documents.Document_ID\r\nORDER BY Documents.Document_ID; \n", "match": {"match": false, "result": [[0, 0], [1, 0], [3, 1], [76, 0], [80, 2], [82, 0], [2394, 3], [3830, 1], [33930, 1], [50123, 1], [651512, 2], [801801, 0], [3540024, 1], [16514113, 2], [385906526, 1]], "gt": [[3, 1], [80, 2], [2394, 3], [3830, 1], [33930, 1], [50123, 1], [651512, 2], [3540024, 1], [16514113, 2], [385906526, 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS NumberOfParagraphs\nFROM Documents d\nLEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID, d.Document_Name; \n", "match": {"match": false, "result": [[0, "Introduction of OS", 0], [1, "Understanding DB", 0], [3, "Summer Show", 1], [76, "Robbin CV", 0], [80, "Welcome to NY", 2], [82, "Data base", 0], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [801801, "How to read a book", 0], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "gt": [[3, "Summer Show", 1], [80, "Welcome to NY", 2], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    d.Document_ID, \n    d.Document_Name, \n    COUNT(p.Paragraph_ID) AS ParagraphCount\nFROM \n    Documents d\nLEFT JOIN \n    Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY \n    d.Document_ID, d.Document_Name; \n", "match": {"match": false, "result": [[0, "Introduction of OS", 0], [1, "Understanding DB", 0], [3, "Summer Show", 1], [76, "Robbin CV", 0], [80, "Welcome to NY", 2], [82, "Data base", 0], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [801801, "How to read a book", 0], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "gt": [[3, "Summer Show", 1], [80, "Welcome to NY", 2], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT d.Document_ID\nFROM Documents d\nJOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID\nHAVING COUNT(p.Paragraph_ID) >= 2;", "match": {"match": true, "result": [[80], [2394], [651512], [16514113]]}}
{"result": "SELECT d.Document_ID\nFROM Documents d\nJOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID\nHAVING COUNT(p.Paragraph_ID) >= 2;", "match": {"match": true, "result": [[80], [2394], [651512], [16514113]]}}
{"result": "SELECT d.Document_ID, d.Document_Name\r\nFROM Documents d\r\nJOIN Paragraphs p ON d.Document_ID = p.Document_ID\r\nGROUP BY d.Document_ID, d.Document_Name\r\nORDER BY COUNT(p.Paragraph_ID) DESC\r\nLIMIT 1;", "match": {"match": true, "result": [[2394, "Customer reviews"]]}}
{"result": "SELECT d.Document_ID, d.Document_Name\nFROM Documents d\nJOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID, d.Document_Name\nORDER BY COUNT(p.Paragraph_ID) DESC\nLIMIT 1; \n", "match": {"match": true, "result": [[2394, "Customer reviews"]]}}
{"result": "SELECT Document_ID \nFROM Documents\nWHERE Document_ID IN (\n    SELECT Document_ID\n    FROM Paragraphs\n    GROUP BY Document_ID\n    HAVING COUNT(*) = (SELECT MIN(COUNT(*)) \n                       FROM Paragraphs \n                       GROUP BY Document_ID)\n)\nORDER BY Document_ID; \n\n\n", "match": {"match": false, "error": "Query execution failed with error: misuse of aggregate function COUNT()"}}
{"result": "SELECT Documents.Document_ID\nFROM Documents\nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID\nORDER BY COUNT(Paragraphs.Paragraph_ID) ASC\nLIMIT 1; \n", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Documents.Document_ID \nFROM Documents\nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID\nHAVING COUNT(Paragraphs.Paragraph_ID) BETWEEN 1 AND 2; \n", "match": {"match": true, "result": [[3], [80], [3830], [33930], [50123], [651512], [3540024], [16514113], [385906526]]}}
{"result": "SELECT d.Document_ID\nFROM Documents d\nJOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID\nHAVING COUNT(p.Paragraph_ID) BETWEEN 1 AND 2; \n", "match": {"match": true, "result": [[3], [80], [3830], [33930], [50123], [651512], [3540024], [16514113], [385906526]]}}
{"result": "```sql\nSELECT d.Document_ID\nFROM Documents d\nJOIN Paragraphs p ON d.Document_ID = p.Document_ID\nWHERE p.Paragraph_Text IN ('Brazil', 'Ireland');\n```", "match": {"match": false, "result": [[16514113], [16514113]], "gt": [[16514113]], "error": "Query result does not match ground truth."}}
{"result": "SELECT d.Document_ID\r\nFROM Documents d\r\nJOIN Paragraphs p ON d.Document_ID = p.Document_ID\r\nWHERE p.Paragraph_Text LIKE '%Brazil%' \r\n  AND p.Paragraph_Text LIKE '%Ireland%'; \n", "match": {"match": false, "result": [], "gt": [[16514113]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) FROM teacher;", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT COUNT(*) FROM teacher;", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT Name FROM teacher ORDER BY Age ASC;", "match": {"match": true, "result": [["Vicente Carretero"], ["Gustaaf Deloor"], ["Joseph Huts"], ["John Deloor"], ["Lucy Wong"], ["Anne Walker"], ["Kearsley Brown"]]}}
{"result": "SELECT Name\nFROM teacher\nORDER BY Age;", "match": {"match": true, "result": [["Vicente Carretero"], ["Gustaaf Deloor"], ["Joseph Huts"], ["John Deloor"], ["Lucy Wong"], ["Anne Walker"], ["Kearsley Brown"]]}}
{"result": "SELECT \n    t.Age,\n    t.Hometown\nFROM \n    teacher t;", "match": {"match": true, "result": [["32", "Blackrod Urban District"], ["29", "Bolton County Borough"], ["26", "Farnworth Municipal Borough"], ["33", "Horwich Urban District"], ["45", "Kearsley Urban District"], ["41", "Little Lever Urban District"], ["39", "Turton Urban District"]]}}
{"result": "SELECT \n    t.Age, \n    t.Hometown\nFROM \n    teacher t;", "match": {"match": true, "result": [["32", "Blackrod Urban District"], ["29", "Bolton County Borough"], ["26", "Farnworth Municipal Borough"], ["33", "Horwich Urban District"], ["45", "Kearsley Urban District"], ["41", "Little Lever Urban District"], ["39", "Turton Urban District"]]}}
{"result": "```sql\nSELECT Name\nFROM teacher\nWHERE Hometown != 'Little Lever Urban District';\n```", "match": {"match": false, "result": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Lucy Wong"]], "gt": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Anne Walker"], ["Lucy Wong"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT t.Name \nFROM teacher t\nWHERE t.Hometown != 'Little Lever Urban District'; \n", "match": {"match": false, "result": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Lucy Wong"]], "gt": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Anne Walker"], ["Lucy Wong"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name \nFROM teacher\nWHERE Age IN ('32','33');", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT Name\nFROM teacher\nWHERE Age IN ('32', '33'); \n", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT\n  t.Hometown\nFROM teacher t\nORDER BY t.Age ASC\nLIMIT 1;", "match": {"match": true, "result": [["Farnworth Municipal Borough"]]}}
{"result": "```sql\nSELECT Hometown\nFROM teacher\nORDER BY Age ASC\nLIMIT 1;\n```", "match": {"match": true, "result": [["Farnworth Municipal Borough"]]}}
{"result": "SELECT Hometown, COUNT(*) AS NumberOfTeachers\nFROM teacher\nGROUP BY Hometown;\n", "match": {"match": true, "result": [["Blackrod Urban District", 1], ["Bolton County Borough", 1], ["Farnworth Municipal Borough", 1], ["Horwich Urban District", 1], ["Kearsley Urban District", 1], ["Little Lever Urban District", 1], ["Turton Urban District", 1]]}}
{"result": "SELECT teacher.Hometown, COUNT(*) AS NumberOfTeachers\nFROM teacher\nGROUP BY teacher.Hometown;", "match": {"match": true, "result": [["Blackrod Urban District", 1], ["Bolton County Borough", 1], ["Farnworth Municipal Borough", 1], ["Horwich Urban District", 1], ["Kearsley Urban District", 1], ["Little Lever Urban District", 1], ["Turton Urban District", 1]]}}
{"result": "SELECT Hometown, COUNT(*) AS count\nFROM teacher\nGROUP BY Hometown\nORDER BY count DESC\nLIMIT 1;", "match": {"match": false, "result": [["Turton Urban District", 1]], "gt": [["Turton Urban District"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Hometown, COUNT(*) AS count\nFROM teacher\nGROUP BY Hometown\nORDER BY count DESC\nLIMIT 5; \n", "match": {"match": false, "result": [["Turton Urban District", 1], ["Little Lever Urban District", 1], ["Kearsley Urban District", 1], ["Horwich Urban District", 1], ["Farnworth Municipal Borough", 1]], "gt": [["Turton Urban District"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT Hometown \nFROM teacher\nGROUP BY Hometown\nHAVING COUNT(*) >= 2;\n```", "match": {"match": true, "result": []}}
{"result": "SELECT Hometown\nFROM teacher\nGROUP BY Hometown\nHAVING COUNT(*) >= 2; \n", "match": {"match": true, "result": []}}
{"result": "```sql\nSELECT t.Name, c.Course\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nJOIN course c ON ca.Course_ID = c.Course_ID;\n```", "match": {"match": true, "result": [["Kearsley Brown", "Math"], ["Vicente Carretero", "Math"], ["Gustaaf Deloor", "Science"], ["Anne Walker", "History"], ["Anne Walker", "Bible"], ["Lucy Wong", "Music"]]}}
{"result": "SELECT t.Name, c.Course \nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nJOIN course c ON ca.Course_ID = c.Course_ID; \n", "match": {"match": true, "result": [["Kearsley Brown", "Math"], ["Vicente Carretero", "Math"], ["Gustaaf Deloor", "Science"], ["Anne Walker", "History"], ["Anne Walker", "Bible"], ["Lucy Wong", "Music"]]}}
{"result": "SELECT t.Name, c.Course\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nJOIN course c ON ca.Course_ID = c.Course_ID\nORDER BY t.Name ASC;", "match": {"match": true, "result": [["Anne Walker", "History"], ["Anne Walker", "Bible"], ["Gustaaf Deloor", "Science"], ["Kearsley Brown", "Math"], ["Lucy Wong", "Music"], ["Vicente Carretero", "Math"]]}}
{"result": "SELECT \n    t.Name,\n    c.Course\nFROM \n    teacher t\nJOIN \n    course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nJOIN \n    course c ON ca.Course_ID = c.Course_ID\nORDER BY \n    t.Name ASC; \n", "match": {"match": true, "result": [["Anne Walker", "History"], ["Anne Walker", "Bible"], ["Gustaaf Deloor", "Science"], ["Kearsley Brown", "Math"], ["Lucy Wong", "Music"], ["Vicente Carretero", "Math"]]}}
{"result": "SELECT t.Name \r\nFROM teacher t\r\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\r\nJOIN course c ON ca.Course_ID = c.Course_ID\r\nWHERE c.Course = 'math'; \n", "match": {"match": false, "result": [], "gt": [["Kearsley Brown"], ["Vicente Carretero"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT t.Name\r\nFROM teacher t\r\nJOIN coursearrange ca ON t.Teacher_ID = ca.Teacher_ID\r\nJOIN course c ON ca.Course_ID = c.Course_ID\r\nWHERE c.Course = 'Math'; \n", "match": {"match": false, "error": "Query execution failed with error: no such table: coursearrange"}}
{"result": "```sql\nSELECT teacher.Name, COUNT(course_arrange.Course_ID) AS NumberOfCourses\nFROM teacher\nJOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID\nGROUP BY teacher.Name;\n```", "match": {"match": true, "result": [["Anne Walker", 2], ["Gustaaf Deloor", 1], ["Kearsley Brown", 1], ["Lucy Wong", 1], ["Vicente Carretero", 1]]}}
{"result": "SELECT  t.Name, COUNT(ca.Course_ID) AS NumberOfCourses\nFROM teacher t\nLEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nGROUP BY t.Name; \n", "match": {"match": false, "result": [["Anne Walker", 2], ["Gustaaf Deloor", 1], ["John Deloor", 0], ["Joseph Huts", 0], ["Kearsley Brown", 1], ["Lucy Wong", 1], ["Vicente Carretero", 1]], "gt": [["Anne Walker", 2], ["Gustaaf Deloor", 1], ["Kearsley Brown", 1], ["Lucy Wong", 1], ["Vicente Carretero", 1]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT Name \nFROM teacher\nWHERE Teacher_ID IN (SELECT Teacher_ID \n                     FROM course_arrange \n                     GROUP BY Teacher_ID \n                     HAVING COUNT(*) >= 2);\n```", "match": {"match": true, "result": [["Anne Walker"]]}}
{"result": "SELECT DISTINCT t.Name \nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nGROUP BY t.Name\nHAVING COUNT(DISTINCT ca.Course_ID) >= 2; \n", "match": {"match": true, "result": [["Anne Walker"]]}}
{"result": "SELECT Name\nFROM teacher\nWHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange);", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT t.Name\r\nFROM teacher t\r\nLEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\r\nWHERE ca.Teacher_ID IS NULL;", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT COUNT(*) FROM visitor WHERE Age < 30;\n", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Name\nFROM visitor\nWHERE Level_of_membership > 4\nORDER BY Level_of_membership DESC; \n", "match": {"match": true, "result": [["Gonzalo Higua\u00edn "], ["Fernando Gago"], ["Guti Midfielder"]]}}
{"result": "SELECT AVG(Age)\nFROM visitor\nWHERE Level_of_membership <= 4;  \n", "match": {"match": true, "result": [[36.0]]}}
{"result": "SELECT v.Name, v.Level_of_membership\nFROM visitor v\nWHERE v.Level_of_membership > 4\nORDER BY v.Age ASC; \n", "match": {"match": false, "result": [["Guti Midfielder", 5], ["Gonzalo Higua\u00edn ", 8], ["Fernando Gago", 6]], "gt": [["Fernando Gago", 6], ["Gonzalo Higua\u00edn ", 8], ["Guti Midfielder", 5]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \"Museum_ID\", \"Name\"\nFROM museum\nORDER BY \"Num_of_Staff\" DESC\nLIMIT 1; \n", "match": {"match": true, "result": [[1, "Plaza Museum"]]}}
{"result": "```sql\nSELECT AVG(Num_of_Staff)\nFROM museum\nWHERE Open_Year < '2009';\n```", "match": {"match": true, "result": [[31.333333333333332]]}}
{"result": "SELECT \"Open_Year\", \"Num_of_Staff\"\nFROM museum\nWHERE \"Name\" = 'Plaza Museum'; \n\n\n", "match": {"match": false, "result": [["2000", 62]], "gt": [[62, "2000"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name\r\nFROM museum\r\nWHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > '2010');", "match": {"match": true, "result": [["Plaza Museum"], ["Capital Plaza Museum"], ["Jefferson Development Museum"]]}}
{"result": "SELECT v.ID, v.Name, v.Age\nFROM visitor v\nJOIN visit on v.ID = visit.visitor_ID\nGROUP BY v.ID, v.Name, v.Age\nHAVING COUNT(DISTINCT visit.Museum_ID) > 1; \n", "match": {"match": true, "result": [[3, "Arjen Robben", 27], [5, "Fernando Gago", 36], [6, "Rafael van der Vaart", 25]]}}
{"result": "SELECT v.ID, v.Name, v.Level_of_membership\nFROM visitor v\nJOIN visit vi ON v.ID = vi.visitor_ID\nGROUP BY v.ID, v.Name, v.Level_of_membership\nORDER BY SUM(vi.Total_spent) DESC\nLIMIT 1; \n", "match": {"match": false, "result": [[3, "Arjen Robben", 1]], "gt": [["3", "Arjen Robben", 1]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT m.Museum_ID, m.Name\nFROM museum m\nJOIN visit v ON m.Museum_ID = v.Museum_ID\nGROUP BY m.Museum_ID, m.Name\nORDER BY COUNT(v.Museum_ID) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [[2, "Capital Plaza Museum"]]}}
{"result": "SELECT m.Name\nFROM museum m\nLEFT JOIN visit v ON m.Museum_ID = v.Museum_ID\nWHERE v.Museum_ID IS NULL;\n", "match": {"match": true, "result": [["Jefferson Development Museum"], ["RiverPark Museum"], ["Place Tower Museum"], ["Central City District Residential Museum"]]}}
{"result": "SELECT v.Name, v.Age\nFROM visitor v\nJOIN visit vis ON v.ID = vis.visitor_ID\nGROUP BY v.Name, v.Age\nORDER BY vis.Num_of_Ticket DESC\nLIMIT 1; \n", "match": {"match": false, "result": [["Fernando Gago", 36]], "gt": [["Arjen Robben", 27]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(Num_of_Ticket) AS AvgTickets, MAX(Num_of_Ticket) AS MaxTickets FROM visit; \n", "match": {"match": true, "result": [[10.5, 24]]}}
{"result": "```sql\nSELECT SUM(Total_spent) \nFROM visit\nJOIN visitor ON visit.visitor_ID = visitor.ID\nWHERE visitor.Level_of_membership = 1;\n```", "match": {"match": true, "result": [[570.84]]}}
{"result": "SELECT v.Name\r\nFROM visitor v\r\nJOIN visit v1 ON v.ID = v1.visitor_ID\r\nJOIN visit v2 ON v.ID = v2.visitor_ID\r\nJOIN museum m1 ON v1.Museum_ID = m1.Museum_ID\r\nJOIN museum m2 ON v2.Museum_ID = m2.Museum_ID\r\nWHERE m1.Open_Year < '2009' AND m2.Open_Year > '2011' \r\nGROUP BY v.Name\r\nHAVING COUNT(DISTINCT v1.Museum_ID) > 1 AND COUNT(DISTINCT v2.Museum_ID) > 1;\n", "match": {"match": false, "result": [], "gt": [["Fernando Gago"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT COUNT(DISTINCT v.ID)\nFROM visitor v\nLEFT JOIN visit ON v.ID = visit.visitor_ID\nWHERE visit.Museum_ID IS NULL OR museum.Open_Year <= '2010';\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: museum.Open_Year"}}
{"result": "SELECT COUNT(*)\nFROM museum\nWHERE Open_Year > '2013' OR Open_Year < '2008';  \n", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(*) \nFROM ship \nWHERE disposition_of_ship = 'Captured'; \n", "match": {"match": true, "result": [[4]]}}
{"result": "SELECT name, tonnage\nFROM ship\nORDER BY name DESC;", "match": {"match": true, "result": [["Three Brothers", "t"], ["Mary", "t"], ["Lettice", "t"], ["HMS Avon", "391"], ["HMS Atalanta", "225"], ["Bon Accord", "t"], ["Bacchus", "t"]]}}
{"result": "SELECT name, date, result FROM battle;", "match": {"match": false, "result": [["Battle of Adrianople", "14 April 1205", "Bulgarian victory"], ["Battle of Serres", "June 1205", "Bulgarian victory"], ["Battle of Rusion", "31 January 1206", "Bulgarian victory"], ["Battle of Rodosto", "February 1206", "Bulgarian victory"], ["Battle of Messinopolis", "4 September 1207", "Bulgarian victory"], ["Battle of Boruy", "June 1205", "Bulgarian victory"], ["Battle of Philippopolis", "31 June 1208", "Latin victory"], ["Siege of Constantinople", "1235", "Two Year Truce"]], "gt": [["Battle of Adrianople", "14 April 1205"], ["Battle of Serres", "June 1205"], ["Battle of Rusion", "31 January 1206"], ["Battle of Rodosto", "February 1206"], ["Battle of Messinopolis", "4 September 1207"], ["Battle of Boruy", "June 1205"], ["Battle of Philippopolis", "31 June 1208"], ["Siege of Constantinople", "1235"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MIN(killed) as min_death_toll, MAX(killed) as max_death_toll FROM death; \n", "match": {"match": false, "result": [[0, 29]], "gt": [[29, 0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(injured) FROM death;", "match": {"match": true, "result": [[1.0769230769230769]]}}
{"result": "SELECT \n  d.id,\n  d.note,\n  d.killed,\n  d.injured\nFROM death d\nJOIN ship s ON d.caused_by_ship_id = s.id\nWHERE s.tonnage = 't'; \n", "match": {"match": false, "result": [[1, "Dantewada, Chhattisgarh", 8, 0], [2, "Dantewada, Chhattisgarh", 3, 0], [13, "Erraboru, Chhattisgarh", 25, 0], [3, "East Champaran, Bihar", 2, 0], [6, "Dantewada, Chhattisgarh", 0, 0], [7, "Dantewada, Chhattisgarh", 4, 5], [8, "Kanker, Chhattisgarh", 0, 0], [9, "Dantewada, Chhattisgarh", 29, 0], [10, "WestMidnapore, West Bengal", 0, 0], [11, "Bastar, Chattisgarh", 0, 0], [12, "Bokaro, Jharkhand", 14, 0]], "gt": [[8, 0], [3, 0], [25, 0], [2, 0], [0, 0], [4, 5], [0, 0], [29, 0], [0, 0], [0, 0], [14, 0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name, result\nFROM battle\nWHERE bulgarian_commander != 'Boril'; \n", "match": {"match": true, "result": [["Battle of Adrianople", "Bulgarian victory"], ["Battle of Serres", "Bulgarian victory"], ["Battle of Rusion", "Bulgarian victory"], ["Battle of Rodosto", "Bulgarian victory"], ["Battle of Messinopolis", "Bulgarian victory"], ["Siege of Constantinople", "Two Year Truce"]]}}
{"result": "SELECT DISTINCT b.id, b.name\r\nFROM battle b\r\nJOIN ship s ON b.id = s.lost_in_battle\r\nWHERE s.ship_type = 'Brig'; \n", "match": {"match": true, "result": [[8, "Siege of Constantinople"], [7, "Battle of Philippopolis"], [6, "Battle of Boruy"], [5, "Battle of Messinopolis"], [4, "Battle of Rodosto"]]}}
{"result": "SELECT b.id, b.name\nFROM battle b\nJOIN death d ON b.id = d.lost_in_battle\nGROUP BY b.id, b.name\nHAVING SUM(d.killed) > 10; \n", "match": {"match": false, "error": "Query execution failed with error: no such column: d.lost_in_battle"}}
{"result": "SELECT  s.id, s.name \nFROM ship s\nJOIN death d ON s.id = d.caused_by_ship_id\nGROUP BY s.id, s.name\nORDER BY SUM(d.injured) DESC\nLIMIT 1; \n\n\n", "match": {"match": false, "result": [[4, "HMS Avon"]], "gt": [[5, "Three Brothers"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT b.name \nFROM battle AS b\nJOIN ship AS s1 ON b.id = s1.lost_in_battle\nJOIN ship AS s2 ON b.id = s2.lost_in_battle\nJOIN death AS d1 ON s1.id = d1.caused_by_ship_id\nJOIN death AS d2 ON s2.id = d2.caused_by_ship_id\nWHERE b.bulgarian_commander = 'Kaloyan' AND b.latin_commander = 'Baldwin I';  \n", "match": {"match": false, "result": [], "gt": [["Battle of Adrianople"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT result FROM battle; \n", "match": {"match": false, "result": [["Bulgarian victory"], ["Latin victory"], ["Two Year Truce"]], "gt": [[3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*)\nFROM battle\nWHERE id NOT IN (\n    SELECT lost_in_battle\n    FROM ship\n    WHERE tonnage = '225'\n);", "match": {"match": true, "result": [[7]]}}
{"result": "```sql\nSELECT b.name, b.date\nFROM battle b\nJOIN ship s1 ON b.id = s1.lost_in_battle\nJOIN ship s2 ON b.id = s2.lost_in_battle\nWHERE s1.name = 'Lettice' AND s2.name = 'HMS Atalanta';\n```", "match": {"match": true, "result": [["Siege of Constantinople", "1235"]]}}
{"result": "SELECT b.name, b.result, b.bulgarian_commander\nFROM battle b\nLEFT JOIN ship s ON b.id = s.lost_in_battle\nWHERE s.location != 'English Channel'\nGROUP BY b.name, b.result, b.bulgarian_commander\nHAVING COUNT(s.id) = 0; \n", "match": {"match": false, "result": [], "gt": [["Battle of Adrianople", "Bulgarian victory", "Kaloyan"], ["Battle of Rusion", "Bulgarian victory", "Kaloyan"], ["Battle of Serres", "Bulgarian victory", "Kaloyan"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT note FROM death WHERE note LIKE '%East%'; \n", "match": {"match": true, "result": [["East Champaran, Bihar"]]}}
{"result": "SELECT \nAddresses.line1,\nAddresses.line2\nFROM Addresses;", "match": {"match": false, "error": "Query execution failed with error: no such column: Addresses.line1"}}
{"result": "SELECT line1, line2 FROM Addresses;", "match": {"match": false, "error": "Query execution failed with error: no such column: line1"}}
{"result": "SELECT COUNT(*) \nFROM Courses;", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) FROM Courses;", "match": {"match": true, "result": [[15]]}}
{"result": "```sql\nSELECT course_description\nFROM Courses\nWHERE course_name = 'Math';\n```", "match": {"match": false, "result": [], "gt": [["q"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT course_description\nFROM Courses\nWHERE course_name LIKE '%Math%'; \n", "match": {"match": true, "result": [["q"]]}}
{"result": "SELECT `zip`\nFROM `Addresses`\nWHERE `city` = 'Port Chelsea';", "match": {"match": false, "error": "Query execution failed with error: no such column: zip"}}
{"result": "SELECT \n  zip_code\nFROM \n  Addresses\nWHERE \n  city = 'Port Chelsea';", "match": {"match": false, "error": "Query execution failed with error: no such column: zip_code"}}
{"result": "SELECT d.department_name, d.department_id \r\nFROM Departments d\r\nJOIN Degree_Programs dp ON d.department_id = dp.department_id\r\nGROUP BY d.department_name, d.department_id\r\nORDER BY COUNT(dp.department_id) DESC\r\nLIMIT 1;", "match": {"match": true, "result": [["statistics", 8]]}}
{"result": "SELECT d.department_name, d.department_id\nFROM Departments d\nJOIN DegreePrograms dp ON d.department_id = dp.department_id\nGROUP BY d.department_name, d.department_id\nORDER BY COUNT(dp.degree_id) DESC\nLIMIT 1;", "match": {"match": false, "error": "Query execution failed with error: no such table: DegreePrograms"}}
{"result": "SELECT COUNT(DISTINCT d.department_id) \nFROM Departments d\nJOIN Degree_Programs dp ON d.department_id = dp.department_id; \n", "match": {"match": true, "result": [[10]]}}
{"result": "```sql\nSELECT COUNT(DISTINCT Departments.department_name)\nFROM Departments\nJOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id;\n```", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT COUNT(DISTINCT degree_summary_name)\nFROM Degree_Programs;", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(DISTINCT degree_summary) FROM DegreePrograms;", "match": {"match": false, "error": "Query execution failed with error: no such table: DegreePrograms"}}
{"result": "SELECT COUNT(*) \nFROM DegreePrograms \nWHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering'); \n", "match": {"match": false, "error": "Query execution failed with error: no such table: DegreePrograms"}}
{"result": "SELECT COUNT(*)\nFROM DegreePrograms\nWHERE department_id = (SELECT department_id \n                          FROM Departments\n                          WHERE department_name = 'Engineering');", "match": {"match": false, "error": "Query execution failed with error: no such table: DegreePrograms"}}
{"result": "SELECT section_name, section_description\nFROM Sections;", "match": {"match": true, "result": [["a", "non"], ["b", "voluptatem"], ["c", "qui"], ["d", "voluptas"], ["e", "ex"], ["f", "doloremque"], ["g", "provident"], ["h", "et"], ["j", "quis"], ["k", "nesciunt"], ["l", "ad"], ["o", "et"], ["p", "facilis"], ["u", "reprehenderit"], ["y", "qui"]]}}
{"result": "```sql\nSELECT section_name, section_description\nFROM Sections;\n```", "match": {"match": true, "result": [["a", "non"], ["b", "voluptatem"], ["c", "qui"], ["d", "voluptas"], ["e", "ex"], ["f", "doloremque"], ["g", "provident"], ["h", "et"], ["j", "quis"], ["k", "nesciunt"], ["l", "ad"], ["o", "et"], ["p", "facilis"], ["u", "reprehenderit"], ["y", "qui"]]}}
{"result": "SELECT c.course_name, c.course_id\nFROM Courses c\nWHERE c.course_id NOT IN (\n    SELECT DISTINCT course_id\n    FROM Sections\n    GROUP BY course_id\n    HAVING COUNT(*) > 2\n);", "match": {"match": false, "result": [["ds", 1], ["math", 2], ["os", 3], ["en", 4], ["fr", 5], ["la", 6], ["cal", 7], ["nlp", 8], ["dl", 9], ["ml", 10], ["ai", 11], ["db", 12], ["rs", 13], ["pl", 14], ["oop", 15]], "gt": [["ds", 1], ["math", 2], ["en", 4], ["fr", 5], ["la", 6], ["cal", 7], ["nlp", 8], ["dl", 9], ["ml", 10], ["db", 12], ["pl", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT c.course_name, c.course_id\nFROM Courses c\nLEFT JOIN Sections s ON c.course_id = s.course_id\nGROUP BY c.course_name, c.course_id\nHAVING COUNT(s.section_id) < 2; \n", "match": {"match": false, "result": [["math", 2], ["os", 3], ["en", 4], ["la", 6], ["cal", 7], ["dl", 9], ["ml", 10], ["ai", 11], ["db", 12], ["rs", 13], ["oop", 15]], "gt": [["ds", 1], ["math", 2], ["en", 4], ["fr", 5], ["la", 6], ["cal", 7], ["nlp", 8], ["dl", 9], ["ml", 10], ["db", 12], ["pl", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT section_name\nFROM Sections\nORDER BY section_name DESC;", "match": {"match": true, "result": [["y"], ["u"], ["p"], ["o"], ["l"], ["k"], ["j"], ["h"], ["g"], ["f"], ["e"], ["d"], ["c"], ["b"], ["a"]]}}
{"result": "SELECT section_name \nFROM Sections \r\nORDER BY section_name DESC;  \n", "match": {"match": true, "result": [["y"], ["u"], ["p"], ["o"], ["l"], ["k"], ["j"], ["h"], ["g"], ["f"], ["e"], ["d"], ["c"], ["b"], ["a"]]}}
{"result": "```sql\nSELECT semester_name, semester_id \nFROM Semesters \nWHERE semester_id IN (\n    SELECT semester_id \n    FROM Students\n    GROUP BY semester_id\n    ORDER BY COUNT(student_id) DESC\n    LIMIT 1\n);\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: semester_id"}}
{"result": "SELECT s.semester_name, s.semester_id \nFROM Semesters s\nJOIN Students st ON s.semester_id = st.semester_id \nGROUP BY s.semester_name, s.semester_id\nORDER BY COUNT(st.student_id) DESC\nLIMIT 1;", "match": {"match": false, "error": "Query execution failed with error: no such column: st.semester_id"}}
{"result": "SELECT department_description \nFROM Departments \nWHERE department_name LIKE '%computer%';", "match": {"match": true, "result": [["error"]]}}
{"result": "SELECT department_description \nFROM Departments \nWHERE department_name LIKE '%computer%';", "match": {"match": true, "result": [["error"]]}}
{"result": "SELECT s.first_name, s.middle_name, s.last_name, s.student_id\nFROM Students s\nJOIN Student_Enrollment se ON s.student_id = se.student_id\nJOIN DegreeProgram dp ON se.program_id = dp.program_id\nJOIN Semesters sem ON se.semester_id = sem.semester_id\nGROUP BY s.student_id, s.first_name, s.middle_name, s.last_name\nHAVING COUNT(DISTINCT dp.program_id) = 2\n;", "match": {"match": false, "error": "Query execution failed with error: no such table: Student_Enrollment"}}
{"result": "```sql\nSELECT \n    s.student_id, \n    s.first_name, \n    s.middle_name, \n    s.last_name\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nJOIN Semesters sem ON se.semester_id = sem.semester_id\nGROUP BY s.student_id, s.first_name, s.middle_name, s.last_name\nHAVING COUNT(DISTINCT dp.degree_program_id) = 2;\n```", "match": {"match": false, "result": [[4, "Jarvis", "Aaliyah", "Carroll"], [6, "Stanford", "Mona", "Rogahn"], [14, "Jordy", "Osborne", "Rempel"]], "gt": [["Jarvis", "Aaliyah", "Carroll", 4], ["Reva", "Golda", "Osinski", 9], ["Jordy", "Osborne", "Rempel", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT first_name, middle_name, last_name\nFROM Students\nJOIN StudentEnrolment ON Students.student_id = StudentEnrolment.student_id\nJOIN DegreePrograms ON StudentEnrolment.degree_program_id = DegreePrograms.degree_program_id\nWHERE DegreePrograms.degree_summary = 'Bachelor';", "match": {"match": false, "error": "Query execution failed with error: no such table: StudentEnrolment"}}
{"result": "SELECT \n    s.first_name, \n    s.middle_name, \n    s.last_name\nFROM \n    Students s\nJOIN \n    Student_Enrollment se ON s.student_id = se.student_id\nJOIN \n    Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nWHERE \n    dp.degree_summary = 'Bachelor';\n", "match": {"match": false, "error": "Query execution failed with error: no such table: Student_Enrollment"}}
{"result": "```sql\nSELECT d.degree_summary, COUNT(s.student_id) AS num_students\nFROM DegreePrograms d\nJOIN DegreePrograms p ON d.degree_program_id = p.degree_program_id\nJOIN Students s ON p.degree_program_id = s.degree_program_id\nGROUP BY d.degree_summary\nORDER BY num_students DESC\nLIMIT 1;\n```", "match": {"match": false, "error": "Query execution failed with error: no such table: DegreePrograms"}}
{"result": "SELECT d.degree_summary_name\nFROM DegreePrograms d\nJOIN StudentPrograms s ON d.degree_program_id = s.degree_program_id\nGROUP BY d.degree_summary_name\nORDER BY COUNT(s.degree_program_id) DESC\nLIMIT 1;  \n", "match": {"match": false, "error": "Query execution failed with error: no such table: DegreePrograms"}}
{"result": "SELECT  \ndegreePrograms.degree_id, \ndegreePrograms.degree_summary \nFROM DegreePrograms \nJOIN DegreePrograms ON DegreePrograms.degree_id = DegreePrograms.degree_id\nGROUP BY degreePrograms.degree_id, degreePrograms.degree_summary\nORDER BY COUNT(DegreePrograms.degree_id) DESC \nLIMIT 1;", "match": {"match": false, "error": "Query execution failed with error: no such table: DegreePrograms"}}
{"result": "SELECT  p.degree_program_id,  d.degree_summary\nFROM Degree_Programs p\nJOIN Degree d ON p.degree_program_id = d.degree_id\nJOIN Student_Programs sp ON p.degree_program_id = sp.degree_program_id\nGROUP BY p.degree_program_id, d.degree_summary\nORDER BY COUNT(DISTINCT sp.student_id) DESC\nLIMIT 1; \n", "match": {"match": false, "error": "Query execution failed with error: no such table: Degree"}}
{"result": "SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(e.enrolment_id) AS num_enrollments\nFROM Students s\nJOIN Enrolment e ON s.student_id = e.student_id\nGROUP BY s.student_id\nORDER BY num_enrollments DESC\nLIMIT 1; \n", "match": {"match": false, "error": "Query execution failed with error: no such table: Enrolment"}}
{"result": "```sql\nSELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(se.enrolment_id) AS enrollment_count\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nGROUP BY s.student_id\nORDER BY enrollment_count DESC\nLIMIT 1;\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: se.enrolment_id"}}
{"result": "SELECT semester_name\nFROM Semesters\nWHERE semester_id NOT IN (SELECT semester_id FROM StudentEnrolment WHERE student_id IN (SELECT student_id FROM Students));", "match": {"match": false, "error": "Query execution failed with error: no such table: StudentEnrolment"}}
{"result": "SELECT semester_name\nFROM Semesters\nWHERE semester_id NOT IN (SELECT DISTINCT semester_id FROM Enrolment);", "match": {"match": false, "error": "Query execution failed with error: no such table: Enrolment"}}
{"result": "SELECT DISTINCT c.course_name\nFROM Courses c\nJOIN Student_Enrolment se ON c.course_id = se.course_id;", "match": {"match": false, "error": "Query execution failed with error: no such column: se.course_id"}}
{"result": "SELECT DISTINCT `c`.`course_name` \nFROM `Courses` AS `c`\nJOIN `Student_Enrolment` AS `se` ON `c`.`course_id` = `se`.`course_id`;", "match": {"match": false, "error": "Query execution failed with error: no such column: se.course_id"}}
{"result": "```sql\nSELECT c.course_name\nFROM Courses c\nJOIN Student_Enrolment se ON c.course_id = se.course_id\nGROUP BY c.course_name\nORDER BY COUNT(se.student_id) DESC\nLIMIT 1;\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: se.course_id"}}
{"result": "```sql\nSELECT c.course_name\nFROM Courses c\nJOIN Student_Enrolment se ON c.course_id = se.course_id\nGROUP BY c.course_name\nORDER BY COUNT(se.student_id) DESC\nLIMIT 1;\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: se.course_id"}}
{"result": "SELECT s.last_name\nFROM Students s\nJOIN Addresses a ON s.current_address_id = a.address_id\nWHERE a.state = 'North Carolina'\nAND s.student_id NOT IN (SELECT DISTINCT s.student_id\n                         FROM Students s\n                         JOIN DegreePrograms dp ON s.student_id = dp.student_id);", "match": {"match": false, "error": "Query execution failed with error: no such table: DegreePrograms"}}
{"result": "SELECT DISTINCT s.last_name\nFROM Students s\nJOIN Addresses a ON s.current_address_id = a.address_id\nWHERE a.state = 'North Carolina'\nAND s.student_id NOT IN (\n    SELECT DISTINCT s.student_id\n    FROM Students s\n    JOIN DegreePrograms dp ON s.student_id = dp.student_id\n);", "match": {"match": false, "error": "Query execution failed with error: no such table: DegreePrograms"}}
{"result": "```sql\nSELECT t.transcript_id, t.transcript_date\nFROM Transcripts t\nJOIN TranscriptContents tc ON t.transcript_id = tc.transcript_id\nGROUP BY t.transcript_id, t.transcript_date\nHAVING COUNT(DISTINCT tc.course_id) >= 2; \n```", "match": {"match": false, "error": "Query execution failed with error: no such table: TranscriptContents"}}
{"result": "SELECT  t.transcript_id, t.transcript_date\nFROM Transcripts t\nJOIN TranscriptContents tc ON t.transcript_id = tc.transcript_id\nGROUP BY t.transcript_id, t.transcript_date\nHAVING COUNT(DISTINCT tc.course_id) >= 2;  \n", "match": {"match": false, "error": "Query execution failed with error: no such table: TranscriptContents"}}
{"result": "```sql\nSELECT mobile_number \nFROM Students \nWHERE first_name = 'Timmothy' AND last_name = 'Ward';\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: mobile_number"}}
{"result": "SELECT \nmobile_number\nFROM Students\nWHERE first_name = 'Timmothy' AND last_name = 'Ward'; \n", "match": {"match": false, "error": "Query execution failed with error: no such column: mobile_number"}}
{"result": "SELECT first_name, middle_name, last_name\nFROM Students\nORDER BY date_registered\nLIMIT 1; \n", "match": {"match": false, "error": "Query execution failed with error: no such column: date_registered"}}
{"result": "SELECT first_name, middle_name, last_name\nFROM Students\nORDER BY date_registered\nLIMIT 1; \n", "match": {"match": false, "error": "Query execution failed with error: no such column: date_registered"}}
{"result": "SELECT first_name, middle_name, last_name\r\nFROM Students\r\nJOIN Degree_Programs ON Students.student_id = Degree_Programs.degree_program_id\r\nJOIN Transcripts ON Students.student_id = Transcripts.student_id\r\nWHERE Transcripts.transcript_date = (SELECT MIN(transcript_date) FROM Transcripts) \r\nORDER BY first_name, middle_name, last_name;", "match": {"match": false, "error": "Query execution failed with error: no such column: Transcripts.student_id"}}
{"result": "```sql\nSELECT first_name, middle_name, last_name\nFROM Students\nWHERE student_id IN (\n    SELECT student_id\n    FROM Enrolment\n    JOIN DegreePrograms ON Enrolment.degree_id = DegreePrograms.degree_id\n    WHERE DegreePrograms.degree_summary = 'Graduate'\n    ORDER BY Enrolment.enrolment_date ASC\n    LIMIT 1\n)\n```", "match": {"match": false, "error": "Query execution failed with error: no such table: Enrolment"}}
{"result": "SELECT s.first_name \nFROM Students s\nJOIN Addresses a1 ON s.permanent_address = a1.address_id\nJOIN Addresses a2 ON s.current_address = a2.address_id\nWHERE a1.address_id <> a2.address_id;\n\n\n\n", "match": {"match": false, "error": "Query execution failed with error: no such column: s.permanent_address"}}
{"result": "SELECT s.first_name\nFROM Students s\nWHERE s.permanent_address_id != s.current_address_id;", "match": {"match": true, "result": [["Timmothy"], ["Hobart"], ["Warren"], ["Jarvis"], ["Stanford"], ["Frida"], ["Delaney"], ["Reva"], ["Helga"], ["Gregg"], ["Orrin"], ["Deon"], ["Jordy"], ["Jett"]]}}
{"result": "SELECT a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.postcode, a.state, a.country, a.other_details \r\nFROM Addresses a\r\nJOIN Students s ON a.address_id = s.current_address_id\r\nGROUP BY a.address_id\r\nORDER BY COUNT(s.student_id) DESC \r\nLIMIT 1;", "match": {"match": false, "error": "Query execution failed with error: no such column: a.postcode"}}
{"result": "```sql\nSELECT a.address_id, a.line_1, a.line_2\nFROM Addresses a\nJOIN Students s ON a.address_id = s.current_address_id\nGROUP BY a.address_id, a.line_1, a.line_2\nORDER BY COUNT(s.student_id) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [[9, "0643 Muller Vista", "Suite 383"]]}}
{"result": "```sql\nSELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts;\n```", "match": {"match": true, "result": [[1989.9333333333334]]}}
{"result": "```sql\nSELECT AVG(transcript_date) FROM Transcripts;\n```", "match": {"match": true, "result": [[1989.9333333333334]]}}
{"result": "SELECT  T.transcript_date, TC.other_details  \nFROM Transcripts T  \nINNER JOIN Transcript_Contents TC ON T.transcript_id = TC.transcript_id\nORDER BY T.transcript_date ASC\nLIMIT 1; \n\n\n", "match": {"match": false, "error": "Query execution failed with error: no such column: TC.other_details"}}
{"result": "SELECT MIN(transcript_date) AS earliest_transcript_date, t.* \nFROM Transcripts AS t\nJOIN TranscriptContents AS tc ON t.transcript_id = tc.transcript_id\nORDER BY t.transcript_date ASC\nLIMIT 1;", "match": {"match": false, "error": "Query execution failed with error: no such table: TranscriptContents"}}
{"result": "SELECT COUNT(*) FROM Transcripts;", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) FROM Transcripts;", "match": {"match": true, "result": [[15]]}}
{"result": "```sql\nSELECT MAX(transcript_date)\nFROM Transcripts;\n```", "match": {"match": true, "result": [["2013-06-30 13:01:40"]]}}
{"result": "```sql\nSELECT MAX(transcript_date)\nFROM Transcripts;\n```", "match": {"match": true, "result": [["2013-06-30 13:01:40"]]}}
{"result": "SELECT COUNT(*) AS max_enrollments, \n       ce.enrolment_id\nFROM Course_Enrollment ce\nJOIN Transcripts t ON ce.course_id = t.course_id\nGROUP BY ce.enrolment_id\nORDER BY max_enrollments DESC;", "match": {"match": false, "error": "Query execution failed with error: no such table: Course_Enrollment"}}
{"result": "```sql\nSELECT \n    MAX(COUNT(DISTINCT t.transcript_id)) AS max_appearances,\n    c.course_id\nFROM \n    Courses c\nLEFT JOIN \n    Student_Enrolment se ON c.course_id = se.course_id\nLEFT JOIN \n    Transcripts t ON se.enrolment_id = t.enrolment_id\nGROUP BY \n    c.course_id\nORDER BY \n    max_appearances DESC\nLIMIT 1;\n```", "match": {"match": false, "error": "Query execution failed with error: misuse of aggregate function COUNT()"}}
{"result": "```sql\nSELECT transcript_id, transcript_date\nFROM Transcripts\nORDER BY COUNT(Contents.transcript_id) ASC\nLIMIT 1;\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: Contents.transcript_id"}}
{"result": "```sql\nSELECT transcript_date, transcript_id\nFROM Transcripts\nORDER BY COUNT(*) ASC\nLIMIT 1;\n```", "match": {"match": false, "error": "Query execution failed with error: misuse of aggregate: COUNT()"}}
{"result": "SELECT DISTINCT  s.semester_name \nFROM Semesters s\nJOIN Student_Enrolment se ON s.semester_id = se.semester_id \nJOIN DegreePrograms dp ON se.degree_program_id = dp.degree_program_id\nWHERE dp.degree_name IN ('Master', 'Bachelor'); \n", "match": {"match": false, "error": "Query execution failed with error: no such table: DegreePrograms"}}
{"result": "```sql\nSELECT DISTINCT s.semester_id\nFROM Semesters s\nJOIN Enrolment e ON s.semester_id = e.semester_id\nJOIN DegreePrograms dp ON e.degree_program_id = dp.degree_program_id\nWHERE dp.degree_summary = 'Masters'\n  AND s.semester_id IN (SELECT DISTINCT semester_id FROM Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM DegreePrograms WHERE degree_summary = 'Bachelors'));\n```", "match": {"match": false, "error": "Query execution failed with error: no such table: Enrolment"}}
{"result": "SELECT COUNT(DISTINCT current_address)\nFROM Students;", "match": {"match": false, "error": "Query execution failed with error: no such column: current_address"}}
{"result": "SELECT DISTINCT `Addresses`.`line1`, `Addresses`.`line2`, `Addresses`.`line3`, `Addresses`.`city`, `Addresses`.`postcode`, `Addresses`.`state`, `Addresses`.`country`, `Addresses`.`other_details`  \nFROM `Addresses`\nJOIN `Students` ON `Addresses`.`address_id` = `Students`.`current_address_id`;", "match": {"match": false, "error": "Query execution failed with error: no such column: Addresses.line1"}}
{"result": "SELECT * FROM Students ORDER BY last_name DESC, first_name DESC, middle_name DESC; \n", "match": {"match": false, "result": [[13, 9, 8, "Deon", "Brooklyn", "Weimann", "(213)445-0399x85208", "jhuel@example.com", "68095", "1986-02-24 21:12:23", "2014-05-30 23:32:02", "assumenda"], [1, 10, 15, "Timmothy", "Anna", "Ward", "(096)889-8954x524", "erwin.zboncak@example.com", "965", "1971-02-05 07:28:23", "1971-05-17 19:28:49", "quia"], [11, 14, 4, "Gregg", "Mossie", "Schuppe", "(462)246-7921", "nbruen@example.org", "494", "1989-05-24 23:31:29", "1975-10-09 00:49:27", "omnis"], [6, 6, 3, "Stanford", "Mona", "Rogahn", "436.613.7683", "skassulke@example.net", "248", "1997-03-20 16:47:25", "2016-04-09 12:27:04", "qui"], [14, 12, 11, "Jordy", "Osborne", "Rempel", "(605)919-3594x3661", "gracie29@example.com", "34458427", "2004-12-24 12:36:46", "1999-08-24 00:07:10", "et"], [9, 2, 15, "Reva", "Golda", "Osinski", "(507)365-8405", "qo'kon@example.com", "39", "2017-01-04 08:10:25", "1990-09-01 05:03:27", "nesciunt"], [10, 15, 14, "Helga", "Cleve", "Mohr", "677.401.9382", "nya.lesch@example.net", "43", "2009-09-25 00:14:25", "2017-07-09 21:38:43", "rerum"], [12, 14, 9, "Orrin", "Neal", "Kemmer", "(982)153-1469x1733", "beth42@example.org", "6274274", "2005-12-15 08:42:10", "2006-08-04 17:26:49", "non"], [15, 2, 9, "Jett", "Alberta", "Jaskolski", "877.549.9067x8723", "mya88@example.org", "156", "1982-06-19 13:15:18", "1982-06-11 00:25:39", "omnis"], [7, 15, 3, "Frida", "Aisha", "Huel", "1-879-796-8987x164", "baumbach.lucious@example.org", "668", "2018-03-13 09:56:22", "1997-11-16 08:54:33", "dolorum"], [3, 9, 5, "Warren", "Violet", "Gleichner", "07661787471", "johns.unique@example.net", "3", "2007-08-29 23:25:41", "2007-03-31 09:53:19", "facilis"], [5, 9, 9, "Milton", "Vaughn", "Christiansen", "171-642-5684", "lhartmann@example.org", "", "1973-05-19 19:12:46", "2007-11-28 12:50:21", "laborum"], [4, 7, 11, "Jarvis", "Aaliyah", "Carroll", "09700166582", "jillian26@example.net", "141072406", "2014-03-28 05:48:23", "2007-08-02 04:12:58", "atque"], [2, 12, 5, "Hobart", "Lorenz", "Balistreri", "1-009-710-5151", "swift.kolby@example.com", "304246", "1976-10-26 02:33:06", "2013-10-05 17:41:28", "autem"], [8, 1, 5, "Delaney", "Judd", "Ankunding", "03174364122", "dell43@example.net", "402", "1982-02-14 08:46:35", "2004-12-08 05:29:11", "voluptatem"]], "gt": [["voluptatem"], ["rerum"], ["quia"], ["qui"], ["omnis"], ["omnis"], ["non"], ["nesciunt"], ["laborum"], ["facilis"], ["et"], ["dolorum"], ["autem"], ["atque"], ["assumenda"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT *\nFROM Students\nORDER BY last_name DESC;\n```", "match": {"match": false, "result": [[13, 9, 8, "Deon", "Brooklyn", "Weimann", "(213)445-0399x85208", "jhuel@example.com", "68095", "1986-02-24 21:12:23", "2014-05-30 23:32:02", "assumenda"], [1, 10, 15, "Timmothy", "Anna", "Ward", "(096)889-8954x524", "erwin.zboncak@example.com", "965", "1971-02-05 07:28:23", "1971-05-17 19:28:49", "quia"], [11, 14, 4, "Gregg", "Mossie", "Schuppe", "(462)246-7921", "nbruen@example.org", "494", "1989-05-24 23:31:29", "1975-10-09 00:49:27", "omnis"], [6, 6, 3, "Stanford", "Mona", "Rogahn", "436.613.7683", "skassulke@example.net", "248", "1997-03-20 16:47:25", "2016-04-09 12:27:04", "qui"], [14, 12, 11, "Jordy", "Osborne", "Rempel", "(605)919-3594x3661", "gracie29@example.com", "34458427", "2004-12-24 12:36:46", "1999-08-24 00:07:10", "et"], [9, 2, 15, "Reva", "Golda", "Osinski", "(507)365-8405", "qo'kon@example.com", "39", "2017-01-04 08:10:25", "1990-09-01 05:03:27", "nesciunt"], [10, 15, 14, "Helga", "Cleve", "Mohr", "677.401.9382", "nya.lesch@example.net", "43", "2009-09-25 00:14:25", "2017-07-09 21:38:43", "rerum"], [12, 14, 9, "Orrin", "Neal", "Kemmer", "(982)153-1469x1733", "beth42@example.org", "6274274", "2005-12-15 08:42:10", "2006-08-04 17:26:49", "non"], [15, 2, 9, "Jett", "Alberta", "Jaskolski", "877.549.9067x8723", "mya88@example.org", "156", "1982-06-19 13:15:18", "1982-06-11 00:25:39", "omnis"], [7, 15, 3, "Frida", "Aisha", "Huel", "1-879-796-8987x164", "baumbach.lucious@example.org", "668", "2018-03-13 09:56:22", "1997-11-16 08:54:33", "dolorum"], [3, 9, 5, "Warren", "Violet", "Gleichner", "07661787471", "johns.unique@example.net", "3", "2007-08-29 23:25:41", "2007-03-31 09:53:19", "facilis"], [5, 9, 9, "Milton", "Vaughn", "Christiansen", "171-642-5684", "lhartmann@example.org", "", "1973-05-19 19:12:46", "2007-11-28 12:50:21", "laborum"], [4, 7, 11, "Jarvis", "Aaliyah", "Carroll", "09700166582", "jillian26@example.net", "141072406", "2014-03-28 05:48:23", "2007-08-02 04:12:58", "atque"], [2, 12, 5, "Hobart", "Lorenz", "Balistreri", "1-009-710-5151", "swift.kolby@example.com", "304246", "1976-10-26 02:33:06", "2013-10-05 17:41:28", "autem"], [8, 1, 5, "Delaney", "Judd", "Ankunding", "03174364122", "dell43@example.net", "402", "1982-02-14 08:46:35", "2004-12-08 05:29:11", "voluptatem"]], "gt": [["voluptatem"], ["rerum"], ["quia"], ["qui"], ["omnis"], ["omnis"], ["non"], ["nesciunt"], ["laborum"], ["facilis"], ["et"], ["dolorum"], ["autem"], ["atque"], ["assumenda"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    section_name \nFROM Sections \nWHERE section_id = h; \n", "match": {"match": false, "error": "Query execution failed with error: no such column: h"}}
{"result": "SELECT description \nFROM Sections\nWHERE section_name = 'h';", "match": {"match": false, "error": "Query execution failed with error: no such column: description"}}
{"result": "SELECT s.first_name\nFROM Students s\nWHERE s.permanent_address IN (SELECT a.line_1\n                                  FROM Addresses a\n                                  WHERE a.country = 'Haiti')\n   OR s.cell_number = '09700166582';", "match": {"match": false, "error": "Query execution failed with error: no such column: s.permanent_address"}}
{"result": "SELECT s.first_name\nFROM Students s\nJOIN Addresses a ON s.permanent_address = a.address_id\nWHERE a.country = 'Haiti'\nOR s.cell_number = '09700166582';", "match": {"match": false, "error": "Query execution failed with error: no such column: s.cell_number"}}
{"result": "SELECT Title FROM Cartoon ORDER BY Title;\n", "match": {"match": true, "result": [["Dawn of the Dead Man!"], ["Day of the Dark Knight!"], ["Deep Cover for Batman!"], ["Enter the Outsiders!"], ["Evil Under the Sea!"], ["Fall of the Blue Beetle!"], ["Invasion of the Secret Santas!"], ["Journey to the Center of the Bat!"], ["Return of the Fearsome Fangs!"], ["Terror on Dinosaur Island!"], ["The Eyes of Despero!"], ["The Rise of the Blue Beetle!"]]}}
{"result": "SELECT Title FROM Cartoon ORDER BY Title;", "match": {"match": true, "result": [["Dawn of the Dead Man!"], ["Day of the Dark Knight!"], ["Deep Cover for Batman!"], ["Enter the Outsiders!"], ["Evil Under the Sea!"], ["Fall of the Blue Beetle!"], ["Invasion of the Secret Santas!"], ["Journey to the Center of the Bat!"], ["Return of the Fearsome Fangs!"], ["Terror on Dinosaur Island!"], ["The Eyes of Despero!"], ["The Rise of the Blue Beetle!"]]}}
{"result": "SELECT c.Title\nFROM Cartoon c\nWHERE c.Directed_by = 'Ben Jones'; \n", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Day of the Dark Knight!"], ["Dawn of the Dead Man!"], ["The Eyes of Despero!"]]}}
{"result": "SELECT Title\nFROM Cartoon\nWHERE Directed_by = 'Ben Jones'; \n", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Day of the Dark Knight!"], ["Dawn of the Dead Man!"], ["The Eyes of Despero!"]]}}
{"result": "SELECT COUNT(*)\nFROM Cartoon\nWHERE Written_by = 'Joseph Kuhr';", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(*)\nFROM Cartoon\nWHERE Written_by = 'Joseph Kuhr';", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;", "match": {"match": true, "result": [["Invasion of the Secret Santas!", "Brandon Vietti"], ["Evil Under the Sea!", "Michael Chang"], ["Return of the Fearsome Fangs!", "Brandon Vietti"], ["Deep Cover for Batman!", "Michael Chang"], ["The Eyes of Despero!", "Ben Jones"], ["Dawn of the Dead Man!", "Ben Jones"], ["Day of the Dark Knight!", "Ben Jones"], ["Fall of the Blue Beetle!", "Brandon Vietti"], ["Journey to the Center of the Bat!", "Michael Chang"], ["Enter the Outsiders!", "Michael Chang"], ["The Rise of the Blue Beetle!", "Ben Jones"], ["Terror on Dinosaur Island!", "Brandon Vietti"]]}}
{"result": "SELECT C.Title, C.Directed_by \r\nFROM Cartoon C\r\nORDER BY C.Original_air_date; \n", "match": {"match": true, "result": [["Invasion of the Secret Santas!", "Brandon Vietti"], ["Evil Under the Sea!", "Michael Chang"], ["Return of the Fearsome Fangs!", "Brandon Vietti"], ["Deep Cover for Batman!", "Michael Chang"], ["The Eyes of Despero!", "Ben Jones"], ["Dawn of the Dead Man!", "Ben Jones"], ["Day of the Dark Knight!", "Ben Jones"], ["Fall of the Blue Beetle!", "Brandon Vietti"], ["Journey to the Center of the Bat!", "Michael Chang"], ["Enter the Outsiders!", "Michael Chang"], ["The Rise of the Blue Beetle!", "Ben Jones"], ["Terror on Dinosaur Island!", "Brandon Vietti"]]}}
{"result": "SELECT Title \nFROM Cartoon\nWHERE Directed_by IN ('Ben Jones', 'Brandon Vietti');", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Terror on Dinosaur Island!"], ["Day of the Dark Knight!"], ["Invasion of the Secret Santas!"], ["Dawn of the Dead Man!"], ["Fall of the Blue Beetle!"], ["The Eyes of Despero!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT Title\nFROM Cartoon\nWHERE Directed_by IN ('Ben Jones', 'Brandon Vietti'); \n", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Terror on Dinosaur Island!"], ["Day of the Dark Knight!"], ["Invasion of the Secret Santas!"], ["Dawn of the Dead Man!"], ["Fall of the Blue Beetle!"], ["The Eyes of Despero!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT \"Country\", COUNT(*) AS Number_of_Channels\nFROM \"TV_Channel\"\nGROUP BY \"Country\"\nORDER BY Number_of_Channels DESC;", "match": {"match": false, "result": [["Italy", 12], ["United Kingdom", 2], ["Poland", 1]], "gt": [["Italy", 12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Country, COUNT(*) AS NumberOfChannels\nFROM TV_Channel\nGROUP BY Country\nORDER BY NumberOfChannels DESC\nLIMIT 1; \n", "match": {"match": true, "result": [["Italy", 12]]}}
{"result": "SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM TV_Channel;  \n```", "match": {"match": true, "result": [[15, 1]]}}
{"result": "SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel; \n\n\n", "match": {"match": true, "result": [[15, 1]]}}
{"result": "SELECT \nContent\nFROM \nTV_Channel\nWHERE \nseries_name = 'Sky Radio'; \n", "match": {"match": true, "result": [["music"]]}}
{"result": "SELECT Content\nFROM TV_Channel\nWHERE series_name = 'Sky Radio';", "match": {"match": true, "result": [["music"]]}}
{"result": "SELECT\n  p.Package_Option\nFROM TV_Channel p\nWHERE p.series_name = 'Sky Radio'; \n\n\n", "match": {"match": true, "result": [["Sky Famiglia"]]}}
{"result": "SELECT DISTINCT Package_Option \nFROM TV_Channel\nWHERE series_name = 'Sky Radio';", "match": {"match": true, "result": [["Sky Famiglia"]]}}
{"result": "SELECT COUNT(*) \nFROM TV_Channel\nWHERE Language = 'English';", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(DISTINCT t.id) \nFROM TVChannel t \nWHERE t.Language = 'English'; \n", "match": {"match": false, "error": "Query execution failed with error: no such table: TVChannel"}}
{"result": "SELECT \"Language\", COUNT(\"Language\") AS \"Number_of_TV_Channels\"\nFROM \"TV_Channel\"\nGROUP BY \"Language\"\nORDER BY \"Number_of_TV_Channels\" ASC\nLIMIT 1; \n", "match": {"match": true, "result": [["English", 3]]}}
{"result": "SELECT Language, COUNT(*) AS Channel_Count\nFROM TV_Channel\nGROUP BY Language\nORDER BY Channel_Count ASC\nLIMIT 10; \n", "match": {"match": false, "result": [["English", 3], ["Italian", 12]], "gt": [["English", 3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \"Language\", COUNT(\"id\") \nFROM \"TV_Channel\" \nGROUP BY \"Language\"; \n", "match": {"match": true, "result": [["English", 3], ["Italian", 12]]}}
{"result": "SELECT Language, COUNT(*) AS NumChannels\nFROM TVChannel\nGROUP BY Language;", "match": {"match": false, "error": "Query execution failed with error: no such table: TVChannel"}}
{"result": "SELECT \n    c.series_name \nFROM Cartoon c\nJOIN TV_Channel c ON c.Channel = c.id\nWHERE c.Title = 'The Rise of the Blue Beetle!'; \n", "match": {"match": false, "error": "Query execution failed with error: ambiguous column name: c.id"}}
{"result": "SELECT t.series_name \nFROM TV_Channel t\nJOIN Cartoon c ON t.id = c.Channel\nWHERE c.Title = 'The Rise of the Blue Beetle'; \n", "match": {"match": false, "result": [], "gt": [["Sky Radio"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT c.Title\r\nFROM Cartoon c\r\nJOIN TV_Channel ch ON c.Channel = ch.id\r\nWHERE ch.series_name = 'Sky Radio'; \n", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT c.Title\r\nFROM Cartoon c\r\nJOIN TV_Channel ch ON c.Channel = ch.id\r\nJOIN TV_series s ON ch.id = s.Channel\r\nWHERE s.series_name = 'Sky Radio';", "match": {"match": false, "error": "Query execution failed with error: no such column: s.series_name"}}
{"result": "SELECT Episode\nFROM TV_series\nORDER BY Rating DESC;", "match": {"match": false, "result": [["A Love of a Lifetime"], ["Friendly Skies"], ["Game Three"], ["The Year of the Rabbit"], ["Winterland"], ["The Legend of Dylan McCleen"], ["Keepers"], ["Emily"], ["Blowback"], ["Home By Another Way"], ["Double Down"], ["The Hanged Man"]], "gt": [["The Hanged Man"], ["Double Down"], ["Home By Another Way"], ["Keepers"], ["Emily"], ["Blowback"], ["The Legend of Dylan McCleen"], ["Winterland"], ["The Year of the Rabbit"], ["Game Three"], ["Friendly Skies"], ["A Love of a Lifetime"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT * FROM TV_series ORDER BY Rating DESC; \n", "match": {"match": false, "result": [[1.0, "A Love of a Lifetime", "September 24, 2007", "5.8", 9.0, "3.5/9", "9.16", 43.0, "700"], [2.0, "Friendly Skies", "October 1, 2007", "5.3", 9.0, "3.2/8", "8.23", 50.0, "701"], [3.0, "Game Three", "October 8, 2007", "4.4", 7.0, "2.9/7", "6.94", 61.0, "707"], [4.0, "The Year of the Rabbit", "October 15, 2007", "4.3", 7.0, "2.7/7", "6.75", 67.0, "713"], [8.0, "Winterland", "November 12, 2007", "4.0", 7.0, "2.4/6", "6.09", 70.0, "707"], [5.0, "The Legend of Dylan McCleen", "October 22, 2007", "3.8", 6.0, "2.4/6", "6.06", 72.0, "714"], [6.0, "Keepers", "October 29, 2007", "3.7", 6.0, "2.2/6", "5.75", 71.0, "700"], [9.0, "Emily", "November 19, 2007", "3.7", 6.0, "2.2/6", "5.61", 66.0, "717"], [10.0, "Blowback", "November 26, 2007", "3.7", 6.0, "2.4/6", "6.05", 68.0, "719"], [11.0, "Home By Another Way", "December 10, 2007", "3.5", 6.0, "1.7/5", "5.28", 62.0, "728"], [7.0, "Double Down", "November 5, 2007", "3.4", 6.0, "2.1/5", "5.13", 80.0, "708"], [12.0, "The Hanged Man", "December 17, 2007", "3.0", 5.0, "1.5/4", "4.24", 65.0, "714"]], "gt": [["The Hanged Man"], ["Double Down"], ["Home By Another Way"], ["Keepers"], ["Emily"], ["Blowback"], ["The Legend of Dylan McCleen"], ["Winterland"], ["The Year of the Rabbit"], ["Game Three"], ["Friendly Skies"], ["A Love of a Lifetime"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Episode, Rating \nFROM TV_series\nORDER BY Rating DESC\nLIMIT 3;\n", "match": {"match": true, "result": [["A Love of a Lifetime", "5.8"], ["Friendly Skies", "5.3"], ["Game Three", "4.4"]]}}
{"result": "SELECT Episode, Rating\nFROM TV_series\nORDER BY Rating DESC\nLIMIT 3; \n", "match": {"match": true, "result": [["A Love of a Lifetime", "5.8"], ["Friendly Skies", "5.3"], ["Game Three", "4.4"]]}}
{"result": "SELECT MIN(Share), MAX(Share) FROM TVSeries;", "match": {"match": false, "error": "Query execution failed with error: no such table: TVSeries"}}
{"result": "SELECT  MAX(Share), MIN(Share) FROM TV_series;  \n", "match": {"match": true, "result": [[9.0, 5.0]]}}
{"result": "SELECT \nAir_Date\nFROM \nTV_series\nWHERE \nEpisode = 'A Love of a Lifetime'; \n", "match": {"match": true, "result": [["September 24, 2007"]]}}
{"result": "SELECT \nAir_Date \nFROM \nTV_series\nWHERE \nEpisode = 'A Love of a Lifetime'; \n", "match": {"match": true, "result": [["September 24, 2007"]]}}
{"result": "SELECT Weekly_Rank \nFROM TVseries \nWHERE Episode = 'A Love of a Lifetime'; \n", "match": {"match": false, "error": "Query execution failed with error: no such table: TVseries"}}
{"result": "SELECT  Weekly_Rank\nFROM TV_series\nWHERE Episode = 'A Love of a Lifetime'; \n", "match": {"match": true, "result": [[43.0]]}}
{"result": "SELECT\n  `TV_Channel`.`series_name`\nFROM `TV_Channel`\nJOIN `TV_series` ON `TV_Channel`.`id` = `TV_series`.`Channel`\nWHERE `TV_series`.`Episode` = 'A Love of a Lifetime'; \n", "match": {"match": true, "result": [["Sky Radio"]]}}
{"result": "SELECT t.series_name\nFROM TV_series t\nWHERE t.Episode = 'A Love of a Lifetime';\n", "match": {"match": false, "error": "Query execution failed with error: no such column: t.series_name"}}
{"result": "SELECT \n    s.Episode\nFROM \n    TV_series s\nJOIN \n    TV_Channel c ON s.Channel = c.id\nWHERE \n    c.series_name = 'Sky Radio'; \n", "match": {"match": true, "result": [["A Love of a Lifetime"], ["Keepers"]]}}
{"result": "SELECT \n    Episode \nFROM \n    TV_series\nWHERE \n    series_name = 'Sky Radio'; \n", "match": {"match": false, "error": "Query execution failed with error: no such column: series_name"}}
{"result": "SELECT Directed_by, COUNT(*) AS NumberOfCartoons\nFROM Cartoon\nGROUP BY Directed_by;\n", "match": {"match": false, "result": [["Ben Jones", 4], ["Brandon Vietti", 4], ["Michael Chang", 4]], "gt": [[4, "Ben Jones"], [4, "Brandon Vietti"], [4, "Michael Chang"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Directed_by, COUNT(*) AS NumberOfCartoons \r\nFROM Cartoon \r\nGROUP BY Directed_by; \n", "match": {"match": false, "result": [["Ben Jones", 4], ["Brandon Vietti", 4], ["Michael Chang", 4]], "gt": [[4, "Ben Jones"], [4, "Brandon Vietti"], [4, "Michael Chang"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Production_code, c.id\nFROM Cartoon c\nJOIN TV_Channel ON c.Channel = TV_Channel.id\nORDER BY c.Original_air_date DESC\nLIMIT 1; \n", "match": {"match": false, "result": [[102.0, 2.0]], "gt": [[102.0, "701"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Production_code, c.id AS Channel \r\nFROM Cartoon c \r\nJOIN TV_Channel ON c.Channel = TV_Channel.id \r\nORDER BY c.id DESC \r\nLIMIT 1; \n", "match": {"match": false, "result": [[112.0, 12.0]], "gt": [[102.0, "701"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT\n    t.Package_Option,\n    tc.series_name\nFROM\n    TV_Channel t\nJOIN\n    TV_series tc ON t.id = tc.Channel\nWHERE\n    t.Hight_definition_TV = 'True';", "match": {"match": false, "error": "Query execution failed with error: no such column: tc.series_name"}}
{"result": "SELECT DISTINCT t.Package_Option, s.series_name\nFROM TV_Channel t\nJOIN TV_series s ON t.id = s.Channel\nWHERE t.Hight_definition_TV = 'Yes'; \n", "match": {"match": false, "error": "Query execution failed with error: no such column: s.series_name"}}
{"result": "SELECT DISTINCT c.Country\nFROM TVChannel c\nJOIN Cartoon ca ON c.id = ca.Channel\nJOIN TVSeries ts ON c.id = ts.Channel\nWHERE ts.Air_Date IS NOT NULL AND ca.Written_by = 'Todd Casey';", "match": {"match": false, "error": "Query execution failed with error: no such table: TVChannel"}}
{"result": "SELECT DISTINCT c.Country\nFROM Cartoon c\nJOIN TV_Channel ch ON c.Channel = ch.id\nWHERE c.Written_by = 'Todd Casey'; \n\n\n", "match": {"match": false, "error": "Query execution failed with error: no such column: c.Country"}}
{"result": "SELECT DISTINCT c.Country\nFROM TV_Channel c\nLEFT JOIN Cartoon ca ON c.id = ca.Channel\nLEFT JOIN \"TV_series\" ts ON c.id = ts.Channel\nWHERE ca.Written_by = 'Todd Casey'\nGROUP BY c.Country\nHAVING COUNT(DISTINCT ca.id) = 0;\n\n\n\n", "match": {"match": false, "result": [], "gt": [["Poland"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT C.Country \r\nFROM TV_Channel C\r\nLEFT JOIN Cartoon CA ON C.id = CA.Channel \r\nLEFT JOIN \"TV_series\" TS ON CA.Channel = TS.Channel\r\nWHERE TS.Written_by != 'Todd Casey'; \n", "match": {"match": false, "error": "Query execution failed with error: no such column: TS.Written_by"}}
{"result": "SELECT \nt.series_name, \nt.Country\nFROM TV_Channel t\nJOIN Cartoon c ON t.id = c.Channel\nWHERE c.Directed_by IN ('Ben Jones', 'Michael Chang'); \n", "match": {"match": false, "result": [["Sky Radio", "Italy"], ["Music Box Italia", "Italy"], ["MTV Hits", "Italy"], ["MTV Rocks", "United Kingdom"], ["MTV Dance", "United Kingdom"], ["MTV Dance", "United Kingdom"], ["Classica", "Italy"], ["MTV Dance", "United Kingdom"]], "gt": [["MTV Dance", "United Kingdom"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    t.series_name,\n    t.Country\nFROM \n    TV_Channel t\nJOIN \n    Cartoon c ON t.id = c.Channel\nWHERE \n    c.Directed_by = 'Ben Jones' OR c.Directed_by = 'Michael Chang'; \n", "match": {"match": false, "result": [["Sky Radio", "Italy"], ["Music Box Italia", "Italy"], ["MTV Hits", "Italy"], ["MTV Rocks", "United Kingdom"], ["MTV Dance", "United Kingdom"], ["MTV Dance", "United Kingdom"], ["Classica", "Italy"], ["MTV Dance", "United Kingdom"]], "gt": [["MTV Dance", "United Kingdom"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT `Pixel_aspect_ratio`, `Country`\nFROM `TV_Channel`\nWHERE `Language` != 'English';", "match": {"match": false, "error": "Query execution failed with error: no such column: Pixel_aspect_ratio"}}
{"result": "SELECT  \"Pixel_aspect_ratio\" , \"Country\"\nFROM \"TV_Channel\"\nWHERE \"Language\" != 'English';", "match": {"match": false, "result": [["Pixel_aspect_ratio", "Italy"], ["Pixel_aspect_ratio", "Italy"], ["Pixel_aspect_ratio", "Italy"], ["Pixel_aspect_ratio", "Italy"], ["Pixel_aspect_ratio", "Italy"], ["Pixel_aspect_ratio", "Italy"], ["Pixel_aspect_ratio", "Italy"], ["Pixel_aspect_ratio", "Italy"], ["Pixel_aspect_ratio", "Italy"], ["Pixel_aspect_ratio", "Italy"], ["Pixel_aspect_ratio", "Italy"], ["Pixel_aspect_ratio", "Italy"]], "gt": [["4:3", "Italy"], ["4:3", "Italy"], ["4:3 / 16:9", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3", "Italy"], ["4:3", "Italy"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT c.id\nFROM TV_Channel c\nJOIN TV_Channel cc ON c.id <> cc.id\nGROUP BY c.id\nHAVING COUNT(DISTINCT cc.id) > 2; \n", "match": {"match": false, "result": [["700"], ["701"], ["703"], ["704"], ["705"], ["706"], ["707"], ["708"], ["709"], ["713"], ["714"], ["715"], ["717"], ["719"], ["728"]], "gt": [["700"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT t.id\nFROM TV_Channel t\nJOIN TV_Channel t2 ON t.id = t2.id\nGROUP BY t.id\nHAVING COUNT(DISTINCT t2.id) > 2;\n\n\n\n", "match": {"match": false, "result": [], "gt": [["700"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT t.id\nFROM TVChannel t\nLEFT JOIN Cartoon c ON t.id = c.Channel\nWHERE c.Directed_by != 'Ben Jones';", "match": {"match": false, "error": "Query execution failed with error: no such table: TVChannel"}}
{"result": "SELECT DISTINCT t.id\r\nFROM TVChannel t\r\nLEFT JOIN Cartoon c ON t.id = c.Channel\r\nWHERE c.Directed_by != 'Ben Jones';", "match": {"match": false, "error": "Query execution failed with error: no such table: TVChannel"}}
{"result": "SELECT DISTINCT  t.Package_Option\nFROM TVChannel t\nLEFT JOIN Cartoon c ON t.id = c.Channel\nWHERE c.Directed_by != 'Ben Jones'; \n", "match": {"match": false, "error": "Query execution failed with error: no such table: TVChannel"}}
{"result": "SELECT DISTINCT \nT.Package_Option\nFROM TVChannel AS T\nLEFT JOIN Cartoon AS C ON T.id = C.Channel\nWHERE C.Directed_by != 'Ben Jones';", "match": {"match": false, "error": "Query execution failed with error: no such table: TVChannel"}}
{"result": "SELECT COUNT(*) FROM poker_player;\n", "match": {"match": true, "result": [[5]]}}
{"result": "SELECT COUNT(*) FROM poker_player;", "match": {"match": true, "result": [[5]]}}
{"result": "SELECT Earnings \nFROM poker_player \nORDER BY Earnings DESC;", "match": {"match": true, "result": [[596462.0], [476090.0], [189233.0], [142800.0], [104871.0]]}}
{"result": "SELECT Earnings \nFROM poker_player \nORDER BY Earnings DESC;", "match": {"match": true, "result": [[596462.0], [476090.0], [189233.0], [142800.0], [104871.0]]}}
{"result": "SELECT \n    \"Final_Table_Made\",\n    \"Best_Finish\"\nFROM \n    poker_player; \n\n\n\n", "match": {"match": true, "result": [[42.0, 1.0], [10.0, 2.0], [21.0, 1.0], [19.0, 2.0], [26.0, 3.0]]}}
{"result": "SELECT \n    p.Final_Table_Made,\n    p.Best_Finish \nFROM \n    poker_player p; \n", "match": {"match": true, "result": [[42.0, 1.0], [10.0, 2.0], [21.0, 1.0], [19.0, 2.0], [26.0, 3.0]]}}
{"result": "SELECT AVG(Earnings) FROM poker_player;", "match": {"match": true, "result": [[301891.2]]}}
{"result": "```sql\nSELECT AVG(Earnings) FROM poker_player;\n```", "match": {"match": true, "result": [[301891.2]]}}
{"result": "```sql\nSELECT Money_Rank\nFROM poker_player\nORDER BY Earnings DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [[58.0]]}}
{"result": "SELECT \"Money_Rank\"\nFROM \"poker_player\"\nORDER BY \"Earnings\" DESC\nLIMIT 1; \n", "match": {"match": true, "result": [[58.0]]}}
{"result": "SELECT MAX(Final_Table_Made) \nFROM poker_player\nWHERE Earnings < 200000;", "match": {"match": true, "result": [[26.0]]}}
{"result": "SELECT MAX(\"Final_Table_Made\")\nFROM poker_player\nWHERE \"Earnings\" < 200000;\n", "match": {"match": true, "result": [[26.0]]}}
{"result": "SELECT \nName \nFROM poker_player\nJOIN people ON poker_player.People_ID = people.People_ID; \n", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Teodor Salparov"], ["Yevgeni Sivozhelez"], ["Maksim Botin"], ["Semen Poltavskiy"]]}}
{"result": "SELECT  \"Name\"\nFROM    \"poker_player\"\nJOIN    \"people\" ON \"poker_player\".\"People_ID\" = \"people\".\"People_ID\";\n", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Teodor Salparov"], ["Yevgeni Sivozhelez"], ["Maksim Botin"], ["Semen Poltavskiy"]]}}
{"result": "SELECT \n    p.Name\nFROM \n    poker_player p\nJOIN \n    people  ON p.People_ID = people.People_ID\nWHERE \n    p.Earnings > 300000; \n", "match": {"match": false, "error": "Query execution failed with error: no such column: p.Name"}}
{"result": "SELECT p.Name \r\nFROM poker_player p\r\nJOIN people p ON p.People_ID = p.People_ID\r\nWHERE p.Earnings > 300000; \n", "match": {"match": false, "error": "Query execution failed with error: ambiguous column name: p.People_ID"}}
{"result": "SELECT p.Name FROM poker_player p JOIN people p ON p.People_ID = p.People_ID ORDER BY p.Final_Table_Made ASC;", "match": {"match": false, "error": "Query execution failed with error: ambiguous column name: p.People_ID"}}
{"result": "SELECT p.Name FROM poker_player p ORDER BY p.Final_Table_Made ASC;", "match": {"match": false, "error": "Query execution failed with error: no such column: p.Name"}}
{"result": "SELECT \n    p.Birth_Date\nFROM \n    poker_player AS pp\nJOIN \n    people AS p ON pp.People_ID = p.People_ID\nWHERE \n    pp.Earnings = (SELECT MIN(Earnings) FROM poker_player);", "match": {"match": true, "result": [["August 8, 1986"]]}}
{"result": "SELECT p.Birth_Date\nFROM poker_player AS pp\nJOIN people AS p ON pp.People_ID = p.People_ID\nORDER BY pp.Earnings ASC\nLIMIT 1;\n", "match": {"match": true, "result": [["August 8, 1986"]]}}
{"result": "SELECT  \n    Money_Rank \nFROM  \n    poker_player \nJOIN  \n    people ON poker_player.People_ID = people.People_ID \nORDER BY  \n    Height DESC \nLIMIT 1;", "match": {"match": true, "result": [[68.0]]}}
{"result": "SELECT\n  p.Money_Rank\nFROM\n  poker_player p\nJOIN\n  people pe ON p.People_ID = pe.People_ID\nORDER BY\n  pe.Height DESC\nLIMIT 1;\n", "match": {"match": true, "result": [[68.0]]}}
{"result": "```sql\nSELECT AVG(Earnings)\nFROM poker_player\nWHERE People_ID IN (SELECT People_ID FROM people WHERE Height > 200);\n```", "match": {"match": true, "result": [[309445.0]]}}
{"result": "```sql\nSELECT AVG(Earnings) \nFROM poker_player\nWHERE People_ID IN (SELECT People_ID FROM people WHERE Height > 200);\n```", "match": {"match": true, "result": [[309445.0]]}}
{"result": "SELECT p.Name\nFROM poker_player p\nJOIN people ON p.People_ID = people.People_ID\nORDER BY p.Earnings DESC;", "match": {"match": false, "error": "Query execution failed with error: no such column: p.Name"}}
{"result": "SELECT p.Name \nFROM poker_player p\nJOIN people ON p.People_ID = people.People_ID\nORDER BY p.Earnings DESC;", "match": {"match": false, "error": "Query execution failed with error: no such column: p.Name"}}
{"result": "SELECT Nationality, COUNT(*) AS NumberOfPeople\nFROM people\nGROUP BY Nationality;", "match": {"match": true, "result": [["Bulgaria", 1], ["Russia", 6]]}}
{"result": "SELECT Nationality, COUNT(*) AS NumberOfPeople \r\nFROM people \r\nGROUP BY Nationality;", "match": {"match": true, "result": [["Bulgaria", 1], ["Russia", 6]]}}
{"result": "SELECT Nationality, COUNT(*) AS NumPeople\nFROM people\nGROUP BY Nationality\nORDER BY NumPeople DESC\nLIMIT 1; \n", "match": {"match": false, "result": [["Russia", 6]], "gt": [["Russia"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Nationality, COUNT(*) AS count\nFROM people\nGROUP BY Nationality\nORDER BY count DESC\nLIMIT 1; \n", "match": {"match": false, "result": [["Russia", 6]], "gt": [["Russia"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Nationality\nFROM people\nGROUP BY Nationality\nHAVING COUNT(*) >= 2;", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Nationality\nFROM people\nGROUP BY Nationality\nHAVING COUNT(*) >= 2;", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Name, Birth_Date FROM people ORDER BY Name ASC;", "match": {"match": true, "result": [["Aleksey Ostapenko", "May 26, 1986"], ["Maksim Botin", "July 14, 1983"], ["Roman Bragin", "April 17, 1987"], ["Semen Poltavskiy", "February 8, 1981"], ["Sergey Grankin", "January 22, 1987"], ["Teodor Salparov", "August 16, 1982"], ["Yevgeni Sivozhelez", "August 8, 1986"]]}}
{"result": "SELECT Name, Birth_Date FROM people ORDER BY Name;", "match": {"match": true, "result": [["Aleksey Ostapenko", "May 26, 1986"], ["Maksim Botin", "July 14, 1983"], ["Roman Bragin", "April 17, 1987"], ["Semen Poltavskiy", "February 8, 1981"], ["Sergey Grankin", "January 22, 1987"], ["Teodor Salparov", "August 16, 1982"], ["Yevgeni Sivozhelez", "August 8, 1986"]]}}
{"result": "SELECT p.Name \nFROM people p\nWHERE p.Nationality != 'Russia';", "match": {"match": true, "result": [["Teodor Salparov"]]}}
{"result": "```sql\nSELECT p.Name \nFROM people p\nWHERE p.Nationality != 'Russia';\n```", "match": {"match": true, "result": [["Teodor Salparov"]]}}
{"result": "SELECT Name \nFROM people \nWHERE People_ID NOT IN (SELECT People_ID FROM poker_player);", "match": {"match": true, "result": [["Roman Bragin"], ["Sergey Grankin"]]}}
{"result": "SELECT Name\nFROM people\nWHERE People_ID NOT IN (SELECT People_ID FROM poker_player);", "match": {"match": true, "result": [["Roman Bragin"], ["Sergey Grankin"]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM people;", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM people; \n", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(*) FROM conductor;", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT COUNT(*) FROM conductor;", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT Name FROM conductor ORDER BY Age ASC;", "match": {"match": true, "result": [["Antal Dor\u00e1ti"], ["Igor Stravinsky"], ["Colin Davis"], ["Michael Tilson Thomas"], ["Paul Jorgensen"], ["Antal Brown"], ["Charles Dutoit"], ["Seiji Ozawa"], ["Valeri Gergiev"], ["Pierre Boulez"], ["Gerard Schwarz"], ["Robert Craft"]]}}
{"result": "SELECT Name \nFROM conductor \nORDER BY Age;", "match": {"match": true, "result": [["Antal Dor\u00e1ti"], ["Igor Stravinsky"], ["Colin Davis"], ["Michael Tilson Thomas"], ["Paul Jorgensen"], ["Antal Brown"], ["Charles Dutoit"], ["Seiji Ozawa"], ["Valeri Gergiev"], ["Pierre Boulez"], ["Gerard Schwarz"], ["Robert Craft"]]}}
{"result": "SELECT Name \nFROM conductor\nWHERE Nationality != 'USA';", "match": {"match": true, "result": [["Igor Stravinsky"], ["Paul Jorgensen"], ["Charles Dutoit"], ["Pierre Boulez"], ["Robert Craft"], ["Michael Tilson Thomas"]]}}
{"result": "SELECT Name\nFROM conductor\nWHERE Nationality != 'USA';", "match": {"match": true, "result": [["Igor Stravinsky"], ["Paul Jorgensen"], ["Charles Dutoit"], ["Pierre Boulez"], ["Robert Craft"], ["Michael Tilson Thomas"]]}}
{"result": "SELECT Record_Company, Year_Of_Founded FROM orchestra ORDER BY Year_Of_Founded DESC;\n\n", "match": {"match": false, "result": [["Columbia Masterworks", 2009.0], ["Philips", 2008.0], ["Philips Classics Records", 2008.0], ["RCA", 2008.0], ["EMI", 2007.0], ["Koch Records / Naxos Records", 2006.0], ["Decca Records", 2004.0], ["Mercury Records", 2003.0], ["Deutsche Grammophon", 2003.0], ["Kultur", 2002.0], ["Decca Records", 2002.0], ["Delos Records", 2002.0]], "gt": [["Columbia Masterworks"], ["Philips"], ["Philips Classics Records"], ["RCA"], ["EMI"], ["Koch Records / Naxos Records"], ["Decca Records"], ["Mercury Records"], ["Deutsche Grammophon"], ["Kultur"], ["Decca Records"], ["Delos Records"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Record_Company FROM orchestra ORDER BY Year_Founded DESC;", "match": {"match": false, "error": "Query execution failed with error: no such column: Year_Founded"}}
{"result": "SELECT AVG(Attendance) FROM show; \n", "match": {"match": true, "result": [[1326.4]]}}
{"result": "SELECT AVG(Attendance) FROM show;", "match": {"match": true, "result": [[1326.4]]}}
{"result": "SELECT MAX(Share), MIN(Share) FROM performance WHERE Type != 'Live final'; \n", "match": {"match": true, "result": [["44.7%", "22.7%"]]}}
{"result": "SELECT MIN(Share), MAX(Share)\nFROM performance\nWHERE Type != 'Live final'; \n", "match": {"match": false, "result": [["22.7%", "44.7%"]], "gt": [["44.7%", "22.7%"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM conductor;", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM conductor;", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC;", "match": {"match": true, "result": [["Robert Craft"], ["Antal Brown"], ["Gerard Schwarz"], ["Valeri Gergiev"], ["Charles Dutoit"], ["Michael Tilson Thomas"], ["Igor Stravinsky"], ["Paul Jorgensen"], ["Pierre Boulez"], ["Antal Dor\u00e1ti"], ["Seiji Ozawa"], ["Colin Davis"]]}}
{"result": "SELECT Name\nFROM conductor\nORDER BY Year_of_Work DESC;", "match": {"match": true, "result": [["Robert Craft"], ["Antal Brown"], ["Gerard Schwarz"], ["Valeri Gergiev"], ["Charles Dutoit"], ["Michael Tilson Thomas"], ["Igor Stravinsky"], ["Paul Jorgensen"], ["Pierre Boulez"], ["Antal Dor\u00e1ti"], ["Seiji Ozawa"], ["Colin Davis"]]}}
{"result": "SELECT Name \nFROM conductor\nORDER BY Year_of_Work DESC\nLIMIT 1;", "match": {"match": true, "result": [["Robert Craft"]]}}
{"result": "SELECT Name\nFROM conductor\nORDER BY Year_of_Work DESC\nLIMIT 1;", "match": {"match": true, "result": [["Robert Craft"]]}}
{"result": "SELECT c.Name AS ConductorName, o.Orchestra AS OrchestraName\nFROM conductor c\nJOIN orchastra o ON c.Conductor_ID = o.Conductor_ID; \n", "match": {"match": false, "error": "Query execution failed with error: no such table: orchastra"}}
{"result": "SELECT c.Name AS ConductorName, o.Orchestra AS OrchestraName\nFROM conductor c\nJOIN orchestra o ON c.ConductorID = o.ConductorID; \n", "match": {"match": false, "error": "Query execution failed with error: no such column: c.ConductorID"}}
{"result": "SELECT DISTINCT Name \nFROM conductor\nWHERE Conductor_ID IN (SELECT Conductor_ID FROM orchastra GROUP BY Conductor_ID HAVING COUNT(*) > 1); \n\n\n", "match": {"match": false, "error": "Query execution failed with error: no such table: orchastra"}}
{"result": "SELECT DISTINCT c.Name\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nGROUP BY c.Name\nHAVING COUNT(DISTINCT o.Orchestra) > 1;", "match": {"match": true, "result": []}}
{"result": "SELECT c.Name FROM conductor c JOIN orchaestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name ORDER BY COUNT(o.Orchestra_ID) DESC LIMIT 1; \n", "match": {"match": false, "error": "Query execution failed with error: no such table: orchaestra"}}
{"result": "SELECT Name\r\nFROM conductor\r\nJOIN orchastra ON conductor.Conductor_ID = orchastra.Conductor_ID\r\nGROUP BY Name\r\nORDER BY COUNT(*) DESC\r\nLIMIT 1; \n", "match": {"match": false, "error": "Query execution failed with error: no such table: orchastra"}}
{"result": "SELECT c.Name\nFROM conductor c\nJOIN orchastra o ON c.Conductor_ID = o.Conductor_ID\nWHERE o.Year_Founded > 2008; \n", "match": {"match": false, "error": "Query execution failed with error: no such table: orchastra"}}
{"result": "SELECT \n    c.Name\nFROM \n    conductor c\nJOIN \n    orchestra o ON c.Conductor_ID = o.Conductor_ID\nWHERE \n    o.Year_Founded > 2008; \n", "match": {"match": false, "error": "Query execution failed with error: no such column: o.Year_Founded"}}
{"result": "SELECT Record_Company, COUNT(*) AS Number_of_Orchestras\nFROM orchestra\nGROUP BY Record_Company; \n", "match": {"match": true, "result": [["Columbia Masterworks", 1], ["Decca Records", 2], ["Delos Records", 1], ["Deutsche Grammophon", 1], ["EMI", 1], ["Koch Records / Naxos Records", 1], ["Kultur", 1], ["Mercury Records", 1], ["Philips", 1], ["Philips Classics Records", 1], ["RCA", 1]]}}
{"result": "SELECT orchestra.Record_Company, COUNT(orchestra.Orchestra) AS NumberOfOrchestras\nFROM orchestra\nGROUP BY orchestra.Record_Company;  \n", "match": {"match": true, "result": [["Columbia Masterworks", 1], ["Decca Records", 2], ["Delos Records", 1], ["Deutsche Grammophon", 1], ["EMI", 1], ["Koch Records / Naxos Records", 1], ["Kultur", 1], ["Mercury Records", 1], ["Philips", 1], ["Philips Classics Records", 1], ["RCA", 1]]}}
{"result": "SELECT Major_Record_Format, COUNT(*) AS Orchestra_Count\nFROM orchestra\nGROUP BY Major_Record_Format\nORDER BY Orchestra_Count ASC;  \n", "match": {"match": false, "result": [["CD / LP", 1], ["DVD", 1], ["CD", 10]], "gt": [["CD / LP"], ["DVD"], ["CD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Major_Record_Format, COUNT(*) AS Frequency\nFROM orchestra\nGROUP BY Major_Record_Format\nORDER BY Frequency DESC;  \n", "match": {"match": false, "result": [["CD", 10], ["DVD", 1], ["CD / LP", 1]], "gt": [["CD / LP"], ["DVD"], ["CD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT RecordCompany, COUNT(*) AS OrchestraCount\nFROM orchestra\nGROUP BY RecordCompany\nORDER BY OrchestraCount DESC\nLIMIT 1; \n", "match": {"match": false, "error": "Query execution failed with error: no such column: RecordCompany"}}
{"result": "SELECT Record_Company, COUNT(*) AS Orchestra_Count\nFROM orchastra\nGROUP BY Record_Company\nORDER BY Orchestra_Count DESC\nLIMIT 1; \n", "match": {"match": false, "error": "Query execution failed with error: no such table: orchastra"}}
{"result": "SELECT DISTINCT Orchestra \nFROM orchestra \nWHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);", "match": {"match": true, "result": [["San Francisco Symphony Orchestra"]]}}
{"result": "SELECT \n    o.Orchestra\nFROM orchestra o\nLEFT JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID\nWHERE p.Orchestra_ID IS NULL;", "match": {"match": true, "result": [["San Francisco Symphony Orchestra"]]}}
{"result": "SELECT Record_Company\nFROM orchestra\nWHERE Year_Founded < 2003\nGROUP BY Record_Company\n\nUNION ALL\n\nSELECT Record_Company\nFROM orchestra\nWHERE Year_Founded >= 2003\nGROUP BY Record_Company;  \n", "match": {"match": false, "error": "Query execution failed with error: no such column: Year_Founded"}}
{"result": "SELECT DISTINCT RecordCompany\r\nFROM orchestra\r\nWHERE Year_Founded < 2003\r\nUNION\r\nSELECT DISTINCT RecordCompany\r\nFROM orchestra\r\nWHERE Year_Founded >= 2003;", "match": {"match": false, "error": "Query execution failed with error: no such column: RecordCompany"}}
{"result": "SELECT COUNT(DISTINCT Orchestra_ID) \nFROM orchestra \nWHERE Major_Record_Format IN ('CD', 'DVD'); \n", "match": {"match": true, "result": [[11]]}}
{"result": "SELECT COUNT(DISTINCT Orchestra_ID)\nFROM orchestra\nWHERE Major_Record_Format IN ('CD', 'DVD'); \n", "match": {"match": true, "result": [[11]]}}
{"result": "```sql\nSELECT DISTINCT YEAR(o.Year_of_Founded)\nFROM orchestra o\nJOIN performance p ON o.Orchestra_ID = p.Orchestra_ID\nGROUP BY YEAR(o.Year_of_Founded)\nHAVING COUNT(DISTINCT p.Performance_ID) > 1;\n```", "match": {"match": false, "error": "Query execution failed with error: no such function: YEAR"}}
{"result": "SELECT  o.Year_of_Founded\r\nFROM orchestra o\r\nWHERE o.Orchestra_ID IN (SELECT DISTINCT Orchestra_ID FROM performance );\r\n\r\n", "match": {"match": false, "result": [[2003.0], [2009.0], [2008.0], [2002.0], [2002.0], [2004.0], [2002.0], [2003.0], [2008.0], [2006.0], [2007.0]], "gt": [], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) FROM Highschooler;\n", "match": {"match": true, "result": [[16]]}}
{"result": "```sql\nSELECT COUNT(*) FROM Highschooler;\n```", "match": {"match": true, "result": [[16]]}}
{"result": "SELECT name, grade FROM Highschooler;", "match": {"match": true, "result": [["Jordan", 9], ["Gabriel", 9], ["Tiffany", 9], ["Cassandra", 9], ["Haley", 10], ["Andrew", 10], ["Kris", 10], ["Brittany", 10], ["Alexis", 11], ["Austin", 11], ["Gabriel", 11], ["Jessica", 11], ["Jordan", 12], ["John", 12], ["Kyle", 12], ["Logan", 12]]}}
{"result": "SELECT name, grade FROM Highschooler;\n", "match": {"match": true, "result": [["Jordan", 9], ["Gabriel", 9], ["Tiffany", 9], ["Cassandra", 9], ["Haley", 10], ["Andrew", 10], ["Kris", 10], ["Brittany", 10], ["Alexis", 11], ["Austin", 11], ["Gabriel", 11], ["Jessica", 11], ["Jordan", 12], ["John", 12], ["Kyle", 12], ["Logan", 12]]}}
{"result": "SELECT grade FROM Highschooler;", "match": {"match": true, "result": [[9], [9], [9], [9], [10], [10], [10], [10], [11], [11], [11], [11], [12], [12], [12], [12]]}}
{"result": "SELECT \n    h.name,\n    h.grade\nFROM \n    Highschooler h;", "match": {"match": false, "result": [["Jordan", 9], ["Gabriel", 9], ["Tiffany", 9], ["Cassandra", 9], ["Haley", 10], ["Andrew", 10], ["Kris", 10], ["Brittany", 10], ["Alexis", 11], ["Austin", 11], ["Gabriel", 11], ["Jessica", 11], ["Jordan", 12], ["John", 12], ["Kyle", 12], ["Logan", 12]], "gt": [[9], [9], [9], [9], [10], [10], [10], [10], [11], [11], [11], [11], [12], [12], [12], [12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT grade \r\nFROM Highschooler \r\nWHERE name = 'Kyle';\n", "match": {"match": true, "result": [[12]]}}
{"result": "```sql\nSELECT grade\r\nFROM Highschooler\r\nWHERE name = 'Kyle';\n```", "match": {"match": true, "result": [[12]]}}
{"result": "```sql\nSELECT name\nFROM Highschooler\nWHERE grade = 10;\n```", "match": {"match": true, "result": [["Haley"], ["Andrew"], ["Kris"], ["Brittany"]]}}
{"result": "```sql\nSELECT name\nFROM Highschooler\nWHERE grade = 10;\n```", "match": {"match": true, "result": [["Haley"], ["Andrew"], ["Kris"], ["Brittany"]]}}
{"result": "```sql\nSELECT ID\nFROM Highschooler\nWHERE name = 'Kyle';\n```", "match": {"match": true, "result": [[1934]]}}
{"result": "SELECT ID FROM Highschooler WHERE name = 'Kyle';  \n", "match": {"match": true, "result": [[1934]]}}
{"result": "```sql\nSELECT COUNT(*)\nFROM Highschooler\nWHERE grade IN (9, 10);\n```", "match": {"match": true, "result": [[8]]}}
{"result": "```sql\nSELECT COUNT(*) \nFROM Highschooler\nWHERE grade IN (9, 10);\n```", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT grade, COUNT(*)\nFROM Highschooler\nGROUP BY grade;  \n", "match": {"match": true, "result": [[9, 4], [10, 4], [11, 4], [12, 4]]}}
{"result": "SELECT grade, COUNT(*) AS num_students\nFROM Highschooler\nGROUP BY grade;  \n", "match": {"match": true, "result": [[9, 4], [10, 4], [11, 4], [12, 4]]}}
{"result": "select grade, count(*) as num_highschoolers\nfrom Highschooler\ngroup by grade\norder by num_highschoolers desc\nlimit 1;\n", "match": {"match": false, "result": [[12, 4]], "gt": [[12]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT grade, COUNT(*) AS num_students\nFROM Highschooler\nGROUP BY grade\nORDER BY num_students DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [[12, 4]], "gt": [[12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT grade \r\nFROM Highschooler\r\nGROUP BY grade \r\nHAVING COUNT(ID) >= 4; \n", "match": {"match": true, "result": [[9], [10], [11], [12]]}}
{"result": "SELECT grade \nFROM Highschooler \nGROUP BY grade \nHAVING COUNT(*) >= 4;", "match": {"match": true, "result": [[9], [10], [11], [12]]}}
{"result": "```sql\nSELECT student_id, COUNT(*) as num_friends\nFROM Friend\nGROUP BY student_id;\n```", "match": {"match": true, "result": [[1101, 1], [1247, 2], [1304, 1], [1316, 1], [1381, 1], [1468, 2], [1501, 1], [1510, 2], [1661, 1], [1689, 2], [1709, 1], [1782, 3], [1911, 1], [1934, 1]]}}
{"result": "SELECT \n  h.ID, \n  COUNT(f.student_id) AS num_friends\nFROM \n  Highschooler h\nLEFT JOIN \n  Friend f ON h.ID = f.student_id\nGROUP BY \n  h.ID; \n", "match": {"match": false, "result": [[1025, 0], [1101, 1], [1247, 2], [1304, 1], [1316, 1], [1381, 1], [1468, 2], [1501, 1], [1510, 2], [1641, 0], [1661, 1], [1689, 2], [1709, 1], [1782, 3], [1911, 1], [1934, 1]], "gt": [[1101, 1], [1247, 2], [1304, 1], [1316, 1], [1381, 1], [1468, 2], [1501, 1], [1510, 2], [1661, 1], [1689, 2], [1709, 1], [1782, 3], [1911, 1], [1934, 1]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT h.name, COUNT(f.student_id) AS num_friends\nFROM Highschooler h\nLEFT JOIN Friend f ON h.ID = f.student_id\nGROUP BY h.name;\n```", "match": {"match": false, "result": [["Alexis", 2], ["Andrew", 3], ["Austin", 1], ["Brittany", 0], ["Cassandra", 1], ["Gabriel", 3], ["Haley", 1], ["Jessica", 1], ["John", 0], ["Jordan", 3], ["Kris", 2], ["Kyle", 1], ["Logan", 1], ["Tiffany", 1]], "gt": [["Haley", 1], ["Alexis", 2], ["Jordan", 1], ["Austin", 1], ["Tiffany", 1], ["Kris", 2], ["Jessica", 1], ["Jordan", 2], ["Logan", 1], ["Gabriel", 2], ["Cassandra", 1], ["Andrew", 3], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT h.name, COUNT(f.student_id) AS num_friends\nFROM Highschooler h\nLEFT JOIN Friend f ON h.ID = f.student_id\nGROUP BY h.name;\n```", "match": {"match": false, "result": [["Alexis", 2], ["Andrew", 3], ["Austin", 1], ["Brittany", 0], ["Cassandra", 1], ["Gabriel", 3], ["Haley", 1], ["Jessica", 1], ["John", 0], ["Jordan", 3], ["Kris", 2], ["Kyle", 1], ["Logan", 1], ["Tiffany", 1]], "gt": [["Haley", 1], ["Alexis", 2], ["Jordan", 1], ["Austin", 1], ["Tiffany", 1], ["Kris", 2], ["Jessica", 1], ["Jordan", 2], ["Logan", 1], ["Gabriel", 2], ["Cassandra", 1], ["Andrew", 3], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name \nFROM Highschooler hs\nORDER BY (SELECT COUNT(*) FROM Friend WHERE Friend.student_id = hs.ID) DESC\nLIMIT 1; \n", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "```sql\nSELECT name\nFROM Highschooler\nORDER BY (SELECT COUNT(*) FROM Friend WHERE Highschooler.ID = Friend.friend_id) DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [["Brittany"]], "gt": [["Andrew"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT h.name\nFROM Highschooler h\nJOIN Friend f ON h.ID = f.student_id\nGROUP BY h.name\nHAVING COUNT(DISTINCT f.friend_id) >= 3; \n", "match": {"match": false, "result": [["Andrew"], ["Gabriel"], ["Jordan"]], "gt": [["Andrew"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT h.name\nFROM Highschooler h\nJOIN Friend f ON h.ID = f.student_id\nGROUP BY h.ID\nHAVING COUNT(DISTINCT f.friend_id) >= 3; \n", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "SELECT h.name\nFROM Highschooler h\nJOIN Friend f ON h.ID = f.friend_id\nWHERE f.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');", "match": {"match": true, "result": [["Jordan"]]}}
{"result": "```sql\nSELECT \n    h2.name\nFROM \n    Highschooler h1\nJOIN \n    Friend f ON h1.ID = f.student_id\nJOIN \n    Highschooler h2 ON f.friend_id = h2.ID\nWHERE \n    h1.name = 'Kyle';\n```", "match": {"match": true, "result": [["Jordan"]]}}
{"result": "SELECT COUNT(*)\nFROM Friend\nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(*) \nFROM Friend \nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');", "match": {"match": true, "result": [[1]]}}
{"result": "```sql\nSELECT student_id\nFROM Highschooler\nEXCEPT\nSELECT DISTINCT student_id\nFROM Friend;\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: student_id"}}
{"result": "SELECT DISTINCT t1.ID\r\nFROM Highschooler t1\r\nLEFT JOIN Friend t2 ON t1.ID = t2.student_id\r\nWHERE t2.student_id IS NULL;", "match": {"match": true, "result": [[1025], [1641]]}}
{"result": "SELECT name\nFROM Highschooler\nWHERE ID NOT IN (SELECT student_id FROM Friend);", "match": {"match": true, "result": [["Brittany"], ["John"]]}}
{"result": "SELECT name\nFROM Highschooler\nWHERE ID NOT IN (SELECT student_id\n                  FROM Friend);", "match": {"match": true, "result": [["Brittany"], ["John"]]}}
{"result": "```sql\nSELECT DISTINCT t1.student_id\nFROM Highschooler t1\nJOIN Friend t2 ON t1.ID = t2.student_id\nJOIN Likes t3 ON t1.ID = t3.liked_id;\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: t1.student_id"}}
{"result": "```sql\nSELECT DISTINCT t1.student_id\nFROM Highschooler t1\nJOIN Friend t2 ON t1.ID = t2.student_id\nJOIN Likes t3 ON t1.ID = t3.student_id;\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: t1.student_id"}}
{"result": "```sql\nSELECT h.name\nFROM Highschooler h\nJOIN Friend f ON h.ID = f.student_id\nJOIN Likes l ON h.ID = l.liked_id\nGROUP BY h.name\nHAVING COUNT(f.student_id) > 0 AND COUNT(l.liked_id) > 0;\n```", "match": {"match": true, "result": [["Alexis"], ["Cassandra"], ["Gabriel"], ["Haley"], ["Jessica"], ["Jordan"], ["Kris"], ["Kyle"]]}}
{"result": "```sql\nSELECT h.name\nFROM Highschooler h\nJOIN Friend f ON h.ID = f.student_id\nJOIN Likes l ON h.ID = l.student_id;\n```", "match": {"match": false, "result": [["Gabriel"], ["Cassandra"], ["Gabriel"], ["Andrew"], ["Andrew"], ["Andrew"], ["Alexis"], ["Alexis"], ["Gabriel"], ["Jessica"], ["Austin"], ["Kyle"]], "gt": [["Alexis"], ["Cassandra"], ["Gabriel"], ["Haley"], ["Jessica"], ["Jordan"], ["Kris"], ["Kyle"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT student_id, COUNT(*) AS likes_count\nFROM Likes\nGROUP BY student_id;\n```", "match": {"match": true, "result": [[1025, 1], [1247, 1], [1316, 1], [1501, 1], [1641, 1], [1689, 1], [1709, 1], [1782, 1], [1911, 1], [1934, 1]]}}
{"result": "```sql\nSELECT student_id, COUNT(*) AS num_likes\nFROM Likes\nGROUP BY student_id;\n```", "match": {"match": true, "result": [[1025, 1], [1247, 1], [1316, 1], [1501, 1], [1641, 1], [1689, 1], [1709, 1], [1782, 1], [1911, 1], [1934, 1]]}}
{"result": "```sql\nSELECT h.name, COUNT(l.liked_id) AS num_likes\nFROM Highschooler h\nLEFT JOIN Likes l ON h.ID = l.student_id\nGROUP BY h.name;\n```", "match": {"match": false, "result": [["Alexis", 1], ["Andrew", 1], ["Austin", 1], ["Brittany", 1], ["Cassandra", 1], ["Gabriel", 2], ["Haley", 0], ["Jessica", 1], ["John", 1], ["Jordan", 0], ["Kris", 0], ["Kyle", 1], ["Logan", 0], ["Tiffany", 0]], "gt": [["John", 1], ["Alexis", 1], ["Austin", 1], ["Jessica", 1], ["Brittany", 1], ["Gabriel", 1], ["Cassandra", 1], ["Andrew", 1], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    h.name, \n    COUNT(l.liked_id) AS num_likes\nFROM \n    Highschooler h\nJOIN \n    Likes l ON h.ID = l.student_id\nGROUP BY \n    h.name; \n", "match": {"match": false, "result": [["Alexis", 1], ["Andrew", 1], ["Austin", 1], ["Brittany", 1], ["Cassandra", 1], ["Gabriel", 2], ["Jessica", 1], ["John", 1], ["Kyle", 1]], "gt": [["John", 1], ["Alexis", 1], ["Austin", 1], ["Jessica", 1], ["Brittany", 1], ["Gabriel", 1], ["Cassandra", 1], ["Andrew", 1], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT name \nFROM Highschooler\nORDER BY (SELECT COUNT(*) FROM Likes WHERE Highschooler.ID = Likes.liked_id) DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [["Cassandra"]], "gt": [["John"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT name\nFROM Highschooler\nORDER BY (SELECT COUNT(*) FROM Likes WHERE Highschooler.ID = Likes.liked_id) DESC\nLIMIT 1; \n```", "match": {"match": false, "result": [["Cassandra"]], "gt": [["John"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT name\nFROM Highschooler\nWHERE ID IN (\n    SELECT student_id\n    FROM Likes\n    GROUP BY student_id\n    HAVING COUNT(*) >= 2\n);\n```", "match": {"match": true, "result": []}}
{"result": "SELECT h.name\nFROM Highschooler h\nJOIN Likes l ON h.ID = l.student_id\nGROUP BY h.name\nHAVING COUNT(l.liked_id) >= 2; \n", "match": {"match": false, "result": [["Gabriel"]], "gt": [], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT h.name\nFROM Highschooler h\nJOIN Friend f ON h.ID = f.student_id\nGROUP BY h.ID, h.name\nHAVING COUNT(DISTINCT f.friend_id) >= 2\nAND h.grade > 5;\n```\n", "match": {"match": true, "result": [["Alexis"], ["Kris"], ["Jordan"], ["Gabriel"], ["Andrew"]]}}
{"result": "SELECT h.name\nFROM Highschooler h\nJOIN Friend f ON h.ID = f.student_id\nGROUP BY h.ID, h.name\nHAVING COUNT(f.friend_id) >= 2\nAND h.grade > 5;", "match": {"match": true, "result": [["Alexis"], ["Kris"], ["Jordan"], ["Gabriel"], ["Andrew"]]}}
{"result": "SELECT COUNT(*) \nFROM Likes \nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(*) \nFROM Likes \nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');", "match": {"match": true, "result": [[1]]}}
{"result": "```sql\nSELECT AVG(h.grade)\nFROM Highschooler h\nJOIN Friend f ON h.ID = f.student_id\nGROUP BY h.ID;\n```", "match": {"match": false, "result": [[10.0], [11.0], [12.0], [11.0], [9.0], [10.0], [11.0], [9.0], [12.0], [9.0], [9.0], [10.0], [11.0], [12.0]], "gt": [[10.428571428571429]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT AVG(h.grade)\nFROM Highschooler h\nJOIN Friend f ON h.ID = f.student_id\nGROUP BY h.ID;\n```\n", "match": {"match": false, "result": [[10.0], [11.0], [12.0], [11.0], [9.0], [10.0], [11.0], [9.0], [12.0], [9.0], [9.0], [10.0], [11.0], [12.0]], "gt": [[10.428571428571429]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT MIN(h.grade)\nFROM Highschooler h\nLEFT JOIN Friend f ON h.ID = f.student_id\nWHERE f.student_id IS NULL;\n```", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT MIN(h.grade)\nFROM Highschooler h\nLEFT JOIN Friend f ON h.ID = f.student_id\nWHERE f.student_id IS NULL;", "match": {"match": true, "result": [[10]]}}
{"result": "```sql\nSELECT DISTINCT o.state\nFROM Owners o\nJOIN Professionals p ON o.state = p.state;\n```", "match": {"match": false, "result": [["Wisconsin"], ["Indiana"], ["Mississippi"]], "gt": [["Indiana"], ["Mississippi"], ["Wisconsin"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT o.state\nFROM Owners o\nJOIN Professionals p ON o.state = p.state;", "match": {"match": false, "result": [["Wisconsin"], ["Indiana"], ["Mississippi"]], "gt": [["Indiana"], ["Mississippi"], ["Wisconsin"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT AVG(d.age)\nFROM Dogs d\nJOIN Treatments t ON d.dog_id = t.dog_id;\n```", "match": {"match": false, "result": [[5.466666666666667]], "gt": [[5.111111111111111]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT AVG(D.age)\nFROM Dogs D\nJOIN Treatments T ON D.dog_id = T.dog_id;\n```", "match": {"match": false, "result": [[5.466666666666667]], "gt": [[5.111111111111111]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT p.professional_id, p.last_name, p.cell_number\nFROM Professionals p\nWHERE p.state = 'Indiana'\nOR EXISTS (SELECT 1\n           FROM Treatments t\n           WHERE t.professional_id = p.professional_id\n           GROUP BY t.professional_id\n           HAVING COUNT(*) > 2);\n```", "match": {"match": true, "result": [[1, "Braun", "(275)939-2435x80863"], [8, "Hyatt", "328.842.3792"], [9, "Kshlerin", "962-983-8109x3509"]]}}
{"result": "SELECT p.professional_id, p.last_name, p.cell_number\nFROM Professionals p\nWHERE p.state = 'Indiana'\nUNION\nSELECT p.professional_id, p.last_name, p.cell_number\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nGROUP BY p.professional_id, p.last_name, p.cell_number\nHAVING COUNT(t.treatment_id) > 2;  \n\n\n\n", "match": {"match": true, "result": [[1, "Braun", "(275)939-2435x80863"], [8, "Hyatt", "328.842.3792"], [9, "Kshlerin", "962-983-8109x3509"]]}}
{"result": "SELECT d.name \r\nFROM Dogs d\r\nJOIN Treatments t ON d.dog_id = t.dog_id\r\nWHERE t.cost_of_treatment <= 1000;", "match": {"match": false, "result": [["Lyric"], ["Houston"], ["Lyric"], ["Hipolito"], ["Holden"], ["Troy"], ["Evangeline"], ["Hipolito"], ["Lyric"], ["Troy"], ["Evangeline"], ["Jesus"], ["Narciso"], ["Troy"], ["Kacey"]], "gt": [["Kacey"], ["Hipolito"], ["Mavis"], ["Houston"], ["Jeffrey"], ["Merritt"], ["Narciso"], ["George"], ["Bessie"], ["Betty"], ["Holden"], ["Jesus"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT d.name\r\nFROM Dogs d\r\nJOIN Treatments t ON d.dog_id = t.dog_id\r\nWHERE t.cost_of_treatment <= 1000; \n", "match": {"match": false, "result": [["Lyric"], ["Houston"], ["Lyric"], ["Hipolito"], ["Holden"], ["Troy"], ["Evangeline"], ["Hipolito"], ["Lyric"], ["Troy"], ["Evangeline"], ["Jesus"], ["Narciso"], ["Troy"], ["Kacey"]], "gt": [["Kacey"], ["Hipolito"], ["Mavis"], ["Houston"], ["Jeffrey"], ["Merritt"], ["Narciso"], ["George"], ["Bessie"], ["Betty"], ["Holden"], ["Jesus"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT first_name \r\nFROM Owners\r\nUNION\r\nSELECT DISTINCT first_name\r\nFROM Professionals\r\nEXCEPT\r\nSELECT DISTINCT first_name\r\nFROM Dogs;", "match": {"match": false, "error": "Query execution failed with error: no such column: first_name"}}
{"result": "SELECT distinct f.first_name\r\nFROM Professionals AS p\r\nJOIN Owners AS o ON p.first_name = o.first_name\r\nWHERE p.first_name NOT IN (SELECT name\r\n                         FROM Dogs\r\n                         );", "match": {"match": false, "error": "Query execution failed with error: no such column: f.first_name"}}
{"result": "SELECT p.professional_id, p.role, p.email_address\nFROM Professionals p\nLEFT JOIN Treatments t ON p.professional_id = t.professional_id\nWHERE t.professional_id IS NULL;", "match": {"match": false, "error": "Query execution failed with error: no such column: p.role"}}
{"result": "```sql\nSELECT professional_id, role, email_address\nFROM Professionals\nWHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments);\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: role"}}
{"result": "SELECT  o.owner_id, o.first_name, o.last_name\r\nFROM Owners o\r\nJOIN Dogs d ON o.owner_id = d.owner_id\r\nGROUP BY o.owner_id, o.first_name, o.last_name\r\nORDER BY COUNT(d.dog_id) DESC;\n", "match": {"match": false, "result": [[14, "Rachelle", "Funk"], [3, "Jaclyn", "Stoltenberg"], [1, "Nora", "Haley"], [2, "Melisa", "DuBuque"], [5, "Johann", "Fisher"], [6, "Kade", "Rippin"], [7, "Emelie", "Mertz"], [8, "Rolando", "Prohaska"], [10, "Lorenz", "Nicolas"], [11, "Gay", "Feil"], [12, "Orlando", "Price"], [13, "Cindy", "Schmitt"]], "gt": [[14, "Rachelle", "Funk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT `owner_id`, `first_name`, `last_name`\nFROM `Owners`\nORDER BY COUNT(*) DESC\nLIMIT 1; \n", "match": {"match": false, "error": "Query execution failed with error: misuse of aggregate: COUNT()"}}
{"result": "SELECT p.professional_id, p.role, p.first_name\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nGROUP BY p.professional_id, p.role, p.first_name\nHAVING COUNT(t.treatment_id) >= 2; \n", "match": {"match": false, "error": "Query execution failed with error: no such column: p.role"}}
{"result": "```sql\nSELECT professional.professional_id, professional.role, professional.first_name\nFROM professional\nJOIN Treatments ON professional.professional_id = Treatments.professional_id\nGROUP BY professional.professional_id, professional.role, professional.first_name\nHAVING COUNT(Treatments.treatment_id) >= 2;\n```", "match": {"match": false, "error": "Query execution failed with error: no such table: professional"}}
{"result": "```sql\nSELECT b.breedname\nFROM Breeds b\nJOIN Dogs d ON b.breedcode = d.breedcode\nGROUP BY b.breedname\nORDER BY COUNT(d.dog_id) DESC\nLIMIT 1;\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: b.breedname"}}
{"result": "SELECT breedname \nFROM Breeds\nJOIN Dogs ON Breeds.breed_code = Dogs.breed_code\nGROUP BY breedname\nORDER BY COUNT(Dogs.dog_id) DESC\nLIMIT 1; \n", "match": {"match": false, "error": "Query execution failed with error: no such column: breedname"}}
{"result": "SELECT o.owner_id, o.last_name\nFROM Owners o\nJOIN Treatments t ON o.owner_id = t.dog_id\nGROUP BY o.owner_id, o.last_name\nORDER BY SUM(t.cost_of_treatment) DESC\nLIMIT 1; \n", "match": {"match": false, "result": [[15, "Hauck"]], "gt": [[14, "Funk"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT o.owner_id, o.last_name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nJOIN Treatments t ON d.dog_id = t.dog_id\nGROUP BY o.owner_id, o.last_name\nORDER BY SUM(t.cost_of_treatment) DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [[3, "Stoltenberg"]], "gt": [[14, "Funk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT TreatmentTypes.treatment_type_description\nFROM TreatmentTypes\nJOIN Treatments ON TreatmentTypes.treatment_type_code = Treatments.treatment_type_code\nGROUP BY TreatmentTypes.treatment_type_description\nORDER BY SUM(Treatments.cost_of_treatment) ASC\nLIMIT 1;", "match": {"match": false, "error": "Query execution failed with error: no such table: TreatmentTypes"}}
{"result": "SELECT treatment_type_description\nFROM Treatment_Types\nWHERE treatment_type_code IN (\n    SELECT treatment_type_code\n    FROM Treatments\n    GROUP BY treatment_type_code\n    ORDER BY cost_of_treatment ASC\n    LIMIT 1\n);", "match": {"match": false, "result": [["Vaccination"]], "gt": [["Take for a Walk"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT o.owner_id, o.zip_code\nFROM Owners o\nJOIN Treatments t ON o.owner_id = t.dog_id\nGROUP BY o.owner_id, o.zip_code\nORDER BY SUM(t.cost_of_treatment) DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [[15, "22693"]], "gt": [[3, "02647"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT o.owner_id, o.zip_code\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nJOIN Treatments t ON d.dog_id = t.dog_id\nGROUP BY o.owner_id, o.zip_code\nORDER BY SUM(t.cost_of_treatment) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [[3, "02647"]]}}
{"result": "SELECT p.professional_id, p.cell_number \nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nGROUP BY p.professional_id, p.cell_number\nHAVING COUNT(DISTINCT t.treatment_type) >= 2; \n", "match": {"match": false, "error": "Query execution failed with error: no such column: t.treatment_type"}}
{"result": "SELECT Professionals.professional_id, Professionals.cell_number\nFROM Professionals\nJOIN Treatments ON Professionals.professional_id = Treatments.professional_id\nGROUP BY Professionals.professional_id, Professionals.cell_number\nHAVING COUNT(DISTINCT Treatments.treatment_type_code) >= 2;", "match": {"match": false, "result": [[6, "139-321-7313"], [9, "962-983-8109x3509"], [10, "461-801-2600"], [14, "1-185-137-1945x409"]], "gt": [[4, "00230569697"], [6, "139-321-7313"], [8, "328.842.3792"], [9, "962-983-8109x3509"], [10, "461-801-2600"], [14, "1-185-137-1945x409"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT p.first_name, p.last_name \r\nFROM Professionals p\r\nJOIN Treatments t ON p.professional_id = t.professional_id\r\nWHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);", "match": {"match": false, "result": [["Domenica", "Jacobs"], ["Vernice", "Tillman"], ["Karley", "Hyatt"], ["Vernice", "Tillman"], ["Ruben", "O'Reilly"], ["Domenica", "Jacobs"], ["Monte", "Kshlerin"], ["Monte", "Kshlerin"]], "gt": [["Taryn", "Braun"], ["Jayson", "Ullrich"], ["Olaf", "Watsica"], ["Vernice", "Tillman"], ["Danny", "Considine"], ["Ruben", "O'Reilly"], ["Velva", "Hayes"], ["Karley", "Hyatt"], ["Monte", "Kshlerin"], ["Domenica", "Jacobs"], ["Brady", "Pouros"], ["Winfield", "Christiansen"], ["Ericka", "Murazik"], ["Sigurd", "Frami"], ["Lesly", "Walter"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    p.first_name,\n    p.last_name\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nWHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);", "match": {"match": false, "result": [["Domenica", "Jacobs"], ["Vernice", "Tillman"], ["Karley", "Hyatt"], ["Vernice", "Tillman"], ["Ruben", "O'Reilly"], ["Domenica", "Jacobs"], ["Monte", "Kshlerin"], ["Monte", "Kshlerin"]], "gt": [["Taryn", "Braun"], ["Jayson", "Ullrich"], ["Olaf", "Watsica"], ["Vernice", "Tillman"], ["Danny", "Considine"], ["Ruben", "O'Reilly"], ["Velva", "Hayes"], ["Karley", "Hyatt"], ["Monte", "Kshlerin"], ["Domenica", "Jacobs"], ["Brady", "Pouros"], ["Winfield", "Christiansen"], ["Ericka", "Murazik"], ["Sigurd", "Frami"], ["Lesly", "Walter"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT t.date_of_treatment, p.first_name\nFROM Treatments t\nJOIN Professionals p ON t.professional_id = p.professional_id; \n", "match": {"match": true, "result": [["2018-03-19 04:39:54", "Monte"], ["2018-03-15 20:25:34", "Domenica"], ["2018-03-08 05:26:23", "Vernice"], ["2018-03-01 04:14:46", "Karley"], ["2018-03-23 13:52:10", "Sigurd"], ["2018-03-11 04:23:15", "Vernice"], ["2018-03-10 11:45:58", "Sigurd"], ["2018-03-24 22:25:58", "Ruben"], ["2018-03-14 19:10:40", "Domenica"], ["2018-02-28 17:09:43", "Velva"], ["2018-03-13 12:22:58", "Danny"], ["2018-03-16 10:27:36", "Monte"], ["2018-02-26 09:08:53", "Karley"], ["2018-03-04 20:33:43", "Monte"], ["2018-03-15 19:10:02", "Ruben"]]}}
{"result": "SELECT \nTreatments.dateoftreatment, \nProfessionals.first_name\nFROM Treatments\nJOIN Professionals ON Treatments.professionalid = Professionals.professionalid; \n", "match": {"match": false, "error": "Query execution failed with error: no such column: Treatments.dateoftreatment"}}
{"result": "SELECT T.cost_of_treatment, TT.treatment_type_description\nFROM Treatments T\nJOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code;", "match": {"match": true, "result": [[567, "Take for a Walk"], [147, "Vaccination"], [429, "Physical examination"], [266, "Vaccination"], [668, "Vaccination"], [313, "Physical examination"], [852, "Physical examination"], [407, "Physical examination"], [139, "Take for a Walk"], [681, "Take for a Walk"], [514, "Vaccination"], [428, "Physical examination"], [945, "Vaccination"], [349, "Take for a Walk"], [656, "Take for a Walk"]]}}
{"result": "```sql\nSELECT t.cost_of_treatment, tt.treatment_type_description\nFROM Treatments t\nJOIN TreatmentTypes tt ON t.treatment_type_code = tt.treatment_type_code;\n```", "match": {"match": false, "error": "Query execution failed with error: no such table: TreatmentTypes"}}
{"result": "SELECT \n    o.first_name, \n    o.last_name, \n    s.size_description\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nJOIN Sizes s ON d.size_code = s.size_code;", "match": {"match": false, "result": [["Jaclyn", "Stoltenberg", "Large"], ["Gay", "Feil", "Large"], ["Nora", "Haley", "Medium"], ["Rachelle", "Funk", "Large"], ["Emelie", "Mertz", "Medium"], ["Johann", "Fisher", "Medium"], ["Jaclyn", "Stoltenberg", "Medium"], ["Rachelle", "Funk", "Small"], ["Melisa", "DuBuque", "Medium"], ["Kade", "Rippin", "Medium"], ["Cindy", "Schmitt", "Large"], ["Orlando", "Price", "Medium"], ["Rolando", "Prohaska", "Small"], ["Rachelle", "Funk", "Medium"], ["Lorenz", "Nicolas", "Medium"]], "gt": [["Jaclyn", "Stoltenberg", "LGE"], ["Gay", "Feil", "LGE"], ["Nora", "Haley", "MED"], ["Rachelle", "Funk", "LGE"], ["Emelie", "Mertz", "MED"], ["Johann", "Fisher", "MED"], ["Jaclyn", "Stoltenberg", "MED"], ["Rachelle", "Funk", "SML"], ["Melisa", "DuBuque", "MED"], ["Kade", "Rippin", "MED"], ["Cindy", "Schmitt", "LGE"], ["Orlando", "Price", "MED"], ["Rolando", "Prohaska", "SML"], ["Rachelle", "Funk", "MED"], ["Lorenz", "Nicolas", "MED"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \no.first_name, \no.last_name, \ns.size_description\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nJOIN Sizes s ON d.size_code = s.size_code; \n", "match": {"match": false, "result": [["Jaclyn", "Stoltenberg", "Large"], ["Gay", "Feil", "Large"], ["Nora", "Haley", "Medium"], ["Rachelle", "Funk", "Large"], ["Emelie", "Mertz", "Medium"], ["Johann", "Fisher", "Medium"], ["Jaclyn", "Stoltenberg", "Medium"], ["Rachelle", "Funk", "Small"], ["Melisa", "DuBuque", "Medium"], ["Kade", "Rippin", "Medium"], ["Cindy", "Schmitt", "Large"], ["Orlando", "Price", "Medium"], ["Rolando", "Prohaska", "Small"], ["Rachelle", "Funk", "Medium"], ["Lorenz", "Nicolas", "Medium"]], "gt": [["Jaclyn", "Stoltenberg", "LGE"], ["Gay", "Feil", "LGE"], ["Nora", "Haley", "MED"], ["Rachelle", "Funk", "LGE"], ["Emelie", "Mertz", "MED"], ["Johann", "Fisher", "MED"], ["Jaclyn", "Stoltenberg", "MED"], ["Rachelle", "Funk", "SML"], ["Melisa", "DuBuque", "MED"], ["Kade", "Rippin", "MED"], ["Cindy", "Schmitt", "LGE"], ["Orlando", "Price", "MED"], ["Rolando", "Prohaska", "SML"], ["Rachelle", "Funk", "MED"], ["Lorenz", "Nicolas", "MED"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Owners.first_name, Dogs.name \nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id; \n", "match": {"match": true, "result": [["Jaclyn", "Kacey"], ["Gay", "Hipolito"], ["Nora", "Mavis"], ["Rachelle", "Houston"], ["Emelie", "Jeffrey"], ["Johann", "Merritt"], ["Jaclyn", "Narciso"], ["Rachelle", "George"], ["Melisa", "Bessie"], ["Kade", "Troy"], ["Cindy", "Betty"], ["Orlando", "Holden"], ["Rolando", "Jesus"], ["Rachelle", "Lyric"], ["Lorenz", "Evangeline"]]}}
{"result": "SELECT O.first_name, D.name\nFROM Owners O\nJOIN Dogs D ON O.owner_id = D.owner_id; \n\n\n", "match": {"match": true, "result": [["Jaclyn", "Kacey"], ["Gay", "Hipolito"], ["Nora", "Mavis"], ["Rachelle", "Houston"], ["Emelie", "Jeffrey"], ["Johann", "Merritt"], ["Jaclyn", "Narciso"], ["Rachelle", "George"], ["Melisa", "Bessie"], ["Kade", "Troy"], ["Cindy", "Betty"], ["Orlando", "Holden"], ["Rolando", "Jesus"], ["Rachelle", "Lyric"], ["Lorenz", "Evangeline"]]}}
{"result": "SELECT D.name, T.date_of_treatment\r\nFROM Dogs D\r\nJOIN Treatments T ON D.dog_id = T.dog_id\r\nJOIN Breeds B ON D.breed_code = B.breed_code\r\nORDER BY B.breed_name, D.name\r\nLIMIT 1;", "match": {"match": false, "result": [["Evangeline", "2018-03-10 11:45:58"]], "gt": [["Lyric", "2018-03-19 04:39:54"], ["Houston", "2018-03-15 20:25:34"], ["Lyric", "2018-03-08 05:26:23"], ["Lyric", "2018-03-14 19:10:40"], ["Kacey", "2018-03-15 19:10:02"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT d.name, t.date_of_treatment\nFROM Dogs d\nJOIN Treatments t ON d.dog_id = t.dog_id\nJOIN Breeds b ON d.breed_code = b.breed_code\nORDER BY b.breed_name DESC\nLIMIT 10;\n```", "match": {"match": false, "result": [["Holden", "2018-03-23 13:52:10"], ["Troy", "2018-03-11 04:23:15"], ["Troy", "2018-02-28 17:09:43"], ["Jesus", "2018-03-16 10:27:36"], ["Troy", "2018-03-04 20:33:43"], ["Lyric", "2018-03-19 04:39:54"], ["Houston", "2018-03-15 20:25:34"], ["Lyric", "2018-03-08 05:26:23"], ["Lyric", "2018-03-14 19:10:40"], ["Kacey", "2018-03-15 19:10:02"]], "gt": [["Lyric", "2018-03-19 04:39:54"], ["Houston", "2018-03-15 20:25:34"], ["Lyric", "2018-03-08 05:26:23"], ["Lyric", "2018-03-14 19:10:40"], ["Kacey", "2018-03-15 19:10:02"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT o.first_name, d.name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nWHERE o.state = 'Virginia'; \n", "match": {"match": true, "result": [["Melisa", "Bessie"]]}}
{"result": "SELECT o.first_name, d.name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nWHERE o.state = 'Virginia';", "match": {"match": true, "result": [["Melisa", "Bessie"]]}}
{"result": "SELECT \n    Dogs.date_arrived,\n    Dogs.date_departed\nFROM Dogs\nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id;", "match": {"match": false, "result": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "gt": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT \n    d.date_arrived,\n    d.date_departed\nFROM Dogs d\nJOIN Treatments t ON d.dog_id = t.dog_id;", "match": {"match": false, "result": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "gt": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT last_name \nFROM Owners \nJOIN Dogs ON Owners.owner_id = Dogs.owner_id \nORDER BY Dogs.date_of_birth ASC\nLIMIT 1; \n", "match": {"match": false, "result": [["Haley"]], "gt": [["Feil"], ["Fisher"], ["Rippin"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT last_name\nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id\nWHERE Dogs.age = (SELECT MIN(age) FROM Dogs); \n```", "match": {"match": false, "result": [["Nicolas"]], "gt": [["Feil"], ["Fisher"], ["Rippin"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT email_address \nFROM Professionals\nWHERE state IN ('Hawaii', 'Wisconsin'); \n", "match": {"match": true, "result": [["uboehm@example.org"], ["mekhi.little@example.org"]]}}
{"result": "SELECT email_address\nFROM Professionals\nWHERE state IN ('HI', 'WI');", "match": {"match": false, "result": [], "gt": [["uboehm@example.org"], ["mekhi.little@example.org"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT `date_arrived`, `date_departed` \nFROM `Dogs`;", "match": {"match": true, "result": [["2017-09-08 20:10:13", "2018-03-25 06:58:44"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-25 10:14:05", "2018-03-25 10:25:46"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-10-25 00:55:34", "2018-03-25 04:50:22"], ["2017-04-15 09:25:31", "2018-03-25 13:07:04"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-10-16 20:06:21", "2018-03-25 02:47:40"], ["2018-01-17 11:44:16", "2018-03-25 06:46:07"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-07-25 15:19:07", "2018-03-25 15:05:16"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"]]}}
{"result": "SELECT date_arrived, date_departed FROM Dogs;", "match": {"match": true, "result": [["2017-09-08 20:10:13", "2018-03-25 06:58:44"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-25 10:14:05", "2018-03-25 10:25:46"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-10-25 00:55:34", "2018-03-25 04:50:22"], ["2017-04-15 09:25:31", "2018-03-25 13:07:04"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-10-16 20:06:21", "2018-03-25 02:47:40"], ["2018-01-17 11:44:16", "2018-03-25 06:46:07"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-07-25 15:19:07", "2018-03-25 15:05:16"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"]]}}
{"result": "SELECT COUNT(DISTINCT Dogs.dog_id) \nFROM Dogs\nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id; \n", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(DISTINCT d.dog_id)\nFROM Dogs d\nJOIN Treatments t ON d.dog_id = t.dog_id;", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(DISTINCT p.professional_id)\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id; \n", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT COUNT(DISTINCT t.professional_id) \nFROM Treatments t\nJOIN Dogs d ON t.dog_id = d.dog_id;", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT p.role, p.street, p.city, p.state\nFROM Professionals p\nWHERE p.city LIKE '%West%';", "match": {"match": false, "error": "Query execution failed with error: no such column: p.role"}}
{"result": "SELECT  p.role, p.street, p.city, p.state \nFROM Professionals p\nWHERE p.city LIKE '%West%'; \n", "match": {"match": false, "error": "Query execution failed with error: no such column: p.role"}}
{"result": "SELECT Owners.first_name, Owners.last_name, Owners.email_address\nFROM Owners\nWHERE Owners.state LIKE '%North%';", "match": {"match": true, "result": [["Johann", "Fisher", "zboncak.madonna@example.net"], ["Cindy", "Schmitt", "wpfeffer@example.net"]]}}
{"result": "SELECT Owners.first_name, Owners.last_name, Owners.email_address\nFROM Owners\nWHERE Owners.state LIKE '%North%'; \n", "match": {"match": true, "result": [["Johann", "Fisher", "zboncak.madonna@example.net"], ["Cindy", "Schmitt", "wpfeffer@example.net"]]}}
{"result": "```sql\nSELECT COUNT(*)\nFROM Dogs\nWHERE age < (SELECT AVG(age) FROM Dogs);\n```", "match": {"match": true, "result": [[9]]}}
{"result": "```sql\nSELECT COUNT(*)\nFROM Dogs\nWHERE age < (SELECT AVG(age) FROM Dogs);\n```", "match": {"match": true, "result": [[9]]}}
{"result": "```sql\nSELECT cost_of_treatment\nFROM Treatments\nORDER BY date_of_treatment DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [[407]]}}
{"result": "```sql\nSELECT cost_of_treatment \nFROM Treatments \nORDER BY date_of_treatment DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [[407]]}}
{"result": "```sql\nSELECT COUNT(*)\nFROM Dogs\nLEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id\nWHERE Treatments.dog_id IS NULL;\n```", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(*) \nFROM Dogs \nLEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id\nWHERE Treatments.dog_id IS NULL; \n", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(*)\nFROM Owners\nLEFT JOIN Dogs ON Owners.owner_id = Dogs.owner_id\nWHERE Dogs.owner_id IS NULL; \n", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(*)\nFROM Owners\nLEFT JOIN Dogs ON Owners.owner_id = Dogs.owner_id\nWHERE Dogs.owner_id IS NULL;", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(DISTINCT professional_id) \nFROM Professionals\nWHERE professional_id NOT IN (SELECT professional_id FROM Treatments);", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT COUNT(*)\nFROM Professionals\nWHERE professional_id NOT IN (SELECT professional_id FROM Treatments);", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT d.name, d.age, d.weight \r\nFROM Dogs d\r\nWHERE d.abandoned = '1'; \n", "match": {"match": false, "error": "Query execution failed with error: no such column: d.abandoned"}}
{"result": "SELECT d.name, d.age, d.weight\nFROM Dogs d\nWHERE d.abandoned = '1';", "match": {"match": false, "error": "Query execution failed with error: no such column: d.abandoned"}}
{"result": "SELECT AVG(age) FROM Dogs;", "match": {"match": true, "result": [[5.066666666666666]]}}
{"result": "```sql\nSELECT AVG(age) FROM Dogs;\n```", "match": {"match": true, "result": [[5.066666666666666]]}}
{"result": "SELECT MAX(age) FROM Dogs; \n", "match": {"match": true, "result": [["9"]]}}
{"result": "```sql\nSELECT MAX(age) \nFROM Dogs;\n```", "match": {"match": true, "result": [["9"]]}}
{"result": "SELECT `charge_type`, SUM(`charge_amount`) AS `total_cost`\nFROM Charges\nGROUP BY `charge_type`;", "match": {"match": true, "result": [["Daily Accommodation", 98], ["Drugs", 322], ["Health Check", 640]]}}
{"result": "SELECT charge_type, charge_amount\nFROM Charges;", "match": {"match": true, "result": [["Daily Accommodation", 98], ["Drugs", 322], ["Health Check", 640]]}}
{"result": "SELECT MAX(charge_amount) FROM Charges;", "match": {"match": true, "result": [[640]]}}
{"result": "```sql\nSELECT MAX(charge_amount)\nFROM Charges;\n```", "match": {"match": true, "result": [[640]]}}
{"result": "SELECT email_address, cell_number, home_phone \nFROM Professionals;", "match": {"match": true, "result": [["deanna.schuster@example.com", "(275)939-2435x80863", "+71(6)2898266914"], ["lucile.shanahan@example.org", "889-940-2676", "+02(1)0259033559"], ["uboehm@example.org", "(369)908-7311x065", "325-155-0801x7005"], ["lourdes.lowe@example.net", "00230569697", "312.216.3352"], ["mekhi.little@example.org", "011.193.9081x3186", "1-609-566-2752x25197"], ["jacynthe.mclaughlin@example.net", "139-321-7313", "+43(5)1132733868"], ["lambert62@example.org", "499-434-0215x1628", "022.529.0550x1319"], ["goyette.roosevelt@example.net", "328.842.3792", "891.475.2256"], ["schneider.kathryne@example.org", "962-983-8109x3509", "320-508-6023"], ["jerrod.bahringer@example.org", "461-801-2600", "(230)338-3342x585"], ["west.eula@example.net", "609-405-2990", "(920)304-4499x59146"], ["marquardt.furman@example.org", "1-181-670-9466", "246-951-0080x76716"], ["delphine29@example.com", "880-659-7577x736", "346.594.3739"], ["cole.margarita@example.org", "1-185-137-1945x409", "971.048.3763x9404"], ["jeichmann@example.com", "1-258-285-4707x8020", "1-138-287-3775"]]}}
{"result": "```sql\nSELECT \n    email_address, \n    cell_number, \n    home_phone\nFROM \n    Professionals;\n```", "match": {"match": true, "result": [["deanna.schuster@example.com", "(275)939-2435x80863", "+71(6)2898266914"], ["lucile.shanahan@example.org", "889-940-2676", "+02(1)0259033559"], ["uboehm@example.org", "(369)908-7311x065", "325-155-0801x7005"], ["lourdes.lowe@example.net", "00230569697", "312.216.3352"], ["mekhi.little@example.org", "011.193.9081x3186", "1-609-566-2752x25197"], ["jacynthe.mclaughlin@example.net", "139-321-7313", "+43(5)1132733868"], ["lambert62@example.org", "499-434-0215x1628", "022.529.0550x1319"], ["goyette.roosevelt@example.net", "328.842.3792", "891.475.2256"], ["schneider.kathryne@example.org", "962-983-8109x3509", "320-508-6023"], ["jerrod.bahringer@example.org", "461-801-2600", "(230)338-3342x585"], ["west.eula@example.net", "609-405-2990", "(920)304-4499x59146"], ["marquardt.furman@example.org", "1-181-670-9466", "246-951-0080x76716"], ["delphine29@example.com", "880-659-7577x736", "346.594.3739"], ["cole.margarita@example.org", "1-185-137-1945x409", "971.048.3763x9404"], ["jeichmann@example.com", "1-258-285-4707x8020", "1-138-287-3775"]]}}
{"result": "SELECT b.breed_name, s.size_description\r\nFROM Breeds b\r\nJOIN Sizes s ON TRUE;", "match": {"match": false, "result": [["Eskimo", "Small"], ["Eskimo", "Medium"], ["Eskimo", "Large"], ["Husky", "Small"], ["Husky", "Medium"], ["Husky", "Large"], ["Bulldog", "Small"], ["Bulldog", "Medium"], ["Bulldog", "Large"]], "gt": [["ESK", "LGE"], ["BUL", "LGE"], ["BUL", "MED"], ["HUS", "MED"], ["ESK", "SML"], ["HUS", "SML"], ["ESK", "MED"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT  \n    b.breedname, \n    s.size_description\nFROM Breeds b\nJOIN Dogs d ON b.breed_code = d.breed_code\nJOIN Sizes s ON d.size_code = s.size_code;", "match": {"match": false, "error": "Query execution failed with error: no such column: b.breedname"}}
{"result": "SELECT p.first_name, tt.treatment_description\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nJOIN TreatmentTypes tt ON t.treatment_type_code = tt.treatment_type_code; \n", "match": {"match": false, "error": "Query execution failed with error: no such table: TreatmentTypes"}}
{"result": "SELECT \np.first_name,\ntt.treatment_description\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nJOIN TreatmentTypes tt ON t.treatment_type = tt.treatment_type_code;", "match": {"match": false, "error": "Query execution failed with error: no such table: TreatmentTypes"}}
{"result": "SELECT COUNT(*) FROM singer; \n", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT COUNT(*) FROM singer;", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC; \n", "match": {"match": true, "result": [["Abigail Johnson"], ["Susanne Klatten"], ["Gina Rinehart"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Alice Walton"], ["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC; \n", "match": {"match": true, "result": [["Abigail Johnson"], ["Susanne Klatten"], ["Gina Rinehart"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Alice Walton"], ["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT Birth_Year, Citizenship FROM singer;", "match": {"match": true, "result": [[1944.0, "France"], [1948.0, "United States"], [1949.0, "United States"], [1942.0, "Chile"], [1940.0, "United States"], [1953.0, "Australia"], [1962.0, "Germany"], [1961.0, "United States"]]}}
{"result": "SELECT Birth_Year, Citizenship FROM singer;", "match": {"match": true, "result": [[1944.0, "France"], [1948.0, "United States"], [1949.0, "United States"], [1942.0, "Chile"], [1940.0, "United States"], [1953.0, "Australia"], [1962.0, "Germany"], [1961.0, "United States"]]}}
{"result": "```sql\nSELECT Name \nFROM singer \nWHERE Citizenship != 'France';\n```", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]]}}
{"result": "SELECT Name\nFROM singer\nWHERE Citizenship != 'French'; \n", "match": {"match": false, "result": [["Liliane Bettencourt"], ["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]], "gt": [["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name\nFROM singer\nWHERE Birth_Year IN (1948, 1949);", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"]]}}
{"result": "SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949); \n", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;", "match": {"match": true, "result": [["Liliane Bettencourt"]]}}
{"result": "```sql\nSELECT Name\nFROM singer\nORDER BY Net_Worth_Millions DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [["Liliane Bettencourt"]]}}
{"result": "SELECT \"Citizenship\", COUNT(*) AS \"Number of Singers\"\nFROM \"singer\"\nGROUP BY \"Citizenship\";  \n", "match": {"match": true, "result": [["Australia", 1], ["Chile", 1], ["France", 1], ["Germany", 1], ["United States", 4]]}}
{"result": "SELECT Citizenship, COUNT(*) AS NumberOfSingers\nFROM singer\nGROUP BY Citizenship;", "match": {"match": true, "result": [["Australia", 1], ["Chile", 1], ["France", 1], ["Germany", 1], ["United States", 4]]}}
{"result": "```sql\nSELECT Citizenship, COUNT(*) AS SingerCount\nFROM singer\nGROUP BY Citizenship\nORDER BY SingerCount DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [["United States", 4]], "gt": [["United States"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Citizenship, COUNT(*) AS count\nFROM singer\nGROUP BY Citizenship\nORDER BY count DESC\nLIMIT 1; \n", "match": {"match": false, "result": [["United States", 4]], "gt": [["United States"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Citizenship, MAX(Net_Worth) AS Max_Net_Worth\nFROM singer\nGROUP BY Citizenship;", "match": {"match": false, "error": "Query execution failed with error: no such column: Net_Worth"}}
{"result": "```sql\nSELECT Citizenship, MAX(Net_Worth) AS Max_Net_Worth\nFROM singer\nGROUP BY Citizenship;\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: Net_Worth"}}
{"result": "SELECT s.Title, si.Name\nFROM song s\nJOIN singer si ON s.Singer_ID = si.Singer_ID;", "match": {"match": true, "result": [["Do They Know It's Christmas", "Liliane Bettencourt"], ["F**k It (I Don't Want You Back)", "Liliane Bettencourt"], ["Cha Cha Slide", "Christy Walton"], ["Call on Me", "Iris Fontbona"], ["Yeah", "Christy Walton"], ["All This Time", "Gina Rinehart"], ["Left Outside Alone", "Jacqueline Mars"], ["Mysterious Girl", "Susanne Klatten"]]}}
{"result": "SELECT s.Title, si.Name\nFROM song s\nJOIN singer si ON s.Singer_ID = si.Singer_ID; \n", "match": {"match": true, "result": [["Do They Know It's Christmas", "Liliane Bettencourt"], ["F**k It (I Don't Want You Back)", "Liliane Bettencourt"], ["Cha Cha Slide", "Christy Walton"], ["Call on Me", "Iris Fontbona"], ["Yeah", "Christy Walton"], ["All This Time", "Gina Rinehart"], ["Left Outside Alone", "Jacqueline Mars"], ["Mysterious Girl", "Susanne Klatten"]]}}
{"result": "SELECT DISTINCT s.Name\nFROM singer s\nJOIN song ON s.Singer_ID = song.Singer_ID\nWHERE song.Sales > 300000; \n", "match": {"match": true, "result": [["Liliane Bettencourt"], ["Christy Walton"], ["Iris Fontbona"]]}}
{"result": "SELECT DISTINCT s.Name \nFROM singer s \nJOIN song ON s.Singer_ID = song.Singer_ID\nWHERE song.Sales > 300000;  \n", "match": {"match": true, "result": [["Liliane Bettencourt"], ["Christy Walton"], ["Iris Fontbona"]]}}
{"result": "SELECT DISTINCT s.Name \nFROM singer s\nJOIN song ON s.Singer_ID = song.Singer_ID\nGROUP BY s.Name\nHAVING COUNT(song.Song_ID) > 1; \n", "match": {"match": true, "result": [["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT DISTINCT s.Name \nFROM singer s\nJOIN song ON s.Singer_ID = song.Singer_ID\nGROUP BY s.Name\nHAVING COUNT(song.Song_ID) > 1;", "match": {"match": true, "result": [["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT s.Name, SUM(so.Sales) AS TotalSales\nFROM singer s\nJOIN song so ON s.Singer_ID = so.Singer_ID\nGROUP BY s.Name;", "match": {"match": true, "result": [["Christy Walton", 651421.0], ["Gina Rinehart", 292000.0], ["Iris Fontbona", 335000.0], ["Jacqueline Mars", 275000.0], ["Liliane Bettencourt", 1646407.0], ["Susanne Klatten", 261000.0]]}}
{"result": "```sql\nSELECT \n    s.Name,\n    SUM(so.Sales) AS TotalSales\nFROM \n    singer s\nJOIN \n    song so ON s.Singer_ID = so.Singer_ID\nGROUP BY \n    s.Name;\n```", "match": {"match": true, "result": [["Christy Walton", 651421.0], ["Gina Rinehart", 292000.0], ["Iris Fontbona", 335000.0], ["Jacqueline Mars", 275000.0], ["Liliane Bettencourt", 1646407.0], ["Susanne Klatten", 261000.0]]}}
{"result": "SELECT Name\nFROM singer\nWHERE Singer_ID NOT IN (SELECT Singer_ID FROM song); \n", "match": {"match": true, "result": [["Alice Walton"], ["Abigail Johnson"]]}}
{"result": "SELECT s.Name \nFROM singer s\nLEFT JOIN song ON s.Singer_ID = song.Singer_ID\nWHERE song.Singer_ID IS NULL;", "match": {"match": true, "result": [["Alice Walton"], ["Abigail Johnson"]]}}
{"result": "SELECT Citizenship \nFROM singer\nWHERE Birth_Year < 1945\n  AND Birth_Year > 1955\nGROUP BY Citizenship;", "match": {"match": false, "result": [], "gt": [["United States"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT DISTINCT Citizenship\nFROM singer\nWHERE Birth_Year BETWEEN 1945 AND 1955;\n```", "match": {"match": false, "result": [["United States"], ["Australia"]], "gt": [["United States"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) FROM Other_Features;", "match": {"match": false, "error": "Query execution failed with error: no such table: Other_Features"}}
{"result": "SELECT feature_name \nFROM `Available_Features` \nWHERE feature_name = 'AirCon';", "match": {"match": false, "error": "Query execution failed with error: no such table: Available_Features"}}
{"result": "SELECT p.Ref_Property_Type_Description  \r\nFROM Properties AS p  \r\nJOIN Ref_Property_Types AS rpt ON p.property_type_code = rpt.property_type_code;\n", "match": {"match": false, "error": "Query execution failed with error: no such column: p.Ref_Property_Type_Description"}}
{"result": "SELECT \n    p.property_name\nFROM \n    Properties p\nWHERE \n    p.room_count > 1\n    AND p.property_type IN ('house', 'apartment'); \n", "match": {"match": false, "error": "Query execution failed with error: no such column: p.property_type"}}

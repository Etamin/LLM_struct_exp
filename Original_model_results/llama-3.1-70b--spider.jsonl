
{"result": "SELECT COUNT(Singer_ID) FROM singer", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(Singer_ID) FROM singer", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC", "match": {"match": true, "result": [["Joe Sharp", "Netherlands", 52], ["John Nizinik", "France", 43], ["Rose White", "France", 41], ["Timbaland", "United States", 32], ["Justin Brown", "France", 29], ["Tribal King", "France", 25]]}}
{"result": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC", "match": {"match": true, "result": [["Joe Sharp", "Netherlands", 52], ["John Nizinik", "France", 43], ["Rose White", "France", 41], ["Timbaland", "United States", 32], ["Justin Brown", "France", 29], ["Tribal King", "France", 25]]}}
{"result": "SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'", "match": {"match": true, "result": [[34.5, 25, 43]]}}
{"result": "SELECT AVG(Age) AS AverageAge, MIN(Age) AS MinAge, MAX(Age) AS MaxAge FROM singer WHERE Country = 'France'", "match": {"match": true, "result": [[34.5, 25, 43]]}}
{"result": "SELECT Song_Name, Song_release_year FROM singer ORDER BY Age ASC LIMIT 1", "match": {"match": true, "result": [["Love", "2016"]]}}
{"result": "SELECT Song_Name, Song_release_year FROM singer ORDER BY Age ASC LIMIT 1", "match": {"match": true, "result": [["Love", "2016"]]}}
{"result": "SELECT DISTINCT Country FROM singer WHERE Age > 20", "match": {"match": true, "result": [["Netherlands"], ["United States"], ["France"]]}}
{"result": "SELECT Country FROM singer WHERE Age > 20", "match": {"match": false, "result": [["Netherlands"], ["United States"], ["France"], ["France"], ["France"], ["France"]], "gt": [["Netherlands"], ["United States"], ["France"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Country, COUNT(Singer_ID) FROM singer GROUP BY Country", "match": {"match": true, "result": [["France", 4], ["Netherlands", 1], ["United States", 1]]}}
{"result": "SELECT Country, COUNT(Singer_ID) FROM singer GROUP BY Country", "match": {"match": true, "result": [["France", 4], ["Netherlands", 1], ["United States", 1]]}}
{"result": "SELECT Song_Name FROM singer WHERE Age > ( SELECT AVG(Age) FROM singer )", "match": {"match": true, "result": [["You"], ["Sun"], ["Gentleman"]]}}
{"result": "SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)", "match": {"match": true, "result": [["You"], ["Sun"], ["Gentleman"]]}}
{"result": "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000", "match": {"match": true, "result": []}}
{"result": "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000", "match": {"match": true, "result": []}}
{"result": "SELECT MAX(Capacity), AVG(Average) FROM stadium", "match": {"match": false, "result": [[52500, 917.8888888888889]], "gt": [[52500, 730]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(Capacity), MAX(Capacity) FROM stadium", "match": {"match": true, "result": [[10621.666666666666, 52500]]}}
{"result": "SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1", "match": {"match": true, "result": [["Stark's Park", 10104]]}}
{"result": "SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1", "match": {"match": true, "result": [["Stark's Park", 10104]]}}
{"result": "SELECT COUNT(concert_ID) FROM concert WHERE Year = '2014' OR Year = '2015'", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(concert_ID) FROM concert WHERE Year IN ('2014', '2015')", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT T1.Name, COUNT(T2.concert_ID) \nFROM stadium AS T1 \nINNER JOIN concert AS T2 \nON T2.Stadium_ID = T1.Stadium_ID \nGROUP BY T1.Stadium_ID", "match": {"match": false, "result": [["Stark's Park", 1], ["Somerset Park", 2], ["Recreation Park", 1], ["Balmoor", 1], ["Glebe Park", 1]], "gt": [["Stark's Park", 1], ["Glebe Park", 1], ["Somerset Park", 2], ["Recreation Park", 1], ["Balmoor", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Name, COUNT(T1.concert_ID) FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T2.Name", "match": {"match": false, "result": [["Balmoor", 1], ["Glebe Park", 1], ["Recreation Park", 1], ["Somerset Park", 2], ["Stark's Park", 1]], "gt": [["Stark's Park", 1], ["Glebe Park", 1], ["Somerset Park", 2], ["Recreation Park", 1], ["Balmoor", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Name, T2.Capacity FROM concert AS T1 \nINNER JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nWHERE T1.Year >= '2014' \nGROUP BY T2.Stadium_ID \nORDER BY COUNT(T1.concert_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [["Somerset Park", 11998]]}}
{"result": "SELECT T2.Name, T2.Capacity \nFROM concert AS T1 \nINNER JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nWHERE T1.Year > '2013' \nGROUP BY T2.Name, T2.Capacity \nORDER BY COUNT(T1.concert_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [["Somerset Park", 11998]]}}
{"result": "SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(concert_ID) DESC LIMIT 1", "match": {"match": true, "result": [["2015"]]}}
{"result": "SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(Year) DESC LIMIT 1", "match": {"match": true, "result": [["2015"]]}}
{"result": "SELECT Name\nFROM stadium\nWHERE Stadium_ID NOT IN ( SELECT Stadium_ID FROM concert )", "match": {"match": true, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"]]}}
{"result": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)", "match": {"match": true, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"]]}}
{"result": "```sql\nSELECT T2.Country \nFROM singer_in_concert AS T1 \nINNER JOIN singer AS T2 \nON T1.Singer_ID = T2.Singer_ID \nWHERE T2.Age > 40 \nINTERSECT \nSELECT T2.Country \nFROM singer_in_concert AS T1 \nINNER JOIN singer AS T2 \nON T1.Singer_ID = T2.Singer_ID \nWHERE T2.Age < 30;\n```", "match": {"match": true, "result": [["France"]]}}
{"result": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN ( SELECT Stadium_ID FROM concert WHERE Year = '2014' )", "match": {"match": false, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"], ["Recreation Park"], ["Balmoor"]], "gt": [["Balmoor"], ["Bayview Stadium"], ["Forthbank Stadium"], ["Gayfield Park"], ["Hampden Park"], ["Recreation Park"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN ( SELECT Stadium_ID FROM concert WHERE Year = '2014' )", "match": {"match": false, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"], ["Recreation Park"], ["Balmoor"]], "gt": [["Balmoor"], ["Bayview Stadium"], ["Forthbank Stadium"], ["Gayfield Park"], ["Hampden Park"], ["Recreation Park"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.concert_Name, T1.Theme, COUNT(T2.Singer_ID) \nFROM concert AS T1 \nLEFT JOIN singer_in_concert AS T2 \nON T1.concert_ID = T2.concert_ID \nGROUP BY T1.concert_Name, T1.Theme", "match": {"match": false, "result": [["Auditions", "Free choice", 3], ["Home Visits", "Bleeding Love", 1], ["Super bootcamp", "Free choice 2", 2], ["Week 1", "Happy Tonight", 2], ["Week 1", "Wide Awake", 1], ["Week 2", "Party All Night", 1]], "gt": [["Auditions", "Free choice", 3], ["Super bootcamp", "Free choice 2", 2], ["Home Visits", "Bleeding Love", 1], ["Week 1", "Wide Awake", 1], ["Week 1", "Happy Tonight", 2], ["Week 2", "Party All Night", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.concert_Name, T1.Theme, COUNT(T2.Singer_ID) \nFROM concert AS T1 \nLEFT JOIN singer_in_concert AS T2 \nON T1.concert_ID = T2.concert_ID \nGROUP BY T1.concert_ID", "match": {"match": true, "result": [["Auditions", "Free choice", 3], ["Super bootcamp", "Free choice 2", 2], ["Home Visits", "Bleeding Love", 1], ["Week 1", "Wide Awake", 1], ["Week 1", "Happy Tonight", 2], ["Week 2", "Party All Night", 1]]}}
{"result": "SELECT T2.Name, COUNT(T1.concert_ID) \nFROM singer_in_concert AS T1\nJOIN singer AS T2\nON T1.Singer_ID = T2.Singer_ID\nGROUP BY T2.Name", "match": {"match": false, "result": [["John Nizinik", 2], ["Justin Brown", 3], ["Rose White", 1], ["Timbaland", 2], ["Tribal King", 2]], "gt": [["Timbaland", 2], ["Justin Brown", 3], ["Rose White", 1], ["John Nizinik", 2], ["Tribal King", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name, COUNT(T2.concert_ID) AS Number_of_concerts \nFROM singer AS T1 \nINNER JOIN singer_in_concert AS T2 \nON T1.Singer_ID = T2.Singer_ID \nGROUP BY T1.Name", "match": {"match": false, "result": [["John Nizinik", 2], ["Justin Brown", 3], ["Rose White", 1], ["Timbaland", 2], ["Tribal King", 2]], "gt": [["Timbaland", 2], ["Justin Brown", 3], ["Rose White", 1], ["John Nizinik", 2], ["Tribal King", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T3.Name FROM concert AS T1 INNER JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID INNER JOIN singer AS T3 ON T2.Singer_ID = T3.Singer_ID WHERE T1.Year = '2014'", "match": {"match": true, "result": [["Timbaland"], ["Justin Brown"], ["John Nizinik"], ["Justin Brown"], ["Tribal King"], ["Rose White"]]}}
{"result": "SELECT T2.Name FROM concert AS T1 INNER JOIN singer_in_concert AS T3 ON T1.concert_ID = T3.concert_ID INNER JOIN singer AS T2 ON T3.Singer_ID = T2.Singer_ID WHERE T1.Year = '2014'", "match": {"match": true, "result": [["Timbaland"], ["Justin Brown"], ["John Nizinik"], ["Justin Brown"], ["Tribal King"], ["Rose White"]]}}
{"result": "SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'", "match": {"match": true, "result": [["Justin Brown", "France"]]}}
{"result": "SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'", "match": {"match": true, "result": [["Justin Brown", "France"]]}}
{"result": "SELECT T2.Name, T2.Location FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T1.Year = '2014' INTERSECT SELECT T2.Name, T2.Location FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T1.Year = '2015'", "match": {"match": true, "result": [["Somerset Park", "Ayr United"]]}}
{"result": "SELECT T1.Name, T1.Location \nFROM stadium AS T1 \nJOIN concert AS T2 \nON T1.Stadium_ID = T2.Stadium_ID \nWHERE T2.Year IN ('2014', '2015') \nGROUP BY T1.Name, T1.Location \nHAVING COUNT(DISTINCT T2.Year) = 2", "match": {"match": true, "result": [["Somerset Park", "Ayr United"]]}}
{"result": "SELECT COUNT(T2.concert_ID) FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID ORDER BY T1.Capacity DESC LIMIT 1", "match": {"match": false, "result": [[6]], "gt": [[0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(T2.concert_ID) FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T1.Capacity = ( SELECT MAX(Capacity) FROM stadium )", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(PetID) FROM Pets WHERE weight > 10", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(PetID) FROM Pets WHERE weight > 10", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT MIN(weight) FROM Pets WHERE PetType = 'dog'", "match": {"match": true, "result": [[9.3]]}}
{"result": "SELECT MIN(weight) \nFROM Pets \nWHERE PetType = 'dog'", "match": {"match": true, "result": [[9.3]]}}
{"result": "SELECT MAX(weight), PetType \nFROM Pets \nGROUP BY PetType;", "match": {"match": true, "result": [[12.0, "cat"], [13.4, "dog"]]}}
{"result": "SELECT PetType, MAX(weight), MAX(pet_age) FROM Pets GROUP BY PetType", "match": {"match": false, "result": [["cat", 12.0, 3], ["dog", 13.4, 2]], "gt": [[12.0, "cat"], [13.4, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(T2.PetID) \nFROM Student AS T1 \nINNER JOIN Has_Pet AS T2 \nON T1.StuID = T2.StuID \nWHERE T1.Age > 20", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(T2.PetID) \nFROM Student AS T1 \nJOIN Has_Pet AS T2 \nON T1.StuID = T2.StuID \nWHERE T1.Age > 20", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(T2.StuID) \nFROM Pets AS T1 \nINNER JOIN Has_Pet AS T2 ON T1.PetID = T2.PetID \nINNER JOIN Student AS T3 ON T2.StuID = T3.StuID \nWHERE T1.PetType = 'dog' AND T3.Sex = 'F'", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(T1.StuID) \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T3.PetID = T2.PetID \nWHERE T1.Sex = 'F' AND T3.PetType = 'dog'", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(DISTINCT PetType) FROM Pets", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(DISTINCT PetType) FROM Pets", "match": {"match": true, "result": [[2]]}}
{"result": "```sql\nSELECT DISTINCT T1.Fname\nFROM Student T1\nJOIN Has_Pet T2 ON T1.StuID = T2.StuID\nJOIN Pets T3 ON T2.PetID = T3.PetID\nWHERE T3.PetType = 'Cat' OR T3.PetType = 'Dog';\n```", "match": {"match": false, "result": [], "gt": [["Linda"], ["Tracy"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T3.Fname \nFROM Pets AS T1 \nINNER JOIN Has_Pet AS T2 \nON T1.PetID = T2.PetID \nINNER JOIN Student AS T3 \nON T2.StuID = T3.StuID \nWHERE T1.PetType = 'cat' OR T1.PetType = 'dog'", "match": {"match": true, "result": [["Linda"], ["Tracy"]]}}
{"result": "SELECT DISTINCT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'cat' OR T3.PetType = 'dog'", "match": {"match": false, "result": [["Linda"], ["Tracy"]], "gt": [], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Fname \nFROM Student AS T1 \nINNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nINNER JOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'cat' \nINTERSECT \nSELECT T1.Fname \nFROM Student AS T1 \nINNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nINNER JOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'dog'", "match": {"match": true, "result": []}}
{"result": "SELECT T1.Major, T1.Age \nFROM Student T1 \nLEFT JOIN Has_Pet T2 ON T1.StuID = T2.StuID \nLEFT JOIN Pets T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType != 'cat' OR T3.PetID IS NULL", "match": {"match": false, "result": [[600, 19], [600, 19], [600, 21], [600, 20], [600, 26], [600, 18], [600, 18], [600, 20], [600, 19], [600, 17], [600, 22], [600, 20], [600, 18], [600, 16], [600, 17], [600, 27], [600, 20], [600, 18], [520, 22], [520, 19], [540, 17], [520, 20], [540, 18], [520, 18], [520, 19], [520, 18], [550, 20], [100, 17], [550, 21], [550, 20], [550, 20], [550, 18], [50, 18], [50, 26]], "gt": [[600, 19], [600, 21], [600, 20], [600, 26], [600, 18], [600, 18], [600, 20], [600, 19], [600, 17], [600, 22], [600, 20], [600, 18], [600, 16], [600, 17], [600, 27], [600, 20], [600, 18], [520, 22], [520, 19], [540, 17], [520, 20], [540, 18], [520, 18], [520, 19], [520, 18], [550, 20], [100, 17], [550, 21], [550, 20], [550, 20], [550, 18], [50, 18], [50, 26]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Major, T1.Age \nFROM Student AS T1 \nWHERE T1.StuID NOT IN (\n  SELECT T3.StuID \n  FROM Has_Pet AS T2 \n  INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID \n  WHERE T3.PetType = 'Cat'\n)", "match": {"match": false, "error": "Query execution failed with error: no such column: T3.StuID"}}
{"result": "```sql\nSELECT S.StuID \nFROM Student S \nWHERE S.StuID NOT IN (\n  SELECT H.StuID \n  FROM Has_Pet H \n  JOIN Pets P ON H.PetID = P.PetID \n  WHERE P.PetType = 'cat'\n)\n```", "match": {"match": true, "result": [[1002], [1003], [1004], [1005], [1006], [1007], [1008], [1009], [1010], [1011], [1012], [1014], [1015], [1016], [1017], [1018], [1019], [1020], [1021], [1022], [1023], [1024], [1025], [1026], [1027], [1028], [1029], [1030], [1031], [1032], [1033], [1034], [1035]]}}
{"result": "```sql\nSELECT DISTINCT S.StuID\nFROM Student S\nLEFT JOIN Has_Pet HP ON S.StuID = HP.StuID\nLEFT JOIN Pets P ON HP.PetID = P.PetID\nWHERE P.PetID IS NULL OR P.PetType != 'cat'\n```", "match": {"match": true, "result": [[1002], [1003], [1004], [1005], [1006], [1007], [1008], [1009], [1010], [1011], [1012], [1014], [1015], [1016], [1017], [1018], [1019], [1020], [1021], [1022], [1023], [1024], [1025], [1026], [1027], [1028], [1029], [1030], [1031], [1032], [1033], [1034], [1035]]}}
{"result": "```sql\nSELECT T1.Fname, T1.Age\nFROM Student T1\nJOIN Has_Pet T2 ON T1.StuID = T2.StuID\nJOIN Pets T3 ON T2.PetID = T3.PetID\nWHERE T3.PetType = 'dog'\nAND T1.StuID NOT IN (\n    SELECT T4.StuID\n    FROM Has_Pet T4\n    JOIN Pets T5 ON T4.PetID = T5.PetID\n    WHERE T5.PetType = 'cat'\n)\n```", "match": {"match": true, "result": [["Tracy", 19], ["Tracy", 19]]}}
{"result": "```sql\nSELECT DISTINCT T3.Fname\nFROM Pets AS T1\nINNER JOIN Has_Pet AS T2 ON T1.PetID = T2.PetID\nINNER JOIN Student AS T3 ON T3.StuID = T2.StuID\nWHERE T1.PetType = 'dog' AND T3.StuID NOT IN (\n  SELECT T4.StuID\n  FROM Pets AS T1\n  INNER JOIN Has_Pet AS T2 ON T1.PetID = T2.PetID\n  INNER JOIN Student AS T4 ON T4.StuID = T2.StuID\n  WHERE T1.PetType = 'cat'\n)\n```", "match": {"match": false, "result": [["Tracy"]], "gt": [["Tracy", 19], ["Tracy", 19]], "error": "Query result does not match ground truth."}}
{"result": "SELECT PetType, weight FROM Pets ORDER BY pet_age ASC LIMIT 1", "match": {"match": true, "result": [["dog", 9.3]]}}
{"result": "SELECT PetType, weight\nFROM Pets\nORDER BY pet_age\nLIMIT 1", "match": {"match": true, "result": [["dog", 9.3]]}}
{"result": "SELECT PetID, weight \nFROM Pets \nWHERE pet_age > 1", "match": {"match": true, "result": [[2001, 12.0], [2002, 13.4]]}}
{"result": "SELECT PetID, weight FROM Pets WHERE pet_age > 1", "match": {"match": true, "result": [[2001, 12.0], [2002, 13.4]]}}
{"result": "SELECT PetType, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age \nFROM Pets \nGROUP BY PetType", "match": {"match": false, "result": [["cat", 3.0, 3], ["dog", 1.5, 2]], "gt": [[3.0, 3, "cat"], [1.5, 2, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT PetType, AVG(pet_age) AS AverageAge, MAX(pet_age) AS MaximumAge\nFROM Pets\nGROUP BY PetType", "match": {"match": false, "result": [["cat", 3.0, 3], ["dog", 1.5, 2]], "gt": [[3.0, 3, "cat"], [1.5, 2, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType", "match": {"match": false, "result": [["cat", 12.0], ["dog", 11.350000000000001]], "gt": [[12.0, "cat"], [11.350000000000001, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType", "match": {"match": false, "result": [["cat", 12.0], ["dog", 11.350000000000001]], "gt": [[12.0, "cat"], [11.350000000000001, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Fname, T1.Age \nFROM Student AS T1 \nJOIN Has_Pet AS T2 \nON T1.StuID = T2.StuID", "match": {"match": false, "result": [["Linda", 18], ["Tracy", 19], ["Tracy", 19]], "gt": [["Linda", 18], ["Tracy", 19]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T2.Fname, T2.Age \nFROM Has_Pet AS T1 \nINNER JOIN Student AS T2 \nON T1.StuID = T2.StuID", "match": {"match": true, "result": [["Linda", 18], ["Tracy", 19]]}}
{"result": "SELECT T2.PetID \nFROM Student AS T1 \nINNER JOIN Has_Pet AS T2 \nON T1.StuID = T2.StuID \nWHERE T1.LName = 'Smith'", "match": {"match": true, "result": [[2001]]}}
{"result": "SELECT T2.PetID FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T1.LName = 'Smith'", "match": {"match": true, "result": [[2001]]}}
{"result": "SELECT StuID, COUNT(PetID) \nFROM Has_Pet \nGROUP BY StuID", "match": {"match": false, "result": [[1001, 1], [1002, 2]], "gt": [[1, 1001], [2, 1002]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT StuID, COUNT(PetID) \nFROM Has_Pet \nGROUP BY StuID;\n```", "match": {"match": false, "result": [[1001, 1], [1002, 2]], "gt": [[1, 1001], [2, 1002]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT T1.Fname, T1.Sex \nFROM Student T1 \nJOIN Has_Pet T2 ON T1.StuID = T2.StuID \nGROUP BY T1.StuID, T1.Fname, T1.Sex \nHAVING COUNT(T2.PetID) > 1\n```", "match": {"match": true, "result": [["Tracy", "F"]]}}
{"result": "SELECT T1.Fname, T1.Sex \nFROM Student T1 \nJOIN Has_Pet T2 ON T1.StuID = T2.StuID \nGROUP BY T1.Fname, T1.Sex, T1.StuID \nHAVING COUNT(T2.PetID) > 1", "match": {"match": true, "result": [["Tracy", "F"]]}}
{"result": "SELECT T1.LName \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'cat' AND T3.pet_age = 3", "match": {"match": true, "result": [["Smith"]]}}
{"result": "SELECT T1.LName \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'cat' AND T3.pet_age = 3", "match": {"match": true, "result": [["Smith"]]}}
{"result": "```sql\nSELECT AVG(Age) \nFROM Student \nWHERE StuID NOT IN (SELECT StuID FROM Has_Pet)\n```", "match": {"match": true, "result": [[19.625]]}}
{"result": "```sql\nSELECT AVG(Age) \nFROM Student \nWHERE StuID NOT IN (SELECT StuID FROM Has_Pet);\n```", "match": {"match": true, "result": [[19.625]]}}
{"result": "SELECT COUNT(Employee_ID) FROM employee", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT COUNT(Employee_ID) FROM employee", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT Name FROM employee ORDER BY Age ASC", "match": {"match": true, "result": [["George Chuter"], ["Andrew Sheridan"], ["Lee Mears"], ["Tim Payne"], ["Matt Stevens"], ["Jason Hobson"], ["Steve Borthwick"], ["Louis Deacon"], ["Phil Vickery"], ["Mark Regan"]]}}
{"result": "SELECT Name FROM employee ORDER BY Age ASC", "match": {"match": true, "result": [["George Chuter"], ["Andrew Sheridan"], ["Lee Mears"], ["Tim Payne"], ["Matt Stevens"], ["Jason Hobson"], ["Steve Borthwick"], ["Louis Deacon"], ["Phil Vickery"], ["Mark Regan"]]}}
{"result": "SELECT City, COUNT(Employee_ID) FROM employee GROUP BY City", "match": {"match": false, "result": [["Bath", 3], ["Bristol", 3], ["Leicester", 1], ["Sale", 1], ["Wasps", 2]], "gt": [[3, "Bath"], [3, "Bristol"], [1, "Leicester"], [1, "Sale"], [2, "Wasps"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT City, COUNT(Employee_ID) FROM employee GROUP BY City", "match": {"match": false, "result": [["Bath", 3], ["Bristol", 3], ["Leicester", 1], ["Sale", 1], ["Wasps", 2]], "gt": [[3, "Bath"], [3, "Bristol"], [1, "Leicester"], [1, "Sale"], [2, "Wasps"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1", "match": {"match": true, "result": [["Bath"]]}}
{"result": "SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1", "match": {"match": true, "result": [["Bath"]]}}
{"result": "SELECT Location, COUNT(*) FROM shop GROUP BY Location", "match": {"match": false, "result": [["Espoo", 1], ["Helsinki", 1], ["Jakobstad", 1], ["Kotka", 1], ["Kuopio", 1], ["Lahti", 1], ["Mariehamn", 1], ["Turku", 1], ["Valkeakoski", 1]], "gt": [[1, "Espoo"], [1, "Helsinki"], [1, "Jakobstad"], [1, "Kotka"], [1, "Kuopio"], [1, "Lahti"], [1, "Mariehamn"], [1, "Turku"], [1, "Valkeakoski"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Location, COUNT(Shop_ID) FROM shop GROUP BY Location", "match": {"match": false, "result": [["Espoo", 1], ["Helsinki", 1], ["Jakobstad", 1], ["Kotka", 1], ["Kuopio", 1], ["Lahti", 1], ["Mariehamn", 1], ["Turku", 1], ["Valkeakoski", 1]], "gt": [[1, "Espoo"], [1, "Helsinki"], [1, "Jakobstad"], [1, "Kotka"], [1, "Kuopio"], [1, "Lahti"], [1, "Mariehamn"], [1, "Turku"], [1, "Valkeakoski"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Manager_name, District FROM shop ORDER BY Number_products DESC LIMIT 1", "match": {"match": true, "result": [["Ilkka M\u00e4kel\u00e4", "Lahden Stadion"]]}}
{"result": "SELECT Manager_name, District FROM shop ORDER BY Number_products DESC LIMIT 1", "match": {"match": true, "result": [["Ilkka M\u00e4kel\u00e4", "Lahden Stadion"]]}}
{"result": "SELECT MIN(Number_products), MAX(Number_products) FROM shop", "match": {"match": true, "result": [[1600, 15000]]}}
{"result": "SELECT MIN(Number_products), MAX(Number_products) FROM shop", "match": {"match": true, "result": [[1600, 15000]]}}
{"result": "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC", "match": {"match": true, "result": [["FC Lahti", "Lahti", "Lahden Stadion"], ["HJK", "Helsinki", "Finnair Stadium"], ["FC Inter", "Turku", "Veritas Stadion"], ["FC Honka", "Espoo", "Tapiolan Urheilupuisto"], ["FF Jaro", "Jakobstad", "Jakobstads Centralplan"], ["FC KooTeePee", "Kotka", "Arto Tolsa Areena"], ["FC Haka", "Valkeakoski", "Tehtaan kentt\u00e4"], ["KuPS", "Kuopio", "Magnum Areena"], ["IFK Mariehamn", "Mariehamn", "Wikl\u00f6f Holding Arena"]]}}
{"result": "SELECT Name, Location, District \nFROM shop \nORDER BY Number_products DESC", "match": {"match": true, "result": [["FC Lahti", "Lahti", "Lahden Stadion"], ["HJK", "Helsinki", "Finnair Stadium"], ["FC Inter", "Turku", "Veritas Stadion"], ["FC Honka", "Espoo", "Tapiolan Urheilupuisto"], ["FF Jaro", "Jakobstad", "Jakobstads Centralplan"], ["FC KooTeePee", "Kotka", "Arto Tolsa Areena"], ["FC Haka", "Valkeakoski", "Tehtaan kentt\u00e4"], ["KuPS", "Kuopio", "Magnum Areena"], ["IFK Mariehamn", "Mariehamn", "Wikl\u00f6f Holding Arena"]]}}
{"result": "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)", "match": {"match": true, "result": [["HJK"], ["FC Inter"], ["FC Lahti"]]}}
{"result": "SELECT Name FROM shop WHERE Number_products > ( SELECT AVG(Number_products) FROM shop )", "match": {"match": true, "result": [["HJK"], ["FC Inter"], ["FC Lahti"]]}}
{"result": "SELECT T1.Name \nFROM employee AS T1 \nJOIN evaluation AS T2 \nON T1.Employee_ID = T2.Employee_ID \nGROUP BY T1.Name \nORDER BY COUNT(T1.Name) DESC \nLIMIT 1", "match": {"match": true, "result": [["George Chuter"]]}}
{"result": "SELECT T1.Name FROM employee AS T1 INNER JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T1.Name ORDER BY COUNT(T2.Year_awarded) DESC LIMIT 1", "match": {"match": true, "result": [["George Chuter"]]}}
{"result": "SELECT T2.Name FROM evaluation AS T1 INNER JOIN employee AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T1.Bonus DESC LIMIT 1", "match": {"match": true, "result": [["Louis Deacon"]]}}
{"result": "SELECT T1.Name FROM employee AS T1 INNER JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.Bonus DESC LIMIT 1", "match": {"match": true, "result": [["Louis Deacon"]]}}
{"result": "SELECT Name FROM employee WHERE Employee_ID NOT IN ( SELECT Employee_ID FROM evaluation )", "match": {"match": true, "result": [["Mark Regan"], ["Tim Payne"], ["Andrew Sheridan"], ["Phil Vickery"], ["Steve Borthwick"]]}}
{"result": "SELECT Name FROM employee WHERE Employee_ID NOT IN ( SELECT Employee_ID FROM evaluation )", "match": {"match": true, "result": [["Mark Regan"], ["Tim Payne"], ["Andrew Sheridan"], ["Phil Vickery"], ["Steve Borthwick"]]}}
{"result": "SELECT T2.Name \nFROM hiring AS T1 \nINNER JOIN shop AS T2 \nON T1.Shop_ID = T2.Shop_ID \nGROUP BY T2.Name \nORDER BY COUNT(T1.Employee_ID) DESC LIMIT 1", "match": {"match": true, "result": [["FC Haka"]]}}
{"result": "SELECT T1.Name \nFROM shop AS T1 \nINNER JOIN hiring AS T2 \nON T1.Shop_ID = T2.Shop_ID \nGROUP BY T1.Name \nORDER BY COUNT(T2.Employee_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [["FC Haka"]]}}
{"result": "SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)", "match": {"match": true, "result": [["FC Honka"], ["KuPS"], ["IFK Mariehamn"]]}}
{"result": "SELECT Name \nFROM shop \nWHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)", "match": {"match": true, "result": [["FC Honka"], ["KuPS"], ["IFK Mariehamn"]]}}
{"result": "SELECT T2.Name, COUNT(T1.Shop_ID) \nFROM hiring AS T1 \nLEFT JOIN shop AS T2 \nON T1.Shop_ID = T2.Shop_ID \nGROUP BY T2.Name", "match": {"match": false, "result": [["FC Haka", 2], ["FC Inter", 1], ["FC KooTeePee", 1], ["FC Lahti", 1], ["FF Jaro", 1], ["HJK", 1]], "gt": [[2, "FC Haka"], [1, "FC Inter"], [1, "FC KooTeePee"], [1, "FC Lahti"], [1, "FF Jaro"], [1, "HJK"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(T1.Shop_ID), T2.Name \nFROM hiring AS T1 \nINNER JOIN shop AS T2 \nON T1.Shop_ID = T2.Shop_ID \nGROUP BY T2.Name", "match": {"match": true, "result": [[2, "FC Haka"], [1, "FC Inter"], [1, "FC KooTeePee"], [1, "FC Lahti"], [1, "FF Jaro"], [1, "HJK"]]}}
{"result": "SELECT SUM(Bonus) FROM evaluation", "match": {"match": true, "result": [[19500.0]]}}
{"result": "SELECT SUM(Bonus) FROM evaluation", "match": {"match": true, "result": [[19500.0]]}}
{"result": "SELECT * FROM hiring", "match": {"match": true, "result": [[1, 1, "2009", "T"], [1, 2, "2003", "T"], [8, 3, "2011", "F"], [4, 4, "2012", "T"], [5, 5, "2013", "T"], [2, 6, "2010", "F"], [6, 7, "2008", "T"]]}}
{"result": "SELECT * FROM hiring", "match": {"match": true, "result": [[1, 1, "2009", "T"], [1, 2, "2003", "T"], [8, 3, "2011", "F"], [4, 4, "2012", "T"], [5, 5, "2013", "T"], [2, 6, "2010", "F"], [6, 7, "2008", "T"]]}}
{"result": "SELECT District FROM shop WHERE Number_products < 3000 INTERSECT SELECT District FROM shop WHERE Number_products > 10000", "match": {"match": true, "result": []}}
{"result": "SELECT District FROM shop WHERE Number_products < 3000 \nINTERSECT \nSELECT District FROM shop WHERE Number_products > 10000", "match": {"match": true, "result": []}}
{"result": "SELECT COUNT(DISTINCT Location) FROM shop", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(DISTINCT Location) FROM shop", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(Document_ID) FROM Documents", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(Document_ID) FROM Documents", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT Document_ID, Document_Name, Document_Description FROM Documents", "match": {"match": true, "result": [[0, "Introduction of OS", "n"], [1, "Understanding DB", "y"], [3, "Summer Show", "u"], [76, "Robbin CV", "y"], [80, "Welcome to NY", "h"], [82, "Data base", "w"], [2394, "Customer reviews", "y"], [3830, "Do not panic", "k"], [33930, "How Google people work", "z"], [50123, "Learning French", "r"], [651512, "How to write a CV", "f"], [801801, "How to read a book", "w"], [3540024, "Palm reading", "y"], [16514113, "A history of Arts", "h"], [385906526, "About Korea", "b"]]}}
{"result": "```sql\nSELECT Document_ID, Document_Name, Document_Description \nFROM Documents;\n```", "match": {"match": true, "result": [[0, "Introduction of OS", "n"], [1, "Understanding DB", "y"], [3, "Summer Show", "u"], [76, "Robbin CV", "y"], [80, "Welcome to NY", "h"], [82, "Data base", "w"], [2394, "Customer reviews", "y"], [3830, "Do not panic", "k"], [33930, "How Google people work", "z"], [50123, "Learning French", "r"], [651512, "How to write a CV", "f"], [801801, "How to read a book", "w"], [3540024, "Palm reading", "y"], [16514113, "A history of Arts", "h"], [385906526, "About Korea", "b"]]}}
{"result": "```sql\nSELECT Document_Name, Template_ID \nFROM Documents \nWHERE Document_Description LIKE '%w%';\n```", "match": {"match": true, "result": [["Data base", 11], ["How to read a book", 4]]}}
{"result": "```sql\nSELECT Document_Name, Template_ID \nFROM Documents \nWHERE Document_Description LIKE '%w%';\n```", "match": {"match": true, "result": [["Data base", 11], ["How to read a book", 4]]}}
{"result": "SELECT Document_ID, Template_ID, Document_Description \nFROM Documents \nWHERE Document_Name = 'Robbin CV'", "match": {"match": true, "result": [[76, 20, "y"]]}}
{"result": "SELECT Document_ID, Template_ID, Document_Description \nFROM Documents \nWHERE Document_Name = 'Robbin CV'", "match": {"match": true, "result": [[76, 20, "y"]]}}
{"result": "SELECT COUNT(DISTINCT Template_ID) FROM Documents", "match": {"match": true, "result": [[12]]}}
{"result": "```sql\nSELECT COUNT(DISTINCT Template_ID) \nFROM Documents;\n```", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT COUNT(Template_ID) \nFROM Templates \nWHERE Template_Type_Code = 'PPT'", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(d.Document_ID) \nFROM Documents d \nJOIN Templates t ON d.Template_ID = t.Template_ID \nJOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code \nWHERE rtt.Template_Type_Description = 'PPT'", "match": {"match": false, "result": [[0]], "gt": [[3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Template_ID, COUNT(Document_ID) \nFROM Documents \nGROUP BY Template_ID", "match": {"match": true, "result": [[1, 1], [4, 1], [6, 1], [7, 1], [8, 1], [10, 1], [11, 2], [14, 2], [20, 1], [21, 1], [22, 1], [25, 2]]}}
{"result": "SELECT Template_ID, COUNT(Document_ID) AS `Frequency` \nFROM Documents \nGROUP BY Template_ID", "match": {"match": true, "result": [[1, 1], [4, 1], [6, 1], [7, 1], [8, 1], [10, 1], [11, 2], [14, 2], [20, 1], [21, 1], [22, 1], [25, 2]]}}
{"result": "SELECT T.Template_ID, T.Template_Type_Code \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID \nGROUP BY T.Template_ID, T.Template_Type_Code \nORDER BY COUNT(D.Document_ID) DESC LIMIT 1", "match": {"match": false, "result": [[11, "BK"]], "gt": [[25, "PP"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT T.Template_ID, T.Template_Type_Code\nFROM Templates T\nJOIN Documents D ON T.Template_ID = D.Template_ID\nGROUP BY T.Template_ID, T.Template_Type_Code\nORDER BY COUNT(D.Document_ID) DESC\nLIMIT 1\n```", "match": {"match": false, "result": [[11, "BK"]], "gt": [[25, "PP"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT Template_ID\nFROM Documents\nGROUP BY Template_ID\nHAVING COUNT(Document_ID) > 1;\n```", "match": {"match": true, "result": [[11], [14], [25]]}}
{"result": "```sql\nSELECT Template_ID\nFROM Documents\nGROUP BY Template_ID\nHAVING COUNT(Document_ID) > 1;\n```", "match": {"match": true, "result": [[11], [14], [25]]}}
{"result": "SELECT Template_ID \nFROM Templates \nWHERE Template_ID NOT IN ( \n  SELECT Template_ID \n  FROM Documents \n  WHERE Template_ID IS NOT NULL \n)", "match": {"match": true, "result": [[0], [9], [15], [16], [18], [19], [23], [24]]}}
{"result": "SELECT Template_ID \nFROM Templates \nWHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)", "match": {"match": true, "result": [[0], [9], [15], [16], [18], [19], [23], [24]]}}
{"result": "SELECT COUNT(Template_ID) FROM Templates", "match": {"match": true, "result": [[20]]}}
{"result": "SELECT COUNT(Template_ID) FROM Templates", "match": {"match": true, "result": [[20]]}}
{"result": "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates", "match": {"match": true, "result": [[0, 5, "PP"], [1, 9, "PP"], [4, 4, "BK"], [6, 2, "PPT"], [7, 8, "PPT"], [8, 3, "BK"], [9, 2, "BK"], [10, 1, "PPT"], [11, 6, "BK"], [14, 7, "AD"], [15, 9, "CV"], [16, 5, "CV"], [18, 5, "PP"], [19, 7, "AD"], [20, 6, "BK"], [21, 9, "AD"], [22, 0, "PP"], [23, 2, "BK"], [24, 8, "PP"], [25, 5, "PP"]]}}
{"result": "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates", "match": {"match": true, "result": [[0, 5, "PP"], [1, 9, "PP"], [4, 4, "BK"], [6, 2, "PPT"], [7, 8, "PPT"], [8, 3, "BK"], [9, 2, "BK"], [10, 1, "PPT"], [11, 6, "BK"], [14, 7, "AD"], [15, 9, "CV"], [16, 5, "CV"], [18, 5, "PP"], [19, 7, "AD"], [20, 6, "BK"], [21, 9, "AD"], [22, 0, "PP"], [23, 2, "BK"], [24, 8, "PP"], [25, 5, "PP"]]}}
{"result": "```sql\nSELECT DISTINCT Template_Type_Code\nFROM Templates\n```", "match": {"match": true, "result": [["PP"], ["BK"], ["PPT"], ["AD"], ["CV"]]}}
{"result": "SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types", "match": {"match": false, "result": [["AD"], ["BK"], ["CV"], ["PP"], ["PPT"]], "gt": [["PP"], ["BK"], ["PPT"], ["AD"], ["CV"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')", "match": {"match": true, "result": [[0], [1], [6], [7], [10], [18], [22], [24], [25]]}}
{"result": "SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT'", "match": {"match": true, "result": [[0], [1], [6], [7], [10], [18], [22], [24], [25]]}}
{"result": "SELECT COUNT(Template_ID) \nFROM Templates \nWHERE Template_Type_Code = 'CV'", "match": {"match": true, "result": [[2]]}}
{"result": "```sql\nSELECT COUNT(Template_ID) \nFROM Templates AS T\nJOIN Ref_Template_Types AS RTT ON T.Template_Type_Code = RTT.Template_Type_Code\nWHERE RTT.Template_Type_Description = 'CV';\n```", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT Version_Number, Template_Type_Code \nFROM Templates \nWHERE Version_Number > 5", "match": {"match": true, "result": [[9, "PP"], [8, "PPT"], [6, "BK"], [7, "AD"], [9, "CV"], [7, "AD"], [6, "BK"], [9, "AD"], [8, "PP"]]}}
{"result": "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5", "match": {"match": true, "result": [[9, "PP"], [8, "PPT"], [6, "BK"], [7, "AD"], [9, "CV"], [7, "AD"], [6, "BK"], [9, "AD"], [8, "PP"]]}}
{"result": "SELECT Template_Type_Code, COUNT(Template_ID) \nFROM Templates \nGROUP BY Template_Type_Code", "match": {"match": true, "result": [["AD", 3], ["BK", 6], ["CV", 2], ["PP", 6], ["PPT", 3]]}}
{"result": "SELECT Template_Type_Code, COUNT(Template_ID) \nFROM Templates \nGROUP BY Template_Type_Code", "match": {"match": true, "result": [["AD", 3], ["BK", 6], ["CV", 2], ["PP", 6], ["PPT", 3]]}}
{"result": "SELECT Template_Type_Code\nFROM Templates\nGROUP BY Template_Type_Code\nORDER BY COUNT(*) DESC\nLIMIT 1", "match": {"match": true, "result": [["PP"]]}}
{"result": "SELECT Template_Type_Code \nFROM Templates \nGROUP BY Template_Type_Code \nORDER BY COUNT(Template_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [["PP"]]}}
{"result": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_ID) < 3", "match": {"match": true, "result": [["CV"]]}}
{"result": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_ID) < 3", "match": {"match": true, "result": [["CV"]]}}
{"result": "SELECT MIN(Version_Number), Template_Type_Code FROM Templates", "match": {"match": true, "result": [[0, "PP"]]}}
{"result": "SELECT Template_Type_Code, MIN(Version_Number) \nFROM Templates \nGROUP BY Template_Type_Code", "match": {"match": false, "result": [["AD", 7], ["BK", 2], ["CV", 5], ["PP", 0], ["PPT", 1]], "gt": [[0, "PP"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.Template_Type_Code \nFROM Templates AS T \nINNER JOIN Documents AS D ON T.Template_ID = D.Template_ID \nWHERE D.Document_Name = 'Data base'", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT T.Template_Type_Code \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID \nWHERE D.Document_Name = 'Data base'", "match": {"match": true, "result": [["BK"]]}}
{"result": "```sql\nSELECT D.Document_Name \nFROM Documents D\nJOIN Templates T ON D.Template_ID = T.Template_ID\nWHERE T.Template_Type_Code = 'BK';\n```", "match": {"match": true, "result": [["Robbin CV"], ["Data base"], ["How to read a book"], ["Palm reading"], ["About Korea"]]}}
{"result": "SELECT T2.Document_Name FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Template_Type_Code = 'BK'", "match": {"match": true, "result": [["Robbin CV"], ["Data base"], ["How to read a book"], ["Palm reading"], ["About Korea"]]}}
{"result": "SELECT T.Template_Type_Code, COUNT(D.Document_ID) \nFROM Templates AS T \nLEFT JOIN Documents AS D ON T.Template_ID = D.Template_ID \nGROUP BY T.Template_Type_Code", "match": {"match": false, "result": [["AD", 3], ["BK", 5], ["CV", 0], ["PP", 4], ["PPT", 3]], "gt": [["AD", 3], ["BK", 5], ["PP", 4], ["PPT", 3]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT \n  T.Template_Type_Code, \n  COUNT(D.Document_ID) AS Number_of_Documents\nFROM \n  Templates T\nJOIN \n  Documents D ON T.Template_ID = D.Template_ID\nGROUP BY \n  T.Template_Type_Code\n```", "match": {"match": true, "result": [["AD", 3], ["BK", 5], ["PP", 4], ["PPT", 3]]}}
{"result": "SELECT T.Template_Type_Code \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID \nGROUP BY T.Template_Type_Code \nORDER BY COUNT(D.Document_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT Template_Type_Code \nFROM Templates \nWHERE Template_ID IN ( \n    SELECT Template_ID \n    FROM Documents \n) \nGROUP BY Template_Type_Code \nORDER BY COUNT(Template_ID) DESC \nLIMIT 1;", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT Template_Type_Code FROM Ref_Template_Types \nWHERE Template_Type_Code NOT IN \n(SELECT Template_Type_Code FROM Templates \nWHERE Template_ID IN \n(SELECT Template_ID FROM Documents))", "match": {"match": true, "result": [["CV"]]}}
{"result": "```sql\nSELECT Template_Type_Code \nFROM Ref_Template_Types \nWHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents))\n```", "match": {"match": true, "result": [["CV"]]}}
{"result": "```sql\nSELECT Template_Type_Code, Template_Type_Description\nFROM Ref_Template_Types;\n```", "match": {"match": true, "result": [["PPT", "Presentation"], ["CV", "CV"], ["AD", "Advertisement"], ["PP", "Paper"], ["BK", "Book"]]}}
{"result": "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types", "match": {"match": true, "result": [["PPT", "Presentation"], ["CV", "CV"], ["AD", "Advertisement"], ["PP", "Paper"], ["BK", "Book"]]}}
{"result": "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'", "match": {"match": true, "result": [["Advertisement"]]}}
{"result": "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'", "match": {"match": true, "result": [["Advertisement"]]}}
{"result": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT Template_Type_Code \nFROM Ref_Template_Types \nWHERE Template_Type_Description = 'Book'", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT DISTINCT TTT.Template_Type_Description \nFROM Ref_Template_Types TTT \nINNER JOIN Templates T ON TTT.Template_Type_Code = T.Template_Type_Code \nINNER JOIN Documents D ON T.Template_ID = D.Template_ID", "match": {"match": true, "result": [["Presentation"], ["Paper"], ["Book"], ["Advertisement"]]}}
{"result": "SELECT DISTINCT T.Template_Details \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID", "match": {"match": false, "result": [[""]], "gt": [["Presentation"], ["Paper"], ["Book"], ["Advertisement"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Template_ID \nFROM Templates AS T1 \nINNER JOIN Ref_Template_Types AS T2 \nON T1.Template_Type_Code = T2.Template_Type_Code \nWHERE T2.Template_Type_Description = 'Presentation'", "match": {"match": true, "result": [[6], [7], [10]]}}
{"result": "SELECT Template_ID FROM Templates WHERE Template_Details = 'Presentation'", "match": {"match": false, "result": [], "gt": [[6], [7], [10]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(Paragraph_ID) FROM Paragraphs", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(Paragraph_ID) FROM Paragraphs", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(P.Paragraph_ID) \nFROM Paragraphs P \nJOIN Documents D ON P.Document_ID = D.Document_ID \nWHERE D.Document_Name = 'Summer Show'", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(Paragraph_ID) \nFROM Paragraphs \nINNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID \nWHERE Documents.Document_Name = 'Summer Show'", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT Paragraph_Text, Other_Details \nFROM Paragraphs \nWHERE Paragraph_Text LIKE '%Korea %'", "match": {"match": false, "result": [], "gt": [[null], [null]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Other_Details \nFROM Paragraphs \nWHERE Paragraph_Text LIKE '%Korea%'", "match": {"match": true, "result": [[null], [null]]}}
{"result": "SELECT P.Paragraph_ID, P.Paragraph_Text \nFROM Paragraphs P \nJOIN Documents D ON P.Document_ID = D.Document_ID \nWHERE D.Document_Name = 'Welcome to NY'", "match": {"match": true, "result": [[16615, "Japan"], [608931827, "Micronesia"]]}}
{"result": "SELECT p.Paragraph_ID, p.Paragraph_Text \nFROM Paragraphs p \nJOIN Documents d ON p.Document_ID = d.Document_ID \nWHERE d.Document_Name = 'Welcome to NY';", "match": {"match": true, "result": [[16615, "Japan"], [608931827, "Micronesia"]]}}
{"result": "```sql\nSELECT T3.Paragraph_Text\nFROM Documents AS T1\nINNER JOIN Paragraphs AS T3\nON T1.Document_ID = T3.Document_ID\nWHERE T1.Document_Name = 'Customer reviews';\n```", "match": {"match": true, "result": [["Korea"], ["Ukraine"], ["Korea"]]}}
{"result": "SELECT T3.Paragraph_Text \nFROM Documents AS T1 \nINNER JOIN Paragraphs AS T3 \nON T1.Document_ID = T3.Document_ID \nWHERE T1.Document_Name = 'Customer reviews'", "match": {"match": true, "result": [["Korea"], ["Ukraine"], ["Korea"]]}}
{"result": "SELECT Document_ID, COUNT(Paragraph_ID) \nFROM Paragraphs \nGROUP BY Document_ID \nORDER BY Document_ID", "match": {"match": true, "result": [[3, 1], [80, 2], [2394, 3], [3830, 1], [33930, 1], [50123, 1], [651512, 2], [3540024, 1], [16514113, 2], [385906526, 1]]}}
{"result": "SELECT Document_ID, COUNT(Paragraph_ID) AS Number_of_Paragraphs \nFROM Paragraphs \nGROUP BY Document_ID \nORDER BY Document_ID", "match": {"match": true, "result": [[3, 1], [80, 2], [2394, 3], [3830, 1], [33930, 1], [50123, 1], [651512, 2], [3540024, 1], [16514113, 2], [385906526, 1]]}}
{"result": "SELECT \n  D.Document_ID, \n  D.Document_Name, \n  COUNT(P.Paragraph_ID) as Number_of_Paragraphs\nFROM \n  Documents D\n  LEFT JOIN Paragraphs P ON D.Document_ID = P.Document_ID\nGROUP BY \n  D.Document_ID, \n  D.Document_Name", "match": {"match": false, "result": [[0, "Introduction of OS", 0], [1, "Understanding DB", 0], [3, "Summer Show", 1], [76, "Robbin CV", 0], [80, "Welcome to NY", 2], [82, "Data base", 0], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [801801, "How to read a book", 0], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "gt": [[3, "Summer Show", 1], [80, "Welcome to NY", 2], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT \n    D.Document_ID, \n    D.Document_Name, \n    COUNT(P.Paragraph_ID) AS Number_of_Paragraphs\nFROM \n    Documents D\nLEFT JOIN \n    Paragraphs P ON D.Document_ID = P.Document_ID\nGROUP BY \n    D.Document_ID, D.Document_Name;\n```", "match": {"match": false, "result": [[0, "Introduction of OS", 0], [1, "Understanding DB", 0], [3, "Summer Show", 1], [76, "Robbin CV", 0], [80, "Welcome to NY", 2], [82, "Data base", 0], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [801801, "How to read a book", 0], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "gt": [[3, "Summer Show", 1], [80, "Welcome to NY", 2], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT Document_ID \nFROM Paragraphs \nGROUP BY Document_ID \nHAVING COUNT(Paragraph_ID) >= 2;\n```", "match": {"match": true, "result": [[80], [2394], [651512], [16514113]]}}
{"result": "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 2", "match": {"match": true, "result": [[80], [2394], [651512], [16514113]]}}
{"result": "SELECT D.Document_ID, D.Document_Name \nFROM Documents D \nJOIN (\n  SELECT Document_ID, COUNT(*) as num_paragraphs\n  FROM Paragraphs\n  GROUP BY Document_ID\n) P ON D.Document_ID = P.Document_ID\nORDER BY P.num_paragraphs DESC\nLIMIT 1", "match": {"match": true, "result": [[2394, "Customer reviews"]]}}
{"result": "SELECT D.Document_ID, D.Document_Name \nFROM Documents D \nJOIN Paragraphs P ON D.Document_ID = P.Document_ID \nGROUP BY D.Document_ID, D.Document_Name \nORDER BY COUNT(*) DESC \nLIMIT 1", "match": {"match": true, "result": [[2394, "Customer reviews"]]}}
{"result": "SELECT Document_ID FROM Documents WHERE Document_ID IN ( SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(Paragraph_ID) ASC LIMIT 1 )", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Document_ID \nFROM Documents \nWHERE Document_ID IN (\n    SELECT Document_ID \n    FROM Paragraphs \n    GROUP BY Document_ID \n    ORDER BY COUNT(Paragraph_ID) ASC \n    LIMIT 1\n)", "match": {"match": true, "result": [[3]]}}
{"result": "```sql\nSELECT Document_ID\nFROM (\n  SELECT Document_ID, COUNT(*) as count\n  FROM Paragraphs\n  GROUP BY Document_ID\n) AS t\nWHERE count BETWEEN 1 AND 2;\n```", "match": {"match": true, "result": [[3], [80], [3830], [33930], [50123], [651512], [3540024], [16514113], [385906526]]}}
{"result": "SELECT Document_ID \nFROM Paragraphs \nGROUP BY Document_ID \nHAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2", "match": {"match": true, "result": [[3], [80], [3830], [33930], [50123], [651512], [3540024], [16514113], [385906526]]}}
{"result": "SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text IN ('Brazil', 'Ireland');", "match": {"match": false, "result": [[16514113], [16514113]], "gt": [[16514113]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT DISTINCT Document_ID \nFROM Paragraphs \nWHERE Paragraph_Text LIKE '%Brazil%' OR Paragraph_Text LIKE '%Ireland%';\n```", "match": {"match": true, "result": [[16514113]]}}
{"result": "SELECT COUNT(Teacher_ID) FROM teacher", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT COUNT(Teacher_ID) FROM teacher", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT Name FROM teacher ORDER BY Age ASC", "match": {"match": true, "result": [["Vicente Carretero"], ["Gustaaf Deloor"], ["Joseph Huts"], ["John Deloor"], ["Lucy Wong"], ["Anne Walker"], ["Kearsley Brown"]]}}
{"result": "SELECT Name FROM teacher ORDER BY Age ASC", "match": {"match": true, "result": [["Vicente Carretero"], ["Gustaaf Deloor"], ["Joseph Huts"], ["John Deloor"], ["Lucy Wong"], ["Anne Walker"], ["Kearsley Brown"]]}}
{"result": "SELECT Age, Hometown FROM teacher", "match": {"match": true, "result": [["32", "Blackrod Urban District"], ["29", "Bolton County Borough"], ["26", "Farnworth Municipal Borough"], ["33", "Horwich Urban District"], ["45", "Kearsley Urban District"], ["41", "Little Lever Urban District"], ["39", "Turton Urban District"]]}}
{"result": "SELECT Age, Hometown FROM teacher", "match": {"match": true, "result": [["32", "Blackrod Urban District"], ["29", "Bolton County Borough"], ["26", "Farnworth Municipal Borough"], ["33", "Horwich Urban District"], ["45", "Kearsley Urban District"], ["41", "Little Lever Urban District"], ["39", "Turton Urban District"]]}}
{"result": "SELECT Name FROM teacher WHERE Hometown != \"Little Lever Urban District\"", "match": {"match": false, "result": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Lucy Wong"]], "gt": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Anne Walker"], ["Lucy Wong"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'", "match": {"match": false, "result": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Lucy Wong"]], "gt": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Anne Walker"], ["Lucy Wong"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT Name FROM teacher WHERE Age = '32' OR Age = '33'", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "match": {"match": true, "result": [["Farnworth Municipal Borough"]]}}
{"result": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "match": {"match": true, "result": [["Farnworth Municipal Borough"]]}}
{"result": "SELECT Hometown, COUNT(Teacher_ID) FROM teacher GROUP BY Hometown", "match": {"match": true, "result": [["Blackrod Urban District", 1], ["Bolton County Borough", 1], ["Farnworth Municipal Borough", 1], ["Horwich Urban District", 1], ["Kearsley Urban District", 1], ["Little Lever Urban District", 1], ["Turton Urban District", 1]]}}
{"result": "SELECT Hometown, COUNT(Teacher_ID) FROM teacher GROUP BY Hometown", "match": {"match": true, "result": [["Blackrod Urban District", 1], ["Bolton County Borough", 1], ["Farnworth Municipal Borough", 1], ["Horwich Urban District", 1], ["Kearsley Urban District", 1], ["Little Lever Urban District", 1], ["Turton Urban District", 1]]}}
{"result": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(Hometown) DESC LIMIT 1", "match": {"match": true, "result": [["Turton Urban District"]]}}
{"result": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(Hometown) DESC LIMIT 1", "match": {"match": true, "result": [["Turton Urban District"]]}}
{"result": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Hometown) > 1", "match": {"match": true, "result": []}}
{"result": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Hometown) > 1", "match": {"match": true, "result": []}}
{"result": "SELECT T2.Name, T1.Course FROM course AS T1 INNER JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID INNER JOIN teacher AS T2 ON T3.Teacher_ID = T2.Teacher_ID", "match": {"match": true, "result": [["Kearsley Brown", "Math"], ["Vicente Carretero", "Math"], ["Gustaaf Deloor", "Science"], ["Anne Walker", "History"], ["Anne Walker", "Bible"], ["Lucy Wong", "Music"]]}}
{"result": "SELECT T2.Name, T1.Course FROM course AS T1 INNER JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID INNER JOIN teacher AS T2 ON T2.Teacher_ID = T3.Teacher_ID", "match": {"match": true, "result": [["Kearsley Brown", "Math"], ["Vicente Carretero", "Math"], ["Gustaaf Deloor", "Science"], ["Anne Walker", "History"], ["Anne Walker", "Bible"], ["Lucy Wong", "Music"]]}}
{"result": "SELECT T.Name, C.Course FROM teacher AS T \nINNER JOIN course_arrange AS CA ON T.Teacher_ID = CA.Teacher_ID \nINNER JOIN course AS C ON CA.Course_ID = C.Course_ID \nORDER BY T.Name ASC", "match": {"match": true, "result": [["Anne Walker", "History"], ["Anne Walker", "Bible"], ["Gustaaf Deloor", "Science"], ["Kearsley Brown", "Math"], ["Lucy Wong", "Music"], ["Vicente Carretero", "Math"]]}}
{"result": "SELECT T2.Name, T1.Course FROM course AS T1 INNER JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID INNER JOIN teacher AS T2 ON T3.Teacher_ID = T2.Teacher_ID ORDER BY T2.Name ASC", "match": {"match": true, "result": [["Anne Walker", "History"], ["Anne Walker", "Bible"], ["Gustaaf Deloor", "Science"], ["Kearsley Brown", "Math"], ["Lucy Wong", "Music"], ["Vicente Carretero", "Math"]]}}
{"result": "SELECT T3.Name \nFROM course AS T1 \nINNER JOIN course_arrange AS T2 \nON T1.Course_ID = T2.Course_ID \nINNER JOIN teacher AS T3 \nON T2.Teacher_ID = T3.Teacher_ID \nWHERE T1.Course = 'Math'", "match": {"match": true, "result": [["Kearsley Brown"], ["Vicente Carretero"]]}}
{"result": "SELECT T2.Name FROM course AS T1 INNER JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID INNER JOIN teacher AS T2 ON T3.Teacher_ID = T2.Teacher_ID WHERE T1.Course = 'Math'", "match": {"match": true, "result": [["Kearsley Brown"], ["Vicente Carretero"]]}}
{"result": "SELECT T1.Name, COUNT(T2.Course_ID) \nFROM teacher AS T1 \nINNER JOIN course_arrange AS T2 \nON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T1.Name", "match": {"match": true, "result": [["Anne Walker", 2], ["Gustaaf Deloor", 1], ["Kearsley Brown", 1], ["Lucy Wong", 1], ["Vicente Carretero", 1]]}}
{"result": "SELECT T1.Name, COUNT(T2.Course_ID) FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Teacher_ID", "match": {"match": false, "result": [["Gustaaf Deloor", 1], ["Vicente Carretero", 1], ["Kearsley Brown", 1], ["Anne Walker", 2], ["Lucy Wong", 1]], "gt": [["Anne Walker", 2], ["Gustaaf Deloor", 1], ["Kearsley Brown", 1], ["Lucy Wong", 1], ["Vicente Carretero", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name \nFROM teacher AS T1 \nINNER JOIN course_arrange AS T2 \nON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T1.Teacher_ID \nHAVING COUNT(T2.Course_ID) >= 2", "match": {"match": true, "result": [["Anne Walker"]]}}
{"result": "SELECT T1.Name FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Name HAVING COUNT(T2.Course_ID) >= 2", "match": {"match": true, "result": [["Anne Walker"]]}}
{"result": "SELECT Name FROM teacher WHERE Teacher_ID NOT IN ( SELECT Teacher_ID FROM course_arrange )", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT Name \nFROM teacher \nWHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT COUNT(ID) FROM visitor WHERE Age < 30", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC", "match": {"match": true, "result": [["Gonzalo Higua\u00edn "], ["Fernando Gago"], ["Guti Midfielder"]]}}
{"result": "SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4", "match": {"match": true, "result": [[36.0]]}}
{"result": "SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC", "match": {"match": true, "result": [["Fernando Gago", 6], ["Gonzalo Higua\u00edn ", 8], ["Guti Midfielder", 5]]}}
{"result": "SELECT Museum_ID, Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1", "match": {"match": true, "result": [[1, "Plaza Museum"]]}}
{"result": "SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < '2009'", "match": {"match": true, "result": [[31.333333333333332]]}}
{"result": "SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = \"Plaza Museum\"", "match": {"match": false, "result": [["2000", 62]], "gt": [[62, "2000"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name \nFROM museum \nWHERE Num_of_Staff > ( SELECT MIN(Num_of_Staff) \n                        FROM museum \n                        WHERE Open_Year > '2010' ) \nAND Open_Year > '2010'", "match": {"match": false, "result": [["Capital Plaza Museum"]], "gt": [["Plaza Museum"], ["Capital Plaza Museum"], ["Jefferson Development Museum"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T2.ID, T2.Name, T2.Age \nFROM visit AS T1 \nINNER JOIN visitor AS T2 \nON T1.visitor_ID = T2.ID \nWHERE T2.ID IN (\n    SELECT T1.visitor_ID \n    FROM visit AS T1 \n    GROUP BY T1.visitor_ID \n    HAVING COUNT(T1.Museum_ID) > 1\n)", "match": {"match": true, "result": [[3, "Arjen Robben", 27], [5, "Fernando Gago", 36], [6, "Rafael van der Vaart", 25]]}}
{"result": "SELECT T2.ID, T2.Name, T2.Level_of_membership \nFROM visit AS T1 \nINNER JOIN visitor AS T2 \nON T1.visitor_ID = T2.ID \nORDER BY T1.Total_spent DESC \nLIMIT 1", "match": {"match": false, "result": [[3, "Arjen Robben", 1]], "gt": [["3", "Arjen Robben", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Museum_ID, T2.Name \nFROM visit AS T1 \nINNER JOIN museum AS T2 \nON T1.Museum_ID = T2.Museum_ID \nGROUP BY T2.Museum_ID, T2.Name \nORDER BY COUNT(T1.Museum_ID) DESC \nLIMIT 1", "match": {"match": true, "result": [[2, "Capital Plaza Museum"]]}}
{"result": "SELECT Name FROM museum WHERE Museum_ID NOT IN ( SELECT Museum_ID FROM visit )", "match": {"match": true, "result": [["Jefferson Development Museum"], ["RiverPark Museum"], ["Place Tower Museum"], ["Central City District Residential Museum"]]}}
{"result": "SELECT T1.Name, T1.Age \nFROM visitor AS T1 \nINNER JOIN visit AS T2 \nON T1.ID = T2.visitor_ID \nORDER BY T2.Num_of_Ticket DESC \nLIMIT 1", "match": {"match": true, "result": [["Arjen Robben", 27]]}}
{"result": "SELECT AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit", "match": {"match": true, "result": [[10.5, 24]]}}
{"result": "SELECT SUM(T3.Num_of_Ticket) FROM visitor AS T1 INNER JOIN visit AS T2 ON T1.ID = T2.visitor_ID INNER JOIN museum AS T3 ON T2.Museum_ID = T3.Museum_ID WHERE T1.Level_of_membership = 1", "match": {"match": false, "error": "Query execution failed with error: no such column: T3.Num_of_Ticket"}}
{"result": "SELECT T1.Name \nFROM visitor AS T1 \nJOIN visit AS T2 ON T1.ID = T2.visitor_ID \nJOIN museum AS T3 ON T3.Museum_ID = T2.Museum_ID \nWHERE T3.Open_Year < '2009' AND T1.ID IN (\n  SELECT T1.ID \n  FROM visitor AS T1 \n  JOIN visit AS T2 ON T1.ID = T2.visitor_ID \n  JOIN museum AS T3 ON T3.Museum_ID = T2.Museum_ID \n  WHERE T3.Open_Year > '2011'\n)", "match": {"match": true, "result": [["Fernando Gago"]]}}
{"result": "SELECT COUNT(T1.ID) \nFROM visitor AS T1 \nLEFT JOIN visit AS T2 ON T1.ID = T2.visitor_ID \nLEFT JOIN museum AS T3 ON T3.Museum_ID = T2.Museum_ID \nWHERE T3.Open_Year < 2010 OR (T3.Open_Year IS NULL AND T2.Museum_ID IS NULL)", "match": {"match": false, "result": [[5]], "gt": [[3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(Museum_ID) FROM museum WHERE CAST(REPLACE(Open_Year, 's', '') AS INT) > 2013 OR CAST(REPLACE(Open_Year, 's', '') AS INT) < 2008", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'", "match": {"match": true, "result": [[4]]}}
{"result": "SELECT name, tonnage FROM ship ORDER BY name DESC", "match": {"match": true, "result": [["Three Brothers", "t"], ["Mary", "t"], ["Lettice", "t"], ["HMS Avon", "391"], ["HMS Atalanta", "225"], ["Bon Accord", "t"], ["Bacchus", "t"]]}}
{"result": "SELECT name, date, result FROM battle", "match": {"match": false, "result": [["Battle of Adrianople", "14 April 1205", "Bulgarian victory"], ["Battle of Serres", "June 1205", "Bulgarian victory"], ["Battle of Rusion", "31 January 1206", "Bulgarian victory"], ["Battle of Rodosto", "February 1206", "Bulgarian victory"], ["Battle of Messinopolis", "4 September 1207", "Bulgarian victory"], ["Battle of Boruy", "June 1205", "Bulgarian victory"], ["Battle of Philippopolis", "31 June 1208", "Latin victory"], ["Siege of Constantinople", "1235", "Two Year Truce"]], "gt": [["Battle of Adrianople", "14 April 1205"], ["Battle of Serres", "June 1205"], ["Battle of Rusion", "31 January 1206"], ["Battle of Rodosto", "February 1206"], ["Battle of Messinopolis", "4 September 1207"], ["Battle of Boruy", "June 1205"], ["Battle of Philippopolis", "31 June 1208"], ["Siege of Constantinople", "1235"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(killed + injured) AS max_death_toll, MIN(killed + injured) AS min_death_toll FROM death", "match": {"match": true, "result": [[29, 0]]}}
{"result": "SELECT AVG(injured) FROM death", "match": {"match": true, "result": [[1.0769230769230769]]}}
{"result": "SELECT T2.injured, T2.killed FROM ship AS T1 INNER JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage = 't'", "match": {"match": false, "result": [[0, 8], [0, 3], [0, 25], [0, 2], [0, 0], [5, 4], [0, 0], [0, 29], [0, 0], [0, 0], [0, 14]], "gt": [[8, 0], [3, 0], [25, 0], [2, 0], [0, 0], [4, 5], [0, 0], [29, 0], [0, 0], [0, 0], [14, 0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril'", "match": {"match": true, "result": [["Battle of Adrianople", "Bulgarian victory"], ["Battle of Serres", "Bulgarian victory"], ["Battle of Rusion", "Bulgarian victory"], ["Battle of Rodosto", "Bulgarian victory"], ["Battle of Messinopolis", "Bulgarian victory"], ["Siege of Constantinople", "Two Year Truce"]]}}
{"result": "```sql\nSELECT DISTINCT T1.id, T1.name \nFROM battle AS T1 \nINNER JOIN ship AS T2 \nON T1.id = T2.lost_in_battle \nWHERE T2.ship_type = 'Brig'\n```", "match": {"match": true, "result": [[8, "Siege of Constantinople"], [7, "Battle of Philippopolis"], [6, "Battle of Boruy"], [5, "Battle of Messinopolis"], [4, "Battle of Rodosto"]]}}
{"result": "SELECT T1.id, T1.name \nFROM battle AS T1 \nJOIN ship AS T2 ON T1.id = T2.lost_in_battle \nJOIN death AS T3 ON T2.id = T3.caused_by_ship_id \nGROUP BY T1.id, T1.name \nHAVING SUM(T3.killed) > 10", "match": {"match": true, "result": [[5, "Battle of Messinopolis"], [6, "Battle of Boruy"], [8, "Siege of Constantinople"]]}}
{"result": "SELECT T1.id, T1.name \nFROM ship AS T1 \nINNER JOIN death AS T2 \nON T1.id = T2.caused_by_ship_id \nORDER BY T2.injured DESC \nLIMIT 1", "match": {"match": false, "result": [[4, "HMS Avon"]], "gt": [[5, "Three Brothers"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'", "match": {"match": true, "result": [["Battle of Adrianople"]]}}
{"result": "SELECT COUNT DISTINCT result FROM battle", "match": {"match": false, "error": "Query execution failed with error: near \"DISTINCT\": syntax error"}}
{"result": "SELECT COUNT(T1.id) \nFROM battle AS T1\nLEFT JOIN ship AS T2 ON T1.id = T2.lost_in_battle\nWHERE T2.tonnage = '225' AND T2.id IS NULL", "match": {"match": false, "result": [[0]], "gt": [[7]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.name, T2.date FROM ship AS T1 INNER JOIN battle AS T2 ON T1.lost_in_battle = T2.id WHERE T1.name = 'HMS Lettice' OR T1.name = 'HMS Atalanta'", "match": {"match": true, "result": [["Siege of Constantinople", "1235"]]}}
{"result": "SELECT T1.name, T1.result, T1.bulgarian_commander \nFROM battle AS T1 \nJOIN ship AS T2 ON T1.id = T2.lost_in_battle \nWHERE T2.location = 'English Channel'", "match": {"match": false, "result": [["Siege of Constantinople", "Two Year Truce", "Ivan Asen II"], ["Battle of Philippopolis", "Latin victory", "Boril"], ["Battle of Boruy", "Bulgarian victory", "Boril"], ["Battle of Messinopolis", "Bulgarian victory", "Unknown"], ["Battle of Rodosto", "Bulgarian victory", "Kaloyan"]], "gt": [["Battle of Adrianople", "Bulgarian victory", "Kaloyan"], ["Battle of Rusion", "Bulgarian victory", "Kaloyan"], ["Battle of Serres", "Bulgarian victory", "Kaloyan"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT note FROM death WHERE note LIKE '%East%'", "match": {"match": true, "result": [["East Champaran, Bihar"]]}}
{"result": "```sql\nSELECT line_1, line_2 FROM Addresses\n```", "match": {"match": true, "result": [["2294 Grant Square Apt. 235", "Apt. 370"], ["3999 Aufderhar Ways Suite 593", "Apt. 388"], ["67942 Carlotta Ferry Apt. 686", "Apt. 583"], ["0144 Lamar Plaza Apt. 346", "Suite 703"], ["858 Peggie Bypass Suite 212", "Apt. 335"], ["16998 Mraz Lodge", "Apt. 689"], ["193 Marlin Brook", "Apt. 406"], ["202 Hessel Views Apt. 468", "Apt. 305"], ["0643 Muller Vista", "Suite 383"], ["7081 Eda Center", "Suite 830"], ["9283 Schulist Falls Apt. 037", "Suite 239"], ["979 Haag Shores Suite 656", "Apt. 468"], ["492 Wilkinson Route", "Suite 865"], ["186 Evan Motorway Apt. 409", "Suite 079"], ["74046 Metz Walk Apt. 113", "Suite 674"]]}}
{"result": "```sql\nSELECT line_1, line_2 FROM Addresses;\n```", "match": {"match": true, "result": [["2294 Grant Square Apt. 235", "Apt. 370"], ["3999 Aufderhar Ways Suite 593", "Apt. 388"], ["67942 Carlotta Ferry Apt. 686", "Apt. 583"], ["0144 Lamar Plaza Apt. 346", "Suite 703"], ["858 Peggie Bypass Suite 212", "Apt. 335"], ["16998 Mraz Lodge", "Apt. 689"], ["193 Marlin Brook", "Apt. 406"], ["202 Hessel Views Apt. 468", "Apt. 305"], ["0643 Muller Vista", "Suite 383"], ["7081 Eda Center", "Suite 830"], ["9283 Schulist Falls Apt. 037", "Suite 239"], ["979 Haag Shores Suite 656", "Apt. 468"], ["492 Wilkinson Route", "Suite 865"], ["186 Evan Motorway Apt. 409", "Suite 079"], ["74046 Metz Walk Apt. 113", "Suite 674"]]}}
{"result": "SELECT COUNT(course_id) FROM Courses", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(course_id) FROM Courses", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT course_description FROM Courses WHERE course_name = 'Math'", "match": {"match": false, "result": [], "gt": [["q"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT course_description FROM Courses WHERE course_name LIKE '%math%'", "match": {"match": true, "result": [["q"]]}}
{"result": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'", "match": {"match": true, "result": [["148"]]}}
{"result": "SELECT zip_postcode FROM Addresses WHERE city LIKE 'Port Chelsea'", "match": {"match": true, "result": [["148"]]}}
{"result": "SELECT T1.department_name, T1.department_id \nFROM Departments AS T1 \nJOIN Degree_Programs AS T2 \nON T1.department_id = T2.department_id \nGROUP BY T1.department_name, T1.department_id \nORDER BY COUNT(T2.degree_program_id) DESC LIMIT 1", "match": {"match": true, "result": [["statistics", 8]]}}
{"result": "SELECT T1.department_name, T1.department_id \nFROM Departments AS T1 \nINNER JOIN Degree_Programs AS T2 \nON T1.department_id = T2.department_id \nGROUP BY T1.department_name, T1.department_id \nORDER BY COUNT(T2.degree_program_id) DESC \nLIMIT 1", "match": {"match": true, "result": [["statistics", 8]]}}
{"result": "SELECT COUNT(department_id) FROM Degree_Programs", "match": {"match": false, "result": [[15]], "gt": [[10]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(department_id) FROM Degree_Programs", "match": {"match": false, "result": [[15]], "gt": [[10]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(degree_program_id) FROM Degree_Programs", "match": {"match": false, "result": [[15]], "gt": [[3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(T1.degree_program_id) FROM Degree_Programs AS T1 INNER JOIN Departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Engineering'", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(T1.degree_program_id) FROM Degree_Programs AS T1 INNER JOIN Departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Engineering'", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT section_name, section_description FROM Sections", "match": {"match": true, "result": [["a", "non"], ["b", "voluptatem"], ["c", "qui"], ["d", "voluptas"], ["e", "ex"], ["f", "doloremque"], ["g", "provident"], ["h", "et"], ["j", "quis"], ["k", "nesciunt"], ["l", "ad"], ["o", "et"], ["p", "facilis"], ["u", "reprehenderit"], ["y", "qui"]]}}
{"result": "SELECT section_name, section_description FROM Sections", "match": {"match": true, "result": [["a", "non"], ["b", "voluptatem"], ["c", "qui"], ["d", "voluptas"], ["e", "ex"], ["f", "doloremque"], ["g", "provident"], ["h", "et"], ["j", "quis"], ["k", "nesciunt"], ["l", "ad"], ["o", "et"], ["p", "facilis"], ["u", "reprehenderit"], ["y", "qui"]]}}
{"result": "```sql\nSELECT \n    T1.course_name, \n    T1.course_id\nFROM \n    Courses T1\nJOIN \n    Sections T2 ON T1.course_id = T2.course_id\nGROUP BY \n    T1.course_name, \n    T1.course_id\nHAVING \n    COUNT(T2.section_id) <= 2\n```", "match": {"match": false, "result": [["cal", 7], ["db", 12], ["dl", 9], ["ds", 1], ["en", 4], ["fr", 5], ["la", 6], ["math", 2], ["ml", 10], ["nlp", 8], ["pl", 14]], "gt": [["ds", 1], ["math", 2], ["en", 4], ["fr", 5], ["la", 6], ["cal", 7], ["nlp", 8], ["dl", 9], ["ml", 10], ["db", 12], ["pl", 14]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT \n    c.course_name, \n    c.course_id\nFROM \n    Courses c\nWHERE \n    c.course_id IN (\n        SELECT \n            s.course_id\n        FROM \n            Sections s\n        GROUP BY \n            s.course_id\n        HAVING \n            COUNT(s.section_id) < 2\n    );\n```", "match": {"match": false, "result": [["math", 2], ["en", 4], ["la", 6], ["cal", 7], ["dl", 9], ["ml", 10], ["db", 12]], "gt": [["ds", 1], ["math", 2], ["en", 4], ["fr", 5], ["la", 6], ["cal", 7], ["nlp", 8], ["dl", 9], ["ml", 10], ["db", 12], ["pl", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT section_name FROM Sections ORDER BY section_name DESC", "match": {"match": true, "result": [["y"], ["u"], ["p"], ["o"], ["l"], ["k"], ["j"], ["h"], ["g"], ["f"], ["e"], ["d"], ["c"], ["b"], ["a"]]}}
{"result": "SELECT section_name FROM Sections ORDER BY section_name DESC", "match": {"match": true, "result": [["y"], ["u"], ["p"], ["o"], ["l"], ["k"], ["j"], ["h"], ["g"], ["f"], ["e"], ["d"], ["c"], ["b"], ["a"]]}}
{"result": "```sql\nSELECT T2.semester_name, T2.semester_id\nFROM Student_Enrolment AS T1\nINNER JOIN Semesters AS T2 ON T1.semester_id = T2.semester_id\nGROUP BY T2.semester_name, T2.semester_id\nORDER BY COUNT(T1.student_enrolment_id) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [["summer 2010", 2]]}}
{"result": "```sql\nSELECT T1.semester_name, T1.semester_id\nFROM Semesters T1\nJOIN Student_Enrolment T2 ON T1.semester_id = T2.semester_id\nGROUP BY T1.semester_id\nORDER BY COUNT(T2.student_id) DESC\nLIMIT 1\n```", "match": {"match": true, "result": [["summer 2010", 2]]}}
{"result": "SELECT department_description FROM Departments WHERE department_name LIKE '%Computer%'", "match": {"match": true, "result": [["error"]]}}
{"result": "SELECT department_description FROM Departments WHERE department_name LIKE '%Computer%'", "match": {"match": true, "result": [["error"]]}}
{"result": "SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id \nFROM Students AS T1 \nINNER JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id \nGROUP BY T1.student_id \nHAVING COUNT(T2.degree_program_id) = 2", "match": {"match": true, "result": [["Jarvis", "Aaliyah", "Carroll", 4], ["Reva", "Golda", "Osinski", 9], ["Jordy", "Osborne", "Rempel", 14]]}}
{"result": "SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name\nFROM Students AS T1\nINNER JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id\nGROUP BY T1.student_id, T1.first_name, T1.middle_name, T1.last_name\nHAVING COUNT(T1.student_id) = 2", "match": {"match": false, "result": [[4, "Jarvis", "Aaliyah", "Carroll"], [9, "Reva", "Golda", "Osinski"], [14, "Jordy", "Osborne", "Rempel"]], "gt": [["Jarvis", "Aaliyah", "Carroll", 4], ["Reva", "Golda", "Osinski", 9], ["Jordy", "Osborne", "Rempel", 14]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT T3.first_name, T3.middle_name, T3.last_name\nFROM Degree_Programs AS T1\nJOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id\nJOIN Students AS T3 ON T2.student_id = T3.student_id\nWHERE T1.degree_summary_name LIKE '%Bachelor%';\n```", "match": {"match": false, "result": [["Reva", "Golda", "Osinski"], ["Frida", "Aisha", "Huel"], ["Reva", "Golda", "Osinski"], ["Jarvis", "Aaliyah", "Carroll"], ["Frida", "Aisha", "Huel"], ["Jarvis", "Aaliyah", "Carroll"], ["Milton", "Vaughn", "Christiansen"], ["Stanford", "Mona", "Rogahn"]], "gt": [["Reva", "Golda", "Osinski"], ["Frida", "Aisha", "Huel"], ["Jarvis", "Aaliyah", "Carroll"], ["Milton", "Vaughn", "Christiansen"], ["Stanford", "Mona", "Rogahn"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.first_name, T1.middle_name, T1.last_name \nFROM Students AS T1 \nINNER JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id \nINNER JOIN Degree_Programs AS T3 ON T3.degree_program_id = T2.degree_program_id \nWHERE T3.degree_summary_name LIKE '%Bachelors%'", "match": {"match": false, "result": [], "gt": [["Reva", "Golda", "Osinski"], ["Frida", "Aisha", "Huel"], ["Jarvis", "Aaliyah", "Carroll"], ["Milton", "Vaughn", "Christiansen"], ["Stanford", "Mona", "Rogahn"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.degree_summary_name\nFROM Degree_Programs AS T1\nLEFT JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id\nGROUP BY T1.degree_program_id, T1.degree_summary_name\nORDER BY COUNT(T2.student_id) DESC\nLIMIT 1", "match": {"match": true, "result": [["Bachelor"]]}}
{"result": "```sql\nSELECT \n    T3.degree_summary_name\nFROM \n    Student_Enrolment AS T1\nJOIN \n    Degree_Programs AS T3 ON T1.degree_program_id = T3.degree_program_id\nGROUP BY \n    T3.degree_summary_name\nORDER BY \n    COUNT(T1.student_id) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [["Bachelor"]]}}
{"result": "```sql\nSELECT T2.degree_program_id, T2.degree_summary_name\nFROM Degree_Programs T2\nJOIN Student_Enrolment T1 ON T1.degree_program_id = T2.degree_program_id\nGROUP BY T2.degree_program_id, T2.degree_summary_name\nORDER BY COUNT(T1.student_id) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [[9, "Bachelor"]]}}
{"result": "SELECT T1.degree_program_id, T2.degree_summary_name \nFROM Student_Enrolment AS T1 \nJOIN Degree_Programs AS T2 \nON T1.degree_program_id = T2.degree_program_id \nGROUP BY T2.degree_summary_name \nORDER BY COUNT(T1.student_id) DESC LIMIT 1", "match": {"match": false, "result": [[4, "Bachelor"]], "gt": [[9, "Bachelor"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT \n    T1.student_id, \n    T1.first_name, \n    T1.middle_name, \n    T1.last_name, \n    COUNT(T2.student_enrolment_id) AS total_enrollments\nFROM \n    Students T1\nJOIN \n    Student_Enrolment T2 ON T1.student_id = T2.student_id\nGROUP BY \n    T1.student_id, \n    T1.first_name, \n    T1.middle_name, \n    T1.last_name\nORDER BY \n    total_enrollments DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [[6, "Stanford", "Mona", "Rogahn", 3]], "gt": [[7, "Frida", "Aisha", "Huel", 3, 7]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT \n    T3.first_name, \n    T3.middle_name, \n    T3.last_name, \n    T3.student_id, \n    T1.enrolment_count\nFROM \n    (\n    SELECT \n        student_id, \n        COUNT(*) as enrolment_count\n    FROM \n        Student_Enrolment\n    GROUP BY \n        student_id\n    ) T1\nJOIN \n    Student_Enrolment T2 ON T1.student_id = T2.student_id\nJOIN \n    Students T3 ON T1.student_id = T3.student_id\nORDER BY \n    T1.enrolment_count DESC\nLIMIT 1\n```", "match": {"match": false, "result": [["Frida", "Aisha", "Huel", 7, 3]], "gt": [[7, "Frida", "Aisha", "Huel", 3, 7]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT semester_name\nFROM Semesters\nWHERE semester_id NOT IN (\n    SELECT semester_id\n    FROM Student_Enrolment\n)\n```", "match": {"match": true, "result": [["fall 2010"], ["spring 2013"], ["spring 2014"], ["spring 2016"], ["spring 2017"], ["winter 2018"]]}}
{"result": "```sql\nSELECT semester_name \nFROM Semesters \nWHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)\n```", "match": {"match": true, "result": [["fall 2010"], ["spring 2013"], ["spring 2014"], ["spring 2016"], ["spring 2017"], ["winter 2018"]]}}
{"result": "```sql\nSELECT DISTINCT T1.course_name\nFROM Courses T1\nJOIN Sections T2 ON T1.course_id = T2.course_id\nJOIN Student_Enrolment_Courses T3 ON T2.course_id = T3.course_id\n```", "match": {"match": false, "result": [["math"], ["nlp"], ["db"], ["pl"], ["en"], ["la"], ["ml"]], "gt": [["la"], ["pl"], ["ai"], ["math"], ["ml"], ["os"], ["en"], ["nlp"], ["rs"], ["db"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT DISTINCT T1.course_name\nFROM Courses AS T1\nINNER JOIN Sections AS T2 ON T1.course_id = T2.course_id\nINNER JOIN Student_Enrolment_Courses AS T3 ON T2.course_id = T3.course_id\n```", "match": {"match": false, "result": [["math"], ["nlp"], ["db"], ["pl"], ["en"], ["la"], ["ml"]], "gt": [["la"], ["pl"], ["ai"], ["math"], ["ml"], ["os"], ["en"], ["nlp"], ["rs"], ["db"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.course_name FROM Courses AS T1 INNER JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(T2.course_id) DESC LIMIT 1", "match": {"match": true, "result": [["rs"]]}}
{"result": "SELECT T2.course_name \nFROM Student_Enrolment_Courses AS T1 \nJOIN Courses AS T2 ON T1.course_id = T2.course_id \nGROUP BY T2.course_name \nORDER BY COUNT(T1.student_course_id) DESC \nLIMIT 1", "match": {"match": true, "result": [["rs"]]}}
{"result": "SELECT DISTINCT T3.last_name FROM Addresses AS T1 \nINNER JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id \nINNER JOIN Students AS T3 ON T3.student_id = T2.student_id \nWHERE T1.state_province_county = 'North Carolina'\nAND T3.student_id NOT IN ( SELECT student_id FROM Student_Enrolment )", "match": {"match": false, "result": [], "gt": [["Gleichner"], ["Weimann"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.last_name \nFROM (\n  SELECT S.last_name, S.student_id, COUNT(SE.student_id) as num_enrolments\n  FROM Students S\n  LEFT JOIN Student_Enrolment SE ON S.student_id = SE.student_id\n  JOIN Addresses A ON S.permanent_address_id = A.address_id\n  WHERE A.state_province_county = 'North Carolina'\n  GROUP BY S.last_name, S.student_id\n) T\nWHERE T.num_enrolments = 0", "match": {"match": false, "result": [], "gt": [["Gleichner"], ["Weimann"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT T.transcript_date, T.transcript_id\nFROM Transcripts T\nJOIN Transcript_Contents TC ON T.transcript_id = TC.transcript_id\nGROUP BY T.transcript_id, T.transcript_date\nHAVING COUNT(TC.student_course_id) >= 2\n```", "match": {"match": true, "result": [["2013-06-30 13:01:40", 5], ["2010-12-13 10:55:15", 6], ["1975-05-06 12:04:47", 8], ["1998-11-22 12:18:29", 15]]}}
{"result": "SELECT T.transcript_date, T.transcript_id \nFROM Transcripts T \nJOIN Transcript_Contents TC ON T.transcript_id = TC.transcript_id \nGROUP BY T.transcript_date, T.transcript_id \nHAVING COUNT(TC.student_course_id) >= 2", "match": {"match": false, "result": [["1975-05-06 12:04:47", 8], ["1998-11-22 12:18:29", 15], ["2010-12-13 10:55:15", 6], ["2013-06-30 13:01:40", 5]], "gt": [["2013-06-30 13:01:40", 5], ["2010-12-13 10:55:15", 6], ["1975-05-06 12:04:47", 8], ["1998-11-22 12:18:29", 15]], "error": "Query result does not match ground truth."}}
{"result": "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'", "match": {"match": true, "result": [["(096)889-8954x524"]]}}
{"result": "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'", "match": {"match": false, "result": [["(096)889-8954x524"]], "gt": [], "error": "Query result does not match ground truth."}}
{"result": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT T2.first_name, T2.middle_name, T2.last_name \nFROM Student_Enrolment T1 \nINNER JOIN Students T2 ON T1.student_id = T2.student_id \nWHERE T2.date_left != '0000-00-00 00:00:00' \nORDER BY T2.date_left ASC LIMIT 1", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT first_name, middle_name, last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left ASC LIMIT 1", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "match": {"match": true, "result": [["Timmothy"], ["Hobart"], ["Warren"], ["Jarvis"], ["Stanford"], ["Frida"], ["Delaney"], ["Reva"], ["Helga"], ["Gregg"], ["Orrin"], ["Deon"], ["Jordy"], ["Jett"]]}}
{"result": "SELECT T1.first_name FROM Students AS T1 INNER JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id INNER JOIN Addresses AS T3 ON T1.current_address_id = T3.address_id WHERE T2.address_id != T3.address_id", "match": {"match": true, "result": [["Timmothy"], ["Hobart"], ["Warren"], ["Jarvis"], ["Stanford"], ["Frida"], ["Delaney"], ["Reva"], ["Helga"], ["Gregg"], ["Orrin"], ["Deon"], ["Jordy"], ["Jett"]]}}
{"result": "SELECT address_id, line_1, line_2, line_3 FROM Addresses WHERE address_id IN ( SELECT current_address_id FROM Students GROUP BY current_address_id ORDER BY COUNT(current_address_id) DESC LIMIT 1 )", "match": {"match": false, "result": [[9, "0643 Muller Vista", "Suite 383", null]], "gt": [[9, "0643 Muller Vista", "Suite 383"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.address_id, T1.line_1, T1.line_2 FROM Addresses AS T1 INNER JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1", "match": {"match": true, "result": [[9, "0643 Muller Vista", "Suite 383"]]}}
{"result": "SELECT AVG(strftime('%J', `transcript_date`)) FROM `Transcripts`", "match": {"match": false, "result": [[2448053.8884891975]], "gt": [[1989.9333333333334]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(transcript_date) FROM Transcripts", "match": {"match": true, "result": [[1989.9333333333334]]}}
{"result": "SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date LIMIT 1", "match": {"match": true, "result": [["1975-05-06 12:04:47", null]]}}
{"result": "```sql\nSELECT transcript_date, other_details \nFROM Transcripts \nORDER BY transcript_date ASC \nLIMIT 1;\n```", "match": {"match": true, "result": [["1975-05-06 12:04:47", null]]}}
{"result": "SELECT COUNT(transcript_id) FROM Transcripts", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(transcript_id) FROM Transcripts", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT MAX(transcript_date) FROM Transcripts", "match": {"match": true, "result": [["2013-06-30 13:01:40"]]}}
{"result": "SELECT MAX(transcript_date) FROM Transcripts", "match": {"match": true, "result": [["2013-06-30 13:01:40"]]}}
{"result": "SELECT COUNT(T1.transcript_id), T2.student_course_id\nFROM Transcript_Contents AS T1\nINNER JOIN Student_Enrolment_Courses AS T2\nON T1.student_course_id = T2.student_course_id\nGROUP BY T2.student_course_id\nORDER BY COUNT(T1.transcript_id) DESC\nLIMIT 1", "match": {"match": true, "result": [[4, 0]]}}
{"result": "SELECT T3.student_enrolment_id, COUNT(T3.student_enrolment_id) \nFROM Student_Enrolment_Courses AS T1 \nINNER JOIN Transcript_Contents AS T2 \nON T1.student_course_id = T2.student_course_id \nINNER JOIN Student_Enrolment AS T3 \nON T1.student_enrolment_id = T3.student_enrolment_id \nGROUP BY T3.student_enrolment_id \nORDER BY COUNT(T3.student_enrolment_id) DESC LIMIT 1", "match": {"match": false, "result": [[2, 4]], "gt": [[4, 0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT t.transcript_id, t.transcript_date\nFROM Transcripts t\nJOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id\nGROUP BY t.transcript_id, t.transcript_date\nORDER BY COUNT(tc.transcript_id)\nLIMIT 1", "match": {"match": false, "result": [[2, "1975-10-28 15:16:51"]], "gt": [["1975-10-28 15:16:51", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.transcript_id, T.transcript_date \nFROM Transcripts T \nJOIN Transcript_Contents TC ON T.transcript_id = TC.transcript_id \nGROUP BY T.transcript_id \nORDER BY COUNT(TC.student_course_id) \nLIMIT 1", "match": {"match": false, "result": [[2, "1975-10-28 15:16:51"]], "gt": [["1975-10-28 15:16:51", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.semester_name\nFROM Semesters AS T1\nINNER JOIN Student_Enrolment AS T2\nON T1.semester_id = T2.semester_id\nINNER JOIN Degree_Programs AS T3\nON T2.degree_program_id = T3.degree_program_id\nWHERE T3.degree_summary_name = 'Master' AND T3.degree_summary_name = 'Bachelor'", "match": {"match": false, "result": [], "gt": [[13]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.semester_id \nFROM Degree_Programs AS T1 \nINNER JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id \nWHERE T1.degree_summary_name IN ('Masters', 'Bachelors') \nGROUP BY T2.semester_id \nHAVING COUNT(DISTINCT T1.degree_summary_name) = 2", "match": {"match": false, "result": [], "gt": [[13]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT current_address_id) FROM Students", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT DISTINCT line_1, line_2, line_3, city, zip_postcode, state_province_county, country FROM Addresses AS T1 INNER JOIN Students AS T2 ON T1.address_id = T2.current_address_id", "match": {"match": false, "result": [["7081 Eda Center", "Suite 830", null, "Rutherfordtown", "839", "Delaware", "Kyrgyz Republic"], ["979 Haag Shores Suite 656", "Apt. 468", null, "Prohaskafort", "590", "SouthDakota", "Lesotho"], ["0643 Muller Vista", "Suite 383", null, "Port Elvisfurt", "777", "NorthCarolina", "Gabon"], ["193 Marlin Brook", "Apt. 406", null, "Herzoghaven", "068", "Arkansas", "Cook Islands"], ["16998 Mraz Lodge", "Apt. 689", null, "North Omer", "902", "Kentucky", "Gibraltar"], ["74046 Metz Walk Apt. 113", "Suite 674", null, "Port Oceane", "669", "Wyoming", "Norfolk Island"], ["2294 Grant Square Apt. 235", "Apt. 370", null, "Port Chelsea", "148", "Virginia", "Iceland"], ["3999 Aufderhar Ways Suite 593", "Apt. 388", null, "Lake Laishafurt", "943", "Kentucky", "Burundi"], ["186 Evan Motorway Apt. 409", "Suite 079", null, "Lake Careyberg", "895", "Kentucky", "New Caledonia"]], "gt": [[9]], "error": "Query result does not match ground truth."}}
{"result": "SELECT * FROM Students ORDER BY last_name DESC", "match": {"match": false, "result": [[13, 9, 8, "Deon", "Brooklyn", "Weimann", "(213)445-0399x85208", "jhuel@example.com", "68095", "1986-02-24 21:12:23", "2014-05-30 23:32:02", "assumenda"], [1, 10, 15, "Timmothy", "Anna", "Ward", "(096)889-8954x524", "erwin.zboncak@example.com", "965", "1971-02-05 07:28:23", "1971-05-17 19:28:49", "quia"], [11, 14, 4, "Gregg", "Mossie", "Schuppe", "(462)246-7921", "nbruen@example.org", "494", "1989-05-24 23:31:29", "1975-10-09 00:49:27", "omnis"], [6, 6, 3, "Stanford", "Mona", "Rogahn", "436.613.7683", "skassulke@example.net", "248", "1997-03-20 16:47:25", "2016-04-09 12:27:04", "qui"], [14, 12, 11, "Jordy", "Osborne", "Rempel", "(605)919-3594x3661", "gracie29@example.com", "34458427", "2004-12-24 12:36:46", "1999-08-24 00:07:10", "et"], [9, 2, 15, "Reva", "Golda", "Osinski", "(507)365-8405", "qo'kon@example.com", "39", "2017-01-04 08:10:25", "1990-09-01 05:03:27", "nesciunt"], [10, 15, 14, "Helga", "Cleve", "Mohr", "677.401.9382", "nya.lesch@example.net", "43", "2009-09-25 00:14:25", "2017-07-09 21:38:43", "rerum"], [12, 14, 9, "Orrin", "Neal", "Kemmer", "(982)153-1469x1733", "beth42@example.org", "6274274", "2005-12-15 08:42:10", "2006-08-04 17:26:49", "non"], [15, 2, 9, "Jett", "Alberta", "Jaskolski", "877.549.9067x8723", "mya88@example.org", "156", "1982-06-19 13:15:18", "1982-06-11 00:25:39", "omnis"], [7, 15, 3, "Frida", "Aisha", "Huel", "1-879-796-8987x164", "baumbach.lucious@example.org", "668", "2018-03-13 09:56:22", "1997-11-16 08:54:33", "dolorum"], [3, 9, 5, "Warren", "Violet", "Gleichner", "07661787471", "johns.unique@example.net", "3", "2007-08-29 23:25:41", "2007-03-31 09:53:19", "facilis"], [5, 9, 9, "Milton", "Vaughn", "Christiansen", "171-642-5684", "lhartmann@example.org", "", "1973-05-19 19:12:46", "2007-11-28 12:50:21", "laborum"], [4, 7, 11, "Jarvis", "Aaliyah", "Carroll", "09700166582", "jillian26@example.net", "141072406", "2014-03-28 05:48:23", "2007-08-02 04:12:58", "atque"], [2, 12, 5, "Hobart", "Lorenz", "Balistreri", "1-009-710-5151", "swift.kolby@example.com", "304246", "1976-10-26 02:33:06", "2013-10-05 17:41:28", "autem"], [8, 1, 5, "Delaney", "Judd", "Ankunding", "03174364122", "dell43@example.net", "402", "1982-02-14 08:46:35", "2004-12-08 05:29:11", "voluptatem"]], "gt": [["voluptatem"], ["rerum"], ["quia"], ["qui"], ["omnis"], ["omnis"], ["non"], ["nesciunt"], ["laborum"], ["facilis"], ["et"], ["dolorum"], ["autem"], ["atque"], ["assumenda"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "match": {"match": true, "result": [["voluptatem"], ["rerum"], ["quia"], ["qui"], ["omnis"], ["omnis"], ["non"], ["nesciunt"], ["laborum"], ["facilis"], ["et"], ["dolorum"], ["autem"], ["atque"], ["assumenda"]]}}
{"result": "DESCRIBE Sections", "match": {"match": false, "error": "Query execution failed with error: near \"DESCRIBE\": syntax error"}}
{"result": "SELECT section_description FROM Sections WHERE section_name = 'h'", "match": {"match": true, "result": [["et"]]}}
{"result": "```sql\nSELECT T2.first_name \nFROM Addresses AS T1 \nJOIN Students AS T2 \nON T1.address_id = T2.permanent_address_id \nWHERE T1.country = 'Haiti' \nOR T2.cell_mobile_number = '09700166582';\n```", "match": {"match": false, "result": [["Hobart"], ["Warren"], ["Jarvis"], ["Delaney"]], "gt": [["Jarvis"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T3.first_name FROM Addresses AS T1 INNER JOIN Students AS T3 ON T1.address_id = T3.permanent_address_id WHERE T1.country = 'Haiti' UNION SELECT T3.first_name FROM Addresses AS T1 INNER JOIN Students AS T3 ON T1.address_id = T3.current_address_id WHERE T3.cell_mobile_number = '09700166582'", "match": {"match": false, "result": [["Delaney"], ["Hobart"], ["Jarvis"], ["Warren"]], "gt": [["Jarvis"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Title FROM Cartoon ORDER BY Title ASC", "match": {"match": true, "result": [["Dawn of the Dead Man!"], ["Day of the Dark Knight!"], ["Deep Cover for Batman!"], ["Enter the Outsiders!"], ["Evil Under the Sea!"], ["Fall of the Blue Beetle!"], ["Invasion of the Secret Santas!"], ["Journey to the Center of the Bat!"], ["Return of the Fearsome Fangs!"], ["Terror on Dinosaur Island!"], ["The Eyes of Despero!"], ["The Rise of the Blue Beetle!"]]}}
{"result": "SELECT Title FROM Cartoon ORDER BY Title", "match": {"match": true, "result": [["Dawn of the Dead Man!"], ["Day of the Dark Knight!"], ["Deep Cover for Batman!"], ["Enter the Outsiders!"], ["Evil Under the Sea!"], ["Fall of the Blue Beetle!"], ["Invasion of the Secret Santas!"], ["Journey to the Center of the Bat!"], ["Return of the Fearsome Fangs!"], ["Terror on Dinosaur Island!"], ["The Eyes of Despero!"], ["The Rise of the Blue Beetle!"]]}}
{"result": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Day of the Dark Knight!"], ["Dawn of the Dead Man!"], ["The Eyes of Despero!"]]}}
{"result": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Day of the Dark Knight!"], ["Dawn of the Dead Man!"], ["The Eyes of Despero!"]]}}
{"result": "SELECT COUNT(id) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(id) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT T1.Title, T1.Directed_by, T1.Original_air_date \nFROM Cartoon AS T1 \nORDER BY T1.Original_air_date", "match": {"match": false, "result": [["Invasion of the Secret Santas!", "Brandon Vietti", "December12,2008"], ["Evil Under the Sea!", "Michael Chang", "December5,2008"], ["Return of the Fearsome Fangs!", "Brandon Vietti", "February20,2009"], ["Deep Cover for Batman!", "Michael Chang", "February27,2009"], ["The Eyes of Despero!", "Ben Jones", "February6,2009"], ["Dawn of the Dead Man!", "Ben Jones", "January16,2009"], ["Day of the Dark Knight!", "Ben Jones", "January2,2009"], ["Fall of the Blue Beetle!", "Brandon Vietti", "January23,2009"], ["Journey to the Center of the Bat!", "Michael Chang", "January30,2009"], ["Enter the Outsiders!", "Michael Chang", "January9,2009"], ["The Rise of the Blue Beetle!", "Ben Jones", "November14,2008"], ["Terror on Dinosaur Island!", "Brandon Vietti", "November21,2008"]], "gt": [["Invasion of the Secret Santas!", "Brandon Vietti"], ["Evil Under the Sea!", "Michael Chang"], ["Return of the Fearsome Fangs!", "Brandon Vietti"], ["Deep Cover for Batman!", "Michael Chang"], ["The Eyes of Despero!", "Ben Jones"], ["Dawn of the Dead Man!", "Ben Jones"], ["Day of the Dark Knight!", "Ben Jones"], ["Fall of the Blue Beetle!", "Brandon Vietti"], ["Journey to the Center of the Bat!", "Michael Chang"], ["Enter the Outsiders!", "Michael Chang"], ["The Rise of the Blue Beetle!", "Ben Jones"], ["Terror on Dinosaur Island!", "Brandon Vietti"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date", "match": {"match": true, "result": [["Invasion of the Secret Santas!", "Brandon Vietti"], ["Evil Under the Sea!", "Michael Chang"], ["Return of the Fearsome Fangs!", "Brandon Vietti"], ["Deep Cover for Batman!", "Michael Chang"], ["The Eyes of Despero!", "Ben Jones"], ["Dawn of the Dead Man!", "Ben Jones"], ["Day of the Dark Knight!", "Ben Jones"], ["Fall of the Blue Beetle!", "Brandon Vietti"], ["Journey to the Center of the Bat!", "Michael Chang"], ["Enter the Outsiders!", "Michael Chang"], ["The Rise of the Blue Beetle!", "Ben Jones"], ["Terror on Dinosaur Island!", "Brandon Vietti"]]}}
{"result": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\"", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Terror on Dinosaur Island!"], ["Day of the Dark Knight!"], ["Invasion of the Secret Santas!"], ["Dawn of the Dead Man!"], ["Fall of the Blue Beetle!"], ["The Eyes of Despero!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti')", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Terror on Dinosaur Island!"], ["Day of the Dark Knight!"], ["Invasion of the Secret Santas!"], ["Dawn of the Dead Man!"], ["Fall of the Blue Beetle!"], ["The Eyes of Despero!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT Country, COUNT(id) FROM TV_Channel GROUP BY Country ORDER BY COUNT(id) DESC LIMIT 1", "match": {"match": true, "result": [["Italy", 12]]}}
{"result": "SELECT Country, COUNT(id) FROM TV_Channel GROUP BY Country ORDER BY COUNT(id) DESC LIMIT 1", "match": {"match": true, "result": [["Italy", 12]]}}
{"result": "SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel", "match": {"match": true, "result": [[15, 1]]}}
{"result": "SELECT COUNT(DISTINCT series_name) , COUNT(DISTINCT Content) FROM TV_Channel", "match": {"match": true, "result": [[15, 1]]}}
{"result": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "match": {"match": true, "result": [["music"]]}}
{"result": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"", "match": {"match": true, "result": [["music"]]}}
{"result": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"", "match": {"match": true, "result": [["Sky Famiglia"]]}}
{"result": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"", "match": {"match": true, "result": [["Sky Famiglia"]]}}
{"result": "SELECT COUNT id FROM TV_Channel WHERE Language = 'English'", "match": {"match": false, "error": "Query execution failed with error: no such column: COUNT"}}
{"result": "SELECT COUNT(id) FROM TV_Channel WHERE Language = 'English'", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Language, COUNT(id) FROM TV_Channel GROUP BY Language ORDER BY COUNT(id) ASC LIMIT 1", "match": {"match": true, "result": [["English", 3]]}}
{"result": "SELECT Language, COUNT(id) FROM TV_Channel GROUP BY Language ORDER BY COUNT(id) ASC LIMIT 1", "match": {"match": true, "result": [["English", 3]]}}
{"result": "SELECT Language, COUNT(id) FROM TV_Channel GROUP BY Language", "match": {"match": true, "result": [["English", 3], ["Italian", 12]]}}
{"result": "SELECT Language, COUNT(id) FROM TV_Channel GROUP BY Language", "match": {"match": true, "result": [["English", 3], ["Italian", 12]]}}
{"result": "SELECT T1.series_name FROM TV_Channel AS T1 INNER JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'", "match": {"match": true, "result": [["Sky Radio"]]}}
{"result": "SELECT T2.series_name FROM Cartoon AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Title = \"The Rise of the Blue Beetle\"", "match": {"match": false, "result": [], "gt": [["Sky Radio"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Title FROM TV_Channel AS T1 INNER JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT T1.Title FROM Cartoon AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT Episode FROM TV_series ORDER BY Rating", "match": {"match": true, "result": [["The Hanged Man"], ["Double Down"], ["Home By Another Way"], ["Keepers"], ["Emily"], ["Blowback"], ["The Legend of Dylan McCleen"], ["Winterland"], ["The Year of the Rabbit"], ["Game Three"], ["Friendly Skies"], ["A Love of a Lifetime"]]}}
{"result": "SELECT Episode FROM TV_series ORDER BY Rating", "match": {"match": true, "result": [["The Hanged Man"], ["Double Down"], ["Home By Another Way"], ["Keepers"], ["Emily"], ["Blowback"], ["The Legend of Dylan McCleen"], ["Winterland"], ["The Year of the Rabbit"], ["Game Three"], ["Friendly Skies"], ["A Love of a Lifetime"]]}}
{"result": "SELECT Episode, Rating FROM TV_series ORDER BY CAST(REPLACE(Rating, '+', '') AS REAL) DESC LIMIT 3", "match": {"match": true, "result": [["A Love of a Lifetime", "5.8"], ["Friendly Skies", "5.3"], ["Game Three", "4.4"]]}}
{"result": "SELECT Episode, Rating FROM TV_series ORDER BY Share DESC LIMIT 3", "match": {"match": true, "result": [["A Love of a Lifetime", "5.8"], ["Friendly Skies", "5.3"], ["Game Three", "4.4"]]}}
{"result": "SELECT MIN(Share), MAX(Share) FROM TV_series", "match": {"match": false, "result": [[5.0, 9.0]], "gt": [[9.0, 5.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(Share), MIN(Share) FROM TV_series", "match": {"match": true, "result": [[9.0, 5.0]]}}
{"result": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'", "match": {"match": true, "result": [["September 24, 2007"]]}}
{"result": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'", "match": {"match": true, "result": [["September 24, 2007"]]}}
{"result": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'", "match": {"match": true, "result": [[43.0]]}}
{"result": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'", "match": {"match": true, "result": [[43.0]]}}
{"result": "SELECT T1.series_name \nFROM TV_Channel AS T1 \nINNER JOIN TV_series AS T2 \nON T1.id = T2.Channel \nWHERE T2.Episode = 'A Love of a Lifetime'", "match": {"match": true, "result": [["Sky Radio"]]}}
{"result": "SELECT T2.series_name FROM TV_series AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Episode = \"A Love of a Lifetime\"", "match": {"match": true, "result": [["Sky Radio"]]}}
{"result": "SELECT T1.Episode FROM TV_series AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'", "match": {"match": true, "result": [["A Love of a Lifetime"], ["Keepers"]]}}
{"result": "SELECT T1.Episode FROM TV_series AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'", "match": {"match": true, "result": [["A Love of a Lifetime"], ["Keepers"]]}}
{"result": "SELECT Directed_by, COUNT(id) FROM Cartoon GROUP BY Directed_by", "match": {"match": false, "result": [["Ben Jones", 4], ["Brandon Vietti", 4], ["Michael Chang", 4]], "gt": [[4, "Ben Jones"], [4, "Brandon Vietti"], [4, "Michael Chang"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Directed_by, COUNT(id) FROM Cartoon GROUP BY Directed_by", "match": {"match": false, "result": [["Ben Jones", 4], ["Brandon Vietti", 4], ["Michael Chang", 4]], "gt": [[4, "Ben Jones"], [4, "Brandon Vietti"], [4, "Michael Chang"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1", "match": {"match": true, "result": [[102.0, "701"]]}}
{"result": "SELECT T2.Production_code, T2.Channel FROM `Cartoon` AS T1 INNER JOIN `TV_Channel` AS T2 ON T1.Channel = T2.id ORDER BY T1.Original_air_date DESC LIMIT 1", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Production_code"}}
{"result": "SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'yes'", "match": {"match": true, "result": [["Sky Famiglia + Sky HD", "MTV Live HD"]]}}
{"result": "SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes'", "match": {"match": false, "result": [], "gt": [["Sky Famiglia + Sky HD", "MTV Live HD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 INNER JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'", "match": {"match": true, "result": [["United Kingdom"], ["Italy"]]}}
{"result": "SELECT T2.Country FROM Cartoon AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Written_by = \"Todd Casey\"", "match": {"match": true, "result": [["United Kingdom"], ["Italy"]]}}
{"result": "SELECT T1.Country FROM TV_Channel AS T1 LEFT JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title IS NULL AND T2.Written_by = 'Todd Casey'", "match": {"match": false, "result": [], "gt": [["Poland"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Country FROM Cartoon AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Written_by != 'Todd Casey'", "match": {"match": false, "result": [["Italy"], ["Italy"], ["Italy"], ["Italy"], ["Italy"], ["United Kingdom"], ["Italy"], ["United Kingdom"], ["Italy"], ["United Kingdom"]], "gt": [["Poland"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T1.series_name, T1.Country FROM TV_Channel AS T1 INNER JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = \"Ben Jones and Michael Chang\"", "match": {"match": false, "result": [], "gt": [["MTV Dance", "United Kingdom"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT T2.series_name, T2.Country FROM Cartoon AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Directed_by = 'Ben Jones' UNION SELECT DISTINCT T2.series_name, T2.Country FROM Cartoon AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Directed_by = 'Michael Chang'", "match": {"match": false, "result": [["Classica", "Italy"], ["MTV Dance", "United Kingdom"], ["MTV Hits", "Italy"], ["MTV Rocks", "United Kingdom"], ["Music Box Italia", "Italy"], ["Sky Radio", "Italy"]], "gt": [["MTV Dance", "United Kingdom"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'", "match": {"match": true, "result": [["4:3", "Italy"], ["4:3", "Italy"], ["4:3 / 16:9", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3", "Italy"], ["4:3", "Italy"]]}}
{"result": "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'", "match": {"match": true, "result": [["4:3", "Italy"], ["4:3", "Italy"], ["4:3 / 16:9", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3", "Italy"], ["4:3", "Italy"]]}}
{"result": "SELECT id FROM TV_Channel GROUP BY Country HAVING COUNT(id) > 2", "match": {"match": true, "result": [["700"]]}}
{"result": "SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(id) > 2", "match": {"match": false, "result": [], "gt": [["700"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT id FROM TV_Channel WHERE id NOT IN ( SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones' )", "match": {"match": true, "result": [["701"], ["703"], ["705"], ["706"], ["708"], ["709"], ["713"], ["714"], ["715"], ["717"], ["719"]]}}
{"result": "SELECT id FROM TV_Channel WHERE id NOT IN ( SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones' )", "match": {"match": true, "result": [["701"], ["703"], ["705"], ["706"], ["708"], ["709"], ["713"], ["714"], ["715"], ["717"], ["719"]]}}
{"result": "```sql\nSELECT T1.Package_Option \nFROM TV_Channel AS T1 \nLEFT JOIN Cartoon AS T2 ON T1.id = T2.Channel \nWHERE T2.Directed_by != 'Ben Jones' \nGROUP BY T1.Package_Option \nHAVING COUNT(T2.id) = 0\n```", "match": {"match": false, "result": [], "gt": [["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["no ( FTV )"], ["Sky Famiglia + Sky HD"], ["no ( FTV )"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Package_Option FROM Cartoon AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Directed_by = 'Ben Jones'", "match": {"match": false, "result": [["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Option"]], "gt": [["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["no ( FTV )"], ["Sky Famiglia + Sky HD"], ["no ( FTV )"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(Poker_Player_ID) FROM poker_player", "match": {"match": true, "result": [[5]]}}
{"result": "SELECT COUNT(Poker_Player_ID) FROM poker_player", "match": {"match": true, "result": [[5]]}}
{"result": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "match": {"match": true, "result": [[596462.0], [476090.0], [189233.0], [142800.0], [104871.0]]}}
{"result": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "match": {"match": true, "result": [[596462.0], [476090.0], [189233.0], [142800.0], [104871.0]]}}
{"result": "SELECT Final_Table_Made, Best_Finish FROM poker_player", "match": {"match": true, "result": [[42.0, 1.0], [10.0, 2.0], [21.0, 1.0], [19.0, 2.0], [26.0, 3.0]]}}
{"result": "SELECT Final_Table_Made, Best_Finish FROM poker_player", "match": {"match": true, "result": [[42.0, 1.0], [10.0, 2.0], [21.0, 1.0], [19.0, 2.0], [26.0, 3.0]]}}
{"result": "SELECT AVG(Earnings) FROM poker_player", "match": {"match": true, "result": [[301891.2]]}}
{"result": "SELECT AVG(Earnings) FROM poker_player", "match": {"match": true, "result": [[301891.2]]}}
{"result": "SELECT MIN(Money_Rank) FROM poker_player WHERE Earnings = ( SELECT MAX(Earnings) FROM poker_player )", "match": {"match": true, "result": [[58.0]]}}
{"result": "SELECT MAX(Money_Rank) FROM poker_player ORDER BY Earnings DESC LIMIT 1", "match": {"match": false, "result": [[166.0]], "gt": [[58.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000", "match": {"match": true, "result": [[26.0]]}}
{"result": "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000", "match": {"match": true, "result": [[26.0]]}}
{"result": "SELECT T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Teodor Salparov"], ["Yevgeni Sivozhelez"], ["Maksim Botin"], ["Semen Poltavskiy"]]}}
{"result": "SELECT T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Teodor Salparov"], ["Yevgeni Sivozhelez"], ["Maksim Botin"], ["Semen Poltavskiy"]]}}
{"result": "SELECT T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings > 300000", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Maksim Botin"]]}}
{"result": "SELECT T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings > 300000", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Maksim Botin"]]}}
{"result": "SELECT T2.Name \nFROM poker_player AS T1 \nINNER JOIN people AS T2 \nON T1.People_ID = T2.People_ID \nORDER BY T1.Final_Table_Made ASC", "match": {"match": true, "result": [["Teodor Salparov"], ["Maksim Botin"], ["Yevgeni Sivozhelez"], ["Semen Poltavskiy"], ["Aleksey Ostapenko"]]}}
{"result": "SELECT T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Final_Table_Made", "match": {"match": true, "result": [["Teodor Salparov"], ["Maksim Botin"], ["Yevgeni Sivozhelez"], ["Semen Poltavskiy"], ["Aleksey Ostapenko"]]}}
{"result": "SELECT T2.Birth_Date \nFROM poker_player AS T1 \nINNER JOIN people AS T2 \nON T1.People_ID = T2.People_ID \nORDER BY T1.Earnings ASC \nLIMIT 1", "match": {"match": true, "result": [["August 8, 1986"]]}}
{"result": "SELECT T2.Birth_Date FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings ASC LIMIT 1", "match": {"match": true, "result": [["August 8, 1986"]]}}
{"result": "SELECT T1.Money_Rank FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height DESC LIMIT 1", "match": {"match": true, "result": [[68.0]]}}
{"result": "SELECT T1.Money_Rank FROM poker_player AS T1 INNER JOIN people AS T2 ON T2.People_ID = T1.People_ID ORDER BY T2.Height DESC LIMIT 1", "match": {"match": true, "result": [[68.0]]}}
{"result": "SELECT AVG(T2.Earnings) FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200", "match": {"match": true, "result": [[309445.0]]}}
{"result": "SELECT AVG(T2.Earnings) FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200", "match": {"match": true, "result": [[309445.0]]}}
{"result": "SELECT T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings DESC", "match": {"match": true, "result": [["Maksim Botin"], ["Aleksey Ostapenko"], ["Teodor Salparov"], ["Semen Poltavskiy"], ["Yevgeni Sivozhelez"]]}}
{"result": "SELECT T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings DESC", "match": {"match": true, "result": [["Maksim Botin"], ["Aleksey Ostapenko"], ["Teodor Salparov"], ["Semen Poltavskiy"], ["Yevgeni Sivozhelez"]]}}
{"result": "SELECT Nationality, COUNT(People_ID) FROM people GROUP BY Nationality", "match": {"match": true, "result": [["Bulgaria", 1], ["Russia", 6]]}}
{"result": "SELECT Nationality, COUNT(People_ID) FROM people GROUP BY Nationality", "match": {"match": true, "result": [["Bulgaria", 1], ["Russia", 6]]}}
{"result": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(Nationality) DESC LIMIT 1", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(Nationality) > 1", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(Nationality) > 1", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Name, Birth_Date FROM people ORDER BY Name ASC", "match": {"match": true, "result": [["Aleksey Ostapenko", "May 26, 1986"], ["Maksim Botin", "July 14, 1983"], ["Roman Bragin", "April 17, 1987"], ["Semen Poltavskiy", "February 8, 1981"], ["Sergey Grankin", "January 22, 1987"], ["Teodor Salparov", "August 16, 1982"], ["Yevgeni Sivozhelez", "August 8, 1986"]]}}
{"result": "SELECT Name, Birth_Date FROM people ORDER BY Name", "match": {"match": true, "result": [["Aleksey Ostapenko", "May 26, 1986"], ["Maksim Botin", "July 14, 1983"], ["Roman Bragin", "April 17, 1987"], ["Semen Poltavskiy", "February 8, 1981"], ["Sergey Grankin", "January 22, 1987"], ["Teodor Salparov", "August 16, 1982"], ["Yevgeni Sivozhelez", "August 8, 1986"]]}}
{"result": "SELECT Name FROM people WHERE Nationality != 'Russia'", "match": {"match": true, "result": [["Teodor Salparov"]]}}
{"result": "SELECT Name FROM people WHERE Nationality != 'Russia'", "match": {"match": true, "result": [["Teodor Salparov"]]}}
{"result": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "match": {"match": true, "result": [["Roman Bragin"], ["Sergey Grankin"]]}}
{"result": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "match": {"match": true, "result": [["Roman Bragin"], ["Sergey Grankin"]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM people", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM people", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(Conductor_ID) FROM conductor", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT COUNT(Conductor_ID) FROM conductor", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT Name FROM conductor ORDER BY Age ASC", "match": {"match": true, "result": [["Antal Dor\u00e1ti"], ["Igor Stravinsky"], ["Colin Davis"], ["Michael Tilson Thomas"], ["Paul Jorgensen"], ["Antal Brown"], ["Charles Dutoit"], ["Seiji Ozawa"], ["Valeri Gergiev"], ["Pierre Boulez"], ["Gerard Schwarz"], ["Robert Craft"]]}}
{"result": "SELECT Name FROM conductor ORDER BY Age", "match": {"match": true, "result": [["Antal Dor\u00e1ti"], ["Igor Stravinsky"], ["Colin Davis"], ["Michael Tilson Thomas"], ["Paul Jorgensen"], ["Antal Brown"], ["Charles Dutoit"], ["Seiji Ozawa"], ["Valeri Gergiev"], ["Pierre Boulez"], ["Gerard Schwarz"], ["Robert Craft"]]}}
{"result": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "match": {"match": true, "result": [["Igor Stravinsky"], ["Paul Jorgensen"], ["Charles Dutoit"], ["Pierre Boulez"], ["Robert Craft"], ["Michael Tilson Thomas"]]}}
{"result": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "match": {"match": true, "result": [["Igor Stravinsky"], ["Paul Jorgensen"], ["Charles Dutoit"], ["Pierre Boulez"], ["Robert Craft"], ["Michael Tilson Thomas"]]}}
{"result": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "match": {"match": true, "result": [["Columbia Masterworks"], ["Philips"], ["Philips Classics Records"], ["RCA"], ["EMI"], ["Koch Records / Naxos Records"], ["Decca Records"], ["Mercury Records"], ["Deutsche Grammophon"], ["Kultur"], ["Decca Records"], ["Delos Records"]]}}
{"result": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "match": {"match": true, "result": [["Columbia Masterworks"], ["Philips"], ["Philips Classics Records"], ["RCA"], ["EMI"], ["Koch Records / Naxos Records"], ["Decca Records"], ["Mercury Records"], ["Deutsche Grammophon"], ["Kultur"], ["Decca Records"], ["Delos Records"]]}}
{"result": "SELECT AVG(Attendance) FROM show", "match": {"match": true, "result": [[1326.4]]}}
{"result": "SELECT AVG(Attendance) FROM show", "match": {"match": true, "result": [[1326.4]]}}
{"result": "SELECT MAX Share, MIN Share FROM performance WHERE Type != 'Live final'", "match": {"match": false, "error": "Query execution failed with error: no such column: MAX"}}
{"result": "SELECT MAX(T1.Share), MIN(T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live final'", "match": {"match": true, "result": [["44.7%", "22.7%"]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM conductor", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM conductor", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "match": {"match": true, "result": [["Robert Craft"], ["Antal Brown"], ["Gerard Schwarz"], ["Valeri Gergiev"], ["Charles Dutoit"], ["Michael Tilson Thomas"], ["Igor Stravinsky"], ["Paul Jorgensen"], ["Pierre Boulez"], ["Antal Dor\u00e1ti"], ["Seiji Ozawa"], ["Colin Davis"]]}}
{"result": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "match": {"match": true, "result": [["Robert Craft"], ["Antal Brown"], ["Gerard Schwarz"], ["Valeri Gergiev"], ["Charles Dutoit"], ["Michael Tilson Thomas"], ["Igor Stravinsky"], ["Paul Jorgensen"], ["Pierre Boulez"], ["Antal Dor\u00e1ti"], ["Seiji Ozawa"], ["Colin Davis"]]}}
{"result": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "match": {"match": true, "result": [["Robert Craft"]]}}
{"result": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "match": {"match": true, "result": [["Robert Craft"]]}}
{"result": "```sql\nSELECT T1.Name, T2.Orchestra\nFROM conductor AS T1\nINNER JOIN orchestra AS T2\nON T1.Conductor_ID = T2.Conductor_ID;\n```", "match": {"match": true, "result": [["Antal Dor\u00e1ti", "London Symphony Orchestra"], ["Igor Stravinsky", "Columbia Symphony Orchestra"], ["Colin Davis", "Royal Concertgebouw Orchestra"], ["Paul Jorgensen", "Royal Danish Orchestra"], ["Antal Brown", "Detroit Symphony Orchestra"], ["Charles Dutoit", "Montreal Symphony Orchestra"], ["Gerard Schwarz", "Seattle Symphony Orchestra"], ["Pierre Boulez", "Chicago Symphony Orchestra"], ["Valeri Gergiev", "Kirov Orchestra"], ["Robert Craft", "Philharmonia Orchestra"], ["Seiji Ozawa", "Orchestre de Paris"], ["Michael Tilson Thomas", "San Francisco Symphony Orchestra"]]}}
{"result": "```sql\nSELECT T1.Name, T2.Orchestra \nFROM conductor AS T1 \nINNER JOIN orchestra AS T2 \nON T1.Conductor_ID = T2.Conductor_ID;\n```", "match": {"match": true, "result": [["Antal Dor\u00e1ti", "London Symphony Orchestra"], ["Igor Stravinsky", "Columbia Symphony Orchestra"], ["Colin Davis", "Royal Concertgebouw Orchestra"], ["Paul Jorgensen", "Royal Danish Orchestra"], ["Antal Brown", "Detroit Symphony Orchestra"], ["Charles Dutoit", "Montreal Symphony Orchestra"], ["Gerard Schwarz", "Seattle Symphony Orchestra"], ["Pierre Boulez", "Chicago Symphony Orchestra"], ["Valeri Gergiev", "Kirov Orchestra"], ["Robert Craft", "Philharmonia Orchestra"], ["Seiji Ozawa", "Orchestre de Paris"], ["Michael Tilson Thomas", "San Francisco Symphony Orchestra"]]}}
{"result": "SELECT DISTINCT T2.Name \nFROM orchestra AS T1 \nINNER JOIN conductor AS T2 \nON T1.Conductor_ID = T2.Conductor_ID \nGROUP BY T2.Name \nHAVING COUNT(T1.Orchestra_ID) > 1", "match": {"match": true, "result": []}}
{"result": "SELECT T1.Name \nFROM conductor AS T1 \nINNER JOIN orchestra AS T2 \nON T1.Conductor_ID = T2.Conductor_ID \nGROUP BY T1.Name \nHAVING COUNT(T2.Orchestra_ID) > 1", "match": {"match": true, "result": []}}
{"result": "SELECT T3.Name \nFROM orchestra AS T1 \nJOIN conductor AS T3 \nON T1.Conductor_ID = T3.Conductor_ID \nGROUP BY T3.Name \nORDER BY COUNT(T1.Orchestra_ID) DESC \nLIMIT 1", "match": {"match": false, "result": [["Valeri Gergiev"]], "gt": [["Michael Tilson Thomas"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Name \nFROM orchestra AS T1 \nINNER JOIN conductor AS T2 \nON T1.Conductor_ID = T2.Conductor_ID \nGROUP BY T2.Name \nORDER BY COUNT(T1.Orchestra_ID) DESC \nLIMIT 1", "match": {"match": false, "result": [["Valeri Gergiev"]], "gt": [["Michael Tilson Thomas"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Name FROM orchestra AS T1 INNER JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T1.Year_of_Founded > 2008", "match": {"match": true, "result": [["Igor Stravinsky"]]}}
{"result": "SELECT T1.Name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008", "match": {"match": true, "result": [["Igor Stravinsky"]]}}
{"result": "SELECT Record_Company, COUNT(Orchestra_ID) FROM orchestra GROUP BY Record_Company", "match": {"match": true, "result": [["Columbia Masterworks", 1], ["Decca Records", 2], ["Delos Records", 1], ["Deutsche Grammophon", 1], ["EMI", 1], ["Koch Records / Naxos Records", 1], ["Kultur", 1], ["Mercury Records", 1], ["Philips", 1], ["Philips Classics Records", 1], ["RCA", 1]]}}
{"result": "SELECT Record_Company, COUNT(Orchestra_ID) AS num_orchestras FROM orchestra GROUP BY Record_Company", "match": {"match": true, "result": [["Columbia Masterworks", 1], ["Decca Records", 2], ["Delos Records", 1], ["Deutsche Grammophon", 1], ["EMI", 1], ["Koch Records / Naxos Records", 1], ["Kultur", 1], ["Mercury Records", 1], ["Philips", 1], ["Philips Classics Records", 1], ["RCA", 1]]}}
{"result": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "match": {"match": true, "result": [["CD / LP"], ["DVD"], ["CD"]]}}
{"result": "SELECT Major_Record_Format, COUNT(Major_Record_Format) FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(Major_Record_Format)", "match": {"match": false, "result": [["CD / LP", 1], ["DVD", 1], ["CD", 10]], "gt": [["CD / LP"], ["DVD"], ["CD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(Record_Company) DESC LIMIT 1", "match": {"match": true, "result": [["Decca Records"]]}}
{"result": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(Record_Company) DESC LIMIT 1", "match": {"match": true, "result": [["Decca Records"]]}}
{"result": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN ( SELECT Orchestra_ID FROM performance )", "match": {"match": true, "result": [["San Francisco Symphony Orchestra"]]}}
{"result": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "match": {"match": true, "result": [["San Francisco Symphony Orchestra"]]}}
{"result": "```sql\nSELECT T1.Record_Company \nFROM orchestra AS T1 \nWHERE T1.Year_of_Founded < 2003 \nINTERSECT \nSELECT T2.Record_Company \nFROM orchestra AS T2 \nWHERE T2.Year_of_Founded > 2003;\n```", "match": {"match": true, "result": [["Decca Records"]]}}
{"result": "```sql\nSELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003\nINTERSECT\nSELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003\n```", "match": {"match": true, "result": [["Decca Records"]]}}
{"result": "SELECT COUNT(Orchestra_ID) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');", "match": {"match": true, "result": [[11]]}}
{"result": "SELECT COUNT(Orchestra_ID) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'", "match": {"match": true, "result": [[11]]}}
{"result": "SELECT T2.Year_of_Founded FROM performance AS T1 INNER JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Year_of_Founded, T2.Orchestra_ID HAVING COUNT(T1.Performance_ID) > 1", "match": {"match": true, "result": []}}
{"result": "SELECT T1.Year_of_Founded FROM orchestra AS T1 INNER JOIN `performance` AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T1.Year_of_Founded HAVING COUNT(T2.Performance_ID) > 1", "match": {"match": false, "result": [[2002.0], [2003.0], [2008.0]], "gt": [], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(ID) FROM Highschooler", "match": {"match": true, "result": [[16]]}}
{"result": "SELECT COUNT(ID) FROM Highschooler", "match": {"match": true, "result": [[16]]}}
{"result": "SELECT name, grade FROM Highschooler", "match": {"match": true, "result": [["Jordan", 9], ["Gabriel", 9], ["Tiffany", 9], ["Cassandra", 9], ["Haley", 10], ["Andrew", 10], ["Kris", 10], ["Brittany", 10], ["Alexis", 11], ["Austin", 11], ["Gabriel", 11], ["Jessica", 11], ["Jordan", 12], ["John", 12], ["Kyle", 12], ["Logan", 12]]}}
{"result": "SELECT name, grade FROM Highschooler", "match": {"match": true, "result": [["Jordan", 9], ["Gabriel", 9], ["Tiffany", 9], ["Cassandra", 9], ["Haley", 10], ["Andrew", 10], ["Kris", 10], ["Brittany", 10], ["Alexis", 11], ["Austin", 11], ["Gabriel", 11], ["Jessica", 11], ["Jordan", 12], ["John", 12], ["Kyle", 12], ["Logan", 12]]}}
{"result": "SELECT grade FROM Highschooler", "match": {"match": true, "result": [[9], [9], [9], [9], [10], [10], [10], [10], [11], [11], [11], [11], [12], [12], [12], [12]]}}
{"result": "SELECT name, grade FROM Highschooler", "match": {"match": false, "result": [["Jordan", 9], ["Gabriel", 9], ["Tiffany", 9], ["Cassandra", 9], ["Haley", 10], ["Andrew", 10], ["Kris", 10], ["Brittany", 10], ["Alexis", 11], ["Austin", 11], ["Gabriel", 11], ["Jessica", 11], ["Jordan", 12], ["John", 12], ["Kyle", 12], ["Logan", 12]], "gt": [[9], [9], [9], [9], [10], [10], [10], [10], [11], [11], [11], [11], [12], [12], [12], [12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT grade FROM Highschooler WHERE name = 'Kyle'", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT grade FROM Highschooler WHERE name = 'Kyle'", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT name FROM Highschooler WHERE grade = 10", "match": {"match": true, "result": [["Haley"], ["Andrew"], ["Kris"], ["Brittany"]]}}
{"result": "SELECT name FROM Highschooler WHERE grade = 10", "match": {"match": true, "result": [["Haley"], ["Andrew"], ["Kris"], ["Brittany"]]}}
{"result": "SELECT ID FROM Highschooler WHERE name = 'Kyle'", "match": {"match": true, "result": [[1934]]}}
{"result": "SELECT ID FROM Highschooler WHERE name = 'Kyle'", "match": {"match": true, "result": [[1934]]}}
{"result": "SELECT COUNT(ID) \nFROM Highschooler \nWHERE grade IN (9, 10);", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT COUNT(ID) FROM Highschooler WHERE grade IN (9, 10)", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade", "match": {"match": true, "result": [[9, 4], [10, 4], [11, 4], [12, 4]]}}
{"result": "SELECT grade, COUNT(ID) FROM Highschooler GROUP BY grade", "match": {"match": true, "result": [[9, 4], [10, 4], [11, 4], [12, 4]]}}
{"result": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(ID) DESC LIMIT 1", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT grade \nFROM Highschooler \nGROUP BY grade \nORDER BY COUNT(grade) DESC \nLIMIT 1", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(grade) >= 4", "match": {"match": true, "result": [[9], [10], [11], [12]]}}
{"result": "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4", "match": {"match": true, "result": [[9], [10], [11], [12]]}}
{"result": "SELECT student_id, COUNT(friend_id) FROM Friend GROUP BY student_id", "match": {"match": true, "result": [[1101, 1], [1247, 2], [1304, 1], [1316, 1], [1381, 1], [1468, 2], [1501, 1], [1510, 2], [1661, 1], [1689, 2], [1709, 1], [1782, 3], [1911, 1], [1934, 1]]}}
{"result": "SELECT student_id, COUNT(friend_id) \nFROM Friend \nGROUP BY student_id", "match": {"match": true, "result": [[1101, 1], [1247, 2], [1304, 1], [1316, 1], [1381, 1], [1468, 2], [1501, 1], [1510, 2], [1661, 1], [1689, 2], [1709, 1], [1782, 3], [1911, 1], [1934, 1]]}}
{"result": "SELECT T1.name, COUNT(T2.friend_id) \nFROM Highschooler AS T1 \nLEFT JOIN Friend AS T2 \nON T1.ID = T2.student_id \nGROUP BY T1.name", "match": {"match": false, "result": [["Alexis", 2], ["Andrew", 3], ["Austin", 1], ["Brittany", 0], ["Cassandra", 1], ["Gabriel", 3], ["Haley", 1], ["Jessica", 1], ["John", 0], ["Jordan", 3], ["Kris", 2], ["Kyle", 1], ["Logan", 1], ["Tiffany", 1]], "gt": [["Haley", 1], ["Alexis", 2], ["Jordan", 1], ["Austin", 1], ["Tiffany", 1], ["Kris", 2], ["Jessica", 1], ["Jordan", 2], ["Logan", 1], ["Gabriel", 2], ["Cassandra", 1], ["Andrew", 3], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.name, COUNT(T2.student_id) \nFROM Highschooler AS T1 \nLEFT JOIN Friend AS T2 \nON T1.ID = T2.student_id \nGROUP BY T1.name", "match": {"match": false, "result": [["Alexis", 2], ["Andrew", 3], ["Austin", 1], ["Brittany", 0], ["Cassandra", 1], ["Gabriel", 3], ["Haley", 1], ["Jessica", 1], ["John", 0], ["Jordan", 3], ["Kris", 2], ["Kyle", 1], ["Logan", 1], ["Tiffany", 1]], "gt": [["Haley", 1], ["Alexis", 2], ["Jordan", 1], ["Austin", 1], ["Tiffany", 1], ["Kris", 2], ["Jessica", 1], ["Jordan", 2], ["Logan", 1], ["Gabriel", 2], ["Cassandra", 1], ["Andrew", 3], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.name\nFROM Friend AS T1\nJOIN Highschooler AS T2\nON T1.student_id = T2.ID\nGROUP BY T2.name\nORDER BY COUNT(T1.friend_id) DESC\nLIMIT 1", "match": {"match": false, "result": [["Jordan"]], "gt": [["Andrew"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.name \nFROM Friend AS T1 \nJOIN Highschooler AS T2 \nON T1.student_id = T2.ID \nGROUP BY T2.name \nORDER BY COUNT(T1.friend_id) DESC \nLIMIT 1", "match": {"match": false, "result": [["Jordan"]], "gt": [["Andrew"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.name \nFROM Highschooler AS T1 \nJOIN ( \n  SELECT student_id \n  FROM Friend \n  GROUP BY student_id \n  HAVING COUNT(friend_id) >= 3 \n) AS T2 \nON T1.ID = T2.student_id", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "```sql\nSELECT T1.name\nFROM Highschooler AS T1\nJOIN (\n    SELECT student_id\n    FROM Friend\n    GROUP BY student_id\n    HAVING COUNT(friend_id) >= 3\n) AS T2\nON T1.ID = T2.student_id\n```", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "SELECT T2.name \nFROM Friend AS T1 \nJOIN Highschooler AS T2 \nON T1.friend_id = T2.ID \nWHERE T1.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')", "match": {"match": true, "result": [["Jordan"]]}}
{"result": "```sql\nSELECT T2.name \nFROM Friend AS T1 \nINNER JOIN Highschooler AS T2 \nON T1.friend_id = T2.ID \nWHERE T1.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');\n```", "match": {"match": true, "result": [["Jordan"]]}}
{"result": "```sql\nSELECT COUNT(friend_id)\nFROM Friend\nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');\n```", "match": {"match": true, "result": [[1]]}}
{"result": "```sql\nSELECT COUNT(*) \nFROM Friend AS F \nJOIN Highschooler AS H \nON F.student_id = H.ID \nWHERE H.name = 'Kyle'\n```", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)", "match": {"match": false, "result": [], "gt": [[1025], [1641]], "error": "Query result does not match ground truth."}}
{"result": "SELECT ID FROM Highschooler \nWHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)", "match": {"match": false, "result": [], "gt": [[1025], [1641]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)", "match": {"match": false, "result": [], "gt": [["Brittany"], ["John"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name FROM Highschooler WHERE ID NOT IN ( SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend )", "match": {"match": false, "result": [], "gt": [["Brittany"], ["John"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT T1.ID\nFROM Highschooler AS T1\nINNER JOIN Friend AS T2 ON T1.ID = T2.student_id\nINNER JOIN Likes AS T3 ON T1.ID = T3.liked_id\nGROUP BY T1.ID\n```", "match": {"match": true, "result": [[1101], [1247], [1304], [1468], [1501], [1689], [1709], [1934]]}}
{"result": "```sql\nSELECT ID FROM Highschooler\nWHERE ID IN (SELECT student_id FROM Friend)\nAND ID IN (SELECT liked_id FROM Likes);\n```", "match": {"match": true, "result": [[1101], [1247], [1304], [1468], [1501], [1689], [1709], [1934]]}}
{"result": "SELECT DISTINCT T1.name FROM Highschooler AS T1 \nINNER JOIN Friend AS T2 ON T1.ID = T2.student_id \nINNER JOIN Likes AS T3 ON T1.ID = T3.liked_id", "match": {"match": false, "result": [["Cassandra"], ["Gabriel"], ["Alexis"], ["Kris"], ["Jordan"], ["Kyle"], ["Jessica"], ["Haley"]], "gt": [["Alexis"], ["Cassandra"], ["Gabriel"], ["Haley"], ["Jessica"], ["Jordan"], ["Kris"], ["Kyle"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT T1.name\nFROM Highschooler AS T1\nWHERE T1.ID IN (\n    SELECT T2.student_id\n    FROM Friend AS T2\n    UNION\n    SELECT T3.liked_id\n    FROM Likes AS T3\n)\nAND T1.ID IN (\n    SELECT T4.friend_id\n    FROM Friend AS T4\n    UNION\n    SELECT T5.student_id\n    FROM Likes AS T5\n)\n```", "match": {"match": false, "result": [["Haley"], ["Alexis"], ["Jordan"], ["Austin"], ["Tiffany"], ["Kris"], ["Jessica"], ["Logan"], ["Gabriel"], ["Cassandra"], ["Andrew"], ["Gabriel"], ["Kyle"]], "gt": [["Alexis"], ["Cassandra"], ["Gabriel"], ["Haley"], ["Jessica"], ["Jordan"], ["Kris"], ["Kyle"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT student_id, COUNT(liked_id) FROM Likes GROUP BY student_id", "match": {"match": true, "result": [[1025, 1], [1247, 1], [1316, 1], [1501, 1], [1641, 1], [1689, 1], [1709, 1], [1782, 1], [1911, 1], [1934, 1]]}}
{"result": "SELECT student_id, COUNT(*) FROM Likes GROUP BY student_id", "match": {"match": true, "result": [[1025, 1], [1247, 1], [1316, 1], [1501, 1], [1641, 1], [1689, 1], [1709, 1], [1782, 1], [1911, 1], [1934, 1]]}}
{"result": "SELECT T1.name, COUNT(T2.liked_id) \nFROM Highschooler AS T1 \nJOIN Likes AS T2 \nON T1.ID = T2.liked_id \nGROUP BY T1.name", "match": {"match": false, "result": [["Alexis", 1], ["Cassandra", 2], ["Gabriel", 1], ["Haley", 1], ["Jessica", 1], ["Jordan", 1], ["Kris", 2], ["Kyle", 1]], "gt": [["John", 1], ["Alexis", 1], ["Austin", 1], ["Jessica", 1], ["Brittany", 1], ["Gabriel", 1], ["Cassandra", 1], ["Andrew", 1], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT H.name, COUNT(L.liked_id) \nFROM Highschooler H\nJOIN Likes L ON H.ID = L.student_id\nGROUP BY H.name\n```", "match": {"match": false, "result": [["Alexis", 1], ["Andrew", 1], ["Austin", 1], ["Brittany", 1], ["Cassandra", 1], ["Gabriel", 2], ["Jessica", 1], ["John", 1], ["Kyle", 1]], "gt": [["John", 1], ["Alexis", 1], ["Austin", 1], ["Jessica", 1], ["Brittany", 1], ["Gabriel", 1], ["Cassandra", 1], ["Andrew", 1], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.name \nFROM Likes AS T1 \nJOIN Highschooler AS T2 ON T1.student_id = T2.ID \nGROUP BY T1.student_id \nORDER BY COUNT(T1.liked_id) DESC \nLIMIT 1", "match": {"match": true, "result": [["John"]]}}
{"result": "SELECT H.name\nFROM Highschooler H\nJOIN Likes L ON H.ID = L.liked_id\nGROUP BY H.name\nORDER BY COUNT(L.student_id) DESC\nLIMIT 1", "match": {"match": false, "result": [["Kris"]], "gt": [["John"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.name FROM Highschooler AS T1 INNER JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.name HAVING COUNT(T2.liked_id) > 1", "match": {"match": false, "result": [["Gabriel"]], "gt": [], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.name FROM Highschooler AS T1 INNER JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.name HAVING COUNT(T1.name) >= 2", "match": {"match": false, "result": [["Gabriel"]], "gt": [], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.name\nFROM Highschooler AS T1\nJOIN (\n    SELECT student_id, COUNT(friend_id) AS friend_count\n    FROM Friend\n    GROUP BY student_id\n    HAVING COUNT(friend_id) >= 2\n) AS T2\nON T1.ID = T2.student_id\nWHERE T1.grade > 5", "match": {"match": true, "result": [["Alexis"], ["Kris"], ["Jordan"], ["Gabriel"], ["Andrew"]]}}
{"result": "```sql\nSELECT T1.name \nFROM Highschooler AS T1 \nJOIN (\n    SELECT student_id \n    FROM Friend \n    GROUP BY student_id \n    HAVING COUNT(student_id) >= 2\n) AS T2 \nON T1.ID = T2.student_id \nWHERE T1.grade > 5\n```", "match": {"match": true, "result": [["Alexis"], ["Kris"], ["Jordan"], ["Gabriel"], ["Andrew"]]}}
{"result": "SELECT COUNT(*) \nFROM Likes \nJOIN Highschooler ON Likes.liked_id = Highschooler.ID \nWHERE Highschooler.name = 'Kyle'", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(T2.liked_id) \nFROM Highschooler AS T1 \nINNER JOIN Likes AS T2 \nON T1.ID = T2.liked_id \nWHERE T1.name = 'Kyle'", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT AVG(H.grade) \nFROM Highschooler H \nWHERE H.ID IN ( SELECT DISTINCT student_id FROM Friend UNION SELECT DISTINCT friend_id FROM Friend )", "match": {"match": false, "result": [[10.5]], "gt": [[10.428571428571429]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(T2.grade) FROM Friend AS T1 INNER JOIN Highschooler AS T2 ON T1.student_id = T2.ID", "match": {"match": false, "result": [[10.25]], "gt": [[10.428571428571429]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MIN(T1.grade) FROM Highschooler AS T1 LEFT JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T2.student_id IS NULL", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT MIN(grade) \nFROM Highschooler \nWHERE ID NOT IN (SELECT student_id FROM Friend)", "match": {"match": true, "result": [[10]]}}
{"result": "```sql\nSELECT DISTINCT state \nFROM Owners \nWHERE state IN (SELECT state FROM Professionals)\n```", "match": {"match": false, "result": [["Wisconsin"], ["Indiana"], ["Mississippi"]], "gt": [["Indiana"], ["Mississippi"], ["Wisconsin"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT state FROM Owners\nINTERSECT\nSELECT state FROM Professionals\n```", "match": {"match": true, "result": [["Indiana"], ["Mississippi"], ["Wisconsin"]]}}
{"result": "SELECT AVG(d.age) FROM Dogs d INNER JOIN Treatments t ON d.dog_id = t.dog_id", "match": {"match": false, "result": [[5.466666666666667]], "gt": [[5.111111111111111]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(d.age) \nFROM Dogs d \nJOIN Treatments t \nON d.dog_id = t.dog_id", "match": {"match": false, "result": [[5.466666666666667]], "gt": [[5.111111111111111]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT \n  professional_id, \n  last_name, \n  cell_number\nFROM \n  Professionals\nWHERE \n  state = 'Indiana'\n\nUNION ALL\n\nSELECT \n  T.professional_id, \n  P.last_name, \n  P.cell_number\nFROM \n  Professionals P\n  JOIN Treatments T ON P.professional_id = T.professional_id\nGROUP BY \n  T.professional_id, P.last_name, P.cell_number\nHAVING \n  COUNT(T.treatment_id) > 2\n```", "match": {"match": true, "result": [[1, "Braun", "(275)939-2435x80863"], [8, "Hyatt", "328.842.3792"], [9, "Kshlerin", "962-983-8109x3509"]]}}
{"result": "```sql\nSELECT \n  P.professional_id, \n  P.last_name, \n  P.cell_number\nFROM \n  Professionals P\nWHERE \n  P.state = 'Indiana'\nOR \n  P.professional_id IN (\n    SELECT \n      T.professional_id\n    FROM \n      Treatments T\n    GROUP BY \n      T.professional_id\n    HAVING \n      COUNT(T.treatment_id) > 2\n  )\n```", "match": {"match": true, "result": [[1, "Braun", "(275)939-2435x80863"], [8, "Hyatt", "328.842.3792"], [9, "Kshlerin", "962-983-8109x3509"]]}}
{"result": "```sql\nSELECT T3.name \nFROM Charges AS T1 \nINNER JOIN Treatments AS T2 \n    ON T1.charge_id = T2.treatment_id \nINNER JOIN Dogs AS T3 \n    ON T2.dog_id = T3.dog_id \nGROUP BY T3.name \nHAVING SUM(T1.charge_amount) <= 1000\n```", "match": {"match": false, "result": [["Houston"], ["Lyric"]], "gt": [["Kacey"], ["Hipolito"], ["Mavis"], ["Houston"], ["Jeffrey"], ["Merritt"], ["Narciso"], ["George"], ["Bessie"], ["Betty"], ["Holden"], ["Jesus"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT DISTINCT T3.name\nFROM Owners AS T1\nJOIN Dogs AS T2 ON T1.owner_id = T2.owner_id\nJOIN Treatments AS T3 ON T2.dog_id = T3.dog_id\nJOIN Charges AS T4 ON T3.treatment_id = T4.charge_id\nWHERE T4.charge_amount <= 1000\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: T3.name"}}
{"result": "```sql\nSELECT T1.first_name\nFROM (\n    SELECT first_name FROM Owners\n    UNION ALL\n    SELECT first_name FROM Professionals\n) T1\nLEFT JOIN Dogs ON T1.first_name = Dogs.name\nWHERE Dogs.name IS NULL;\n```", "match": {"match": false, "result": [["Nora"], ["Melisa"], ["Jaclyn"], ["Tre"], ["Johann"], ["Kade"], ["Emelie"], ["Rolando"], ["Adelle"], ["Lorenz"], ["Gay"], ["Orlando"], ["Cindy"], ["Rachelle"], ["Heather"], ["Taryn"], ["Jayson"], ["Olaf"], ["Vernice"], ["Danny"], ["Ruben"], ["Velva"], ["Karley"], ["Monte"], ["Domenica"], ["Brady"], ["Winfield"], ["Ericka"], ["Sigurd"], ["Lesly"]], "gt": [["Adelle"], ["Brady"], ["Cindy"], ["Danny"], ["Domenica"], ["Emelie"], ["Ericka"], ["Gay"], ["Heather"], ["Jaclyn"], ["Jayson"], ["Johann"], ["Kade"], ["Karley"], ["Lesly"], ["Lorenz"], ["Melisa"], ["Monte"], ["Nora"], ["Olaf"], ["Orlando"], ["Rachelle"], ["Rolando"], ["Ruben"], ["Sigurd"], ["Taryn"], ["Tre"], ["Velva"], ["Vernice"], ["Winfield"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT first_name \nFROM Professionals \nWHERE first_name NOT IN (SELECT name FROM Dogs)\nUNION\nSELECT first_name \nFROM Owners \nWHERE first_name NOT IN (SELECT name FROM Dogs)\n```", "match": {"match": true, "result": [["Adelle"], ["Brady"], ["Cindy"], ["Danny"], ["Domenica"], ["Emelie"], ["Ericka"], ["Gay"], ["Heather"], ["Jaclyn"], ["Jayson"], ["Johann"], ["Kade"], ["Karley"], ["Lesly"], ["Lorenz"], ["Melisa"], ["Monte"], ["Nora"], ["Olaf"], ["Orlando"], ["Rachelle"], ["Rolando"], ["Ruben"], ["Sigurd"], ["Taryn"], ["Tre"], ["Velva"], ["Vernice"], ["Winfield"]]}}
{"result": "```sql\nSELECT professional_id, role_code, email_address \nFROM Professionals \nWHERE professional_id NOT IN (SELECT professional_id FROM Treatments);\n```", "match": {"match": true, "result": [[1, "Employee", "deanna.schuster@example.com"], [2, "Employee", "lucile.shanahan@example.org"], [3, "Employee", "uboehm@example.org"], [11, "Employee", "west.eula@example.net"], [12, "Veterenarian", "marquardt.furman@example.org"], [13, "Veterenarian", "delphine29@example.com"], [15, "Employee", "jeichmann@example.com"]]}}
{"result": "SELECT professional_id, role_code, email_address \nFROM Professionals \nWHERE professional_id NOT IN (SELECT professional_id FROM Treatments)", "match": {"match": true, "result": [[1, "Employee", "deanna.schuster@example.com"], [2, "Employee", "lucile.shanahan@example.org"], [3, "Employee", "uboehm@example.org"], [11, "Employee", "west.eula@example.net"], [12, "Veterenarian", "marquardt.furman@example.org"], [13, "Veterenarian", "delphine29@example.com"], [15, "Employee", "jeichmann@example.com"]]}}
{"result": "SELECT T1.owner_id, T1.first_name, T1.last_name \nFROM Owners AS T1 \nINNER JOIN Dogs AS T2 \nON T1.owner_id = T2.owner_id \nGROUP BY T1.owner_id, T1.first_name, T1.last_name \nORDER BY COUNT(T1.owner_id) DESC \nLIMIT 1", "match": {"match": true, "result": [[14, "Rachelle", "Funk"]]}}
{"result": "SELECT T1.owner_id, T1.first_name, T1.last_name\nFROM Owners AS T1\nJOIN Dogs AS T2 ON T2.owner_id = T1.owner_id\nGROUP BY T1.owner_id, T1.first_name, T1.last_name\nORDER BY COUNT(T2.dog_id) DESC\nLIMIT 1", "match": {"match": true, "result": [[14, "Rachelle", "Funk"]]}}
{"result": "SELECT T1.professional_id, T1.role_code, T1.first_name \nFROM Professionals AS T1 \nJOIN Treatments AS T2 ON T1.professional_id = T2.professional_id \nGROUP BY T1.professional_id, T1.role_code, T1.first_name \nHAVING COUNT(T2.treatment_id) >= 2", "match": {"match": true, "result": [[4, "Veterenarian", "Vernice"], [6, "Veterenarian", "Ruben"], [8, "Employee", "Karley"], [9, "Veterenarian", "Monte"], [10, "Employee", "Domenica"], [14, "Employee", "Sigurd"]]}}
{"result": "SELECT T2.professional_id, T2.role_code, T2.first_name \nFROM Treatments AS T1 \nINNER JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id \nGROUP BY T2.professional_id, T2.role_code, T2.first_name \nHAVING COUNT(T1.treatment_id) >= 2", "match": {"match": true, "result": [[4, "Veterenarian", "Vernice"], [6, "Veterenarian", "Ruben"], [8, "Employee", "Karley"], [9, "Veterenarian", "Monte"], [10, "Employee", "Domenica"], [14, "Employee", "Sigurd"]]}}
{"result": "SELECT T1.breed_name FROM Breeds AS T1 INNER JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY COUNT(T2.dog_id) DESC LIMIT 1", "match": {"match": true, "result": [["Bulldog"]]}}
{"result": "SELECT T2.breed_name \nFROM Dogs AS T1 \nINNER JOIN Breeds AS T2 \nON T1.breed_code = T2.breed_code \nGROUP BY T2.breed_name \nORDER BY COUNT(T1.dog_id) DESC \nLIMIT 1", "match": {"match": true, "result": [["Bulldog"]]}}
{"result": "SELECT O.owner_id, O.last_name \nFROM Owners O \nJOIN Dogs D ON O.owner_id = D.owner_id \nJOIN Treatments T ON D.dog_id = T.dog_id \nGROUP BY O.owner_id, O.last_name \nORDER BY COUNT(T.treatment_id) DESC \nLIMIT 1", "match": {"match": true, "result": [[14, "Funk"]]}}
{"result": "SELECT T2.owner_id, T2.last_name \nFROM Treatments AS T1 \nINNER JOIN Dogs AS T3 ON T1.dog_id = T3.dog_id \nINNER JOIN Owners AS T2 ON T3.owner_id = T2.owner_id \nGROUP BY T2.owner_id \nORDER BY SUM(T1.cost_of_treatment) DESC \nLIMIT 1", "match": {"match": false, "result": [[3, "Stoltenberg"]], "gt": [[14, "Funk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.treatment_type_description FROM \n(SELECT treatment_type_code, SUM(cost_of_treatment) AS sum_cost FROM Treatments GROUP BY treatment_type_code) AS T1 \nINNER JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code \nORDER BY T1.sum_cost ASC LIMIT 1", "match": {"match": true, "result": [["Take for a Walk"]]}}
{"result": "SELECT T1.treatment_type_description \nFROM Treatment_Types AS T1 \nJOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code \nGROUP BY T1.treatment_type_description \nORDER BY SUM(T2.cost_of_treatment) ASC LIMIT 1", "match": {"match": true, "result": [["Take for a Walk"]]}}
{"result": "SELECT T3.owner_id, T3.zip_code \nFROM Charges AS T1 \nJOIN Treatments AS T2 ON T1.charge_id = T2.treatment_id \nJOIN Owners AS T3 ON T2.dog_id = T3.owner_id \nGROUP BY T3.owner_id, T3.zip_code \nORDER BY SUM(T1.charge_amount) DESC LIMIT 1", "match": {"match": false, "result": [[14, "22731"]], "gt": [[3, "02647"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT T1.owner_id, T1.zip_code\nFROM Owners AS T1\nINNER JOIN Dogs AS T2\nON T1.owner_id = T2.owner_id\nINNER JOIN Treatments AS T3\nON T2.dog_id = T3.dog_id\nINNER JOIN Charges AS T4\nON T3.treatment_id = T4.charge_id\nGROUP BY T1.owner_id, T1.zip_code\nORDER BY SUM(T4.charge_amount) DESC\nLIMIT 1\n```", "match": {"match": false, "result": [[14, "22731"]], "gt": [[3, "02647"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT professional_id, cell_number \nFROM Professionals \nWHERE professional_id IN (\n    SELECT professional_id \n    FROM Treatments \n    GROUP BY professional_id \n    HAVING COUNT(DISTINCT treatment_type_code) >= 2\n)", "match": {"match": false, "result": [[6, "139-321-7313"], [9, "962-983-8109x3509"], [10, "461-801-2600"], [14, "1-185-137-1945x409"]], "gt": [[4, "00230569697"], [6, "139-321-7313"], [8, "328.842.3792"], [9, "962-983-8109x3509"], [10, "461-801-2600"], [14, "1-185-137-1945x409"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.professional_id, T1.cell_number FROM Professionals AS T1 INNER JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T2.professional_id HAVING COUNT(DISTINCT T2.treatment_type_code) > 1", "match": {"match": false, "result": [[6, "139-321-7313"], [9, "962-983-8109x3509"], [10, "461-801-2600"], [14, "1-185-137-1945x409"]], "gt": [[4, "00230569697"], [6, "139-321-7313"], [8, "328.842.3792"], [9, "962-983-8109x3509"], [10, "461-801-2600"], [14, "1-185-137-1945x409"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.first_name, T2.last_name \nFROM Treatments AS T1 \nINNER JOIN Professionals AS T2 \nON T1.professional_id = T2.professional_id \nWHERE T1.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)", "match": {"match": false, "result": [["Domenica", "Jacobs"], ["Vernice", "Tillman"], ["Karley", "Hyatt"], ["Vernice", "Tillman"], ["Ruben", "O'Reilly"], ["Domenica", "Jacobs"], ["Monte", "Kshlerin"], ["Monte", "Kshlerin"]], "gt": [["Taryn", "Braun"], ["Jayson", "Ullrich"], ["Olaf", "Watsica"], ["Vernice", "Tillman"], ["Danny", "Considine"], ["Ruben", "O'Reilly"], ["Velva", "Hayes"], ["Karley", "Hyatt"], ["Monte", "Kshlerin"], ["Domenica", "Jacobs"], ["Brady", "Pouros"], ["Winfield", "Christiansen"], ["Ericka", "Murazik"], ["Sigurd", "Frami"], ["Lesly", "Walter"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT DISTINCT T1.first_name, T1.last_name\nFROM Professionals T1\nJOIN Treatments T2 ON T1.professional_id = T2.professional_id\nWHERE T2.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);\n```", "match": {"match": false, "result": [["Domenica", "Jacobs"], ["Vernice", "Tillman"], ["Karley", "Hyatt"], ["Ruben", "O'Reilly"], ["Monte", "Kshlerin"]], "gt": [["Taryn", "Braun"], ["Jayson", "Ullrich"], ["Olaf", "Watsica"], ["Vernice", "Tillman"], ["Danny", "Considine"], ["Ruben", "O'Reilly"], ["Velva", "Hayes"], ["Karley", "Hyatt"], ["Monte", "Kshlerin"], ["Domenica", "Jacobs"], ["Brady", "Pouros"], ["Winfield", "Christiansen"], ["Ericka", "Murazik"], ["Sigurd", "Frami"], ["Lesly", "Walter"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.date_of_treatment, P.first_name \nFROM Treatments T \nJOIN Professionals P ON T.professional_id = P.professional_id", "match": {"match": true, "result": [["2018-03-19 04:39:54", "Monte"], ["2018-03-15 20:25:34", "Domenica"], ["2018-03-08 05:26:23", "Vernice"], ["2018-03-01 04:14:46", "Karley"], ["2018-03-23 13:52:10", "Sigurd"], ["2018-03-11 04:23:15", "Vernice"], ["2018-03-10 11:45:58", "Sigurd"], ["2018-03-24 22:25:58", "Ruben"], ["2018-03-14 19:10:40", "Domenica"], ["2018-02-28 17:09:43", "Velva"], ["2018-03-13 12:22:58", "Danny"], ["2018-03-16 10:27:36", "Monte"], ["2018-02-26 09:08:53", "Karley"], ["2018-03-04 20:33:43", "Monte"], ["2018-03-15 19:10:02", "Ruben"]]}}
{"result": "SELECT T1.date_of_treatment, T3.first_name \nFROM Treatments AS T1 \nINNER JOIN Professionals AS T3 \nON T1.professional_id = T3.professional_id", "match": {"match": true, "result": [["2018-03-19 04:39:54", "Monte"], ["2018-03-15 20:25:34", "Domenica"], ["2018-03-08 05:26:23", "Vernice"], ["2018-03-01 04:14:46", "Karley"], ["2018-03-23 13:52:10", "Sigurd"], ["2018-03-11 04:23:15", "Vernice"], ["2018-03-10 11:45:58", "Sigurd"], ["2018-03-24 22:25:58", "Ruben"], ["2018-03-14 19:10:40", "Domenica"], ["2018-02-28 17:09:43", "Velva"], ["2018-03-13 12:22:58", "Danny"], ["2018-03-16 10:27:36", "Monte"], ["2018-02-26 09:08:53", "Karley"], ["2018-03-04 20:33:43", "Monte"], ["2018-03-15 19:10:02", "Ruben"]]}}
{"result": "```sql\nSELECT T.cost_of_treatment, TT.treatment_type_description\nFROM Treatments T\nJOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code\n```", "match": {"match": true, "result": [[567, "Take for a Walk"], [147, "Vaccination"], [429, "Physical examination"], [266, "Vaccination"], [668, "Vaccination"], [313, "Physical examination"], [852, "Physical examination"], [407, "Physical examination"], [139, "Take for a Walk"], [681, "Take for a Walk"], [514, "Vaccination"], [428, "Physical examination"], [945, "Vaccination"], [349, "Take for a Walk"], [656, "Take for a Walk"]]}}
{"result": "```sql\nSELECT \n    T.cost_of_treatment, \n    TT.treatment_type_description\nFROM \n    Treatments T\nJOIN \n    Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code;\n```", "match": {"match": true, "result": [[567, "Take for a Walk"], [147, "Vaccination"], [429, "Physical examination"], [266, "Vaccination"], [668, "Vaccination"], [313, "Physical examination"], [852, "Physical examination"], [407, "Physical examination"], [139, "Take for a Walk"], [681, "Take for a Walk"], [514, "Vaccination"], [428, "Physical examination"], [945, "Vaccination"], [349, "Take for a Walk"], [656, "Take for a Walk"]]}}
{"result": "SELECT T2.first_name, T2.last_name, T3.size_description \nFROM Dogs AS T1 \nINNER JOIN Owners AS T2 ON T1.owner_id = T2.owner_id \nINNER JOIN Sizes AS T3 ON T1.size_code = T3.size_code", "match": {"match": false, "result": [["Jaclyn", "Stoltenberg", "Large"], ["Gay", "Feil", "Large"], ["Nora", "Haley", "Medium"], ["Rachelle", "Funk", "Large"], ["Emelie", "Mertz", "Medium"], ["Johann", "Fisher", "Medium"], ["Jaclyn", "Stoltenberg", "Medium"], ["Rachelle", "Funk", "Small"], ["Melisa", "DuBuque", "Medium"], ["Kade", "Rippin", "Medium"], ["Cindy", "Schmitt", "Large"], ["Orlando", "Price", "Medium"], ["Rolando", "Prohaska", "Small"], ["Rachelle", "Funk", "Medium"], ["Lorenz", "Nicolas", "Medium"]], "gt": [["Jaclyn", "Stoltenberg", "LGE"], ["Gay", "Feil", "LGE"], ["Nora", "Haley", "MED"], ["Rachelle", "Funk", "LGE"], ["Emelie", "Mertz", "MED"], ["Johann", "Fisher", "MED"], ["Jaclyn", "Stoltenberg", "MED"], ["Rachelle", "Funk", "SML"], ["Melisa", "DuBuque", "MED"], ["Kade", "Rippin", "MED"], ["Cindy", "Schmitt", "LGE"], ["Orlando", "Price", "MED"], ["Rolando", "Prohaska", "SML"], ["Rachelle", "Funk", "MED"], ["Lorenz", "Nicolas", "MED"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT \n    O.first_name, \n    O.last_name, \n    S.size_description\nFROM \n    Owners O\nJOIN \n    Dogs D ON O.owner_id = D.owner_id\nJOIN \n    Sizes S ON D.size_code = S.size_code;\n```", "match": {"match": false, "result": [["Jaclyn", "Stoltenberg", "Large"], ["Gay", "Feil", "Large"], ["Nora", "Haley", "Medium"], ["Rachelle", "Funk", "Large"], ["Emelie", "Mertz", "Medium"], ["Johann", "Fisher", "Medium"], ["Jaclyn", "Stoltenberg", "Medium"], ["Rachelle", "Funk", "Small"], ["Melisa", "DuBuque", "Medium"], ["Kade", "Rippin", "Medium"], ["Cindy", "Schmitt", "Large"], ["Orlando", "Price", "Medium"], ["Rolando", "Prohaska", "Small"], ["Rachelle", "Funk", "Medium"], ["Lorenz", "Nicolas", "Medium"]], "gt": [["Jaclyn", "Stoltenberg", "LGE"], ["Gay", "Feil", "LGE"], ["Nora", "Haley", "MED"], ["Rachelle", "Funk", "LGE"], ["Emelie", "Mertz", "MED"], ["Johann", "Fisher", "MED"], ["Jaclyn", "Stoltenberg", "MED"], ["Rachelle", "Funk", "SML"], ["Melisa", "DuBuque", "MED"], ["Kade", "Rippin", "MED"], ["Cindy", "Schmitt", "LGE"], ["Orlando", "Price", "MED"], ["Rolando", "Prohaska", "SML"], ["Rachelle", "Funk", "MED"], ["Lorenz", "Nicolas", "MED"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.first_name, T2.name \nFROM Owners AS T1 INNER JOIN Dogs AS T2 \nON T1.owner_id = T2.owner_id", "match": {"match": true, "result": [["Jaclyn", "Kacey"], ["Gay", "Hipolito"], ["Nora", "Mavis"], ["Rachelle", "Houston"], ["Emelie", "Jeffrey"], ["Johann", "Merritt"], ["Jaclyn", "Narciso"], ["Rachelle", "George"], ["Melisa", "Bessie"], ["Kade", "Troy"], ["Cindy", "Betty"], ["Orlando", "Holden"], ["Rolando", "Jesus"], ["Rachelle", "Lyric"], ["Lorenz", "Evangeline"]]}}
{"result": "```sql\nSELECT T1.first_name, T2.name\nFROM Owners T1\nJOIN Dogs T2 ON T1.owner_id = T2.owner_id\n```", "match": {"match": true, "result": [["Jaclyn", "Kacey"], ["Gay", "Hipolito"], ["Nora", "Mavis"], ["Rachelle", "Houston"], ["Emelie", "Jeffrey"], ["Johann", "Merritt"], ["Jaclyn", "Narciso"], ["Rachelle", "George"], ["Melisa", "Bessie"], ["Kade", "Troy"], ["Cindy", "Betty"], ["Orlando", "Holden"], ["Rolando", "Jesus"], ["Rachelle", "Lyric"], ["Lorenz", "Evangeline"]]}}
{"result": "SELECT T1.name, T3.date_of_treatment \nFROM Dogs AS T1 \nJOIN Breeds AS T2 ON T1.breed_code = T2.breed_code \nJOIN Treatments AS T3 ON T1.dog_id = T3.dog_id \nORDER BY COUNT(T2.breed_code) \nLIMIT 1", "match": {"match": false, "error": "Query execution failed with error: misuse of aggregate: COUNT()"}}
{"result": "```sql\nSELECT T3.name, T2.date_of_treatment\nFROM Breeds AS T1\nJOIN Dogs AS T3 ON T1.breed_code = T3.breed_code\nJOIN Treatments AS T2 ON T3.dog_id = T2.dog_id\nWHERE T1.breed_name = (SELECT breed_name FROM Breeds GROUP BY breed_name ORDER BY COUNT(breed_name) ASC LIMIT 1)\n```", "match": {"match": false, "result": [["Hipolito", "2018-03-01 04:14:46"], ["Evangeline", "2018-03-10 11:45:58"], ["Hipolito", "2018-03-24 22:25:58"], ["Evangeline", "2018-03-13 12:22:58"], ["Narciso", "2018-02-26 09:08:53"]], "gt": [["Lyric", "2018-03-19 04:39:54"], ["Houston", "2018-03-15 20:25:34"], ["Lyric", "2018-03-08 05:26:23"], ["Lyric", "2018-03-14 19:10:40"], ["Kacey", "2018-03-15 19:10:02"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.first_name, T2.name FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'VA'", "match": {"match": false, "result": [], "gt": [["Melisa", "Bessie"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT T1.first_name, T2.name\nFROM Owners AS T1\nINNER JOIN Dogs AS T2\nON T1.owner_id = T2.owner_id\nWHERE T1.state = 'VA';\n```", "match": {"match": false, "result": [], "gt": [["Melisa", "Bessie"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT T2.date_arrived, T2.date_departed \nFROM Treatments AS T1 \nINNER JOIN Dogs AS T2 ON T1.dog_id = T2.dog_id;\n```", "match": {"match": false, "result": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "gt": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT T1.date_arrived, T1.date_departed\nFROM Dogs AS T1\nINNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id;\n```", "match": {"match": false, "result": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "gt": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T3.last_name FROM Dogs AS T1 INNER JOIN Owners AS T3 ON T1.owner_id = T3.owner_id ORDER BY T1.date_of_birth DESC LIMIT 1", "match": {"match": false, "result": [["Mertz"]], "gt": [["Feil"], ["Fisher"], ["Rippin"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.last_name FROM Dogs AS T1 INNER JOIN Owners AS T2 ON T1.owner_id = T2.owner_id ORDER BY T1.age LIMIT 1", "match": {"match": false, "result": [["Nicolas"]], "gt": [["Feil"], ["Fisher"], ["Rippin"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT email_address FROM Professionals WHERE state = 'HI' OR state = 'WI'", "match": {"match": false, "result": [], "gt": [["uboehm@example.org"], ["mekhi.little@example.org"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT email_address FROM Professionals WHERE state = 'HI' OR state = 'WI'", "match": {"match": false, "result": [], "gt": [["uboehm@example.org"], ["mekhi.little@example.org"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT date_arrived, date_departed \nFROM Dogs;\n```", "match": {"match": true, "result": [["2017-09-08 20:10:13", "2018-03-25 06:58:44"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-25 10:14:05", "2018-03-25 10:25:46"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-10-25 00:55:34", "2018-03-25 04:50:22"], ["2017-04-15 09:25:31", "2018-03-25 13:07:04"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-10-16 20:06:21", "2018-03-25 02:47:40"], ["2018-01-17 11:44:16", "2018-03-25 06:46:07"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-07-25 15:19:07", "2018-03-25 15:05:16"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"]]}}
{"result": "SELECT date_arrived, date_departed FROM Dogs", "match": {"match": true, "result": [["2017-09-08 20:10:13", "2018-03-25 06:58:44"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-25 10:14:05", "2018-03-25 10:25:46"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-10-25 00:55:34", "2018-03-25 04:50:22"], ["2017-04-15 09:25:31", "2018-03-25 13:07:04"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-10-16 20:06:21", "2018-03-25 02:47:40"], ["2018-01-17 11:44:16", "2018-03-25 06:46:07"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-07-25 15:19:07", "2018-03-25 15:05:16"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"]]}}
{"result": "SELECT COUNT(DISTINCT dog_id) FROM Treatments", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(dog_id) FROM Treatments", "match": {"match": false, "result": [[15]], "gt": [[9]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT professional_id) FROM Treatments", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT COUNT(DISTINCT professional_id) FROM Treatments", "match": {"match": true, "result": [[8]]}}
{"result": "```sql\nSELECT role_code, street, city, state \nFROM Professionals \nWHERE city LIKE '%West%';\n```", "match": {"match": true, "result": [["Employee", "6915 Oberbrunner Point Suite 491\nGleasonville, LA ", "West Heidi", "Indiana"]]}}
{"result": "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'", "match": {"match": true, "result": [["Employee", "6915 Oberbrunner Point Suite 491\nGleasonville, LA ", "West Heidi", "Indiana"]]}}
{"result": "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'", "match": {"match": true, "result": [["Johann", "Fisher", "zboncak.madonna@example.net"], ["Cindy", "Schmitt", "wpfeffer@example.net"]]}}
{"result": "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'", "match": {"match": true, "result": [["Johann", "Fisher", "zboncak.madonna@example.net"], ["Cindy", "Schmitt", "wpfeffer@example.net"]]}}
{"result": "```sql\nSELECT COUNT(dog_id) \nFROM Dogs \nWHERE age < (SELECT AVG(age) FROM Dogs);\n```", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(dog_id) \nFROM Dogs \nWHERE `age` < (SELECT AVG(`age`) FROM Dogs)", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT MAX(cost_of_treatment) FROM Treatments", "match": {"match": false, "result": [[945]], "gt": [[407]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(cost_of_treatment) FROM Treatments", "match": {"match": false, "result": [[945]], "gt": [[407]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(dog_id) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(owner_id) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(owner_id) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs WHERE abandoned_yn = 'N' AND date_adopted IS NULL AND date_departed IS NULL )", "match": {"match": false, "result": [[15]], "gt": [[3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(professional_id) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT COUNT(professional_id) \nFROM Professionals \nWHERE professional_id NOT IN (SELECT professional_id FROM Treatments)", "match": {"match": true, "result": [[7]]}}
{"result": "```sql\nSELECT name, age, weight \nFROM Dogs \nWHERE abandoned_yn = '1';\n```", "match": {"match": true, "result": [["Kacey", "6", "7.57"], ["Lyric", "4", "4.36"], ["Evangeline", "1", "4.01"]]}}
{"result": "```sql\nSELECT \n    `name`, \n    `age`, \n    `weight`\nFROM \n    `Dogs`\nWHERE \n    `abandoned_yn` = '1';\n```", "match": {"match": true, "result": [["Kacey", "6", "7.57"], ["Lyric", "4", "4.36"], ["Evangeline", "1", "4.01"]]}}
{"result": "SELECT AVG(age) FROM Dogs", "match": {"match": true, "result": [[5.066666666666666]]}}
{"result": "SELECT AVG(age) FROM Dogs", "match": {"match": true, "result": [[5.066666666666666]]}}
{"result": "SELECT age FROM Dogs ORDER BY date_of_birth ASC LIMIT 1", "match": {"match": false, "result": [["8"]], "gt": [["9"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT age FROM Dogs ORDER BY date_of_birth LIMIT 1", "match": {"match": false, "result": [["8"]], "gt": [["9"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT charge_type, charge_amount FROM Charges", "match": {"match": true, "result": [["Daily Accommodation", 98], ["Drugs", 322], ["Health Check", 640]]}}
{"result": "SELECT charge_type, charge_amount FROM Charges", "match": {"match": true, "result": [["Daily Accommodation", 98], ["Drugs", 322], ["Health Check", 640]]}}
{"result": "SELECT MAX(charge_amount) FROM Charges", "match": {"match": true, "result": [[640]]}}
{"result": "SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1", "match": {"match": true, "result": [[640]]}}
{"result": "SELECT email_address, cell_number, home_phone FROM Professionals", "match": {"match": true, "result": [["deanna.schuster@example.com", "(275)939-2435x80863", "+71(6)2898266914"], ["lucile.shanahan@example.org", "889-940-2676", "+02(1)0259033559"], ["uboehm@example.org", "(369)908-7311x065", "325-155-0801x7005"], ["lourdes.lowe@example.net", "00230569697", "312.216.3352"], ["mekhi.little@example.org", "011.193.9081x3186", "1-609-566-2752x25197"], ["jacynthe.mclaughlin@example.net", "139-321-7313", "+43(5)1132733868"], ["lambert62@example.org", "499-434-0215x1628", "022.529.0550x1319"], ["goyette.roosevelt@example.net", "328.842.3792", "891.475.2256"], ["schneider.kathryne@example.org", "962-983-8109x3509", "320-508-6023"], ["jerrod.bahringer@example.org", "461-801-2600", "(230)338-3342x585"], ["west.eula@example.net", "609-405-2990", "(920)304-4499x59146"], ["marquardt.furman@example.org", "1-181-670-9466", "246-951-0080x76716"], ["delphine29@example.com", "880-659-7577x736", "346.594.3739"], ["cole.margarita@example.org", "1-185-137-1945x409", "971.048.3763x9404"], ["jeichmann@example.com", "1-258-285-4707x8020", "1-138-287-3775"]]}}
{"result": "```sql\nSELECT email_address, cell_number, home_phone \nFROM Professionals;\n```", "match": {"match": true, "result": [["deanna.schuster@example.com", "(275)939-2435x80863", "+71(6)2898266914"], ["lucile.shanahan@example.org", "889-940-2676", "+02(1)0259033559"], ["uboehm@example.org", "(369)908-7311x065", "325-155-0801x7005"], ["lourdes.lowe@example.net", "00230569697", "312.216.3352"], ["mekhi.little@example.org", "011.193.9081x3186", "1-609-566-2752x25197"], ["jacynthe.mclaughlin@example.net", "139-321-7313", "+43(5)1132733868"], ["lambert62@example.org", "499-434-0215x1628", "022.529.0550x1319"], ["goyette.roosevelt@example.net", "328.842.3792", "891.475.2256"], ["schneider.kathryne@example.org", "962-983-8109x3509", "320-508-6023"], ["jerrod.bahringer@example.org", "461-801-2600", "(230)338-3342x585"], ["west.eula@example.net", "609-405-2990", "(920)304-4499x59146"], ["marquardt.furman@example.org", "1-181-670-9466", "246-951-0080x76716"], ["delphine29@example.com", "880-659-7577x736", "346.594.3739"], ["cole.margarita@example.org", "1-185-137-1945x409", "971.048.3763x9404"], ["jeichmann@example.com", "1-258-285-4707x8020", "1-138-287-3775"]]}}
{"result": "```sql\nSELECT DISTINCT B.breed_code, S.size_code\nFROM Breeds B\nCROSS JOIN Sizes S;\n```", "match": {"match": false, "result": [["BUL", "LGE"], ["BUL", "MED"], ["BUL", "SML"], ["ESK", "LGE"], ["ESK", "MED"], ["ESK", "SML"], ["HUS", "LGE"], ["HUS", "MED"], ["HUS", "SML"]], "gt": [["ESK", "LGE"], ["BUL", "LGE"], ["BUL", "MED"], ["HUS", "MED"], ["ESK", "SML"], ["HUS", "SML"], ["ESK", "MED"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT DISTINCT breed_code, size_code \nFROM Dogs;\n```", "match": {"match": true, "result": [["ESK", "LGE"], ["BUL", "LGE"], ["BUL", "MED"], ["HUS", "MED"], ["ESK", "SML"], ["HUS", "SML"], ["ESK", "MED"]]}}
{"result": "```sql\nSELECT T2.first_name, T1.treatment_type_description \nFROM Treatment_Types AS T1\nINNER JOIN Treatments AS T2 ON T2.treatment_type_code = T1.treatment_type_code\nINNER JOIN Professionals AS T3 ON T3.professional_id = T2.professional_id;\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.first_name"}}
{"result": "```sql\nSELECT T1.first_name, T3.treatment_type_description\nFROM Professionals T1\nJOIN Treatments T2 ON T1.professional_id = T2.professional_id\nJOIN Treatment_Types T3 ON T2.treatment_type_code = T3.treatment_type_code;\n```", "match": {"match": false, "result": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Vernice", "Physical examination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Karley", "Vaccination"], ["Monte", "Take for a Walk"], ["Ruben", "Take for a Walk"]], "gt": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Ruben", "Take for a Walk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(Singer_ID) FROM singer", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT COUNT(Singer_ID) FROM singer", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;", "match": {"match": true, "result": [["Abigail Johnson"], ["Susanne Klatten"], ["Gina Rinehart"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Alice Walton"], ["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "match": {"match": true, "result": [["Abigail Johnson"], ["Susanne Klatten"], ["Gina Rinehart"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Alice Walton"], ["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT Birth_Year, Citizenship FROM singer", "match": {"match": true, "result": [[1944.0, "France"], [1948.0, "United States"], [1949.0, "United States"], [1942.0, "Chile"], [1940.0, "United States"], [1953.0, "Australia"], [1962.0, "Germany"], [1961.0, "United States"]]}}
{"result": "SELECT Birth_Year, Citizenship FROM singer", "match": {"match": true, "result": [[1944.0, "France"], [1948.0, "United States"], [1949.0, "United States"], [1942.0, "Chile"], [1940.0, "United States"], [1953.0, "Australia"], [1962.0, "Germany"], [1961.0, "United States"]]}}
{"result": "SELECT Name FROM singer WHERE Citizenship != 'France'", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]]}}
{"result": "SELECT Name FROM singer WHERE Citizenship != 'France'", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]]}}
{"result": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"]]}}
{"result": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "match": {"match": true, "result": [["Liliane Bettencourt"]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "match": {"match": true, "result": [["Liliane Bettencourt"]]}}
{"result": "SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship", "match": {"match": true, "result": [["Australia", 1], ["Chile", 1], ["France", 1], ["Germany", 1], ["United States", 4]]}}
{"result": "SELECT COUNT(Singer_ID), Citizenship FROM singer GROUP BY Citizenship", "match": {"match": false, "result": [[1, "Australia"], [1, "Chile"], [1, "France"], [1, "Germany"], [4, "United States"]], "gt": [["Australia", 1], ["Chile", 1], ["France", 1], ["Germany", 1], ["United States", 4]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(Singer_ID) DESC LIMIT 1", "match": {"match": true, "result": [["United States"]]}}
{"result": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(Citizenship) DESC LIMIT 1", "match": {"match": true, "result": [["United States"]]}}
{"result": "SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "match": {"match": true, "result": [["Australia", 17.0], ["Chile", 17.4], ["France", 30.0], ["Germany", 14.3], ["United States", 28.8]]}}
{"result": "SELECT MAX(Net_Worth_Millions), Citizenship FROM singer GROUP BY Citizenship", "match": {"match": false, "result": [[17.0, "Australia"], [17.4, "Chile"], [30.0, "France"], [14.3, "Germany"], [28.8, "United States"]], "gt": [["Australia", 17.0], ["Chile", 17.4], ["France", 30.0], ["Germany", 14.3], ["United States", 28.8]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Title, T2.Name \nFROM song AS T1 \nINNER JOIN singer AS T2 \nON T1.Singer_ID = T2.Singer_ID", "match": {"match": true, "result": [["Do They Know It's Christmas", "Liliane Bettencourt"], ["F**k It (I Don't Want You Back)", "Liliane Bettencourt"], ["Cha Cha Slide", "Christy Walton"], ["Call on Me", "Iris Fontbona"], ["Yeah", "Christy Walton"], ["All This Time", "Gina Rinehart"], ["Left Outside Alone", "Jacqueline Mars"], ["Mysterious Girl", "Susanne Klatten"]]}}
{"result": "SELECT T1.Title, T2.Name \nFROM song AS T1 \nINNER JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID", "match": {"match": true, "result": [["Do They Know It's Christmas", "Liliane Bettencourt"], ["F**k It (I Don't Want You Back)", "Liliane Bettencourt"], ["Cha Cha Slide", "Christy Walton"], ["Call on Me", "Iris Fontbona"], ["Yeah", "Christy Walton"], ["All This Time", "Gina Rinehart"], ["Left Outside Alone", "Jacqueline Mars"], ["Mysterious Girl", "Susanne Klatten"]]}}
{"result": "SELECT DISTINCT T1.Name FROM singer AS T1 INNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000", "match": {"match": true, "result": [["Liliane Bettencourt"], ["Christy Walton"], ["Iris Fontbona"]]}}
{"result": "SELECT DISTINCT T1.Name FROM singer AS T1 INNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000", "match": {"match": true, "result": [["Liliane Bettencourt"], ["Christy Walton"], ["Iris Fontbona"]]}}
{"result": "SELECT T1.Name \nFROM singer AS T1 \nINNER JOIN song AS T2 \nON T1.Singer_ID = T2.Singer_ID \nGROUP BY T1.Name \nHAVING COUNT(T2.Song_ID) > 1", "match": {"match": true, "result": [["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT T1.Name FROM singer AS T1 INNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID HAVING COUNT(T2.Song_ID) > 1", "match": {"match": false, "result": [["Liliane Bettencourt"], ["Christy Walton"]], "gt": [["Christy Walton"], ["Liliane Bettencourt"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T1.Name, SUM(T2.Sales) AS Total_Sales \nFROM singer AS T1 \nINNER JOIN song AS T2 \nON T1.Singer_ID = T2.Singer_ID \nGROUP BY T1.Name", "match": {"match": true, "result": [["Christy Walton", 651421.0], ["Gina Rinehart", 292000.0], ["Iris Fontbona", 335000.0], ["Jacqueline Mars", 275000.0], ["Liliane Bettencourt", 1646407.0], ["Susanne Klatten", 261000.0]]}}
{"result": "SELECT T1.Name, SUM(T2.Sales) FROM singer AS T1 INNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name", "match": {"match": true, "result": [["Christy Walton", 651421.0], ["Gina Rinehart", 292000.0], ["Iris Fontbona", 335000.0], ["Jacqueline Mars", 275000.0], ["Liliane Bettencourt", 1646407.0], ["Susanne Klatten", 261000.0]]}}
{"result": "SELECT Name FROM singer WHERE Singer_ID NOT IN ( SELECT Singer_ID FROM song )", "match": {"match": true, "result": [["Alice Walton"], ["Abigail Johnson"]]}}
{"result": "SELECT Name FROM singer WHERE Singer_ID NOT IN ( SELECT Singer_ID FROM song )", "match": {"match": true, "result": [["Alice Walton"], ["Abigail Johnson"]]}}
{"result": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955", "match": {"match": true, "result": [["United States"]]}}
{"result": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955", "match": {"match": true, "result": [["United States"]]}}
{"result": "SELECT COUNT(feature_id) FROM Other_Available_Features", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT T1.feature_type_name \nFROM Ref_Feature_Types T1\nINNER JOIN Other_Available_Features T2\nON T1.feature_type_code = T2.feature_type_code\nWHERE T2.feature_name = 'AirCon'", "match": {"match": true, "result": [["Amenity, eg Pool."]]}}
{"result": "SELECT T1.property_type_description FROM Ref_Property_Types AS T1 INNER JOIN Properties AS T2 ON T1.property_type_code = T2.property_type_code", "match": {"match": false, "result": [["House, Bungalow, etc."], ["House, Bungalow, etc."], ["Other, to be determined."], ["Field, Meadow."], ["Apartment, Flat, Condo, etc."], ["Shop, Retail Outlet."], ["Shop, Retail Outlet."], ["Apartment, Flat, Condo, etc."], ["Apartment, Flat, Condo, etc."], ["Apartment, Flat, Condo, etc."], ["Other, to be determined."], ["Apartment, Flat, Condo, etc."], ["Other, to be determined."], ["Other, to be determined."], ["Apartment, Flat, Condo, etc."]], "gt": [["Apartment, Flat, Condo, etc."], ["Field, Meadow."], ["House, Bungalow, etc."], ["Other, to be determined."], ["Shop, Retail Outlet."]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT property_name \nFROM Properties \nWHERE (property_type_code = 'House' OR property_type_code = 'Apartment') \nAND room_count > 1;\n```", "match": {"match": false, "result": [["park"], ["parc east"], ["vogue"], ["longacre"], ["renoir"], ["ten tower"], ["parc coliseum"]], "gt": [["longacre"], ["parc coliseum"], ["parc east"], ["park"], ["renoir"], ["ten tower"], ["the cole"], ["vogue"]], "error": "Query result does not match ground truth."}}

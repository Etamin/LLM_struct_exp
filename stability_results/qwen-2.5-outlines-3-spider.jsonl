
{"result": "SELECT COUNT(*) FROM singer", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(*) FROM singer", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC", "match": {"match": true, "result": [["Joe Sharp", "Netherlands", 52], ["John Nizinik", "France", 43], ["Rose White", "France", 41], ["Timbaland", "United States", 32], ["Justin Brown", "France", 29], ["Tribal King", "France", 25]]}}
{"result": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC", "match": {"match": true, "result": [["Joe Sharp", "Netherlands", 52], ["John Nizinik", "France", 43], ["Rose White", "France", 41], ["Timbaland", "United States", 32], ["Justin Brown", "France", 29], ["Tribal King", "France", 25]]}}
{"result": "SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France'", "match": {"match": true, "result": [[34.5, 25, 43]]}}
{"result": "SELECT AVG(Age) AS Average.Age, MIN(Age) AS Minimum.Age, MAX(Age) AS Maximum.Age FROM singer WHERE Country = 'France'", "match": {"match": false, "error": "Query execution failed with error: near \".\": syntax error"}}
{"result": "SELECT Song_Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer)", "match": {"match": true, "result": [["Love", "2016"]]}}
{"result": "SELECT Song_Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer)", "match": {"match": true, "result": [["Love", "2016"]]}}
{"result": "SELECT DISTINCT Country FROM singer WHERE Age > 20", "match": {"match": true, "result": [["Netherlands"], ["United States"], ["France"]]}}
{"result": "SELECT Country FROM singer WHERE Age > 20 GROUP BY Country", "match": {"match": false, "result": [["France"], ["Netherlands"], ["United States"]], "gt": [["Netherlands"], ["United States"], ["France"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Country, COUNT(Singer_ID) FROM singer GROUP BY Country", "match": {"match": true, "result": [["France", 4], ["Netherlands", 1], ["United States", 1]]}}
{"result": "SELECT Country, COUNT(*) FROM singer GROUP BY Country", "match": {"match": true, "result": [["France", 4], ["Netherlands", 1], ["United States", 1]]}}
{"result": "SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)", "match": {"match": true, "result": [["You"], ["Sun"], ["Gentleman"]]}}
{"result": "SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)", "match": {"match": true, "result": [["You"], ["Sun"], ["Gentleman"]]}}
{"result": "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000", "match": {"match": true, "result": []}}
{"result": "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000", "match": {"match": true, "result": []}}
{"result": "SELECT max(Capacity) AS Max_Capacity, avg(Capacity) AS Average_Capacity FROM stadium", "match": {"match": false, "result": [[52500, 10621.666666666666]], "gt": [[52500, 730]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(Capacity) AS Average_Capacity, MAX(Capacity) AS Maximum_Capacity FROM stadium", "match": {"match": true, "result": [[10621.666666666666, 52500]]}}
{"result": "SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)", "match": {"match": true, "result": [["Stark's Park", 10104]]}}
{"result": "SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)", "match": {"match": true, "result": [["Stark's Park", 10104]]}}
{"result": "```sql\nSELECT COUNT(*) \nFROM concert \nWHERE Year IN ('2014', '2015');\n```", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(*) FROM concert WHERE Year IN ('2014', '2015')", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT s.Name, COUNT(c.concert_ID) AS Number_of_Concerts\nFROM stadium s\nLEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID\nGROUP BY s.Name", "match": {"match": false, "result": [["Balmoor", 1], ["Bayview Stadium", 0], ["Forthbank Stadium", 0], ["Gayfield Park", 0], ["Glebe Park", 1], ["Hampden Park", 0], ["Recreation Park", 1], ["Somerset Park", 2], ["Stark's Park", 1]], "gt": [["Stark's Park", 1], ["Glebe Park", 1], ["Somerset Park", 2], ["Recreation Park", 1], ["Balmoor", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Stadium_ID, COUNT(concert_ID) AS Number_of_Concerts\nFROM concert\nGROUP BY Stadium_ID", "match": {"match": false, "result": [["1", 1], ["10", 1], ["2", 2], ["7", 1], ["9", 1]], "gt": [["Stark's Park", 1], ["Glebe Park", 1], ["Somerset Park", 2], ["Recreation Park", 1], ["Balmoor", 1]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT s.Name, s.Capacity\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.Year >= '2014'\nGROUP BY s.Stadium_ID\nORDER BY COUNT(c.concert_ID) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [["Somerset Park", 11998]]}}
{"result": "```sql\nSELECT s.Name, s.Capacity\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.Year > '2013'\nGROUP BY s.Stadium_ID\nORDER BY COUNT(c.concert_ID) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [["Somerset Park", 11998]]}}
{"result": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1", "match": {"match": true, "result": [["2015"]]}}
{"result": "SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1", "match": {"match": true, "result": [["2015"]]}}
{"result": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)", "match": {"match": true, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"]]}}
{"result": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)", "match": {"match": true, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"]]}}
{"result": "```sql\nSELECT DISTINCT Country \nFROM singer \nWHERE Age > 40 \nUNION \nSELECT DISTINCT Country \nFROM singer \nWHERE Age < 30;\n```", "match": {"match": false, "result": [["France"], ["Netherlands"]], "gt": [["France"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT Name \nFROM stadium \nWHERE Stadium_ID NOT IN (\n    SELECT Stadium_ID \n    FROM concert \n    WHERE Year = '2014'\n);\n```", "match": {"match": false, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"], ["Recreation Park"], ["Balmoor"]], "gt": [["Balmoor"], ["Bayview Stadium"], ["Forthbank Stadium"], ["Gayfield Park"], ["Hampden Park"], ["Recreation Park"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014')", "match": {"match": false, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"], ["Recreation Park"], ["Balmoor"]], "gt": [["Balmoor"], ["Bayview Stadium"], ["Forthbank Stadium"], ["Gayfield Park"], ["Hampden Park"], ["Recreation Park"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT c.concert_Name, c.Theme, COUNT(sc.Singer_ID) AS Number_of_Singers\nFROM concert c\nJOIN singer_in_concert sc ON c.concert_ID = sc.concert_ID\nGROUP BY c.concert_ID, c.concert_Name, c.Theme;\n```", "match": {"match": true, "result": [["Auditions", "Free choice", 3], ["Super bootcamp", "Free choice 2", 2], ["Home Visits", "Bleeding Love", 1], ["Week 1", "Wide Awake", 1], ["Week 1", "Happy Tonight", 2], ["Week 2", "Party All Night", 1]]}}
{"result": "SELECT c.concert_Name, c.Theme, COUNT(sc.Singer_ID) AS Number_of_Singers\nFROM concert c\nJOIN singer_in_concert sc ON c.concert_ID = sc.concert_ID\nGROUP BY c.concert_ID, c.concert_Name, c.Theme", "match": {"match": true, "result": [["Auditions", "Free choice", 3], ["Super bootcamp", "Free choice 2", 2], ["Home Visits", "Bleeding Love", 1], ["Week 1", "Wide Awake", 1], ["Week 1", "Happy Tonight", 2], ["Week 2", "Party All Night", 1]]}}
{"result": "SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS Number_of_Concerts\nFROM singer\nJOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID\nGROUP BY singer.Name", "match": {"match": false, "result": [["John Nizinik", 2], ["Justin Brown", 3], ["Rose White", 1], ["Timbaland", 2], ["Tribal King", 2]], "gt": [["Timbaland", 2], ["Justin Brown", 3], ["Rose White", 1], ["John Nizinik", 2], ["Tribal King", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.Name, COUNT(sc.concert_ID) AS Number_of_Concerts\nFROM singer s\nJOIN singer_in_concert sc ON s.Singer_ID = sc.Singer_ID\nGROUP BY s.Name", "match": {"match": false, "result": [["John Nizinik", 2], ["Justin Brown", 3], ["Rose White", 1], ["Timbaland", 2], ["Tribal King", 2]], "gt": [["Timbaland", 2], ["Justin Brown", 3], ["Rose White", 1], ["John Nizinik", 2], ["Tribal King", 2]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT DISTINCT s.Name\nFROM singer s\nJOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID\nJOIN concert c ON sic.concert_ID = c.concert_ID\nWHERE c.Year = '2014';\n```", "match": {"match": false, "result": [["Timbaland"], ["Justin Brown"], ["John Nizinik"], ["Tribal King"], ["Rose White"]], "gt": [["Timbaland"], ["Justin Brown"], ["John Nizinik"], ["Justin Brown"], ["Tribal King"], ["Rose White"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT DISTINCT s.Name\nFROM singer s\nJOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID\nJOIN concert c ON sic.concert_ID = c.concert_ID\nWHERE c.Year = '2014';\n```", "match": {"match": false, "result": [["Timbaland"], ["Justin Brown"], ["John Nizinik"], ["Tribal King"], ["Rose White"]], "gt": [["Timbaland"], ["Justin Brown"], ["John Nizinik"], ["Justin Brown"], ["Tribal King"], ["Rose White"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT Name, Country \nFROM singer \nWHERE Song_Name LIKE '%Hey%';\n```", "match": {"match": true, "result": [["Justin Brown", "France"]]}}
{"result": "SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'", "match": {"match": true, "result": [["Justin Brown", "France"]]}}
{"result": "```sql\nSELECT s.Name, s.Location\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.Year IN ('2014', '2015')\nGROUP BY s.Stadium_ID, s.Name, s.Location\nHAVING COUNT(DISTINCT c.Year) = 2;\n```", "match": {"match": true, "result": [["Somerset Park", "Ayr United"]]}}
{"result": "```sql\nSELECT s.Name, s.Location\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.Year IN ('2014', '2015')\nGROUP BY s.Stadium_ID, s.Name, s.Location\nHAVING COUNT(DISTINCT c.Year) = 2;\n```", "match": {"match": true, "result": [["Somerset Park", "Ayr United"]]}}
{"result": "```sql\nSELECT COUNT(*) \nFROM concert \nWHERE Stadium_ID = (\n    SELECT Stadium_ID \n    FROM stadium \n    ORDER BY Capacity DESC \n    LIMIT 1\n);\n```", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)", "match": {"match": true, "result": [[0]]}}
{"result": "```sql\nSELECT COUNT(*) \nFROM Pets \nWHERE weight > 10;\n```", "match": {"match": true, "result": [[2]]}}
{"result": "```sql\nSELECT COUNT(*) \nFROM Pets \nWHERE weight > 10;\n```", "match": {"match": true, "result": [[2]]}}
{"result": "```sql\nSELECT weight \nFROM Pets \nWHERE PetType = 'dog' \nORDER BY pet_age \nLIMIT 1;\n```", "match": {"match": true, "result": [[9.3]]}}
{"result": "```sql\nSELECT weight \nFROM Pets \nWHERE PetType = 'dog' \nORDER BY pet_age \nLIMIT 1;\n```", "match": {"match": true, "result": [[9.3]]}}
{"result": "```sql\nSELECT PetType, MAX(weight) AS MaxWeight\nFROM Pets\nGROUP BY PetType;\n```", "match": {"match": false, "result": [["cat", 12.0], ["dog", 13.4]], "gt": [[12.0, "cat"], [13.4, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT PetType, MAX(weight) AS MaxWeight\nFROM Pets\nGROUP BY PetType", "match": {"match": false, "result": [["cat", 12.0], ["dog", 13.4]], "gt": [[12.0, "cat"], [13.4, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT COUNT(*) \nFROM Has_Pet HP \nJOIN Student S ON HP.StuID = S.StuID \nWHERE S.Age > 20;\n```", "match": {"match": true, "result": [[0]]}}
{"result": "```sql\nSELECT COUNT(DISTINCT S.StuID) \nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nWHERE S.Age > 20;\n```", "match": {"match": true, "result": [[0]]}}
{"result": "```sql\nSELECT COUNT(*) \nFROM Has_Pet HP \nJOIN Pets P ON HP.PetID = P.PetID \nJOIN Student S ON HP.StuID = S.StuID \nWHERE P.PetType = 'Dog' AND S.Sex = 'F';\n```", "match": {"match": false, "result": [[0]], "gt": [[2]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT COUNT(*) \nFROM Has_Pet HP \nJOIN Student S ON HP.StuID = S.StuID \nJOIN Pets P ON HP.PetID = P.PetID \nWHERE S.Sex = 'F' AND P.PetType = 'Dog';\n```", "match": {"match": false, "result": [[0]], "gt": [[2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT PetType) FROM Pets", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(DISTINCT PetType) FROM Pets", "match": {"match": true, "result": [[2]]}}
{"result": "```sql\nSELECT S.Fname\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nJOIN Pets P ON HP.PetID = P.PetID\nWHERE P.PetType IN ('cat', 'dog');\n```", "match": {"match": false, "result": [["Linda"], ["Tracy"], ["Tracy"]], "gt": [["Linda"], ["Tracy"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT S.Fname \nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nJOIN Pets P ON HP.PetID = P.PetID\nWHERE P.PetType IN ('cat', 'dog')", "match": {"match": false, "result": [["Linda"], ["Tracy"], ["Tracy"]], "gt": [["Linda"], ["Tracy"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT s.Fname\nFROM Student s\nJOIN Has_Pet hp1 ON s.StuID = hp1.StuID\nJOIN Pets p1 ON hp1.PetID = p1.PetID\nJOIN Has_Pet hp2 ON s.StuID = hp2.StuID\nJOIN Pets p2 ON hp2.PetID = p2.PetID\nWHERE p1.PetType = 'cat' AND p2.PetType = 'dog';\n```", "match": {"match": true, "result": []}}
{"result": "```sql\nSELECT S.Fname\nFROM Student S\nJOIN Has_Pet HP1 ON S.StuID = HP1.StuID\nJOIN Pets P1 ON HP1.PetID = P1.PetID\nJOIN Has_Pet HP2 ON S.StuID = HP2.StuID\nJOIN Pets P2 ON HP2.PetID = P2.PetID\nWHERE P1.PetType = 'cat' AND P2.PetType = 'dog';\n```", "match": {"match": true, "result": []}}
{"result": "```sql\nSELECT Major, Age \nFROM Student \nWHERE StuID NOT IN (\n    SELECT StuID \n    FROM Has_Pet \n    INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID \n    WHERE PetType = 'cat'\n)\n```", "match": {"match": true, "result": [[600, 19], [600, 21], [600, 20], [600, 26], [600, 18], [600, 18], [600, 20], [600, 19], [600, 17], [600, 22], [600, 20], [600, 18], [600, 16], [600, 17], [600, 27], [600, 20], [600, 18], [520, 22], [520, 19], [540, 17], [520, 20], [540, 18], [520, 18], [520, 19], [520, 18], [550, 20], [100, 17], [550, 21], [550, 20], [550, 20], [550, 18], [50, 18], [50, 26]]}}
{"result": "```sql\nSELECT S.Major, S.Age \nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nWHERE HP.PetID NOT IN (\n    SELECT PetID \n    FROM Pets \n    WHERE PetType = 'Cat'\n)\n```", "match": {"match": false, "result": [[600, 18], [600, 19], [600, 19]], "gt": [[600, 19], [600, 21], [600, 20], [600, 26], [600, 18], [600, 18], [600, 20], [600, 19], [600, 17], [600, 22], [600, 20], [600, 18], [600, 16], [600, 17], [600, 27], [600, 20], [600, 18], [520, 22], [520, 19], [540, 17], [520, 20], [540, 18], [520, 18], [520, 19], [520, 18], [550, 20], [100, 17], [550, 21], [550, 20], [550, 20], [550, 18], [50, 18], [50, 26]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))\n```", "match": {"match": true, "result": [[1002], [1003], [1004], [1005], [1006], [1007], [1008], [1009], [1010], [1011], [1012], [1014], [1015], [1016], [1017], [1018], [1019], [1020], [1021], [1022], [1023], [1024], [1025], [1026], [1027], [1028], [1029], [1030], [1031], [1032], [1033], [1034], [1035]]}}
{"result": "SELECT StuID FROM Has_Pet WHERE PetID NOT IN (SELECT PetID FROM Pets WHERE PetType = 'cat')", "match": {"match": false, "result": [[1002], [1002]], "gt": [[1002], [1003], [1004], [1005], [1006], [1007], [1008], [1009], [1010], [1011], [1012], [1014], [1015], [1016], [1017], [1018], [1019], [1020], [1021], [1022], [1023], [1024], [1025], [1026], [1027], [1028], [1029], [1030], [1031], [1032], [1033], [1034], [1035]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT S.Fname, S.Age \nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nJOIN Pets P ON HP.PetID = P.PetID\nWHERE P.PetType = 'dog'\nAND S.StuID NOT IN (\n    SELECT StuID \n    FROM Has_Pet \n    JOIN Pets ON Has_Pet.PetID = Pets.PetID\n    WHERE PetType = 'cat'\n)\n```", "match": {"match": true, "result": [["Tracy", 19], ["Tracy", 19]]}}
{"result": "```sql\nSELECT S.Fname\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nJOIN Pets P ON HP.PetID = P.PetID\nWHERE P.PetType = 'Dog'\nAND S.StuID NOT IN (\n    SELECT HP.StuID\n    FROM Has_Pet HP\n    JOIN Pets P ON HP.PetID = P.PetID\n    WHERE P.PetType = 'Cat'\n)\n```", "match": {"match": false, "result": [], "gt": [["Tracy", 19], ["Tracy", 19]], "error": "Query result does not match ground truth."}}
{"result": "SELECT PetType, weight\nFROM Pets\nWHERE pet_age = (SELECT MIN(pet_age) FROM Pets);", "match": {"match": true, "result": [["dog", 9.3]]}}
{"result": "```sql\nSELECT PetType, weight \nFROM Pets \nWHERE pet_age = (SELECT MIN(pet_age) FROM Pets);\n```", "match": {"match": true, "result": [["dog", 9.3]]}}
{"result": "```sql\nSELECT PetID, weight \nFROM Pets \nWHERE pet_age > 1;\n```", "match": {"match": true, "result": [[2001, 12.0], [2002, 13.4]]}}
{"result": "```sql\nSELECT PetID, weight\nFROM Pets\nWHERE pet_age > 1;\n```", "match": {"match": true, "result": [[2001, 12.0], [2002, 13.4]]}}
{"result": "```sql\nSELECT PetType, AVG(pet_age) AS Average_Age, MAX(pet_age) AS Maximum_Age\nFROM Pets\nGROUP BY PetType;\n```", "match": {"match": false, "result": [["cat", 3.0, 3], ["dog", 1.5, 2]], "gt": [[3.0, 3, "cat"], [1.5, 2, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT PetType, AVG(pet_age) AS Average_Age, MAX(pet_age) AS Maximum_Age\nFROM Pets\nGROUP BY PetType;\n```", "match": {"match": false, "result": [["cat", 3.0, 3], ["dog", 1.5, 2]], "gt": [[3.0, 3, "cat"], [1.5, 2, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT PetType, AVG(weight) AS Average.Weight\nFROM Pets\nGROUP BY PetType", "match": {"match": false, "error": "Query execution failed with error: near \".\": syntax error"}}
{"result": "SELECT PetType, AVG(weight) AS Average.Weight\nFROM Pets\nGROUP BY PetType", "match": {"match": false, "error": "Query execution failed with error: near \".\": syntax error"}}
{"result": "```sql\nSELECT S.Fname, S.Age \nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID;\n```", "match": {"match": false, "result": [["Linda", 18], ["Tracy", 19], ["Tracy", 19]], "gt": [["Linda", 18], ["Tracy", 19]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT S.Fname, S.Age \nFROM Student S\nJOIN Has_Pet H ON S.StuID = H.StuID;\n```", "match": {"match": false, "result": [["Linda", 18], ["Tracy", 19], ["Tracy", 19]], "gt": [["Linda", 18], ["Tracy", 19]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT PetID \nFROM Has_Pet \nWHERE StuID = (SELECT StuID FROM Student WHERE LName = 'Smith');\n```", "match": {"match": true, "result": [[2001]]}}
{"result": "```sql\nSELECT PetID \nFROM Has_Pet \nWHERE StuID = (SELECT StuID FROM Student WHERE LName = 'Smith');\n```", "match": {"match": true, "result": [[2001]]}}
{"result": "```sql\nSELECT StuID, COUNT(PetID) AS Num_Pets\nFROM Has_Pet\nGROUP BY StuID\nHAVING COUNT(PetID) > 0;\n```", "match": {"match": false, "result": [[1001, 1], [1002, 2]], "gt": [[1, 1001], [2, 1002]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT StuID, COUNT(PetID) AS Num_Pets\nFROM Has_Pet\nGROUP BY StuID;\n```", "match": {"match": false, "result": [[1001, 1], [1002, 2]], "gt": [[1, 1001], [2, 1002]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT S.Fname, S.Sex\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nGROUP BY S.StuID, S.Fname, S.Sex\nHAVING COUNT(HP.PetID) > 1;\n```", "match": {"match": true, "result": [["Tracy", "F"]]}}
{"result": "```sql\nSELECT S.Fname, S.Sex\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nGROUP BY S.StuID\nHAVING COUNT(HP.PetID) > 1;\n```", "match": {"match": true, "result": [["Tracy", "F"]]}}
{"result": "```sql\nSELECT S.LName \nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nJOIN Pets P ON HP.PetID = P.PetID\nWHERE P.PetType = 'cat' AND P.pet_age = 3;\n```", "match": {"match": true, "result": [["Smith"]]}}
{"result": "```sql\nSELECT S.LName\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nJOIN Pets P ON HP.PetID = P.PetID\nWHERE P.PetType = 'cat' AND P.pet_age = 3;\n```", "match": {"match": true, "result": [["Smith"]]}}
{"result": "```sql\nSELECT AVG(S.Age) AS AverageStudentAge\nFROM Student S\nWHERE S.StuID NOT IN (SELECT StuID FROM Has_Pet);\n```", "match": {"match": true, "result": [[19.625]]}}
{"result": "```sql\nSELECT AVG(Age) AS Average_Age\nFROM Student\nWHERE StuID NOT IN (SELECT StuID FROM Has_Pet);\n```", "match": {"match": true, "result": [[19.625]]}}
{"result": "SELECT COUNT(*) FROM employee", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT COUNT(*) FROM employee", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT Name FROM employee ORDER BY Age ASC", "match": {"match": true, "result": [["George Chuter"], ["Andrew Sheridan"], ["Lee Mears"], ["Tim Payne"], ["Matt Stevens"], ["Jason Hobson"], ["Steve Borthwick"], ["Louis Deacon"], ["Phil Vickery"], ["Mark Regan"]]}}
{"result": "SELECT Name FROM employee ORDER BY Age ASC", "match": {"match": true, "result": [["George Chuter"], ["Andrew Sheridan"], ["Lee Mears"], ["Tim Payne"], ["Matt Stevens"], ["Jason Hobson"], ["Steve Borthwick"], ["Louis Deacon"], ["Phil Vickery"], ["Mark Regan"]]}}
{"result": "SELECT City, COUNT(*) AS Number_of_Employees FROM employee GROUP BY City", "match": {"match": false, "result": [["Bath", 3], ["Bristol", 3], ["Leicester", 1], ["Sale", 1], ["Wasps", 2]], "gt": [[3, "Bath"], [3, "Bristol"], [1, "Leicester"], [1, "Sale"], [2, "Wasps"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT City, COUNT(*) AS Number_of_employees FROM employee GROUP BY City", "match": {"match": false, "result": [["Bath", 3], ["Bristol", 3], ["Leicester", 1], ["Sale", 1], ["Wasps", 2]], "gt": [[3, "Bath"], [3, "Bristol"], [1, "Leicester"], [1, "Sale"], [2, "Wasps"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT City \nFROM employee \nWHERE Age < 30 \nGROUP BY City \nHAVING COUNT(*) > 1", "match": {"match": true, "result": [["Bath"]]}}
{"result": "SELECT City\nFROM employee\nWHERE Age < 30\nGROUP BY City\nHAVING COUNT(*) > 1", "match": {"match": true, "result": [["Bath"]]}}
{"result": "SELECT Location, COUNT(*) FROM shop GROUP BY Location", "match": {"match": false, "result": [["Espoo", 1], ["Helsinki", 1], ["Jakobstad", 1], ["Kotka", 1], ["Kuopio", 1], ["Lahti", 1], ["Mariehamn", 1], ["Turku", 1], ["Valkeakoski", 1]], "gt": [[1, "Espoo"], [1, "Helsinki"], [1, "Jakobstad"], [1, "Kotka"], [1, "Kuopio"], [1, "Lahti"], [1, "Mariehamn"], [1, "Turku"], [1, "Valkeakoski"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Location, COUNT(*) FROM shop GROUP BY Location", "match": {"match": false, "result": [["Espoo", 1], ["Helsinki", 1], ["Jakobstad", 1], ["Kotka", 1], ["Kuopio", 1], ["Lahti", 1], ["Mariehamn", 1], ["Turku", 1], ["Valkeakoski", 1]], "gt": [[1, "Espoo"], [1, "Helsinki"], [1, "Jakobstad"], [1, "Kotka"], [1, "Kuopio"], [1, "Lahti"], [1, "Mariehamn"], [1, "Turku"], [1, "Valkeakoski"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Manager_name, District \nFROM shop \nWHERE Number_products = (SELECT MAX(Number_products) FROM shop)", "match": {"match": true, "result": [["Ilkka M\u00e4kel\u00e4", "Lahden Stadion"]]}}
{"result": "SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop)", "match": {"match": true, "result": [["Ilkka M\u00e4kel\u00e4", "Lahden Stadion"]]}}
{"result": "SELECT MIN(Number_products) AS min_products, MAX(Number_products) AS max_products FROM shop", "match": {"match": true, "result": [[1600, 15000]]}}
{"result": "SELECT MIN(Number_products) AS Min_Number_Products, MAX(Number_products) AS Max_Number_Products FROM shop", "match": {"match": true, "result": [[1600, 15000]]}}
{"result": "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC", "match": {"match": true, "result": [["FC Lahti", "Lahti", "Lahden Stadion"], ["HJK", "Helsinki", "Finnair Stadium"], ["FC Inter", "Turku", "Veritas Stadion"], ["FC Honka", "Espoo", "Tapiolan Urheilupuisto"], ["FF Jaro", "Jakobstad", "Jakobstads Centralplan"], ["FC KooTeePee", "Kotka", "Arto Tolsa Areena"], ["FC Haka", "Valkeakoski", "Tehtaan kentt\u00e4"], ["KuPS", "Kuopio", "Magnum Areena"], ["IFK Mariehamn", "Mariehamn", "Wikl\u00f6f Holding Arena"]]}}
{"result": "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC", "match": {"match": true, "result": [["FC Lahti", "Lahti", "Lahden Stadion"], ["HJK", "Helsinki", "Finnair Stadium"], ["FC Inter", "Turku", "Veritas Stadion"], ["FC Honka", "Espoo", "Tapiolan Urheilupuisto"], ["FF Jaro", "Jakobstad", "Jakobstads Centralplan"], ["FC KooTeePee", "Kotka", "Arto Tolsa Areena"], ["FC Haka", "Valkeakoski", "Tehtaan kentt\u00e4"], ["KuPS", "Kuopio", "Magnum Areena"], ["IFK Mariehamn", "Mariehamn", "Wikl\u00f6f Holding Arena"]]}}
{"result": "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)", "match": {"match": true, "result": [["HJK"], ["FC Inter"], ["FC Lahti"]]}}
{"result": "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)", "match": {"match": true, "result": [["HJK"], ["FC Inter"], ["FC Lahti"]]}}
{"result": "```sql\nSELECT e.Name\nFROM employee e\nJOIN evaluation ev ON e.Employee_ID = ev.Employee_ID\nGROUP BY e.Employee_ID, e.Name\nORDER BY COUNT(ev.Year_awarded) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [["George Chuter"]]}}
{"result": "SELECT e.Name\nFROM employee e\nJOIN evaluation ev ON e.Employee_ID = ev.Employee_ID\nGROUP BY e.Employee_ID, e.Name\nORDER BY COUNT(ev.Year_awarded) DESC\nLIMIT 1;", "match": {"match": true, "result": [["George Chuter"]]}}
{"result": "SELECT Name FROM employee WHERE Employee_ID = (SELECT Employee_ID FROM evaluation ORDER BY Bonus DESC LIMIT 1)", "match": {"match": true, "result": [["Louis Deacon"]]}}
{"result": "SELECT Name FROM employee WHERE Employee_ID = (SELECT Employee_ID FROM evaluation ORDER BY Bonus DESC LIMIT 1)", "match": {"match": true, "result": [["Louis Deacon"]]}}
{"result": "SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "match": {"match": true, "result": [["Mark Regan"], ["Tim Payne"], ["Andrew Sheridan"], ["Phil Vickery"], ["Steve Borthwick"]]}}
{"result": "SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "match": {"match": true, "result": [["Mark Regan"], ["Tim Payne"], ["Andrew Sheridan"], ["Phil Vickery"], ["Steve Borthwick"]]}}
{"result": "SELECT s.Name\nFROM shop s\nJOIN hiring h ON s.Shop_ID = h.Shop_ID\nGROUP BY s.Shop_ID, s.Name\nORDER BY COUNT(h.Employee_ID) DESC\nLIMIT 1;", "match": {"match": true, "result": [["FC Haka"]]}}
{"result": "SELECT s.Name\nFROM shop s\nJOIN hiring h ON s.Shop_ID = h.Shop_ID\nGROUP BY s.Shop_ID, s.Name\nORDER BY COUNT(h.Employee_ID) DESC\nLIMIT 1;", "match": {"match": true, "result": [["FC Haka"]]}}
{"result": "SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)", "match": {"match": true, "result": [["FC Honka"], ["KuPS"], ["IFK Mariehamn"]]}}
{"result": "SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)", "match": {"match": true, "result": [["FC Honka"], ["KuPS"], ["IFK Mariehamn"]]}}
{"result": "SELECT s.Name, COUNT(h.Employee_ID) AS Number_of_employees_hired\nFROM shop s\nJOIN hiring h ON s.Shop_ID = h.Shop_ID\nGROUP BY s.Name", "match": {"match": false, "result": [["FC Haka", 2], ["FC Inter", 1], ["FC KooTeePee", 1], ["FC Lahti", 1], ["FF Jaro", 1], ["HJK", 1]], "gt": [[2, "FC Haka"], [1, "FC Inter"], [1, "FC KooTeePee"], [1, "FC Lahti"], [1, "FF Jaro"], [1, "HJK"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.Shop_ID, s.Name, COUNT(h.Employee_ID) AS Number_of_employees\nFROM shop s\nLEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID\nGROUP BY s.Shop_ID, s.Name", "match": {"match": false, "result": [[1, "FC Haka", 2], [2, "HJK", 1], [3, "FC Honka", 0], [4, "FC Inter", 1], [5, "FF Jaro", 1], [6, "FC KooTeePee", 1], [7, "KuPS", 0], [8, "FC Lahti", 1], [9, "IFK Mariehamn", 0]], "gt": [[2, "FC Haka"], [1, "FC Inter"], [1, "FC KooTeePee"], [1, "FC Lahti"], [1, "FF Jaro"], [1, "HJK"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT SUM(Bonus) AS Total_Bonus FROM evaluation", "match": {"match": true, "result": [[19500.0]]}}
{"result": "SELECT SUM(Bonus) AS Total_Bonus FROM evaluation", "match": {"match": true, "result": [[19500.0]]}}
{"result": "SELECT * FROM hiring", "match": {"match": true, "result": [[1, 1, "2009", "T"], [1, 2, "2003", "T"], [8, 3, "2011", "F"], [4, 4, "2012", "T"], [5, 5, "2013", "T"], [2, 6, "2010", "F"], [6, 7, "2008", "T"]]}}
{"result": "SELECT * FROM hiring", "match": {"match": true, "result": [[1, 1, "2009", "T"], [1, 2, "2003", "T"], [8, 3, "2011", "F"], [4, 4, "2012", "T"], [5, 5, "2013", "T"], [2, 6, "2010", "F"], [6, 7, "2008", "T"]]}}
{"result": "SELECT DISTINCT T1.District \nFROM shop AS T1 \nWHERE EXISTS (SELECT 1 FROM shop AS T2 WHERE T2.District = T1.District AND T2.Number_products < 3000) \nAND EXISTS (SELECT 1 FROM shop AS T3 WHERE T3.District = T1.District AND T3.Number_products > 10000)", "match": {"match": true, "result": []}}
{"result": "SELECT District \nFROM shop \nWHERE Number_products < 3000\nINTERSECT\nSELECT District \nFROM shop \nWHERE Number_products > 10000", "match": {"match": true, "result": []}}
{"result": "SELECT COUNT(DISTINCT Location) FROM shop", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(DISTINCT Location) FROM shop", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(*) FROM Documents", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) AS Document_Count FROM Documents", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT Document_ID, Document_Name, Document_Description FROM Documents", "match": {"match": true, "result": [[0, "Introduction of OS", "n"], [1, "Understanding DB", "y"], [3, "Summer Show", "u"], [76, "Robbin CV", "y"], [80, "Welcome to NY", "h"], [82, "Data base", "w"], [2394, "Customer reviews", "y"], [3830, "Do not panic", "k"], [33930, "How Google people work", "z"], [50123, "Learning French", "r"], [651512, "How to write a CV", "f"], [801801, "How to read a book", "w"], [3540024, "Palm reading", "y"], [16514113, "A history of Arts", "h"], [385906526, "About Korea", "b"]]}}
{"result": "SELECT Document_ID, Document_Name, Document_Description FROM Documents", "match": {"match": true, "result": [[0, "Introduction of OS", "n"], [1, "Understanding DB", "y"], [3, "Summer Show", "u"], [76, "Robbin CV", "y"], [80, "Welcome to NY", "h"], [82, "Data base", "w"], [2394, "Customer reviews", "y"], [3830, "Do not panic", "k"], [33930, "How Google people work", "z"], [50123, "Learning French", "r"], [651512, "How to write a CV", "f"], [801801, "How to read a book", "w"], [3540024, "Palm reading", "y"], [16514113, "A history of Arts", "h"], [385906526, "About Korea", "b"]]}}
{"result": "```sql\nSELECT Document_Name, Template_ID \nFROM Documents \nWHERE Document_Description LIKE '%w%';\n```", "match": {"match": true, "result": [["Data base", 11], ["How to read a book", 4]]}}
{"result": "```sql\nSELECT Document_Name, Template_ID\nFROM Documents\nWHERE Document_Description LIKE '%w%';\n```", "match": {"match": true, "result": [["Data base", 11], ["How to read a book", 4]]}}
{"result": "```sql\nSELECT Document_ID, Template_ID, Document_Description \nFROM Documents \nWHERE Document_Name = 'Robbin CV';\n```", "match": {"match": true, "result": [[76, 20, "y"]]}}
{"result": "SELECT Document_ID, Template_ID, Document_Description \nFROM Documents \nWHERE Document_Name = 'Robbin CV'", "match": {"match": true, "result": [[76, 20, "y"]]}}
{"result": "```sql\nSELECT COUNT(DISTINCT Template_ID) AS Unique_Templates_Use\nFROM Documents;\n```", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT COUNT(DISTINCT Template_ID) FROM Documents", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT COUNT(DISTINCT T.Template_ID) \nFROM Templates T\nJOIN Ref_Template_Types RT ON T.Template_Type_Code = RT.Template_Type_Code\nWHERE RT.Template_Type_Code = 'PPT'", "match": {"match": true, "result": [[3]]}}
{"result": "```sql\nSELECT COUNT(DISTINCT d.Document_ID)\nFROM Documents d\nJOIN Templates t ON d.Template_ID = t.Template_ID\nJOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code\nWHERE r.Template_Type_Description = 'PPT';\n```", "match": {"match": false, "result": [[0]], "gt": [[3]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT T.Template_ID, COUNT(D.DOCUMENT_ID) AS Number_of_Documents\nFROM Templates T\nLEFT JOIN Documents D ON T.Template_ID = D.Template_ID\nGROUP BY T.Template_ID;\n```", "match": {"match": false, "result": [[0, 0], [1, 1], [4, 1], [6, 1], [7, 1], [8, 1], [9, 0], [10, 1], [11, 2], [14, 2], [15, 0], [16, 0], [18, 0], [19, 0], [20, 1], [21, 1], [22, 1], [23, 0], [24, 0], [25, 2]], "gt": [[1, 1], [4, 1], [6, 1], [7, 1], [8, 1], [10, 1], [11, 2], [14, 2], [20, 1], [21, 1], [22, 1], [25, 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Template_ID, COUNT(*) AS Usage_Count\nFROM Documents\nGROUP BY Template_ID", "match": {"match": true, "result": [[1, 1], [4, 1], [6, 1], [7, 1], [8, 1], [10, 1], [11, 2], [14, 2], [20, 1], [21, 1], [22, 1], [25, 2]]}}
{"result": "SELECT t.Template_ID, rt.Template_Type_Code\nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID\nJOIN Ref_Template_Types rt ON t.Template_Type_Code = rt.Template_Type_Code\nGROUP BY t.Template_ID, rt.Template_Type_Code\nORDER BY COUNT(d.Document_ID) DESC\nLIMIT 1;", "match": {"match": false, "result": [[11, "BK"]], "gt": [[25, "PP"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT t.Template_ID, t.Template_Type_Code\nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID\nGROUP BY t.Template_ID, t.Template_Type_Code\nORDER BY COUNT(d.Document_ID) DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [[11, "BK"]], "gt": [[25, "PP"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT Template_ID\nFROM Documents\nGROUP BY Template_ID\nHAVING COUNT(*) > 1;\n```", "match": {"match": true, "result": [[11], [14], [25]]}}
{"result": "```sql\nSELECT Template_ID\nFROM Documents\nGROUP BY Template_ID\nHAVING COUNT(*) > 1;\n```", "match": {"match": true, "result": [[11], [14], [25]]}}
{"result": "```sql\nSELECT Template_ID\nFROM Templates\nWHERE Template_ID NOT IN (SELECT Template_ID FROM Documents);\n```", "match": {"match": true, "result": [[0], [9], [15], [16], [18], [19], [23], [24]]}}
{"result": "SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)", "match": {"match": true, "result": [[0], [9], [15], [16], [18], [19], [23], [24]]}}
{"result": "SELECT COUNT(*) FROM Templates", "match": {"match": true, "result": [[20]]}}
{"result": "SELECT COUNT(*) AS Template_Count FROM Templates", "match": {"match": true, "result": [[20]]}}
{"result": "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates", "match": {"match": true, "result": [[0, 5, "PP"], [1, 9, "PP"], [4, 4, "BK"], [6, 2, "PPT"], [7, 8, "PPT"], [8, 3, "BK"], [9, 2, "BK"], [10, 1, "PPT"], [11, 6, "BK"], [14, 7, "AD"], [15, 9, "CV"], [16, 5, "CV"], [18, 5, "PP"], [19, 7, "AD"], [20, 6, "BK"], [21, 9, "AD"], [22, 0, "PP"], [23, 2, "BK"], [24, 8, "PP"], [25, 5, "PP"]]}}
{"result": "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates", "match": {"match": true, "result": [[0, 5, "PP"], [1, 9, "PP"], [4, 4, "BK"], [6, 2, "PPT"], [7, 8, "PPT"], [8, 3, "BK"], [9, 2, "BK"], [10, 1, "PPT"], [11, 6, "BK"], [14, 7, "AD"], [15, 9, "CV"], [16, 5, "CV"], [18, 5, "PP"], [19, 7, "AD"], [20, 6, "BK"], [21, 9, "AD"], [22, 0, "PP"], [23, 2, "BK"], [24, 8, "PP"], [25, 5, "PP"]]}}
{"result": "SELECT DISTINCT Template_Type_Code FROM Templates", "match": {"match": true, "result": [["PP"], ["BK"], ["PPT"], ["AD"], ["CV"]]}}
{"result": "SELECT DISTINCT Template_Type_Code FROM Templates", "match": {"match": true, "result": [["PP"], ["BK"], ["PPT"], ["AD"], ["CV"]]}}
{"result": "```sql\nSELECT Template_ID\nFROM Templates\nWHERE Template_Type_Code IN ('PP', 'PPT');\n```", "match": {"match": true, "result": [[0], [1], [6], [7], [10], [18], [22], [24], [25]]}}
{"result": "```sql\nSELECT Template_ID \nFROM Templates \nWHERE Template_Type_Code IN ('PP', 'PPT');\n```", "match": {"match": true, "result": [[0], [1], [6], [7], [10], [18], [22], [24], [25]]}}
{"result": "```sql\nSELECT COUNT(*) \nFROM Templates \nWHERE Template_Type_Code = 'CV';\n```", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(*) \nFROM Templates T\nJOIN Ref_Template_Types R ON T.Template_Type_Code = R.Template_Type_Code\nWHERE R.Template_Type_Description = 'CV'", "match": {"match": true, "result": [[2]]}}
{"result": "```sql\nSELECT Template.Version_Number, Ref_Template_Types.Template_Type_Code\nFROM Templates Template\nJOIN Ref_Template_Types ON Template.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Template.Version_Number > 5;\n```", "match": {"match": true, "result": [[9, "PP"], [8, "PPT"], [6, "BK"], [7, "AD"], [9, "CV"], [7, "AD"], [6, "BK"], [9, "AD"], [8, "PP"]]}}
{"result": "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5", "match": {"match": true, "result": [[9, "PP"], [8, "PPT"], [6, "BK"], [7, "AD"], [9, "CV"], [7, "AD"], [6, "BK"], [9, "AD"], [8, "PP"]]}}
{"result": "SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS Number_of_Templates\nFROM Ref_Template_Types\nLEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code\nGROUP BY Ref_Template_Types.Template_Type_Code", "match": {"match": true, "result": [["AD", 3], ["BK", 6], ["CV", 2], ["PP", 6], ["PPT", 3]]}}
{"result": "```sql\nSELECT Template_Type_Code, COUNT(Template_ID) AS Template_Count\nFROM Templates\nGROUP BY Template_Type_Code;\n```", "match": {"match": true, "result": [["AD", 3], ["BK", 6], ["CV", 2], ["PP", 6], ["PPT", 3]]}}
{"result": "```sql\nSELECT Template_Type_Code\nFROM Templates\nGROUP BY Template_Type_Code\nORDER BY COUNT(*) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [["PP"]]}}
{"result": "SELECT Template_Type_Code \nFROM Templates \nGROUP BY Template_Type_Code \nORDER BY COUNT(*) DESC \nLIMIT 1", "match": {"match": true, "result": [["PP"]]}}
{"result": "```sql\nSELECT Template_Type_Code\nFROM Templates\nGROUP BY Template_Type_Code\nHAVING COUNT(Template_ID) < 3;\n```", "match": {"match": true, "result": [["CV"]]}}
{"result": "```sql\nSELECT Template_Type_Code\nFROM Templates\nGROUP BY Template_Type_Code\nHAVING COUNT(Template_ID) < 3;\n```", "match": {"match": true, "result": [["CV"]]}}
{"result": "```sql\nSELECT MIN(T.Version_Number) AS Smallest_Version_Number, RT.Template_Type_Code\nFROM Templates T\nJOIN Ref_Template_Types RT ON T.Template_Type_Code = RT.Template_Type_Code\nGROUP BY RT.Template_Type_Code;\n```", "match": {"match": false, "result": [[7, "AD"], [2, "BK"], [5, "CV"], [0, "PP"], [1, "PPT"]], "gt": [[0, "PP"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT MIN(T.Version_Number) AS Lowest_Version, T.Template_Type_Code\nFROM Templates T\nJOIN Ref_Template_Types RT ON T.Template_Type_Code = RT.Template_Type_Code\nGROUP BY T.Template_Type_Code;\n```", "match": {"match": false, "result": [[7, "AD"], [2, "BK"], [5, "CV"], [0, "PP"], [1, "PPT"]], "gt": [[0, "PP"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT t.Template_Type_Code\nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID\nWHERE d.Document_Name = 'Data base'", "match": {"match": true, "result": [["BK"]]}}
{"result": "```sql\nSELECT TT.Template_Type_Code\nFROM Templates T\nJOIN Documents D ON T.Template_ID = D.Template_ID\nJOIN Ref_Template_Types TT ON T.Template_Type_Code = TT.Template_Type_Code\nWHERE D.Document_Name = 'Data base';\n```", "match": {"match": true, "result": [["BK"]]}}
{"result": "```sql\nSELECT D.Document_Name \nFROM Documents D\nJOIN Templates T ON D.Template_ID = T.Template_ID\nJOIN Ref_Template_Types R ON T.Template_Type_Code = R.Template_Type_Code\nWHERE R.Template_Type_Code = 'BK';\n```", "match": {"match": true, "result": [["Robbin CV"], ["Data base"], ["How to read a book"], ["Palm reading"], ["About Korea"]]}}
{"result": "```sql\nSELECT D.Document_Name \nFROM Documents D \nJOIN Templates T ON D.Template_ID = T.Template_ID \nWHERE T.Template_Type_Code = 'BK';\n```", "match": {"match": true, "result": [["Robbin CV"], ["Data base"], ["How to read a book"], ["Palm reading"], ["About Korea"]]}}
{"result": "```sql\nSELECT RT.Template_Type_Code, COUNT(Doc.Template_ID) AS Document_Count\nFROM Ref_Template_Types RT\nLEFT JOIN Templates T ON RT.Template_Type_Code = T.Template_Type_Code\nLEFT JOIN Documents Doc ON T.Template_ID = Doc.Template_ID\nGROUP BY RT.Template_Type_Code;\n```", "match": {"match": false, "result": [["AD", 3], ["BK", 5], ["CV", 0], ["PP", 4], ["PPT", 3]], "gt": [["AD", 3], ["BK", 5], ["PP", 4], ["PPT", 3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT TT.Template_Type_Code, COUNT(D.Template_ID) AS Document_Count\nFROM Ref_Template_Types TT\nLEFT JOIN Templates T ON TT.Template_Type_Code = T.Template_Type_Code\nLEFT JOIN Documents D ON T.Template_ID = D.Template_ID\nGROUP BY TT.Template_Type_Code;", "match": {"match": false, "result": [["AD", 3], ["BK", 5], ["CV", 0], ["PP", 4], ["PPT", 3]], "gt": [["AD", 3], ["BK", 5], ["PP", 4], ["PPT", 3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT rt.Template_Type_Code\nFROM Ref_Template_Types rt\nJOIN Templates t ON rt.Template_Type_Code = t.Template_Type_Code\nJOIN Documents d ON t.Template_ID = d.Template_ID\nGROUP BY rt.Template_Type_Code\nORDER BY COUNT(d.Document_ID) DESC\nLIMIT 1;", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT Template_Type_Code\nFROM Templates\nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nGROUP BY Template_Type_Code\nORDER BY COUNT(Template_ID) DESC\nLIMIT 1;", "match": {"match": false, "error": "Query execution failed with error: ambiguous column name: Template_Type_Code"}}
{"result": "```sql\nSELECT Template_Type_Code\nFROM Ref_Template_Types\nWHERE Template_Type_Code NOT IN (\n    SELECT Template_Type_Code\n    FROM Templates\n    WHERE Template_ID IN (\n        SELECT Template_ID\n        FROM Documents\n    )\n);\n```", "match": {"match": true, "result": [["CV"]]}}
{"result": "```sql\nSELECT Template_Type_Code\nFROM Ref_Template_Types\nLEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code\nWHERE Templates.Template_ID IS NULL;\n```", "match": {"match": false, "error": "Query execution failed with error: ambiguous column name: Template_Type_Code"}}
{"result": "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types", "match": {"match": true, "result": [["PPT", "Presentation"], ["CV", "CV"], ["AD", "Advertisement"], ["PP", "Paper"], ["BK", "Book"]]}}
{"result": "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types", "match": {"match": true, "result": [["PPT", "Presentation"], ["CV", "CV"], ["AD", "Advertisement"], ["PP", "Paper"], ["BK", "Book"]]}}
{"result": "```sql\nSELECT Template_Type_Description \nFROM Ref_Template_Types \nWHERE Template_Type_Code = 'AD';\n```", "match": {"match": true, "result": [["Advertisement"]]}}
{"result": "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'", "match": {"match": true, "result": [["Advertisement"]]}}
{"result": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT DISTINCT RT.Template_Type_Description \nFROM Ref_Template_Types RT\nJOIN Templates T ON RT.Template_Type_Code = T.Template_Type_Code\nJOIN Documents D ON T.Template_ID = D.Template_ID\nJOIN Paragraphs P ON D.Document_ID = P.Document_ID", "match": {"match": false, "result": [["Presentation"], ["Paper"], ["Advertisement"], ["Book"]], "gt": [["Presentation"], ["Paper"], ["Book"], ["Advertisement"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT TT.Template_Type_Description \nFROM Templates T\nJOIN Documents D ON T.Template_ID = D.Template_ID\nJOIN Ref_Template_Types TT ON T.Template_Type_Code = TT.Template_Type_Code", "match": {"match": true, "result": [["Presentation"], ["Paper"], ["Book"], ["Advertisement"]]}}
{"result": "```sql\nSELECT Template_ID\nFROM Templates\nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Ref_Template_Types.Template_Type_Description = 'Presentation';\n```", "match": {"match": true, "result": [[6], [7], [10]]}}
{"result": "SELECT Template_ID FROM Templates WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation')", "match": {"match": true, "result": [[6], [7], [10]]}}
{"result": "SELECT COUNT(*) AS Total_Paragraphs FROM Paragraphs", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) AS NumberOfParagraphs FROM Paragraphs", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) \nFROM Paragraphs \nJOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID \nWHERE Documents.Document_Name = 'Summer Show'", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(*) \nFROM Paragraphs \nJOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID \nWHERE Documents.Document_Name = 'Summer Show'", "match": {"match": true, "result": [[1]]}}
{"result": "```sql\nSELECT p.Paragraph_ID, p.Document_ID, p.Paragraph_Text, p.Other_Details\nFROM Paragraphs p\nWHERE p.Paragraph_Text = 'Korea ';\n```", "match": {"match": false, "result": [], "gt": [[null], [null]], "error": "Query result does not match ground truth."}}
{"result": "SELECT p.Paragraph_Text, d.Document_Name, t.Template_Details, rt.Template_Type_Description\nFROM Paragraphs p\nJOIN Documents d ON p.Document_ID = d.Document_ID\nJOIN Templates t ON d.Template_ID = t.Template_ID\nJOIN Ref_Template_Types rt ON t.Template_Type_Code = rt.Template_Type_Code\nWHERE p.Paragraph_Text LIKE '%Korea %'", "match": {"match": false, "result": [], "gt": [[null], [null]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT p.Paragraph_ID, p.Paragraph_Text\nFROM Paragraphs p\nJOIN Documents d ON p.Document_ID = d.Document_ID\nWHERE d.Document_Name = 'Welcome to NY';\n```", "match": {"match": true, "result": [[16615, "Japan"], [608931827, "Micronesia"]]}}
{"result": "```sql\nSELECT p.Paragraph_ID, p.Paragraph_Text\nFROM Paragraphs p\nJOIN Documents d ON p.Document_ID = d.Document_ID\nWHERE d.Document_Name = 'Welcome to NY';\n```", "match": {"match": true, "result": [[16615, "Japan"], [608931827, "Micronesia"]]}}
{"result": "```sql\nSELECT p.Paragraph_Text\nFROM Paragraphs p\nJOIN Documents d ON p.Document_ID = d.Document_ID\nWHERE d.Document_Name = 'Customer reviews';\n```", "match": {"match": true, "result": [["Korea"], ["Ukraine"], ["Korea"]]}}
{"result": "SELECT P.Paragraph_Text \nFROM Paragraphs P\nJOIN Documents D ON P.Document_ID = D.Document_ID\nWHERE D.Document_Name = 'Customer reviews'", "match": {"match": true, "result": [["Korea"], ["Ukraine"], ["Korea"]]}}
{"result": "```sql\nSELECT Document_ID, COUNT(Paragraph_ID) AS Num_of_Paragraphs\nFROM Documents\nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Document_ID\nORDER BY Document_ID;\n```", "match": {"match": false, "error": "Query execution failed with error: ambiguous column name: Document_ID"}}
{"result": "```sql\nSELECT \n    Document_ID, \n    COUNT(Paragraph_ID) AS Num_Paragraphs\nFROM \n    Paragraphs\nGROUP BY \n    Document_ID\nORDER BY \n    Document_ID;\n```", "match": {"match": true, "result": [[3, 1], [80, 2], [2394, 3], [3830, 1], [33930, 1], [50123, 1], [651512, 2], [3540024, 1], [16514113, 2], [385906526, 1]]}}
{"result": "```sql\nSELECT \n    d.Document_ID, \n    d.Document_Name, \n    COUNT(p.Paragraph_ID) AS Number_of_PARAGRAPHS\nFROM \n    Documents d\nLEFT JOIN \n    Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY \n    d.Document_ID, d.Document_Name;\n```", "match": {"match": false, "result": [[0, "Introduction of OS", 0], [1, "Understanding DB", 0], [3, "Summer Show", 1], [76, "Robbin CV", 0], [80, "Welcome to NY", 2], [82, "Data base", 0], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [801801, "How to read a book", 0], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "gt": [[3, "Summer Show", 1], [80, "Welcome to NY", 2], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS NumberOfParagraphs\nFROM Documents d\nJOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID, d.Document_Name", "match": {"match": true, "result": [[3, "Summer Show", 1], [80, "Welcome to NY", 2], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]]}}
{"result": "```sql\nSELECT Document_ID\nFROM Paragraphs\nGROUP BY Document_ID\nHAVING COUNT(Paragraph_ID) >= 2;\n```", "match": {"match": true, "result": [[80], [2394], [651512], [16514113]]}}
{"result": "```sql\nSELECT Document_ID\nFROM Paragraphs\nGROUP BY Document_ID\nHAVING COUNT(Paragraph_ID) >= 2;\n```", "match": {"match": true, "result": [[80], [2394], [651512], [16514113]]}}
{"result": "```sql\nSELECT Document_ID, Document_Name\nFROM Documents\nWHERE Document_ID = (\n    SELECT Document_ID\n    FROM Paragraphs\n    GROUP BY Document_ID\n    ORDER BY COUNT(Paragraph_ID) DESC\n    LIMIT 1\n);\n```", "match": {"match": true, "result": [[2394, "Customer reviews"]]}}
{"result": "```sql\nSELECT Document_ID, Document_Name\nFROM Documents\nWHERE Document_ID = (\n    SELECT Document_ID\n    FROM Paragraphs\n    GROUP BY Document_ID\n    ORDER BY COUNT(Paragraph_ID) DESC\n    LIMIT 1\n);\n```", "match": {"match": true, "result": [[2394, "Customer reviews"]]}}
{"result": "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(Paragraph_ID) ASC LIMIT 1", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT t1.Document_ID\nFROM Documents t1\nJOIN Paragraphs t2 ON t1.Document_ID = t2.Document_ID\nGROUP BY t1.Document_ID\nORDER BY COUNT(t2.Paragraph_ID) ASC\nLIMIT 1", "match": {"match": true, "result": [[3]]}}
{"result": "```sql\nSELECT Document_ID\nFROM Paragraphs\nGROUP BY Document_ID\nHAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2;\n```", "match": {"match": true, "result": [[3], [80], [3830], [33930], [50123], [651512], [3540024], [16514113], [385906526]]}}
{"result": "```sql\nSELECT Document_ID\nFROM Paragraphs\nGROUP BY Document_ID\nHAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2;\n```", "match": {"match": true, "result": [[3], [80], [3830], [33930], [50123], [651512], [3540024], [16514113], [385906526]]}}
{"result": "```sql\nSELECT p.Document_ID, p.Paragraph_Text\nFROM Paragraphs p\nWHERE p.Paragraph_Text IN ('Brazil', 'Ireland');\n```", "match": {"match": false, "result": [[16514113, "Brazil"], [16514113, "Ireland"]], "gt": [[16514113]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT DISTINCT d.Document_ID\nFROM Documents d\nJOIN Paragraphs p ON d.Document_ID = p.Document_ID\nWHERE p.Paragraph_Text = 'Brazil'\nINTERSECT\nSELECT DISTINCT d.Document_ID\nFROM Documents d\nJOIN Paragraphs p ON d.Document_ID = p.Document_ID\nWHERE p.Paragraph_Text = 'Ireland';\n```", "match": {"match": true, "result": [[16514113]]}}
{"result": "SELECT COUNT(*) FROM teacher", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT COUNT(*) FROM teacher", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT Name FROM teacher ORDER BY Age ASC", "match": {"match": true, "result": [["Vicente Carretero"], ["Gustaaf Deloor"], ["Joseph Huts"], ["John Deloor"], ["Lucy Wong"], ["Anne Walker"], ["Kearsley Brown"]]}}
{"result": "SELECT Name FROM teacher ORDER BY Age ASC", "match": {"match": true, "result": [["Vicente Carretero"], ["Gustaaf Deloor"], ["Joseph Huts"], ["John Deloor"], ["Lucy Wong"], ["Anne Walker"], ["Kearsley Brown"]]}}
{"result": "SELECT Age, Hometown FROM teacher", "match": {"match": true, "result": [["32", "Blackrod Urban District"], ["29", "Bolton County Borough"], ["26", "Farnworth Municipal Borough"], ["33", "Horwich Urban District"], ["45", "Kearsley Urban District"], ["41", "Little Lever Urban District"], ["39", "Turton Urban District"]]}}
{"result": "SELECT Age, Hometown FROM teacher", "match": {"match": true, "result": [["32", "Blackrod Urban District"], ["29", "Bolton County Borough"], ["26", "Farnworth Municipal Borough"], ["33", "Horwich Urban District"], ["45", "Kearsley Urban District"], ["41", "Little Lever Urban District"], ["39", "Turton Urban District"]]}}
{"result": "SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'", "match": {"match": false, "result": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Lucy Wong"]], "gt": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Anne Walker"], ["Lucy Wong"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'", "match": {"match": false, "result": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Lucy Wong"]], "gt": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Anne Walker"], ["Lucy Wong"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name FROM teacher WHERE Age IN ('32', '33')", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT Name FROM teacher WHERE Age IN ('32', '33')", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)", "match": {"match": true, "result": [["Farnworth Municipal Borough"]]}}
{"result": "SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)", "match": {"match": true, "result": [["Farnworth Municipal Borough"]]}}
{"result": "SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown", "match": {"match": true, "result": [["Blackrod Urban District", 1], ["Bolton County Borough", 1], ["Farnworth Municipal Borough", 1], ["Horwich Urban District", 1], ["Kearsley Urban District", 1], ["Little Lever Urban District", 1], ["Turton Urban District", 1]]}}
{"result": "SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown", "match": {"match": true, "result": [["Blackrod Urban District", 1], ["Bolton County Borough", 1], ["Farnworth Municipal Borough", 1], ["Horwich Urban District", 1], ["Kearsley Urban District", 1], ["Little Lever Urban District", 1], ["Turton Urban District", 1]]}}
{"result": "SELECT Hometown, COUNT(*) AS Frequency FROM teacher GROUP BY Hometown ORDER BY Frequency DESC LIMIT 1", "match": {"match": false, "result": [["Turton Urban District", 1]], "gt": [["Turton Urban District"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Hometown, COUNT(*) AS Frequency FROM teacher GROUP BY Hometown ORDER BY Frequency DESC LIMIT 1", "match": {"match": false, "result": [["Turton Urban District", 1]], "gt": [["Turton Urban District"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Hometown \nFROM teacher \nGROUP BY Hometown \nHAVING COUNT(Teacher_ID) > 1", "match": {"match": true, "result": []}}
{"result": "SELECT Hometown \nFROM teacher \nGROUP BY Hometown \nHAVING COUNT(Teacher_ID) >= 2", "match": {"match": true, "result": []}}
{"result": "SELECT T2.Name, T1.Course \nFROM course_arrange AS T1 \nJOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID", "match": {"match": false, "error": "Query execution failed with error: no such column: T1.Course"}}
{"result": "SELECT t.Name, c.Course \nFROM teacher t \nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID \nJOIN course c ON ca.Course_ID = c.Course_ID", "match": {"match": true, "result": [["Kearsley Brown", "Math"], ["Vicente Carretero", "Math"], ["Gustaaf Deloor", "Science"], ["Anne Walker", "History"], ["Anne Walker", "Bible"], ["Lucy Wong", "Music"]]}}
{"result": "SELECT T2.Name, T1.Course \nFROM course_arrange AS T1 \nJOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nORDER BY T2.Name ASC", "match": {"match": false, "error": "Query execution failed with error: no such column: T1.Course"}}
{"result": "SELECT t.Name, c.Course \nFROM teacher t \nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID \nJOIN course c ON ca.Course_ID = c.Course_ID \nORDER BY t.Name ASC", "match": {"match": true, "result": [["Anne Walker", "History"], ["Anne Walker", "Bible"], ["Gustaaf Deloor", "Science"], ["Kearsley Brown", "Math"], ["Lucy Wong", "Music"], ["Vicente Carretero", "Math"]]}}
{"result": "```sql\nSELECT t.Name\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nJOIN course c ON ca.Course_ID = c.Course_ID\nWHERE c.Course = 'Math';\n```", "match": {"match": true, "result": [["Kearsley Brown"], ["Vicente Carretero"]]}}
{"result": "SELECT t.Name \nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nJOIN course c ON ca.Course_ID = c.Course_ID\nWHERE c.Course = 'Math'", "match": {"match": true, "result": [["Kearsley Brown"], ["Vicente Carretero"]]}}
{"result": "SELECT t.Name, COUNT(ca.Course_ID) AS Number_of_Courses\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nGROUP BY t.Name", "match": {"match": true, "result": [["Anne Walker", 2], ["Gustaaf Deloor", 1], ["Kearsley Brown", 1], ["Lucy Wong", 1], ["Vicente Carretero", 1]]}}
{"result": "SELECT t.Name, COUNT(ca.Course_ID) AS NumberOfCourses\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nGROUP BY t.Name", "match": {"match": true, "result": [["Anne Walker", 2], ["Gustaaf Deloor", 1], ["Kearsley Brown", 1], ["Lucy Wong", 1], ["Vicente Carretero", 1]]}}
{"result": "```sql\nSELECT t.Name\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nGROUP BY t.Name\nHAVING COUNT(ca.Course_ID) >= 2;\n```", "match": {"match": true, "result": [["Anne Walker"]]}}
{"result": "SELECT T2.Name \nFROM course_arrange AS T1 \nJOIN teacher AS T2 \nON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T1.Teacher_ID \nHAVING COUNT(T1.Course_ID) >= 2", "match": {"match": true, "result": [["Anne Walker"]]}}
{"result": "SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT T2.Name FROM course_arrange AS T1 RIGHT JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID WHERE T1.Teacher_ID IS NULL", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT COUNT(*) FROM visitor WHERE Age < 30", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC", "match": {"match": true, "result": [["Gonzalo Higua\u00edn "], ["Fernando Gago"], ["Guti Midfielder"]]}}
{"result": "SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4", "match": {"match": true, "result": [[36.0]]}}
{"result": "```sql\nSELECT v.Name, v.Level_of_membership \nFROM visitor v \nWHERE v.Level_of_membership > 4 \nORDER BY v.Age DESC;\n```", "match": {"match": true, "result": [["Fernando Gago", 6], ["Gonzalo Higua\u00edn ", 8], ["Guti Midfielder", 5]]}}
{"result": "SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)", "match": {"match": true, "result": [[1, "Plaza Museum"]]}}
{"result": "SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < '2009'", "match": {"match": true, "result": [[31.333333333333332]]}}
{"result": "SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'", "match": {"match": false, "result": [["2000", 62]], "gt": [[62, "2000"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT Name \nFROM museum \nWHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > '2010');\n```", "match": {"match": true, "result": [["Plaza Museum"], ["Capital Plaza Museum"], ["Jefferson Development Museum"]]}}
{"result": "```sql\nSELECT v.ID, v.Name, v.Age\nFROM visitor v\nJOIN visit vi ON v.ID = vi.visitor_ID\nGROUP BY v.ID, v.Name, v.Age\nHAVING COUNT(vi.Museum_ID) > 1;\n```", "match": {"match": true, "result": [[3, "Arjen Robben", 27], [5, "Fernando Gago", 36], [6, "Rafael van der Vaart", 25]]}}
{"result": "```sql\nSELECT v.ID, v.Name, v.Level_of_membership\nFROM visitor v\nJOIN visit vi ON v.ID = vi.visitor_ID\nWHERE (vi.Total_spent, vi.Museum_ID) IN (\n    SELECT Total_spent, Museum_ID\n    FROM visit\n    GROUP BY Total_spent, Museum_ID\n    ORDER BY Total_spent DESC\n    LIMIT 1\n);\n```", "match": {"match": false, "result": [[3, "Arjen Robben", 1]], "gt": [["3", "Arjen Robben", 1]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT M.Museum_ID, M.Name\nFROM museum M\nJOIN (\n    SELECT Museum_ID, COUNT(*) as visit_count\n    FROM visit\n    GROUP BY Museum_ID\n    ORDER BY visit_count DESC\n    LIMIT 1\n) V ON M.Museum_ID = V.Museum_ID;\n```", "match": {"match": true, "result": [[2, "Capital Plaza Museum"]]}}
{"result": "SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)", "match": {"match": true, "result": [["Jefferson Development Museum"], ["RiverPark Museum"], ["Place Tower Museum"], ["Central City District Residential Museum"]]}}
{"result": "```sql\nSELECT v.Name, v.Age \nFROM visitor v \nJOIN visit vi ON v.ID = vi.visitor_ID \nORDER BY vi.Num_of_Ticket DESC \nLIMIT 1;\n```", "match": {"match": true, "result": [["Arjen Robben", 27]]}}
{"result": "SELECT AVG(Num_of_Ticket) AS Average_Tickets, MAX(Num_of_Ticket) AS Maximum_Tickets FROM visit", "match": {"match": true, "result": [[10.5, 24]]}}
{"result": "SELECT SUM(Total_spent) FROM visit WHERE visitor_ID IN (SELECT ID FROM visitor WHERE Level_of_membership = 1)", "match": {"match": true, "result": [[570.84]]}}
{"result": "SELECT v.Name\nFROM visitor v\nJOIN visit vi ON v.ID = vi.visitor_ID\nJOIN museum m ON vi.Museum_ID = m.Museum_ID\nWHERE m.Open_Year < '2009' \nINTERSECT\nSELECT v.Name\nFROM visitor v\nJOIN visit vi ON v.ID = vi.visitor_ID\nJOIN museum m ON vi.Museum_ID = m.Museum_ID\nWHERE m.Open_Year > '2011'", "match": {"match": true, "result": [["Fernando Gago"]]}}
{"result": "```sql\nSELECT COUNT(*) \nFROM visitor \nWHERE ID NOT IN (\n    SELECT visitor_ID \n    FROM visit \n    JOIN museum ON visit.Museum_ID = museum.Museum_ID \n    WHERE Open_Year > '2010'\n);\n```", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(*) FROM museum WHERE Open_Year > '2013' OR Open_Year < '2008'", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'", "match": {"match": true, "result": [[4]]}}
{"result": "SELECT name, tonnage FROM ship ORDER BY name DESC", "match": {"match": true, "result": [["Three Brothers", "t"], ["Mary", "t"], ["Lettice", "t"], ["HMS Avon", "391"], ["HMS Atalanta", "225"], ["Bon Accord", "t"], ["Bacchus", "t"]]}}
{"result": "SELECT name, date, result FROM battle", "match": {"match": false, "result": [["Battle of Adrianople", "14 April 1205", "Bulgarian victory"], ["Battle of Serres", "June 1205", "Bulgarian victory"], ["Battle of Rusion", "31 January 1206", "Bulgarian victory"], ["Battle of Rodosto", "February 1206", "Bulgarian victory"], ["Battle of Messinopolis", "4 September 1207", "Bulgarian victory"], ["Battle of Boruy", "June 1205", "Bulgarian victory"], ["Battle of Philippopolis", "31 June 1208", "Latin victory"], ["Siege of Constantinople", "1235", "Two Year Truce"]], "gt": [["Battle of Adrianople", "14 April 1205"], ["Battle of Serres", "June 1205"], ["Battle of Rusion", "31 January 1206"], ["Battle of Rodosto", "February 1206"], ["Battle of Messinopolis", "4 September 1207"], ["Battle of Boruy", "June 1205"], ["Battle of Philippopolis", "31 June 1208"], ["Siege of Constantinople", "1235"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MIN(killed + injured) AS min_death_toll, MAX(killed + injured) AS max_death_toll FROM death", "match": {"match": false, "result": [[0, 29]], "gt": [[29, 0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(injured) FROM death", "match": {"match": true, "result": [[1.0769230769230769]]}}
{"result": "SELECT killed, injured FROM death WHERE caused_by_ship_id = (SELECT id FROM ship WHERE tonnage = 't')", "match": {"match": false, "result": [[8, 0], [29, 0]], "gt": [[8, 0], [3, 0], [25, 0], [2, 0], [0, 0], [4, 5], [0, 0], [29, 0], [0, 0], [0, 0], [14, 0]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT name, result \nFROM battle \nWHERE bulgarian_commander != 'Boril';\n```", "match": {"match": true, "result": [["Battle of Adrianople", "Bulgarian victory"], ["Battle of Serres", "Bulgarian victory"], ["Battle of Rusion", "Bulgarian victory"], ["Battle of Rodosto", "Bulgarian victory"], ["Battle of Messinopolis", "Bulgarian victory"], ["Siege of Constantinople", "Two Year Truce"]]}}
{"result": "SELECT DISTINCT b.id, b.name FROM battle AS b JOIN ship AS s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig'", "match": {"match": true, "result": [[8, "Siege of Constantinople"], [7, "Battle of Philippopolis"], [6, "Battle of Boruy"], [5, "Battle of Messinopolis"], [4, "Battle of Rodosto"]]}}
{"result": "```sql\nSELECT b.id, b.name\nFROM battle AS b\nJOIN ship AS s ON b.id = s.lost_in_battle\nJOIN death AS d ON s.id = d.caused_by_ship_id\nGROUP BY b.id, b.name\nHAVING SUM(d.killed) > 10;\n```", "match": {"match": true, "result": [[5, "Battle of Messinopolis"], [6, "Battle of Boruy"], [8, "Siege of Constantinople"]]}}
{"result": "```sql\nSELECT caused_by_ship_id, name \nFROM ship \nJOIN death ON ship.id = death.caused_by_ship_id \nGROUP BY caused_by_ship_id, name \nORDER BY SUM(injured) DESC \nLIMIT 1;\n```", "match": {"match": false, "result": [[4, "HMS Avon"]], "gt": [[5, "Three Brothers"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT DISTINCT name \nFROM battle \nWHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';\n```", "match": {"match": true, "result": [["Battle of Adrianople"]]}}
{"result": "SELECT COUNT(DISTINCT result) FROM battle", "match": {"match": true, "result": [[3]]}}
{"result": "```sql\nSELECT COUNT(*) \nFROM battle \nWHERE id NOT IN (\n    SELECT lost_in_battle \n    FROM ship \n    WHERE tonnage = '225'\n);\n```", "match": {"match": true, "result": [[7]]}}
{"result": "```sql\nSELECT b.name, b.date\nFROM battle b\nJOIN ship s1 ON b.id = s1.lost_in_battle\nJOIN ship s2 ON b.id = s2.lost_in_battle\nJOIN death d ON s1.id = d.caused_by_ship_id\nWHERE s1.name = 'Lettice' AND s2.name = 'HMS Atalanta';\n```", "match": {"match": false, "result": [["Siege of Constantinople", "1235"], ["Siege of Constantinople", "1235"]], "gt": [["Siege of Constantinople", "1235"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT name, result, bulgarian_commander \nFROM battle \nWHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel');\n```", "match": {"match": false, "result": [["Battle of Adrianople", "Bulgarian victory", "Kaloyan"], ["Battle of Serres", "Bulgarian victory", "Kaloyan"], ["Battle of Rusion", "Bulgarian victory", "Kaloyan"]], "gt": [["Battle of Adrianople", "Bulgarian victory", "Kaloyan"], ["Battle of Rusion", "Bulgarian victory", "Kaloyan"], ["Battle of Serres", "Bulgarian victory", "Kaloyan"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT note FROM death WHERE note LIKE '%East%';\n```", "match": {"match": true, "result": [["East Champaran, Bihar"]]}}
{"result": "SELECT line_1, line_2 FROM Addresses", "match": {"match": true, "result": [["2294 Grant Square Apt. 235", "Apt. 370"], ["3999 Aufderhar Ways Suite 593", "Apt. 388"], ["67942 Carlotta Ferry Apt. 686", "Apt. 583"], ["0144 Lamar Plaza Apt. 346", "Suite 703"], ["858 Peggie Bypass Suite 212", "Apt. 335"], ["16998 Mraz Lodge", "Apt. 689"], ["193 Marlin Brook", "Apt. 406"], ["202 Hessel Views Apt. 468", "Apt. 305"], ["0643 Muller Vista", "Suite 383"], ["7081 Eda Center", "Suite 830"], ["9283 Schulist Falls Apt. 037", "Suite 239"], ["979 Haag Shores Suite 656", "Apt. 468"], ["492 Wilkinson Route", "Suite 865"], ["186 Evan Motorway Apt. 409", "Suite 079"], ["74046 Metz Walk Apt. 113", "Suite 674"]]}}
{"result": "SELECT line_1, line_2 FROM Addresses", "match": {"match": true, "result": [["2294 Grant Square Apt. 235", "Apt. 370"], ["3999 Aufderhar Ways Suite 593", "Apt. 388"], ["67942 Carlotta Ferry Apt. 686", "Apt. 583"], ["0144 Lamar Plaza Apt. 346", "Suite 703"], ["858 Peggie Bypass Suite 212", "Apt. 335"], ["16998 Mraz Lodge", "Apt. 689"], ["193 Marlin Brook", "Apt. 406"], ["202 Hessel Views Apt. 468", "Apt. 305"], ["0643 Muller Vista", "Suite 383"], ["7081 Eda Center", "Suite 830"], ["9283 Schulist Falls Apt. 037", "Suite 239"], ["979 Haag Shores Suite 656", "Apt. 468"], ["492 Wilkinson Route", "Suite 865"], ["186 Evan Motorway Apt. 409", "Suite 079"], ["74046 Metz Walk Apt. 113", "Suite 674"]]}}
{"result": "SELECT COUNT(*) AS total_courses FROM Courses", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) FROM Courses", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT course_description FROM Courses WHERE course_name = 'Math'", "match": {"match": false, "result": [], "gt": [["q"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT course_description FROM Courses WHERE course_name LIKE '%Math%'", "match": {"match": true, "result": [["q"]]}}
{"result": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'", "match": {"match": true, "result": [["148"]]}}
{"result": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'", "match": {"match": true, "result": [["148"]]}}
{"result": "```sql\nSELECT d.department_name, d.department_id\nFROM Departments d\nJOIN Degree_Programs dp ON d.department_id = dp.department_id\nGROUP BY d.department_id, d.department_name\nORDER BY COUNT(dp.degree_program_id) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [["statistics", 8]]}}
{"result": "```sql\nSELECT department_id, department_name\nFROM Departments\nWHERE department_id = (\n    SELECT department_id\n    FROM Degree_Programs\n    GROUP BY department_id\n    ORDER BY COUNT(degree_program_id) DESC\n    LIMIT 1\n);\n```", "match": {"match": false, "result": [[8, "statistics"]], "gt": [["statistics", 8]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT department_id) FROM Degree_Programs", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT COUNT(DISTINCT department_id) FROM Degree_Programs", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT COUNT(DISTINCT degree_summary_name) AS distinct_degree_count\nFROM Degree_Programs", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(DISTINCT degree_summary_name) AS number_of_degrees\nFROM Degree_Programs", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering')", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering')", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT section_name, section_description FROM Sections", "match": {"match": true, "result": [["a", "non"], ["b", "voluptatem"], ["c", "qui"], ["d", "voluptas"], ["e", "ex"], ["f", "doloremque"], ["g", "provident"], ["h", "et"], ["j", "quis"], ["k", "nesciunt"], ["l", "ad"], ["o", "et"], ["p", "facilis"], ["u", "reprehenderit"], ["y", "qui"]]}}
{"result": "SELECT section_name, section_description FROM Sections", "match": {"match": true, "result": [["a", "non"], ["b", "voluptatem"], ["c", "qui"], ["d", "voluptas"], ["e", "ex"], ["f", "doloremque"], ["g", "provident"], ["h", "et"], ["j", "quis"], ["k", "nesciunt"], ["l", "ad"], ["o", "et"], ["p", "facilis"], ["u", "reprehenderit"], ["y", "qui"]]}}
{"result": "```sql\nSELECT course_id, course_name\nFROM Courses\nWHERE course_id IN (\n    SELECT course_id\n    FROM Sections\n    GROUP BY course_id\n    HAVING COUNT(section_id) <= 2\n)\n```", "match": {"match": false, "result": [[1, "ds"], [2, "math"], [4, "en"], [5, "fr"], [6, "la"], [7, "cal"], [8, "nlp"], [9, "dl"], [10, "ml"], [12, "db"], [14, "pl"]], "gt": [["ds", 1], ["math", 2], ["en", 4], ["fr", 5], ["la", 6], ["cal", 7], ["nlp", 8], ["dl", 9], ["ml", 10], ["db", 12], ["pl", 14]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT course_id, course_name \nFROM Courses \nWHERE course_id NOT IN (\n    SELECT course_id \n    FROM Sections \n    GROUP BY course_id \n    HAVING COUNT(section_id) >= 2\n);\n```", "match": {"match": false, "result": [[2, "math"], [3, "os"], [4, "en"], [6, "la"], [7, "cal"], [9, "dl"], [10, "ml"], [11, "ai"], [12, "db"], [13, "rs"], [15, "oop"]], "gt": [["ds", 1], ["math", 2], ["en", 4], ["fr", 5], ["la", 6], ["cal", 7], ["nlp", 8], ["dl", 9], ["ml", 10], ["db", 12], ["pl", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT section_name FROM Sections ORDER BY section_name DESC", "match": {"match": true, "result": [["y"], ["u"], ["p"], ["o"], ["l"], ["k"], ["j"], ["h"], ["g"], ["f"], ["e"], ["d"], ["c"], ["b"], ["a"]]}}
{"result": "SELECT section_name FROM Sections ORDER BY section_name DESC", "match": {"match": true, "result": [["y"], ["u"], ["p"], ["o"], ["l"], ["k"], ["j"], ["h"], ["g"], ["f"], ["e"], ["d"], ["c"], ["b"], ["a"]]}}
{"result": "```sql\nSELECT semester_id, semester_name\nFROM Semesters\nJOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id\nGROUP BY semester_id, semester_name\nORDER BY COUNT(Student_Enrolment.student_id) DESC\nLIMIT 1;\n```", "match": {"match": false, "error": "Query execution failed with error: ambiguous column name: semester_id"}}
{"result": "```sql\nSELECT s.semester_id, s.semester_name\nFROM Semesters s\nJOIN Student_Enrolment e ON s.semester_id = e.semester_id\nGROUP BY s.semester_id, s.semester_name\nHAVING COUNT(e.student_id) = (\n    SELECT COUNT(student_id) \n    FROM Student_Enrolment\n    WHERE semester_id = s.semester_id\n    GROUP BY semester_id\n    ORDER BY COUNT(student_id) DESC\n    LIMIT 1\n);\n```", "match": {"match": false, "result": [[1, "spring 2010"], [2, "summer 2010"], [4, "winter 2010"], [5, "spring 2018"], [6, "spring 2012"], [9, "spring 2015"], [12, "spring 2018"], [13, "fall 2018"], [15, "spring 2019"]], "gt": [["summer 2010", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT department_description FROM Departments WHERE department_name LIKE '%the computer%'", "match": {"match": false, "result": [], "gt": [["error"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "match": {"match": true, "result": [["error"]]}}
{"result": "```sql\nSELECT s.first_name, s.middle_name, s.last_name, s.student_id\nFROM Students s\nJOIN (\n    SELECT student_id\n    FROM Student_Enrolment\n    GROUP BY student_id\n    HAVING COUNT(degree_program_id) = 2\n) e ON s.student_id = e.student_id;\n```", "match": {"match": true, "result": [["Jarvis", "Aaliyah", "Carroll", 4], ["Reva", "Golda", "Osinski", 9], ["Jordy", "Osborne", "Rempel", 14]]}}
{"result": "```sql\nSELECT DISTINCT s.student_id, s.first_name, s.middle_name, s.last_name\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nWHERE (\n    SELECT COUNT(*) \n    FROM Student_Enrolment se2 \n    WHERE se2.student_id = s.student_id AND se2.semester_id = se.semester_id AND se2.degree_program_id <> se.degree_program_id\n) = 2;\n```", "match": {"match": false, "result": [], "gt": [["Jarvis", "Aaliyah", "Carroll", 4], ["Reva", "Golda", "Osinski", 9], ["Jordy", "Osborne", "Rempel", 14]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT s.first_name, s.middle_name, s.last_name\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_summary_name AND dp.degree_summary_name LIKE '%Bachelor%'\n```", "match": {"match": false, "result": [], "gt": [["Reva", "Golda", "Osinski"], ["Frida", "Aisha", "Huel"], ["Jarvis", "Aaliyah", "Carroll"], ["Milton", "Vaughn", "Christiansen"], ["Stanford", "Mona", "Rogahn"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT s.first_name, s.middle_name, s.last_name\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nWHERE dp.degree_summary_name = 'Bachelors';\n```", "match": {"match": false, "result": [], "gt": [["Reva", "Golda", "Osinski"], ["Frida", "Aisha", "Huel"], ["Jarvis", "Aaliyah", "Carroll"], ["Milton", "Vaughn", "Christiansen"], ["Stanford", "Mona", "Rogahn"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT dp.degree_summary_name\nFROM Student_Enrolment se\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nGROUP BY dp.degree_summary_name\nORDER BY COUNT(se.student_id) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [["Bachelor"]]}}
{"result": "```sql\nSELECT dp.degree_summary_name\nFROM Degree_Programs dp\nJOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id\nGROUP BY dp.degree_program_id, dp.degree_summary_name\nORDER BY COUNT(se.student_id) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [["Bachelor"]]}}
{"result": "```sql\nSELECT dp.degree_program_id, dp.degree_summary_name\nFROM Student_Enrolment se\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nGROUP BY dp.degree_program_id, dp.degree_summary_name\nORDER BY COUNT(se.student_id) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [[9, "Bachelor"]]}}
{"result": "```sql\nSELECT dp.degree_program_id, dp.degree_summary_name\nFROM Student_Enrolment se\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nGROUP BY dp.degree_program_id, dp.degree_summary_name\nORDER BY COUNT(se.student_id) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [[9, "Bachelor"]]}}
{"result": "```sql\nSELECT \n    s.student_id,\n    s.first_name,\n    s.middle_name,\n    s.last_name,\n    COUNT(se.student_enrolment_id) AS number_of_enrollments\nFROM \n    Students s\nJOIN \n    Student_Enrolment se ON s.student_id = se.student_id\nGROUP BY \n    s.student_id, s.first_name, s.middle_name, s.last_name\nORDER BY \n    number_of_enrollments DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [[6, "Stanford", "Mona", "Rogahn", 3]], "gt": [[7, "Frida", "Aisha", "Huel", 3, 7]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT \n    s.student_id, \n    s.first_name, \n    s.middle_name, \n    s.last_name, \n    COUNT(se.student_enrolment_id) AS num_enrollments\nFROM \n    Students s\nJOIN \n    Student_Enrolment se ON s.student_id = se.student_id\nGROUP BY \n    s.student_id, s.first_name, s.middle_name, s.last_name\nORDER BY \n    num_enrollments DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [[6, "Stanford", "Mona", "Rogahn", 3]], "gt": [[7, "Frida", "Aisha", "Huel", 3, 7]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT s.semester_name\nFROM Semesters s\nLEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id\nWHERE se.student_id IS NULL;\n```", "match": {"match": true, "result": [["fall 2010"], ["spring 2013"], ["spring 2014"], ["spring 2016"], ["spring 2017"], ["winter 2018"]]}}
{"result": "SELECT semester_id, semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)", "match": {"match": false, "result": [[3, "fall 2010"], [7, "spring 2013"], [8, "spring 2014"], [10, "spring 2016"], [11, "spring 2017"], [14, "winter 2018"]], "gt": [["fall 2010"], ["spring 2013"], ["spring 2014"], ["spring 2016"], ["spring 2017"], ["winter 2018"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT DISTINCT c.course_name\nFROM Courses c\nJOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id;\n```", "match": {"match": true, "result": [["la"], ["pl"], ["ai"], ["math"], ["ml"], ["os"], ["en"], ["nlp"], ["rs"], ["db"]]}}
{"result": "SELECT DISTINCT c.course_name\nFROM Courses c\nJOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id", "match": {"match": true, "result": [["la"], ["pl"], ["ai"], ["math"], ["ml"], ["os"], ["en"], ["nlp"], ["rs"], ["db"]]}}
{"result": "```sql\nSELECT c.course_name\nFROM Courses c\nJOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id\nGROUP BY c.course_id, c.course_name\nORDER BY COUNT(sec.student_course_id) DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [["math"]], "gt": [["rs"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT c.course_name\nFROM Courses c\nJOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id\nGROUP BY c.course_id, c.course_name\nORDER BY COUNT(sec.student_course_id) DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [["math"]], "gt": [["rs"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT last_name \nFROM Students \nWHERE state_province_county = 'North Carolina' \nAND date_left IS NULL \nAND student_id NOT IN (\n    SELECT student_id \n    FROM Student_Enrolment\n);\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: state_province_county"}}
{"result": "```sql\nSELECT last_name \nFROM Students \nWHERE state_province_county = 'North Carolina' \nAND student_id NOT IN (\n    SELECT student_id \n    FROM Student_Enrolment\n);\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: state_province_county"}}
{"result": "```sql\nSELECT transcript_id, transcript_date\nFROM Transcripts\nWHERE transcript_id IN (\n    SELECT transcript_id\n    FROM Transcript_Contents\n    GROUP BY transcript_id\n    HAVING COUNT(student_course_id) >= 2\n)\n```", "match": {"match": false, "result": [[5, "2013-06-30 13:01:40"], [6, "2010-12-13 10:55:15"], [8, "1975-05-06 12:04:47"], [15, "1998-11-22 12:18:29"]], "gt": [["2013-06-30 13:01:40", 5], ["2010-12-13 10:55:15", 6], ["1975-05-06 12:04:47", 8], ["1998-11-22 12:18:29", 15]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT t.transcript_id, t.transcript_date\nFROM Transcripts t\nJOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id\nGROUP BY t.transcript_id, t.transcript_date\nHAVING COUNT(tc.student_course_id) >= 2;\n```", "match": {"match": false, "result": [[5, "2013-06-30 13:01:40"], [6, "2010-12-13 10:55:15"], [8, "1975-05-06 12:04:47"], [15, "1998-11-22 12:18:29"]], "gt": [["2013-06-30 13:01:40", 5], ["2010-12-13 10:55:15", 6], ["1975-05-06 12:04:47", 8], ["1998-11-22 12:18:29", 15]], "error": "Query result does not match ground truth."}}
{"result": "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward' AND cell_mobile_number IS NOT NULL", "match": {"match": true, "result": [["(096)889-8954x524"]]}}
{"result": "SELECT `cell_mobile_number` \nFROM `Students` \nWHERE `first_name` = 'Timmothy' AND `last_name` = 'Ward'", "match": {"match": false, "result": [["(096)889-8954x524"]], "gt": [], "error": "Query result does not match ground truth."}}
{"result": "SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM Students)", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT first_name, middle_name, last_name \nFROM Students \nORDER BY date_first_registered \nLIMIT 1", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "```sql\nSELECT first_name, middle_name, last_name\nFROM Students\nWHERE date_left IS NOT NULL\nORDER BY date_left ASC\nLIMIT 1;\n```", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT first_name, middle_name, last_name\nFROM Students\nWHERE date_left IS NOT NULL\nORDER BY date_left ASC\nLIMIT 1", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT first_name \nFROM Students \nWHERE current_address_id != permanent_address_id", "match": {"match": true, "result": [["Timmothy"], ["Hobart"], ["Warren"], ["Jarvis"], ["Stanford"], ["Frida"], ["Delaney"], ["Reva"], ["Helga"], ["Gregg"], ["Orrin"], ["Deon"], ["Jordy"], ["Jett"]]}}
{"result": "SELECT first_name FROM Students WHERE permanent_address_id != current_address_id", "match": {"match": true, "result": [["Timmothy"], ["Hobart"], ["Warren"], ["Jarvis"], ["Stanford"], ["Frida"], ["Delaney"], ["Reva"], ["Helga"], ["Gregg"], ["Orrin"], ["Deon"], ["Jordy"], ["Jett"]]}}
{"result": "```sql\nSELECT a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country, a.other_address_details\nFROM Addresses a\nJOIN Students s ON a.address_id = s.current_address_id\nGROUP BY a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country, a.other_address_details\nORDER BY COUNT(s.student_id) DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [[9, "0643 Muller Vista", "Suite 383", null, "Port Elvisfurt", "777", "NorthCarolina", "Gabon", null]], "gt": [[9, "0643 Muller Vista", "Suite 383"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT address_id, line_1, line_2\nFROM Addresses\nWHERE address_id = (\n    SELECT current_address_id\n    FROM Students\n    GROUP BY current_address_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n);\n```", "match": {"match": true, "result": [[9, "0643 Muller Vista", "Suite 383"]]}}
{"result": "```sql\nSELECT AVG(transcript_date) AS average_transcript_date\nFROM Transcripts;\n```", "match": {"match": true, "result": [[1989.9333333333334]]}}
{"result": "SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts", "match": {"match": true, "result": [[1989.9333333333334]]}}
{"result": "SELECT MIN(transcript_date) AS first_transcript_date, other_details FROM Transcripts GROUP BY other_details", "match": {"match": true, "result": [["1975-05-06 12:04:47", null]]}}
{"result": "SELECT MIN(transcript_date) AS earliest_transcript_date, other_details FROM Transcripts", "match": {"match": true, "result": [["1975-05-06 12:04:47", null]]}}
{"result": "SELECT COUNT(*) FROM Transcripts", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) FROM Transcripts", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT MAX(transcript_date) AS last_transcript_release_date FROM Transcripts", "match": {"match": true, "result": [["2013-06-30 13:01:40"]]}}
{"result": "SELECT MAX(transcript_date) AS last_transcript_date FROM Transcripts", "match": {"match": true, "result": [["2013-06-30 13:01:40"]]}}
{"result": "```sql\nSELECT student_course_id, COUNT(*) AS max_transcripts\nFROM Transcript_Contents\nGROUP BY student_course_id\nORDER BY max_transcripts DESC;\n```", "match": {"match": false, "result": [[0, 4], [76, 3], [96, 2], [70882679, 1], [45105806, 1], [28982908, 1], [8, 1], [7, 1], [2, 1]], "gt": [[4, 0]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT MAX(cnt) AS max_count, sc.student_enrolment_id\nFROM (\n    SELECT student_course_id, COUNT(*) AS cnt\n    FROM Transcript_Contents\n    GROUP BY student_course_id\n) tc\nJOIN Student_Enrolment_Courses sc ON tc.student_course_id = sc.student_course_id\nGROUP BY sc.student_enrolment_id\nORDER BY max_count DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [[4, 2]], "gt": [[4, 0]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT t.transcript_id, t.transcript_date\nFROM Transcripts t\nWHERE t.transcript_id = (\n    SELECT transcript_id \n    FROM Transcript_Contents \n    GROUP BY transcript_id \n    ORDER BY COUNT(*) ASC \n    LIMIT 1\n);\n```", "match": {"match": false, "result": [[2, "1975-10-28 15:16:51"]], "gt": [["1975-10-28 15:16:51", 2]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT t.transcript_id, t.transcript_date\nFROM Transcripts t\nWHERE t.transcript_id = (\n    SELECT student_course_id \n    FROM Transcript_Contents \n    GROUP BY student_course_id \n    ORDER BY COUNT(*) ASC \n    LIMIT 1\n);\n```", "match": {"match": false, "result": [[2, "1975-10-28 15:16:51"]], "gt": [["1975-10-28 15:16:51", 2]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT semester_id\nFROM Student_Enrolment\nWHERE degree_program_id IN (\n    SELECT degree_program_id\n    FROM Degree_Programs\n    WHERE degree_summary_name LIKE '%Master%'\n) UNION SELECT semester_id\nFROM Student_Enrolment\nWHERE degree_program_id IN (\n    SELECT degree_program_id\n    FROM Degree_Programs\n    WHERE degree_summary_name LIKE '%Bachelor%'\n);\n```", "match": {"match": false, "result": [[1], [2], [4], [5], [6], [9], [12], [13], [15]], "gt": [[13]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT s.semester_id\nFROM Semesters s\nJOIN Student_Enrolment se ON s.semester_id = se.semester_id\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nWHERE EXISTS (\n    SELECT 1\n    FROM Student_Enrolment se2\n    JOIN Degree_Programs dp2 ON se2.degree_program_id = dp2.degree_program_id\n    WHERE dp2.degreesummary_name IN ('Masters', 'Bachelors') AND se2.semester_id = s.semester_id\n    GROUP BY se2.semester_id\n    HAVING COUNT(DISTINCT dp2.degreesummary_name) = 2\n)\nGROUP BY s.semester_id;\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: dp2.degreesummary_name"}}
{"result": "SELECT COUNT(DISTINCT current_address_id) \nFROM Students", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT DISTINCT current_address_id, permanent_address_id \nFROM Students", "match": {"match": false, "result": [[10, 15], [12, 5], [9, 5], [7, 11], [9, 9], [6, 3], [15, 3], [1, 5], [2, 15], [15, 14], [14, 4], [14, 9], [9, 8], [12, 11], [2, 9]], "gt": [[9]], "error": "Query result does not match ground truth."}}
{"result": "SELECT *\nFROM Students\nORDER BY CONCAT(last_name, first_name, middle_name) DESC", "match": {"match": false, "result": [[13, 9, 8, "Deon", "Brooklyn", "Weimann", "(213)445-0399x85208", "jhuel@example.com", "68095", "1986-02-24 21:12:23", "2014-05-30 23:32:02", "assumenda"], [1, 10, 15, "Timmothy", "Anna", "Ward", "(096)889-8954x524", "erwin.zboncak@example.com", "965", "1971-02-05 07:28:23", "1971-05-17 19:28:49", "quia"], [11, 14, 4, "Gregg", "Mossie", "Schuppe", "(462)246-7921", "nbruen@example.org", "494", "1989-05-24 23:31:29", "1975-10-09 00:49:27", "omnis"], [6, 6, 3, "Stanford", "Mona", "Rogahn", "436.613.7683", "skassulke@example.net", "248", "1997-03-20 16:47:25", "2016-04-09 12:27:04", "qui"], [14, 12, 11, "Jordy", "Osborne", "Rempel", "(605)919-3594x3661", "gracie29@example.com", "34458427", "2004-12-24 12:36:46", "1999-08-24 00:07:10", "et"], [9, 2, 15, "Reva", "Golda", "Osinski", "(507)365-8405", "qo'kon@example.com", "39", "2017-01-04 08:10:25", "1990-09-01 05:03:27", "nesciunt"], [10, 15, 14, "Helga", "Cleve", "Mohr", "677.401.9382", "nya.lesch@example.net", "43", "2009-09-25 00:14:25", "2017-07-09 21:38:43", "rerum"], [12, 14, 9, "Orrin", "Neal", "Kemmer", "(982)153-1469x1733", "beth42@example.org", "6274274", "2005-12-15 08:42:10", "2006-08-04 17:26:49", "non"], [15, 2, 9, "Jett", "Alberta", "Jaskolski", "877.549.9067x8723", "mya88@example.org", "156", "1982-06-19 13:15:18", "1982-06-11 00:25:39", "omnis"], [7, 15, 3, "Frida", "Aisha", "Huel", "1-879-796-8987x164", "baumbach.lucious@example.org", "668", "2018-03-13 09:56:22", "1997-11-16 08:54:33", "dolorum"], [3, 9, 5, "Warren", "Violet", "Gleichner", "07661787471", "johns.unique@example.net", "3", "2007-08-29 23:25:41", "2007-03-31 09:53:19", "facilis"], [5, 9, 9, "Milton", "Vaughn", "Christiansen", "171-642-5684", "lhartmann@example.org", "", "1973-05-19 19:12:46", "2007-11-28 12:50:21", "laborum"], [4, 7, 11, "Jarvis", "Aaliyah", "Carroll", "09700166582", "jillian26@example.net", "141072406", "2014-03-28 05:48:23", "2007-08-02 04:12:58", "atque"], [2, 12, 5, "Hobart", "Lorenz", "Balistreri", "1-009-710-5151", "swift.kolby@example.com", "304246", "1976-10-26 02:33:06", "2013-10-05 17:41:28", "autem"], [8, 1, 5, "Delaney", "Judd", "Ankunding", "03174364122", "dell43@example.net", "402", "1982-02-14 08:46:35", "2004-12-08 05:29:11", "voluptatem"]], "gt": [["voluptatem"], ["rerum"], ["quia"], ["qui"], ["omnis"], ["omnis"], ["non"], ["nesciunt"], ["laborum"], ["facilis"], ["et"], ["dolorum"], ["autem"], ["atque"], ["assumenda"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT other_student_details FROM Students ORDER BY last_name DESC, first_name DESC", "match": {"match": false, "result": [["assumenda"], ["quia"], ["omnis"], ["qui"], ["et"], ["nesciunt"], ["rerum"], ["non"], ["omnis"], ["dolorum"], ["facilis"], ["laborum"], ["atque"], ["autem"], ["voluptatem"]], "gt": [["voluptatem"], ["rerum"], ["quia"], ["qui"], ["omnis"], ["omnis"], ["non"], ["nesciunt"], ["laborum"], ["facilis"], ["et"], ["dolorum"], ["autem"], ["atque"], ["assumenda"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT *\nFROM Sections\nWHERE section_name = 'h';\n```", "match": {"match": false, "result": [[8, 14, "h", "et", null]], "gt": [["et"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT section_description FROM Sections WHERE section_name = 'h'", "match": {"match": true, "result": [["et"]]}}
{"result": "```sql\nSELECT first_name\nFROM Students\nWHERE (country = 'Haiti' OR cell_mobile_number = '09700166582');\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: country"}}
{"result": "```sql\nSELECT DISTINCT s.first_name\nFROM Students s\nWHERE s.permanent_address_id IN (\n    SELECT a.address_id\n    FROM Addresses a\n    WHERE a.country = 'Haiti'\n) OR s.cell_mobile_number = '09700166582';\n```", "match": {"match": false, "result": [["Hobart"], ["Warren"], ["Jarvis"], ["Delaney"]], "gt": [["Jarvis"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Title FROM Cartoon ORDER BY Title ASC", "match": {"match": true, "result": [["Dawn of the Dead Man!"], ["Day of the Dark Knight!"], ["Deep Cover for Batman!"], ["Enter the Outsiders!"], ["Evil Under the Sea!"], ["Fall of the Blue Beetle!"], ["Invasion of the Secret Santas!"], ["Journey to the Center of the Bat!"], ["Return of the Fearsome Fangs!"], ["Terror on Dinosaur Island!"], ["The Eyes of Despero!"], ["The Rise of the Blue Beetle!"]]}}
{"result": "SELECT Title FROM Cartoon ORDER BY Title ASC", "match": {"match": true, "result": [["Dawn of the Dead Man!"], ["Day of the Dark Knight!"], ["Deep Cover for Batman!"], ["Enter the Outsiders!"], ["Evil Under the Sea!"], ["Fall of the Blue Beetle!"], ["Invasion of the Secret Santas!"], ["Journey to the Center of the Bat!"], ["Return of the Fearsome Fangs!"], ["Terror on Dinosaur Island!"], ["The Eyes of Despero!"], ["The Rise of the Blue Beetle!"]]}}
{"result": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Day of the Dark Knight!"], ["Dawn of the Dead Man!"], ["The Eyes of Despero!"]]}}
{"result": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Day of the Dark Knight!"], ["Dawn of the Dead Man!"], ["The Eyes of Despero!"]]}}
{"result": "SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT Title, Directed_by, Original_air_date FROM Cartoon ORDER BY Original_air_date", "match": {"match": false, "result": [["Invasion of the Secret Santas!", "Brandon Vietti", "December12,2008"], ["Evil Under the Sea!", "Michael Chang", "December5,2008"], ["Return of the Fearsome Fangs!", "Brandon Vietti", "February20,2009"], ["Deep Cover for Batman!", "Michael Chang", "February27,2009"], ["The Eyes of Despero!", "Ben Jones", "February6,2009"], ["Dawn of the Dead Man!", "Ben Jones", "January16,2009"], ["Day of the Dark Knight!", "Ben Jones", "January2,2009"], ["Fall of the Blue Beetle!", "Brandon Vietti", "January23,2009"], ["Journey to the Center of the Bat!", "Michael Chang", "January30,2009"], ["Enter the Outsiders!", "Michael Chang", "January9,2009"], ["The Rise of the Blue Beetle!", "Ben Jones", "November14,2008"], ["Terror on Dinosaur Island!", "Brandon Vietti", "November21,2008"]], "gt": [["Invasion of the Secret Santas!", "Brandon Vietti"], ["Evil Under the Sea!", "Michael Chang"], ["Return of the Fearsome Fangs!", "Brandon Vietti"], ["Deep Cover for Batman!", "Michael Chang"], ["The Eyes of Despero!", "Ben Jones"], ["Dawn of the Dead Man!", "Ben Jones"], ["Day of the Dark Knight!", "Ben Jones"], ["Fall of the Blue Beetle!", "Brandon Vietti"], ["Journey to the Center of the Bat!", "Michael Chang"], ["Enter the Outsiders!", "Michael Chang"], ["The Rise of the Blue Beetle!", "Ben Jones"], ["Terror on Dinosaur Island!", "Brandon Vietti"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date", "match": {"match": true, "result": [["Invasion of the Secret Santas!", "Brandon Vietti"], ["Evil Under the Sea!", "Michael Chang"], ["Return of the Fearsome Fangs!", "Brandon Vietti"], ["Deep Cover for Batman!", "Michael Chang"], ["The Eyes of Despero!", "Ben Jones"], ["Dawn of the Dead Man!", "Ben Jones"], ["Day of the Dark Knight!", "Ben Jones"], ["Fall of the Blue Beetle!", "Brandon Vietti"], ["Journey to the Center of the Bat!", "Michael Chang"], ["Enter the Outsiders!", "Michael Chang"], ["The Rise of the Blue Beetle!", "Ben Jones"], ["Terror on Dinosaur Island!", "Brandon Vietti"]]}}
{"result": "SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti')", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Terror on Dinosaur Island!"], ["Day of the Dark Knight!"], ["Invasion of the Secret Santas!"], ["Dawn of the Dead Man!"], ["Fall of the Blue Beetle!"], ["The Eyes of Despero!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Terror on Dinosaur Island!"], ["Day of the Dark Knight!"], ["Invasion of the Secret Santas!"], ["Dawn of the Dead Man!"], ["Fall of the Blue Beetle!"], ["The Eyes of Despero!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT Country, COUNT(*) AS Number_of_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_Channels DESC LIMIT 1;", "match": {"match": true, "result": [["Italy", 12]]}}
{"result": "SELECT Country, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY Country ORDER BY Channel_Count DESC LIMIT 1", "match": {"match": true, "result": [["Italy", 12]]}}
{"result": "SELECT COUNT(DISTINCT series_name, Content) FROM TV_Channel", "match": {"match": false, "error": "Query execution failed with error: wrong number of arguments to function COUNT()"}}
{"result": "SELECT COUNT(DISTINCT series_name, Content) FROM TV_Channel", "match": {"match": false, "error": "Query execution failed with error: wrong number of arguments to function COUNT()"}}
{"result": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'", "match": {"match": true, "result": [["music"]]}}
{"result": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'", "match": {"match": true, "result": [["music"]]}}
{"result": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"", "match": {"match": true, "result": [["Sky Famiglia"]]}}
{"result": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'", "match": {"match": true, "result": [["Sky Famiglia"]]}}
{"result": "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'", "match": {"match": true, "result": [[3]]}}
{"result": "```sql\nSELECT Language, COUNT(*) AS Channel_Count\nFROM TV_Channel\nGROUP BY Language\nORDER BY Channel_Count ASC\nLIMIT 1;\n```", "match": {"match": true, "result": [["English", 3]]}}
{"result": "SELECT Language, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY Language ORDER BY Channel_Count ASC LIMIT 1", "match": {"match": true, "result": [["English", 3]]}}
{"result": "```sql\nSELECT Language, COUNT(*) AS Number_of_Channels\nFROM TV_Channel\nGROUP BY Language;\n```", "match": {"match": true, "result": [["English", 3], ["Italian", 12]]}}
{"result": "SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language", "match": {"match": true, "result": [["English", 3], ["Italian", 12]]}}
{"result": "SELECT series_name FROM TV_Channel WHERE id = (SELECT Channel FROM Cartoon WHERE Title = 'The Rise of the Blue Beetle!')", "match": {"match": true, "result": [["Sky Radio"]]}}
{"result": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle'", "match": {"match": false, "result": [], "gt": [["Sky Radio"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT Title FROM Cartoon WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = \"Sky Radio\")", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT Episode FROM TV_series ORDER BY Rating", "match": {"match": true, "result": [["The Hanged Man"], ["Double Down"], ["Home By Another Way"], ["Keepers"], ["Emily"], ["Blowback"], ["The Legend of Dylan McCleen"], ["Winterland"], ["The Year of the Rabbit"], ["Game Three"], ["Friendly Skies"], ["A Love of a Lifetime"]]}}
{"result": "SELECT Episode FROM TV_series ORDER BY Rating", "match": {"match": true, "result": [["The Hanged Man"], ["Double Down"], ["Home By Another Way"], ["Keepers"], ["Emily"], ["Blowback"], ["The Legend of Dylan McCleen"], ["Winterland"], ["The Year of the Rabbit"], ["Game Three"], ["Friendly Skies"], ["A Love of a Lifetime"]]}}
{"result": "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3", "match": {"match": true, "result": [["A Love of a Lifetime", "5.8"], ["Friendly Skies", "5.3"], ["Game Three", "4.4"]]}}
{"result": "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3", "match": {"match": true, "result": [["A Love of a Lifetime", "5.8"], ["Friendly Skies", "5.3"], ["Game Three", "4.4"]]}}
{"result": "```sql\nSELECT MIN(\"Share\") AS min_share, MAX(\"Share\") AS max_share \nFROM \"TV_series\";\n```", "match": {"match": false, "result": [[5.0, 9.0]], "gt": [[9.0, 5.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MIN(\"Share\") AS min_share, MAX(\"Share\") AS max_share FROM \"TV_series\"", "match": {"match": false, "result": [[5.0, 9.0]], "gt": [[9.0, 5.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "match": {"match": true, "result": [["September 24, 2007"]]}}
{"result": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'", "match": {"match": true, "result": [["September 24, 2007"]]}}
{"result": "SELECT T2.Weekly_Rank FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Episode = 'A Love of a Lifetime'", "match": {"match": false, "error": "Query execution failed with error: no such column: T2.Weekly_Rank"}}
{"result": "SELECT T2.Weekly_Rank FROM TV_series AS T2 JOIN TV_Channel AS T1 ON T2.Channel = T1.id WHERE T2.Episode = 'A Love of a Lifetime'", "match": {"match": true, "result": [[43.0]]}}
{"result": "SELECT T2.series_name FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Episode = 'A Love of a Lifetime'", "match": {"match": true, "result": [["Sky Radio"]]}}
{"result": "SELECT T2.series_name FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Episode = 'A Love of a Lifetime'", "match": {"match": true, "result": [["Sky Radio"]]}}
{"result": "```sql\nSELECT Episode \nFROM TV_series \nWHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio');\n```", "match": {"match": true, "result": [["A Love of a Lifetime"], ["Keepers"]]}}
{"result": "SELECT Episode FROM TV_series WHERE series_name = \"Sky Radio\"", "match": {"match": false, "error": "Query execution failed with error: no such column: series_name"}}
{"result": "SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by", "match": {"match": false, "result": [["Ben Jones", 4], ["Brandon Vietti", 4], ["Michael Chang", 4]], "gt": [[4, "Ben Jones"], [4, "Brandon Vietti"], [4, "Michael Chang"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by", "match": {"match": false, "result": [["Ben Jones", 4], ["Brandon Vietti", 4], ["Michael Chang", 4]], "gt": [[4, "Ben Jones"], [4, "Brandon Vietti"], [4, "Michael Chang"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Production_code, Channel FROM Cartoon WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)", "match": {"match": true, "result": [[102.0, "701"]]}}
{"result": "```sql\nSELECT Production_code, Channel \nFROM Cartoon \nORDER BY Original_air_date DESC \nLIMIT 1;\n```", "match": {"match": true, "result": [[102.0, "701"]]}}
{"result": "SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'yes'", "match": {"match": true, "result": [["Sky Famiglia + Sky HD", "MTV Live HD"]]}}
{"result": "SELECT T1.Package_Option, T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Hight_definition_TV = 'Yes'", "match": {"match": false, "result": [], "gt": [["Sky Famiglia + Sky HD", "MTV Live HD"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT DISTINCT T3.Country \nFROM Cartoon AS T1 \nJOIN TV_Channel AS T3 ON T1.Channel = T3.id \nJOIN TV_Channel AS T2 ON T1.Channel = T2.id \nWHERE T1.Written_by = 'Todd Casey';\n```", "match": {"match": true, "result": [["United Kingdom"], ["Italy"]]}}
{"result": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey' AND T2.Title LIKE '%Cartoon%'", "match": {"match": false, "result": [], "gt": [["United Kingdom"], ["Italy"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT Country \nFROM TV_Channel \nWHERE id NOT IN (\n    SELECT Channel \n    FROM Cartoon \n    WHERE Written_by = 'Todd Casey'\n);\n```", "match": {"match": false, "result": [["Italy"], ["Italy"], ["Italy"], ["Italy"], ["United Kingdom"], ["Italy"], ["Poland"], ["Italy"], ["Italy"], ["Italy"], ["Italy"], ["Italy"], ["Italy"]], "gt": [["Poland"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey')", "match": {"match": false, "result": [["Italy"], ["United Kingdom"], ["Poland"]], "gt": [["Poland"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT T1.series_name, T1.Country\nFROM TV_Channel AS T1\nJOIN Cartoon AS T2 ON T1.id = T2.Channel\nWHERE T2Directed_by IN ('Ben Jones', 'Michael Chang');\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: T2Directed_by"}}
{"result": "```sql\nSELECT tc.series_name, tc.Country\nFROM TV_Channel tc\nJOIN Cartoon c ON tc.id = c.Channel\nWHERE (cDirected_by = 'Ben Jones' OR cDirected_by = 'Michael Chang')\nGROUP BY tc.series_name, tc.Country;\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: cDirected_by"}}
{"result": "```sql\nSELECT Pixel_aspect_ratio_PAR, Country \nFROM TV_Channel \nWHERE Language <> 'English';\n```", "match": {"match": true, "result": [["4:3", "Italy"], ["4:3", "Italy"], ["4:3 / 16:9", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3", "Italy"], ["4:3", "Italy"]]}}
{"result": "```sql\nSELECT Pixel_aspect_ratio_PAR, Country \nFROM TV_Channel \nWHERE Language != 'English';\n```", "match": {"match": true, "result": [["4:3", "Italy"], ["4:3", "Italy"], ["4:3 / 16:9", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3", "Italy"], ["4:3", "Italy"]]}}
{"result": "```sql\nSELECT id \nFROM TV_Channel \nGROUP BY Country \nHAVING COUNT(id) > 2;\n```", "match": {"match": true, "result": [["700"]]}}
{"result": "SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(*) > 2", "match": {"match": false, "result": [], "gt": [["700"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT id\nFROM TV_Channel\nWHERE id NOT IN (\n    SELECT Channel\n    FROM Cartoon\n    WHERE Directed_by = 'Ben Jones'\n);\n```", "match": {"match": true, "result": [["701"], ["703"], ["705"], ["706"], ["708"], ["709"], ["713"], ["714"], ["715"], ["717"], ["719"]]}}
{"result": "SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')", "match": {"match": true, "result": [["701"], ["703"], ["705"], ["706"], ["708"], ["709"], ["713"], ["714"], ["715"], ["717"], ["719"]]}}
{"result": "```sql\nSELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')\n```", "match": {"match": true, "result": [["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["no ( FTV )"], ["Sky Famiglia + Sky HD"], ["no ( FTV )"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"]]}}
{"result": "```sql\nSELECT DISTINCT T1.Package_Option \nFROM TV_Channel AS T1 \nLEFT JOIN Cartoon AS T2 ON T1.id = T2.Channel \nWHERE T2Directed_by IS NULL OR T2Directed_by != 'Ben Jones'\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: T2Directed_by"}}
{"result": "SELECT COUNT(*) FROM poker_player", "match": {"match": true, "result": [[5]]}}
{"result": "SELECT COUNT(*) FROM poker_player", "match": {"match": true, "result": [[5]]}}
{"result": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "match": {"match": true, "result": [[596462.0], [476090.0], [189233.0], [142800.0], [104871.0]]}}
{"result": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "match": {"match": true, "result": [[596462.0], [476090.0], [189233.0], [142800.0], [104871.0]]}}
{"result": "SELECT Final_Table_Made, Best_Finish FROM poker_player", "match": {"match": true, "result": [[42.0, 1.0], [10.0, 2.0], [21.0, 1.0], [19.0, 2.0], [26.0, 3.0]]}}
{"result": "SELECT Final_Table_Made, Best_Finish FROM poker_player", "match": {"match": true, "result": [[42.0, 1.0], [10.0, 2.0], [21.0, 1.0], [19.0, 2.0], [26.0, 3.0]]}}
{"result": "SELECT AVG(Earnings) AS Average_Earnings FROM poker_player", "match": {"match": true, "result": [[301891.2]]}}
{"result": "SELECT AVG(Earnings) AS Average_Earnings FROM poker_player", "match": {"match": true, "result": [[301891.2]]}}
{"result": "SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)", "match": {"match": true, "result": [[58.0]]}}
{"result": "SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)", "match": {"match": true, "result": [[58.0]]}}
{"result": "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000", "match": {"match": true, "result": [[26.0]]}}
{"result": "```sql\nSELECT MAX(Final_Table_Made) \nFROM poker_player \nWHERE Earnings < 200000;\n```", "match": {"match": true, "result": [[26.0]]}}
{"result": "SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player)", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Teodor Salparov"], ["Yevgeni Sivozhelez"], ["Maksim Botin"], ["Semen Poltavskiy"]]}}
{"result": "SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player)", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Teodor Salparov"], ["Yevgeni Sivozhelez"], ["Maksim Botin"], ["Semen Poltavskiy"]]}}
{"result": "SELECT Name FROM people WHERE People_ID IN (SELECT Poker_Player_ID FROM poker_player WHERE Earnings > 300000)", "match": {"match": false, "result": [["Aleksey Ostapenko"], ["Sergey Grankin"]], "gt": [["Aleksey Ostapenko"], ["Maksim Botin"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT poker_player.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings > 300000;\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: poker_player.Name"}}
{"result": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Final_Table_Made ASC", "match": {"match": true, "result": [["Teodor Salparov"], ["Maksim Botin"], ["Yevgeni Sivozhelez"], ["Semen Poltavskiy"], ["Aleksey Ostapenko"]]}}
{"result": "SELECT T2.Name \nFROM poker_player AS T1\nJOIN people AS T2 ON T1.People_ID = T2.People_ID\nGROUP BY T2.Name\nORDER BY SUM(T1.Final_Table_Made) ASC", "match": {"match": true, "result": [["Teodor Salparov"], ["Maksim Botin"], ["Yevgeni Sivozhelez"], ["Semen Poltavskiy"], ["Aleksey Ostapenko"]]}}
{"result": "SELECT T2.Birth_Date FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings LIMIT 1", "match": {"match": true, "result": [["August 8, 1986"]]}}
{"result": "SELECT t2.Birth_Date FROM poker_player AS t1 JOIN people AS t2 ON t1.People_ID = t2.People_ID ORDER BY t1.Earnings LIMIT 1", "match": {"match": true, "result": [["August 8, 1986"]]}}
{"result": "SELECT poker_player.Money_Rank\nFROM poker_player\nJOIN people ON poker_player.People_ID = people.People_ID\nORDER BY people.Height DESC\nLIMIT 1", "match": {"match": true, "result": [[68.0]]}}
{"result": "SELECT poker_player.Money_Rank\nFROM poker_player\nJOIN people ON poker_player.People_ID = people.People_ID\nORDER BY people.Height DESC\nLIMIT 1", "match": {"match": true, "result": [[68.0]]}}
{"result": "```sql\nSELECT AVG(T1.Earnings) AS Average_Earnings\nFROM poker_player AS T1\nJOIN people AS T2 ON T1.People_ID = T2.People_ID\nWHERE T2.Height > 200;\n```", "match": {"match": true, "result": [[309445.0]]}}
{"result": "```sql\nSELECT AVG(T1.Earnings) AS Average_Earnings\nFROM poker_player AS T1\nJOIN people AS T2 ON T1.People_ID = T2.People_ID\nWHERE T2.Height > 200;\n```", "match": {"match": true, "result": [[309445.0]]}}
{"result": "SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player ORDER BY Earnings DESC)", "match": {"match": false, "result": [["Aleksey Ostapenko"], ["Teodor Salparov"], ["Yevgeni Sivozhelez"], ["Maksim Botin"], ["Semen Poltavskiy"]], "gt": [["Maksim Botin"], ["Aleksey Ostapenko"], ["Teodor Salparov"], ["Semen Poltavskiy"], ["Yevgeni Sivozhelez"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT p.Name\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nORDER BY pp.Earnings DESC", "match": {"match": true, "result": [["Maksim Botin"], ["Aleksey Ostapenko"], ["Teodor Salparov"], ["Semen Poltavskiy"], ["Yevgeni Sivozhelez"]]}}
{"result": "SELECT T2.Nationality, COUNT(*) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID GROUP BY T2.Nationality", "match": {"match": false, "result": [["Bulgaria", 1], ["Russia", 4]], "gt": [["Bulgaria", 1], ["Russia", 6]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality", "match": {"match": true, "result": [["Bulgaria", 1], ["Russia", 6]]}}
{"result": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Nationality\nFROM people\nGROUP BY Nationality\nHAVING COUNT(People_ID) >= 2", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Name, Birth_Date FROM people ORDER BY Name ASC", "match": {"match": true, "result": [["Aleksey Ostapenko", "May 26, 1986"], ["Maksim Botin", "July 14, 1983"], ["Roman Bragin", "April 17, 1987"], ["Semen Poltavskiy", "February 8, 1981"], ["Sergey Grankin", "January 22, 1987"], ["Teodor Salparov", "August 16, 1982"], ["Yevgeni Sivozhelez", "August 8, 1986"]]}}
{"result": "SELECT Name, Birth_Date FROM people ORDER BY Name ASC", "match": {"match": true, "result": [["Aleksey Ostapenko", "May 26, 1986"], ["Maksim Botin", "July 14, 1983"], ["Roman Bragin", "April 17, 1987"], ["Semen Poltavskiy", "February 8, 1981"], ["Sergey Grankin", "January 22, 1987"], ["Teodor Salparov", "August 16, 1982"], ["Yevgeni Sivozhelez", "August 8, 1986"]]}}
{"result": "SELECT Name FROM people WHERE Nationality != 'Russia'", "match": {"match": true, "result": [["Teodor Salparov"]]}}
{"result": "SELECT Name FROM people WHERE Nationality != 'Russia'", "match": {"match": true, "result": [["Teodor Salparov"]]}}
{"result": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "match": {"match": true, "result": [["Roman Bragin"], ["Sergey Grankin"]]}}
{"result": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "match": {"match": true, "result": [["Roman Bragin"], ["Sergey Grankin"]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM people", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM people", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(*) FROM conductor", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT COUNT(*) FROM conductor", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT Name FROM conductor ORDER BY Age ASC", "match": {"match": true, "result": [["Antal Dor\u00e1ti"], ["Igor Stravinsky"], ["Colin Davis"], ["Michael Tilson Thomas"], ["Paul Jorgensen"], ["Antal Brown"], ["Charles Dutoit"], ["Seiji Ozawa"], ["Valeri Gergiev"], ["Pierre Boulez"], ["Gerard Schwarz"], ["Robert Craft"]]}}
{"result": "SELECT Name FROM conductor ORDER BY Age", "match": {"match": true, "result": [["Antal Dor\u00e1ti"], ["Igor Stravinsky"], ["Colin Davis"], ["Michael Tilson Thomas"], ["Paul Jorgensen"], ["Antal Brown"], ["Charles Dutoit"], ["Seiji Ozawa"], ["Valeri Gergiev"], ["Pierre Boulez"], ["Gerard Schwarz"], ["Robert Craft"]]}}
{"result": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "match": {"match": true, "result": [["Igor Stravinsky"], ["Paul Jorgensen"], ["Charles Dutoit"], ["Pierre Boulez"], ["Robert Craft"], ["Michael Tilson Thomas"]]}}
{"result": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "match": {"match": true, "result": [["Igor Stravinsky"], ["Paul Jorgensen"], ["Charles Dutoit"], ["Pierre Boulez"], ["Robert Craft"], ["Michael Tilson Thomas"]]}}
{"result": "SELECT Record_Company, Year_of_Founded FROM orchestra ORDER BY Year_of_Founded DESC", "match": {"match": false, "result": [["Columbia Masterworks", 2009.0], ["Philips", 2008.0], ["Philips Classics Records", 2008.0], ["RCA", 2008.0], ["EMI", 2007.0], ["Koch Records / Naxos Records", 2006.0], ["Decca Records", 2004.0], ["Mercury Records", 2003.0], ["Deutsche Grammophon", 2003.0], ["Kultur", 2002.0], ["Decca Records", 2002.0], ["Delos Records", 2002.0]], "gt": [["Columbia Masterworks"], ["Philips"], ["Philips Classics Records"], ["RCA"], ["EMI"], ["Koch Records / Naxos Records"], ["Decca Records"], ["Mercury Records"], ["Deutsche Grammophon"], ["Kultur"], ["Decca Records"], ["Delos Records"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Record_Company, Year_of_Founded \nFROM orchestra \nORDER BY Year_of_Founded DESC", "match": {"match": false, "result": [["Columbia Masterworks", 2009.0], ["Philips", 2008.0], ["Philips Classics Records", 2008.0], ["RCA", 2008.0], ["EMI", 2007.0], ["Koch Records / Naxos Records", 2006.0], ["Decca Records", 2004.0], ["Mercury Records", 2003.0], ["Deutsche Grammophon", 2003.0], ["Kultur", 2002.0], ["Decca Records", 2002.0], ["Delos Records", 2002.0]], "gt": [["Columbia Masterworks"], ["Philips"], ["Philips Classics Records"], ["RCA"], ["EMI"], ["Koch Records / Naxos Records"], ["Decca Records"], ["Mercury Records"], ["Deutsche Grammophon"], ["Kultur"], ["Decca Records"], ["Delos Records"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(Attendance) AS Average_Attendance FROM show", "match": {"match": true, "result": [[1326.4]]}}
{"result": "SELECT AVG(Attendance) AS Average_Attendance FROM show", "match": {"match": true, "result": [[1326.4]]}}
{"result": "```sql\nSELECT MIN(t1.share), MAX(t1.share)\nFROM performance AS t1\nLEFT JOIN show AS t2 ON t1.performance_id = t2.performance_id\nWHERE t1.type != 'Live final';\n```", "match": {"match": false, "result": [["22.7%", "44.7%"]], "gt": [["44.7%", "22.7%"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT MAX(\"Share\") AS max_share, MIN(\"Share\") AS min_share\nFROM \"performance\"\nWHERE \"Type\" != 'Live final';\n```", "match": {"match": true, "result": [["44.7%", "22.7%"]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM conductor", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM conductor", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "match": {"match": true, "result": [["Robert Craft"], ["Antal Brown"], ["Gerard Schwarz"], ["Valeri Gergiev"], ["Charles Dutoit"], ["Michael Tilson Thomas"], ["Igor Stravinsky"], ["Paul Jorgensen"], ["Pierre Boulez"], ["Antal Dor\u00e1ti"], ["Seiji Ozawa"], ["Colin Davis"]]}}
{"result": "SELECT Name, MAX(Year_of_Work) - MIN(Year_of_Work) AS Years_Worked\nFROM conductor\nGROUP BY Name\nORDER BY Years_Worked DESC", "match": {"match": false, "result": [["Valeri Gergiev", 0], ["Seiji Ozawa", 0], ["Robert Craft", 0], ["Pierre Boulez", 0], ["Paul Jorgensen", 0], ["Michael Tilson Thomas", 0], ["Igor Stravinsky", 0], ["Gerard Schwarz", 0], ["Colin Davis", 0], ["Charles Dutoit", 0], ["Antal Dor\u00e1ti", 0], ["Antal Brown", 0]], "gt": [["Robert Craft"], ["Antal Brown"], ["Gerard Schwarz"], ["Valeri Gergiev"], ["Charles Dutoit"], ["Michael Tilson Thomas"], ["Igor Stravinsky"], ["Paul Jorgensen"], ["Pierre Boulez"], ["Antal Dor\u00e1ti"], ["Seiji Ozawa"], ["Colin Davis"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name FROM conductor WHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor)", "match": {"match": true, "result": [["Robert Craft"]]}}
{"result": "SELECT Name FROM conductor WHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor)", "match": {"match": true, "result": [["Robert Craft"]]}}
{"result": "SELECT c.Name, o.Orchestra\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID", "match": {"match": true, "result": [["Antal Dor\u00e1ti", "London Symphony Orchestra"], ["Igor Stravinsky", "Columbia Symphony Orchestra"], ["Colin Davis", "Royal Concertgebouw Orchestra"], ["Paul Jorgensen", "Royal Danish Orchestra"], ["Antal Brown", "Detroit Symphony Orchestra"], ["Charles Dutoit", "Montreal Symphony Orchestra"], ["Gerard Schwarz", "Seattle Symphony Orchestra"], ["Pierre Boulez", "Chicago Symphony Orchestra"], ["Valeri Gergiev", "Kirov Orchestra"], ["Robert Craft", "Philharmonia Orchestra"], ["Seiji Ozawa", "Orchestre de Paris"], ["Michael Tilson Thomas", "San Francisco Symphony Orchestra"]]}}
{"result": "SELECT c.Name, o.Orchestra FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID", "match": {"match": true, "result": [["Antal Dor\u00e1ti", "London Symphony Orchestra"], ["Igor Stravinsky", "Columbia Symphony Orchestra"], ["Colin Davis", "Royal Concertgebouw Orchestra"], ["Paul Jorgensen", "Royal Danish Orchestra"], ["Antal Brown", "Detroit Symphony Orchestra"], ["Charles Dutoit", "Montreal Symphony Orchestra"], ["Gerard Schwarz", "Seattle Symphony Orchestra"], ["Pierre Boulez", "Chicago Symphony Orchestra"], ["Valeri Gergiev", "Kirov Orchestra"], ["Robert Craft", "Philharmonia Orchestra"], ["Seiji Ozawa", "Orchestre de Paris"], ["Michael Tilson Thomas", "San Francisco Symphony Orchestra"]]}}
{"result": "```sql\nSELECT c.Name\nFROM conductor c\nINNER JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nGROUP BY c.Conductor_ID, c.Name\nHAVING COUNT(DISTINCT o.Orchestra_ID) > 1;\n```", "match": {"match": true, "result": []}}
{"result": "SELECT c.Name \nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nGROUP BY c.Conductor_ID, c.Name\nHAVING COUNT(DISTINCT o.Orchestra_ID) > 1", "match": {"match": true, "result": []}}
{"result": "```sql\nSELECT c.Name\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nGROUP BY c.Conductor_ID, c.Name\nORDER BY COUNT(o.Orchestra_ID) DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [["Antal Dor\u00e1ti"]], "gt": [["Michael Tilson Thomas"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT c.Name \nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nGROUP BY c.Conductor_ID, c.Name\nORDER BY COUNT(o.Orchestra_ID) DESC\nLIMIT 1;", "match": {"match": false, "result": [["Antal Dor\u00e1ti"]], "gt": [["Michael Tilson Thomas"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra WHERE Year_of_Founded > 2008)", "match": {"match": true, "result": [["Igor Stravinsky"]]}}
{"result": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra WHERE Year_of_Founded > 2008)", "match": {"match": true, "result": [["Igor Stravinsky"]]}}
{"result": "SELECT Record_Company, COUNT(*) AS Number_of_Orchestras FROM orchestra GROUP BY Record_Company", "match": {"match": true, "result": [["Columbia Masterworks", 1], ["Decca Records", 2], ["Delos Records", 1], ["Deutsche Grammophon", 1], ["EMI", 1], ["Koch Records / Naxos Records", 1], ["Kultur", 1], ["Mercury Records", 1], ["Philips", 1], ["Philips Classics Records", 1], ["RCA", 1]]}}
{"result": "SELECT Record_Company, COUNT(Orchestra_ID) FROM orchestra GROUP BY Record_Company", "match": {"match": true, "result": [["Columbia Masterworks", 1], ["Decca Records", 2], ["Delos Records", 1], ["Deutsche Grammophon", 1], ["EMI", 1], ["Koch Records / Naxos Records", 1], ["Kultur", 1], ["Mercury Records", 1], ["Philips", 1], ["Philips Classics Records", 1], ["RCA", 1]]}}
{"result": "SELECT `Major_Record_Format`, COUNT(*) as count\nFROM `orchestra`\nGROUP BY `Major_Record_Format`\nORDER BY count ASC", "match": {"match": false, "result": [["CD / LP", 1], ["DVD", 1], ["CD", 10]], "gt": [["CD / LP"], ["DVD"], ["CD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Major_Record_Format, COUNT(*) AS Frequency\nFROM orchestra\nGROUP BY Major_Record_Format\nORDER BY Frequency DESC", "match": {"match": false, "result": [["CD", 10], ["DVD", 1], ["CD / LP", 1]], "gt": [["CD / LP"], ["DVD"], ["CD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "match": {"match": true, "result": [["Decca Records"]]}}
{"result": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "match": {"match": true, "result": [["Decca Records"]]}}
{"result": "```sql\nSELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);\n```", "match": {"match": true, "result": [["San Francisco Symphony Orchestra"]]}}
{"result": "```sql\nSELECT Orchestra_ID, Orchestra \nFROM orchestra \nWHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);\n```", "match": {"match": false, "result": [[12, "San Francisco Symphony Orchestra"]], "gt": [["San Francisco Symphony Orchestra"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Record_Company \nFROM orchestra \nWHERE Year_of_Founded < 2003\nUNION\nSELECT Record_Company \nFROM orchestra \nWHERE Year_of_Founded > 2003", "match": {"match": false, "result": [["Columbia Masterworks"], ["Decca Records"], ["Delos Records"], ["EMI"], ["Koch Records / Naxos Records"], ["Kultur"], ["Philips"], ["Philips Classics Records"], ["RCA"]], "gt": [["Decca Records"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT DISTINCT t2.Record_Company\nFROM orchestra AS t1\nJOIN conductor AS t2 ON t1.Conductor_ID = t2.Conductor_ID\nJOIN (\n    SELECT Record_Company\n    FROM orchestra\n    WHERE Year_of_Founded < 2003\n    INTERSECT\n    SELECT Record_Company\n    FROM orchestra\n    WHERE Year_of_Founded > 2003\n) AS t3 ON t2.Record_Company = t3.Record_Company;\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: t2.Record_Company"}}
{"result": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')", "match": {"match": true, "result": [[11]]}}
{"result": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')", "match": {"match": true, "result": [[11]]}}
{"result": "```sql\nSELECT o.Year_of_Founded\nFROM orchestra o\nJOIN performance p ON o.Orchestra_ID = p.Orchestra_ID\nGROUP BY o.Orchestra_ID, o.Year_of_Founded\nHAVING COUNT(p.Performance_ID) > 1\nORDER BY o.Year_of_Founded;\n```", "match": {"match": true, "result": []}}
{"result": "SELECT T2.Year_of_Founded FROM orchestra AS T2 JOIN performance AS T1 ON T2.Orchestra_ID = T1.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(T1.Performance_ID) > 1", "match": {"match": true, "result": []}}
{"result": "SELECT COUNT(*) FROM Highschooler", "match": {"match": true, "result": [[16]]}}
{"result": "SELECT COUNT(*) FROM Highschooler", "match": {"match": true, "result": [[16]]}}
{"result": "SELECT name, grade FROM Highschooler", "match": {"match": true, "result": [["Jordan", 9], ["Gabriel", 9], ["Tiffany", 9], ["Cassandra", 9], ["Haley", 10], ["Andrew", 10], ["Kris", 10], ["Brittany", 10], ["Alexis", 11], ["Austin", 11], ["Gabriel", 11], ["Jessica", 11], ["Jordan", 12], ["John", 12], ["Kyle", 12], ["Logan", 12]]}}
{"result": "SELECT name, grade FROM Highschooler", "match": {"match": true, "result": [["Jordan", 9], ["Gabriel", 9], ["Tiffany", 9], ["Cassandra", 9], ["Haley", 10], ["Andrew", 10], ["Kris", 10], ["Brittany", 10], ["Alexis", 11], ["Austin", 11], ["Gabriel", 11], ["Jessica", 11], ["Jordan", 12], ["John", 12], ["Kyle", 12], ["Logan", 12]]}}
{"result": "SELECT DISTINCT grade FROM Highschooler", "match": {"match": false, "result": [[9], [10], [11], [12]], "gt": [[9], [9], [9], [9], [10], [10], [10], [10], [11], [11], [11], [11], [12], [12], [12], [12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT ID, grade FROM Highschooler", "match": {"match": false, "result": [[1510, 9], [1689, 9], [1381, 9], [1709, 9], [1101, 10], [1782, 10], [1468, 10], [1641, 10], [1247, 11], [1316, 11], [1911, 11], [1501, 11], [1304, 12], [1025, 12], [1934, 12], [1661, 12]], "gt": [[9], [9], [9], [9], [10], [10], [10], [10], [11], [11], [11], [11], [12], [12], [12], [12]], "error": "Query result does not match ground truth."}}
{"result": "SELECT grade FROM Highschooler WHERE name = 'Kyle'", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT grade FROM Highschooler WHERE name = 'Kyle'", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT name FROM Highschooler WHERE grade = 10", "match": {"match": true, "result": [["Haley"], ["Andrew"], ["Kris"], ["Brittany"]]}}
{"result": "SELECT name FROM Highschooler WHERE grade = 10", "match": {"match": true, "result": [["Haley"], ["Andrew"], ["Kris"], ["Brittany"]]}}
{"result": "SELECT ID FROM Highschooler WHERE name = 'Kyle'", "match": {"match": true, "result": [[1934]]}}
{"result": "SELECT ID FROM Highschooler WHERE name = 'Kyle'", "match": {"match": true, "result": [[1934]]}}
{"result": "SELECT COUNT(*) \nFROM Highschooler \nWHERE grade IN (9, 10)", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10)", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade", "match": {"match": true, "result": [[9, 4], [10, 4], [11, 4], [12, 4]]}}
{"result": "SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade", "match": {"match": true, "result": [[9, 4], [10, 4], [11, 4], [12, 4]]}}
{"result": "```sql\nSELECT grade \nFROM Highschooler \nGROUP BY grade \nORDER BY COUNT(*) DESC \nLIMIT 1;\n```", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1", "match": {"match": true, "result": [[12]]}}
{"result": "```sql\nSELECT grade \nFROM Highschooler \nGROUP BY grade \nHAVING COUNT(ID) >= 4;\n```", "match": {"match": true, "result": [[9], [10], [11], [12]]}}
{"result": "```sql\nSELECT grade \nFROM Highschooler \nGROUP BY grade \nHAVING COUNT(ID) >= 4;\n```", "match": {"match": true, "result": [[9], [10], [11], [12]]}}
{"result": "SELECT student_id, COUNT(friend_id) AS num_of_friends \nFROM Friend \nGROUP BY student_id", "match": {"match": true, "result": [[1101, 1], [1247, 2], [1304, 1], [1316, 1], [1381, 1], [1468, 2], [1501, 1], [1510, 2], [1661, 1], [1689, 2], [1709, 1], [1782, 3], [1911, 1], [1934, 1]]}}
{"result": "SELECT student_id, COUNT(friend_id) AS num_friends\nFROM Friend\nGROUP BY student_id", "match": {"match": true, "result": [[1101, 1], [1247, 2], [1304, 1], [1316, 1], [1381, 1], [1468, 2], [1501, 1], [1510, 2], [1661, 1], [1689, 2], [1709, 1], [1782, 3], [1911, 1], [1934, 1]]}}
{"result": "```sql\nSELECT h.name, COUNT(f.friend_id) AS num_friends\nFROM Highschooler h\nLEFT JOIN Friend f ON h.ID = f.student_id\nGROUP BY h.ID, h.name;\n```", "match": {"match": false, "result": [["John", 0], ["Haley", 1], ["Alexis", 2], ["Jordan", 1], ["Austin", 1], ["Tiffany", 1], ["Kris", 2], ["Jessica", 1], ["Jordan", 2], ["Brittany", 0], ["Logan", 1], ["Gabriel", 2], ["Cassandra", 1], ["Andrew", 3], ["Gabriel", 1], ["Kyle", 1]], "gt": [["Haley", 1], ["Alexis", 2], ["Jordan", 1], ["Austin", 1], ["Tiffany", 1], ["Kris", 2], ["Jessica", 1], ["Jordan", 2], ["Logan", 1], ["Gabriel", 2], ["Cassandra", 1], ["Andrew", 3], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT H.name, COUNT(F.friend_id) AS num_friends\nFROM Highschooler H\nLEFT JOIN Friend F ON H.ID = F.student_id\nGROUP BY H.ID, H.name", "match": {"match": false, "result": [["John", 0], ["Haley", 1], ["Alexis", 2], ["Jordan", 1], ["Austin", 1], ["Tiffany", 1], ["Kris", 2], ["Jessica", 1], ["Jordan", 2], ["Brittany", 0], ["Logan", 1], ["Gabriel", 2], ["Cassandra", 1], ["Andrew", 3], ["Gabriel", 1], ["Kyle", 1]], "gt": [["Haley", 1], ["Alexis", 2], ["Jordan", 1], ["Austin", 1], ["Tiffany", 1], ["Kris", 2], ["Jessica", 1], ["Jordan", 2], ["Logan", 1], ["Gabriel", 2], ["Cassandra", 1], ["Andrew", 3], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT h.name\nFROM Highschooler h\nJOIN Friend f ON h.ID = f.student_id\nGROUP BY h.ID, h.name\nORDER BY COUNT(f.friend_id) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "```sql\nSELECT h.name\nFROM Highschooler h\nJOIN (\n    SELECT student_id, COUNT(friend_id) as friend_count\n    FROM Friend\n    GROUP BY student_id\n    ORDER BY friend_count DESC\n    LIMIT 1\n) f ON h.ID = f.student_id;\n```", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "```sql\nSELECT name \nFROM Highschooler \nWHERE ID IN (\n    SELECT student_id \n    FROM Friend \n    GROUP BY student_id \n    HAVING COUNT(friend_id) >= 3\n);\n```", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "```sql\nSELECT h.name\nFROM Highschooler h\nJOIN Friend f ON h.ID = f.student_id\nGROUP BY h.ID, h.name\nHAVING COUNT(f.friend_id) >= 3;\n```", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "```sql\nSELECT H.name \nFROM Highschooler H \nJOIN Friend F ON H.ID = F.friend_id \nWHERE F.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');\n```", "match": {"match": true, "result": [["Jordan"]]}}
{"result": "```sql\nSELECT F.name \nFROM Highschooler H \nJOIN Friend F1 ON H.ID = F1.student_id \nJOIN Highschooler F ON F1.friend_id = F.ID \nWHERE H.name = 'Kyle';\n```", "match": {"match": true, "result": [["Jordan"]]}}
{"result": "SELECT COUNT(*) \nFROM Friend \nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(*) \nFROM Friend \nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')", "match": {"match": true, "result": [[1]]}}
{"result": "```sql\nSELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)\n```", "match": {"match": false, "result": [], "gt": [[1025], [1641]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend);\n```", "match": {"match": false, "result": [], "gt": [[1025], [1641]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)\n```", "match": {"match": false, "result": [], "gt": [["Brittany"], ["John"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT name \nFROM Highschooler \nWHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend);\n```", "match": {"match": false, "result": [], "gt": [["Brittany"], ["John"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT DISTINCT H1.ID\nFROM Highschooler H1\nJOIN Friend F ON H1.ID = F.student_id\nJOIN Likes L ON H1.ID = L.student_id\n```", "match": {"match": false, "result": [[1247], [1316], [1501], [1689], [1709], [1782], [1911], [1934]], "gt": [[1101], [1247], [1304], [1468], [1501], [1689], [1709], [1934]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT h.ID\nFROM Highschooler h\nWHERE EXISTS (\n    SELECT 1 \n    FROM Friend f \n    WHERE f.student_id = h.ID\n) \nAND EXISTS (\n    SELECT 1 \n    FROM Likes l \n    WHERE l.student_id = h.ID\n);\n```", "match": {"match": false, "result": [[1247], [1316], [1501], [1689], [1709], [1782], [1911], [1934]], "gt": [[1101], [1247], [1304], [1468], [1501], [1689], [1709], [1934]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT h.name\nFROM Highschooler h\nWHERE h.ID IN (\n    SELECT f.student_id\n    FROM Friend f\n) AND h.ID IN (\n    SELECT l.student_id\n    FROM Likes l\n);\n```", "match": {"match": false, "result": [["Alexis"], ["Austin"], ["Jessica"], ["Gabriel"], ["Cassandra"], ["Andrew"], ["Gabriel"], ["Kyle"]], "gt": [["Alexis"], ["Cassandra"], ["Gabriel"], ["Haley"], ["Jessica"], ["Jordan"], ["Kris"], ["Kyle"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT h.name\nFROM Highschooler h\nWHERE h.ID IN (\n    SELECT f.student_id\n    FROM Friend f\n    UNION\n    SELECT l.student_id\n    FROM Likes l\n) AND h.ID IN (\n    SELECT f.friend_id\n    FROM Friend f\n    UNION\n    SELECT l.liked_id\n    FROM Likes l\n);\n```", "match": {"match": false, "result": [["John"], ["Haley"], ["Alexis"], ["Jordan"], ["Austin"], ["Tiffany"], ["Kris"], ["Jessica"], ["Brittany"], ["Logan"], ["Gabriel"], ["Cassandra"], ["Andrew"], ["Gabriel"], ["Kyle"]], "gt": [["Alexis"], ["Cassandra"], ["Gabriel"], ["Haley"], ["Jessica"], ["Jordan"], ["Kris"], ["Kyle"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT student_id, COUNT(liked_id) AS num_likes FROM Likes GROUP BY student_id", "match": {"match": true, "result": [[1025, 1], [1247, 1], [1316, 1], [1501, 1], [1641, 1], [1689, 1], [1709, 1], [1782, 1], [1911, 1], [1934, 1]]}}
{"result": "SELECT student_id, COUNT(liked_id) AS likes_count FROM Likes GROUP BY student_id", "match": {"match": true, "result": [[1025, 1], [1247, 1], [1316, 1], [1501, 1], [1641, 1], [1689, 1], [1709, 1], [1782, 1], [1911, 1], [1934, 1]]}}
{"result": "```sql\nSELECT H.name, COUNT(L.liked_id) AS likes_count\nFROM Highschooler H\nJOIN Likes L ON H.ID = L.student_id\nGROUP BY H.ID, H.name;\n```", "match": {"match": true, "result": [["John", 1], ["Alexis", 1], ["Austin", 1], ["Jessica", 1], ["Brittany", 1], ["Gabriel", 1], ["Cassandra", 1], ["Andrew", 1], ["Gabriel", 1], ["Kyle", 1]]}}
{"result": "SELECT H.name, COUNT(L.liked_id) AS likes_count \nFROM Highschooler H \nJOIN Likes L ON H.ID = L.student_id\nGROUP BY H.ID, H.name", "match": {"match": true, "result": [["John", 1], ["Alexis", 1], ["Austin", 1], ["Jessica", 1], ["Brittany", 1], ["Gabriel", 1], ["Cassandra", 1], ["Andrew", 1], ["Gabriel", 1], ["Kyle", 1]]}}
{"result": "```sql\nSELECT h.name\nFROM Highschooler h\nJOIN Likes l ON h.ID = l.student_id\nGROUP BY h.ID, h.name\nORDER BY COUNT(l.liked_id) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [["John"]]}}
{"result": "```sql\nSELECT H.name\nFROM Highschooler H\nJOIN Likes L ON H.ID = L.student_id\nGROUP BY H.ID, H.name\nORDER BY COUNT(L.liked_id) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [["John"]]}}
{"result": "```sql\nSELECT h.name\nFROM Highschooler h\nJOIN Likes l ON h.ID = l.student_id\nGROUP BY h.ID, h.name\nHAVING COUNT(l.liked_id) >= 2;\n```", "match": {"match": true, "result": []}}
{"result": "```sql\nSELECT H.name\nFROM Highschooler H\nJOIN Likes L ON H.ID = L.student_id\nGROUP BY H.ID, H.name\nHAVING COUNT(L.liked_id) >= 2;\n```", "match": {"match": true, "result": []}}
{"result": "```sql\nSELECT h.name\nFROM Highschooler h\nWHERE h.grade > 5\nGROUP BY h.ID, h.name\nHAVING COUNT(f.student_id) >= 2;\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: f.student_id"}}
{"result": "```sql\nSELECT H.name\nFROM Highschooler H\nJOIN Friend F ON H.ID = F.student_id\nGROUP BY H.ID, H.name\nHAVING H.grade > 5 AND COUNT(F.friend_id) >= 2;\n```", "match": {"match": true, "result": [["Alexis"], ["Kris"], ["Jordan"], ["Gabriel"], ["Andrew"]]}}
{"result": "SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(*) \nFROM Likes \nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT AVG(grade) \nFROM Highschooler \nWHERE ID IN (\n    SELECT student_id \n    FROM Friend\n    UNION\n    SELECT friend_id \n    FROM Friend\n)", "match": {"match": false, "result": [[10.5]], "gt": [[10.428571428571429]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT AVG(h.grade) AS average_grade\nFROM Highschooler h\nJOIN Friend f ON h.ID = f.student_id\nGROUP BY f.student_id;\n```", "match": {"match": false, "result": [[10.0], [11.0], [12.0], [11.0], [9.0], [10.0], [11.0], [9.0], [12.0], [9.0], [9.0], [10.0], [11.0], [12.0]], "gt": [[10.428571428571429]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT MIN(h.grade)\nFROM Highschooler h\nLEFT JOIN Friend f ON h.ID = f.student_id\nWHERE f.student_id IS NULL;\n```", "match": {"match": true, "result": [[10]]}}
{"result": "```sql\nSELECT MIN(grade) \nFROM Highschooler \nWHERE ID NOT IN (SELECT student_id FROM Friend);\n```", "match": {"match": true, "result": [[10]]}}
{"result": "```sql\nSELECT o.state\nFROM Owners o\nJOIN Professionals p ON SUBSTRING_INDEX(o.state, ' ', 1) = SUBSTRING_INDEX(p.state, ' ', 1)\nGROUP BY o.state;\n```", "match": {"match": false, "error": "Query execution failed with error: no such function: SUBSTRING_INDEX"}}
{"result": "```sql\nSELECT DISTINCT o.state\nFROM Owners o\nJOIN Professionals p ON o.state = p.state\n```", "match": {"match": false, "result": [["Wisconsin"], ["Indiana"], ["Mississippi"]], "gt": [["Indiana"], ["Mississippi"], ["Wisconsin"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT AVG(DATEDIFF(CURRENT_DATE, dob)) AS average_age\nFROM Dogs d\nJOIN Treatments t ON d.dog_id = t.dog_id;\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: dob"}}
{"result": "```sql\nSELECT AVG(DATEDIFF(CURRENT_DATE, date_of_birth)) AS average_age\nFROM Dogs D\nJOIN Treatments T ON D.dog_id = T.dog_id;\n```", "match": {"match": false, "error": "Query execution failed with error: no such function: DATEDIFF"}}
{"result": "```sql\nSELECT p.professional_id, p.last_name, p.cell_number\nFROM Professionals p\nWHERE p.state = 'Indiana'\nUNION\nSELECT p.professional_id, p.last_name, p.cell_number\nFROM Treatments t\nGROUP BY t.professional_id\nHAVING COUNT(t.treatment_id) > 2;\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: p.professional_id"}}
{"result": "```sql\nSELECT p.professional_id, p.last_name, p.cell_number\nFROM Professionals p\nWHERE p.state = 'Indiana'\nUNION\nSELECT p.professional_id, p.last_name, p.cell_number\nFROM Treatments t\nJOIN Professionals p ON t.professional_id = p.professional_id\nGROUP BY p.professional_id, p.last_name, p.cell_number\nHAVING COUNT(t.treatment_id) > 2;\n```", "match": {"match": true, "result": [[1, "Braun", "(275)939-2435x80863"], [8, "Hyatt", "328.842.3792"], [9, "Kshlerin", "962-983-8109x3509"]]}}
{"result": "```sql\nSELECT d.name\nFROM Dogs d\nJOIN Treatments t ON d.dog_id = t.dog_id\nGROUP BY d.name\nHAVING SUM(t.cost_of_treatment) <= 1000;\n```", "match": {"match": false, "result": [["Hipolito"], ["Holden"], ["Houston"], ["Jesus"], ["Kacey"], ["Narciso"]], "gt": [["Kacey"], ["Hipolito"], ["Mavis"], ["Houston"], ["Jeffrey"], ["Merritt"], ["Narciso"], ["George"], ["Bessie"], ["Betty"], ["Holden"], ["Jesus"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT d.name\nFROM Dogs d\nJOIN (\n    SELECT dog_id\n    FROM Treatments\n    GROUP BY dog_id\n    HAVING SUM(cost_of_treatment) <= 1000\n) t ON d.dog_id = t.dog_id;\n```", "match": {"match": false, "result": [["Kacey"], ["Hipolito"], ["Houston"], ["Narciso"], ["Holden"], ["Jesus"]], "gt": [["Kacey"], ["Hipolito"], ["Mavis"], ["Houston"], ["Jeffrey"], ["Merritt"], ["Narciso"], ["George"], ["Bessie"], ["Betty"], ["Holden"], ["Jesus"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT \n    CASE \n        WHEN first_name IN (SELECT first_name FROM Owners) \n            THEN first_name \n        WHEN first_name IN (SELECT first_name FROM Professionals) \n            THEN first_name \n    END AS first_name\nFROM \n    (SELECT first_name FROM Owners \n     UNION \n     SELECT first_name FROM Professionals) AS names\nWHERE \n    first_name NOT IN (SELECT name FROM Dogs);\n```", "match": {"match": true, "result": [["Adelle"], ["Brady"], ["Cindy"], ["Danny"], ["Domenica"], ["Emelie"], ["Ericka"], ["Gay"], ["Heather"], ["Jaclyn"], ["Jayson"], ["Johann"], ["Kade"], ["Karley"], ["Lesly"], ["Lorenz"], ["Melisa"], ["Monte"], ["Nora"], ["Olaf"], ["Orlando"], ["Rachelle"], ["Rolando"], ["Ruben"], ["Sigurd"], ["Taryn"], ["Tre"], ["Velva"], ["Vernice"], ["Winfield"]]}}
{"result": "```sql\nSELECT first_name \nFROM Owners \nUNION \nSELECT first_name \nFROM Professionals \nEXCEPT \nSELECT name \nFROM Dogs;\n```", "match": {"match": true, "result": [["Adelle"], ["Brady"], ["Cindy"], ["Danny"], ["Domenica"], ["Emelie"], ["Ericka"], ["Gay"], ["Heather"], ["Jaclyn"], ["Jayson"], ["Johann"], ["Kade"], ["Karley"], ["Lesly"], ["Lorenz"], ["Melisa"], ["Monte"], ["Nora"], ["Olaf"], ["Orlando"], ["Rachelle"], ["Rolando"], ["Ruben"], ["Sigurd"], ["Taryn"], ["Tre"], ["Velva"], ["Vernice"], ["Winfield"]]}}
{"result": "```sql\nSELECT professional_id, role_code, email_address\nFROM Professionals\nWHERE professional_id NOT IN (\n    SELECT professional_id\n    FROM Treatments\n);\n```", "match": {"match": true, "result": [[1, "Employee", "deanna.schuster@example.com"], [2, "Employee", "lucile.shanahan@example.org"], [3, "Employee", "uboehm@example.org"], [11, "Employee", "west.eula@example.net"], [12, "Veterenarian", "marquardt.furman@example.org"], [13, "Veterenarian", "delphine29@example.com"], [15, "Employee", "jeichmann@example.com"]]}}
{"result": "```sql\nSELECT professional_id, role_code, email_address\nFROM Professionals\nWHERE professional_id NOT IN (\n    SELECT professional_id\n    FROM Treatments\n);\n```", "match": {"match": true, "result": [[1, "Employee", "deanna.schuster@example.com"], [2, "Employee", "lucile.shanahan@example.org"], [3, "Employee", "uboehm@example.org"], [11, "Employee", "west.eula@example.net"], [12, "Veterenarian", "marquardt.furman@example.org"], [13, "Veterenarian", "delphine29@example.com"], [15, "Employee", "jeichmann@example.com"]]}}
{"result": "```sql\nSELECT o.owner_id, o.first_name, o.last_name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nGROUP BY o.owner_id, o.first_name, o.last_name\nORDER BY COUNT(d.dog_id) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [[14, "Rachelle", "Funk"]]}}
{"result": "```sql\nSELECT o.owner_id, o.first_name, o.last_name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nGROUP BY o.owner_id, o.first_name, o.last_name\nORDER BY COUNT(d.dog_id) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [[14, "Rachelle", "Funk"]]}}
{"result": "```sql\nSELECT t.professional_id, p.role_code, p.first_name\nFROM Treatments t\nJOIN Professionals p ON t.professional_id = p.professional_id\nGROUP BY t.professional_id, p.role_code, p.first_name\nHAVING COUNT(t.treatment_id) >= 2;\n```", "match": {"match": true, "result": [[4, "Veterenarian", "Vernice"], [6, "Veterenarian", "Ruben"], [8, "Employee", "Karley"], [9, "Veterenarian", "Monte"], [10, "Employee", "Domenica"], [14, "Employee", "Sigurd"]]}}
{"result": "```sql\nSELECT t.professional_id, p.role_code, p.first_name\nFROM Treatments t\nJOIN Professionals p ON t.professional_id = p.professional_id\nGROUP BY t.professional_id, p.role_code, p.first_name\nHAVING COUNT(t.treatment_id) >= 2;\n```", "match": {"match": true, "result": [[4, "Veterenarian", "Vernice"], [6, "Veterenarian", "Ruben"], [8, "Employee", "Karley"], [9, "Veterenarian", "Monte"], [10, "Employee", "Domenica"], [14, "Employee", "Sigurd"]]}}
{"result": "```sql\nSELECT breed_name\nFROM Breeds\nWHERE breed_code = (\n    SELECT breed_code\n    FROM Dogs\n    GROUP BY breed_code\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n);\n```", "match": {"match": true, "result": [["Bulldog"]]}}
{"result": "```sql\nSELECT b.breed_name\nFROM Breeds b\nJOIN Dogs d ON b.breed_code = d.breed_code\nGROUP BY b.breed_code, b.breed_name\nORDER BY COUNT(d.dog_id) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [["Bulldog"]]}}
{"result": "```sql\nSELECT o.owner_id, o.last_name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nJOIN Treatments t ON d.dog_id = t.dog_id\nGROUP BY o.owner_id, o.last_name\nORDER BY SUM(t.cost_of_treatment) DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [[3, "Stoltenberg"]], "gt": [[14, "Funk"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT owner_id, last_name\nFROM Owners\nWHERE owner_id = (\n    SELECT owner_id\n    FROM (\n        SELECT dog_id, SUM(cost_of_treatment) AS total_spent\n        FROM Treatments\n        GROUP BY dog_id\n    ) AS SubTreatments\n    JOIN Dogs ON SubTreatments.dog_id = Dogs.dog_id\n    GROUP BY owner_id\n    ORDER BY SUM(total_spent) DESC\n    LIMIT 1\n);\n```", "match": {"match": false, "result": [[3, "Stoltenberg"]], "gt": [[14, "Funk"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT tt.treatment_type_description\nFROM Treatment_Types tt\nJOIN Treatments t ON tt.treatment_type_code = t.treatment_type_code\nGROUP BY tt.treatment_type_description\nORDER BY SUM(t.cost_of_treatment) ASC\nLIMIT 1;\n```", "match": {"match": true, "result": [["Take for a Walk"]]}}
{"result": "```sql\nSELECT tt.treatment_type_description\nFROM Treatments t\nJOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code\nGROUP BY tt.treatment_type_code, tt.treatment_type_description\nORDER BY SUM(t.cost_of_treatment) ASC\nLIMIT 1;\n```", "match": {"match": true, "result": [["Take for a Walk"]]}}
{"result": "```sql\nSELECT o.owner_id, o.zip_code\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nJOIN Treatments t ON d.dog_id = t.dog_id\nGROUP BY o.owner_id, o.zip_code\nORDER BY SUM(t.cost_of_treatment) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [[3, "02647"]]}}
{"result": "```sql\nSELECT o.owner_id, o.zip_code\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nJOIN Treatments t ON d.dog_id = t.dog_id\nGROUP BY o.owner_id, o.zip_code\nORDER BY SUM(t.cost_of_treatment) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [[3, "02647"]]}}
{"result": "```sql\nSELECT t.professional_id, p.cell_number\nFROM Treatments t\nJOIN Professionals p ON t.professional_id = p.professional_id\nGROUP BY t.professional_id, p.cell_number\nHAVING COUNT(DISTINCT t.treatment_type_code) >= 2;\n```", "match": {"match": false, "result": [[6, "139-321-7313"], [9, "962-983-8109x3509"], [10, "461-801-2600"], [14, "1-185-137-1945x409"]], "gt": [[4, "00230569697"], [6, "139-321-7313"], [8, "328.842.3792"], [9, "962-983-8109x3509"], [10, "461-801-2600"], [14, "1-185-137-1945x409"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT p.professional_id, p.cell_number\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nGROUP BY p.professional_id, p.cell_number\nHAVING COUNT(DISTINCT t.treatment_type_code) >= 2;\n```", "match": {"match": false, "result": [[6, "139-321-7313"], [9, "962-983-8109x3509"], [10, "461-801-2600"], [14, "1-185-137-1945x409"]], "gt": [[4, "00230569697"], [6, "139-321-7313"], [8, "328.842.3792"], [9, "962-983-8109x3509"], [10, "461-801-2600"], [14, "1-185-137-1945x409"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT p.first_name, p.last_name\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nWHERE t.cost_of_treatment < (\n    SELECT AVG(cost_of_treatment) \n    FROM Treatments\n);\n```", "match": {"match": false, "result": [["Domenica", "Jacobs"], ["Vernice", "Tillman"], ["Karley", "Hyatt"], ["Vernice", "Tillman"], ["Ruben", "O'Reilly"], ["Domenica", "Jacobs"], ["Monte", "Kshlerin"], ["Monte", "Kshlerin"]], "gt": [["Taryn", "Braun"], ["Jayson", "Ullrich"], ["Olaf", "Watsica"], ["Vernice", "Tillman"], ["Danny", "Considine"], ["Ruben", "O'Reilly"], ["Velva", "Hayes"], ["Karley", "Hyatt"], ["Monte", "Kshlerin"], ["Domenica", "Jacobs"], ["Brady", "Pouros"], ["Winfield", "Christiansen"], ["Ericka", "Murazik"], ["Sigurd", "Frami"], ["Lesly", "Walter"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT p.first_name, p.last_name\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nWHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)\n```", "match": {"match": false, "result": [["Domenica", "Jacobs"], ["Vernice", "Tillman"], ["Karley", "Hyatt"], ["Vernice", "Tillman"], ["Ruben", "O'Reilly"], ["Domenica", "Jacobs"], ["Monte", "Kshlerin"], ["Monte", "Kshlerin"]], "gt": [["Taryn", "Braun"], ["Jayson", "Ullrich"], ["Olaf", "Watsica"], ["Vernice", "Tillman"], ["Danny", "Considine"], ["Ruben", "O'Reilly"], ["Velva", "Hayes"], ["Karley", "Hyatt"], ["Monte", "Kshlerin"], ["Domenica", "Jacobs"], ["Brady", "Pouros"], ["Winfield", "Christiansen"], ["Ericka", "Murazik"], ["Sigurd", "Frami"], ["Lesly", "Walter"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT T.date_of_treatment, P.first_name\nFROM Treatments T\nJOIN Professionals P ON T.professional_id = P.professional_id;\n```", "match": {"match": true, "result": [["2018-03-19 04:39:54", "Monte"], ["2018-03-15 20:25:34", "Domenica"], ["2018-03-08 05:26:23", "Vernice"], ["2018-03-01 04:14:46", "Karley"], ["2018-03-23 13:52:10", "Sigurd"], ["2018-03-11 04:23:15", "Vernice"], ["2018-03-10 11:45:58", "Sigurd"], ["2018-03-24 22:25:58", "Ruben"], ["2018-03-14 19:10:40", "Domenica"], ["2018-02-28 17:09:43", "Velva"], ["2018-03-13 12:22:58", "Danny"], ["2018-03-16 10:27:36", "Monte"], ["2018-02-26 09:08:53", "Karley"], ["2018-03-04 20:33:43", "Monte"], ["2018-03-15 19:10:02", "Ruben"]]}}
{"result": "```sql\nSELECT T.date_of_treatment, P.first_name\nFROM Treatments T\nJOIN Professionals P ON T.professional_id = P.professional_id;\n```", "match": {"match": true, "result": [["2018-03-19 04:39:54", "Monte"], ["2018-03-15 20:25:34", "Domenica"], ["2018-03-08 05:26:23", "Vernice"], ["2018-03-01 04:14:46", "Karley"], ["2018-03-23 13:52:10", "Sigurd"], ["2018-03-11 04:23:15", "Vernice"], ["2018-03-10 11:45:58", "Sigurd"], ["2018-03-24 22:25:58", "Ruben"], ["2018-03-14 19:10:40", "Domenica"], ["2018-02-28 17:09:43", "Velva"], ["2018-03-13 12:22:58", "Danny"], ["2018-03-16 10:27:36", "Monte"], ["2018-02-26 09:08:53", "Karley"], ["2018-03-04 20:33:43", "Monte"], ["2018-03-15 19:10:02", "Ruben"]]}}
{"result": "```sql\nSELECT t.cost_of_treatment, tt.treatment_type_description\nFROM Treatments t\nJOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;\n```", "match": {"match": true, "result": [[567, "Take for a Walk"], [147, "Vaccination"], [429, "Physical examination"], [266, "Vaccination"], [668, "Vaccination"], [313, "Physical examination"], [852, "Physical examination"], [407, "Physical examination"], [139, "Take for a Walk"], [681, "Take for a Walk"], [514, "Vaccination"], [428, "Physical examination"], [945, "Vaccination"], [349, "Take for a Walk"], [656, "Take for a Walk"]]}}
{"result": "```sql\nSELECT \n    T.cost_of_treatment,\n    TT.treatment_type_description\nFROM \n    Treatments T\nJOIN \n    Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code;\n```", "match": {"match": true, "result": [[567, "Take for a Walk"], [147, "Vaccination"], [429, "Physical examination"], [266, "Vaccination"], [668, "Vaccination"], [313, "Physical examination"], [852, "Physical examination"], [407, "Physical examination"], [139, "Take for a Walk"], [681, "Take for a Walk"], [514, "Vaccination"], [428, "Physical examination"], [945, "Vaccination"], [349, "Take for a Walk"], [656, "Take for a Walk"]]}}
{"result": "```sql\nSELECT o.first_name, o.last_name, d.size_code\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id;\n```", "match": {"match": true, "result": [["Jaclyn", "Stoltenberg", "LGE"], ["Gay", "Feil", "LGE"], ["Nora", "Haley", "MED"], ["Rachelle", "Funk", "LGE"], ["Emelie", "Mertz", "MED"], ["Johann", "Fisher", "MED"], ["Jaclyn", "Stoltenberg", "MED"], ["Rachelle", "Funk", "SML"], ["Melisa", "DuBuque", "MED"], ["Kade", "Rippin", "MED"], ["Cindy", "Schmitt", "LGE"], ["Orlando", "Price", "MED"], ["Rolando", "Prohaska", "SML"], ["Rachelle", "Funk", "MED"], ["Lorenz", "Nicolas", "MED"]]}}
{"result": "```sql\nSELECT O.first_name, O.last_name, D.size_code\nFROM Owners O\nJOIN Dogs D ON O.owner_id = D.owner_id;\n```", "match": {"match": true, "result": [["Jaclyn", "Stoltenberg", "LGE"], ["Gay", "Feil", "LGE"], ["Nora", "Haley", "MED"], ["Rachelle", "Funk", "LGE"], ["Emelie", "Mertz", "MED"], ["Johann", "Fisher", "MED"], ["Jaclyn", "Stoltenberg", "MED"], ["Rachelle", "Funk", "SML"], ["Melisa", "DuBuque", "MED"], ["Kade", "Rippin", "MED"], ["Cindy", "Schmitt", "LGE"], ["Orlando", "Price", "MED"], ["Rolando", "Prohaska", "SML"], ["Rachelle", "Funk", "MED"], ["Lorenz", "Nicolas", "MED"]]}}
{"result": "```sql\nSELECT O.first_name AS owner_first_name, D.name AS dog_name\nFROM Owners O\nJOIN Dogs D ON O.owner_id = D.owner_id;\n```", "match": {"match": true, "result": [["Jaclyn", "Kacey"], ["Gay", "Hipolito"], ["Nora", "Mavis"], ["Rachelle", "Houston"], ["Emelie", "Jeffrey"], ["Johann", "Merritt"], ["Jaclyn", "Narciso"], ["Rachelle", "George"], ["Melisa", "Bessie"], ["Kade", "Troy"], ["Cindy", "Betty"], ["Orlando", "Holden"], ["Rolando", "Jesus"], ["Rachelle", "Lyric"], ["Lorenz", "Evangeline"]]}}
{"result": "```sql\nSELECT O.first_name, D.name\nFROM Owners O\nJOIN Dogs D ON O.owner_id = D.owner_id;\n```", "match": {"match": true, "result": [["Jaclyn", "Kacey"], ["Gay", "Hipolito"], ["Nora", "Mavis"], ["Rachelle", "Houston"], ["Emelie", "Jeffrey"], ["Johann", "Merritt"], ["Jaclyn", "Narciso"], ["Rachelle", "George"], ["Melisa", "Bessie"], ["Kade", "Troy"], ["Cindy", "Betty"], ["Orlando", "Holden"], ["Rolando", "Jesus"], ["Rachelle", "Lyric"], ["Lorenz", "Evangeline"]]}}
{"result": "```sql\nSELECT d.name, t.date_of_treatment\nFROM Dogs d\nJOIN Treatments t ON d.dog_id = t.dog_id\nWHERE d.breed_code = (\n    SELECT breed_code\n    FROM Dogs\n    GROUP BY breed_code\n    ORDER BY COUNT(*) ASC\n    LIMIT 1\n);\n```", "match": {"match": true, "result": [["Lyric", "2018-03-19 04:39:54"], ["Houston", "2018-03-15 20:25:34"], ["Lyric", "2018-03-08 05:26:23"], ["Lyric", "2018-03-14 19:10:40"], ["Kacey", "2018-03-15 19:10:02"]]}}
{"result": "```sql\nSELECT d.name, t.date_of_treatment\nFROM Dogs d\nJOIN (\n    SELECT breed_code\n    FROM Breeds\n    ORDER BY breed_code IN ('LCB001', 'LCB002', 'LCB003') DESC, COUNT(*) ASC\n    LIMIT 1\n) r\nON d.breed_code = r.breed_code\nJOIN Treatments t ON d.dog_id = t.dog_id;\n```", "match": {"match": false, "error": "Query execution failed with error: misuse of aggregate: COUNT()"}}
{"result": "SELECT o.first_name, d.name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nWHERE o.state = 'Virginia'", "match": {"match": true, "result": [["Melisa", "Bessie"]]}}
{"result": "```sql\nSELECT O.first_name, D.name\nFROM Owners O\nJOIN Dogs D ON O.owner_id = D.owner_id\nWHERE O.state = 'Virginia';\n```", "match": {"match": true, "result": [["Melisa", "Bessie"]]}}
{"result": "```sql\nSELECT d.date_arrived, d.date_departed\nFROM Dogs d\nJOIN Treatments t ON d.dog_id = t.dog_id;\n```", "match": {"match": false, "result": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "gt": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT d.date_arrived, d.date_departed\nFROM Dogs d\nJOIN Treatments t ON d.dog_id = t.dog_id;\n```", "match": {"match": false, "result": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "gt": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT o.last_name \nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nWHERE d.age = (\n    SELECT MIN(age) \n    FROM Dogs\n)\n```", "match": {"match": false, "result": [["Nicolas"]], "gt": [["Feil"], ["Fisher"], ["Rippin"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT o.last_name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nORDER BY d.date_of_birth DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [["Mertz"]], "gt": [["Feil"], ["Fisher"], ["Rippin"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT email_address\nFROM Professionals\nWHERE state = 'Hawaii' OR state = 'Wisconsin';\n```", "match": {"match": true, "result": [["uboehm@example.org"], ["mekhi.little@example.org"]]}}
{"result": "```sql\nSELECT email_address \nFROM Professionals \nWHERE state = 'Hawaii' OR state = 'Wisconsin';\n```", "match": {"match": true, "result": [["uboehm@example.org"], ["mekhi.little@example.org"]]}}
{"result": "```sql\nSELECT dog_id, date_arrived, date_departed\nFROM Dogs;\n```", "match": {"match": false, "result": [[1, "2017-09-08 20:10:13", "2018-03-25 06:58:44"], [2, "2017-12-22 05:02:02", "2018-03-25 02:11:32"], [3, "2017-06-25 10:14:05", "2018-03-25 10:25:46"], [4, "2017-04-20 00:58:55", "2018-03-24 19:12:22"], [5, "2017-10-25 00:55:34", "2018-03-25 04:50:22"], [6, "2017-04-15 09:25:31", "2018-03-25 13:07:04"], [7, "2017-05-06 08:03:52", "2018-03-25 06:29:10"], [8, "2017-10-16 20:06:21", "2018-03-25 02:47:40"], [9, "2018-01-17 11:44:16", "2018-03-25 06:46:07"], [10, "2017-12-29 06:08:26", "2018-03-25 04:42:14"], [11, "2017-07-25 15:19:07", "2018-03-25 15:05:16"], [12, "2017-10-24 04:45:13", "2018-03-25 14:15:41"], [13, "2018-01-02 03:15:29", "2018-03-25 05:07:47"], [14, "2017-06-18 19:45:38", "2018-03-24 23:48:59"], [15, "2017-12-29 23:24:13", "2018-03-24 19:36:59"]], "gt": [["2017-09-08 20:10:13", "2018-03-25 06:58:44"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-25 10:14:05", "2018-03-25 10:25:46"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-10-25 00:55:34", "2018-03-25 04:50:22"], ["2017-04-15 09:25:31", "2018-03-25 13:07:04"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-10-16 20:06:21", "2018-03-25 02:47:40"], ["2018-01-17 11:44:16", "2018-03-25 06:46:07"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-07-25 15:19:07", "2018-03-25 15:05:16"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT date_arrived, date_departed FROM Dogs", "match": {"match": true, "result": [["2017-09-08 20:10:13", "2018-03-25 06:58:44"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-25 10:14:05", "2018-03-25 10:25:46"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-10-25 00:55:34", "2018-03-25 04:50:22"], ["2017-04-15 09:25:31", "2018-03-25 13:07:04"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-10-16 20:06:21", "2018-03-25 02:47:40"], ["2018-01-17 11:44:16", "2018-03-25 06:46:07"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-07-25 15:19:07", "2018-03-25 15:05:16"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"]]}}
{"result": "```sql\nSELECT COUNT(DISTINCT dog_id) AS number_of_dogs\nFROM Treatments;\n```", "match": {"match": true, "result": [[9]]}}
{"result": "```sql\nSELECT COUNT(DISTINCT dog_id) AS number_of_dogs\nFROM Treatments;\n```", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(DISTINCT professional_id) FROM Treatments", "match": {"match": true, "result": [[8]]}}
{"result": "```sql\nSELECT COUNT(DISTINCT professional_id) AS number_of_professionals\nFROM Treatments;\n```", "match": {"match": true, "result": [[8]]}}
{"result": "```sql\nSELECT p.role_code, p.street, p.city, p.state \nFROM Professionals p \nWHERE p.city LIKE '%West%';\n```", "match": {"match": true, "result": [["Employee", "6915 Oberbrunner Point Suite 491\nGleasonville, LA ", "West Heidi", "Indiana"]]}}
{"result": "```sql\nSELECT role_code, street, city, state \nFROM Professionals \nWHERE city LIKE '%West%';\n```", "match": {"match": true, "result": [["Employee", "6915 Oberbrunner Point Suite 491\nGleasonville, LA ", "West Heidi", "Indiana"]]}}
{"result": "```sql\nSELECT first_name, last_name, email_address \nFROM Owners \nWHERE state LIKE '%North%';\n```", "match": {"match": true, "result": [["Johann", "Fisher", "zboncak.madonna@example.net"], ["Cindy", "Schmitt", "wpfeffer@example.net"]]}}
{"result": "```sql\nSELECT first_name, last_name, email_address \nFROM Owners \nWHERE state LIKE '%North%';\n```", "match": {"match": true, "result": [["Johann", "Fisher", "zboncak.madonna@example.net"], ["Cindy", "Schmitt", "wpfeffer@example.net"]]}}
{"result": "```sql\nSELECT COUNT(*)\nFROM Dogs\nWHERE CAST(REPLACE(age, ',', '') AS DECIMAL(10,2)) < (\n    SELECT AVG(CAST(REPLACE(age, ',', '') AS DECIMAL(10,2)))\n    FROM Dogs\n);\n```", "match": {"match": true, "result": [[9]]}}
{"result": "```sql\nSELECT COUNT(*)\nFROM Dogs\nWHERE CAST(SUBSTR(age, 1, INSTR(age, ' ') - 1) AS INTEGER) < (\n    SELECT AVG(CAST(SUBSTR(age, 1, INSTR(age, ' ') - 1) AS INTEGER))\n    FROM Dogs\n);\n```", "match": {"match": false, "result": [[0]], "gt": [[9]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT MAX(cost_of_treatment) AS most_recent_treatment_cost\nFROM Treatments\nORDER BY date_of_treatment DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [[945]], "gt": [[407]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT cost_of_treatment \nFROM Treatments \nORDER BY date_of_treatment DESC \nLIMIT 1;\n```", "match": {"match": true, "result": [[407]]}}
{"result": "```sql\nSELECT COUNT(*) \nFROM Dogs \nWHERE dog_id NOT IN (SELECT dog_id FROM Treatments);\n```", "match": {"match": true, "result": [[6]]}}
{"result": "```sql\nSELECT COUNT(*) \nFROM Dogs \nWHERE dog_id NOT IN (SELECT dog_id FROM Treatments);\n```", "match": {"match": true, "result": [[6]]}}
{"result": "```sql\nSELECT COUNT(*) \nFROM Owners \nWHERE owner_id NOT IN (SELECT owner_id FROM Dogs);\n```", "match": {"match": true, "result": [[3]]}}
{"result": "```sql\nSELECT COUNT(*) \nFROM Owners \nWHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL);\n```", "match": {"match": false, "result": [[15]], "gt": [[3]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT COUNT(*) \nFROM Professionals \nWHERE professional_id NOT IN (SELECT professional_id FROM Treatments);\n```", "match": {"match": true, "result": [[7]]}}
{"result": "```sql\nSELECT COUNT(*) \nFROM Professionals \nWHERE professional_id NOT IN (SELECT professional_id FROM Treatments);\n```", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1'", "match": {"match": true, "result": [["Kacey", "6", "7.57"], ["Lyric", "4", "4.36"], ["Evangeline", "1", "4.01"]]}}
{"result": "```sql\nSELECT name, age, weight \nFROM Dogs \nWHERE abandoned_yn = '1';\n```", "match": {"match": true, "result": [["Kacey", "6", "7.57"], ["Lyric", "4", "4.36"], ["Evangeline", "1", "4.01"]]}}
{"result": "SELECT AVG(CAST(REPLACE(REPLACE(age, ',', ''), 'years', '') AS DECIMAL(10,2))) AS average_age\nFROM Dogs", "match": {"match": true, "result": [[5.066666666666666]]}}
{"result": "SELECT AVG(age) AS average_age FROM Dogs", "match": {"match": true, "result": [[5.066666666666666]]}}
{"result": "SELECT MAX(age) AS oldest_dog_age FROM Dogs", "match": {"match": true, "result": [["9"]]}}
{"result": "SELECT MAX(date_arrived - date_of_birth) AS age FROM Dogs", "match": {"match": false, "result": [[9]], "gt": [["9"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT charge_type, charge_amount FROM Charges", "match": {"match": true, "result": [["Daily Accommodation", 98], ["Drugs", 322], ["Health Check", 640]]}}
{"result": "SELECT charge_type, charge_amount FROM Charges", "match": {"match": true, "result": [["Daily Accommodation", 98], ["Drugs", 322], ["Health Check", 640]]}}
{"result": "SELECT MAX(charge_amount) AS most_expensive_charge_type_cost\nFROM Charges\nWHERE charge_type = (SELECT charge_type FROM Charges ORDER BY charge_amount DESC LIMIT 1)", "match": {"match": true, "result": [[640]]}}
{"result": "SELECT MAX(`charge_amount`) AS most_expensive_charge\nFROM `Charges`", "match": {"match": true, "result": [[640]]}}
{"result": "SELECT email_address, cell_number, home_phone FROM Professionals", "match": {"match": true, "result": [["deanna.schuster@example.com", "(275)939-2435x80863", "+71(6)2898266914"], ["lucile.shanahan@example.org", "889-940-2676", "+02(1)0259033559"], ["uboehm@example.org", "(369)908-7311x065", "325-155-0801x7005"], ["lourdes.lowe@example.net", "00230569697", "312.216.3352"], ["mekhi.little@example.org", "011.193.9081x3186", "1-609-566-2752x25197"], ["jacynthe.mclaughlin@example.net", "139-321-7313", "+43(5)1132733868"], ["lambert62@example.org", "499-434-0215x1628", "022.529.0550x1319"], ["goyette.roosevelt@example.net", "328.842.3792", "891.475.2256"], ["schneider.kathryne@example.org", "962-983-8109x3509", "320-508-6023"], ["jerrod.bahringer@example.org", "461-801-2600", "(230)338-3342x585"], ["west.eula@example.net", "609-405-2990", "(920)304-4499x59146"], ["marquardt.furman@example.org", "1-181-670-9466", "246-951-0080x76716"], ["delphine29@example.com", "880-659-7577x736", "346.594.3739"], ["cole.margarita@example.org", "1-185-137-1945x409", "971.048.3763x9404"], ["jeichmann@example.com", "1-258-285-4707x8020", "1-138-287-3775"]]}}
{"result": "SELECT first_name, last_name, email_address, home_phone, cell_number FROM Professionals", "match": {"match": false, "result": [["Taryn", "Braun", "deanna.schuster@example.com", "+71(6)2898266914", "(275)939-2435x80863"], ["Jayson", "Ullrich", "lucile.shanahan@example.org", "+02(1)0259033559", "889-940-2676"], ["Olaf", "Watsica", "uboehm@example.org", "325-155-0801x7005", "(369)908-7311x065"], ["Vernice", "Tillman", "lourdes.lowe@example.net", "312.216.3352", "00230569697"], ["Danny", "Considine", "mekhi.little@example.org", "1-609-566-2752x25197", "011.193.9081x3186"], ["Ruben", "O'Reilly", "jacynthe.mclaughlin@example.net", "+43(5)1132733868", "139-321-7313"], ["Velva", "Hayes", "lambert62@example.org", "022.529.0550x1319", "499-434-0215x1628"], ["Karley", "Hyatt", "goyette.roosevelt@example.net", "891.475.2256", "328.842.3792"], ["Monte", "Kshlerin", "schneider.kathryne@example.org", "320-508-6023", "962-983-8109x3509"], ["Domenica", "Jacobs", "jerrod.bahringer@example.org", "(230)338-3342x585", "461-801-2600"], ["Brady", "Pouros", "west.eula@example.net", "(920)304-4499x59146", "609-405-2990"], ["Winfield", "Christiansen", "marquardt.furman@example.org", "246-951-0080x76716", "1-181-670-9466"], ["Ericka", "Murazik", "delphine29@example.com", "346.594.3739", "880-659-7577x736"], ["Sigurd", "Frami", "cole.margarita@example.org", "971.048.3763x9404", "1-185-137-1945x409"], ["Lesly", "Walter", "jeichmann@example.com", "1-138-287-3775", "1-258-285-4707x8020"]], "gt": [["deanna.schuster@example.com", "(275)939-2435x80863", "+71(6)2898266914"], ["lucile.shanahan@example.org", "889-940-2676", "+02(1)0259033559"], ["uboehm@example.org", "(369)908-7311x065", "325-155-0801x7005"], ["lourdes.lowe@example.net", "00230569697", "312.216.3352"], ["mekhi.little@example.org", "011.193.9081x3186", "1-609-566-2752x25197"], ["jacynthe.mclaughlin@example.net", "139-321-7313", "+43(5)1132733868"], ["lambert62@example.org", "499-434-0215x1628", "022.529.0550x1319"], ["goyette.roosevelt@example.net", "328.842.3792", "891.475.2256"], ["schneider.kathryne@example.org", "962-983-8109x3509", "320-508-6023"], ["jerrod.bahringer@example.org", "461-801-2600", "(230)338-3342x585"], ["west.eula@example.net", "609-405-2990", "(920)304-4499x59146"], ["marquardt.furman@example.org", "1-181-670-9466", "246-951-0080x76716"], ["delphine29@example.com", "880-659-7577x736", "346.594.3739"], ["cole.margarita@example.org", "1-185-137-1945x409", "971.048.3763x9404"], ["jeichmann@example.com", "1-258-285-4707x8020", "1-138-287-3775"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT b.breed_name, s.size_description\nFROM Breeds b\nJOIN Dogs d ON b.breed_code = d.breed_code\nJOIN Sizes s ON d.size_code = s.size_code", "match": {"match": false, "result": [["Eskimo", "Large"], ["Bulldog", "Large"], ["Bulldog", "Medium"], ["Husky", "Medium"], ["Eskimo", "Small"], ["Husky", "Small"], ["Eskimo", "Medium"]], "gt": [["ESK", "LGE"], ["BUL", "LGE"], ["BUL", "MED"], ["HUS", "MED"], ["ESK", "SML"], ["HUS", "SML"], ["ESK", "MED"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT DISTINCT d.breed_code, d.size_code\nFROM Dogs d;\n```", "match": {"match": true, "result": [["ESK", "LGE"], ["BUL", "LGE"], ["BUL", "MED"], ["HUS", "MED"], ["ESK", "SML"], ["HUS", "SML"], ["ESK", "MED"]]}}
{"result": "```sql\nSELECT p.first_name, tt.treatment_type_description\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nJOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;\n```", "match": {"match": false, "result": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Vernice", "Physical examination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Karley", "Vaccination"], ["Monte", "Take for a Walk"], ["Ruben", "Take for a Walk"]], "gt": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Ruben", "Take for a Walk"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT p.first_name, tt.treatment_type_description\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nJOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;\n```", "match": {"match": false, "result": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Vernice", "Physical examination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Karley", "Vaccination"], ["Monte", "Take for a Walk"], ["Ruben", "Take for a Walk"]], "gt": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Ruben", "Take for a Walk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) FROM singer", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT COUNT(*) FROM singer", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "match": {"match": true, "result": [["Abigail Johnson"], ["Susanne Klatten"], ["Gina Rinehart"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Alice Walton"], ["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "match": {"match": true, "result": [["Abigail Johnson"], ["Susanne Klatten"], ["Gina Rinehart"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Alice Walton"], ["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT Birth_Year, Citizenship FROM singer", "match": {"match": true, "result": [[1944.0, "France"], [1948.0, "United States"], [1949.0, "United States"], [1942.0, "Chile"], [1940.0, "United States"], [1953.0, "Australia"], [1962.0, "Germany"], [1961.0, "United States"]]}}
{"result": "SELECT Birth_Year, Citizenship FROM singer", "match": {"match": true, "result": [[1944.0, "France"], [1948.0, "United States"], [1949.0, "United States"], [1942.0, "Chile"], [1940.0, "United States"], [1953.0, "Australia"], [1962.0, "Germany"], [1961.0, "United States"]]}}
{"result": "SELECT Name FROM singer WHERE Citizenship != 'France'", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]]}}
{"result": "SELECT Name FROM singer WHERE Citizenship != 'French'", "match": {"match": false, "result": [["Liliane Bettencourt"], ["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]], "gt": [["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);\n```", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"]]}}
{"result": "SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949)", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"]]}}
{"result": "SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer)", "match": {"match": true, "result": [["Liliane Bettencourt"]]}}
{"result": "SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer)", "match": {"match": true, "result": [["Liliane Bettencourt"]]}}
{"result": "SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship", "match": {"match": true, "result": [["Australia", 1], ["Chile", 1], ["France", 1], ["Germany", 1], ["United States", 4]]}}
{"result": "SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship", "match": {"match": true, "result": [["Australia", 1], ["Chile", 1], ["France", 1], ["Germany", 1], ["United States", 4]]}}
{"result": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1", "match": {"match": true, "result": [["United States"]]}}
{"result": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1", "match": {"match": true, "result": [["United States"]]}}
{"result": "SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "match": {"match": true, "result": [["Australia", 17.0], ["Chile", 17.4], ["France", 30.0], ["Germany", 14.3], ["United States", 28.8]]}}
{"result": "SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "match": {"match": true, "result": [["Australia", 17.0], ["Chile", 17.4], ["France", 30.0], ["Germany", 14.3], ["United States", 28.8]]}}
{"result": "SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID", "match": {"match": true, "result": [["Do They Know It's Christmas", "Liliane Bettencourt"], ["F**k It (I Don't Want You Back)", "Liliane Bettencourt"], ["Cha Cha Slide", "Christy Walton"], ["Call on Me", "Iris Fontbona"], ["Yeah", "Christy Walton"], ["All This Time", "Gina Rinehart"], ["Left Outside Alone", "Jacqueline Mars"], ["Mysterious Girl", "Susanne Klatten"]]}}
{"result": "SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID", "match": {"match": true, "result": [["Do They Know It's Christmas", "Liliane Bettencourt"], ["F**k It (I Don't Want You Back)", "Liliane Bettencourt"], ["Cha Cha Slide", "Christy Walton"], ["Call on Me", "Iris Fontbona"], ["Yeah", "Christy Walton"], ["All This Time", "Gina Rinehart"], ["Left Outside Alone", "Jacqueline Mars"], ["Mysterious Girl", "Susanne Klatten"]]}}
{"result": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000", "match": {"match": true, "result": [["Liliane Bettencourt"], ["Christy Walton"], ["Iris Fontbona"]]}}
{"result": "```sql\nSELECT DISTINCT s.Name \nFROM singer s\nJOIN song sg ON s.Singer_ID = sg.Singer_ID\nWHERE sg.Sales > 300000;\n```", "match": {"match": true, "result": [["Liliane Bettencourt"], ["Christy Walton"], ["Iris Fontbona"]]}}
{"result": "```sql\nSELECT s.Name\nFROM singer s\nJOIN song sg ON s.Singer_ID = sg.Singer_ID\nGROUP BY s.Name\nHAVING COUNT(sg.Song_ID) > 1;\n```", "match": {"match": true, "result": [["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "```sql\nSELECT s.Name\nFROM singer s\nJOIN song sg ON s.Singer_ID = sg.Singer_ID\nGROUP BY s.Name\nHAVING COUNT(sg.Song_ID) > 1;\n```", "match": {"match": true, "result": [["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT T2.Name, SUM(T1.Sales) AS Total_Sales\nFROM song AS T1\nJOIN singer AS T2\nON T1.Singer_ID = T2.Singer_ID\nGROUP BY T2.Singer_ID", "match": {"match": false, "result": [["Liliane Bettencourt", 1646407.0], ["Christy Walton", 651421.0], ["Iris Fontbona", 335000.0], ["Jacqueline Mars", 275000.0], ["Gina Rinehart", 292000.0], ["Susanne Klatten", 261000.0]], "gt": [["Christy Walton", 651421.0], ["Gina Rinehart", 292000.0], ["Iris Fontbona", 335000.0], ["Jacqueline Mars", 275000.0], ["Liliane Bettencourt", 1646407.0], ["Susanne Klatten", 261000.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.Name, SUM(song.Sales) AS Total_Sales\nFROM singer s\nJOIN song ON s.Singer_ID = song.Singer_ID\nGROUP BY s.Name", "match": {"match": true, "result": [["Christy Walton", 651421.0], ["Gina Rinehart", 292000.0], ["Iris Fontbona", 335000.0], ["Jacqueline Mars", 275000.0], ["Liliane Bettencourt", 1646407.0], ["Susanne Klatten", 261000.0]]}}
{"result": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "match": {"match": true, "result": [["Alice Walton"], ["Abigail Johnson"]]}}
{"result": "SELECT Name AS sname FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "match": {"match": true, "result": [["Alice Walton"], ["Abigail Johnson"]]}}
{"result": "```sql\nSELECT Citizenship \nFROM singer \nWHERE Birth_Year < 1945 \n   OR Birth_Year > 1955\nGROUP BY Citizenship;\n```", "match": {"match": false, "result": [["Chile"], ["France"], ["Germany"], ["United States"]], "gt": [["United States"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT Citizenship \nFROM singer \nWHERE Birth_Year < 1945 \nINTERSECT \nSELECT Citizenship \nFROM singer \nWHERE Birth_Year > 1955;\n```", "match": {"match": true, "result": [["United States"]]}}
{"result": "SELECT COUNT(*) AS total_features \nFROM Other_Available_Features", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T1.feature_name = 'AirCon'", "match": {"match": true, "result": [["Amenity, eg Pool."]]}}
{"result": "```sql\nSELECT RPT.property_type_description\nFROM Properties P\nJOIN Ref_Property_Types RPT ON P.property_type_code = RPT.property_type_code;\n```", "match": {"match": false, "result": [["House, Bungalow, etc."], ["House, Bungalow, etc."], ["Other, to be determined."], ["Field, Meadow."], ["Apartment, Flat, Condo, etc."], ["Shop, Retail Outlet."], ["Shop, Retail Outlet."], ["Apartment, Flat, Condo, etc."], ["Apartment, Flat, Condo, etc."], ["Apartment, Flat, Condo, etc."], ["Other, to be determined."], ["Apartment, Flat, Condo, etc."], ["Other, to be determined."], ["Other, to be determined."], ["Apartment, Flat, Condo, etc."]], "gt": [["Apartment, Flat, Condo, etc."], ["Field, Meadow."], ["House, Bungalow, etc."], ["Other, to be determined."], ["Shop, Retail Outlet."]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT property_name \nFROM Properties \nWHERE (property_type_code = 'APT' OR property_type_code = 'HSE') AND room_count > 1;\n```", "match": {"match": false, "result": [], "gt": [["longacre"], ["parc coliseum"], ["parc east"], ["park"], ["renoir"], ["ten tower"], ["the cole"], ["vogue"]], "error": "Query result does not match ground truth."}}

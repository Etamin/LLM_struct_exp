
{"result": "```python\nimport itertools\nfrom random import shuffle\n\ndef task_func(numbers=list(range(1, 3))):\n    perms = list(itertools.permutations(numbers))\n    total_sum = 0\n    for perm in perms:\n        perm_list = list(perm)\n        shuffle(perm_list)\n        diff_sum = sum(abs(perm_list[i] - perm_list[i+1]) for i in range(len(perm_list)-1))\n        total_sum += diff_sum\n    return total_sum / len(perms) if perms else 0.0\n```", "match": {"category": "timeout", "error": "Test execution timed out after 10 seconds"}}
{"result": "```python\nimport collections\nimport random\nimport string\ndef task_func(length=100):\n    if length < 0:\n        raise ValueError(\"Length must be non-negative\")\n    generated_str = ''.join(random.choices(string.ascii_letters, k=length))\n    return dict(collections.Counter(generated_str))\n```", "match": {"category": "success"}}
{"result": "```python\nimport random\nimport statistics\ndef task_func(LETTERS):\n    d = {letter: [random.randint(1, 100) for _ in range(random.randint(3, 7))] for letter in LETTERS}\n    sorted_d = dict(sorted(d.items(), key=lambda item: statistics.mean(item[1]), reverse=True))\n    return sorted_d\n```", "match": {"category": "success"}}
{"result": "```python\nimport random\nimport numpy as np\ndef task_func(LETTERS):\n    result = {}\n    for letter in LETTERS:\n        lst = [random.randint(0, 100) for _ in range(random.randint(1, 10))]\n        result[letter] = np.mean(lst)\n    return result\n```", "match": {"category": "success"}}
{"result": "```python\nfrom collections import Counter\nimport itertools\ndef task_func(d):\n    return dict(Counter(itertools.chain.from_iterable(d.values())))\n```", "match": {"category": "success"}}
{"result": "```python\nimport random\nimport math\ndef task_func(LETTERS=[chr(i) for i in range(97, 123)]):\n    data = {}\n    for letter in LETTERS:\n        length = random.randint(1, 10)\n        values = [random.randint(0, 100) for _ in range(length)]\n        data[letter] = values\n\n    def pop_std(arr):\n        if not arr:\n            return 0\n        mean = sum(arr) / len(arr)\n        variance = sum((x - mean) ** 2 for x in arr) / len(arr)\n        return math.sqrt(variance)\n\n    result = {k: pop_std(v) for k, v in data.items()}\n    return result\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport re\ndef task_func(pattern, log_dir='/var/log/'):\n    try:\n        files = os.listdir(log_dir)\n    except FileNotFoundError:\n        return None\n    except PermissionError:\n        return None\n\n    regex = re.compile(pattern)\n    matched_files = [f for f in files if regex.search(f) and os.path.isfile(os.path.join(log_dir, f))]\n\n    if not matched_files:\n        return None\n\n    latest_file = max(matched_files, key=lambda f: os.path.getmtime(os.path.join(log_dir, f)))\n    return os.path.join(log_dir, latest_file)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 22, in test_case_2\nAssertionError: None != '/mock_dir/access.log.1'\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 31, in test_case_3\nAssertionError: None != '/mock_dir/access.log.123'\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 48, in test_case_5\nAssertionError: None != '/var/log/access.log.999'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.006s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport csv\nimport collections\nimport operator\ndef task_func(csv_file_path):\n    sales = collections.defaultdict(int)\n    with open(csv_file_path, newline='', encoding='utf-8') as csvfile:\n        reader = csv.DictReader(csvfile)\n        for row in reader:\n            product = row.get('product')\n            quantity = row.get('quantity')\n            if product is not None and quantity is not None:\n                try:\n                    qty = int(quantity)\n                    sales[product] += qty\n                except ValueError:\n                    continue\n    if not sales:\n        return None\n    top_product = max(sales.items(), key=operator.itemgetter(1))[0]\n    return top_product\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 33, in test_case_4\nAssertionError: ValueError not raised\n\n======================================================================\nFAIL: test_case_7 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 47, in test_case_7\nAssertionError: ValueError not raised\n\n----------------------------------------------------------------------\nRan 7 tests in 0.003s\n\nFAILED (failures=2)"}}
{"result": "```python\nfrom collections import Counter\nimport itertools\nfrom random import randint\ndef task_func(T1, RANGE=100):\n    T1_int = list(map(int, T1))\n    total = sum(T1_int)\n    random_numbers = [randint(0, RANGE) for _ in range(total)]\n    counts = Counter(random_numbers)\n    return counts\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\nSingle tuple with small integers as strings\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 7, in test_case_1\n  File \"<bigcode>\", line 6, in task_func\nTypeError: int() argument must be a string, a bytes-like object or a real number, not 'tuple'\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\nMultiple tuples with small integers as strings\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_case_2\n  File \"<bigcode>\", line 6, in task_func\nTypeError: int() argument must be a string, a bytes-like object or a real number, not 'tuple'\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\nSingle tuple with larger integers as strings\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_case_3\n  File \"<bigcode>\", line 6, in task_func\nTypeError: int() argument must be a string, a bytes-like object or a real number, not 'tuple'\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\nMultiple tuples with mixed small and large integers as strings\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 26, in test_case_4\n  File \"<bigcode>\", line 6, in task_func\nTypeError: int() argument must be a string, a bytes-like object or a real number, not 'tuple'\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\nSingle tuple with repeating integers as strings\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 32, in test_case_5\n  File \"<bigcode>\", line 6, in task_func\nTypeError: int() argument must be a string, a bytes-like object or a real number, not 'tuple'\n\n======================================================================\nERROR: test_range_limit (builtins.TestCases)\nCheck if random numbers respect the RANGE parameter\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 45, in test_range_limit\n  File \"<bigcode>\", line 6, in task_func\nTypeError: int() argument must be a string, a bytes-like object or a real number, not 'tuple'\n\n----------------------------------------------------------------------\nRan 7 tests in 0.002s\n\nFAILED (errors=6)"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(list_of_pairs):\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    fig, ax = plt.subplots()\n    sns.barplot(data=df, x='Category', y='Value', ax=ax)\n    ax.set_title('Category vs Value')\n    return df, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport itertools\nimport random\nimport statistics\ndef task_func(T1, RANGE=100):\n    if not T1:\n        raise statistics.StatisticsError(\"T1 is empty\")\n    int_values = list(map(int, T1))\n    total_size = sum(int_values)\n    if total_size == 0:\n        raise statistics.StatisticsError(\"Sum of integers in T1 is zero\")\n    random_list = [random.randint(0, RANGE) for _ in range(total_size)]\n    mean_val = statistics.mean(random_list)\n    median_val = statistics.median(random_list)\n    mode_val = statistics.mode(random_list)\n    return (float(mean_val), float(median_val), int(mode_val))\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\nTests with small numbers and default range.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 10, in test_case_1\n  File \"<bigcode>\", line 9, in task_func\nTypeError: int() argument must be a string, a bytes-like object or a real number, not 'tuple'\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\nTests with mid-range numbers and default range.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 20, in test_case_2\n  File \"<bigcode>\", line 9, in task_func\nTypeError: int() argument must be a string, a bytes-like object or a real number, not 'tuple'\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\nTests with adjusted range to 50, checks new bounds.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 28, in test_case_3\n  File \"<bigcode>\", line 9, in task_func\nTypeError: int() argument must be a string, a bytes-like object or a real number, not 'tuple'\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\nTests with minimal input of single-digit numbers.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 36, in test_case_4\n  File \"<bigcode>\", line 9, in task_func\nTypeError: int() argument must be a string, a bytes-like object or a real number, not 'tuple'\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\nTests with larger numbers, focusing on correct type checking.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 44, in test_case_5\n  File \"<bigcode>\", line 9, in task_func\nTypeError: int() argument must be a string, a bytes-like object or a real number, not 'tuple'\n\n----------------------------------------------------------------------\nRan 6 tests in 0.005s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport numpy as np\nimport itertools\nimport random\ndef task_func(T1, max_value=100):\n    # Convert string elements to integers\n    int_list = list(map(int, itertools.chain.from_iterable(T1)))\n    total_len = sum(int_list)\n    # Generate random integers list\n    rand_list = [random.randint(0, max_value) for _ in range(total_len)]\n    # Calculate percentiles\n    p25, p50, p75 = np.percentile(rand_list, [25, 50, 75])\n    return (p25, p50, p75)\n```", "match": {"category": "success"}}
{"result": "```python\nimport subprocess\nimport os\nimport json\nfrom datetime import datetime\ndef task_func(script_name='backup.sh', log_file='/home/user/backup_log.json'):\n    if not os.path.isfile(script_name):\n        raise FileNotFoundError(f\"Script file '{script_name}' does not exist.\")\n    start_time = datetime.now()\n    try:\n        result = subprocess.run(['bash', script_name], capture_output=True, text=True)\n        exit_status = result.returncode\n        if exit_status != 0:\n            raise RuntimeError(f\"Script exited with non-zero status {exit_status}: {result.stderr.strip()}\")\n    except Exception as e:\n        end_time = datetime.now()\n        log_data = {\n            'start_time': start_time.strftime('%Y-%m-%d %H:%M:%S'),\n            'end_time': end_time.strftime('%Y-%m-%d %H:%M:%S'),\n            'exit_status': exit_status if 'exit_status' in locals() else -1\n        }\n        with open(log_file, 'w') as f:\n            json.dump(log_data, f)\n        raise e\n    end_time = datetime.now()\n    log_data = {\n        'start_time': start_time.strftime('%Y-%m-%d %H:%M:%S'),\n        'end_time': end_time.strftime('%Y-%m-%d %H:%M:%S'),\n        'exit_status': exit_status\n    }\n    with open(log_file, 'w') as f:\n        json.dump(log_data, f)\n    return log_data\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_custom_values_successful_script (builtins.TestCases)\nTest the function with custom script name and log file with successful execution\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 32, in test_custom_values_successful_script\n  File \"<bigcode>\", line 24, in task_func\n  File \"<bigcode>\", line 14, in task_func\nRuntimeError: Script exited with non-zero status 127: bash: custom_backup.sh: No such file or directory\n\n======================================================================\nERROR: test_default_values_successful_script (builtins.TestCases)\nTest the function with default parameters and successful execution\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 10, in test_default_values_successful_script\n  File \"<bigcode>\", line 24, in task_func\n  File \"<bigcode>\", line 14, in task_func\nRuntimeError: Script exited with non-zero status 127: bash: backup.sh: No such file or directory\n\n======================================================================\nERROR: test_log_data_format (builtins.TestCases)\nTest that the timestamps are in the correct format\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 41, in test_log_data_format\n  File \"<bigcode>\", line 24, in task_func\n  File \"<bigcode>\", line 14, in task_func\nRuntimeError: Script exited with non-zero status 127: bash: backup.sh: No such file or directory\n\n======================================================================\nERROR: test_non_zero_exit_status (builtins.TestCases)\nTest the function with a non-zero exit status\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 49, in test_non_zero_exit_status\n  File \"<bigcode>\", line 24, in task_func\n  File \"<bigcode>\", line 14, in task_func\nRuntimeError: Script exited with non-zero status 127: bash: backup.sh: No such file or directory\n\n======================================================================\nERROR: test_script_execution_failure (builtins.TestCases)\nTest the function raising RuntimeError on script execution failure\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<bigcode>\", line 14, in task_func\nRuntimeError: Script exited with non-zero status 127: bash: backup.sh: No such file or directory\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 24, in test_script_execution_failure\n  File \"<bigcode>\", line 22, in task_func\nFileNotFoundError: [Errno 2] No such file or directory: '/home/user/backup_log.json'\n\n----------------------------------------------------------------------\nRan 6 tests in 0.052s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport subprocess\nimport ftplib\nimport os\n\ndef task_func(ftp_server='ftp.dlptest.com', ftp_user='dlpuser', ftp_password='rNrKYTX9g7z3RgJRmxWuGHbeu', ftp_dir='/ftp/test'):\n    try:\n        ftp = ftplib.FTP(ftp_server, timeout=10)\n    except Exception as e:\n        print(f\"Failed to connect to FTP server {ftp_server}: {str(e)}\")\n        raise\n    try:\n        ftp.login(ftp_user, ftp_password)\n    except Exception as e:\n        print(f\"Failed to log into FTP server {ftp_server} with user {ftp_user}: {str(e)}\")\n        raise\n    try:\n        ftp.cwd(ftp_dir)\n    except Exception as e:\n        print(f\"Failed to change to directory {ftp_dir} on server {ftp_server}: {str(e)}\")\n        raise\n    try:\n        files = ftp.nlst()\n    except Exception:\n        files = []\n    ftp.quit()\n\n    downloaded_files = []\n    for filename in files:\n        # Compose FTP URL: ftp://user:password@server/directory/filename\n        url = f\"ftp://{ftp_user}:{ftp_password}@{ftp_server}{ftp_dir}/{filename}\"\n        try:\n            # Use wget to download the file\n            subprocess.run(['wget', url], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n            downloaded_files.append(filename)\n        except subprocess.CalledProcessError:\n            # If wget fails, skip and do not add filename\n            pass\n    return downloaded_files\n```", "match": {"category": "timeout", "error": "Test execution timed out after 10 seconds"}}
{"result": "```python\nimport configparser\nimport os\nimport shutil\n\ndef task_func(config_file_path, archieve_dir='/home/user/archive'):\n    if not os.path.isfile(config_file_path):\n        raise FileNotFoundError(f\"Config file not found: {config_file_path}\")\n\n    config = configparser.ConfigParser()\n    config.read(config_file_path)\n\n    if 'Project' not in config or 'directory' not in config['Project']:\n        raise Exception(\"Config file missing [Project] section or directory key\")\n\n    project_dir = config['Project']['directory']\n\n    if not os.path.isdir(project_dir):\n        raise FileNotFoundError(f\"Project directory not found: {project_dir}\")\n\n    if not os.path.isdir(archieve_dir):\n        os.makedirs(archieve_dir, exist_ok=True)\n\n    base_name = os.path.basename(os.path.normpath(project_dir))\n    zip_path = os.path.join(archieve_dir, base_name)\n\n    try:\n        shutil.make_archive(zip_path, 'zip', root_dir=project_dir)\n    except Exception as e:\n        raise Exception(f\"Failed to create ZIP archive: {e}\")\n\n    return True\n```", "match": {"category": "success"}}
{"result": "```python\nimport subprocess\nimport csv\nimport os\n\ndef task_func(commands_file_path, output_dir_path):\n    if not os.path.exists(commands_file_path):\n        raise FileNotFoundError(f\"The file {commands_file_path} does not exist.\")\n\n    os.makedirs(output_dir_path, exist_ok=True)\n    output_files = []\n\n    with open(commands_file_path, newline='', encoding='utf-8') as csvfile:\n        reader = csv.reader(csvfile)\n        for idx, row in enumerate(reader):\n            command = row[0].strip() if row else ''\n            output_file_path = os.path.join(output_dir_path, f'command_{idx}_output.txt')\n            output_files.append(output_file_path)\n\n            if not command:\n                with open(output_file_path, 'w', encoding='utf-8') as f:\n                    f.write('No command found in this row.\\n')\n                continue\n\n            try:\n                result = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n                with open(output_file_path, 'w', encoding='utf-8') as f:\n                    f.write(result.stdout)\n            except subprocess.CalledProcessError as e:\n                with open(output_file_path, 'a', encoding='utf-8') as f:\n                    f.write(f\"\\nCommand failed with exit code {e.returncode}.\\n\")\n                    f.write(e.stderr or \"No error message available.\\n\")\n\n    return output_files\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_command_failure_with_specific_exit_code (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 74, in test_command_failure_with_specific_exit_code\nAssertionError: 'Error executing command' not found in '\\nCommand failed with exit code 1.\\nNo error message available.\\n'\n\n----------------------------------------------------------------------\nRan 6 tests in 0.016s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport os\nimport glob\nimport subprocess\ndef task_func(directory, backup_dir='/path/to/backup'):\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    log_files = glob.glob(os.path.join(directory, '*.log'))\n    if not log_files:\n        return 'No logs found to backup'\n    if not os.path.isdir(backup_dir):\n        os.makedirs(backup_dir, exist_ok=True)\n    backup_path = os.path.join(backup_dir, 'logs_backup.tar.gz')\n    # Create tar.gz archive of .log files\n    subprocess.run(['tar', '-czf', backup_path] + log_files, check=True)\n    # Delete original log files\n    for file in log_files:\n        os.remove(file)\n    return backup_path\n```", "match": {"category": "success"}}
{"result": "```python\nimport subprocess\nimport psutil\nimport time\ndef task_func(process_name: str) -> str:\n    # Find processes matching the given name\n    procs = [proc for proc in psutil.process_iter(['name']) if proc.info['name'] == process_name]\n\n    if not procs:\n        # Process not found, start it\n        subprocess.Popen(process_name)\n        return f\"Process not found. Starting {process_name}.\"\n    else:\n        # Process found, terminate all instances\n        for proc in procs:\n            try:\n                proc.terminate()\n            except Exception:\n                pass\n        # Wait for processes to terminate\n        gone, alive = psutil.wait_procs(procs, timeout=5)\n        # Kill any still alive after timeout\n        for proc in alive:\n            try:\n                proc.kill()\n            except Exception:\n                pass\n        time.sleep(0.5)  # Small wait to let OS release resources\n        # Start process again\n        subprocess.Popen(process_name)\n        return f\"Process found. Restarting {process_name}.\"\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_process_found_restarts_process (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 20, in test_process_found_restarts_process\nAssertionError: 'Process not found. Starting notepad.' != 'Process found. Restarting notepad.'\n- Process not found. Starting notepad.\n?         ----       ^\n+ Process found. Restarting notepad.\n?                ^^^\n\n\n======================================================================\nFAIL: test_process_terminates_and_restarts_multiple_instances (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 34, in test_process_terminates_and_restarts_multiple_instances\nAssertionError: 'Process not found. Starting multi_instance.' != 'Process found. Restarting multi_instance.'\n- Process not found. Starting multi_instance.\n?         ----       ^\n+ Process found. Restarting multi_instance.\n?                ^^^\n\n\n----------------------------------------------------------------------\nRan 3 tests in 0.009s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport subprocess\nimport csv\nimport glob\nimport random\nimport os\n\ndef task_func(file):\n    if not os.path.isfile(file):\n        return []\n    if not file.lower().endswith('.csv'):\n        return []\n    try:\n        # Count total lines (excluding header)\n        with open(file, 'r', newline='', encoding='utf-8') as f:\n            reader = csv.reader(f)\n            lines = list(reader)\n        if not lines:\n            return []\n        header, rows = lines[0], lines[1:]\n        total_lines = len(rows)\n        if total_lines == 0:\n            return []\n\n        # Decide split size, for example 1000 lines per split or fewer if total <1000\n        split_size = 1000 if total_lines > 1000 else total_lines\n\n        # Write header only file and then split data rows using split command\n        base_name = os.path.basename(file)\n        temp_data_file = file + \"_data.tmp\"\n        with open(temp_data_file, 'w', newline='', encoding='utf-8') as f:\n            writer = csv.writer(f)\n            writer.writerows(rows)\n\n        # Use split command to split temp_data_file into files with split_size lines each\n        # Naming scheme: split_\n        split_prefix = \"split_\"\n        # Remove old split files matching prefix first\n        for f_path in glob.glob(split_prefix + \"*\"):\n            os.remove(f_path)\n        # split -l split_size temp_data_file split_\n        subprocess.check_call(['split', '-l', str(split_size), temp_data_file, split_prefix])\n\n        # Remove temp data file\n        os.remove(temp_data_file)\n\n        split_files = sorted(glob.glob(split_prefix + '*'))\n\n        result_files = []\n        for sf in split_files:\n            with open(sf, 'r', newline='', encoding='utf-8') as f:\n                reader = csv.reader(f)\n                data_rows = list(reader)\n            random.shuffle(data_rows)\n            # Write header + shuffled rows back\n            with open(sf, 'w', newline='', encoding='utf-8') as f:\n                writer = csv.writer(f)\n                writer.writerow(header)\n                writer.writerows(data_rows)\n            result_files.append(os.path.abspath(sf))\n        return result_files\n\n    except Exception:\n        return []\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport glob\nimport zipfile\ndef task_func(directory):\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    \n    files = [f for f in glob.glob(os.path.join(directory, '*')) if os.path.isfile(f)]\n    if not files:\n        return None\n    \n    zip_path = os.path.join(directory, 'files.zip')\n    with zipfile.ZipFile(zip_path, 'w') as zipf:\n        for file in files:\n            arcname = os.path.basename(file)\n            zipf.write(file, arcname=arcname)\n    return zip_path\n```", "match": {"category": "success"}}
{"result": "```python\nimport ast\nimport pandas as pd\nimport seaborn as sns\n\ndef task_func(csv_file):\n    df = pd.read_csv(csv_file)\n    df['dict_column'] = df['dict_column'].apply(ast.literal_eval)\n    # Flatten the dictionaries into separate columns to visualize with pairplot\n    dict_df = pd.json_normalize(df['dict_column'])\n    combined_df = pd.concat([df.drop(columns=['dict_column']), dict_df], axis=1)\n    ax = sns.pairplot(combined_df)\n    return combined_df, ax\n```", "match": {"category": "timeout", "error": "Test execution timed out after 10 seconds"}}
{"result": "```python\nimport psutil\nimport platform\ndef task_func():\n    os_name = platform.system()\n    architecture = platform.architecture()[0]\n    mem = psutil.virtual_memory()\n    mem_usage_percent = (mem.used / mem.total) * 100\n    return {\n        'OS': os_name,\n        'Architecture': architecture,\n        'Memory Usage': f\"{mem_usage_percent:.2f}%\"\n    }\n```", "match": {"category": "success"}}
{"result": "```python\nimport collections\nfrom itertools import zip_longest\nfrom random import choices\ndef task_func(l1, l2, K=10):\n    combined = []\n    for a, b in zip_longest(l1, l2, fillvalue=None):\n        if a is not None:\n            combined.append(a)\n        if b is not None:\n            combined.append(b)\n    sample = choices(combined, k=K)\n    return collections.Counter(sample)\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nfrom itertools import zip_longest\ndef task_func(l1, l2, THRESHOLD = 0.5):\n    alternated = []\n    min_len = min(len(l1), len(l2))\n    for i in range(min_len):\n        alternated.append(l1[i])\n        alternated.append(l2[i])\n    if len(l1) > min_len:\n        alternated.extend(l1[min_len:])\n    if len(l2) > min_len:\n        alternated.extend(l2[min_len:])\n    arr = np.array(alternated)\n    idx = np.abs(arr - THRESHOLD).argmin()\n    return float(arr[idx])\n```", "match": {"category": "success"}}
{"result": "```python\nimport base64\nimport hashlib\nimport os\ndef task_func(password, SALT_LENGTH = 32):\n    if password is None or password == '':\n        raise ValueError(\"Password must not be None or empty\")\n    salt = os.urandom(SALT_LENGTH)\n    hashed = hashlib.pbkdf2_hmac('sha256', password.encode(), salt, 100000)\n    salt_b64 = base64.b64encode(salt)\n    hashed_b64 = base64.b64encode(hashed)\n    return salt_b64, hashed_b64\n```", "match": {"category": "success"}}
{"result": "```python\nimport base64\nimport json\nimport zlib\ndef task_func(data_dict):\n    json_str = json.dumps(data_dict)\n    compressed = zlib.compress(json_str.encode('utf-8'))\n    encoded = base64.b64encode(compressed).decode('utf-8')\n    return encoded\n```", "match": {"category": "success"}}
{"result": "```python\nimport base64\nfrom cryptography.fernet import Fernet\ndef task_func(message, encryption_key):\n    f = Fernet(encryption_key)\n    encrypted = f.encrypt(message.encode())\n    encoded = base64.b64encode(encrypted).decode()\n    return encoded\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 7, in test_case_1\n  File \"<bigcode>\", line 5, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/cryptography/fernet.py\", line 39, in __init__\n    raise ValueError(\nValueError: Fernet key must be 32 url-safe base64-encoded bytes.\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_case_2\n  File \"<bigcode>\", line 5, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/cryptography/fernet.py\", line 39, in __init__\n    raise ValueError(\nValueError: Fernet key must be 32 url-safe base64-encoded bytes.\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 17, in test_case_3\n  File \"<bigcode>\", line 5, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/cryptography/fernet.py\", line 39, in __init__\n    raise ValueError(\nValueError: Fernet key must be 32 url-safe base64-encoded bytes.\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 23, in test_case_4\n  File \"<bigcode>\", line 5, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/cryptography/fernet.py\", line 39, in __init__\n    raise ValueError(\nValueError: Fernet key must be 32 url-safe base64-encoded bytes.\n\n----------------------------------------------------------------------\nRan 6 tests in 0.001s\n\nFAILED (errors=4)"}}
{"result": "```python\nimport json\nimport base64\nfrom datetime import datetime\ndef task_func(data: dict, DATE_FORMAT = \"%Y-%m-%d %H:%M:%S\") -> str:\n    data_with_timestamp = data.copy()\n    data_with_timestamp['timestamp'] = datetime.now().strftime(DATE_FORMAT)\n    json_str = json.dumps(data_with_timestamp)\n    b64_bytes = base64.b64encode(json_str.encode('ascii'))\n    return b64_bytes.decode('ascii')\n```", "match": {"category": "success"}}
{"result": "```python\nimport requests\nimport json\nimport base64\ndef task_func(data, url=\"http://your-api-url.com\"):\n    json_str = json.dumps(data)\n    b64_encoded = base64.b64encode(json_str.encode('utf-8')).decode('utf-8')\n    payload = {'payload': b64_encoded}\n    response = requests.post(url, json=payload)\n    return response\n```", "match": {"category": "success"}}
{"result": "```python\nfrom sklearn.preprocessing import StandardScaler\nimport numpy as np\nimport base64\ndef task_func(data):\n    scaler = StandardScaler()\n    standardized = scaler.fit_transform(np.array(data))\n    byte_data = standardized.tobytes()\n    b64_encoded = base64.b64encode(byte_data).decode('ascii')\n    return b64_encoded\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_varied_data_sets (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 36, in test_varied_data_sets\nUnicodeDecodeError: 'ascii' codec can't decode byte 0x86 in position 0: ordinal not in range(128)\n\n======================================================================\nFAIL: test_output_is_string_and_valid_base64 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_output_is_string_and_valid_base64\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xf0 in position 6: ordinal not in range(128)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"<string>\", line 16, in test_output_is_string_and_valid_base64\nAssertionError: Decoding base64 failed with error: 'ascii' codec can't decode byte 0xf0 in position 6: ordinal not in range(128)\n\n======================================================================\nFAIL: test_with_mocked_scaler (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_with_mocked_scaler\nAssertionError: '[[0 0]\\n [0 0]\\n [1 1]\\n [1 1]]' not found in '\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n\n----------------------------------------------------------------------\nRan 3 tests in 0.006s\n\nFAILED (failures=2, errors=1)"}}
{"result": "```python\nimport json\nimport os\nimport re\ndef task_func(\n    file_path,\n    attribute,\n    INPUT_JSON={\n        \"type\": \"object\",\n        \"properties\": {\n            \"name\": {\"type\": str},  \n            \"age\": {\"type\": int},   \n            \"email\": {\"type\": str}  \n        },\n        \"required\": [\"name\", \"age\", \"email\"]\n    },\n    EMAIL_REGEX=r\"^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$\"):\n    \n    if not os.path.isfile(file_path):\n        raise ValueError(\"File does not exist\")\n    \n    with open(file_path, \"r\", encoding=\"utf-8\") as f:\n        try:\n            data = json.load(f)\n        except json.JSONDecodeError:\n            raise ValueError(\"File is not valid JSON\")\n    \n    # Check that data is a dict as expected\n    if not isinstance(data, dict):\n        raise ValueError(\"JSON root is not an object\")\n    \n    # Check required keys\n    for key in INPUT_JSON[\"required\"]:\n        if key not in data:\n            raise ValueError(f\"Missing required attribute: {key}\")\n    \n    # Check types\n    for key, prop in INPUT_JSON[\"properties\"].items():\n        expected_type = prop[\"type\"]\n        val = data.get(key)\n        if val is None:\n            continue  # Already checked required above\n        if not isinstance(val, expected_type):\n            raise ValueError(f\"Attribute '{key}' expected type {expected_type.__name__} but got {type(val).__name__}\")\n    \n    # Validate email format\n    email = data.get(\"email\")\n    if email is None or not re.match(EMAIL_REGEX, email.lower()):\n        raise ValueError(\"Invalid email format\")\n    \n    if attribute not in data:\n        raise ValueError(f\"Attribute '{attribute}' not found in JSON data\")\n    \n    return data[attribute]\n```", "match": {"category": "success"}}
{"result": "```python\nimport nltk\nfrom string import punctuation\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Constants\nPUNCTUATION = set(punctuation)\n\ndef task_func(text):\n    words = nltk.word_tokenize(text)\n    filtered_words = []\n    for w in words:\n        if w.startswith('$'):\n            # Check if the word consists entirely of punctuation characters (excluding the leading '$')\n            if len(w) > 1 and not all(ch in PUNCTUATION for ch in w[1:]):\n                filtered_words.append(w)\n    if not filtered_words:\n        return None\n    \n    freq_dist = nltk.FreqDist(filtered_words)\n    plt.figure(figsize=(8, 5))\n    ax = sns.barplot(x=list(freq_dist.keys()), y=list(freq_dist.values()))\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Frequency of words starting with \"$\"')\n    plt.tight_layout()\n    return ax\n```", "match": {"category": "timeout", "error": "Test execution timed out after 10 seconds"}}
{"result": "```python\nimport requests\nfrom bs4 import BeautifulSoup\ndef task_func(url, tag):\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n        soup = BeautifulSoup(response.text, 'html.parser')\n        element = soup.find(tag)\n        if element:\n            return element.get_text(strip=True)\n        return None\n    except Exception:\n        return None\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_empty_tag (builtins.TestCases)\nTest the function with an empty tag content.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 66, in test_empty_tag\nAssertionError: '' is not None\n\n======================================================================\nFAIL: test_invalid_url_handling (builtins.TestCases)\nTest how the function handles an invalid URL.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 36, in test_invalid_url_handling\nAssertionError: RequestException not raised\n\n======================================================================\nFAIL: test_malformed_html (builtins.TestCases)\nTest the function with a malformed HTML input.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 48, in test_malformed_html\nAssertionError: 'This is a test page' is not None\n\n----------------------------------------------------------------------\nRan 7 tests in 0.009s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport numpy as np\nfrom functools import reduce\ndef task_func(list_of_pairs):\n    product = reduce(lambda x, y: x * y, (pair[1] for pair in list_of_pairs), 1)\n    return np.array([product])\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\ndef task_func(text):\n    # Remove URLs\n    text_no_urls = re.sub(r'https?://\\S+|www\\.\\S+', '', text)\n    # Check if there are words left\n    if not re.search(r'\\w', text_no_urls):\n        raise ValueError(\"No words available to generate a word cloud after removing URLs.\")\n    \n    wc = WordCloud().generate(text_no_urls)\n    plt.imshow(wc, interpolation='bilinear')\n    plt.axis(\"off\")\n    plt.show()\n    return wc\n```", "match": {"category": "success"}}
{"result": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef task_func(df, target_values=[1, 3, 4]):\n    df_replaced = df.applymap(lambda x: x if x in target_values else 0)\n    fig, axes = plt.subplots(nrows=1, ncols=len(df.columns), figsize=(5*len(df.columns), 4))\n    if len(df.columns) == 1:\n        axes = [axes]\n    for ax, col in zip(axes, df_replaced.columns):\n        sns.histplot(df_replaced[col], bins=len(set(df_replaced[col])), discrete=True, ax=ax)\n        ax.set_title(col)\n    plt.tight_layout()\n    plt.show()\n    return axes\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 7, in test_case_1\nValueError: not enough values to unpack (expected 2, got 1)\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 17, in test_case_3\nValueError: not enough values to unpack (expected 2, got 1)\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_case_4\nAttributeError: 'Axes' object has no attribute 'isin'\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 31, in test_case_5\nValueError: not enough values to unpack (expected 2, got 1)\n\n======================================================================\nERROR: test_case_7 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 36, in test_case_7\nValueError: not enough values to unpack (expected 2, got 1)\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_case_2\nAssertionError: 0 != 2\n\n----------------------------------------------------------------------\nRan 6 tests in 0.445s\n\nFAILED (failures=1, errors=5)"}}
{"result": "```python\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\nTARGET_VALUES = np.array([1, 3, 4])\ndef task_func(df):\n    df_new = df.copy()\n    # Replace elements not in TARGET_VALUES with 0\n    mask = df_new.isin(TARGET_VALUES)\n    df_new = df_new.where(mask, 0)\n\n    transformed = pd.DataFrame(index=df_new.index)\n    fig, ax = plt.subplots()\n    for col in df_new.columns:\n        col_data = df_new[col]\n        # Check if constant\n        if col_data.nunique() == 1:\n            transformed[col] = col_data.values\n        else:\n            # Add 1 (for zeros) before Box-Cox\n            shifted = col_data + 1\n            # Ensure positive for boxcox\n            transformed_col, _ = stats.boxcox(shifted)\n            transformed[col] = transformed_col\n        # Plot KDE\n        transformed[col].plot.kde(ax=ax, label=str(col))\n    ax.legend()\n    return transformed, fig\n```", "match": {"category": "timeout", "error": "Test execution timed out after 10 seconds"}}
{"result": "```python\nfrom sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef task_func(df, target_column):\n    X = df.drop(columns=[target_column])\n    y = df[target_column]\n    rf = RandomForestClassifier()\n    rf.fit(X, y)\n\n    importances = rf.feature_importances_\n    features = X.columns\n    imp_df = pd.DataFrame({'Feature': features, 'Importance': importances})\n    imp_df = imp_df.sort_values(by='Importance', ascending=False)\n\n    fig, ax = plt.subplots(figsize=(8, max(4, len(features)*0.5)))\n    sns.barplot(x='Importance', y='Feature', data=imp_df, ax=ax, orient='h')\n    ax.set_xlabel('Feature Importance Score')\n    ax.set_ylabel('Features')\n    ax.set_title('Visualizing Important Features')\n    plt.tight_layout()\n\n    return rf, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\n# Constants\nFEATURE_NAMES = [\"Feature 1\", \"Feature 2\", \"Feature 3\", \"Feature 4\", \"Feature 5\"]\n\ndef task_func(data_matrix):\n    scaler = StandardScaler()\n    standardized_data = scaler.fit_transform(data_matrix)\n    df = pd.DataFrame(standardized_data, columns=FEATURE_NAMES)\n    df['Mean'] = df.mean(axis=1)\n    \n    fig, ax = plt.subplots()\n    ax.hist(df['Mean'], bins='auto')\n    ax.set_title('Distribution of Means')\n    ax.set_xlabel('Mean Value')\n    ax.set_ylabel('Frequency')\n    \n    return df, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nfrom scipy.stats import ttest_1samp\nimport matplotlib.pyplot as plt\n# Constants\nALPHA = 0.05\ndef task_func(data_matrix):\n    # Compute mean of each row\n    row_means = data_matrix.mean(axis=1)\n    # Population mean (mean of all values)\n    population_mean = data_matrix.mean()\n    significant_indices = []\n    # Perform t-test for each row against population mean\n    for i, row in enumerate(data_matrix):\n        t_stat, p_value = ttest_1samp(row, population_mean)\n        if p_value < ALPHA:\n            significant_indices.append(i)\n    # Prepare plot\n    fig, ax = plt.subplots()\n    # Plot all row means in red\n    ax.plot(range(len(row_means)), row_means, 'r-', label='Means')\n    # Plot significant means in blue\n    if significant_indices:\n        ax.plot(significant_indices, row_means[significant_indices], 'bo', label='Significant Means')\n    # Plot horizontal line for population mean in green\n    ax.axhline(population_mean, color='g', linestyle='--', label='Population Mean')\n    ax.legend()\n    # Return list of significant indices and axes\n    return significant_indices, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 9, in test_case_2\n  File \"<string>\", line 27, in _validate_function\nAssertionError: 2 != 3\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_case_3\n  File \"<string>\", line 27, in _validate_function\nAssertionError: 2 != 3\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 19, in test_case_4\n  File \"<string>\", line 27, in _validate_function\nAssertionError: 2 != 3\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 22, in test_case_5\n  File \"<string>\", line 27, in _validate_function\nAssertionError: 2 != 3\n\n----------------------------------------------------------------------\nRan 5 tests in 0.084s\n\nFAILED (failures=4)"}}
{"result": "```python\nimport pandas as pd\nimport seaborn as sns\nfrom scipy.stats import zscore\nimport matplotlib.pyplot as plt\n\ndef task_func(data_matrix):\n    # Calculate z-scores per row\n    z_values = data_matrix.apply(zscore, axis=1)\n    # Name columns 'Feature 1', 'Feature 2', ...\n    z_values.columns = [f'Feature {i+1}' for i in range(z_values.shape[1])]\n    # Calculate mean of z-scores per row and add as a new column\n    z_values['Mean'] = z_values.mean(axis=1)\n    # Calculate correlation matrix of the z-values (excluding the 'Mean' column)\n    corr = z_values.drop(columns='Mean').T.corr()\n    # Plot heatmap of the correlation matrix\n    fig, ax = plt.subplots()\n    sns.heatmap(corr, ax=ax, cmap='coolwarm', center=0, square=True)\n    plt.tight_layout()\n    return z_values, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_case_1\n  File \"<bigcode>\", line 9, in task_func\nAttributeError: 'numpy.ndarray' object has no attribute 'apply'\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 18, in test_case_2\n  File \"<bigcode>\", line 9, in task_func\nAttributeError: 'numpy.ndarray' object has no attribute 'apply'\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_case_3\n  File \"<bigcode>\", line 9, in task_func\nAttributeError: 'numpy.ndarray' object has no attribute 'apply'\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 42, in test_case_4\n  File \"<bigcode>\", line 9, in task_func\nAttributeError: 'numpy.ndarray' object has no attribute 'apply'\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 52, in test_case_5\n  File \"<bigcode>\", line 9, in task_func\nAttributeError: 'numpy.ndarray' object has no attribute 'apply'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.006s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy.stats import skew\n\ndef task_func(data_matrix):\n    # Calculate skewness for each row\n    skewness_values = data_matrix.apply(skew, axis=1)\n    \n    # Create a DataFrame to store skewness\n    result_df = data_matrix.copy()\n    result_df['Skewness'] = skewness_values\n    \n    # Plot the distribution of skewness\n    fig, ax = plt.subplots()\n    ax.hist(skewness_values, bins=30, color='skyblue', edgecolor='black')\n    ax.set_title('Distribution of Row-wise Skewness')\n    ax.set_xlabel('Skewness')\n    ax.set_ylabel('Frequency')\n    \n    return result_df, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 11, in test_case_1\n  File \"<bigcode>\", line 8, in task_func\nAttributeError: 'numpy.ndarray' object has no attribute 'apply'\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 15, in test_case_2\n  File \"<bigcode>\", line 8, in task_func\nAttributeError: 'numpy.ndarray' object has no attribute 'apply'\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 19, in test_case_3\n  File \"<bigcode>\", line 8, in task_func\nAttributeError: 'numpy.ndarray' object has no attribute 'apply'\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_case_4\n  File \"<bigcode>\", line 8, in task_func\nAttributeError: 'numpy.ndarray' object has no attribute 'apply'\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 31, in test_case_5\n  File \"<bigcode>\", line 8, in task_func\nAttributeError: 'numpy.ndarray' object has no attribute 'apply'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.003s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\n\ndef task_func(data_matrix, n_components=2):\n    pca = PCA(n_components=n_components)\n    transformed = pca.fit_transform(data_matrix)\n    \n    # Create DataFrame with component columns\n    col_names = [f'Component {i+1}' for i in range(n_components)]\n    df = pd.DataFrame(transformed, columns=col_names)\n    \n    # Calculate mean per row of component values and add as 'Mean' column\n    df['Mean'] = df.mean(axis=1)\n    \n    # Plot cumulative explained variance\n    fig, ax = plt.subplots()\n    cum_var = pca.explained_variance_ratio_.cumsum()\n    ax.plot(range(1, n_components + 1), cum_var, marker='o')\n    ax.set_xlabel('Number of Components')\n    ax.set_ylabel('Cumulative Explained Variance')\n    ax.set_title('Cumulative Explained Variance by PCA Components')\n    ax.grid(True)\n    \n    return df, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    numeric_cols = df.select_dtypes(include=np.number).columns\n    df_filled = df.copy()\n    \n    for col in numeric_cols:\n        mean_val = df[col].mean()\n        df_filled[col] = df[col].fillna(mean_val)\n    \n    desc = df_filled[numeric_cols].describe()\n    \n    figs = []\n    axes_list = []\n    for col in numeric_cols:\n        fig, ax = plt.subplots()\n        sns.histplot(df_filled[col], bins=10, kde=False, ax=ax)\n        ax.set_title(f'Distribution of {col}')\n        figs.append(fig)\n        axes_list.append(ax)\n    \n    return desc, axes_list\n```", "match": {"category": "success"}}
{"result": "```python\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndef task_func(df):\n    df_num = df.select_dtypes(include=['number']).copy()\n    for col in df_num.columns:\n        mean_val = df_num[col].mean()\n        df_num[col].fillna(mean_val, inplace=True)\n    scaler = MinMaxScaler()\n    df_norm = pd.DataFrame(scaler.fit_transform(df_num), columns=df_num.columns, index=df_num.index)\n    fig, ax = plt.subplots()\n    df_norm.boxplot(ax=ax)\n    return df_norm, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df: pd.DataFrame):\n    # Select numeric columns\n    df_num = df.select_dtypes(include=[np.number]).copy()\n    # Fill missing values with column mean\n    df_num = df_num.fillna(df_num.mean())\n    # Perform PCA\n    pca = PCA(n_components=2)\n    components = pca.fit_transform(df_num)\n    # Create DataFrame for principal components\n    pc_df = pd.DataFrame(components, columns=['principal component 1', 'principal component 2'])\n    # Plot scatter\n    fig, ax = plt.subplots()\n    sns.scatterplot(x='principal component 1', y='principal component 2', data=pc_df, ax=ax)\n    ax.set_xlabel('principal component')\n    ax.set_ylabel('principal component 2')\n    return pc_df, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 9, in test_case_1\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_case_2\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 39, in test_case_3\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 53, in test_case_4\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 61, in test_case_5\nAssertionError: False is not true\n\n----------------------------------------------------------------------\nRan 5 tests in 0.206s\n\nFAILED (failures=5)"}}
{"result": "```python\nfrom scipy.stats import zscore\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndef task_func(df):\n    df_copy = df.copy()\n    numeric_cols = df_copy.select_dtypes(include='number').columns\n    \n    # Replace missing values with column mean\n    for col in numeric_cols:\n        mean_val = df_copy[col].mean()\n        df_copy[col].fillna(mean_val, inplace=True)\n    \n    # Calculate z-scores\n    z_df = df_copy[numeric_cols].apply(zscore)\n    \n    # Plot histograms\n    fig, axs = plt.subplots(len(numeric_cols), 1, figsize=(6, 4*len(numeric_cols)))\n    if len(numeric_cols) == 1:\n        axs = [axs]\n    for ax, col in zip(axs, numeric_cols):\n        ax.hist(z_df[col], bins=10)\n        ax.set_title(f\"Histogram of Z-scores for {col}\")\n        ax.set_xlabel(\"Z-score\")\n        ax.set_ylabel(\"Frequency\")\n    plt.tight_layout()\n    \n    return z_df, axs\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 16, in test_case_1\nTypeError: object of type 'Axes' has no len()\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_case_2\n  File \"<bigcode>\", line 23, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/__init__.py\", line 1442, in inner\n    return func(ax, *map(sanitize_sequence, args), **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/axes/_axes.py\", line 6790, in hist\n    m, bins = np.histogram(x[i], bins, weights=w[i], **hist_kwargs)\n  File \"<__array_function__ internals>\", line 5, in histogram\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/numpy/lib/histograms.py\", line 793, in histogram\n    bin_edges, uniform_bins = _get_bin_edges(a, bins, range, weights)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/numpy/lib/histograms.py\", line 426, in _get_bin_edges\n    first_edge, last_edge = _get_outer_edges(a, range)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/numpy/lib/histograms.py\", line 323, in _get_outer_edges\n    raise ValueError(\nValueError: autodetected range of [nan, nan] is not finite\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 43, in test_case_3\nTypeError: object of type 'Axes' has no len()\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 54, in test_case_4\nTypeError: object of type 'Axes' has no len()\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 64, in test_case_5\nTypeError: object of type 'Axes' has no len()\n\n======================================================================\nERROR: test_case_6 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 73, in test_case_6\n  File \"<bigcode>\", line 23, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/__init__.py\", line 1442, in inner\n    return func(ax, *map(sanitize_sequence, args), **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/axes/_axes.py\", line 6790, in hist\n    m, bins = np.histogram(x[i], bins, weights=w[i], **hist_kwargs)\n  File \"<__array_function__ internals>\", line 5, in histogram\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/numpy/lib/histograms.py\", line 793, in histogram\n    bin_edges, uniform_bins = _get_bin_edges(a, bins, range, weights)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/numpy/lib/histograms.py\", line 426, in _get_bin_edges\n    first_edge, last_edge = _get_outer_edges(a, range)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/numpy/lib/histograms.py\", line 323, in _get_outer_edges\n    raise ValueError(\nValueError: autodetected range of [nan, nan] is not finite\n\n======================================================================\nERROR: test_case_7 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 86, in test_case_7\nTypeError: object of type 'Axes' has no len()\n\n----------------------------------------------------------------------\nRan 7 tests in 0.469s\n\nFAILED (errors=7)"}}
{"result": "```python\nfrom sklearn.preprocessing import StandardScaler\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    df_copy = df.copy()\n    numeric_cols = df_copy.select_dtypes(include=['number']).columns\n    \n    # Fill missing values with column mean\n    for col in numeric_cols:\n        mean_val = df_copy[col].mean()\n        df_copy[col].fillna(mean_val, inplace=True)\n    \n    # Standardize numeric columns\n    scaler = StandardScaler()\n    df_copy[numeric_cols] = scaler.fit_transform(df_copy[numeric_cols])\n    \n    # Compute correlation matrix\n    corr = df_copy[numeric_cols].corr()\n    \n    # Plot heatmap\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(corr, annot=True, fmt=\".2f\", cmap=\"coolwarm\", ax=ax)\n    plt.close(fig)\n    \n    return df_copy, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport time\nfrom datetime import datetime\nimport random\nimport matplotlib.pyplot as plt\n# Constants\nDATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\ndef task_func(n, output_path=None):\n    # Generate n random Unix timestamps (let's assume timestamps between 1970 and current time)\n    current_time = int(time.time())\n    timestamps = [random.randint(0, current_time) for _ in range(n)]\n    \n    # Convert to formatted strings\n    formatted_timestamps = [datetime.utcfromtimestamp(ts).strftime(DATE_FORMAT) for ts in timestamps]\n\n    # Plot histogram of the timestamps\n    plt.figure(figsize=(10,6))\n    plt.hist(timestamps, bins=30, color='blue', alpha=0.7)\n    plt.xlabel('Unix Timestamp')\n    plt.ylabel('Frequency')\n    plt.title(f'Histogram of {n} Random Unix Timestamps')\n    plt.grid(True)\n\n    if output_path:\n        plt.savefig(output_path)\n        plt.close()\n    else:\n        plt.show()\n\n    return formatted_timestamps\n```", "match": {"category": "success"}}
{"result": "```python\nfrom datetime import datetime\nimport pandas as pd\nimport matplotlib.pyplot as plt\n# Constants\nDATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\ndef task_func(timestamps):\n    if not timestamps:\n        raise ValueError(\"Input list of timestamps is empty.\")\n    datetimes = [datetime.fromtimestamp(ts) for ts in timestamps]\n    df = pd.DataFrame({'Timestamp': timestamps, 'Datetime': datetimes})\n    fig, ax = plt.subplots()\n    ax.hist(datetimes, bins=10)\n    ax.set_xlabel('Datetime')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Histogram of Datetimes')\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    return df, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 14, in test_case_1\n  File \"<string>\", line 50, in assert_function_output\nTypeError: 'Axes' object is not subscriptable\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 17, in test_case_2\n  File \"<string>\", line 50, in assert_function_output\nTypeError: 'Axes' object is not subscriptable\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_case_4\n  File \"<string>\", line 50, in assert_function_output\nTypeError: 'Axes' object is not subscriptable\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 31, in test_case_5\n  File \"<string>\", line 50, in assert_function_output\nTypeError: 'Axes' object is not subscriptable\n\n----------------------------------------------------------------------\nRan 5 tests in 0.248s\n\nFAILED (errors=4)"}}
{"result": "```python\nfrom datetime import datetime\nimport pandas as pd\nimport pytz\nimport matplotlib.pyplot as plt\n# Constants\nDATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\nTIMEZONES = [\n    \"America/New_York\",\n    \"Europe/London\",\n    \"Asia/Shanghai\",\n    \"Asia/Tokyo\",\n    \"Australia/Sydney\",\n]\ndef task_func(timestamp):\n    dt_utc = datetime.utcfromtimestamp(timestamp).replace(tzinfo=pytz.utc)\n    records = []\n    for tz in TIMEZONES:\n        tz_obj = pytz.timezone(tz)\n        dt_tz = dt_utc.astimezone(tz_obj)\n        dt_str = dt_tz.strftime(DATE_FORMAT)\n        records.append({\"Timezone\": tz, \"Datetime\": dt_str})\n    df = pd.DataFrame(records)\n    \n    fig, ax = plt.subplots(figsize=(10,6))\n    ax.bar(df['Timezone'], df['Datetime'].astype(str))\n    ax.set_xlabel('Timezone')\n    ax.set_ylabel('Datetime')\n    ax.set_title(\"Datetime = f(Timezone)\")\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    return df, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 6, in test_case_1\n  File \"<string>\", line 55, in validate_output\nAssertionError: dtype('O') != 'datetime64[ns]'\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 9, in test_case_2\n  File \"<string>\", line 55, in validate_output\nAssertionError: dtype('O') != 'datetime64[ns]'\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_case_3\n  File \"<string>\", line 55, in validate_output\nAssertionError: dtype('O') != 'datetime64[ns]'\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 15, in test_case_4\n  File \"<string>\", line 55, in validate_output\nAssertionError: dtype('O') != 'datetime64[ns]'\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 18, in test_case_5\n  File \"<string>\", line 55, in validate_output\nAssertionError: dtype('O') != 'datetime64[ns]'\n\n======================================================================\nFAIL: test_case_6 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 40, in test_case_6\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1224, in assert_frame_equal\n    assert_series_equal(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 931, in assert_series_equal\n    assert_attr_equal(\"dtype\", left, right, obj=f\"Attributes of {obj}\")\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 415, in assert_attr_equal\n    raise_assert_detail(obj, msg, left_attr, right_attr)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: Attributes of DataFrame.iloc[:, 1] (column name=\"Datetime\") are different\n\nAttribute \"dtype\" are different\n[left]:  object\n[right]: datetime64[ns]\n\n----------------------------------------------------------------------\nRan 6 tests in 0.227s\n\nFAILED (failures=6)"}}
{"result": "```python\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\n\ndef task_func(df, age: int, height: int):\n    filtered_df = df[(df['Age'] == age) & (df['Height'] == height)].copy()\n    if filtered_df.shape[1] < 3:\n        filtered_df['Cluster'] = 0\n        return filtered_df, None\n    \n    X = filtered_df[['Age', 'Height']]\n    kmeans = KMeans(n_clusters=3, random_state=0)\n    filtered_df['Cluster'] = kmeans.fit_predict(X)\n    \n    fig, ax = plt.subplots()\n    scatter = ax.scatter(filtered_df['Age'], filtered_df['Height'], c=filtered_df['Cluster'], cmap='viridis')\n    ax.set_xlabel('Age')\n    ax.set_ylabel('Height')\n    ax.set_title('KMeans Clustering based on Age and Height')\n    \n    return filtered_df, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_case_1\n  File \"<bigcode>\", line 13, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py\", line 1069, in fit_predict\n    return self.fit(X, sample_weight=sample_weight).labels_\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 1152, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py\", line 1475, in fit\n    X = self._validate_data(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 605, in _validate_data\n    out = check_array(X, input_name=\"X\", **check_params)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 967, in check_array\n    raise ValueError(\nValueError: Found array with 0 sample(s) (shape=(0, 2)) while a minimum of 1 is required by KMeans.\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 26, in test_case_2\n  File \"<bigcode>\", line 13, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py\", line 1069, in fit_predict\n    return self.fit(X, sample_weight=sample_weight).labels_\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 1152, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py\", line 1484, in fit\n    self._check_params_vs_input(X)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py\", line 1416, in _check_params_vs_input\n    super()._check_params_vs_input(X, default_n_init=10)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py\", line 866, in _check_params_vs_input\n    raise ValueError(\nValueError: n_samples=1 should be >= n_clusters=3.\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 38, in test_case_3\n  File \"<bigcode>\", line 13, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py\", line 1069, in fit_predict\n    return self.fit(X, sample_weight=sample_weight).labels_\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 1152, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py\", line 1475, in fit\n    X = self._validate_data(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 605, in _validate_data\n    out = check_array(X, input_name=\"X\", **check_params)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 967, in check_array\n    raise ValueError(\nValueError: Found array with 0 sample(s) (shape=(0, 2)) while a minimum of 1 is required by KMeans.\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 52, in test_case_4\n  File \"<bigcode>\", line 13, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py\", line 1069, in fit_predict\n    return self.fit(X, sample_weight=sample_weight).labels_\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 1152, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py\", line 1475, in fit\n    X = self._validate_data(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 605, in _validate_data\n    out = check_array(X, input_name=\"X\", **check_params)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 967, in check_array\n    raise ValueError(\nValueError: Found array with 0 sample(s) (shape=(0, 2)) while a minimum of 1 is required by KMeans.\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 64, in test_case_5\n  File \"<bigcode>\", line 13, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py\", line 1069, in fit_predict\n    return self.fit(X, sample_weight=sample_weight).labels_\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 1152, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py\", line 1475, in fit\n    X = self._validate_data(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 605, in _validate_data\n    out = check_array(X, input_name=\"X\", **check_params)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 967, in check_array\n    raise ValueError(\nValueError: Found array with 0 sample(s) (shape=(0, 2)) while a minimum of 1 is required by KMeans.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.010s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport pandas as pd\nimport regex as re\n# Constants\nSTOPWORDS = [\"a\", \"an\", \"the\", \"in\", \"is\", \"are\"]\ndef task_func(text):\n    words = re.findall(r'\\b\\p{L}+\\b', text.lower())\n    filtered_words = [w for w in words if w not in STOPWORDS]\n    return pd.Series(filtered_words).value_counts()\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport regex as re\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nCOLUMN_NAMES = [\"Name\", \"Email\", \"Age\", \"Country\"]\ndef task_func(text):\n    pattern = r\"Name: (.*?), Email: (.*?), Age: (.*?), Country: (.*?)($|\\n)\"\n    matches = re.findall(pattern, text)\n    data = [match[:4] for match in matches]\n    df = pd.DataFrame(data, columns=COLUMN_NAMES)\n    df[\"Age\"] = pd.to_numeric(df[\"Age\"], errors='coerce')\n    sns.histplot(df[\"Age\"].dropna(), kde=False, bins=10)\n    plt.xlabel(\"Age\")\n    plt.ylabel(\"Count\")\n    plt.title(\"Age Distribution\")\n    plt.show()\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport regex as re\nfrom sklearn.feature_extraction.text import CountVectorizer\ndef task_func(text):\n    # Split text into sentences by period, ignoring empty sentences\n    sentences = [s.strip() for s in re.split(r'\\.\\s*', text) if s.strip()]\n    \n    vectorizer = CountVectorizer()\n    dtm = vectorizer.fit_transform(sentences)\n    \n    df = pd.DataFrame(dtm.toarray(), columns=vectorizer.get_feature_names_out())\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport pandas as pd\nSTOPWORDS = [\"Those\", \"are\", \"the\", \"words\", \"to\", \"ignore\"]\ndef task_func(text):\n    sentences = re.split(r'(?<=[.!?])\\s+', text.strip())\n    res = {}\n    idx = 1\n    stopwords_lower = set(w.lower() for w in STOPWORDS)\n    for s in sentences:\n        if s.strip():\n            words = re.findall(r'\\b\\w+\\b', s)\n            count = sum(1 for w in words if w.lower() not in stopwords_lower)\n            res[f\"Sentence {idx}\"] = count\n            idx += 1\n    return pd.Series(res)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 15, in test_case_2\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1014, in assert_series_equal\n    _testing.assert_almost_equal(\n  File \"pandas/_libs/testing.pyx\", line 52, in pandas._libs.testing.assert_almost_equal\n  File \"pandas/_libs/testing.pyx\", line 172, in pandas._libs.testing.assert_almost_equal\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: Series are different\n\nSeries values are different (25.0 %)\n[index]: [Sentence 1, Sentence 2, Sentence 3, Sentence 4]\n[left]:  [1, 4, 4, 6]\n[right]: [1, 4, 3, 6]\nAt positional index 2, first diff: 4 != 3\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_case_4\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 892, in assert_series_equal\n    raise_assert_detail(obj, \"Series length are different\", msg1, msg2)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: Series are different\n\nSeries length are different\n[left]:  3, Index(['Sentence 1', 'Sentence 2', 'Sentence 3'], dtype='object')\n[right]: 1, Index(['Sentence 1'], dtype='object')\n\n----------------------------------------------------------------------\nRan 5 tests in 0.006s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport pandas as pd\nimport regex as re\ndef task_func(text):\n    pattern = r\"Score:\\s*(\\d+),\\s*Category:\\s*(\\w+)\"\n    matches = re.findall(pattern, text)\n    data = [{\"Score\": int(score), \"Category\": category} for score, category in matches]\n    return pd.DataFrame(data)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 41, in test_case_5\nAssertionError: 'Machine' != 'Machine Learning'\n- Machine\n+ Machine Learning\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.008s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndef task_func(csv_file_path: str, title: str):\n    df = pd.read_csv(csv_file_path)\n    corr = df.corr().round(2)\n    \n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(corr, annot=True, fmt=\".2f\", cmap='coolwarm', ax=ax, cbar=True, square=True)\n    ax.set_title(title)\n    \n    return corr, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(mu, sigma, num_samples):\n    samples = np.random.normal(mu, sigma, num_samples)\n    x = np.linspace(mu - 4*sigma, mu + 4*sigma, 1000)\n    pdf = stats.norm.pdf(x, mu, sigma)\n\n    fig, ax = plt.subplots()\n    ax.hist(samples, bins=30, density=True, alpha=0.6, color='g', label='Samples histogram')\n    ax.plot(x, pdf, 'r-', lw=2, label='Normal PDF')\n    ax.set_title('Normal Distribution')\n    ax.legend()\n    return fig\n```", "match": {"category": "success"}}
{"result": "```python\nimport wikipedia\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\ndef task_func(page_title):\n    try:\n        text = wikipedia.page(page_title).content\n    except (wikipedia.exceptions.PageError, wikipedia.exceptions.DisambiguationError):\n        return None\n    \n    wordcloud = WordCloud(background_color='white').generate(text)\n    fig, ax = plt.subplots()\n    ax.imshow(wordcloud, interpolation='bilinear')\n    ax.axis('off')\n    plt.tight_layout()\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport json\nimport pandas as pd\ndef task_func(result, csv_file_path=\"test.csv\", json_file_path=\"test.json\"):\n    df = pd.DataFrame(result)\n    df.to_csv(csv_file_path, index=False)\n    with open(json_file_path, 'w') as f:\n        json.dump(result, f)\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n# Constants\nPLOT_TITLE = 'Square root plot'\nX_LABEL = 'x'\nY_LABEL = 'sqrt(x)'\nTIME_FORMAT = '%Y-%m-%d %H:%M:%S'\n\ndef task_func(result):\n    x_values = np.array([d['from_user'] for d in result])\n    y_values = np.round(np.sqrt(x_values), 2)\n    \n    fig, ax = plt.subplots()\n    ax.plot(x_values, y_values, marker='o')\n    ax.set_title(PLOT_TITLE)\n    ax.set_xlabel(X_LABEL)\n    ax.set_ylabel(Y_LABEL)\n    \n    current_time = datetime.now().strftime(TIME_FORMAT)\n    ax.annotate(current_time, xy=(0.95, 0.01), xycoords='axes fraction', ha='right', va='bottom', fontsize=8)\n    \n    return y_values, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 29, in test_case_2\n  File \"<bigcode>\", line 12, in task_func\n  File \"<bigcode>\", line 12, in <listcomp>\nKeyError: 'from_user'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.061s\n\nFAILED (errors=1)"}}
{"result": "```python\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(result, colors=['b', 'g', 'r', 'c', 'm', 'y', 'k']):\n    from_users = [entry['from_user'] for entry in result if 'from_user' in entry]\n    if not from_users:\n        print(\"No 'from_user' data to plot.\")\n        return\n    color = random.choice(colors)\n    plt.figure(figsize=(10,6))\n    sns.histplot(from_users, discrete=True, color=color)\n    plt.xlabel('from_user')\n    plt.ylabel('Count')\n    plt.title('Histogram of from_user values')\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    plt.show()\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_case_2\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 908, in assert_called_once\n    raise AssertionError(msg)\nAssertionError: Expected 'show' to have been called once. Called 0 times.\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 29, in test_case_3\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 908, in assert_called_once\n    raise AssertionError(msg)\nAssertionError: Expected 'show' to have been called once. Called 0 times.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.209s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(car_dict):\n    df = pd.DataFrame(list(car_dict.items()), columns=['Car', 'Color'])\n    color_counts = df['Color'].value_counts()\n    fig, ax = plt.subplots()\n    color_counts.plot(kind='bar', ax=ax)\n    ax.set_title('Distribution of Vehicle Colors')\n    ax.set_xlabel('Color')\n    ax.set_ylabel('Count')\n    plt.tight_layout()\n    return df, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 32, in test_case_1\nAssertionError: 'Count' != 'Frequency'\n- Count\n+ Frequency\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.231s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Constants\nCOLUMNS = ['col1', 'col2', 'col3']\ndef task_func(data):\n    df = pd.DataFrame(data, columns=COLUMNS)\n    # Create a pivot table counting occurrences of col3 values per col1 and col2 group\n    pivot = df.pivot_table(index='col1', columns='col2', values='col3', aggfunc=lambda x: ','.join(x))\n    # For the heatmap, we need counts of distinct col3 values grouped by col1 and col2\n    count_df = df.groupby(['col1', 'col2', 'col3']).size().unstack(fill_value=0)\n    # Sum counts for heatmap: count of unique col3 appearances per col1, col2 combination\n    heatmap_data = df.groupby(['col1', 'col2'])['col3'].nunique().unstack(fill_value=0)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    sns.heatmap(heatmap_data, annot=True, fmt=\"d\", cmap=\"YlGnBu\", ax=ax)\n    ax.set_title('Count of unique col3 values grouped by col1 and col2')\n    return df, ax\n```", "match": {"category": "timeout", "error": "Test execution timed out after 10 seconds"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nCOLUMNS = ['col1', 'col2', 'col3']\ndef task_func(data):\n    df = pd.DataFrame(data, columns=COLUMNS)\n    group_cols = COLUMNS[:-1]\n    val_col = COLUMNS[-1]\n    agg_df = df.groupby(group_cols)[val_col].unique().reset_index()\n    x_label = '-'.join(group_cols)\n    y_label = val_col\n\n    # Prepare the plot\n    fig, ax = plt.subplots()\n    for key, grp in agg_df.groupby(group_cols):\n        x = [str(key)]\n        y = [grp[val_col].values[0]]\n        y = y[0] if isinstance(y[0], (list, np.ndarray)) else [y[0]]\n        ax.plot(range(len(y)), y, label=str(key))\n    ax.set_xlabel(x_label)\n    ax.set_ylabel(y_label)\n    ax.legend()\n    return df, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 7, in test_case_1\n  File \"<bigcode>\", line 18, in task_func\nNameError: name 'np' is not defined\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_case_2\n  File \"<bigcode>\", line 18, in task_func\nNameError: name 'np' is not defined\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 42, in test_case_3\n  File \"<bigcode>\", line 18, in task_func\nNameError: name 'np' is not defined\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 60, in test_case_4\n  File \"<bigcode>\", line 18, in task_func\nNameError: name 'np' is not defined\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 80, in test_case_5\n  File \"<bigcode>\", line 18, in task_func\nNameError: name 'np' is not defined\n\n----------------------------------------------------------------------\nRan 5 tests in 0.099s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Constants\nCOLUMNS = ['col1', 'col2', 'col3']\ndef task_func(data):\n    df = pd.DataFrame(data, columns=COLUMNS)\n    grouped_df = df.groupby(['col1', 'col2'])['col3'].apply(list).reset_index()\n    fig, ax = plt.subplots()\n    for _, row in grouped_df.iterrows():\n        sns.histplot(row['col3'], kde=False, ax=ax, label=f\"{row['col1']}-{row['col2']}\", element='step', stat='count')\n    ax.set_xlabel('col3')\n    ax.legend(title='col1-col2')\n    plt.close(fig)\n    return grouped_df, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_case_1\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1224, in assert_frame_equal\n    assert_series_equal(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1014, in assert_series_equal\n    _testing.assert_almost_equal(\n  File \"pandas/_libs/testing.pyx\", line 52, in pandas._libs.testing.assert_almost_equal\n  File \"pandas/_libs/testing.pyx\", line 172, in pandas._libs.testing.assert_almost_equal\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame.iloc[:, 2] (column name=\"col3\") are different\n\nDataFrame.iloc[:, 2] (column name=\"col3\") values are different (100.0 %)\n[index]: [0, 1, 2, 3]\n[left]:  [[1, 1, 2], [3, 3, 3], [1, 2, 3], [3, 3, 3]]\n[right]: [2, 1, 3, 1]\nAt positional index 0, first diff: [1, 1, 2] != 2\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 26, in test_case_2\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1224, in assert_frame_equal\n    assert_series_equal(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1014, in assert_series_equal\n    _testing.assert_almost_equal(\n  File \"pandas/_libs/testing.pyx\", line 52, in pandas._libs.testing.assert_almost_equal\n  File \"pandas/_libs/testing.pyx\", line 172, in pandas._libs.testing.assert_almost_equal\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame.iloc[:, 2] (column name=\"col3\") are different\n\nDataFrame.iloc[:, 2] (column name=\"col3\") values are different (100.0 %)\n[index]: [0, 1]\n[left]:  [[1, 2, 3], [3, 3, 3]]\n[right]: [3, 1]\nAt positional index 0, first diff: [1, 2, 3] != 3\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 38, in test_case_3\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1224, in assert_frame_equal\n    assert_series_equal(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1014, in assert_series_equal\n    _testing.assert_almost_equal(\n  File \"pandas/_libs/testing.pyx\", line 52, in pandas._libs.testing.assert_almost_equal\n  File \"pandas/_libs/testing.pyx\", line 172, in pandas._libs.testing.assert_almost_equal\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame.iloc[:, 2] (column name=\"col3\") are different\n\nDataFrame.iloc[:, 2] (column name=\"col3\") values are different (100.0 %)\n[index]: [0, 1]\n[left]:  [[3, 4, 5], [8]]\n[right]: [3, 1]\nAt positional index 0, first diff: [3, 4, 5] != 3\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 60, in test_case_4\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1224, in assert_frame_equal\n    assert_series_equal(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1014, in assert_series_equal\n    _testing.assert_almost_equal(\n  File \"pandas/_libs/testing.pyx\", line 52, in pandas._libs.testing.assert_almost_equal\n  File \"pandas/_libs/testing.pyx\", line 172, in pandas._libs.testing.assert_almost_equal\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame.iloc[:, 2] (column name=\"col3\") are different\n\nDataFrame.iloc[:, 2] (column name=\"col3\") values are different (100.0 %)\n[index]: [0, 1, 2, 3]\n[left]:  [[1, 4], [1, 7], [0], [1, 1, 1]]\n[right]: [2, 2, 1, 1]\nAt positional index 0, first diff: [1, 4] != 2\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 82, in test_case_5\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1224, in assert_frame_equal\n    assert_series_equal(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1014, in assert_series_equal\n    _testing.assert_almost_equal(\n  File \"pandas/_libs/testing.pyx\", line 52, in pandas._libs.testing.assert_almost_equal\n  File \"pandas/_libs/testing.pyx\", line 172, in pandas._libs.testing.assert_almost_equal\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame.iloc[:, 2] (column name=\"col3\") are different\n\nDataFrame.iloc[:, 2] (column name=\"col3\") values are different (100.0 %)\n[index]: [0, 1, 2, 3]\n[left]:  [[0, 1], [0, 1], [0, 1], [0, 1]]\n[right]: [2, 2, 2, 2]\nAt positional index 0, first diff: [0, 1] != 2\n\n----------------------------------------------------------------------\nRan 5 tests in 0.311s\n\nFAILED (failures=5)"}}
{"result": "```python\nimport pandas as pd\nimport re\nimport os\ndef task_func(dir_path: str, pattern: str = '^EMP'):\n    files = [f for f in os.listdir(dir_path) if os.path.isfile(os.path.join(dir_path, f)) and re.match(pattern, f)]\n    files_sorted = sorted(files)\n    data = []\n    for f in files_sorted:\n        size = os.path.getsize(os.path.join(dir_path, f))\n        data.append({'File': f, 'Size': size})\n    return pd.DataFrame(data)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 48, in test_case_3\nAssertionError: False is not true\n\n----------------------------------------------------------------------\nRan 5 tests in 0.011s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef task_func(data='/path/to/data.csv', emp_prefix='EMP'):\n    df = pd.read_csv(data)\n    filtered_df = df[df['Employee ID'].astype(str).str.startswith(emp_prefix)][['Employee ID', 'Age']]\n    ax = sns.histplot(filtered_df['Age'], kde=False)\n    plt.xlabel('Age')\n    plt.ylabel('Count')\n    plt.title('Age Distribution of Filtered Employees')\n    plt.tight_layout()\n    return filtered_df, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport random\nimport matplotlib.pyplot as plt\n# Constants\nSALARY_RANGE = (20000, 100000)\ndef task_func(dict1):\n    dept_code = 'EMPXX'\n    num_employees = sum(1 for emp in dict1 if dict1[emp].get('department') == dept_code)\n    salaries = [random.randint(SALARY_RANGE[0], SALARY_RANGE[1]) for _ in range(num_employees)]\n    \n    fig, ax = plt.subplots()\n    ax.hist(salaries, bins=10, edgecolor='black')\n    ax.set_title('Salary Distribution in EMPXX Department')\n    ax.set_xlabel('Salary')\n    ax.set_ylabel('Number of Employees')\n    \n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 6, in test_case_1\n  File \"<bigcode>\", line 8, in task_func\n  File \"<bigcode>\", line 8, in <genexpr>\nAttributeError: 'int' object has no attribute 'get'\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_case_2\n  File \"<bigcode>\", line 8, in task_func\n  File \"<bigcode>\", line 8, in <genexpr>\nAttributeError: 'int' object has no attribute 'get'\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_case_3\n  File \"<bigcode>\", line 8, in task_func\n  File \"<bigcode>\", line 8, in <genexpr>\nAttributeError: 'int' object has no attribute 'get'\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_case_4\n  File \"<bigcode>\", line 8, in task_func\n  File \"<bigcode>\", line 8, in <genexpr>\nAttributeError: 'int' object has no attribute 'get'\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 34, in test_case_5\n  File \"<bigcode>\", line 8, in task_func\n  File \"<bigcode>\", line 8, in <genexpr>\nAttributeError: 'int' object has no attribute 'get'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.001s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport pandas as pd\nimport json\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nCOLUMNS = ['email', 'list']\n\ndef task_func(json_file):\n    with open(json_file, 'r') as f:\n        data = json.load(f)\n\n    if not data:\n        df_empty = pd.DataFrame(columns=['email', 'list', 'sum', 'mean'])\n        return df_empty, None\n\n    df = pd.DataFrame(data, columns=COLUMNS)\n\n    # If df is empty after loading\n    if df.empty:\n        df_empty = pd.DataFrame(columns=['email', 'list', 'sum', 'mean'])\n        return df_empty, None\n\n    # Make sure 'list' column contains lists of numbers\n    def safe_sum_mean(lst):\n        if isinstance(lst, list) and all(isinstance(x, (int, float, np.integer, np.floating)) for x in lst):\n            s = sum(lst)\n            m = s / len(lst) if len(lst) > 0 else np.nan\n            return pd.Series([s, m])\n        else:\n            return pd.Series([np.nan, np.nan])\n\n    df[['sum', 'mean']] = df['list'].apply(safe_sum_mean)\n\n    if df.empty or df['sum'].isnull().all():\n        return df, None\n\n    fig, ax = plt.subplots()\n    x = np.arange(len(df))\n    ax.plot(x, df['sum'], label='Sum', marker='o')\n    ax.plot(x, df['mean'], label='Mean', marker='x')\n    ax.set_xticks(x)\n    ax.set_xticklabels(df['email'], rotation=45, ha='right')\n    ax.set_xlabel('Email')\n    ax.set_ylabel('Value')\n    ax.legend()\n    ax.grid(True)\n    plt.tight_layout()\n\n    return df, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 95, in test_case_1\nAssertionError: Lists differ: ['first@example.com', 'second@example.com', 'third@example.com'] != ['0', '1', '2']\n\nFirst differing element 0:\n'first@example.com'\n'0'\n\n- ['first@example.com', 'second@example.com', 'third@example.com']\n+ ['0', '1', '2']\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 106, in test_case_2\nAssertionError: Lists differ: ['fourth@example.com', 'fifth@example.com',[39 chars]com'] != ['0', '1', '2', '3']\n\nFirst differing element 0:\n'fourth@example.com'\n'0'\n\n+ ['0', '1', '2', '3']\n- ['fourth@example.com',\n-  'fifth@example.com',\n-  'sixth@example.com',\n-  'seventh@example.com']\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 117, in test_case_3\nAssertionError: Lists differ: ['eight@example.com', 'ninth@example.com'] != ['0', '1']\n\nFirst differing element 0:\n'eight@example.com'\n'0'\n\n- ['eight@example.com', 'ninth@example.com']\n+ ['0', '1']\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 128, in test_case_4\nAssertionError: Lists differ: ['tenth@example.com'] != ['0']\n\nFirst differing element 0:\n'tenth@example.com'\n'0'\n\n- ['tenth@example.com']\n+ ['0']\n\n----------------------------------------------------------------------\nRan 5 tests in 0.210s\n\nFAILED (failures=4)"}}
{"result": "```python\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport ast\nimport matplotlib.pyplot as plt\n\ndef task_func(csv_file):\n    df = pd.read_csv(csv_file)\n    # Assuming the list is stored as a string in a column named 'list'\n    df['list'] = df['list'].apply(ast.literal_eval)\n    df['sum'] = df['list'].apply(np.sum)\n    df['mean'] = df['list'].apply(np.mean)\n    df['std'] = df['list'].apply(np.std)\n\n    fig, ax = plt.subplots()\n    sns.histplot(df['mean'], kde=False, ax=ax)\n    ax.set_title('Histogram of Mean Values')\n    ax.set_xlabel('Mean')\n    ax.set_ylabel('Frequency')\n\n    return df[['email', 'list', 'sum', 'mean', 'std']], ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport os\nimport numpy as np\nimport ast\nimport matplotlib.pyplot as plt\n\ndef task_func(directory):\n    # Find all CSV files in the directory\n    csv_files = [f for f in os.listdir(directory) if f.endswith('.csv') and os.path.isfile(os.path.join(directory, f))]\n    if not csv_files:\n        # No CSV files, return empty df with expected columns and None for plot\n        empty_df = pd.DataFrame(columns=['email', 'list', 'sum', 'mean', 'median'])\n        return empty_df, None\n    \n    # Find the CSV file with the longest filename\n    longest_filename = max(csv_files, key=len)\n    filepath = os.path.join(directory, longest_filename)\n    \n    # Load the CSV file\n    df = pd.read_csv(filepath)\n    \n    # Convert the 'list' column string representation to actual list\n    def safe_ast_eval(x):\n        try:\n            return ast.literal_eval(x)\n        except Exception:\n            return []\n    df['list'] = df['list'].apply(safe_ast_eval)\n    \n    # Compute sum, mean and median for each list\n    df['sum'] = df['list'].apply(np.sum)\n    df['mean'] = df['list'].apply(lambda x: np.mean(x) if len(x) > 0 else np.nan)\n    df['median'] = df['list'].apply(lambda x: np.median(x) if len(x) > 0 else np.nan)\n    \n    # Plot histogram of median\n    if df['median'].dropna().empty:\n        ax = None\n    else:\n        fig, ax = plt.subplots()\n        ax.hist(df['median'].dropna(), bins='auto')\n        ax.set_title('Histogram of Median')\n        ax.set_xlabel('Median')\n        ax.set_ylabel('Frequency')\n\n    return df, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport sqlite3\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport ast\ndef task_func(db_file):\n    conn = sqlite3.connect(db_file)\n    df = pd.read_sql_query(\"SELECT email, list FROM EmailData\", conn)\n    conn.close()\n    \n    def safe_eval(lst_str):\n        try:\n            return ast.literal_eval(lst_str)\n        except:\n            return []\n    \n    df['list_converted'] = df['list'].apply(safe_eval)\n    \n    def calc_stats(lst):\n        arr = np.array(lst)\n        if len(arr) == 0:\n            return pd.Series([np.nan, np.nan, np.nan], index=['sum', 'mean', 'var'])\n        return pd.Series([np.sum(arr), np.mean(arr), np.var(arr)], index=['sum', 'mean', 'var'])\n    \n    stats = df['list_converted'].apply(calc_stats)\n    df = pd.concat([df.drop(columns=['list_converted']), stats], axis=1)\n    \n    fig, ax = plt.subplots(figsize=(10,6))\n    summary = df[['sum', 'mean', 'var']].agg(['sum'])\n    summary = summary.T\n    summary.plot(kind='bar', ax=ax)\n    ax.set_title('Sum, Mean, Variance Aggregated Over All Emails')\n    ax.set_ylabel('Value')\n    ax.legend(['Total'])\n    \n    return df, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 70, in test_case_1\nAssertionError: 3 != 9\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 87, in test_case_2\nAssertionError: 3 != 12\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 103, in test_case_3\nAssertionError: 3 != 6\n\n----------------------------------------------------------------------\nRan 3 tests in 0.175s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport socket\nimport requests\ndef task_func(host):\n    if host is None or host == '':\n        raise ValueError(\"Host must be a non-empty string\")\n    try:\n        ip_address = socket.gethostbyname(host)\n    except socket.gaierror as e:\n        raise ValueError(f\"Invalid hostname: {host}\") from e\n\n    url = f\"https://ipinfo.io/{ip_address}/json\"\n    try:\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        raise ConnectionError(f\"Failed to connect to geolocation service: {e}\") from e\n\n    try:\n        data = response.json()\n    except ValueError as e:\n        raise ConnectionError(\"Failed to parse geolocation service response\") from e\n\n    data['ip'] = ip_address\n    return data\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_connection_error (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<bigcode>\", line 8, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1114, in __call__\n    return self._mock_call(*args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1118, in _mock_call\n    return self._execute_mock_call(*args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1173, in _execute_mock_call\n    raise effect\nsocket.gaierror\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 30, in test_connection_error\n  File \"<bigcode>\", line 10, in task_func\nValueError: Invalid hostname: invalidhost.com\n\n======================================================================\nERROR: test_nonexistent_host (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<bigcode>\", line 8, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1114, in __call__\n    return self._mock_call(*args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1118, in _mock_call\n    return self._execute_mock_call(*args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1173, in _execute_mock_call\n    raise effect\nsocket.gaierror\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 46, in test_nonexistent_host\n  File \"<bigcode>\", line 10, in task_func\nValueError: Invalid hostname: nonexistentdomain.com\n\n======================================================================\nFAIL: test_valid_host (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 13, in test_valid_host\nAssertionError: 'ip_address' not found in {'city': 'Mountain View', 'country': 'US', 'ip': '8.8.8.8'}\n\n----------------------------------------------------------------------\nRan 6 tests in 0.004s\n\nFAILED (failures=1, errors=2)"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nimport itertools\nfrom datetime import datetime, timedelta\nimport seaborn as sns\n\ndef task_func(df, fruits=None, days=None, seed=None, sales_lower_bound=1, sales_upper_bound=50):\n    if not isinstance(df, pd.DataFrame):\n        raise TypeError(\"'df' must be a pandas DataFrame.\")\n    if not df.empty:\n        raise ValueError(\"'df' must be empty.\")\n    if sales_lower_bound >= sales_upper_bound:\n        raise ValueError(\"'sales_lower_bound' must be less than 'sales_upper_bound'.\")\n    \n    if fruits is None:\n        fruits = ['apple', 'banana', 'cherry']\n    if days is None:\n        days = 7\n    if seed is not None:\n        np.random.seed(seed)\n    \n    start_date = datetime.today().date() - timedelta(days=days-1)\n    dates = [start_date + timedelta(days=i) for i in range(days)]\n    \n    data = []\n    for fruit, date in itertools.product(fruits, dates):\n        sales = np.random.randint(sales_lower_bound, sales_upper_bound)\n        data.append({'fruit': fruit, 'date': date, 'sales': sales})\n    \n    df_new = pd.DataFrame(data)\n    df = pd.concat([df, df_new], ignore_index=True)\n    \n    boxplot = sns.catplot(data=df, x='fruit', y='sales', kind='box')\n    \n    return df, boxplot\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_custom_days_range (builtins.TestCases)\nTest functionality with a custom days range.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 22, in test_custom_days_range\n  File \"<bigcode>\", line 23, in task_func\nTypeError: unsupported operand type(s) for -: 'list' and 'int'\n\n======================================================================\nERROR: test_default_days_range (builtins.TestCases)\nTest the default days range is correctly applied.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Day'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_default_days_range\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Day'\n\n======================================================================\nERROR: test_sales_bounds (builtins.TestCases)\nTest custom sales bounds are respected.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Sales'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 32, in test_sales_bounds\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Sales'\n\n======================================================================\nERROR: test_with_custom_fruits_and_days (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 53, in test_with_custom_fruits_and_days\n  File \"<bigcode>\", line 23, in task_func\nTypeError: unsupported operand type(s) for -: 'list' and 'int'\n\n======================================================================\nFAIL: test_error_on_non_empty_dataframe (builtins.TestCases)\nTest that a ValueError is raised if the input DataFrame is not empty.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 73, in test_error_on_non_empty_dataframe\nAssertionError: False is not true : Function should raise ValueError for non-empty DataFrame input.\n\n----------------------------------------------------------------------\nRan 8 tests in 0.630s\n\nFAILED (failures=1, errors=4)"}}
{"result": "```python\nimport random\nimport string\nfrom django.http import HttpResponse\n\ndef task_func(request, session_expire_time):\n    session_key = ''.join(random.choices(string.ascii_letters + string.digits, k=20))\n    if len(session_key) != 20:\n        raise ValueError(\"Session key length is not equal to 20.\")\n    if not (any(c.isalpha() for c in session_key) and any(c.isdigit() for c in session_key)):\n        raise ValueError(\"Session key must contain both letters and digits.\")\n    response = HttpResponse(\"Session key generated successfully.\")\n    response.set_cookie('session_key', session_key, max_age=session_expire_time)\n    return response\n```", "match": {"category": "success"}}
{"result": "```python\nimport hashlib\nimport base64\nimport binascii\nfrom django.http import HttpResponseBadRequest, HttpResponse\n\ndef task_func(data):\n    try:\n        username = data['username']\n        password_b64 = data['password']\n        try:\n            password_hash_bytes = base64.b64decode(password_b64)\n        except (binascii.Error, ValueError) as e:\n            raise\n        if not isinstance(password_hash_bytes, bytes):\n            raise ValueError(\"Decoded password is not bytes\")\n\n        expected_username = 'admin'\n        expected_password = 'password'\n        expected_hash = hashlib.sha256(expected_password.encode()).digest()\n\n        if username == expected_username and password_hash_bytes == expected_hash:\n            return HttpResponse('Login successful.', status=400)\n        else:\n            return HttpResponse('Login failed.', status=401)\n    except (KeyError, UnicodeDecodeError, binascii.Error, ValueError):\n        return HttpResponseBadRequest('Bad Request.')\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_successful_login (builtins.TestCases)\nTest successful login with correct credentials.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 14, in test_successful_login\nAssertionError: 401 != 200\n\n----------------------------------------------------------------------\nRan 5 tests in 0.003s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport csv\nimport io\nfrom django.http import HttpRequest, FileResponse\n\ndef task_func(request: HttpRequest, header, csv_data):\n    buffer = io.StringIO()\n    writer = csv.writer(buffer)\n    writer.writerow(header)\n    writer.writerows(csv_data)\n    buffer.seek(0)\n    response = FileResponse(\n        io.BytesIO(buffer.getvalue().encode('utf-8')),\n        as_attachment=True,\n        filename=\"data.csv\",\n        content_type='text/csv',\n    )\n    return response\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_attachment_filename (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 35, in test_attachment_filename\n  File \"<bigcode>\", line 13, in task_func\nTypeError: a bytes-like object is required, not 'MagicMock'\n\n======================================================================\nERROR: test_content_type (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 29, in test_content_type\n  File \"<bigcode>\", line 13, in task_func\nTypeError: a bytes-like object is required, not 'MagicMock'\n\n======================================================================\nERROR: test_csv_file_content (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 41, in test_csv_file_content\n  File \"<bigcode>\", line 13, in task_func\nTypeError: a bytes-like object is required, not 'MagicMock'\n\n======================================================================\nERROR: test_response_status_code (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 23, in test_response_status_code\n  File \"<bigcode>\", line 13, in task_func\nTypeError: a bytes-like object is required, not 'MagicMock'\n\n======================================================================\nERROR: test_response_type (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 17, in test_response_type\n  File \"<bigcode>\", line 13, in task_func\nTypeError: a bytes-like object is required, not 'MagicMock'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.017s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport zipfile\nimport io\nfrom django.http import FileResponse, HttpRequest\nfrom django.conf import settings\n\ndef task_func(request, file_paths):\n    \"\"\"\n    Create a zip file from the given file paths and return as a Django FileResponse.\n    :param request: Django HttpRequest object (not used here, but required)\n    :param file_paths: List of absolute or relative file paths to include in the zip\n    :return: FileResponse with the zip file as attachment\n    \"\"\"\n    zip_buffer = io.BytesIO()\n    with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:\n        for file_path in file_paths:\n            # To avoid storing full path info, use basename only\n            arcname = file_path.split('/')[-1].split('\\\\')[-1]\n            try:\n                zip_file.write(file_path, arcname=arcname)\n            except FileNotFoundError:\n                # Skip files that do not exist\n                continue\n\n    zip_buffer.seek(0)\n    response = FileResponse(zip_buffer, as_attachment=True, filename='files.zip')\n    return response\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_zip_file_content (builtins.TestCases)\nZip file should contain the specified files with correct content.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 32, in test_zip_file_content\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1000, in assert_any_call\n    raise AssertionError(\nAssertionError: writestr('file1.gz', 'This is the content of file1.gz.') call not found\n\n----------------------------------------------------------------------\nRan 5 tests in 0.009s\n\nFAILED (failures=1)"}}
{"result": "```python\nfrom flask import Flask, render_template, request\nimport json\nimport logging\nlogging.basicConfig(filename=\"out.log\", level=logging.INFO)\ndef task_func(template_folder):\n    app = Flask(__name__, template_folder=template_folder)\n\n    @app.route('/', methods=['POST'])\n    def index():\n        data = request.get_json(force=True)\n        logging.info(json.dumps(data))\n        return render_template('index.html', **data)\n\n    return app\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_app_creation (builtins.TestCases)\nTest if the function properly creates an app with given parameters.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 19, in test_app_creation\n  File \"<bigcode>\", line 7, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/app.py\", line 231, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/app.py\", line 295, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/scaffold.py\", line 96, in __init__\n    root_path = get_root_path(self.import_name)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/helpers.py\", line 601, in get_root_path\n    raise RuntimeError(\nRuntimeError: No root path can be found for the provided module 'builtins'. This can happen because the module came from an import hook that does not provide file name information or because it's a namespace package. In this case the root path needs to be explicitly provided.\n\n======================================================================\nERROR: test_app_instance (builtins.TestCases)\nTest if the function returns a Flask app instance.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_app_instance\n  File \"<bigcode>\", line 7, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/app.py\", line 231, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/app.py\", line 295, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/scaffold.py\", line 96, in __init__\n    root_path = get_root_path(self.import_name)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/helpers.py\", line 601, in get_root_path\n    raise RuntimeError(\nRuntimeError: No root path can be found for the provided module 'builtins'. This can happen because the module came from an import hook that does not provide file name information or because it's a namespace package. In this case the root path needs to be explicitly provided.\n\n======================================================================\nERROR: test_home_route (builtins.TestCases)\nTest if the '/' route is defined correctly.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 56, in test_home_route\n  File \"<bigcode>\", line 7, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/app.py\", line 231, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/app.py\", line 295, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/scaffold.py\", line 96, in __init__\n    root_path = get_root_path(self.import_name)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/helpers.py\", line 601, in get_root_path\n    raise RuntimeError(\nRuntimeError: No root path can be found for the provided module 'builtins'. This can happen because the module came from an import hook that does not provide file name information or because it's a namespace package. In this case the root path needs to be explicitly provided.\n\n======================================================================\nERROR: test_logging_info_called_with_correct_arguments (builtins.TestCases)\nTest if logging.info is called with the correct JSON data.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 36, in test_logging_info_called_with_correct_arguments\n  File \"<bigcode>\", line 7, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/app.py\", line 231, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/app.py\", line 295, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/scaffold.py\", line 96, in __init__\n    root_path = get_root_path(self.import_name)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/helpers.py\", line 601, in get_root_path\n    raise RuntimeError(\nRuntimeError: No root path can be found for the provided module 'builtins'. This can happen because the module came from an import hook that does not provide file name information or because it's a namespace package. In this case the root path needs to be explicitly provided.\n\n======================================================================\nERROR: test_logging_request_data (builtins.TestCases)\nTest if logging correctly logs POST request data.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 46, in test_logging_request_data\n  File \"<bigcode>\", line 7, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/app.py\", line 231, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/app.py\", line 295, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/scaffold.py\", line 96, in __init__\n    root_path = get_root_path(self.import_name)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/helpers.py\", line 601, in get_root_path\n    raise RuntimeError(\nRuntimeError: No root path can be found for the provided module 'builtins'. This can happen because the module came from an import hook that does not provide file name information or because it's a namespace package. In this case the root path needs to be explicitly provided.\n\n======================================================================\nERROR: test_template_folder_configuration (builtins.TestCases)\nTest if the template folder is correctly configured.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 30, in test_template_folder_configuration\n  File \"<bigcode>\", line 7, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/app.py\", line 231, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/app.py\", line 295, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/scaffold.py\", line 96, in __init__\n    root_path = get_root_path(self.import_name)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/helpers.py\", line 601, in get_root_path\n    raise RuntimeError(\nRuntimeError: No root path can be found for the provided module 'builtins'. This can happen because the module came from an import hook that does not provide file name information or because it's a namespace package. In this case the root path needs to be explicitly provided.\n\n----------------------------------------------------------------------\nRan 6 tests in 0.008s\n\nFAILED (errors=6)"}}
{"result": "```python\nfrom flask import Flask\nfrom flask_restful import Resource, Api\nimport requests\n\ndef task_func(api_url, template_folder):\n    app = Flask(__name__, template_folder=template_folder)\n    api = Api(app)\n\n    class FetchExternalData(Resource):\n        def get(self):\n            response = requests.get(api_url)\n            response.raise_for_status()\n            return response.json(), response.status_code\n\n    api.add_resource(FetchExternalData, '/fetch-external-data')\n\n    return app\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_api_endpoint_configuration (builtins.TestCases)\nTest if the API endpoint '/data' is configured correctly.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 15, in test_api_endpoint_configuration\n  File \"<bigcode>\", line 7, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/app.py\", line 231, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/app.py\", line 295, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/scaffold.py\", line 96, in __init__\n    root_path = get_root_path(self.import_name)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/helpers.py\", line 601, in get_root_path\n    raise RuntimeError(\nRuntimeError: No root path can be found for the provided module 'builtins'. This can happen because the module came from an import hook that does not provide file name information or because it's a namespace package. In this case the root path needs to be explicitly provided.\n\n======================================================================\nERROR: test_api_endpoint_status_code (builtins.TestCases)\nTest if the API endpoint returns the correct status code when accessed.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 41, in test_api_endpoint_status_code\n  File \"<bigcode>\", line 7, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/app.py\", line 231, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/app.py\", line 295, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/scaffold.py\", line 96, in __init__\n    root_path = get_root_path(self.import_name)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/helpers.py\", line 601, in get_root_path\n    raise RuntimeError(\nRuntimeError: No root path can be found for the provided module 'builtins'. This can happen because the module came from an import hook that does not provide file name information or because it's a namespace package. In this case the root path needs to be explicitly provided.\n\n======================================================================\nERROR: test_app_instance (builtins.TestCases)\nTest if the function returns a Flask app instance.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 11, in test_app_instance\n  File \"<bigcode>\", line 7, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/app.py\", line 231, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/app.py\", line 295, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/scaffold.py\", line 96, in __init__\n    root_path = get_root_path(self.import_name)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/helpers.py\", line 601, in get_root_path\n    raise RuntimeError(\nRuntimeError: No root path can be found for the provided module 'builtins'. This can happen because the module came from an import hook that does not provide file name information or because it's a namespace package. In this case the root path needs to be explicitly provided.\n\n======================================================================\nERROR: test_data_endpoint_response (builtins.TestCases)\nTest if the data endpoint returns expected JSON data.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 22, in test_data_endpoint_response\n  File \"<bigcode>\", line 7, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/app.py\", line 231, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/app.py\", line 295, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/scaffold.py\", line 96, in __init__\n    root_path = get_root_path(self.import_name)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/helpers.py\", line 601, in get_root_path\n    raise RuntimeError(\nRuntimeError: No root path can be found for the provided module 'builtins'. This can happen because the module came from an import hook that does not provide file name information or because it's a namespace package. In this case the root path needs to be explicitly provided.\n\n======================================================================\nERROR: test_external_api_call (builtins.TestCases)\nTest if the external API is called with the correct URL.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 31, in test_external_api_call\n  File \"<bigcode>\", line 7, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/app.py\", line 231, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/app.py\", line 295, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/scaffold.py\", line 96, in __init__\n    root_path = get_root_path(self.import_name)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/helpers.py\", line 601, in get_root_path\n    raise RuntimeError(\nRuntimeError: No root path can be found for the provided module 'builtins'. This can happen because the module came from an import hook that does not provide file name information or because it's a namespace package. In this case the root path needs to be explicitly provided.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.006s\n\nFAILED (errors=5)"}}
{"result": "```python\nfrom flask import Flask, render_template, redirect, url_for, request, flash\nfrom flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, SubmitField\nfrom wtforms.validators import DataRequired, Length\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\nclass LoginForm(FlaskForm):\n    username = StringField('Username', validators=[DataRequired(), Length(min=4, max=25)])\n    password = PasswordField('Password', validators=[DataRequired(), Length(min=8, max=80)])\n    submit = SubmitField('Log In')\n\nlogin_manager = LoginManager()\n\ndef task_func(secret_key, template_folder):\n    app = Flask(__name__, template_folder=template_folder)\n    app.config['SECRET_KEY'] = secret_key\n\n    login_manager.init_app(app)\n    login_manager.login_view = 'login'\n\n    # Simple user store: username -> {password_hash}\n    users = {\n        'testuser': generate_password_hash('testpassword123')\n    }\n\n    class User(UserMixin):\n        def __init__(self, username):\n            self.id = username\n\n        @staticmethod\n        def get(user_id):\n            if user_id in users:\n                return User(user_id)\n            return None\n\n    @login_manager.user_loader\n    def load_user(user_id):\n        return User.get(user_id)\n\n    @app.route('/login', methods=['GET', 'POST'])\n    def login():\n        if current_user.is_authenticated:\n            return redirect(url_for('protected'))\n\n        form = LoginForm()\n        if form.validate_on_submit():\n            username = form.username.data\n            password = form.password.data\n            if username in users and check_password_hash(users[username], password):\n                user = User(username)\n                login_user(user)\n                next_page = request.args.get('next')\n                return redirect(next_page or url_for('protected'))\n            else:\n                flash('Invalid username or password', 'error')\n        return render_template('login.html', form=form)\n\n    @app.route('/logout')\n    @login_required\n    def logout():\n        logout_user()\n        return redirect(url_for('login'))\n\n    @app.route('/protected')\n    @login_required\n    def protected():\n        return render_template('protected.html', username=current_user.id)\n\n    return app\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_app (builtins.TestCases)\nTest if the function returns a Flask app instance.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 37, in setUp\n  File \"<bigcode>\", line 17, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/app.py\", line 231, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/app.py\", line 295, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/scaffold.py\", line 96, in __init__\n    root_path = get_root_path(self.import_name)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/helpers.py\", line 601, in get_root_path\n    raise RuntimeError(\nRuntimeError: No root path can be found for the provided module 'builtins'. This can happen because the module came from an import hook that does not provide file name information or because it's a namespace package. In this case the root path needs to be explicitly provided.\n\n======================================================================\nERROR: test_login_manager_initialization (builtins.TestCases)\nTest if LoginManager is initialized within the function.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 37, in setUp\n  File \"<bigcode>\", line 17, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/app.py\", line 231, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/app.py\", line 295, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/scaffold.py\", line 96, in __init__\n    root_path = get_root_path(self.import_name)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/helpers.py\", line 601, in get_root_path\n    raise RuntimeError(\nRuntimeError: No root path can be found for the provided module 'builtins'. This can happen because the module came from an import hook that does not provide file name information or because it's a namespace package. In this case the root path needs to be explicitly provided.\n\n======================================================================\nERROR: test_login_page_accessibility (builtins.TestCases)\nTest if the login page is accessible.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 37, in setUp\n  File \"<bigcode>\", line 17, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/app.py\", line 231, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/app.py\", line 295, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/scaffold.py\", line 96, in __init__\n    root_path = get_root_path(self.import_name)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/helpers.py\", line 601, in get_root_path\n    raise RuntimeError(\nRuntimeError: No root path can be found for the provided module 'builtins'. This can happen because the module came from an import hook that does not provide file name information or because it's a namespace package. In this case the root path needs to be explicitly provided.\n\n======================================================================\nERROR: test_logout_route_redirects_to_login (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 37, in setUp\n  File \"<bigcode>\", line 17, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/app.py\", line 231, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/app.py\", line 295, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/scaffold.py\", line 96, in __init__\n    root_path = get_root_path(self.import_name)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/helpers.py\", line 601, in get_root_path\n    raise RuntimeError(\nRuntimeError: No root path can be found for the provided module 'builtins'. This can happen because the module came from an import hook that does not provide file name information or because it's a namespace package. In this case the root path needs to be explicitly provided.\n\n======================================================================\nERROR: test_protected_route_access (builtins.TestCases)\nTest if the protected route redirects to login when not authenticated.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 37, in setUp\n  File \"<bigcode>\", line 17, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/app.py\", line 231, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/app.py\", line 295, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/scaffold.py\", line 96, in __init__\n    root_path = get_root_path(self.import_name)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/helpers.py\", line 601, in get_root_path\n    raise RuntimeError(\nRuntimeError: No root path can be found for the provided module 'builtins'. This can happen because the module came from an import hook that does not provide file name information or because it's a namespace package. In this case the root path needs to be explicitly provided.\n\n======================================================================\nERROR: test_secret_key (builtins.TestCases)\nTest if the secret key is set correctly.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 37, in setUp\n  File \"<bigcode>\", line 17, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/app.py\", line 231, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/app.py\", line 295, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/scaffold.py\", line 96, in __init__\n    root_path = get_root_path(self.import_name)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/helpers.py\", line 601, in get_root_path\n    raise RuntimeError(\nRuntimeError: No root path can be found for the provided module 'builtins'. This can happen because the module came from an import hook that does not provide file name information or because it's a namespace package. In this case the root path needs to be explicitly provided.\n\n----------------------------------------------------------------------\nRan 6 tests in 0.003s\n\nFAILED (errors=6)"}}
{"result": "```python\nfrom flask import Flask\nfrom flask_mail import Mail, Message\n\ndef task_func(smtp_server, smtp_port, smtp_user, smtp_password, template_folder):\n    app = Flask(__name__, template_folder=template_folder)\n    app.config.update(\n        MAIL_SERVER=smtp_server,\n        MAIL_PORT=smtp_port,\n        MAIL_USERNAME=smtp_user,\n        MAIL_PASSWORD=smtp_password,\n        MAIL_USE_TLS=True,\n        MAIL_USE_SSL=False,\n        MAIL_DEFAULT_SENDER=smtp_user,\n    )\n    mail = Mail(app)\n\n    @app.route('/send-test-email')\n    def send_test_email():\n        msg = Message(subject=\"Test Email\",\n                      recipients=[smtp_user],\n                      body=\"This is a test email sent from the Flask-Mail configured app.\")\n        mail.send(msg)\n        return \"Test email sent.\"\n\n    return app\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_app_instance (builtins.TestCases)\nTest if the function returns a Flask app instance.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 14, in setUp\n  File \"<bigcode>\", line 6, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/app.py\", line 231, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/app.py\", line 295, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/scaffold.py\", line 96, in __init__\n    root_path = get_root_path(self.import_name)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/helpers.py\", line 601, in get_root_path\n    raise RuntimeError(\nRuntimeError: No root path can be found for the provided module 'builtins'. This can happen because the module came from an import hook that does not provide file name information or because it's a namespace package. In this case the root path needs to be explicitly provided.\n\n======================================================================\nERROR: test_mail_config (builtins.TestCases)\nTest if the mail configuration is set correctly.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 14, in setUp\n  File \"<bigcode>\", line 6, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/app.py\", line 231, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/app.py\", line 295, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/scaffold.py\", line 96, in __init__\n    root_path = get_root_path(self.import_name)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/helpers.py\", line 601, in get_root_path\n    raise RuntimeError(\nRuntimeError: No root path can be found for the provided module 'builtins'. This can happen because the module came from an import hook that does not provide file name information or because it's a namespace package. In this case the root path needs to be explicitly provided.\n\n======================================================================\nERROR: test_send_mail_functionality (builtins.TestCases)\nTest the functionality of sending an email.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 14, in setUp\n  File \"<bigcode>\", line 6, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/app.py\", line 231, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/app.py\", line 295, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/scaffold.py\", line 96, in __init__\n    root_path = get_root_path(self.import_name)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/helpers.py\", line 601, in get_root_path\n    raise RuntimeError(\nRuntimeError: No root path can be found for the provided module 'builtins'. This can happen because the module came from an import hook that does not provide file name information or because it's a namespace package. In this case the root path needs to be explicitly provided.\n\n======================================================================\nERROR: test_send_mail_route (builtins.TestCases)\nTest if the send_mail route triggers the mail sending.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 14, in setUp\n  File \"<bigcode>\", line 6, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/app.py\", line 231, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/app.py\", line 295, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/scaffold.py\", line 96, in __init__\n    root_path = get_root_path(self.import_name)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/helpers.py\", line 601, in get_root_path\n    raise RuntimeError(\nRuntimeError: No root path can be found for the provided module 'builtins'. This can happen because the module came from an import hook that does not provide file name information or because it's a namespace package. In this case the root path needs to be explicitly provided.\n\n======================================================================\nERROR: test_smtp_configuration (builtins.TestCases)\nEnsure SMTP settings are correctly configured.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 14, in setUp\n  File \"<bigcode>\", line 6, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/app.py\", line 231, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/app.py\", line 295, in __init__\n    super().__init__(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/sansio/scaffold.py\", line 96, in __init__\n    root_path = get_root_path(self.import_name)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/flask/helpers.py\", line 601, in get_root_path\n    raise RuntimeError(\nRuntimeError: No root path can be found for the provided module 'builtins'. This can happen because the module came from an import hook that does not provide file name information or because it's a namespace package. In this case the root path needs to be explicitly provided.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.002s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\ndef task_func(products, n_samples=100, sales_lower=50, sales_upper=200, profit_margin_min=0.1, profit_margin_max=0.5, random_seed=42):\n    # Validate products argument\n    if not isinstance(products, list) or not all(isinstance(p, str) for p in products):\n        raise TypeError(\"products must be a list of strings\")\n    # Validate n_samples\n    if not isinstance(n_samples, int) or n_samples <= 0:\n        raise ValueError(\"n_samples must be a positive integer\")\n    # Validate numeric parameters\n    numeric_params = [sales_lower, sales_upper, profit_margin_min, profit_margin_max]\n    if not all(isinstance(x, (int, float)) for x in numeric_params):\n        raise TypeError(\"sales_lower, sales_upper, profit_margin_min, and profit_margin_max must be numeric\")\n    # Validate sales range\n    if sales_lower > sales_upper:\n        raise ValueError(\"sales_lower cannot be greater than sales_upper\")\n    # Validate profit margin range\n    if profit_margin_min > profit_margin_max:\n        raise ValueError(\"profit_margin_min cannot be greater than profit_margin_max\")\n\n    np.random.seed(random_seed)\n    \n    data = []\n    for product in products:\n        sales = np.random.randint(sales_lower, sales_upper + 1, n_samples)\n        profit_margins = np.random.uniform(profit_margin_min, profit_margin_max, n_samples)\n        profits = sales * profit_margins\n        total_sales = sales.sum()\n        total_profit = profits.sum()\n        data.append({'product': product, 'total_sales': total_sales, 'total_profit': total_profit})\n\n    df = pd.DataFrame(data)\n    df = df.sort_values(by='total_profit', ascending=False).reset_index(drop=True)\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_empty_product_list (builtins.TestCases)\nTest that the function can handle an empty product list.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 44, in test_empty_product_list\n  File \"<bigcode>\", line 34, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 6758, in sort_values\n    k = self._get_label_or_level_values(by, axis=axis)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/generic.py\", line 1778, in _get_label_or_level_values\n    raise KeyError(key)\nKeyError: 'total_profit'\n\n======================================================================\nERROR: test_sorting_by_profit (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Profit'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_sorting_by_profit\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Profit'\n\n======================================================================\nFAIL: test_new_custom_parameters (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_new_custom_parameters\nAssertionError: Lists differ: ['Apple Watch,6260,1911.2131657220543', 'iP[127 chars]324'] != ['Macbook,1561,444.82670855378143', 'iPad,1[123 chars]959']\n\nFirst differing element 0:\n'Apple Watch,6260,1911.2131657220543'\n'Macbook,1561,444.82670855378143'\n\n- ['Apple Watch,6260,1911.2131657220543',\n-  'iPhone,6251,1872.0130220167143',\n-  'Airpods,6310,1865.7062265848651',\n-  'Macbook,6156,1861.2932295365124',\n-  'iPad,6311,1825.9453787566324']\n+ ['Macbook,1561,444.82670855378143',\n+  'iPad,1383,401.9253335536443',\n+  'Airpods,1297,381.4827132170069',\n+  'Apple Watch,1123,308.07853599252707',\n+  'iPhone,921,294.0138866107959'] : DataFrame contents should match the expected output\n\n----------------------------------------------------------------------\nRan 12 tests in 0.023s\n\nFAILED (failures=1, errors=2)"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\nfrom datetime import timedelta\nimport matplotlib.pyplot as plt\n\ndef task_func(start_date, end_date, random_seed=42):\n    start_date = pd.to_datetime(start_date)\n    end_date = pd.to_datetime(end_date)\n    if end_date < start_date:\n        raise ValueError(\"Invalid date range: 'end_date' is before 'start_date'\")\n    np.random.seed(random_seed)\n    dates = pd.date_range(start_date, end_date, freq='D')\n    n = len(dates)\n    temperature = np.random.uniform(-10, 40, n)\n    humidity = np.random.uniform(20, 100, n)\n    wind_speed = np.random.uniform(0, 20, n)\n\n    df = pd.DataFrame({\n        'Date': dates,\n        'Temperature': temperature,\n        'Humidity': humidity,\n        'Wind Speed': wind_speed\n    })\n\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.plot(df['Date'], df['Temperature'], label='Temperature (\u00b0C)', color='tab:red')\n    ax.plot(df['Date'], df['Humidity'], label='Humidity (%)', color='tab:blue')\n    ax.plot(df['Date'], df['Wind Speed'], label='Wind Speed (m/s)', color='tab:green')\n    ax.set_xlabel('Date')\n    ax.set_title('Simulated Daily Weather Data')\n    ax.legend()\n    ax.grid(True)\n    fig.autofmt_xdate()\n    return df, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_plot_attributes (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 34, in test_plot_attributes\nAssertionError: 'Temperature' not found in ['Temperature (\u00b0C)', 'Humidity (%)', 'Wind Speed (m/s)'] : Plot should contain a line for Temperature\n\n----------------------------------------------------------------------\nRan 10 tests in 0.349s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef task_func(students=[\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\"], seed=42):\n    np.random.seed(seed)\n    scores = np.array([np.random.randint(0, 100) for _ in students])\n    df = pd.DataFrame({'Student': students, 'Score': scores})\n    df = df.sort_values('Score').reset_index(drop=True)\n    \n    fig, ax = plt.subplots()\n    ax.bar(df['Student'], df['Score'], color='skyblue')\n    ax.set_xlabel('Student')\n    ax.set_ylabel('Score')\n    ax.set_title('Scores of Students')\n    \n    return df, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom random import choices, seed\ndef task_func(products, ratings, weights, random_seed=42):\n    seed(random_seed)\n    chosen_ratings = choices(ratings, weights=weights, k=len(products))\n    df = pd.DataFrame({'Product': products, 'Rating': chosen_ratings})\n    return df.sort_values(by='Rating', ascending=False).reset_index(drop=True)\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime, timedelta\nimport matplotlib.pyplot as plt\n\ndef task_func(start_date, end_date, seed=42):\n    np.random.seed(seed)\n    start = pd.to_datetime(start_date)\n    end = pd.to_datetime(end_date)\n    dates = pd.date_range(start, end)\n    sales = np.random.randint(0, 501, len(dates))\n    df = pd.DataFrame({'Date': dates, 'Sales': sales})\n    \n    fig, ax = plt.subplots(figsize=(10,5))\n    ax.plot(df['Date'], df['Sales'], marker='o', linestyle='-')\n    ax.set_title('Sales Over Time')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Sales')\n    ax.grid(True)\n    \n    return df, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nfrom sklearn.preprocessing import StandardScaler\n\ndef task_func(data, column, outlier_z_score):\n    # Extract the column data as numpy array\n    col_data = data[column].values.reshape(-1, 1)\n    \n    # Standardize the column\n    scaler = StandardScaler()\n    col_scaled = scaler.fit_transform(col_data)\n    \n    # Calculate Z-scores (absolute values)\n    z_scores = np.abs(col_scaled).flatten()\n    \n    # Identify outlier indices\n    outlier_indices = np.where(z_scores > outlier_z_score)[0]\n    \n    # Remove outliers\n    data_no_outliers = data.drop(index=outlier_indices)\n    \n    # Plot data with outliers\n    plt.figure(figsize=(12, 5))\n    plt.subplot(1, 2, 1)\n    plt.scatter(data.index, data[column], color='blue', alpha=0.6, label='Data points')\n    plt.scatter(data.index[outlier_indices], data.loc[outlier_indices, column], color='red', label='Outliers')\n    plt.title('Data with Outliers')\n    plt.xlabel('Index')\n    plt.ylabel(column)\n    plt.legend()\n    \n    # Plot data without outliers\n    plt.subplot(1, 2, 2)\n    plt.scatter(data_no_outliers.index, data_no_outliers[column], color='green', alpha=0.6, label='Data points')\n    plt.title('Data without Outliers')\n    plt.xlabel('Index')\n    plt.ylabel(column)\n    plt.legend()\n    plt.tight_layout()\n    plt.show()\n    \n    return (data, data_no_outliers, outlier_indices)\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_data_without_outliers (builtins.TestCases)\nTest if outliers are correctly removed.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 16, in test_data_without_outliers\n  File \"<bigcode>\", line 9, in task_func\nAttributeError: 'numpy.ndarray' object has no attribute 'values'\n\n======================================================================\nERROR: test_no_change_in_data_dimension (builtins.TestCases)\nTest if the dimension of the data remains unchanged.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 32, in test_no_change_in_data_dimension\n  File \"<bigcode>\", line 9, in task_func\nAttributeError: 'numpy.ndarray' object has no attribute 'values'\n\n======================================================================\nERROR: test_no_plotting (builtins.TestCases)\nTest that the plotting function is called but does not display plots during testing.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 28, in test_no_plotting\n  File \"<bigcode>\", line 9, in task_func\nAttributeError: 'numpy.ndarray' object has no attribute 'values'\n\n======================================================================\nERROR: test_original_data_unchanged (builtins.TestCases)\nTest if the original data remains unchanged.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_original_data_unchanged\n  File \"<bigcode>\", line 9, in task_func\nAttributeError: 'numpy.ndarray' object has no attribute 'values'\n\n======================================================================\nERROR: test_plot_titles (builtins.TestCases)\nTest if the plot titles match the requirement in the docstring.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 37, in test_plot_titles\n  File \"<bigcode>\", line 9, in task_func\nAttributeError: 'numpy.ndarray' object has no attribute 'values'\n\n======================================================================\nERROR: test_return_type (builtins.TestCases)\nTest if the function returns a tuple of correct types.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_return_type\n  File \"<bigcode>\", line 9, in task_func\nAttributeError: 'numpy.ndarray' object has no attribute 'values'\n\n----------------------------------------------------------------------\nRan 6 tests in 0.011s\n\nFAILED (errors=6)"}}
{"result": "```python\nimport numpy as np\nimport math\ndef task_func(data, target, k):\n    if not isinstance(k, int) or k < 0:\n        raise ValueError(\"k must be a non-negative integer\")\n    R = 6371  # Earth radius in km\n\n    def haversine(coord1, coord2):\n        lat1, lon1 = coord1\n        lat2, lon2 = coord2\n        phi1, phi2 = math.radians(lat1), math.radians(lat2)\n        dphi = math.radians(lat2 - lat1)\n        dlambda = math.radians(lon2 - lon1)\n        a = math.sin(dphi/2)**2 + math.cos(phi1)*math.cos(phi2)*math.sin(dlambda/2)**2\n        c = 2*math.atan2(math.sqrt(a), math.sqrt(1 - a))\n        return R * c\n    \n    data = np.array(data)\n    distances = [haversine(pt, target) for pt in data]\n    sorted_indices = np.argsort(distances)\n    nearest_indices = sorted_indices[:k]\n    return [list(data[i]) for i in nearest_indices]\n```", "match": {"category": "success"}}
{"result": "```python\nfrom scipy.stats import linregress\nimport matplotlib.pyplot as plt\n\ndef task_func(data, column1, column2):\n    if column1 not in data.columns or column2 not in data.columns:\n        raise ValueError(f\"One or both specified columns '{column1}', '{column2}' do not exist in the DataFrame.\")\n    \n    x = data[column1]\n    y = data[column2]\n    \n    slope, intercept, r_value, p_value, std_err = linregress(x, y)\n    \n    fig, ax = plt.subplots()\n    ax.scatter(x, y, label=\"Data points\")\n    ax.plot(x, slope * x + intercept, color='red', label=\"Fitted line\")\n    \n    ax.set_xlabel(column1)\n    ax.set_ylabel(column2)\n    ax.legend()\n    \n    return (slope, intercept, r_value, p_value, std_err), ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_plot_axes (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 18, in test_plot_axes\nAssertionError: 1 != 2\n\n----------------------------------------------------------------------\nRan 6 tests in 0.081s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom matplotlib.collections import PathCollection\nimport numpy as np\n\ndef task_func(data, n_clusters=3):\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"If 'data' is not a pd.DataFrame.\")\n    if not (isinstance(n_clusters, int) and n_clusters > 1):\n        raise ValueError(\"If 'n_clusters' is not an integer greater than 1.\")\n    \n    kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n    labels = kmeans.fit_predict(data)\n    centroids = kmeans.cluster_centers_\n    \n    fig, ax = plt.subplots()\n    \n    scatter: PathCollection = ax.scatter(data.iloc[:,0], data.iloc[:,1], c=labels, cmap='viridis', alpha=0.6, edgecolor='k')\n    ax.scatter(centroids[:,0], centroids[:,1], c='red', s=100, marker='X', label='Centroids')\n    \n    ax.set_title('K-means Clustering')\n    ax.legend()\n    \n    return labels, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(data, n_components=2):\n    if not (isinstance(n_components, int) and n_components > 0):\n        raise ValueError(\"n_components must be a positive integer.\")\n    pca = PCA(n_components=n_components)\n    transformed = pca.fit_transform(data)\n    cols = [f'PC{i+1}' for i in range(n_components)]\n    df_transformed = pd.DataFrame(transformed, columns=cols)\n    \n    fig, ax = plt.subplots()\n    if n_components >= 2:\n        ax.scatter(df_transformed['PC1'], df_transformed['PC2'])\n        ax.set_xlabel('PC1')\n        ax.set_ylabel('PC2')\n        ax.set_title('PCA Scatter Plot')\n    else:\n        ax.scatter(range(len(df_transformed)), df_transformed['PC1'])\n        ax.set_xlabel('Sample Index')\n        ax.set_ylabel('PC1')\n        ax.set_title('PCA Scatter Plot (1 Component)')\n    plt.close(fig)\n    return df_transformed, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_values (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 36, in test_values\nAssertionError: -0.25804826819514837 != -0.36270132751314693 within 7 places (0.10465305931799856 difference) : DataFrame contents should match the expected output\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"<string>\", line 39, in test_values\nAssertionError: -0.25804826819514837 != 0.36270132751314693 within 7 places (0.6207495957082954 difference) : DataFrame contents should match the expected output\n\n----------------------------------------------------------------------\nRan 5 tests in 0.060s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\ndef task_func(mean, std_dev, num_samples):\n    samples = np.random.normal(loc=mean, scale=std_dev, size=num_samples)\n    fig, ax = plt.subplots()\n    counts, bins, patches = ax.hist(samples, bins=30, density=True, alpha=0.6, color='b')\n    x = np.linspace(bins[0], bins[-1], 1000)\n    pdf = norm.pdf(x, mean, std_dev)\n    ax.plot(x, pdf, 'r-', lw=2)\n    ax.set_title(f\"Fit results: mean = {mean:.2f}, std = {std_dev:.2f}\")\n    return fig, samples\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_histogram_bins (builtins.TestCases)\nTest if the histogram displays the correct number of bins.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 30, in test_histogram_bins\nAttributeError: 'numpy.ndarray' object has no attribute 'axes'\n\n======================================================================\nERROR: test_mean_approximation (builtins.TestCases)\nTest if the mean of the samples is approximately equal to the specified mean.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 18, in test_mean_approximation\n  File \"<__array_function__ internals>\", line 5, in mean\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/numpy/core/fromnumeric.py\", line 3440, in mean\n    return _methods._mean(a, axis=axis, dtype=dtype,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/numpy/core/_methods.py\", line 191, in _mean\n    ret = ret / rcount\nTypeError: unsupported operand type(s) for /: 'Figure' and 'int'\n\n======================================================================\nERROR: test_pdf_overlay (builtins.TestCases)\nTest if the probability density function (PDF) is correctly overlayed on the histogram.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 34, in test_pdf_overlay\nAttributeError: 'numpy.ndarray' object has no attribute 'axes'\n\n======================================================================\nERROR: test_pdf_overlay_accuracy (builtins.TestCases)\nTest if the PDF overlay accurately represents the normal distribution.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 40, in test_pdf_overlay_accuracy\nAttributeError: 'numpy.ndarray' object has no attribute 'axes'\n\n======================================================================\nERROR: test_plot_title (builtins.TestCases)\nTest if the plot title correctly reflects the mean and standard deviation.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 26, in test_plot_title\nAttributeError: 'numpy.ndarray' object has no attribute 'axes'\n\n======================================================================\nERROR: test_samples_length (builtins.TestCases)\nTest if the number of generated samples is correct.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 10, in test_samples_length\nTypeError: object of type 'Figure' has no len()\n\n======================================================================\nERROR: test_std_dev_approximation (builtins.TestCases)\nTest if the standard deviation of the samples is approximately equal to the specified standard deviation.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 22, in test_std_dev_approximation\n  File \"<__array_function__ internals>\", line 5, in std\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/numpy/core/fromnumeric.py\", line 3581, in std\n    return _methods._std(a, axis=axis, dtype=dtype, out=out, ddof=ddof,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/numpy/core/_methods.py\", line 262, in _std\n    ret = _var(a, axis=axis, dtype=dtype, out=out, ddof=ddof,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/numpy/core/_methods.py\", line 225, in _var\n    arrmean = arrmean.dtype.type(arrmean / rcount)\nAttributeError: 'Figure' object has no attribute 'dtype'\n\n======================================================================\nFAIL: test_samples_type (builtins.TestCases)\nTest the type of the samples.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 14, in test_samples_type\nAssertionError: <Figure size 640x480 with 1 Axes> is not an instance of <class 'numpy.ndarray'>\n\n----------------------------------------------------------------------\nRan 8 tests in 0.286s\n\nFAILED (failures=1, errors=7)"}}
{"result": "```python\nimport pandas as pd\nfrom random import randint, uniform, seed\ndef task_func(categories=None, months=None, random_seed=42):\n    if not isinstance(categories, list) or not categories:\n        raise ValueError(\"categories must be a non-empty list\")\n    if not isinstance(months, list) or not months:\n        raise ValueError(\"months must be a non-empty list\")\n    seed(random_seed)\n    data = []\n    for month in months:\n        for category in categories:\n            sales = randint(100, 500) + uniform(0, 1)\n            data.append({\"Month\": month, \"Category\": category, \"Sales\": sales})\n    return pd.DataFrame(data)\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_dataframe_structure (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 9, in test_dataframe_structure\n  File \"<bigcode>\", line 6, in task_func\nValueError: categories must be a non-empty list\n\n======================================================================\nERROR: test_reproducibility (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 5, in test_reproducibility\n  File \"<bigcode>\", line 6, in task_func\nValueError: categories must be a non-empty list\n\n======================================================================\nERROR: test_values (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 26, in test_values\n  File \"<bigcode>\", line 6, in task_func\nValueError: categories must be a non-empty list\n\n----------------------------------------------------------------------\nRan 6 tests in 0.004s\n\nFAILED (errors=3)"}}
{"result": "```python\nimport csv\nfrom collections import Counter\nimport operator\n\ndef task_func(csv_file, csv_delimiter):\n    word_counter = Counter()\n    with open(csv_file, newline='', encoding='utf-8') as f:\n        reader = csv.reader(f, delimiter=csv_delimiter)\n        for row in reader:\n            for word in row:\n                word_counter[word] += 1\n    sorted_words = sorted(word_counter.items(), key=operator.itemgetter(1), reverse=True)\n    return sorted_words\n```", "match": {"category": "success"}}
{"result": "```python\nimport math\nimport itertools\nfrom functools import reduce\ndef task_func(numbers):\n    total_log_sum = 0.0\n    for r in range(1, len(numbers) + 1):\n        for combo in itertools.combinations(numbers, r):\n            product = reduce(lambda x, y: x * y, combo, 1)\n            total_log_sum += math.log(product)\n    return total_log_sum\n```", "match": {"category": "success"}}
{"result": "```python\nimport random\nimport string\nfrom collections import Counter\ndef task_func(num_strings, string_length):\n    random_strings = [\n        ''.join(random.choices(string.ascii_lowercase, k=string_length))\n        for _ in range(num_strings)\n    ]\n    total_counter = Counter()\n    for s in random_strings:\n        total_counter.update(s)\n    return sorted(total_counter.items(), key=lambda x: x[1], reverse=True)\n```", "match": {"category": "success"}}
{"result": "```python\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.datasets import load_iris\n\ndef task_func():\n    plt.rcParams['font.family'] = 'Arial'\n    iris_sklearn = load_iris(as_frame=True)\n    df = iris_sklearn.frame\n    df['species'] = df['target'].map(dict(enumerate(iris_sklearn.target_names)))\n    feature_names = iris_sklearn.feature_names\n    pair_plot = sns.pairplot(df, hue='species', diag_kind='hist')\n    pair_plot.fig.suptitle('Iris Dataset Pair Plot', y=1.02, fontsize=16, fontname='Arial')\n    for ax in pair_plot.axes.flatten():\n        if ax is not None:\n            xlabel = ax.get_xlabel()\n            ylabel = ax.get_ylabel()\n            if xlabel in feature_names:\n                ax.set_xlabel(xlabel, fontname='Arial')\n            if ylabel in feature_names:\n                ax.set_ylabel(ylabel, fontname='Arial')\n    return pair_plot.fig\n```", "match": {"category": "timeout", "error": "Test execution timed out after 10 seconds"}}
{"result": "```python\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport random\nfrom datetime import datetime, timedelta\n\ndef task_func(seed=42):\n    try:\n        # Set random seed for reproducibility\n        random.seed(seed)\n        # Generate date range for past 30 days\n        end_date = datetime.now()\n        dates = [end_date - timedelta(days=x) for x in range(29, -1, -1)]\n        # Generate random values\n        values = [random.uniform(0, 100) for _ in range(30)]\n        # Create a DataFrame\n        df = pd.DataFrame({'Date': dates, 'Value': values})\n        # Plot configuration\n        plt.rcParams['font.family'] = 'Arial'\n        fig, ax = plt.subplots()\n        ax.plot(df['Date'], df['Value'], marker='o', linestyle='-')\n        ax.set_xlabel('Date')\n        ax.set_ylabel('Value')\n        ax.set_title('Random Time Series Data')\n        plt.xticks(rotation=45)\n        plt.tight_layout()\n        return ax\n    except Exception as e:\n        raise ValueError(\"Error generating the data or plot\") from e\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_value (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 37, in test_value\nAssertionError: Lists differ: [81, 14, 3, 94, 35, 31, 28, 17, 94, 13, 86[69 chars], 69] != [63.942679845788376, 2.5010755222666936, 2[531 chars]8911]\n\nFirst differing element 0:\n81\n63.942679845788376\n\nDiff is 874 characters long. Set self.maxDiff to None to see it. : DataFrame contents should match the expected output\n\n----------------------------------------------------------------------\nRan 6 tests in 0.373s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\n\ndef task_func(data_url=\"http://lib.stat.cmu.edu/datasets/boston\", save_path=None):\n    try:\n        # Load the Boston Housing dataset from the URL\n        # The data format: first 22 lines header/info, then 506 rows (with 13 features + target)\n        raw_text = pd.read_csv(data_url, sep=\"\\s+\", skiprows=22, header=None)\n        \n        # The dataset is split into two parts, each row is 2 rows in file\n        # Each 2 consecutive rows form one row of data\n        data = pd.DataFrame(\n            np.hstack([raw_text.values[::2, :], raw_text.values[1::2, :]]),\n            columns=[\n                \"CRIM\", \"ZN\", \"INDUS\", \"CHAS\", \"NOX\", \"RM\", \"AGE\", \"DIS\",\n                \"RAD\", \"TAX\", \"PTRATIO\", \"B\", \"LSTAT\", \"MEDV\"\n            ]\n        )\n        \n        # Convert all columns to float\n        data = data.astype(float)\n\n        # Compute correlation matrix\n        corr = data.corr()\n\n        plt.figure(figsize=(10, 8))\n        ax = sns.heatmap(corr, annot=True, fmt=\".2f\", cmap=\"coolwarm\", square=True, cbar_kws={'shrink': .8})\n        plt.title(\"Correlation Heatmap of Boston Housing Dataset\")\n\n        if save_path is not None:\n            plt.savefig(save_path, bbox_inches=\"tight\")\n\n        return ax\n    except Exception as e:\n        raise ValueError(\"Error in generating or saving the plot\") from e\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_basic_functionality (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<bigcode>\", line 15, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 758, in __init__\n    mgr = ndarray_to_mgr(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/internals/construction.py\", line 337, in ndarray_to_mgr\n    _check_values_indices_shape_match(values, index, columns)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/internals/construction.py\", line 408, in _check_values_indices_shape_match\n    raise ValueError(f\"Shape of passed values is {passed}, indices imply {implied}\")\nValueError: Shape of passed values is (506, 22), indices imply (506, 14)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 5, in test_basic_functionality\n  File \"<bigcode>\", line 38, in task_func\nValueError: Error in generating or saving the plot\n\n======================================================================\nERROR: test_heatmap_features (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<bigcode>\", line 15, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 758, in __init__\n    mgr = ndarray_to_mgr(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/internals/construction.py\", line 337, in ndarray_to_mgr\n    _check_values_indices_shape_match(values, index, columns)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/internals/construction.py\", line 408, in _check_values_indices_shape_match\n    raise ValueError(f\"Shape of passed values is {passed}, indices imply {implied}\")\nValueError: Shape of passed values is (506, 22), indices imply (506, 14)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_heatmap_features\n  File \"<bigcode>\", line 38, in task_func\nValueError: Error in generating or saving the plot\n\n======================================================================\nERROR: test_heatmap_values (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<bigcode>\", line 15, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 758, in __init__\n    mgr = ndarray_to_mgr(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/internals/construction.py\", line 337, in ndarray_to_mgr\n    _check_values_indices_shape_match(values, index, columns)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/internals/construction.py\", line 408, in _check_values_indices_shape_match\n    raise ValueError(f\"Shape of passed values is {passed}, indices imply {implied}\")\nValueError: Shape of passed values is (506, 22), indices imply (506, 14)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_heatmap_values\n  File \"<bigcode>\", line 38, in task_func\nValueError: Error in generating or saving the plot\n\n======================================================================\nERROR: test_plot_appearance (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<bigcode>\", line 15, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 758, in __init__\n    mgr = ndarray_to_mgr(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/internals/construction.py\", line 337, in ndarray_to_mgr\n    _check_values_indices_shape_match(values, index, columns)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/internals/construction.py\", line 408, in _check_values_indices_shape_match\n    raise ValueError(f\"Shape of passed values is {passed}, indices imply {implied}\")\nValueError: Shape of passed values is (506, 22), indices imply (506, 14)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 19, in test_plot_appearance\n  File \"<bigcode>\", line 38, in task_func\nValueError: Error in generating or saving the plot\n\n----------------------------------------------------------------------\nRan 4 tests in 3.779s\n\nFAILED (errors=4)"}}
{"result": "```python\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nfrom sklearn.datasets import load_diabetes\n\ndef task_func():\n    plt.rcParams[\"font.family\"] = \"Arial\"\n    diabetes = load_diabetes()\n    df = pd.DataFrame(data=diabetes.data, columns=diabetes.feature_names)\n    pairplot = sns.pairplot(df)\n    fig = pairplot.fig\n    return fig, df\n```", "match": {"category": "timeout", "error": "Test execution timed out after 10 seconds"}}
{"result": "```python\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndef task_func(temperatures):\n    # Check if input is a DataFrame and not empty\n    if not isinstance(temperatures, pd.DataFrame) or temperatures.empty:\n        raise ValueError(\"Input must be a non-empty pandas DataFrame.\")\n    \n    # Check if required columns exist\n    expected_columns = {'Date', 'Temperature'}\n    if not expected_columns.issubset(temperatures.columns):\n        raise ValueError(f\"DataFrame must contain the columns: {expected_columns}\")\n    \n    # Ensure 'Date' column is datetime\n    if not pd.api.types.is_datetime64_any_dtype(temperatures['Date']):\n        try:\n            temperatures['Date'] = pd.to_datetime(temperatures['Date'])\n        except Exception:\n            raise ValueError(\"Could not convert 'Date' column to datetime.\")\n    \n    # Sort by Date if not sorted\n    temperatures = temperatures.sort_values('Date')\n    \n    # Plotting\n    fig, ax = plt.subplots()\n    plt.rcParams['font.family'] = 'Arial'\n    ax.plot(temperatures['Date'], temperatures['Temperature'], marker='o')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Temperature (\u00b0C)')\n    ax.set_title('Daily Temperatures in New York')\n    fig.autofmt_xdate()\n    \n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_basic_functionality (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_basic_functionality\n  File \"<bigcode>\", line 13, in task_func\nValueError: DataFrame must contain the columns: {'Temperature', 'Date'}\n\n======================================================================\nERROR: test_data_on_plot (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 23, in test_data_on_plot\n  File \"<bigcode>\", line 13, in task_func\nValueError: DataFrame must contain the columns: {'Temperature', 'Date'}\n\n======================================================================\nERROR: test_plot_labels_and_title (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_plot_labels_and_title\n  File \"<bigcode>\", line 13, in task_func\nValueError: DataFrame must contain the columns: {'Temperature', 'Date'}\n\n======================================================================\nERROR: test_value_consistency (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 33, in test_value_consistency\n  File \"<bigcode>\", line 13, in task_func\nValueError: DataFrame must contain the columns: {'Temperature', 'Date'}\n\n----------------------------------------------------------------------\nRan 6 tests in 0.015s\n\nFAILED (errors=4)"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom itertools import cycle\ndef task_func(df, groups=['A', 'B', 'C', 'D', 'E']):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input 'df' is not a pandas DataFrame.\")\n    required_cols = {'group', 'date', 'value'}\n    if not required_cols.issubset(df.columns):\n        raise ValueError(f\"DataFrame must contain columns: {required_cols}\")\n    \n    fig, ax = plt.subplots()\n    colors = cycle(plt.rcParams['axes.prop_cycle'].by_key()['color'])\n    \n    for group, color in zip(groups, colors):\n        group_df = df[df['group'] == group]\n        if group_df.empty:\n            continue\n        # Convert dates to ordinals\n        ordinals = pd.to_datetime(group_df['date']).map(lambda d: d.toordinal())\n        ax.scatter(ordinals, group_df['value'], label=group, color=color)\n    \n    ax.set_title('Scatterplot of Values for Each Group Over Time')\n    ax.set_xlabel('Date (ordinal)')\n    ax.set_ylabel('Value')\n    ax.legend()\n    \n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndef task_func(df):\n    if df.empty:\n        raise ValueError(\"Dataframe is empty.\")\n    required_cols = set(df.columns)\n    if 'date' not in required_cols:\n        raise ValueError(\"Dataframe missing required 'date' column.\")\n    if not pd.api.types.is_datetime64_any_dtype(df['date']):\n        raise ValueError(\"'date' column is not in datetime format.\")\n    \n    # Convert 'date' to ordinal\n    df = df.copy()\n    df['date_ordinal'] = df['date'].map(lambda d: d.toordinal())\n\n    # Prepare columns for correlation matrix and pairplot\n    cols_for_corr = df.select_dtypes(include=['number']).columns.tolist()\n    if 'date_ordinal' not in cols_for_corr:\n        cols_for_corr.append('date_ordinal')\n    df_corr = df[cols_for_corr]\n\n    # Correlation matrix\n    corr = df_corr.corr()\n\n    fig, ax = plt.subplots(figsize=(8, 6))\n    sns.heatmap(corr, annot=True, fmt=\".2f\", cmap='coolwarm', ax=ax)\n    ax.set_title('Correlation Matrix')\n\n    # Pair plot\n    pairgrid = sns.pairplot(df_corr)\n\n    return fig, pairgrid\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a valid DataFrame.\")\n    if 'date' not in df.columns or 'value' not in df.columns:\n        raise ValueError(\"DataFrame must contain 'date' and 'value' columns.\")\n    if not pd.api.types.is_datetime64_any_dtype(df['date']):\n        raise ValueError(\"'date' column must be in datetime format.\")\n\n    X = df['date'].map(pd.Timestamp.toordinal).values.reshape(-1, 1)\n    y = df['value'].values\n\n    model = LinearRegression()\n    model.fit(X, y)\n    y_pred = model.predict(X)\n\n    fig, ax = plt.subplots()\n    ax.scatter(X, y, label='Original Values')\n    ax.plot(X, y_pred, color='red', label='Predicted Values')\n    ax.set_title('Value vs Date (Linear Regression Prediction)')\n    ax.set_xlabel('Date (ordinal)')\n    ax.set_ylabel('Value')\n    ax.legend()\n\n    return model, y_pred, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\n\ndef task_func(df, n_clusters=3, random_state=0):\n    if df.empty or not {'date', 'value'}.issubset(df.columns):\n        raise ValueError(\"DataFrame is empty or lacks required columns 'date' and 'value'.\")\n    \n    df = df.copy()\n    # Convert 'date' to datetime if not already\n    if not pd.api.types.is_datetime64_any_dtype(df['date']):\n        df['date'] = pd.to_datetime(df['date'])\n    \n    # Convert to ordinal\n    df['Date (ordinal)'] = df['date'].apply(lambda x: x.toordinal())\n    \n    X = df[['Date (ordinal)', 'value']].values\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state)\n    df['cluster'] = kmeans.fit_predict(X)\n    \n    fig, ax = plt.subplots()\n    scatter = ax.scatter(df['Date (ordinal)'], df['value'], c=df['cluster'], cmap='viridis', alpha=0.7)\n    ax.set_xlabel('Date (ordinal)')\n    ax.set_ylabel('Value')\n    ax.set_title('KMeans Clustering of Value vs Date')\n    \n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n\ndef task_func(df, freq='D', decomposition_model='multiplicative'):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df must be a pandas DataFrame.\")\n    if 'value' not in df.columns:\n        raise ValueError(\"DataFrame must contain a 'value' column.\")\n    if not pd.api.types.is_numeric_dtype(df['value']):\n        raise ValueError(\"'value' column must be numeric.\")\n\n    if not isinstance(freq, str) or freq.strip() == '':\n        raise ValueError(\"freq must be a non-empty string representing a valid frequency.\")\n    \n    if decomposition_model not in ['additive', 'multiplicative']:\n        raise ValueError(\"decomposition_model must be 'additive' or 'multiplicative'.\")\n\n    # Validate freq by attempting to create a date_range\n    try:\n        pd.date_range(start='2000-01-01', periods=3, freq=freq)\n    except Exception:\n        raise ValueError(\"freq must be a valid pandas frequency string.\")\n\n    df = df.copy()\n    if df.index.is_all_dates:\n        ts = df['value']\n    else:\n        # If index is not datetime, try to convert\n        try:\n            df.index = pd.to_datetime(df.index)\n            ts = df['value']\n        except Exception:\n            raise ValueError(\"DataFrame index must be datetime or convertible to datetime.\")\n\n    ts = ts.asfreq(freq)\n\n    # Seasonal decompose expects no missing data; interpolate or drop\n    if ts.isnull().any():\n        ts = ts.interpolate()\n    if ts.isnull().any():\n        ts = ts.dropna()\n\n    decomp = seasonal_decompose(ts, model=decomposition_model, period=pd.Timedelta(freq).n if hasattr(pd.Timedelta(freq), 'n') else None)\n    fig, ax = plt.subplots(figsize=(10,8))\n    decomp.plot(ax=ax)\n    plt.close(fig)\n    return decomp, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_additive_model (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 54, in test_additive_model\n  File \"<bigcode>\", line 27, in task_func\nAttributeError: 'RangeIndex' object has no attribute 'is_all_dates'. Did you mean: '_is_all_dates'?\n\n======================================================================\nERROR: test_component_shapes (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 48, in test_component_shapes\n  File \"<bigcode>\", line 27, in task_func\nAttributeError: 'RangeIndex' object has no attribute 'is_all_dates'. Did you mean: '_is_all_dates'?\n\n======================================================================\nERROR: test_components_existence (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 42, in test_components_existence\n  File \"<bigcode>\", line 27, in task_func\nAttributeError: 'RangeIndex' object has no attribute 'is_all_dates'. Did you mean: '_is_all_dates'?\n\n======================================================================\nERROR: test_insufficient_data (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 39, in test_insufficient_data\n  File \"<bigcode>\", line 27, in task_func\nAttributeError: 'RangeIndex' object has no attribute 'is_all_dates'. Did you mean: '_is_all_dates'?\n\n======================================================================\nERROR: test_missing_values (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 77, in test_missing_values\n  File \"<bigcode>\", line 27, in task_func\nAttributeError: 'RangeIndex' object has no attribute 'is_all_dates'. Did you mean: '_is_all_dates'?\n\n======================================================================\nERROR: test_return_type (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 15, in test_return_type\n  File \"<bigcode>\", line 27, in task_func\nAttributeError: 'RangeIndex' object has no attribute 'is_all_dates'. Did you mean: '_is_all_dates'?\n\n----------------------------------------------------------------------\nRan 11 tests in 0.019s\n\nFAILED (errors=6)"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df, items=None, locations=None):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"'df' must be a pandas DataFrame.\")\n    if 'Item' not in df.columns or 'Location' not in df.columns:\n        raise ValueError(\"'df' must contain 'Item' and 'Location' columns.\")\n    \n    default_items = df['Item'].unique().tolist()\n    default_locations = df['Location'].unique().tolist()\n    \n    if items is None:\n        items = default_items\n    if locations is None:\n        locations = default_locations\n    \n    # Filter the dataframe based on specified items and locations\n    filtered_df = df[(df['Item'].isin(items)) & (df['Location'].isin(locations))]\n    \n    # Create a pivot table counting occurrences of each item per location\n    pivot = filtered_df.pivot_table(index='Item', columns='Location', aggfunc='size', fill_value=0)\n    \n    # Reindex to ensure all items and locations are represented (with zero if missing)\n    pivot = pivot.reindex(index=items, columns=locations, fill_value=0)\n    \n    ax = pivot.plot(kind='bar', stacked=False)\n    ax.set_xlabel('Item')\n    ax.set_ylabel('Count')\n    ax.set_title('Distribution of Items per Location')\n    ax.legend(title='Location', bbox_to_anchor=(1.05, 1), loc='upper left')\n    plt.tight_layout()\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_plot_title_and_labels (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 44, in test_plot_title_and_labels\nAssertionError: 'Distribution of Items per Location' != 'Item Distribution by Location'\n- Distribution of Items per Location\n+ Item Distribution by Location\n\n\n======================================================================\nFAIL: test_value (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_value\nAssertionError: Lists differ: [[2, 0, 0, 0, 0], [0, 1, 1, 0, 0], [0, 1, 1,[36 chars], 1]] != [[2.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 1.0, [86 chars]1.0]]\n\nFirst differing element 2:\n[0, 1, 1, 0, 0]\n[0.0, 0.0, 0.0, 1.0, 0.0]\n\n- [[2, 0, 0, 0, 0],\n-  [0, 1, 1, 0, 0],\n-  [0, 1, 1, 0, 0],\n-  [0, 0, 0, 1, 0],\n-  [0, 0, 0, 0, 1]]\n+ [[2.0, 0.0, 0.0, 0.0, 0.0],\n+  [0.0, 1.0, 1.0, 0.0, 0.0],\n+  [0.0, 0.0, 0.0, 1.0, 0.0],\n+  [0.0, 1.0, 1.0, 0.0, 0.0],\n+  [0.0, 0.0, 0.0, 0.0, 1.0]] : DataFrame contents should match the expected output\n\n----------------------------------------------------------------------\nRan 5 tests in 0.281s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    if 'Date' not in df.columns or 'Sales' not in df.columns:\n        raise ValueError(\"DataFrame must contain 'Date' and 'Sales' columns.\")\n    if df.empty:\n        raise ValueError(\"DataFrame has no data to plot.\")\n    # Ensure 'Date' is datetime\n    df = df.copy()\n    df['Date'] = pd.to_datetime(df['Date'], errors='coerce')\n    df = df.dropna(subset=['Date', 'Sales'])\n    if df.empty:\n        raise ValueError(\"DataFrame has no valid 'Date' and 'Sales' data to plot.\")\n    daily_turnover = df.groupby('Date')['Sales'].sum().sort_index()\n    if daily_turnover.empty:\n        raise ValueError(\"No sales data to plot after grouping.\")\n    fig, ax = plt.subplots()\n    ax.plot(daily_turnover.index, daily_turnover.values, marker='o', linestyle='-')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Daily Turnover')\n    ax.set_title('Daily Turnover Line Chart')\n    ax.grid(True)\n    fig.autofmt_xdate()\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_plot_title_and_labels (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 42, in test_plot_title_and_labels\nAssertionError: 'Daily Turnover Line Chart' != 'Daily Turnover'\n- Daily Turnover Line Chart\n+ Daily Turnover\n\n\n----------------------------------------------------------------------\nRan 6 tests in 0.127s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    required_cols = {'Date', 'Time', 'Temperature'}\n    if not required_cols.issubset(df.columns):\n        raise ValueError(\"DataFrame must contain 'Date', 'Time', and 'Temperature' columns\")\n    pivot_df = df.pivot(index='Time', columns='Date', values='Temperature')\n    ax = sns.heatmap(pivot_df, cmap='coolwarm')\n    plt.tight_layout()\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_plot_title (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 34, in test_plot_title\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_return_value (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_return_value\nAssertionError: Lists differ: [28, 18, 4, 32, -3, 10, 28, 8, 12, 0, 0, 13,[1354 chars], 18] != [28.0, 18.0, 4.0, 32.0, -3.0, 10.0, 28.0, 8.[2119 chars]18.0]\n\nFirst differing element 59:\n-9\n0.0\n\nSecond list contains 7 additional elements.\nFirst extra element 365:\n6.0\n\nDiff is 6271 characters long. Set self.maxDiff to None to see it. : DataFrame contents should match the expected output\n\n----------------------------------------------------------------------\nRan 6 tests in 0.594s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a pandas DataFrame\")\n    if 'Status' not in df.columns:\n        raise ValueError(\"DataFrame does not contain 'Status' column\")\n    counts = df['Status'].value_counts()\n    fig, ax = plt.subplots()\n    ax.pie(counts, labels=counts.index, autopct='%1.1f%%', startangle=90)\n    ax.set_title('Status Distribution')\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport json\nfrom collections import Counter\nimport random\ndef task_func(my_dict, keys):\n    if len(set(keys)) != 10:\n        raise ValueError(\"The 'keys' parameter must contain exactly 10 unique elements.\")\n\n    for key in keys:\n        my_dict[key] = random.randint(1, 100)\n\n    json_path = 'updated_dictionary.json'\n    txt_path = 'key_frequencies.txt'\n\n    with open(json_path, 'w') as json_file:\n        json.dump(my_dict, json_file)\n\n    counts = Counter(keys)\n    with open(txt_path, 'w') as txt_file:\n        for key, count in counts.items():\n            txt_file.write(f\"{key}: {count}\\n\")\n\n    return my_dict, json_path, txt_path\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    arr = my_dict.get('array')\n    if not isinstance(arr, np.ndarray):\n        raise TypeError(\"The value of 'array' key is not a numpy array\")\n    scaler = MinMaxScaler()\n    # MinMaxScaler expects 2D array, so reshape if necessary\n    arr_2d = arr.reshape(-1, 1)\n    normalized = scaler.fit_transform(arr_2d).flatten()\n    my_dict['normalized_array'] = normalized\n    return my_dict\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_key_error_raise (builtins.TestCases)\nTest that a KeyError is raised if 'array' key is missing.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 38, in test_key_error_raise\n  File \"<bigcode>\", line 8, in task_func\nTypeError: The value of 'array' key is not a numpy array\n\n----------------------------------------------------------------------\nRan 9 tests in 0.009s\n\nFAILED (errors=1)"}}
{"result": "```python\nimport numpy as np\nfrom scipy.stats import mode\nfrom scipy.stats import entropy\n\ndef task_func(numbers):\n    if not numbers:\n        raise ValueError(\"Input list 'numbers' is empty\")\n    arr = np.array(numbers)\n    m = mode(arr, axis=None)\n    counts = np.bincount(arr) if np.issubdtype(arr.dtype, np.integer) else np.histogram(arr, bins='auto')[0]\n    ent = entropy(counts[counts > 0], base=2)\n    return {'mode': m.mode[0], 'entropy': ent}\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_entropy_calculation (builtins.TestCases)\nTest that the entropy is correctly calculated.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 18, in test_entropy_calculation\nAssertionError: 1.5 != 1.9056390622295662 within 7 places (0.40563906222956625 difference)\n\n----------------------------------------------------------------------\nRan 7 tests in 0.004s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(mu, sigma, sample_size):\n    samples = np.random.normal(loc=mu, scale=sigma, size=sample_size)\n    plt.hist(samples, bins=30, alpha=0.75, color='blue')\n    plt.xlabel(\"Sample values\")\n    plt.ylabel(\"Frequency\")\n    plt.title(\"Histogram of Generated Samples\")\n    plt.show()\n    return samples\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_mock_random_normal (builtins.TestCases)\nTest the function with a mock of np.random.normal.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 38, in test_mock_random_normal\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 941, in assert_called_once_with\n    return self.assert_called_with(*args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 929, in assert_called_with\n    raise AssertionError(_error_message()) from cause\nAssertionError: expected call not found.\nExpected: normal(0, 1, 1000)\nActual: normal(loc=0, scale=1, size=1000)\n\n----------------------------------------------------------------------\nRan 6 tests in 0.190s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nfrom random import choice, seed as set_seed\n\ndef task_func(num_of_students, seed=42, name_list=None, gender_list=None, age_range=(15, 20), score_range=(50, 100)):\n    if num_of_students <= 0:\n        raise ValueError(\"num_of_students must be positive.\")\n    \n    if name_list is None:\n        name_list = ['Alice', 'Bob', 'Charlie', 'David', 'Eva', 'Fiona', 'George', 'Helen']\n    if gender_list is None:\n        gender_list = ['Male', 'Female']\n    \n    set_seed(seed)\n    np.random.seed(seed)\n    \n    names = [choice(name_list) for _ in range(num_of_students)]\n    genders = [choice(gender_list) for _ in range(num_of_students)]\n    ages = np.random.randint(age_range[0], age_range[1] + 1, size=num_of_students)\n    scores = np.random.randint(score_range[0], score_range[1] + 1, size=num_of_students)\n    \n    df = pd.DataFrame({\n        'Name': names,\n        'Age': ages,\n        'Gender': genders,\n        'Score': scores\n    })\n    \n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_with_seed (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 9, in test_with_seed\nAssertionError: Lists differ: ['Bob,18,Male,88', 'Alice,19,Male,68', 'Eva[50 chars],60'] != ['John,18,Male,78', 'Sara,17,Male,57', 'Mik[49 chars],60']\n\nFirst differing element 0:\n'Bob,18,Male,88'\n'John,18,Male,78'\n\n- ['Bob,18,Male,88',\n?   ^ ^         ^\n\n+ ['John,18,Male,78',\n?   ^ ^^         ^\n\n-  'Alice,19,Male,68',\n-  'Eva,17,Male,72',\n?   ^^           -\n\n+  'Sara,17,Male,57',\n?   ^^^          +\n\n-  'David,19,Female,60',\n-  'David,19,Male,60']\n+  'Mike,19,Male,70',\n+  'John,16,Male,68',\n+  'Nick,17,Female,60'] : DataFrame contents should match the expected output\n\n----------------------------------------------------------------------\nRan 8 tests in 0.013s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport os\nimport shutil\ndef task_func(directory, backup_directory):\n    if not os.path.exists(backup_directory):\n        os.makedirs(backup_directory)\n    copied_files = []\n    for filename in os.listdir(directory):\n        if filename.lower().endswith('.json'):\n            src_path = os.path.join(directory, filename)\n            dst_path = os.path.join(backup_directory, filename)\n            shutil.copy2(src_path, dst_path)\n            copied_files.append(dst_path)\n    return copied_files\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func():\n    x = np.linspace(-10, 10, 400)\n    y = x ** 2\n    plt.plot(x, y)\n    plt.title('y = x^2')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.grid(True)\n    plt.show()\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom datetime import datetime, timedelta\nfrom random import randint, seed as random_seed\n\ndef task_func(start_date=datetime(2020, 1, 1), end_date=datetime(2020, 12, 31), seed=42):\n    if not isinstance(start_date, datetime) or not isinstance(end_date, datetime):\n        raise ValueError(\"'start_date' and 'end_date' must be datetime.datetime instances\")\n    if start_date > end_date:\n        raise ValueError(\"'start_date' must not be later than 'end_date'\")\n    \n    random_seed(seed)\n    \n    total_days = (end_date - start_date).days + 1  # inclusive of both start and end\n    dates = []\n    for _ in range(total_days):\n        rand_day_offset = randint(0, total_days - 1)\n        rand_date = start_date + timedelta(days=rand_day_offset)\n        dates.append(rand_date)\n    \n    return pd.Series(dates)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_reproducibility_with_seed (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 15, in test_reproducibility_with_seed\nAssertionError: Lists differ: ['202[5056 chars]11-26', '2020-06-02', '2020-08-22', '2020-06-10', '2020-02-07'] != ['202[5056 chars]11-26', '2020-06-02', '2020-08-22', '2020-06-10']\n\nFirst list contains 1 additional elements.\nFirst extra element 365:\n'2020-02-07'\n\nDiff is 6275 characters long. Set self.maxDiff to None to see it. : DataFrame contents should match the expected output\n\n======================================================================\nFAIL: test_series_length (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_series_length\nAssertionError: 10 != 9\n\n----------------------------------------------------------------------\nRan 6 tests in 0.015s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(my_list, seed=42):\n    if not isinstance(my_list, list):\n        raise TypeError(\"my_list must be a list\")\n    my_list.append(\"12\")\n\n    categories = ['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports']\n    np.random.seed(seed)\n    sales_data = np.random.randint(100, 1000, size=len(categories))\n    df = pd.DataFrame({'Category': categories, 'Sales': sales_data})\n\n    fig, ax = plt.subplots()\n    df.plot.bar(x='Category', y='Sales', ax=ax, legend=False)\n    ax.set_ylabel('Sales')\n    ax.set_title('Simulated Sales Data')\n\n    return df, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_output_types (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 17, in test_output_types\nAssertionError: Lists differ: ['Electronics,202', 'Fashion,535', 'Home & Kitchen,960'[28 chars]206'] != ['Electronics,1605', 'Fashion,370', 'Home & Kitchen,513[29 chars]663']\n\nFirst differing element 0:\n'Electronics,202'\n'Electronics,1605'\n\n- ['Electronics,202',\n?               ^ ^\n\n+ ['Electronics,1605',\n?               ^^ ^\n\n-  'Fashion,535',\n?           - ^\n\n+  'Fashion,370',\n?            ^^\n\n-  'Home & Kitchen,960',\n?                  ^^^\n\n+  'Home & Kitchen,513',\n?                  ^^^\n\n-  'Automotive,370',\n?              ^^\n\n+  'Automotive,120',\n?              ^^\n\n-  'Sports,206']\n?          --\n\n+  'Sports,663']\n?           ++\n : DataFrame contents should match the expected output\n\n======================================================================\nFAIL: test_plot_title (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_plot_title\nAssertionError: 'Simulated Sales Data' != 'Category-wise Sales Data'\n- Simulated Sales Data\n+ Category-wise Sales Data\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.175s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport numpy as np\nimport random\ndef task_func(my_list):\n    rand_int = random.randint(0, 100)\n    my_list.append(rand_int)\n    size = sum(my_list)\n    return np.random.random(size)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_mock_random_array (builtins.TestCases)\nTest the function with mocks of randint and np.random.rand to control the randomness.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 34, in test_mock_random_array\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 940, in assert_called_once_with\n    raise AssertionError(msg)\nAssertionError: Expected 'rand' to be called once. Called 0 times.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.006s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pandas as pd\nimport os\nimport glob\ndef task_func(my_list, file_dir='./data_files/', file_ext='.csv'):\n    if not isinstance(my_list, list):\n        raise TypeError(\"my_list must be a list\")\n    my_list.append(12)\n    total_files = sum(my_list)\n    pattern = os.path.join(file_dir, f\"*{file_ext}\")\n    all_files = sorted(glob.glob(pattern))\n    if not all_files:\n        raise FileNotFoundError(f\"No files found in directory {file_dir} with extension {file_ext}\")\n    files_to_concat = all_files[:total_files]\n    df_list = [pd.read_csv(f) for f in files_to_concat]\n    return pd.concat(df_list, ignore_index=True)\n```", "match": {"category": "success"}}
{"result": "```python\nfrom random import randint, seed as random_seed\nimport time\nimport matplotlib.pyplot as plt\ndef task_func(my_list, size=100, seed=100):\n    if not isinstance(my_list, list):\n        raise TypeError(\"my_list must be a list\")\n    if any(not isinstance(x, (int, float)) for x in my_list):\n        raise ValueError(\"my_list must contain only numeric elements (int or float)\")\n\n    my_list.append(12)\n    length = min(int(sum(my_list)), size)\n\n    random_seed(seed)\n    start = time.time()\n    rand_nums = [randint(1, 100) for _ in range(length)]\n    elapsed = time.time() - start\n\n    fig, ax = plt.subplots()\n    ax.hist(rand_nums, bins=range(1, 102), edgecolor='black', align='left')\n    ax.set_xlabel('Number')\n    ax.set_ylabel('Frequency')\n\n    return elapsed, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_output_types (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 11, in test_output_types\nAssertionError: Lists differ: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0[453 chars] 0.0] != [2.0, 2.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0[53 chars] 2.0]\n\nFirst differing element 0:\n0.0\n2.0\n\nFirst list contains 80 additional elements.\nFirst extra element 20:\n0.0\n\nDiff is 928 characters long. Set self.maxDiff to None to see it. : DataFrame contents should match the expected output\n\n======================================================================\nFAIL: test_plot_title (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_plot_title\nAssertionError: '' != 'Histogram of Random Numbers'\n+ Histogram of Random Numbers\n\n----------------------------------------------------------------------\nRan 6 tests in 0.308s\n\nFAILED (failures=2)"}}
{"result": "```python\nfrom collections import defaultdict\nimport itertools\nimport json\nimport random\ndef task_func(LETTERS, n):\n    combos = itertools.combinations(LETTERS, n)\n    counts_list = []\n    for combo in combos:\n        letter_count = defaultdict(int)\n        for letter in combo:\n            letter_count[letter] += 1\n        counts_list.append(dict(letter_count))\n    filename = f\"prefix_{random.randint(0, 100)}.json\"\n    with open(filename, \"w\") as f:\n        json.dump(counts_list, f)\n    return filename\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_combination_length (builtins.TestCases)\nTest with different lengths of combinations.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 33, in test_combination_length\nAttributeError: 'list' object has no attribute 'values'\n\n======================================================================\nFAIL: test_file_content (builtins.TestCases)\nTest the correctness of the file content.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 25, in test_file_content\nAssertionError: [{'a': 1, 'b': 1}, {'a': 1, 'c': 1}, {'a': 1, 'd': 1}, {'a': 1, 'e': 1}, {'b': 1, 'c': 1}, {'b': 1, 'd': 1}, {'b': 1, 'e': 1}, {'c': 1, 'd': 1}, {'c': 1, 'e': 1}, {'d': 1, 'e': 1}] is not an instance of <class 'dict'>\n\n======================================================================\nFAIL: test_return_type (builtins.TestCases)\nTest that the function returns a string.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 13, in test_return_type\nAssertionError: 'prefix_42.json' != 'letter_combinations_42.json'\n- prefix_42.json\n+ letter_combinations_42.json\n\n\n----------------------------------------------------------------------\nRan 4 tests in 0.007s\n\nFAILED (failures=2, errors=1)"}}
{"result": "```python\nimport pandas as pd\nfrom random import randint, seed as random_seed\nimport statistics\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(animals=None, seed=42):\n    if animals is None:\n        animals = ['Lion', 'Tiger', 'Bear', 'Elephant', 'Giraffe']\n    random_seed(seed)\n    \n    stats_list = []\n    counts_all = []\n    for animal in animals:\n        counts = [randint(1, 100) for _ in range(10)]\n        counts_all.append((animal, counts))\n        mean_val = statistics.mean(counts)\n        median_val = statistics.median(counts)\n        stddev_val = statistics.stdev(counts)\n        stats_list.append({\n            'Animal': animal,\n            'Mean': mean_val,\n            'Median': median_val,\n            'Standard Deviation': stddev_val\n        })\n    df_stats = pd.DataFrame(stats_list)\n    \n    # Plot bar chart of counts for each animal (sum of their 10 counts)\n    counts_sum = [sum(c[1]) for c in counts_all]\n    plt.figure(figsize=(8,5))\n    plt.bar(animals, counts_sum, color='skyblue')\n    plt.xlabel('Animal')\n    plt.ylabel('Total Count (Sum of 10 samples)')\n    plt.title('Total Counts of Animals in Zoo')\n    plt.grid(axis='y', linestyle='--', alpha=0.7)\n    plt.tight_layout()\n    plt.show()\n    \n    return df_stats\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_positive_counts (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Mode'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_positive_counts\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Mode'\n\n======================================================================\nFAIL: test_default_animals (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_default_animals\nAssertionError: Lists differ: ['Lion', 'Tiger', 'Bear', 'Elephant', 'Giraffe'] != ['Lion', 'Elephant', 'Tiger', 'Giraffe', 'Panda']\n\nFirst differing element 1:\n'Tiger'\n'Elephant'\n\n- ['Lion', 'Tiger', 'Bear', 'Elephant', 'Giraffe']\n+ ['Lion', 'Elephant', 'Tiger', 'Giraffe', 'Panda']\n\n======================================================================\nFAIL: test_statistics_columns (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 23, in test_statistics_columns\nAssertionError: Lists differ: ['Animal', 'Mean', 'Median', 'Standard Deviation'] != ['Animal', 'Mean', 'Median', 'Mode', 'Standard Deviation']\n\nFirst differing element 3:\n'Standard Deviation'\n'Mode'\n\nSecond list contains 1 additional elements.\nFirst extra element 4:\n'Standard Deviation'\n\n- ['Animal', 'Mean', 'Median', 'Standard Deviation']\n+ ['Animal', 'Mean', 'Median', 'Mode', 'Standard Deviation']\n?                              ++++++++\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.263s\n\nFAILED (failures=2, errors=1)"}}
{"result": "```python\nimport os\nimport shutil\nimport glob\nimport hashlib\ndef task_func(ROOT_DIR, DEST_DIR, SPECIFIC_HASH):\n    if not os.path.exists(DEST_DIR):\n        os.makedirs(DEST_DIR)\n    def md5_hash(filepath):\n        hash_md5 = hashlib.md5()\n        with open(filepath, \"rb\") as f:\n            for chunk in iter(lambda: f.read(4096), b\"\"):\n                hash_md5.update(chunk)\n        return hash_md5.hexdigest()\n    moved_count = 0\n    for root, _, files in os.walk(ROOT_DIR):\n        for file in files:\n            filepath = os.path.join(root, file)\n            if md5_hash(filepath) == SPECIFIC_HASH:\n                dest_path = os.path.join(DEST_DIR, file)\n                # If file exists in DEST_DIR, rename to avoid overwrite\n                base, ext = os.path.splitext(file)\n                counter = 1\n                while os.path.exists(dest_path):\n                    dest_path = os.path.join(DEST_DIR, f\"{base}_{counter}{ext}\")\n                    counter += 1\n                shutil.move(filepath, dest_path)\n                moved_count += 1\n    return moved_count\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom random import randint\nimport math\ndef task_func(POINTS=100):\n    angles = np.random.uniform(0, 2*np.pi, POINTS)\n    x_steps = np.cos(angles)\n    y_steps = np.sin(angles)\n    x = np.cumsum(x_steps)\n    y = np.cumsum(y_steps)\n    \n    fig, ax = plt.subplots()\n    ax.plot(x, y, marker='o', markersize=3, linestyle='-', linewidth=1)\n    ax.set_title('2D Random Walk')\n    ax.set_xlabel('X')\n    ax.set_ylabel('Y')\n    ax.grid(True)\n    ax.axis('equal')\n    \n    return fig\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_plot_shown (builtins.TestCases)\nTest that plt.show() is called.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 55, in test_plot_shown\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 908, in assert_called_once\n    raise AssertionError(msg)\nAssertionError: Expected 'show' to have been called once. Called 0 times.\n\n======================================================================\nFAIL: test_starting_point (builtins.TestCases)\nTest that the walk starts at the origin.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 35, in test_starting_point\nAssertionError: 0.7996483135605279 != 0\n\n======================================================================\nFAIL: test_step_direction (builtins.TestCases)\nTest that each step moves in a valid direction according to the trigonometric calculation.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 49, in test_step_direction\nAssertionError: False is not true : Step from (-0.9562887396342946, -0.29242408664241787) to (-1.647587339288155, -1.0149932847934404) is not valid.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.025s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\ndef task_func(url='http://example.com'):\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n    except requests.ConnectionError as e:\n        raise ConnectionError(f\"Connection error occurred: {e}\")\n    except requests.HTTPError as e:\n        raise requests.HTTPError(f\"HTTP error occurred: {e}\")\n\n    soup = BeautifulSoup(response.content, \"html.parser\")\n    table = soup.find(\"table\")\n    if table is None:\n        raise ValueError(\"No table found on the page\")\n\n    headers = []\n    header_row = table.find(\"tr\")\n    if header_row:\n        th_cells = header_row.find_all(\"th\")\n        if th_cells:\n            headers = [th.get_text(strip=True) for th in th_cells]\n\n    rows = table.find_all(\"tr\")\n    data = []\n    for i, row in enumerate(rows):\n        # Skip header row if headers found\n        if i == 0 and headers:\n            continue\n        td_cells = row.find_all(\"td\")\n        if td_cells:\n            data.append([td.get_text(strip=True) for td in td_cells])\n    if not data:\n        raise ValueError(\"No table data found on the page\")\n\n    if headers and len(headers) == len(data[0]):\n        df = pd.DataFrame(data, columns=headers)\n    else:\n        df = pd.DataFrame(data)\n\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_empty_page (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 25, in test_empty_page\n  File \"<bigcode>\", line 14, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/bs4/__init__.py\", line 319, in __init__\n    for (self.markup, self.original_encoding, self.declared_html_encoding,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/bs4/builder/_htmlparser.py\", line 325, in prepare_markup\n    dammit = UnicodeDammit(markup, try_encodings, is_html=True,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/bs4/dammit.py\", line 445, in __init__\n    for encoding in self.detector.encodings:\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/bs4/dammit.py\", line 301, in encodings\n    self.declared_encoding = self.find_declared_encoding(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/bs4/dammit.py\", line 378, in find_declared_encoding\n    declared_encoding_match = xml_re.search(markup, endpos=xml_endpos)\nTypeError: expected string or bytes-like object\n\n======================================================================\nERROR: test_non_html_content (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 32, in test_non_html_content\n  File \"<bigcode>\", line 14, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/bs4/__init__.py\", line 319, in __init__\n    for (self.markup, self.original_encoding, self.declared_html_encoding,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/bs4/builder/_htmlparser.py\", line 325, in prepare_markup\n    dammit = UnicodeDammit(markup, try_encodings, is_html=True,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/bs4/dammit.py\", line 445, in __init__\n    for encoding in self.detector.encodings:\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/bs4/dammit.py\", line 301, in encodings\n    self.declared_encoding = self.find_declared_encoding(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/bs4/dammit.py\", line 378, in find_declared_encoding\n    declared_encoding_match = xml_re.search(markup, endpos=xml_endpos)\nTypeError: expected string or bytes-like object\n\n======================================================================\nERROR: test_return_type (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 11, in test_return_type\n  File \"<bigcode>\", line 14, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/bs4/__init__.py\", line 319, in __init__\n    for (self.markup, self.original_encoding, self.declared_html_encoding,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/bs4/builder/_htmlparser.py\", line 325, in prepare_markup\n    dammit = UnicodeDammit(markup, try_encodings, is_html=True,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/bs4/dammit.py\", line 445, in __init__\n    for encoding in self.detector.encodings:\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/bs4/dammit.py\", line 301, in encodings\n    self.declared_encoding = self.find_declared_encoding(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/bs4/dammit.py\", line 378, in find_declared_encoding\n    declared_encoding_match = xml_re.search(markup, endpos=xml_endpos)\nTypeError: expected string or bytes-like object\n\n======================================================================\nERROR: test_return_type_with_complex_data (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 59, in test_return_type_with_complex_data\n  File \"<bigcode>\", line 14, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/bs4/__init__.py\", line 319, in __init__\n    for (self.markup, self.original_encoding, self.declared_html_encoding,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/bs4/builder/_htmlparser.py\", line 325, in prepare_markup\n    dammit = UnicodeDammit(markup, try_encodings, is_html=True,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/bs4/dammit.py\", line 445, in __init__\n    for encoding in self.detector.encodings:\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/bs4/dammit.py\", line 301, in encodings\n    self.declared_encoding = self.find_declared_encoding(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/bs4/dammit.py\", line 378, in find_declared_encoding\n    declared_encoding_match = xml_re.search(markup, endpos=xml_endpos)\nTypeError: expected string or bytes-like object\n\n----------------------------------------------------------------------\nRan 6 tests in 0.015s\n\nFAILED (errors=4)"}}
{"result": "```python\nimport base64\nimport binascii\nimport os\nimport hashlib\ndef task_func(hex_str, salt_size):\n    data_bytes = binascii.unhexlify(hex_str)\n    salt = os.urandom(salt_size)\n    salted_data = data_bytes + salt\n    sha256_hash = hashlib.sha256(salted_data).digest()\n    encoded_salt = base64.b64encode(salt).decode('utf-8')\n    return (encoded_salt, sha256_hash)\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_various_hex_formats (builtins.TestCases)\nTest the function with various hex string formats.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 23, in test_various_hex_formats\n  File \"<bigcode>\", line 7, in task_func\nbinascii.Error: Non-hexadecimal digit found\n\n======================================================================\nFAIL: test_salt_and_hash_length (builtins.TestCases)\nTest the length of the salt and hash.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_salt_and_hash_length\nAssertionError: 32 != 64\n\n----------------------------------------------------------------------\nRan 5 tests in 0.003s\n\nFAILED (failures=1, errors=1)"}}
{"result": "```python\nimport base64\nimport binascii\nimport os\nimport hashlib\ndef task_func(hex_str, salt_size):\n    try:\n        data = binascii.unhexlify(hex_str)\n    except binascii.Error:\n        raise ValueError(\"Invalid hex string\")\n\n    salt = os.urandom(salt_size)\n    salted_data = data + salt\n    sha256_hash = hashlib.sha256(salted_data).hexdigest()\n    salt_b64 = base64.b64encode(salt).decode()\n    return (salt_b64, sha256_hash)\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_various_hex_formats (builtins.TestCases)\nTest the function with various hex string formats.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<bigcode>\", line 8, in task_func\nbinascii.Error: Non-hexadecimal digit found\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_various_hex_formats\n  File \"<bigcode>\", line 10, in task_func\nValueError: Invalid hex string\n\n----------------------------------------------------------------------\nRan 5 tests in 0.003s\n\nFAILED (errors=1)"}}
{"result": "```python\nimport binascii\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndef task_func(hex_str):\n    try:\n        # Remove all '\\x' or '0x' occurrences (case-insensitive) and any spaces\n        clean_hex = hex_str.replace('\\\\x', '').replace('\\\\X', '').replace('0x', '').replace('0X', '').replace(' ', '')\n        # Raise error if length is not even\n        if len(clean_hex) % 2 != 0:\n            raise ValueError(\"Invalid hex string length\")\n        # Convert to bytes\n        byte_data = binascii.unhexlify(clean_hex)\n    except (binascii.Error, ValueError):\n        raise ValueError(\"If 'hex_str' is not a valid hex string.\")\n\n    # Count frequency of each byte value\n    byte_vals, counts = np.unique(np.frombuffer(byte_data, dtype=np.uint8), return_counts=True)\n\n    # Create DataFrame with all byte values (0-255) for completeness\n    df_all = pd.DataFrame({'Byte Value': np.arange(256)})\n    df_freq = pd.DataFrame({'Byte Value': byte_vals, 'Frequency': counts})\n    df = pd.merge(df_all, df_freq, on='Byte Value', how='left').fillna(0)\n    df['Frequency'] = df['Frequency'].astype(int)\n\n    # Plot\n    fig, ax = plt.subplots(figsize=(10,5))\n    ax.bar(df['Byte Value'], df['Frequency'], color='blue')\n    ax.set_xlabel('Byte Value')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Byte Frequency Distribution')\n    ax.set_xlim(-1, 256)\n    ax.set_xticks(range(0, 256, 16))\n    ax.grid(axis='y', linestyle='--', alpha=0.7)\n\n    return (df, ax)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_alternative_format (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 32, in test_alternative_format\nAssertionError: 256 != 3\n\n======================================================================\nFAIL: test_empty_string (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_empty_string\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_valid_hex_string (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 9, in test_valid_hex_string\nAssertionError: 256 != 3\n\n----------------------------------------------------------------------\nRan 5 tests in 0.493s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame) or df.empty:\n        raise ValueError(\"Input must be a non-empty pandas DataFrame\")\n\n    last_col = df.columns[-1]\n    scaler = MinMaxScaler()\n    normalized_values = scaler.fit_transform(df[[last_col]])\n    \n    df_normalized = df.copy()\n    df_normalized[last_col] = normalized_values.flatten()\n    \n    fig, ax = plt.subplots()\n    ax.plot(df_normalized.index, df_normalized[last_col], marker='o')\n    ax.set_title(f'Normalized Data of {last_col}')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Normalized Value')\n    \n    return df_normalized, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df, bins=20):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n\n    last_col = df.columns[-1]\n    ax = df[last_col].plot(kind='hist', bins=bins)\n    ax.set_title('Histogram of ' + last_col)\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.impute import SimpleImputer\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame) or df.shape[1] == 0:\n        raise ValueError(\"Input must be a DataFrame with at least one column.\")\n    last_col = df.columns[-1]\n    imputer = SimpleImputer(strategy=\"mean\")\n    df_copy = df.copy()\n    df_copy[[last_col]] = imputer.fit_transform(df[[last_col]])\n    fig, ax = plt.subplots()\n    sns.boxplot(x=df_copy[last_col], ax=ax)\n    return df_copy, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_plot_title_and_labels (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_plot_title_and_labels\nAssertionError: '' != 'Boxplot of Last Column'\n+ Boxplot of Last Column\n\n----------------------------------------------------------------------\nRan 5 tests in 0.192s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    if df.empty:\n        raise ValueError(\"Input DataFrame is empty.\")\n    \n    pca = PCA(n_components=2)\n    components = pca.fit_transform(df.select_dtypes(include=[float, int]))\n    pc_df = pd.DataFrame(components, columns=['Principal Component 1', 'Principal Component 2'])\n    \n    fig, ax = plt.subplots()\n    ax.scatter(pc_df['Principal Component 1'], pc_df['Principal Component 2'])\n    ax.set_title('2 Component PCA')\n    ax.set_xlabel('Principal Component 1')\n    ax.set_ylabel('Principal Component 2')\n    \n    return pc_df, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom scipy.stats import skew\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame) or df.shape[1] == 0:\n        raise ValueError(\"Input must be a DataFrame with at least one column.\")\n    last_col = df.iloc[:, -1].dropna()\n    return float(skew(last_col))\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df, letters=list('ABCDEFGHIJKLMNOPQRSTUVWXYZ')):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df must be a pandas DataFrame\")\n    if 'Letters' not in df.columns:\n        raise ValueError(\"DataFrame must contain 'Letters' column\")\n    \n    freq = df['Letters'].value_counts().reindex(letters, fill_value=0)\n    \n    fig, ax = plt.subplots()\n    ax.bar(freq.index, freq.values)\n    ax.set_xlabel('Letters')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Letter Frequency')\n    \n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame) or df.empty:\n        raise ValueError(\"Input must be a non-empty DataFrame.\")\n    \n    numeric_cols = df.select_dtypes(include=[np.number]).columns\n    if len(numeric_cols) == 0:\n        raise ValueError(\"DataFrame has no numeric columns.\")\n    \n    axes = []\n    for col in numeric_cols:\n        fig, ax = plt.subplots()\n        ax.hist(df[col].dropna(), bins=10)\n        ax.set_title(col)\n        ax.set_xlabel('Value')\n        ax.set_ylabel('Frequency')\n        axes.append(ax)\n    return axes\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df, cols):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df must be a pandas DataFrame\")\n    if not isinstance(cols, list):\n        raise ValueError(\"cols must be a list\")\n    missing_cols = [col for col in cols if col not in df.columns]\n    if missing_cols:\n        raise ValueError(f\"Columns {missing_cols} do not exist in the dataframe\")\n    scaler = StandardScaler()\n    df_copy = df.copy()\n    df_copy[cols] = scaler.fit_transform(df_copy[cols])\n    return df_copy\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\nimport statistics\ndef task_func(rows, columns=['A', 'B', 'C', 'D', 'E', 'F'], seed=42):\n    if not isinstance(rows, int) or rows <= 0:\n        raise ValueError(\"rows must be a positive integer greater than 0\")\n    np.random.seed(seed)\n    data = np.random.randint(1, 101, size=(rows, len(columns)))\n    df = pd.DataFrame(data, columns=columns)\n    stats = {}\n    for col in columns:\n        col_data = df[col].tolist()\n        stats[col] = {\n            'mean': statistics.mean(col_data),\n            'median': statistics.median(col_data)\n        }\n    return df, stats\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func():\n    x = np.linspace(0, 2 * np.pi, 400)\n    y_sin = np.sin(x)\n    y_cos = np.cos(x)\n\n    fig, axs = plt.subplots(2, 1, figsize=(8, 6))\n\n    axs[0].plot(x, y_sin)\n    axs[0].set_title('Sine function')\n    axs[0].set_xlabel('x')\n    axs[0].set_ylabel('sin(x)')\n\n    axs[1].plot(x, y_cos)\n    axs[1].set_title('Cosine function')\n    axs[1].set_xlabel('x')\n    axs[1].set_ylabel('cos(x)')\n\n    fig.tight_layout()\n\n    return fig, axs\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func():\n    x = np.linspace(-10, 10, 400)\n    y = 2*x + 1\n    fig, ax = plt.subplots()\n    ax.plot(x, y, 'r-', label='y=2x+1')\n    x_sol = 2\n    y_sol = 2*x_sol + 1\n    ax.plot(x_sol, y_sol, 'go', label='solution at x=2')\n    ax.set_title('Solution of the equation y=2x+1 at x=2')\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_xlim(-10, 10)\n    # y limits auto adjusted based on the equation values over the range\n    y_min, y_max = np.min(y), np.max(y)\n    ax.set_ylim(y_min - 1, y_max + 1)\n    ax.legend()\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport ipaddress\nimport requests\n\ndef task_func(ip_range, timeout):\n    try:\n        network = ipaddress.ip_network(ip_range, strict=False)\n    except ValueError:\n        raise ValueError(\"Invalid IP range provided.\")\n    \n    active_ips = []\n    \n    for ip in network.hosts():\n        url = f\"http://{ip}\"\n        try:\n            response = requests.get(url, timeout=timeout)\n            if response.status_code == 200:\n                active_ips.append(str(ip))\n        except requests.RequestException:\n            continue\n    \n    return active_ips\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_active_server (builtins.TestCases)\nTest that the function correctly identifies and includes active servers in the IP range.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 31, in test_active_server\nAssertionError: Lists differ: ['192.168.1.1', '192.168.1.2'] != ['192.168.1.0', '192.168.1.1', '192.168.1.2', '192.168.1.3']\n\nFirst differing element 0:\n'192.168.1.1'\n'192.168.1.0'\n\nSecond list contains 2 additional elements.\nFirst extra element 2:\n'192.168.1.2'\n\n- ['192.168.1.1', '192.168.1.2']\n+ ['192.168.1.0', '192.168.1.1', '192.168.1.2', '192.168.1.3'] : The function should identify and include all active servers in the range.\n\n======================================================================\nFAIL: test_full_range_iteration (builtins.TestCases)\nTest that the function iterates over and makes a request to each IP in a complete /30 subnet.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 48, in test_full_range_iteration\nAssertionError: 2 != 4\n\n----------------------------------------------------------------------\nRan 5 tests in 0.005s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport csv\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range, csv_path):\n    network = IPv4Network(ip_range)\n    with open(csv_path, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        for ip in network.hosts():\n            writer.writerow([str(ip)])\n    return csv_path\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_csv_writer_usage (builtins.TestCases)\nTest that csv.DictWriter is used correctly.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 29, in test_csv_writer_usage\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 898, in assert_called\n    raise AssertionError(msg)\nAssertionError: Expected 'DictWriter' to have been called.\n\n======================================================================\nFAIL: test_csv_writing (builtins.TestCases)\nTest that the CSV writer writes the expected number of rows.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 42, in test_csv_writing\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 908, in assert_called_once\n    raise AssertionError(msg)\nAssertionError: Expected 'writeheader' to have been called once. Called 0 times.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.013s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    active_status = {}\n    network = IPv4Network(ip_range)\n    for ip in network.hosts():\n        ip_str = str(ip)\n        try:\n            # Use one ping packet, timeout 1 second (platform dependent)\n            # For Windows: '-n 1', for Linux/Mac: '-c 1'\n            # Let's detect platform:\n            import platform\n            param = '-n' if platform.system().lower() == 'windows' else '-c'\n            subprocess.run(['ping', param, '1', ip_str], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True)\n            active_status[ip_str] = True\n        except subprocess.CalledProcessError:\n            active_status[ip_str] = False\n        except Exception as e:\n            raise e\n    return active_status\n```", "match": {"category": "timeout", "error": "Test execution timed out after 10 seconds"}}
{"result": "```python\nimport socket\nfrom ipaddress import IPv4Network\nfrom threading import Thread\n\ndef task_func(ip_range, port):\n    result = {}\n    threads = []\n\n    def scan_ip(ip):\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.settimeout(1)\n        try:\n            s.connect((str(ip), port))\n            result[str(ip)] = True\n        except:\n            result[str(ip)] = False\n        finally:\n            s.close()\n    \n    for ip in IPv4Network(ip_range):\n        t = Thread(target=scan_ip, args=(ip,))\n        t.start()\n        threads.append(t)\n    for t in threads:\n        t.join()\n    return result\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(df: pd.DataFrame, column_name: str) -> pd.DataFrame:\n    le = LabelEncoder()\n    df[column_name] = le.fit_transform(df[column_name])\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nDEFAULT_COLUMNS = ['Element', 'Count']\ndef task_func(elements, include_index=False):\n    counts = [len(str(e)) for e in elements]\n    df = pd.DataFrame({'Element': elements, 'Count': counts})\n    if include_index:\n        df.insert(0, 'Index', range(len(elements)))\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(product_dict, product_keys):\n    # Filter products that are in product_keys and exist in product_dict\n    products = [k for k in product_keys if k in product_dict]\n\n    # Return empty DataFrame and None if no products found\n    if not products:\n        df_empty = pd.DataFrame(columns=['Product', 'Quantity', 'Price', 'Profit', 'Average Price', 'Average Profit'])\n        return df_empty, None\n\n    data = []\n    for p in products:\n        entry = product_dict[p]\n        qty = entry.get('quantity', 0)\n        price = entry.get('price', 0)\n        profit = entry.get('profit', 0)\n        data.append([p, qty, price, profit])\n\n    df = pd.DataFrame(data, columns=['Product', 'Quantity', 'Price', 'Profit'])\n\n    avg_price = df['Price'].mean()\n    avg_profit = df['Profit'].mean()\n\n    df['Average Price'] = avg_price\n    df['Average Profit'] = avg_profit\n\n    # Plot bar chart for profits\n    fig, ax = plt.subplots()\n    ax.bar(df['Product'], df['Profit'])\n    ax.set_xlabel('Product')\n    ax.set_ylabel('Profit')\n    ax.set_title('Profit per Product')\n\n    plt.close(fig)  # Prevent immediate display if in interactive environment\n\n    return df, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 14, in test_case_1\n  File \"<bigcode>\", line 18, in task_func\nAttributeError: 'list' object has no attribute 'get'\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 22, in test_case_2\n  File \"<bigcode>\", line 18, in task_func\nAttributeError: 'list' object has no attribute 'get'\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 42, in test_case_5\n  File \"<bigcode>\", line 18, in task_func\nAttributeError: 'list' object has no attribute 'get'\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 37, in test_case_4\nAssertionError: KeyError not raised\n\n----------------------------------------------------------------------\nRan 5 tests in 0.005s\n\nFAILED (failures=1, errors=3)"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_dict, data_keys):\n    # Filter keys present in data_dict\n    valid_keys = [k for k in data_keys if k in data_dict]\n    if not valid_keys:\n        raise ValueError(\"If no keys in `data_keys` are found in `data_dict`.\")\n    \n    # Create DataFrame from valid keys\n    df = pd.DataFrame({k: data_dict[k] for k in valid_keys})\n    \n    # Apply MinMaxScaler\n    scaler = MinMaxScaler()\n    scaled_values = scaler.fit_transform(df)\n    df_scaled = pd.DataFrame(scaled_values, columns=valid_keys)\n    \n    # Plot normalized data\n    fig, ax = plt.subplots()\n    df_scaled.plot(ax=ax, title=\"Normalized Data (MinMax Scaling)\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Normalized Value\")\n    plt.close(fig)  # To prevent immediate display if running interactively\n    \n    return df_scaled, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nfrom random import randint\n# Constants\nSTUDENTS = ['Joe', 'Amy', 'Mark', 'Sara', 'John', 'Emily', 'Zoe', 'Matt']\nCOURSES = ['Math', 'Physics', 'Chemistry', 'Biology', 'English', 'History', 'Geography', 'Computer Science']\ndef task_func():\n    data = {}\n    for student in STUDENTS:\n        grades = np.random.uniform(0, 100, len(COURSES))\n        data[student] = grades\n    df = pd.DataFrame(data, index=COURSES).T\n    df['Average'] = df.mean(axis=1)\n    df.index.name = 'Student'\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_all_students_included (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Name'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 30, in test_all_students_included\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Name'\n\n======================================================================\nERROR: test_average_grade_calculation (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Average Grade'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 26, in test_average_grade_calculation\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Average Grade'\n\n======================================================================\nFAIL: test_dataframe_columns (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 15, in test_dataframe_columns\nAssertionError: Lists differ: ['Math', 'Physics', 'Chemistry', 'Biology',[61 chars]age'] != ['Name', 'Math', 'Physics', 'Chemistry', 'B[75 chars]ade']\n\nFirst differing element 0:\n'Math'\n'Name'\n\nSecond list contains 1 additional elements.\nFirst extra element 9:\n'Average Grade'\n\n+ ['Name',\n- ['Math',\n? ^\n\n+  'Math',\n? ^\n\n   'Physics',\n   'Chemistry',\n   'Biology',\n   'English',\n   'History',\n   'Geography',\n   'Computer Science',\n-  'Average']\n+  'Average Grade']\n?          ++++++\n : DataFrame should have specific columns\n\n======================================================================\nFAIL: test_deterministic_grades (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 37, in test_deterministic_grades\nAssertionError: Lists differ: [43.207194935393936, 71.21410157875323, 69.[86 chars]8753] != [49, 97, 53, 5, 33, 65, 62, 51]\n\nFirst differing element 0:\n43.207194935393936\n49\n\nSecond list contains 1 additional elements.\nFirst extra element 7:\n51\n\n+ [49, 97, 53, 5, 33, 65, 62, 51]\n- [43.207194935393936,\n-  71.21410157875323,\n-  69.04212385299925,\n-  33.09693393242087,\n-  72.63049270333737,\n-  5.786444708430716,\n-  7.851711995988753] : The first row grades should be deterministic and match the expected pattern\n\n----------------------------------------------------------------------\nRan 5 tests in 0.023s\n\nFAILED (failures=2, errors=2)"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(data):\n    le = LabelEncoder()\n    encoded = le.fit_transform(data)\n    return pd.DataFrame({'Category': data, 'Encoded': encoded})\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport os\nimport glob\nimport mimetypes\ndef task_func(directory, file_pattern, suffix):\n    pattern = re.compile(file_pattern)\n    result = {}\n    search_pattern = os.path.join(directory, f\"*{suffix}\")\n    for filepath in glob.glob(search_pattern):\n        filename = os.path.basename(filepath)\n        if pattern.search(filename):\n            mime_type, _ = mimetypes.guess_type(filepath)\n            result[filename] = mime_type\n    return result\n```", "match": {"category": "timeout", "error": "Test execution timed out after 10 seconds"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\n# Constants\nCOLUMN_NAMES = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\n\ndef task_func(data):\n    df = pd.DataFrame(data, columns=COLUMN_NAMES[:len(data[0])])\n    df['Average'] = df.mean(axis=1)\n    fig, ax = plt.subplots()\n    ax.plot(df.index, df['Average'], marker='o', linestyle='-')\n    ax.set_xlabel('Row Index')\n    ax.set_ylabel('Average')\n    ax.set_title('Row Averages')\n    return df, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 15, in test_case_1\nAssertionError: 'Row Averages' != ''\n- Row Averages\n+ \n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.080s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\n\ndef task_func(data):\n    scaler = MinMaxScaler()\n    normalized_array = scaler.fit_transform(data)\n    df_normalized = pd.DataFrame(normalized_array, columns=data.columns, index=data.index)\n    df_normalized['Average'] = df_normalized.mean(axis=1)\n    \n    fig, ax = plt.subplots()\n    df_normalized['Average'].plot(kind='bar', ax=ax)\n    ax.set_ylabel('Average')\n    ax.set_title('Row Averages after MinMax Scaling')\n    \n    return df_normalized, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_case_1\n  File \"<bigcode>\", line 9, in task_func\nAttributeError: 'numpy.ndarray' object has no attribute 'columns'\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 16, in test_case_2\n  File \"<bigcode>\", line 9, in task_func\nAttributeError: 'numpy.ndarray' object has no attribute 'columns'\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_case_3\n  File \"<bigcode>\", line 9, in task_func\nAttributeError: 'numpy.ndarray' object has no attribute 'columns'\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 32, in test_case_4\n  File \"<bigcode>\", line 9, in task_func\nAttributeError: 'numpy.ndarray' object has no attribute 'columns'\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 40, in test_case_5\n  File \"<bigcode>\", line 9, in task_func\nAttributeError: 'numpy.ndarray' object has no attribute 'columns'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.013s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef task_func(data):\n    # Check if input is 2D array or DataFrame\n    if not (hasattr(data, \"shape\") and len(data.shape) == 2):\n        raise ValueError(\"Input data must be a 2D array or DataFrame\")\n    \n    df = pd.DataFrame(data)\n    \n    # Check numeric data\n    if not np.issubdtype(df.values.dtype, np.number):\n        # Check each element if dtype is object, raise if non-numeric\n        try:\n            df = df.apply(pd.to_numeric)\n        except Exception:\n            raise ValueError(\"Input data must contain only numeric values\")\n    \n    # Calculate average across each row\n    df[\"Average\"] = df.mean(axis=1)\n    \n    # Compute correlation matrix of original columns (exclude 'Average')\n    corr = df.iloc[:, :-1].corr()\n    \n    # Plot heatmap\n    fig, ax = plt.subplots()\n    sns.heatmap(corr, annot=True, fmt=\".2f\", cmap=\"coolwarm\", ax=ax)\n    \n    return df, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport json\nimport urllib.request\nimport urllib.parse\nimport gzip\n\ndef task_func(url_str, file_path):\n    with urllib.request.urlopen(url_str) as response:\n        data = response.read()\n    json_data = json.loads(data.decode('utf-8'))\n    with gzip.open(file_path, 'wt', encoding='utf-8') as f:\n        json.dump(json_data, f)\n    return file_path\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_gzip_file_opened_with_correct_path (builtins.TestCases)\nTest that the gzip file is opened with the correct path.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 46, in test_gzip_file_opened_with_correct_path\n  File \"<bigcode>\", line 10, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/json/__init__.py\", line 339, in loads\n    raise TypeError(f'the JSON object must be str, bytes or bytearray, '\nTypeError: the JSON object must be str, bytes or bytearray, not MagicMock\n\n======================================================================\nERROR: test_json_compression (builtins.TestCases)\nTest that JSON data is correctly fetched and compressed into a gzip file.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 15, in test_json_compression\n  File \"<bigcode>\", line 10, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/json/__init__.py\", line 339, in loads\n    raise TypeError(f'the JSON object must be str, bytes or bytearray, '\nTypeError: the JSON object must be str, bytes or bytearray, not MagicMock\n\n======================================================================\nERROR: test_response_read_called (builtins.TestCases)\nTest that the response's read method is called.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 57, in test_response_read_called\n  File \"<bigcode>\", line 10, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/json/__init__.py\", line 339, in loads\n    raise TypeError(f'the JSON object must be str, bytes or bytearray, '\nTypeError: the JSON object must be str, bytes or bytearray, not MagicMock\n\n======================================================================\nERROR: test_return_type_is_string (builtins.TestCases)\nTest that the function returns a string.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 35, in test_return_type_is_string\n  File \"<bigcode>\", line 10, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/json/__init__.py\", line 339, in loads\n    raise TypeError(f'the JSON object must be str, bytes or bytearray, '\nTypeError: the JSON object must be str, bytes or bytearray, not MagicMock\n\n----------------------------------------------------------------------\nRan 5 tests in 0.009s\n\nFAILED (errors=4)"}}
{"result": "```python\nimport struct\nimport io\nimport gzip\nimport numpy as np\n\ndef task_func(newArray):\n    # Pack the array's dtype as a string for reconstruction\n    dtype_str = newArray.dtype.str.encode('utf-8')\n    dtype_len = len(dtype_str)\n    shape = newArray.shape\n    shape_len = len(shape)\n\n    buf = io.BytesIO()\n    with gzip.GzipFile(fileobj=buf, mode='wb') as gz:\n        # Write dtype length and dtype string\n        gz.write(struct.pack('I', dtype_len))\n        gz.write(dtype_str)\n        # Write length of shape and shape dims\n        gz.write(struct.pack('I', shape_len))\n        for dim in shape:\n            gz.write(struct.pack('I', dim))\n        # Write raw array data\n        gz.write(newArray.tobytes())\n    return buf.getvalue()\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport seaborn as sns\nfrom scipy import stats\n# Constants\nCOLUMN_NAMES = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\n\ndef task_func(data):\n    if data.shape[1] != 8:\n        raise ValueError(\"Input data does not have exactly eight columns.\")\n    \n    df = pd.DataFrame(data, columns=COLUMN_NAMES)\n    df['Average'] = df.mean(axis=1)\n    \n    ax = sns.distplot(df['Average'], kde=True, hist=True)\n    \n    p_value = None\n    if len(df['Average']) >= 20:\n        _, p_value = stats.normaltest(df['Average'])\n    \n    return df, ax, p_value\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\ndef task_func(log_file):\n    pattern = re.compile(r'^(?P<type>[A-Z]+): \\[(?P<timestamp>[\\d\\-: ]+)\\] - (?P<message>.*)$')\n    records = []\n\n    with open(log_file, 'r') as f:\n        for line in f:\n            line = line.strip()\n            if not line:\n                continue\n            match = pattern.match(line)\n            if match:\n                log_type = match.group('type')\n                timestamp_str = match.group('timestamp')\n                message = match.group('message')\n\n                try:\n                    timestamp = datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S')\n                except ValueError:\n                    raise ValueError(f'Invalid timestamp \"{timestamp_str}\" in log entry: {line}')\n                \n                records.append({'Type': log_type, 'Timestamp': timestamp, 'Message': message})\n\n    if not records:\n        raise ValueError('No valid log entries found.')\n\n    df = pd.DataFrame(records)\n    csv_file = log_file.rsplit('.', 1)[0] + '_structured.csv'\n    df.to_csv(csv_file, index=False)\n\n    return csv_file\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(text, rwidth=0.8):\n    # Extract words using regex (considering word characters)\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Compute lengths of the words\n    lengths = [len(word) for word in words]\n\n    fig, ax = plt.subplots()\n    if lengths:\n        ax.hist(lengths, bins=range(1, max(lengths) + 2), rwidth=rwidth, align='left')\n        ax.set_xlabel('Word Length')\n        ax.set_ylabel('Frequency')\n        ax.set_title('Distribution of Word Lengths')\n        ax.set_xticks(np.arange(1, max(lengths) + 1))\n    else:\n        ax.set_xlabel('Word Length')\n        ax.set_ylabel('Frequency')\n        ax.set_title('Distribution of Word Lengths (empty)')\n\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef task_func(rows=5, cols=5):\n    categories = ['A', 'B', 'C', 'D', 'E']  # predefined categories\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds the number of available categories.\")\n    \n    data = np.random.rand(rows, cols)\n    df = pd.DataFrame(data, columns=categories[:cols])\n    ax = df.plot(kind='bar', stacked=True)\n    plt.xlabel('Index')\n    plt.ylabel('Value')\n    plt.title('Stacked Bar Chart of Random Data')\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(num_labels=5, data_range=(0, 1)):\n    np.random.seed(0)\n    labels = [f\"Category {i+1}\" for i in range(num_labels)]\n    values = np.random.randint(data_range[0], data_range[1]+1, size=num_labels)\n    df = pd.DataFrame({'Label': labels, 'Value': values})\n\n    fig, ax = plt.subplots()\n    bottom = np.zeros(1)\n    for i in range(num_labels):\n        ax.bar(0, df.loc[i, 'Value'], bottom=bottom, label=df.loc[i, 'Label'])\n        bottom += df.loc[i, 'Value']\n\n    ax.set_xticks([])\n    ax.legend()\n    ax.set_ylabel(\"Value\")\n    ax.set_title(\"Stacked Bar Chart of Random Numeric Data\")\n    return fig\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_combined_parameters (builtins.TestCases)\nTest with combined custom parameters.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 65, in test_combined_parameters\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 908, in assert_called_once\n    raise AssertionError(msg)\nAssertionError: Expected 'plot' to have been called once. Called 0 times.\n\n======================================================================\nFAIL: test_custom_data_range (builtins.TestCases)\nTest with a custom data range.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 50, in test_custom_data_range\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 908, in assert_called_once\n    raise AssertionError(msg)\nAssertionError: Expected 'plot' to have been called once. Called 0 times.\n\n======================================================================\nFAIL: test_custom_parameters (builtins.TestCases)\nTest with custom parameters.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 36, in test_custom_parameters\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 908, in assert_called_once\n    raise AssertionError(msg)\nAssertionError: Expected 'plot' to have been called once. Called 0 times.\n\n======================================================================\nFAIL: test_default_parameters (builtins.TestCases)\nTest using default parameters.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 20, in test_default_parameters\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 908, in assert_called_once\n    raise AssertionError(msg)\nAssertionError: Expected 'plot' to have been called once. Called 0 times.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.011s\n\nFAILED (failures=4)"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom random import randint\n\ndef task_func(num_rows=5, rand_range=(0, 100)):\n    categories = ['A', 'B', 'C', 'D', 'E']\n    data = {cat: [randint(rand_range[0], rand_range[1]) for _ in range(num_rows)] for cat in categories}\n    df = pd.DataFrame(data)\n    fig, ax = plt.subplots()\n    df.plot(kind='bar', stacked=True, ax=ax)\n    return fig\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom datetime import datetime\nimport holidays\n\ndef task_func(start_date=datetime(2023, 1, 1), end_date=datetime(2023, 12, 31), country='US'):\n    if not isinstance(start_date, datetime):\n        raise ValueError(\"start_date must be a datetime object\")\n    if not isinstance(end_date, datetime):\n        raise ValueError(\"end_date must be a datetime object\")\n    if start_date > end_date:\n        raise ValueError(\"start_date cannot be after end_date\")\n    if end_date < start_date:\n        raise ValueError(\"end_date cannot be before start_date\")\n\n    holiday_dates = holidays.CountryHoliday(country, years=range(start_date.year, end_date.year + 1))\n    all_dates = pd.date_range(start=start_date, end=end_date, freq='D')\n\n    business_days = [\n        dt.to_pydatetime()\n        for dt in all_dates\n        if dt.weekday() < 5 and dt.date() not in holiday_dates\n    ]\n\n    return business_days\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom random import randint\n\ndef task_func(num_types=5, integer_range=(0, 100)):\n    # Generate category names\n    categories = [f\"Category_{i+1}\" for i in range(num_types)]\n    \n    # Generate random integer values for each category\n    data = {\n        f\"Type_{j+1}\": [randint(*integer_range) for _ in range(num_types)]\n        for j in range(num_types)\n    }\n    \n    df = pd.DataFrame(data, index=categories)\n    \n    # Plot horizontal stacked bar chart\n    fig, ax = plt.subplots(figsize=(8, num_types*0.6 + 1))\n    df.plot(kind='barh', stacked=True, ax=ax)\n    \n    ax.set_xlabel(\"Values\")\n    ax.set_ylabel(\"Categories\")\n    ax.set_title(\"Horizontal Stacked Bar Chart of Random Integers\")\n    plt.tight_layout()\n    \n    return fig, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(num_groups=5, data_size=5, labels=None):\n    if labels is None:\n        labels = [f'Category {i+1}' for i in range(data_size)]\n\n    # Generate random data\n    data = np.random.randint(1, 100, size=(num_groups, data_size))\n    df = pd.DataFrame(data, columns=labels, index=[f'Group {i+1}' for i in range(num_groups)])\n\n    # Plot stacked bar chart\n    fig, ax = plt.subplots()\n    df.plot(kind='bar', stacked=True, ax=ax)\n    ax.set_xlabel('Groups')\n    ax.set_ylabel('Values')\n    ax.set_title('Stacked Bar Chart of Random Data')\n    ax.legend(title='Categories')\n    plt.tight_layout()\n\n    filename = 'test_plot.png'\n    fig.savefig(filename)\n\n    return fig, df, filename\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_custom_parameters (builtins.TestCases)\nTest the function with custom number of groups, data size, and labels.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_custom_parameters\n  File \"<bigcode>\", line 11, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 758, in __init__\n    mgr = ndarray_to_mgr(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/internals/construction.py\", line 337, in ndarray_to_mgr\n    _check_values_indices_shape_match(values, index, columns)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/internals/construction.py\", line 408, in _check_values_indices_shape_match\n    raise ValueError(f\"Shape of passed values is {passed}, indices imply {implied}\")\nValueError: Shape of passed values is (3, 4), indices imply (3, 3)\n\n======================================================================\nFAIL: test_data_values (builtins.TestCases)\nTest that the data in the DataFrame is within the expected range (0.0, 1.0).\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 32, in test_data_values\nAssertionError: False is not true : All data should be within the range [0.0, 1.0].\n\n======================================================================\nFAIL: test_default_parameters (builtins.TestCases)\nTest the function with default parameters.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_default_parameters\nAssertionError: Lists differ: ['Category 1', 'Category 2', 'Category 3', 'Category 4', 'Category 5'] != ['Group1', 'Group2', 'Group3', 'Group4', 'Group5']\n\nFirst differing element 0:\n'Category 1'\n'Group1'\n\n- ['Category 1', 'Category 2', 'Category 3', 'Category 4', 'Category 5']\n+ ['Group1', 'Group2', 'Group3', 'Group4', 'Group5'] : Default column labels are incorrect.\n\n======================================================================\nFAIL: test_no_labels_provided (builtins.TestCases)\nTest that default labels are used when no labels are provided.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 38, in test_no_labels_provided\nAssertionError: Lists differ: ['Category 1', 'Category 2', 'Category 3', 'Category 4', 'Category 5'] != ['Group1', 'Group2', 'Group3']\n\nFirst differing element 0:\n'Category 1'\n'Group1'\n\nFirst list contains 2 additional elements.\nFirst extra element 3:\n'Category 4'\n\n- ['Category 1', 'Category 2', 'Category 3', 'Category 4', 'Category 5']\n+ ['Group1', 'Group2', 'Group3'] : Default column labels are incorrect when no labels are provided.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.375s\n\nFAILED (failures=3, errors=1)"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.ndimage import gaussian_filter\n\ndef task_func(image, sigma=2):\n    if not isinstance(image, np.ndarray):\n        raise TypeError(\"Input image must be a numpy array.\")\n    if sigma <= 0:\n        raise ValueError(\"Sigma must be positive.\")\n    \n    filtered_image = gaussian_filter(image, sigma=sigma)\n    \n    fig, ax = plt.subplots(1, 2, figsize=(10, 5))\n    if image.ndim == 2:\n        ax[0].imshow(image, cmap='gray')\n        ax[1].imshow(filtered_image, cmap='gray')\n    else:\n        ax[0].imshow(image)\n        ax[1].imshow(filtered_image)\n    ax[0].set_title('Original')\n    ax[1].set_title('Filtered')\n    for a in ax:\n        a.axis('off')\n    \n    plt.tight_layout()\n    return ax, filtered_image\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport requests\nfrom io import StringIO\ndef task_func(csv_url, sort_by_column=\"title\"):\n    response = requests.get(csv_url)\n    if response.status_code != 200:\n        raise Exception(f\"Failed to fetch CSV data. Status code: {response.status_code}\")\n    csv_data = StringIO(response.text)\n    df = pd.read_csv(csv_data)\n    if sort_by_column not in df.columns:\n        raise Exception(f\"Column '{sort_by_column}' does not exist in the data.\")\n    df_sorted = df.sort_values(by=sort_by_column).reset_index(drop=True)\n    return df_sorted\n```", "match": {"category": "success"}}
{"result": "```python\nimport random\nimport pandas as pd\nimport collections\n# Constants\nVEGETABLES = ['Carrot', 'Potato', 'Tomato', 'Cabbage', 'Spinach']\ndef task_func(vegetable_dict, seed=0):\n    random.seed(seed)\n\n    # Reverse the dictionary to map vegetables to people\n    veg_to_people = collections.defaultdict(list)\n    for person, veg in vegetable_dict.items():\n        veg_to_people[veg].append(person)\n\n    # Assign random counts between 1 and 10 for each vegetable in VEGETABLES\n    veg_counts = {veg: random.randint(1, 10) for veg in VEGETABLES}\n\n    # Calculate total counts\n    total_counts = sum(veg_counts.values())\n\n    # Calculate percentage occurrence\n    veg_percentages = {veg: (count / total_counts) * 100 for veg, count in veg_counts.items()}\n\n    # Create a dictionary mapping each vegetable to one person from the input where possible\n    veg_to_one_person = {veg: veg_to_people[veg][0] if veg in veg_to_people else None for veg in VEGETABLES}\n\n    # Prepare DataFrame data\n    data = {\n        'Vegetable': VEGETABLES,\n        'Count': [veg_counts[veg] for veg in VEGETABLES],\n        'Percentage': [veg_percentages[veg] for veg in VEGETABLES],\n        'Person': [veg_to_one_person[veg] for veg in VEGETABLES]\n    }\n\n    df = pd.DataFrame(data)\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 6, in test_case_1\nAssertionError: 'Carrot' not found in RangeIndex(start=0, stop=5, step=1)\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 14, in test_case_2\nAssertionError: 'Cabbage' not found in RangeIndex(start=0, stop=5, step=1)\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 26, in test_case_4\nAssertionError: 'Carrot' not found in RangeIndex(start=0, stop=5, step=1)\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 33, in test_case_5\nAssertionError: 'Spinach' not found in RangeIndex(start=0, stop=5, step=1)\n\n----------------------------------------------------------------------\nRan 5 tests in 0.006s\n\nFAILED (failures=4)"}}
{"result": "```python\nimport json\nfrom datetime import datetime\ndef task_func(json_data):\n    data = json.loads(json_data)\n    dt_str = data.get('utc_datetime')\n    if not dt_str:\n        return False\n    dt = datetime.fromisoformat(dt_str.replace('Z', '+00:00'))\n    return dt.weekday() >= 5\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_empty_json (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 26, in test_empty_json\nAssertionError: KeyError not raised\n\n======================================================================\nFAIL: test_no_utc_datetime (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 31, in test_no_utc_datetime\nAssertionError: KeyError not raised\n\n----------------------------------------------------------------------\nRan 5 tests in 0.002s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\ndef task_func(country_dict):\n    countries = list(country_dict.keys())\n    gdp_values = np.random.randint(1_000_000_000, 100_000_000_001, size=len(countries))\n    df = pd.DataFrame(gdp_values, index=countries, columns=['GDP'])\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_case_1\nAssertionError: Lists differ: ['John', 'Alice', 'Bob'] != ['USA', 'UK', 'China']\n\nFirst differing element 0:\n'John'\n'USA'\n\n- ['John', 'Alice', 'Bob']\n+ ['USA', 'UK', 'China']\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 14, in test_case_2\nAssertionError: Lists differ: ['Charlie', 'David'] != ['Japan', 'Australia']\n\nFirst differing element 0:\n'Charlie'\n'Japan'\n\n- ['Charlie', 'David']\n+ ['Japan', 'Australia']\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_case_3\nAssertionError: Lists differ: ['Eve', 'Frank', 'Grace', 'Hannah', 'Ian'] != ['USA', 'UK', 'China', 'Japan', 'Australia']\n\nFirst differing element 0:\n'Eve'\n'USA'\n\n- ['Eve', 'Frank', 'Grace', 'Hannah', 'Ian']\n+ ['USA', 'UK', 'China', 'Japan', 'Australia']\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 26, in test_case_4\nAssertionError: Lists differ: ['Jack'] != ['USA']\n\nFirst differing element 0:\n'Jack'\n'USA'\n\n- ['Jack']\n+ ['USA']\n\n----------------------------------------------------------------------\nRan 5 tests in 0.006s\n\nFAILED (failures=4)"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\ndef task_func(data, key, min_value, max_value):\n    if not isinstance(data, pd.DataFrame):\n        raise TypeError(\"Input data is not a pandas DataFrame\")\n    data[key] = np.random.uniform(low=min_value, high=max_value, size=len(data))\n    return data\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_non_dataframe_input (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 68, in test_non_dataframe_input\n  File \"<bigcode>\", line 6, in task_func\nTypeError: Input data is not a pandas DataFrame\n\n----------------------------------------------------------------------\nRan 6 tests in 0.011s\n\nFAILED (errors=1)"}}
{"result": "```python\nimport re\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    fig, ax = plt.subplots()\n    required_cols = {'Title', 'Views', 'Likes'}\n    if df.empty or not required_cols.issubset(df.columns):\n        return ax\n    \n    pattern = re.compile(r'\\b(how|what)\\b', re.IGNORECASE)\n    filtered = df[df['Title'].apply(lambda x: bool(pattern.search(str(x))))]\n    if filtered.empty:\n        return ax\n    \n    # Avoid division by zero by filtering out rows with zero or missing views\n    filtered = filtered[filtered['Views'] > 0]\n    if filtered.empty:\n        return ax\n    \n    like_ratio = filtered['Likes'] / filtered['Views']\n    titles = filtered['Title'].tolist()\n    \n    ax.bar(range(len(like_ratio)), like_ratio)\n    ax.set_xticks(range(len(like_ratio)))\n    ax.set_xticklabels(titles, rotation=45, ha='right', fontsize=8)\n    ax.set_ylabel('Like Ratio (Likes/Views)')\n    ax.set_title('Like Ratios of Videos with Titles Containing \"how\" or \"what\"')\n    plt.tight_layout()\n    \n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport socket\ndef task_func(ip_addresses: list) -> dict:\n    ip_pattern = re.compile(r\"^(?:25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)\"\n                            r\"(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)){3}$\")\n    result = {}\n    for ip in ip_addresses:\n        if ip_pattern.match(ip):\n            try:\n                hostname = socket.gethostbyaddr(ip)[0]\n            except (socket.herror, socket.gaierror):\n                hostname = None\n            result[ip] = hostname\n    return result\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 14, in test_case_3\nAssertionError: {} != {'256.256.256.256': None}\n- {}\n+ {'256.256.256.256': None}\n\n----------------------------------------------------------------------\nRan 5 tests in 0.262s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport re\nimport nltk\nfrom string import punctuation\n\ndef task_func(df):\n    if df.empty or not {'Title', 'Content'}.issubset(df.columns):\n        raise ValueError(\"DataFrame is empty or missing required columns 'Title' and 'Content'\")\n\n    keywords = ['like', 'what']\n    pattern = re.compile(r'\\b(?:' + '|'.join(keywords) + r')\\b', re.IGNORECASE)\n    filtered_df = df[df['Title'].str.contains(pattern, na=False)]\n\n    if filtered_df.empty:\n        return {}\n\n    # Combine all contents\n    all_content = ' '.join(filtered_df['Content'].astype(str))\n\n    # Remove punctuation\n    all_content = all_content.translate(str.maketrans('', '', punctuation))\n\n    # Tokenize words (using simple split since punctuation removed)\n    words = all_content.lower().split()\n\n    freq_dist = nltk.FreqDist(words)\n    return dict(freq_dist)\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_empty_dataframe (builtins.TestCases)\nTest the function with an empty DataFrame.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 50, in test_empty_dataframe\n  File \"<bigcode>\", line 8, in task_func\nValueError: DataFrame is empty or missing required columns 'Title' and 'Content'\n\n======================================================================\nFAIL: test_case_sensitive_handling (builtins.TestCases)\nTest the function's handling of case sensitivity in finding keywords.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 68, in test_case_sensitive_handling\nAssertionError: {'technological': 1, 'growth': 1, 'is': 1, [85 chars]': 1} != {'Technological': 1, 'growth': 1, 'is': 1, [85 chars]': 1}\n+ {'Technological': 1,\n+  'These': 1,\n- {'advancements': 1,\n? ^\n\n+  'advancements': 1,\n? ^\n\n   'are': 1,\n   'exponential': 1,\n   'growth': 1,\n   'is': 1,\n   'like': 1,\n   'no': 1,\n-  'other': 1,\n?            ^\n\n+  'other': 1}\n?            ^\n\n-  'technological': 1,\n-  'these': 1} : Case sensitivity handling is faulty.\n\n======================================================================\nFAIL: test_word_frequencies (builtins.TestCases)\nTest if the function correctly computes word frequencies from articles containing 'like' or 'what'.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 31, in test_word_frequencies\nAssertionError: {'data': 2, 'science': 1, 'is': 2, 'about':[132 chars]': 1} != {'Data': 1, 'Science': 1, 'is': 2, 'about':[154 chars]': 1}\n+ {'Data': 1,\n+  'Like': 1,\n+  'Python': 1,\n+  'Science': 1,\n+  'What': 1,\n- {'about': 1,\n? ^\n\n+  'about': 1,\n? ^\n\n   'among': 1,\n   'analysis': 1,\n-  'data': 2,\n?          ^\n\n+  'data': 1,\n?          ^\n\n   'developers': 1,\n   'do': 1,\n   'is': 2,\n-  'like': 1,\n   'popular': 1,\n-  'python': 1,\n-  'science': 1,\n   'see': 1,\n   'think': 1,\n-  'what': 2,\n?          ^\n\n+  'what': 1,\n?          ^\n\n   'you': 2} : The word frequencies do not match the expected output.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.011s\n\nFAILED (failures=2, errors=1)"}}
{"result": "```python\nimport re\nimport json\n# Constants\nIP_REGEX = r'^(\\d{1,3}\\.){3}\\d{1,3}$'\n\ndef task_func(ip_address):\n    try:\n        data = json.loads(ip_address)\n        ip = None\n        # Search for IP in all values recursively if nested\n        def find_ip(obj):\n            if isinstance(obj, dict):\n                for v in obj.values():\n                    found = find_ip(v)\n                    if found:\n                        return found\n            elif isinstance(obj, list):\n                for item in obj:\n                    found = find_ip(item)\n                    if found:\n                        return found\n            elif isinstance(obj, str):\n                if re.match(IP_REGEX, obj):\n                    return obj\n            return None\n        \n        ip = find_ip(data)\n        if ip is None:\n            return 'Invalid IP address received'\n        \n        # Validate IP parts range 0-255\n        parts = ip.split('.')\n        if len(parts) != 4:\n            return 'Invalid IP address received'\n        for part in parts:\n            if not part.isdigit() or not 0 <= int(part) <= 255:\n                return 'Invalid IP address received'\n        return ip\n    except Exception:\n        return 'Invalid IP address received'\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_case_2\nAssertionError: 'Invalid IP address received' != '500.500.500.500'\n- Invalid IP address received\n+ 500.500.500.500\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.002s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport re\nimport matplotlib.pyplot as plt\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport numpy as np\n\ndef task_func(df):\n    fig, ax = plt.subplots()\n    if not {'Title', 'Content'}.issubset(df.columns):\n        return ax\n    \n    pattern = re.compile(r'\\b(how|what)\\b', re.I)\n    filtered_df = df[df['Title'].str.contains(pattern, na=False)]\n    if filtered_df.empty:\n        return ax\n    \n    contents = filtered_df['Content'].values\n    vectorizer = TfidfVectorizer()\n    tfidf_matrix = vectorizer.fit_transform(contents)\n    scores = tfidf_matrix.mean(axis=0).A1\n    features = vectorizer.get_feature_names_out()\n    \n    indices = np.argsort(scores)[::-1]\n    sorted_scores = scores[indices]\n    sorted_features = features[indices]\n    \n    ax.bar(range(len(sorted_scores)), sorted_scores, align='center')\n    ax.set_xticks(range(len(sorted_scores)))\n    ax.set_xticklabels(sorted_features, rotation=90)\n    ax.set_ylabel('TF-IDF Score')\n    plt.tight_layout()\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nfrom PIL import Image\nimport numpy as np\nfrom skimage.transform import resize\nimport matplotlib.pyplot as plt\nimport os\ndef task_func(img_path, scale_factors=[0.5, 0.75, 1.5, 2.0]):\n    if not os.path.isfile(img_path):\n        raise FileNotFoundError(f\"File '{img_path}' not found.\")\n    \n    img = Image.open(img_path)\n    img_np = np.array(img)\n    \n    fig, axes = plt.subplots(1, len(scale_factors), figsize=(5 * len(scale_factors), 5))\n    if len(scale_factors) == 1:\n        axes = [axes]\n    \n    results = []\n    for ax, scale in zip(axes, scale_factors):\n        # Compute new shape\n        new_shape = (int(img_np.shape[0] * scale), int(img_np.shape[1] * scale))\n        if img_np.ndim == 3:\n            new_shape = new_shape + (img_np.shape[2],)\n        \n        scaled_img = resize(img_np, new_shape, anti_aliasing=True)\n        # resize returns float64 in [0, 1]; convert to uint8\n        if scaled_img.dtype != np.uint8:\n            scaled_img_disp = (scaled_img * 255).clip(0, 255).astype(np.uint8)\n        else:\n            scaled_img_disp = scaled_img\n        \n        ax.imshow(scaled_img_disp)\n        ax.axis('off')\n        ax.set_title(f\"Scale: {scale}\")\n        results.append((ax, scaled_img_disp))\n    plt.tight_layout()\n    plt.show()\n    \n    return results\n```", "match": {"category": "success"}}
{"result": "```python\nfrom django.http import HttpResponse\nfrom django.conf import settings\nimport random\nimport time\nimport json\n\ndef task_func(data, min_delay, max_delay):\n    delay = random.uniform(min_delay, max_delay)\n    time.sleep(delay)\n    json_data = json.dumps(data)\n    return HttpResponse(json_data, content_type=\"application/json\")\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_case_1\nAssertionError: '{\"key\": \"value\"}' != {'key': 'value'}\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 18, in test_case_2\nAssertionError: '{\"test\": \"data\", \"sample\": \"value\"}' != {'test': 'data', 'sample': 'value'}\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_case_3\nAssertionError: '{\"hello\": \"world\"}' != {'hello': 'world'}\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 30, in test_case_4\nAssertionError: '{}' != {}\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 36, in test_case_5\nAssertionError: '{\"a\": 1, \"b\": 2, \"c\": 3}' != {'a': 1, 'b': 2, 'c': 3}\n\n----------------------------------------------------------------------\nRan 5 tests in 9.116s\n\nFAILED (failures=5)"}}
{"result": "```python\nimport re\nfrom sklearn.cluster import KMeans\nfrom sklearn.feature_extraction.text import CountVectorizer\n\ndef task_func(df):\n    # Filter articles with titles containing 'how' or 'what' (case-insensitive)\n    pattern = re.compile(r'\\b(how|what)\\b', re.IGNORECASE)\n    filtered_df = df[df['title'].str.contains(pattern, na=False)]\n\n    # Vectorize the content of the filtered articles\n    vectorizer = CountVectorizer()\n    X = vectorizer.fit_transform(filtered_df['content'].fillna(''))\n\n    # Choose number of clusters; here, we pick min(5, number of articles) for basic grouping\n    n_clusters = min(5, X.shape[0]) if X.shape[0] > 0 else 1\n\n    # Cluster using KMeans\n    kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n    kmeans.fit(X)\n\n    # Return list of cluster labels for filtered articles\n    return kmeans.labels_.tolist()\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_empty_dataframe (builtins.TestCases)\nTest the function with an empty DataFrame.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'title'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 32, in test_empty_dataframe\n  File \"<bigcode>\", line 9, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'title'\n\n======================================================================\nERROR: test_no_matching_articles (builtins.TestCases)\nTest the function with a DataFrame that has no titles containing 'how' or 'what'.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'title'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_no_matching_articles\n  File \"<bigcode>\", line 9, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'title'\n\n======================================================================\nERROR: test_vectorizer_and_clustering (builtins.TestCases)\nTest if the vectorization and clustering are setting up as expected, without mocking.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'title'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 18, in test_vectorizer_and_clustering\n  File \"<bigcode>\", line 9, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'title'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.010s\n\nFAILED (errors=3)"}}
{"result": "```python\nfrom django.http import HttpResponse\nimport uuid\nimport json\n\ndef task_func(data):\n    response = HttpResponse(\n        json.dumps(data),\n        content_type='application/json'\n    )\n    response['X-Request-UUID'] = str(uuid.uuid4())\n    return response\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_case_1\nAssertionError: '\"{\\\\\"key\\\\\": \\\\\"value\\\\\"}\"' != '{\"key\": \"value\"}'\n- \"{\\\"key\\\": \\\"value\\\"}\"\n? - -    -   -      -  -\n+ {\"key\": \"value\"}\n\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 19, in test_case_2\nAssertionError: '\"{}\"' != '{}'\n- \"{}\"\n? -  -\n+ {}\n\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 26, in test_case_3\nAssertionError: '\"{\\\\\"users\\\\\": [{\\\\\"name\\\\\": \\\\\"John\\\\\", [53 chars]}]}\"' != '{\"users\": [{\"name\": \"John\", \"age\": 30}, {[23 chars]5}]}'\n- \"{\\\"users\\\": [{\\\"name\\\": \\\"John\\\", \\\"age\\\": 30}, {\\\"name\\\": \\\"Doe\\\", \\\"age\\\": 25}]}\"\n? - -      -     -     -   -     -   -    -         -     -   -    -   -    -        -\n+ {\"users\": [{\"name\": \"John\", \"age\": 30}, {\"name\": \"Doe\", \"age\": 25}]}\n\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 32, in test_case_4\nAssertionError: '\"{\\\\\"description\\\\\": \\\\\"This is a sample [48 chars]\\\"}\"' != '{\"description\": \"This is a sample data wi[38 chars]]}\"}'\n- \"{\\\"description\\\": \\\"This is a sample data with special characters: !@#%^&*()_-+={[]}\\\"}\"\n? - -            -   -                                                                 -  -\n+ {\"description\": \"This is a sample data with special characters: !@#%^&*()_-+={[]}\"}\n\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 38, in test_case_5\nAssertionError: '\"{\\\\\"numbers\\\\\": [1, 2, 3, 4, 5]}\"' != '{\"numbers\": [1, 2, 3, 4, 5]}'\n- \"{\\\"numbers\\\": [1, 2, 3, 4, 5]}\"\n? - -        -                   -\n+ {\"numbers\": [1, 2, 3, 4, 5]}\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.003s\n\nFAILED (failures=5)"}}
{"result": "```python\nimport pandas as pd\nimport re\nfrom sklearn.feature_extraction.text import CountVectorizer\n# Constants\nSTOPWORDS = ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself',\n             'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself',\n             'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these',\n             'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do',\n             'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while',\n             'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before',\n             'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again',\n             'further', 'then', 'once']\n\ndef task_func(dataframe, text_column):\n    # Compile regex patterns for cleaning\n    digits_punct_pattern = re.compile(r'[\\d\\W_]+')\n    \n    def preprocess(text):\n        if not isinstance(text, str):\n            return ''\n        # lowercase\n        text = text.lower()\n        # remove digits and punctuation\n        text = digits_punct_pattern.sub(' ', text)\n        # tokenize by whitespace\n        tokens = text.split()\n        # remove stopwords\n        tokens = [token for token in tokens if token not in STOPWORDS]\n        return ' '.join(tokens)\n    \n    cleaned_texts = dataframe[text_column].apply(preprocess)\n    vectorizer = CountVectorizer()\n    X = vectorizer.fit_transform(cleaned_texts)\n    result_df = pd.DataFrame(X.toarray(), columns=vectorizer.get_feature_names_out())\n    return result_df\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nimport folium\ndef task_func(dic={'Lon': (-180, 180), 'Lat': (-90, 90)}, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney']):\n    # Validate dic keys and types\n    if 'Lon' not in dic or 'Lat' not in dic:\n        raise ValueError(\"Dictionary must contain 'Lon' and 'Lat' keys.\")\n    if not (isinstance(dic['Lon'], tuple) and isinstance(dic['Lat'], tuple)):\n        raise ValueError(\"'Lon' and 'Lat' values must be tuples.\")\n    \n    lon_min, lon_max = dic['Lon']\n    lat_min, lat_max = dic['Lat']\n    \n    # Generate random coordinates\n    longitudes = np.random.uniform(lon_min, lon_max, len(cities))\n    latitudes = np.random.uniform(lat_min, lat_max, len(cities))\n    \n    # Create DataFrame\n    df = pd.DataFrame({\n        'City': cities,\n        'Longitude': longitudes,\n        'Latitude': latitudes\n    })\n    \n    # Determine map center\n    center_lat = np.mean(latitudes)\n    center_lon = np.mean(longitudes)\n    \n    # Create map\n    m = folium.Map(location=[center_lat, center_lon], zoom_start=2)\n    \n    # Add markers\n    for _, row in df.iterrows():\n        folium.Marker([row['Latitude'], row['Longitude']], popup=row['City']).add_to(m)\n    \n    return m, df\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_default_parameters (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 19, in test_default_parameters\nAssertionError: Lists differ: ['New[19 chars]9495,-61.92098633948352', 'London,162.25715030[161 chars]819'] != ['New[19 chars]9495,81.12857515378491', 'London,83.5178190521[162 chars]819']\n\nFirst differing element 0:\n'New York,-45.1655572149495,-61.92098633948352'\n'New York,-45.1655572149495,81.12857515378491'\n\n- ['New York,-45.1655572149495,-61.92098633948352',\n-  'London,162.25715030756982,-79.5449498097241',\n-  'Beijing,83.51781905210584,65.91170623948832',\n-  'Tokyo,35.51705431093319,18.20070211377758',\n+ ['New York,-45.1655572149495,81.12857515378491',\n+  'London,83.51781905210584,17.758527155466595',\n+  'Beijing,-123.83328944072285,-61.92098633948352',\n+  'Tokyo,-159.0898996194482,65.91170623948832',\n-  'Sydney,-123.83328944072285,37.45306400328819']\n?          ---  -------  ^  ^\n\n+  'Sydney,36.40140422755516,37.45306400328819']\n?           +   ^^^^  ^ ++++\n : DataFrame contents should match the expected output\n\n----------------------------------------------------------------------\nRan 5 tests in 0.026s\n\nFAILED (failures=1)"}}
{"result": "```python\nfrom geopy.distance import geodesic\nimport folium\n\ndef task_func(dic):\n    if not dic:\n        raise ValueError(\"Input dictionary is empty\")\n    \n    # Create a folium Map centered at the average location\n    latitudes = [coord[0] for coord in dic.values()]\n    longitudes = [coord[1] for coord in dic.values()]\n    avg_lat = sum(latitudes) / len(latitudes)\n    avg_lon = sum(longitudes) / len(longitudes)\n    fmap = folium.Map(location=[avg_lat, avg_lon], zoom_start=5)\n    \n    # Add markers for each location\n    for name, coord in dic.items():\n        folium.Marker(location=coord, popup=name).add_to(fmap)\n    \n    # Calculate geodesic distances between each pair\n    distances = {}\n    names = list(dic.keys())\n    for i in range(len(names)):\n        for j in range(i+1, len(names)):\n            loc1 = names[i]\n            loc2 = names[j]\n            dist = geodesic(dic[loc1], dic[loc2]).kilometers\n            distances[(loc1, loc2)] = dist\n    \n    return (fmap, distances)\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_distance_dict_structure (builtins.TestCases)\nEnsure the distance dictionary has the correct key-value structure.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 27, in test_distance_dict_structure\n  File \"<bigcode>\", line 10, in task_func\n  File \"<bigcode>\", line 10, in <listcomp>\nKeyError: 0\n\n======================================================================\nERROR: test_distances_calculation (builtins.TestCases)\nTest the accuracy of the distance calculation. Assumes the distance is reasonable for nearby points.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_distances_calculation\n  File \"<bigcode>\", line 10, in task_func\n  File \"<bigcode>\", line 10, in <listcomp>\nKeyError: 0\n\n======================================================================\nERROR: test_large_distance_calculation (builtins.TestCases)\nTest accuracy for large distances, e.g., antipodal points.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 44, in test_large_distance_calculation\n  File \"<bigcode>\", line 10, in task_func\n  File \"<bigcode>\", line 10, in <listcomp>\nKeyError: 0\n\n======================================================================\nERROR: test_marker_addition (builtins.TestCases)\nTest that markers are correctly added to the map. Assumes 1 TileLayer present.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_marker_addition\n  File \"<bigcode>\", line 10, in task_func\n  File \"<bigcode>\", line 10, in <listcomp>\nKeyError: 0\n\n======================================================================\nERROR: test_multiple_locations (builtins.TestCases)\nTest functionality with multiple locations.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 17, in test_multiple_locations\n  File \"<bigcode>\", line 10, in task_func\n  File \"<bigcode>\", line 10, in <listcomp>\nKeyError: 0\n\n======================================================================\nERROR: test_negative_lat_lon (builtins.TestCases)\nTest handling of negative latitude and longitude values.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 40, in test_negative_lat_lon\n  File \"<bigcode>\", line 10, in task_func\n  File \"<bigcode>\", line 10, in <listcomp>\nKeyError: 0\n\n======================================================================\nERROR: test_return_type (builtins.TestCases)\nTest that the function returns a tuple with a map and a dictionary.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 7, in test_return_type\n  File \"<bigcode>\", line 10, in task_func\n  File \"<bigcode>\", line 10, in <listcomp>\nKeyError: 0\n\n======================================================================\nERROR: test_single_location (builtins.TestCases)\nTest handling of a single location input.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 35, in test_single_location\n  File \"<bigcode>\", line 10, in task_func\n  File \"<bigcode>\", line 10, in <listcomp>\nKeyError: 0\n\n----------------------------------------------------------------------\nRan 9 tests in 0.003s\n\nFAILED (errors=8)"}}
{"result": "```python\nimport numpy as np\nimport geopandas as gpd\nfrom shapely.geometry import Point\n\ndef task_func(dic={'Lon': (-180, 180), 'Lat': (-90, 90)}, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney']):\n    if 'Lon' not in dic or 'Lat' not in dic:\n        raise ValueError(\"Dictionary must contain 'Lon' and 'Lat' keys.\")\n    if not (isinstance(dic['Lon'], tuple) and isinstance(dic['Lat'], tuple)):\n        raise ValueError(\"'Lon' and 'Lat' values must be tuples.\")\n    \n    lon_min, lon_max = dic['Lon']\n    lat_min, lat_max = dic['Lat']\n    \n    lons = np.random.uniform(lon_min, lon_max, len(cities))\n    lats = np.random.uniform(lat_min, lat_max, len(cities))\n    \n    points = [Point(lon, lat) for lon, lat in zip(lons, lats)]\n    \n    gdf = gpd.GeoDataFrame({'City': cities, 'Coordinates': points}, geometry='Coordinates')\n    return gdf\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_default_parameters (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_default_parameters\nAssertionError: Lists differ: ['New[26 chars]9495 -61.92098633948352)', 'London,POINT (162.[194 chars]19)'] != ['New[26 chars]9495 81.12857515378491)', 'London,POINT (83.51[195 chars]19)']\n\nFirst differing element 0:\n'New York,POINT (-45.1655572149495 -61.92098633948352)'\n'New York,POINT (-45.1655572149495 81.12857515378491)'\n\nDiff is 658 characters long. Set self.maxDiff to None to see it.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.013s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pandas as pd\nimport folium\nfrom geopy.geocoders import Photon\n\ndef task_func(dic):\n    geolocator = Photon(user_agent=\"geoapiExercises\")\n    locations = []\n    \n    for key, val in dic.items():\n        if isinstance(val, (list, tuple)) and len(val) == 2:\n            # If val is a coordinate pair\n            lat, lon = val\n        elif isinstance(val, str):\n            # If val is an address string, geocode it\n            location = geolocator.geocode(val)\n            if location is None:\n                continue\n            lat, lon = location.latitude, location.longitude\n        else:\n            continue\n        locations.append((key, lat, lon))\n    \n    if not locations:\n        # Default map if no locations\n        m = folium.Map()\n        return m\n    \n    # Center map on the first location\n    first_lat, first_lon = locations[0][1], locations[0][2]\n    m = folium.Map(location=[first_lat, first_lon], zoom_start=12)\n    \n    for name, lat, lon in locations:\n        folium.Marker(location=[lat, lon], popup=str(name)).add_to(m)\n    \n    return m\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_map_initialization (builtins.TestCases)\nTest that the map is initialized with correct latitude and longitude.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 40, in test_map_initialization\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 929, in assert_called_with\n    raise AssertionError(_error_message()) from cause\nAssertionError: expected call not found.\nExpected: Map(location=[0, 0], zoom_start=<ANY>)\nActual: Map()\n\n======================================================================\nFAIL: test_marker_creation (builtins.TestCases)\nTest that markers are added to the map for each location.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 21, in test_marker_creation\nAssertionError: 0 != 2\n\n----------------------------------------------------------------------\nRan 5 tests in 0.174s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport re\nimport json\nimport requests\ndef task_func(data_url: str) -> list:\n    try:\n        response = requests.get(data_url)\n        text = response.text\n        # Find all substrings that look like \"name\": \"value\"\n        # We'll parse JSON first, then use regex to filter names not in square brackets.\n        data = json.loads(text)\n        # Convert JSON back to string to use regex, but we must exclude names inside square brackets.\n        # However, since JSON is structured, better to extract names at root or nested levels.\n        # We can flatten JSON and extract all name values.\n        def extract_names(obj):\n            names = []\n            if isinstance(obj, dict):\n                for k, v in obj.items():\n                    names.extend(extract_names(v))\n            elif isinstance(obj, list):\n                for item in obj:\n                    names.extend(extract_names(item))\n            elif isinstance(obj, str):\n                names.append(obj)\n            return names\n        all_names = extract_names(data)\n        # Now filter out names that are enclosed in square brackets\n        # e.g. \"[John]\" -> ignore; but \"John\" or \"John]\" or \"[John\" is included, only full enclosing brackets ignored\n        result = [name for name in all_names if not re.fullmatch(r\"\\[.*\\]\", name)]\n        return result\n    except Exception:\n        return \"Invalid url input\"\n```", "match": {"category": "success"}}
{"result": "```python\nimport sqlite3\nimport pandas as pd\nimport csv\nfrom io import StringIO\n# Constants\nDATABASE_NAME = 'test.db'\nTABLE_NAME = 'test_table'\n\ndef task_func(csv_input):\n    # Determine if csv_input is a file path (string) or a StringIO object\n    if isinstance(csv_input, str):\n        df = pd.read_csv(csv_input)\n    elif isinstance(csv_input, StringIO):\n        csv_input.seek(0)\n        df = pd.read_csv(csv_input)\n    else:\n        raise ValueError(\"csv_input must be a file path string or StringIO object\")\n\n    # Connect to SQLite database\n    conn = sqlite3.connect(DATABASE_NAME)\n    try:\n        # Write data to SQLite, replacing table if exists\n        df.to_sql(TABLE_NAME, conn, if_exists='replace', index=False)\n        # Query back the table as DataFrame\n        result_df = pd.read_sql_query(f\"SELECT * FROM {TABLE_NAME}\", conn)\n    finally:\n        conn.close()\n\n    return result_df\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_6 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 72, in test_case_6\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1224, in assert_frame_equal\n    assert_series_equal(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1014, in assert_series_equal\n    _testing.assert_almost_equal(\n  File \"pandas/_libs/testing.pyx\", line 52, in pandas._libs.testing.assert_almost_equal\n  File \"pandas/_libs/testing.pyx\", line 172, in pandas._libs.testing.assert_almost_equal\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame.iloc[:, 0] (column name=\"id\") are different\n\nDataFrame.iloc[:, 0] (column name=\"id\") values are different (100.0 %)\n[index]: [0, 1]\n[left]:  [1, 2]\n[right]: [1, 2]\nAt positional index 0, first diff: 1 != 1\n\n----------------------------------------------------------------------\nRan 6 tests in 0.054s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    num_customers = stats.poisson.rvs(mean)\n    sales = {animal: 0 for animal in animals}\n    for _ in range(num_customers):\n        chosen_animal = random.choice(animals)\n        sales[chosen_animal] += 1\n    print(sales)\n    return sales\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_empty_animal_list (builtins.TestCases)\nTest with an empty list of animals.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 43, in test_empty_animal_list\n  File \"<bigcode>\", line 9, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/random.py\", line 378, in choice\n    return seq[self._randbelow(len(seq))]\nIndexError: list index out of range\n\n======================================================================\nERROR: test_zero_customers (builtins.TestCases)\nTest the scenario where zero customers arrive.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 21, in test_zero_customers\n  File \"<bigcode>\", line 10, in task_func\nKeyError: <MagicMock name='choice()' id='132649642754592'>\n\n======================================================================\nFAIL: test_large_number_of_customers (builtins.TestCases)\nTest the function with a very large number of customers.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 31, in test_large_number_of_customers\nAssertionError: {'Dog': 1, 'Cat': 0, 'Bird': 0, 'Fish': 0, 'Hamster': 0} != {'Dog': 1000, 'Cat': 0, 'Bird': 0, 'Fish': 0, 'Hamster': 0}\n- {'Bird': 0, 'Cat': 0, 'Dog': 1, 'Fish': 0, 'Hamster': 0}\n+ {'Bird': 0, 'Cat': 0, 'Dog': 1000, 'Fish': 0, 'Hamster': 0}\n?                               +++\n\n\n======================================================================\nFAIL: test_no_customer (builtins.TestCases)\nTest the function with zero customers.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 66, in test_no_customer\nAssertionError: {'Dog': 0, 'Cat': 1, 'Bird': 0, 'Fish': 0, 'Hamster': 0} != {'Dog': 0, 'Cat': 0, 'Bird': 0, 'Fish': 0, 'Hamster': 0}\n- {'Bird': 0, 'Cat': 1, 'Dog': 0, 'Fish': 0, 'Hamster': 0}\n?                    ^\n\n+ {'Bird': 0, 'Cat': 0, 'Dog': 0, 'Fish': 0, 'Hamster': 0}\n?                    ^\n\n\n======================================================================\nFAIL: test_random_animal_selection (builtins.TestCases)\nTest random selection of animals.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 40, in test_random_animal_selection\nAssertionError: {'Dog': 1, 'Cat': 0, 'Bird': 0, 'Fish': 0, 'Hamster': 0} != {'Dog': 1, 'Cat': 1, 'Bird': 1, 'Fish': 1, 'Hamster': 1}\n- {'Bird': 0, 'Cat': 0, 'Dog': 1, 'Fish': 0, 'Hamster': 0}\n?          ^         ^                    ^             ^\n\n+ {'Bird': 1, 'Cat': 1, 'Dog': 1, 'Fish': 1, 'Hamster': 1}\n?          ^         ^                    ^             ^\n\n\n======================================================================\nFAIL: test_sales_content (builtins.TestCases)\nTest the content of the sales dictionary matches the expected distribution of one each.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 60, in test_sales_content\nAssertionError: {'Dog': 1, 'Cat': 0, 'Bird': 0, 'Fish': 0, 'Hamster': 0} != {'Dog': 1, 'Cat': 1, 'Bird': 1, 'Fish': 1, 'Hamster': 1}\n- {'Bird': 0, 'Cat': 0, 'Dog': 1, 'Fish': 0, 'Hamster': 0}\n?          ^         ^                    ^             ^\n\n+ {'Bird': 1, 'Cat': 1, 'Dog': 1, 'Fish': 1, 'Hamster': 1}\n?          ^         ^                    ^             ^\n\n\n======================================================================\nFAIL: test_typical_case (builtins.TestCases)\nTest typical case with mock number of customers and sales.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 14, in test_typical_case\nAssertionError: {'Dog': 1, 'Cat': 0, 'Bird': 0, 'Fish': 0, 'Hamster': 0} != {'Dog': 100, 'Cat': 0, 'Bird': 0, 'Fish': 0, 'Hamster': 0}\n- {'Bird': 0, 'Cat': 0, 'Dog': 1, 'Fish': 0, 'Hamster': 0}\n+ {'Bird': 0, 'Cat': 0, 'Dog': 100, 'Fish': 0, 'Hamster': 0}\n?                               ++\n\n\n----------------------------------------------------------------------\nRan 9 tests in 0.021s\n\nFAILED (failures=5, errors=2)"}}
{"result": "```python\nimport re\nimport smtplib\n# Constants\nTEXT = \"Josie Smith [3996 COLLEGE AVENUE, SOMETOWN, MD 21003]Mugsy Dog Smith [2560 OAK ST, GLENMEADE, WI 14098]\"\nRECEPIENT_ADDRESS = \"names@gmail.com\"\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\nEMAIL_ADDRESS = \"your.email@gmail.com\"\nEMAIL_PASSWORD = \"your.password\"\ndef task_func(text=TEXT, smtp_server=SMTP_SERVER, smtp_port=SMTP_PORT, email_address=EMAIL_ADDRESS, email_password=EMAIL_PASSWORD, recepient_address=RECEPIENT_ADDRESS, smtp=None):\n    # Remove the bracketed parts\n    cleaned = re.sub(r'\\[.*?\\]', '', text)\n    # Extract names (words separated by spaces, assume names contain only letters)\n    names = re.findall(r'\\b[A-Z][a-z]*(?: [A-Z][a-z]*)*\\b', cleaned)\n    # Remove empty strings and trim whitespace\n    names = [name.strip() for name in names if name.strip()]\n    # Compose message with specified format\n    message = \"Subject: Extracted Names\\n\\n\" + \"\\n\".join(names)\n    if smtp is None:\n        with smtplib.SMTP(smtp_server, smtp_port) as server:\n            server.starttls()\n            server.login(email_address, email_password)\n            server.sendmail(email_address, recepient_address, message)\n    else:\n        smtp.sendmail(email_address, recepient_address, message)\n    return names\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_f225 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 16, in test_f225\nAssertionError: Lists differ: ['Josie Smith Mugsy Dog Smith'] != ['Josie Smith', 'Mugsy Dog Smith']\n\nFirst differing element 0:\n'Josie Smith Mugsy Dog Smith'\n'Josie Smith'\n\nSecond list contains 1 additional elements.\nFirst extra element 1:\n'Mugsy Dog Smith'\n\n- ['Josie Smith Mugsy Dog Smith']\n?              ^\n\n+ ['Josie Smith', 'Mugsy Dog Smith']\n?              ^^^^\n\n\n======================================================================\nFAIL: test_f225_subject (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 29, in test_f225_subject\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 940, in assert_called_once_with\n    raise AssertionError(msg)\nAssertionError: Expected 'login' to be called once. Called 0 times.\n\n======================================================================\nFAIL: test_login (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 85, in test_login\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 940, in assert_called_once_with\n    raise AssertionError(msg)\nAssertionError: Expected 'login' to be called once. Called 0 times.\n\n======================================================================\nFAIL: test_no_names (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 49, in test_no_names\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 940, in assert_called_once_with\n    raise AssertionError(msg)\nAssertionError: Expected 'login' to be called once. Called 0 times.\n\n======================================================================\nFAIL: test_recepient (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 67, in test_recepient\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 940, in assert_called_once_with\n    raise AssertionError(msg)\nAssertionError: Expected 'login' to be called once. Called 0 times.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.017s\n\nFAILED (failures=5)"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nfrom random import choice, randint, sample\nimport string\n\n# Constants\nDATA_TYPES = [str, int, float, list, tuple, dict, set]\n\ndef random_str(length=5):\n    return ''.join(choice(string.ascii_lowercase) for _ in range(length))\n\ndef random_int():\n    return randint(0,9)\n\ndef random_float():\n    return float(randint(0,9))\n\ndef random_list():\n    length = randint(1,5)\n    return [randint(0,9) for _ in range(length)]\n\ndef random_tuple():\n    length = randint(1,5)\n    return tuple(randint(0,9) for _ in range(length))\n\ndef random_dict():\n    length = randint(1,5)\n    keys = sample(range(0,10), k=length)\n    return {k: randint(0,9) for k in keys}\n\ndef random_set():\n    length = randint(1,5)\n    return set(sample(range(0,10), k=length))\n\nGENERATOR_MAP = {\n    str: random_str,\n    int: random_int,\n    float: random_float,\n    list: random_list,\n    tuple: random_tuple,\n    dict: random_dict,\n    set: random_set,\n}\n\ndef task_func(rows, columns):\n    data = {}\n    for col_idx in range(columns):\n        col_name = f'col{col_idx}'\n        dtype = choice(DATA_TYPES)\n        generator = GENERATOR_MAP[dtype]\n        data[col_name] = [generator() for _ in range(rows)]\n    return pd.DataFrame(data)\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nBAR_COLOR = ['blue', 'green', 'red', 'cyan', 'magenta', 'yellow', 'black']\ndef task_func(data_size):\n    data = np.random.rand(data_size)\n    color = np.random.choice(BAR_COLOR)\n    plt.hist(data, color=color)\n    plt.show()\n    return data, color\n```", "match": {"category": "success"}}
{"result": "```python\nimport subprocess\nimport platform\nimport time\n\ndef task_func(url):\n    system = platform.system()\n    if system == \"Windows\":\n        # start process without waiting\n        proc = subprocess.Popen(['start', url], shell=True)\n    elif system == \"Darwin\":\n        proc = subprocess.Popen(['open', url])\n    else:\n        proc = subprocess.Popen(['xdg-open', url])\n    time.sleep(0.1)  # allow process to start\n    return proc.poll() if proc.poll() is not None else 0\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 39, in test_case_3\nAssertionError: 0 != 1\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 51, in test_case_4\nAssertionError: 0 != 1\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 63, in test_case_5\nAssertionError: 0 != 1\n\n----------------------------------------------------------------------\nRan 5 tests in 0.521s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport random\nimport seaborn as sns\nimport numpy as np\nfrom matplotlib import pyplot as plt\ndef task_func(length, range_limit=100, seed=0):\n    if range_limit <= 1:\n        raise ValueError(\"range_limit must be greater than 1\")\n    random.seed(seed)\n    numbers = [random.randint(0, range_limit-1) for _ in range(length)]\n    numbers.sort()\n    sns.set_theme()  # deterministic default seaborn style\n    fig, ax = plt.subplots()\n    sns.histplot(numbers, ax=ax)\n    return ax, numbers\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_case_3\nAssertionError: Lists differ: [0, 3, 14, 18, 22, 24, 24, 25, 30, 30, 32, 35, 37, 41, 60, 63, 64, 64, 71, 71] != [1, 4, 15, 19, 23, 25, 25, 26, 31, 31, 33, 36, 38, 42, 61, 64, 65, 65, 72, 72]\n\nFirst differing element 0:\n0\n1\n\n- [0, 3, 14, 18, 22, 24, 24, 25, 30, 30, 32, 35, 37, 41, 60, 63, 64, 64, 71, 71]\n+ [1, 4, 15, 19, 23, 25, 25, 26, 31, 31, 33, 36, 38, 42, 61, 64, 65, 65, 72, 72]\n\n----------------------------------------------------------------------\nRan 5 tests in 0.308s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport heapq\nimport math\nimport matplotlib.pyplot as plt\ndef task_func(l1, l2, N=10):\n    diffs = [abs(a - b) for a, b in zip(l1, l2)]\n    largest_diffs = heapq.nlargest(N, diffs)\n    fig, ax = plt.subplots()\n    ax.plot(largest_diffs, marker='o', linestyle='-')\n    ax.set_title(f'Top {N} biggest differences')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Difference (sqrt of square)')\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport bisect\nimport statistics\nimport matplotlib.pyplot as plt\ndef task_func(data, value):\n    if not data:\n        return np.array([]), 0\n    \n    avg = statistics.mean(data)\n    greater_than_avg = np.array([x for x in data if x > avg])\n    \n    sorted_data = sorted(data)\n    idx = bisect.bisect_right(sorted_data, value)\n    count_greater_than_value = len(sorted_data) - idx\n    \n    plt.hist(sorted_data, bins='auto')\n    plt.title('Histogram of Sorted Data')\n    plt.xlabel('Value')\n    plt.ylabel('Frequency')\n    plt.show()\n    \n    return greater_than_avg, count_greater_than_value\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport pytz\nfrom datetime import datetime\nfrom random import randint, seed as set_seed\ndef task_func(\n    utc_datetime,\n    cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'],\n    weather_conditions=['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'],\n    timezones={\n        'New York': 'America/New_York',\n        'London': 'Europe/London',\n        'Beijing': 'Asia/Shanghai',\n        'Tokyo': 'Asia/Tokyo',\n        'Sydney': 'Australia/Sydney'\n    },\n    seed=42\n):\n    # Validation\n    if not isinstance(utc_datetime, datetime):\n        raise ValueError(\"utc_datetime must be a datetime object\")\n    if not isinstance(cities, (list, tuple)) or not all(isinstance(city, str) for city in cities):\n        raise ValueError(\"cities must be a list or tuple of strings\")\n    if not isinstance(weather_conditions, (list, tuple)) or not all(isinstance(cond, str) for cond in weather_conditions):\n        raise ValueError(\"weather_conditions must be a list or tuple of strings\")\n    if not isinstance(timezones, dict) or not all(isinstance(k, str) and isinstance(v, str) for k,v in timezones.items()):\n        raise ValueError(\"timezones must be a dictionary with string keys and values\")\n    \n    utc = pytz.utc\n    if utc_datetime.tzinfo is None:\n        utc_datetime = utc.localize(utc_datetime)\n    else:\n        utc_datetime = utc_datetime.astimezone(utc)\n    \n    set_seed(seed)\n    \n    data = []\n    for city in cities:\n        if city not in timezones:\n            raise ValueError(f\"Timezone info not available for city: {city}\")\n        tz = pytz.timezone(timezones[city])\n        local_dt = utc_datetime.astimezone(tz)\n        local_time_str = local_dt.strftime(\"%Y-%m-%d %H:%M:%S \") + local_dt.tzname()\n        weather = weather_conditions[randint(0, len(weather_conditions)-1)]\n        data.append({'City': city, 'Local Time': local_time_str, 'Weather Condition': weather})\n    \n    df = pd.DataFrame(data, columns=['City', 'Local Time', 'Weather Condition'])\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport random\nimport bisect\nimport statistics\nimport matplotlib.pyplot as plt\ndef task_func(n, value):\n    numbers = [random.random() for _ in range(n)]\n    avg = statistics.mean(numbers)\n    greater_than_avg = [num for num in numbers if num > avg]\n\n    sorted_numbers = sorted(numbers)\n    idx = bisect.bisect_left(sorted_numbers, value)\n    count_ge_value = len(sorted_numbers) - idx\n\n    plt.plot(sorted_numbers)\n    plt.title('Sorted Random Numbers')\n    plt.xlabel('Index')\n    plt.ylabel('Value')\n    plt.grid(True)\n    plt.show()\n\n    return greater_than_avg, count_ge_value\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_empty_case (builtins.TestCases)\nTest the function's behavior with n=0.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 31, in test_empty_case\n  File \"<bigcode>\", line 8, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/statistics.py\", line 328, in mean\n    raise StatisticsError('mean requires at least one data point')\nstatistics.StatisticsError: mean requires at least one data point\n\n======================================================================\nFAIL: test_count_greater_than_or_equal_value (builtins.TestCases)\nVerify the count includes numbers greater than or equal to the value.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_count_greater_than_or_equal_value\nAssertionError: 3 != 2\n\n----------------------------------------------------------------------\nRan 5 tests in 0.024s\n\nFAILED (failures=1, errors=1)"}}
{"result": "```python\nimport bisect\nimport statistics\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(df, column, value):\n    if column not in df.columns:\n        raise ValueError(\"Column does not exist in the DataFrame\")\n    col_values = df[column]\n    # Check if all values in the column are numeric\n    if not np.issubdtype(col_values.dtype, np.number):\n        raise ValueError(\"Column contains non-numeric data\")\n    # Check that value is numeric\n    if not isinstance(value, (int, float, np.number)):\n        raise ValueError(\"Value is not a number\")\n\n    avg = col_values.mean()\n    greater_than_avg = col_values[col_values > avg].to_numpy()\n\n    sorted_values = np.sort(col_values.to_numpy())\n    count_greater_than_value = len(sorted_values) - bisect.bisect_right(sorted_values, value)\n\n    fig, ax = plt.subplots()\n    ax.hist(col_values.dropna(), bins='auto')\n    ax.set_title(f'Histogram of {column}')\n    ax.set_xlabel(column)\n    ax.set_ylabel('Frequency')\n\n    return (greater_than_avg, count_greater_than_value, ax)\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport json\nfrom collections import Counter\ndef task_func(json_str, top_n=10):\n    # Load the JSON string into a Python dict\n    data = json.loads(json_str)\n    # Convert dict back to string for regex search\n    data_str = json.dumps(data)\n    # Define URL pattern (example: match http(s) URLs)\n    url_pattern = r'https?://[^\\s\"\\'<>]+'\n    # Find all URLs matching the pattern\n    urls = re.findall(url_pattern, data_str)\n    # Count occurrences of each URL\n    url_counts = Counter(urls)\n    # Return top_n URLs counts as a dict\n    return dict(url_counts.most_common(top_n))\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 7, in test_case_1\nAssertionError: {'https://www.example.com': 1} != {}\n- {'https://www.example.com': 1}\n+ {}\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_case_5\nAssertionError: {} != {'www.johnblog.com': 1}\n- {}\n+ {'www.johnblog.com': 1}\n\n----------------------------------------------------------------------\nRan 5 tests in 0.002s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport json\nimport smtplib\n# Constants\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\nEMAIL_ADDRESS = \"your.email@gmail.com\"\nEMAIL_PASSWORD = \"your.password\"\ndef task_func(input_data=None, smtp_server=SMTP_SERVER, smtp_port=SMTP_PORT, email_address=EMAIL_ADDRESS, email_password=EMAIL_PASSWORD, smtp=None):\n    data = json.loads(input_data)\n    # Extract recipient emails and names\n    recipients = data.get('recipients', [])\n    emails = []\n    names = []\n    for r in recipients:\n        email = r.get('email')\n        name = r.get('name')\n        if email and name:\n            emails.append(email)\n            names.append(name)\n    if not emails or not names:\n        return []\n    # Prepare message\n    subject = \"Extracted Names\"\n    body = \"\\n\".join(names)\n    message = f\"Subject: {subject}\\n\\n{body}\"\n    # Send email\n    if smtp is None:\n        smtp = smtplib.SMTP(smtp_server, smtp_port)\n        smtp.starttls()\n        smtp.login(email_address, email_password)\n        smtp.sendmail(email_address, emails, message)\n        smtp.quit()\n    else:\n        smtp.sendmail(email_address, emails, message)\n    return names\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_f225 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 14, in test_f225\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 940, in assert_called_once_with\n    raise AssertionError(msg)\nAssertionError: Expected 'SMTP' to be called once. Called 0 times.\n\n======================================================================\nFAIL: test_f225_subject (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 27, in test_f225_subject\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 940, in assert_called_once_with\n    raise AssertionError(msg)\nAssertionError: Expected 'SMTP' to be called once. Called 0 times.\n\n======================================================================\nFAIL: test_login (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 72, in test_login\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 940, in assert_called_once_with\n    raise AssertionError(msg)\nAssertionError: Expected 'SMTP' to be called once. Called 0 times.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.005s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport numpy as np\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n\ndef task_func(L):\n    arr = np.array(L)\n    mean = np.mean(arr)\n    median = np.median(arr)\n\n    # Calculate mode(s)\n    counts = Counter(L)\n    max_count = max(counts.values())\n    mode_vals = [k for k,v in counts.items() if v == max_count]\n    mode = mode_vals[0] if len(mode_vals) == 1 else mode_vals\n\n    std_dev = np.std(arr, ddof=0)\n\n    fig, ax = plt.subplots()\n    ax.hist(L, bins='auto', color='skyblue', edgecolor='black')\n    ax.set_title('Histogram of L')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n\n    result = {\n        'mean': mean,\n        'median': median,\n        'mode': mode,\n        'std_dev': std_dev,\n        'plot': ax\n    }\n    return result\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 9, in test_case_1\nAssertionError: [1, 2, 3, 4, 5, 6, 7, 8, 9] != 1\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 33, in test_case_4\nAssertionError: [10, 20, 30, 40, 50, 60, 70, 80, 90, 100] != 10\n\n----------------------------------------------------------------------\nRan 5 tests in 0.089s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport subprocess\nfrom multiprocessing import Pool\ndef execute_command(command):\n    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n    output, _ = process.communicate()\n    return output\ndef task_func(commands):\n    if not commands:\n        return []\n    with Pool() as pool:\n        results = pool.map(execute_command, commands)\n    return results\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_handling_empty_string_command (builtins.TestCases)\nTest the function with an empty string as a command.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 39, in test_handling_empty_string_command\n  File \"<bigcode>\", line 12, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/pool.py\", line 367, in map\n    return self._map_async(func, iterable, mapstar, chunksize).get()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/pool.py\", line 774, in get\n    raise self._value\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/pool.py\", line 540, in _handle_tasks\n    put(task)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/connection.py\", line 206, in send\n    self._send_bytes(_ForkingPickler.dumps(obj))\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/reduction.py\", line 51, in dumps\n    cls(buf, protocol).dump(obj)\n_pickle.PicklingError: Can't pickle <function execute_command at 0x78a3691c3a30>: attribute lookup execute_command on __main__ failed\n\n======================================================================\nERROR: test_handling_specific_number_of_commands (builtins.TestCases)\nTest the function with a specific number of commands.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 32, in test_handling_specific_number_of_commands\n  File \"<bigcode>\", line 12, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/pool.py\", line 367, in map\n    return self._map_async(func, iterable, mapstar, chunksize).get()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/pool.py\", line 774, in get\n    raise self._value\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/pool.py\", line 540, in _handle_tasks\n    put(task)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/connection.py\", line 206, in send\n    self._send_bytes(_ForkingPickler.dumps(obj))\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/reduction.py\", line 51, in dumps\n    cls(buf, protocol).dump(obj)\n_pickle.PicklingError: Can't pickle <function execute_command at 0x78a3691c3a30>: attribute lookup execute_command on __main__ failed\n\n======================================================================\nERROR: test_return_type (builtins.TestCases)\nTest that the function returns a list of byte strings.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 9, in test_return_type\n  File \"<bigcode>\", line 12, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/pool.py\", line 367, in map\n    return self._map_async(func, iterable, mapstar, chunksize).get()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/pool.py\", line 774, in get\n    raise self._value\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/pool.py\", line 540, in _handle_tasks\n    put(task)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/connection.py\", line 206, in send\n    self._send_bytes(_ForkingPickler.dumps(obj))\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/reduction.py\", line 51, in dumps\n    cls(buf, protocol).dump(obj)\n_pickle.PicklingError: Can't pickle <function execute_command at 0x78a3691c3a30>: attribute lookup execute_command on __main__ failed\n\n======================================================================\nERROR: test_return_type_with_mocked_commands (builtins.TestCases)\nTest that the function returns a list with mocked commands.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 24, in test_return_type_with_mocked_commands\n  File \"<bigcode>\", line 12, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/pool.py\", line 367, in map\n    return self._map_async(func, iterable, mapstar, chunksize).get()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/pool.py\", line 774, in get\n    raise self._value\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/pool.py\", line 540, in _handle_tasks\n    put(task)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/connection.py\", line 206, in send\n    self._send_bytes(_ForkingPickler.dumps(obj))\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/reduction.py\", line 51, in dumps\n    cls(buf, protocol).dump(obj)\n_pickle.PicklingError: Can't pickle <function execute_command at 0x78a3691c3a30>: attribute lookup execute_command on __main__ failed\n\n----------------------------------------------------------------------\nRan 5 tests in 3.991s\n\nFAILED (errors=4)"}}
{"result": "```python\nimport csv\nimport json\nimport os\ndef task_func(file_name):\n    if not os.path.isfile(file_name):\n        raise FileNotFoundError(f\"No such file: '{file_name}'\")\n    json_file_name = os.path.splitext(file_name)[0] + '.json'\n    with open(file_name, mode='r', newline='', encoding='utf-8') as csvfile:\n        reader = csv.DictReader(csvfile)\n        data = list(reader)\n    with open(json_file_name, mode='w', encoding='utf-8') as jsonfile:\n        json.dump(data, jsonfile, indent=4)\n    return json_file_name\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport requests\ndef task_func(input):\n    # Extract the first API endpoint URL from the input string\n    match = re.search(r'https?://[^\\s\\'\"<>]+', input)\n    if not match:\n        return {}\n    url = match.group(0)\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n        return response.json()\n    except (requests.RequestException, ValueError):\n        return {}\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(elements, seed=0):\n    if not (isinstance(elements, int) and elements > 0):\n        raise ValueError(\"elements must be a positive integer.\")\n    np.random.seed(seed)\n    steps = np.random.choice([-1, 1], size=elements)\n    walk = np.cumsum(steps)\n    desc = {\n        \"count\": elements,\n        \"mean\": walk.mean(),\n        \"std\": walk.std(),\n        \"min\": walk.min(),\n        \"5%\": np.percentile(walk, 5),\n        \"25%\": np.percentile(walk, 25),\n        \"50%\": np.median(walk),\n        \"75%\": np.percentile(walk, 75),\n        \"95%\": np.percentile(walk, 95),\n        \"max\": walk.max()\n    }\n    fig, ax = plt.subplots()\n    ax.plot(walk, label=\"Random Walk\")\n    ax.set_title(\"1D Random Walk\")\n    ax.set_xlabel(\"Step\")\n    ax.set_ylabel(\"Position\")\n    ax.legend()\n    return desc, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 22, in test_case_1\nAssertionError: 3.9280529527998986 != 3.94784 within 5 places (0.01978704720010116 difference)\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 46, in test_case_5\nAssertionError: '1D Random Walk' != 'Random Walk'\n- 1D Random Walk\n? ---\n+ Random Walk\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.082s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport numpy as np\nfrom operator import itemgetter\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    data = np.array(data)\n    fig, ax = plt.subplots()\n    ax.scatter(data[:,0], data[:,1], label='Data Points')\n    max_idx = max(range(len(data)), key=lambda i: data[i,1])\n    ax.scatter(data[max_idx,0], data[max_idx,1], color='red', label='Max y-value', zorder=5)\n    ax.set_title('Max Tuple Highlighted')\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.legend()\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport collections\nfrom operator import itemgetter\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    counts = collections.Counter(data)\n    max_letter, max_value = max(counts.items(), key=itemgetter(1))\n    letters = list(counts.keys())\n    values = list(counts.values())\n    \n    colors = ['tab:blue' if letter != max_letter else 'tab:orange' for letter in letters]\n    \n    fig, ax = plt.subplots()\n    bars = ax.bar(letters, values, color=colors)\n    \n    ax.set_xlabel('Letter')\n    ax.set_ylabel('Count')\n    ax.set_title('Letter Counts with Max Value Letter Highlighted')\n    \n    from matplotlib.patches import Patch\n    legend_elements = [Patch(facecolor='tab:blue', label='Letter Counts'),\n                       Patch(facecolor='tab:orange', label='Max Value Letter')]\n    ax.legend(handles=legend_elements)\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\nTest if the number of bars in the plot matches the number of unique letters in the dataset.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 6, in setUp\n  File \"<bigcode>\", line 14, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/__init__.py\", line 1442, in inner\n    return func(ax, *map(sanitize_sequence, args), **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/axes/_axes.py\", line 2392, in bar\n    self._process_unit_info(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/axes/_base.py\", line 2551, in _process_unit_info\n    axis.update_units(data)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/axis.py\", line 1670, in update_units\n    default = self.converter.default_units(data, self)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/category.py\", line 105, in default_units\n    axis.set_units(UnitData(data))\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/category.py\", line 181, in __init__\n    self.update(data)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/category.py\", line 214, in update\n    for val in OrderedDict.fromkeys(data):\nTypeError: unhashable type: 'numpy.ndarray'\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\nTest if the letter with the maximum value is correctly highlighted.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 6, in setUp\n  File \"<bigcode>\", line 14, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/__init__.py\", line 1442, in inner\n    return func(ax, *map(sanitize_sequence, args), **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/axes/_axes.py\", line 2392, in bar\n    self._process_unit_info(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/axes/_base.py\", line 2551, in _process_unit_info\n    axis.update_units(data)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/axis.py\", line 1670, in update_units\n    default = self.converter.default_units(data, self)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/category.py\", line 105, in default_units\n    axis.set_units(UnitData(data))\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/category.py\", line 181, in __init__\n    self.update(data)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/category.py\", line 214, in update\n    for val in OrderedDict.fromkeys(data):\nTypeError: unhashable type: 'numpy.ndarray'\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\nTest if the plot has correct labels, title, and legend.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 6, in setUp\n  File \"<bigcode>\", line 14, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/__init__.py\", line 1442, in inner\n    return func(ax, *map(sanitize_sequence, args), **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/axes/_axes.py\", line 2392, in bar\n    self._process_unit_info(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/axes/_base.py\", line 2551, in _process_unit_info\n    axis.update_units(data)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/axis.py\", line 1670, in update_units\n    default = self.converter.default_units(data, self)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/category.py\", line 105, in default_units\n    axis.set_units(UnitData(data))\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/category.py\", line 181, in __init__\n    self.update(data)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/category.py\", line 214, in update\n    for val in OrderedDict.fromkeys(data):\nTypeError: unhashable type: 'numpy.ndarray'\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\nTest if the frequency counts for each letter are correct.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 6, in setUp\n  File \"<bigcode>\", line 14, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/__init__.py\", line 1442, in inner\n    return func(ax, *map(sanitize_sequence, args), **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/axes/_axes.py\", line 2392, in bar\n    self._process_unit_info(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/axes/_base.py\", line 2551, in _process_unit_info\n    axis.update_units(data)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/axis.py\", line 1670, in update_units\n    default = self.converter.default_units(data, self)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/category.py\", line 105, in default_units\n    axis.set_units(UnitData(data))\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/category.py\", line 181, in __init__\n    self.update(data)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/category.py\", line 214, in update\n    for val in OrderedDict.fromkeys(data):\nTypeError: unhashable type: 'numpy.ndarray'\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\nTest if non-maximum value letters are not highlighted.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 6, in setUp\n  File \"<bigcode>\", line 14, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/__init__.py\", line 1442, in inner\n    return func(ax, *map(sanitize_sequence, args), **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/axes/_axes.py\", line 2392, in bar\n    self._process_unit_info(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/axes/_base.py\", line 2551, in _process_unit_info\n    axis.update_units(data)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/axis.py\", line 1670, in update_units\n    default = self.converter.default_units(data, self)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/category.py\", line 105, in default_units\n    axis.set_units(UnitData(data))\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/category.py\", line 181, in __init__\n    self.update(data)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/category.py\", line 214, in update\n    for val in OrderedDict.fromkeys(data):\nTypeError: unhashable type: 'numpy.ndarray'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.073s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport requests\nimport os\nimport zipfile\n\ndef task_func(url, destination_directory, headers=None):\n    os.makedirs(destination_directory, exist_ok=True)\n    response = requests.get(url, headers=headers)\n    response.raise_for_status()\n    zip_path = os.path.join(destination_directory, \"temp.zip\")\n    with open(zip_path, \"wb\") as f:\n        f.write(response.content)\n    extracted_files = []\n    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n        zip_ref.extractall(destination_directory)\n        extracted_files = zip_ref.namelist()\n    os.remove(zip_path)\n    return extracted_files\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 56, in test_2\n  File \"<bigcode>\", line 7, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/os.py\", line 215, in makedirs\n    makedirs(head, exist_ok=exist_ok)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/os.py\", line 215, in makedirs\n    makedirs(head, exist_ok=exist_ok)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/os.py\", line 225, in makedirs\n    mkdir(name, mode)\nPermissionError: [Errno 13] Permission denied: '/path'\n\n======================================================================\nERROR: test_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 81, in test_3\n  File \"<bigcode>\", line 7, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/os.py\", line 215, in makedirs\n    makedirs(head, exist_ok=exist_ok)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/os.py\", line 215, in makedirs\n    makedirs(head, exist_ok=exist_ok)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/os.py\", line 225, in makedirs\n    mkdir(name, mode)\nPermissionError: [Errno 13] Permission denied: '/path'\n\n======================================================================\nERROR: test_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 106, in test_4\n  File \"<bigcode>\", line 7, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/os.py\", line 215, in makedirs\n    makedirs(head, exist_ok=exist_ok)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/os.py\", line 215, in makedirs\n    makedirs(head, exist_ok=exist_ok)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/os.py\", line 225, in makedirs\n    mkdir(name, mode)\nPermissionError: [Errno 13] Permission denied: '/path'\n\n======================================================================\nERROR: test_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 131, in test_5\n  File \"<bigcode>\", line 7, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/os.py\", line 215, in makedirs\n    makedirs(head, exist_ok=exist_ok)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/os.py\", line 215, in makedirs\n    makedirs(head, exist_ok=exist_ok)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/os.py\", line 225, in makedirs\n    mkdir(name, mode)\nPermissionError: [Errno 13] Permission denied: '/path'\n\n======================================================================\nERROR: test_download_and_extract (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 31, in test_download_and_extract\n  File \"<bigcode>\", line 7, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/os.py\", line 215, in makedirs\n    makedirs(head, exist_ok=exist_ok)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/os.py\", line 215, in makedirs\n    makedirs(head, exist_ok=exist_ok)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/os.py\", line 225, in makedirs\n    mkdir(name, mode)\nPermissionError: [Errno 13] Permission denied: '/path'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.038s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport numpy as np\nfrom operator import itemgetter\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    fig, ax = plt.subplots()\n    data = np.array(data)\n    x = data[:,0]\n    y = data[:,1]\n    ax.scatter(x, y)\n    max_point = tuple(data[data[:,1].argmax()])\n    ax.scatter([max_point[0]], [max_point[1]], color='red', zorder=5)\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_title('Points with Max Y Point Highlighted')\n    return ax, max_point\n```", "match": {"category": "success"}}
{"result": "```python\nimport time\nimport random\nimport matplotlib.pyplot as plt\nfrom scipy.stats import kurtosis\n\ndef task_func(intervals=100, seed=0):\n    random.seed(seed)\n    values = []\n    times = []\n    start_time = time.time()\n    for i in range(intervals):\n        values.append(random.random())\n        times.append(time.time() - start_time)\n        time.sleep(1)\n    kurt = kurtosis(values)\n    fig, ax = plt.subplots()\n    ax.plot(times, values, marker='o')\n    ax.set_xlabel('Elapsed Time (s)')\n    ax.set_ylabel('Random Value')\n    ax.set_title('Random Values over Time')\n    return ax, kurt\n```", "match": {"category": "success"}}
{"result": "```python\nimport random\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\n\ndef task_func(seed=42, image_size=(100, 100, 3), range_low=0, range_high=255):\n    if range_low >= range_high:\n        raise ValueError(\"range_low must be less than range_high\")\n    random.seed(seed)\n    np.random.seed(seed)\n    image = np.random.randint(range_low, range_high, size=image_size, dtype=np.uint8)\n    # Convert RGB to BGR for OpenCV display, but since we use matplotlib, we keep RGB\n    fig, ax = plt.subplots()\n    ax.imshow(image)\n    ax.axis('off')\n    plt.show()\n    return ax, image\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_image_size_and_type (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 16, in test_image_size_and_type\nAssertionError: Lists differ: [[[102, 220, 225], [95, 179, 61], [234, 203,[6229 chars]32]]] != [[[57, 12, 140], [125, 114, 71], [52, 44, 21[6305 chars]45]]]\n\nFirst differing element 0:\n[[102, 220, 225], [95, 179, 61], [234, 203,[269 chars]221]]\n[[57, 12, 140], [125, 114, 71], [52, 44, 21[266 chars] 36]]\n\nDiff is 17110 characters long. Set self.maxDiff to None to see it. : DataFrame contents should match the expected output\n\n----------------------------------------------------------------------\nRan 5 tests in 0.798s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport requests\nimport json\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Constants\nHEADERS = {\n    'accept': 'application/json'\n}\n\ndef task_func(url, parameters):\n    if not isinstance(url, str) or not url.strip():\n        raise Exception(\"Invalid URL\")\n\n    try:\n        response = requests.get(url, headers=HEADERS, params=parameters, timeout=10)\n        response.raise_for_status()\n    except Exception as e:\n        raise Exception(f\"URL cannot be accessed or invalid: {e}\")\n\n    try:\n        data = response.json()\n    except json.JSONDecodeError:\n        raise Exception(\"Invalid data, not a valid JSON\")\n\n    if not data:\n        raise Exception(\"Empty data\")\n\n    # Try to convert to DataFrame\n    try:\n        if isinstance(data, dict):\n            # If data is dict, try to find list inside (e.g. key 'data'), else use values of first key\n            if any(isinstance(v, list) for v in data.values()):\n                # Find the first list for DataFrame conversion\n                list_vals = next((v for v in data.values() if isinstance(v, list)), None)\n                df = pd.DataFrame(list_vals)\n            else:\n                # If no list found, convert dict to one-row DataFrame\n                df = pd.DataFrame([data])\n        elif isinstance(data, list):\n            df = pd.DataFrame(data)\n        else:\n            raise Exception(\"Invalid data format to convert to DataFrame\")\n    except Exception:\n        raise Exception(\"Invalid data, cannot convert to DataFrame\")\n\n    if df.empty:\n        raise Exception(\"Empty data after conversion to DataFrame\")\n\n    # Select only numerical columns for correlation\n    numeric_df = df.select_dtypes(include='number')\n    if numeric_df.empty:\n        raise Exception(\"No numerical columns to compute correlation\")\n\n    corr = numeric_df.corr()\n\n    plt.figure(figsize=(10, 8))\n    ax = sns.heatmap(corr, annot=True, fmt='.2f', cmap='coolwarm', cbar=True)\n    plt.title('Correlation Heatmap')\n    plt.tight_layout()\n    plt.show()\n\n    return df, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_valid_request (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 21, in test_valid_request\nAssertionError: False is not true\n\n----------------------------------------------------------------------\nRan 6 tests in 0.214s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pandas as pd\nimport os\nimport json\nfrom collections import Counter\nimport re\n\ndef task_func(json_dir_path, word_count):\n    counter = Counter()\n    for filename in os.listdir(json_dir_path):\n        if filename.endswith('.json'):\n            filepath = os.path.join(json_dir_path, filename)\n            try:\n                with open(filepath, 'r', encoding='utf-8') as f:\n                    data = json.load(f)\n                    # Extract text: if the JSON structure is unknown, assume top-level keys containing strings\n                    # Here, we extract all string values recursively\n                    def extract_text(obj):\n                        texts = []\n                        if isinstance(obj, dict):\n                            for v in obj.values():\n                                texts.extend(extract_text(v))\n                        elif isinstance(obj, list):\n                            for item in obj:\n                                texts.extend(extract_text(item))\n                        elif isinstance(obj, str):\n                            texts.append(obj)\n                        return texts\n                    \n                    texts = extract_text(data)\n                    full_text = ' '.join(texts)\n                    # Clean and split text into words\n                    words = re.findall(r'\\b\\w+\\b', full_text.lower())\n                    counter.update(words)\n            except Exception:\n                pass\n    return counter.most_common(word_count)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 91, in test_case_1\nAssertionError: 'final' != 'success'\n- final\n+ success\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.005s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(mu=0, sigma=1, sample_size=1000, seed=0):\n    np.random.seed(seed)\n    sample = np.random.normal(loc=mu, scale=sigma, size=sample_size)\n    empirical_mean = np.mean(sample)\n    empirical_std = np.std(sample)\n\n    fig, ax = plt.subplots()\n    # Plot histogram\n    count, bins, ignored = ax.hist(sample, bins=30, density=True, alpha=0.6, color='b', edgecolor='black')\n\n    # Calculate the PDF curve\n    x = np.linspace(min(bins), max(bins), 1000)\n    pdf = stats.norm.pdf(x, mu, sigma)\n    ax.plot(x, pdf, 'r', lw=2)\n\n    ax.set_title(f'Normal Distribution with $\\\\mu = {mu:.2f}, \\\\sigma = {sigma:.2f}$')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Density')\n\n    return ax, empirical_mean, empirical_std\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\n\n# Constants\nFEATURES = ['feature1', 'feature2', 'feature3', 'feature4', 'feature5']\nTARGET = 'target'\n\ndef task_func(df, dict_mapping, plot_histogram=False):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a pandas DataFrame.\")\n    missing_cols = [col for col in FEATURES + [TARGET] if col not in df.columns]\n    if missing_cols:\n        raise ValueError(f\"Columns missing in DataFrame: {missing_cols}\")\n\n    df_replaced = df.replace(dict_mapping)\n    scaler = StandardScaler()\n    df_replaced[FEATURES] = scaler.fit_transform(df_replaced[FEATURES])\n\n    ax = None\n    if plot_histogram:\n        fig, ax = plt.subplots()\n        ax.hist(df_replaced[TARGET], bins=30, edgecolor='black')\n        ax.set_title(f'Histogram of {TARGET}')\n        ax.set_xlabel(TARGET)\n        ax.set_ylabel('Frequency')\n\n    return df_replaced, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport math\nimport statistics\nimport numpy as np\n\ndef task_func(input_list):\n    # Sort input list by degree value (assuming each element can be interpreted as 'degree value')\n    # Assuming 'degree value' means the numeric value of the elements themselves\n    sorted_list = sorted(input_list)\n    \n    # Calculate mean, median, mode of sorted list\n    mean_sorted = round(statistics.mean(sorted_list))\n    median_sorted = round(statistics.median(sorted_list))\n    try:\n        mode_sorted = round(statistics.mode(sorted_list))\n    except statistics.StatisticsError:\n        # If no unique mode, pick the first element as fallback mode\n        mode_sorted = round(sorted_list[0])\n    \n    # Compute FFT of degree values (the sorted list)\n    fft_vals = np.fft.fft(sorted_list)\n    # Magnitude of FFT values\n    fft_magnitude = np.abs(fft_vals)\n    # Round to nearest integer\n    fft_magnitude_rounded = np.round(fft_magnitude)\n    \n    # Calculate mean, median, mode of FFT magnitude\n    mean_fft = round(statistics.mean(fft_magnitude_rounded))\n    median_fft = round(statistics.median(fft_magnitude_rounded))\n    try:\n        mode_fft = round(statistics.mode(fft_magnitude_rounded))\n    except statistics.StatisticsError:\n        mode_fft = round(fft_magnitude_rounded[0])\n    \n    return (mean_sorted, median_sorted, mode_sorted,\n            mean_fft, median_fft, mode_fft)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_case_1\nAssertionError: Tuples differ: (81, 60, 30, 187, 148, 148) != (81, 60, 30, 10712, 8460, 8460)\n\nFirst differing element 3:\n187\n10712\n\n- (81, 60, 30, 187, 148, 148)\n+ (81, 60, 30, 10712, 8460, 8460)\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_case_2\nAssertionError: Tuples differ: (180, 180, 0, 428, 383, 383) != (180, 180, 0, 24508, 21932, 21932)\n\nFirst differing element 3:\n428\n24508\n\n- (180, 180, 0, 428, 383, 383)\n+ (180, 180, 0, 24508, 21932, 21932)\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 18, in test_case_3\nAssertionError: Tuples differ: (30, 30, 10, 58, 43, 43) != (30, 30, 10, 3296, 2437, 2437)\n\nFirst differing element 3:\n58\n3296\n\n- (30, 30, 10, 58, 43, 43)\n?              ^^\n\n+ (30, 30, 10, 3296, 2437, 2437)\n?              ^^^^  +  +  +  +\n\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 23, in test_case_4\nAssertionError: Tuples differ: (82, 82, 15, 199, 110) != (82.5, 82.5, 15, 11366, 6311)\n\nFirst differing element 0:\n82\n82.5\n\n- (82, 82, 15, 199, 110)\n+ (82.5, 82.5, 15, 11366, 6311)\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_case_5\nAssertionError: Tuples differ: (32, 32, 5, 82, 42, 116) != (32.5, 32.5, 5, 4718, 2431, 6641)\n\nFirst differing element 0:\n32\n32.5\n\n- (32, 32, 5, 82, 42, 116)\n+ (32.5, 32.5, 5, 4718, 2431, 6641)\n\n----------------------------------------------------------------------\nRan 5 tests in 0.005s\n\nFAILED (failures=5)"}}
{"result": "```python\nfrom random import choice\nimport turtle\nimport time\ndef task_func(colors):\n    screen = turtle.Screen()\n    t = turtle.Turtle()\n    t.speed(0)\n    size = 50\n    start_x = -125\n    start_y = 0\n    for i in range(5):\n        t.penup()\n        t.goto(start_x + i * (size + 10), start_y)\n        t.pendown()\n        col = choice(colors)\n        t.fillcolor(col)\n        t.begin_fill()\n        for _ in range(4):\n            t.forward(size)\n            t.right(90)\n        t.end_fill()\n        time.sleep(1)\n    turtle.done()\n```", "match": {"category": "timeout", "error": "Test execution timed out after 10 seconds"}}
{"result": "```python\nimport numpy as np\nfrom scipy import stats\n# Constants\nFEATURES = ['feature1', 'feature2', 'feature3', 'feature4', 'feature5']\ndef task_func(df, dct):\n    try:\n        if 'feature1' not in df.columns:\n            return \"Invalid input\"\n        # Replace values in DataFrame according to dct\n        df_replaced = df.replace(dct)\n        \n        result = {}\n        for feature in FEATURES:\n            if feature not in df_replaced.columns:\n                return \"Invalid input\"\n            data = df_replaced[feature].dropna()\n            if data.empty:\n                return \"Invalid input\"\n            mean_val = data.mean()\n            median_val = data.median()\n            mode_vals = stats.mode(data, nan_policy='omit', keepdims=True)\n            # mode_vals.mode can be empty if no mode found, fallback to NaN\n            mode_val = mode_vals.mode[0] if mode_vals.count[0] > 0 else np.nan\n            var_val = data.var(ddof=0)  # population variance\n            \n            result[feature] = {\n                'mean': mean_val,\n                'median': median_val,\n                'mode': mode_val,\n                'variance': var_val\n            }\n        return result\n    except:\n        return \"Invalid input\"\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_case_1\nAssertionError: 'Invalid input' != {'feature1': {'mean': 3.0, 'median': 3.0,[321 chars]006}}\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 44, in test_case_2\nAssertionError: 'Invalid input' != {'feature1': {'mean': 1.6, 'median': 1.0,[328 chars]2.0}}\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 63, in test_case_3\nAssertionError: 'Invalid input' != {'feature1': {'mean': 2.0, 'median': 2.0,[379 chars]666}}\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 83, in test_case_4\nAssertionError: 'Invalid input' != {'feature1': {'mean': 2.0, 'median': 2.0,[385 chars]666}}\n\n----------------------------------------------------------------------\nRan 5 tests in 0.014s\n\nFAILED (failures=4)"}}
{"result": "```python\nimport math\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(list_input):\n    # Sort the list based on degree value of elements\n    sorted_list = sorted(list_input, key=lambda x: math.degrees(x))\n    # Calculate cumulative sum using numpy\n    cumsum = np.cumsum(sorted_list)\n    # Plot the cumulative sum line chart\n    fig, ax = plt.subplots()\n    ax.plot(cumsum)\n    return cumsum, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 7, in test_case_1\nAssertionError: '' != 'Cumulative Sum Plot'\n+ Cumulative Sum Plot\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_case_2\nAssertionError: '' != 'Cumulative Sum Plot'\n+ Cumulative Sum Plot\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 19, in test_case_3\nAssertionError: '' != 'Cumulative Sum Plot'\n+ Cumulative Sum Plot\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_case_4\nAssertionError: '' != 'Cumulative Sum Plot'\n+ Cumulative Sum Plot\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 31, in test_case_5\nAssertionError: '' != 'Cumulative Sum Plot'\n+ Cumulative Sum Plot\n\n----------------------------------------------------------------------\nRan 5 tests in 0.072s\n\nFAILED (failures=5)"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\n\ndef task_func(df, dct, columns=None):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame.\")\n    \n    # Work on a copy to avoid modifying original DataFrame\n    df = df.copy()\n    \n    # Replace specified values\n    df.replace(dct, inplace=True)\n    \n    # If columns is None, consider all columns\n    if columns is None:\n        columns = df.columns.tolist()\n    \n    # Separate columns into categorical and numerical\n    categorical_cols = df[columns].select_dtypes(include=['object', 'category']).columns.tolist()\n    numerical_cols = df[columns].select_dtypes(include=['number']).columns.tolist()\n    \n    # Encode categorical columns\n    for col in categorical_cols:\n        le = LabelEncoder()\n        df[col] = le.fit_transform(df[col])\n    \n    # Standardize numerical columns\n    for col in numerical_cols:\n        mean = df[col].mean()\n        std = df[col].std()\n        if std != 0:\n            df[col] = (df[col] - mean) / std\n        else:\n            df[col] = 0\n    \n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 30, in test_case_3\nAssertionError: dtype('int64') not found in [<class 'numpy.float64'>]\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 47, in test_case_5\nAssertionError: dtype('int64') not found in [<class 'numpy.float64'>]\n\n----------------------------------------------------------------------\nRan 6 tests in 0.020s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.fft import fft\n\ndef task_func(range_start=-10, range_end=10, step=0.1):\n    def generator():\n        x = range_start\n        while x <= range_end:\n            sx = np.sin(x)\n            cx = np.cos(x)\n            yield (x, sx, cx, abs(sx - cx))\n            x += step\n\n    gen = generator()\n    xs, sins, coss, diffs = [], [], [], []\n\n    for tup in gen:\n        xs.append(tup[0])\n        sins.append(tup[1])\n        coss.append(tup[2])\n        diffs.append(tup[3])\n\n    fig, ax = plt.subplots()\n    ax.plot(xs, sins, label='sin(x)')\n    ax.plot(xs, coss, label='cos(x)')\n    ax.plot(xs, diffs, label='|sin(x) - cos(x)|')\n    ax.legend()\n    ax.set_xlabel('x')\n    ax.set_title('sin, cos and their absolute difference')\n\n    fft_diff = fft(diffs)\n    mean_fft = abs(np.mean(fft_diff))\n    median_fft = abs(np.median(fft_diff))\n\n    # recreate generator since previous was exhausted\n    def new_gen():\n        for x, s, c, d in zip(xs, sins, coss, diffs):\n            yield (x, s, c, d)\n\n    return (new_gen(), ax, mean_fft, median_fft)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 15, in test_case_2\nAssertionError: 51 != 50 : Unexpected number of points generated\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_case_3\nAssertionError: 14 != 610 : Unexpected number of lines in the plot\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 39, in test_case_5\nAssertionError: 0.57 != 0.54 within 0.01 delta (0.029999999999999916 difference) : Unexpected median of the 1D fft\n\n----------------------------------------------------------------------\nRan 5 tests in 0.093s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df, dct, columns=None, plot_histograms=False):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame.\")\n    \n    # If columns not specified, use all columns in df\n    if columns is None:\n        columns = df.columns.tolist()\n    \n    # Replace values as per dictionary mapping only for specified columns\n    df_replaced = df.copy()\n    for col in columns:\n        if col in df_replaced.columns:\n            df_replaced[col] = df_replaced[col].replace(dct)\n    \n    # Rename columns to col1, col2, ...\n    rename_map = {old_col: f\"col{i+1}\" for i, old_col in enumerate(df_replaced.columns)}\n    df_replaced.rename(columns=rename_map, inplace=True)\n    \n    # Plot histograms if required\n    if plot_histograms:\n        for col in df_replaced.columns:\n            plt.figure()\n            df_replaced[col].hist()\n            plt.title(f\"Histogram of {col}\")\n            plt.xlabel(col)\n            plt.ylabel(\"Frequency\")\n            plt.show()\n    \n    return df_replaced\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_columns_not_in_dataframe (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 29, in test_columns_not_in_dataframe\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1224, in assert_frame_equal\n    assert_series_equal(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 931, in assert_series_equal\n    assert_attr_equal(\"dtype\", left, right, obj=f\"Attributes of {obj}\")\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 415, in assert_attr_equal\n    raise_assert_detail(obj, msg, left_attr, right_attr)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: Attributes of DataFrame.iloc[:, 0] (column name=\"col1\") are different\n\nAttribute \"dtype\" are different\n[left]:  int64\n[right]: object\n\n======================================================================\nFAIL: test_empty_dataframe (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 23, in test_empty_dataframe\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1185, in assert_frame_equal\n    assert_index_equal(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 263, in assert_index_equal\n    _check_types(left, right, obj=obj)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 241, in _check_types\n    assert_attr_equal(\"inferred_type\", left, right, obj=obj)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 415, in assert_attr_equal\n    raise_assert_detail(obj, msg, left_attr, right_attr)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame.columns are different\n\nAttribute \"inferred_type\" are different\n[left]:  empty\n[right]: integer\n\n======================================================================\nFAIL: test_histogram_plotting (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 36, in test_histogram_plotting\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1224, in assert_frame_equal\n    assert_series_equal(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 931, in assert_series_equal\n    assert_attr_equal(\"dtype\", left, right, obj=f\"Attributes of {obj}\")\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 415, in assert_attr_equal\n    raise_assert_detail(obj, msg, left_attr, right_attr)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: Attributes of DataFrame.iloc[:, 0] (column name=\"col1\") are different\n\nAttribute \"dtype\" are different\n[left]:  int64\n[right]: object\n\n----------------------------------------------------------------------\nRan 6 tests in 0.109s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport numpy as np\nimport math\nimport matplotlib.pyplot as plt\n\ndef task_func(range_start=0, range_end=10, step=0.1):\n    def gen_exp_values():\n        x = range_start\n        while x <= range_end:\n            yield (x, math.exp(x))\n            x += step\n    \n    gen = gen_exp_values()\n    \n    xs = []\n    ys = []\n    for x, y in gen:\n        xs.append(x)\n        ys.append(y)\n    \n    fig, ax = plt.subplots()\n    ax.plot(xs, ys, label='e^x')\n    ax.set_xlabel('x')\n    ax.set_ylabel('e^x')\n    ax.set_title('Exponential Function')\n    ax.legend()\n    \n    # Re-create the generator since it was exhausted\n    def gen_exp_values_re():\n        x = range_start\n        while x <= range_end:\n            yield (x, math.exp(x))\n            x += step\n    gen_re = gen_exp_values_re()\n    \n    return gen_re, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_case_1\nAssertionError: 'Exponential Function' != 'Exponential Function Plot'\n- Exponential Function\n+ Exponential Function Plot\n?                     +++++\n\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 40, in test_case_4\nAssertionError: 113 != 210\n\n----------------------------------------------------------------------\nRan 5 tests in 0.225s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport numpy as np\nimport os\nimport soundfile as sf\nimport librosa\nimport matplotlib.pyplot as plt\n\ndef task_func(L, M, N, audio_file):\n    if not os.path.isfile(audio_file):\n        raise FileNotFoundError(f\"Audio file '{audio_file}' does not exist.\")\n\n    # Create MxN matrix from list L (truncate or pad as needed)\n    length = M * N\n    if len(L) < length:\n        arr = np.array(L + [0]*(length - len(L)), dtype=float)\n    else:\n        arr = np.array(L[:length], dtype=float)\n    matrix = arr.reshape(M, N)\n\n    # Read audio data and compute SPL\n    data, sr = sf.read(audio_file)\n    if len(data.shape) > 1:\n        data = data.mean(axis=1)  # convert to mono if stereo\n    rms = np.sqrt(np.mean(data ** 2))\n    spl = 20 * np.log10(rms) if rms > 0 else -np.inf\n\n    # Normalize matrix by SPL (adjust amplitude)\n    # We scale matrix so that its max amplitude corresponds to 10^(SPL/20)\n    # But if SPL = -inf (rms=0), do not scale\n    if spl == -np.inf:\n        normalized_matrix = matrix\n    else:\n        scale_factor = 10**(spl/20)\n        max_val = np.max(np.abs(matrix))\n        if max_val > 0:\n            normalized_matrix = (matrix / max_val) * scale_factor\n        else:\n            normalized_matrix = matrix\n\n    # Generate spectrogram of normalized matrix amplitude\n    amplitude = np.abs(normalized_matrix)\n\n    fig, ax = plt.subplots()\n    # Use librosa to create a spectrogram from the matrix amplitudes\n    # Treat each row as a time slice, columns as frequency bins\n    # Calculate a spectrogram from amplitude data as if it were a time series\n    # We consider each row a time frame, and columns frequency bins\n\n    # To generate a spectrogram, we can treat each row as a time frame and columns as frequency bins amplitude\n    # So plot the matrix amplitude with a log frequency axis (y) and linear time axis (x)\n\n    # Create frequency axis in log scale, from 1 to N (to avoid log(0))\n    freqs = np.linspace(1, N, N)\n    times = np.arange(M)\n\n    # Plot with imshow using aspect='auto', origin='lower'\n    img = ax.imshow(amplitude.T, aspect='auto', origin='lower',\n                    extent=[times[0], times[-1], freqs[0], freqs[-1]],\n                    norm=plt.Normalize(vmin=0, vmax=amplitude.max()))\n    ax.set_yscale('log')\n    ax.set_xlabel('Time (frames)')\n    ax.set_ylabel('Frequency bins (log scale)')\n    ax.set_title('Spectrogram (Amplitude adjusted by SPL)')\n    fig.colorbar(img, ax=ax, label='Amplitude')\n\n    plt.tight_layout()\n    return normalized_matrix, fig\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_empty_list_input (builtins.TestCases)\nTest handling of an empty list which should raise an error during reshaping.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 13, in test_empty_list_input\nAssertionError: ValueError not raised\n\n======================================================================\nFAIL: test_spl_calculation (builtins.TestCases)\nTest the sound pressure level (SPL) calculation.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 45, in test_spl_calculation\nAssertionError: 0.21602468994692867 != -0.0 within 7 places (0.21602468994692867 difference)\n\n======================================================================\nFAIL: test_successful_matrix_creation (builtins.TestCases)\nTest successful matrix creation without executing the plotting.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 26, in test_successful_matrix_creation\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 898, in assert_called\n    raise AssertionError(msg)\nAssertionError: Expected 'specshow' to have been called.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.495s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\n# Constants\nCOLUMNS = ['column1', 'column2', 'column3', 'column4', 'column5']\ndef task_func(df, dct):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a pandas DataFrame.\")\n    # Replace values in df according to dct\n    df_replaced = df.replace(dct)\n    # Convert all columns to numeric, coercing errors to NaN\n    df_numeric = df_replaced.apply(pd.to_numeric, errors='coerce')\n    # Calculate Pearson correlation matrix\n    corr_matrix = df_numeric.corr(method='pearson')\n    return corr_matrix\n```", "match": {"category": "success"}}
{"result": "```python\nimport json\nimport random\nfrom datetime import datetime, timedelta\n# Constants\nUSERS = ['Alice', 'Bob', 'Charlie', 'Dave', 'Eve']\nACTIONS = ['login', 'logout', 'upload', 'download', 'delete', 'update']\n\ndef task_func(file_path, num_entries, seed=None):\n    if seed is not None:\n        random.seed(seed)\n    now = datetime.utcnow()\n    logs = []\n    for _ in range(num_entries):\n        user = random.choice(USERS)\n        action = random.choice(ACTIONS)\n        # Random timestamp within the last 30 days\n        delta = timedelta(seconds=random.randint(0, 30*24*60*60))\n        timestamp = (now - delta).isoformat() + 'Z'\n        logs.append({\n            'user': user,\n            'action': action,\n            'timestamp': timestamp\n        })\n    with open(file_path, 'w', encoding='utf-8') as f:\n        json.dump(logs, f, indent=2)\n    return file_path\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 46, in test_case_3\nAssertionError: Lists differ: [{'us[64 chars]03.333939Z'}, {'user': 'Bob', 'action': 'logou[696 chars]9Z'}] != [{'us[64 chars]03.334160Z'}, {'user': 'Bob', 'action': 'logou[696 chars]0Z'}]\n\nFirst differing element 0:\n{'user': 'Alice', 'action': 'login', 'timestamp': '2025-05-11T13:32:03.333939Z'}\n{'user': 'Alice', 'action': 'login', 'timestamp': '2025-05-11T13:32:03.334160Z'}\n\nDiff is 2391 characters long. Set self.maxDiff to None to see it.\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 72, in test_case_5\nAssertionError: 'update' not found in ['login', 'logout', 'view_page', 'edit_profile', 'post_message']\n\n----------------------------------------------------------------------\nRan 5 tests in 0.008s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n# Constants\nCOLUMNS = ['Name', 'Age', 'Country', 'Score']\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame):\n        return \"Invalid input\"\n    if not all(col in df.columns for col in ['Name', 'Country', 'Score']):\n        return \"Invalid input\"\n    # Keep unique names only\n    df_unique = df.drop_duplicates(subset='Name')\n    if df_unique.empty:\n        return \"Invalid input\"\n\n    fig, axs = plt.subplots(1, 2, figsize=(12, 5))\n    \n    # Histogram of Scores\n    sns.histplot(df_unique['Score'], bins=10, ax=axs[0])\n    axs[0].set_title(\"Histogram of Scores\")\n    axs[0].set_xlabel(\"Score\")\n    axs[0].set_ylabel(\"Count\")\n    \n    # Boxplot of Scores by Country\n    sns.boxplot(x='Country', y='Score', data=df_unique, ax=axs[1])\n    axs[1].set_title(\"Boxplot of Scores by Country\")\n    axs[1].set_xlabel(\"Country\")\n    axs[1].set_ylabel(\"Score\")\n    plt.tight_layout()\n    return fig\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport scipy.stats as stats\nimport matplotlib.pyplot as plt\nimport random\nfrom matplotlib.axes import Axes\nclass ValueObject:\n    value = 0\n    def __init__(self, mu=0, std=1, seed=77):\n        random.seed(seed)\n        self.value = random.gauss(mu, std)\ndef task_func(obj_list) -> Axes:\n    values = [obj.value for obj in obj_list]\n    if len(values) == 0:\n        mean = 0\n        std = 0\n    else:\n        mean = np.mean(values)\n        std = np.std(values, ddof=1) if len(values) > 1 else 0\n    fig, ax = plt.subplots()\n    if len(values) > 0:\n        ax.hist(values, bins='auto', density=True, alpha=0.6, color='g')\n    else:\n        # for empty list, just plot empty histogram base line\n        ax.hist([], bins=1, density=True, alpha=0)\n    if std > 0:\n        x = np.linspace(mean - 4*std, mean + 4*std, 1000)\n        y = stats.norm.pdf(x, mean, std)\n        ax.plot(x, y, 'r-', lw=2)\n    elif std == 0 and len(values) > 0:\n        # Plot a single spike for zero std (all values identical)\n        ax.axvline(mean, color='r', lw=2)\n    ax.set_title(\"Histogram and Normal Distribution\")\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Density\")\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 9, in test_case_1\nAssertionError: 'Histogram and Normal Distribution' != 'Fit results: mu = 10.76,  std = 39.42'\n- Histogram and Normal Distribution\n+ Fit results: mu = 10.76,  std = 39.42\n\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 15, in test_case_2\nAssertionError: 'Histogram and Normal Distribution' != 'Fit results: mu = 40.53,  std = 0.00'\n- Histogram and Normal Distribution\n+ Fit results: mu = 40.53,  std = 0.00\n\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_case_3\nAssertionError: 'Histogram and Normal Distribution' != 'Fit results: mu = 27.52,  std = 32.92'\n- Histogram and Normal Distribution\n+ Fit results: mu = 27.52,  std = 32.92\n\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_case_4\nAssertionError: 'Histogram and Normal Distribution' != 'Fit results: mu = 0.00,  std = 0.00'\n- Histogram and Normal Distribution\n+ Fit results: mu = 0.00,  std = 0.00\n\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 33, in test_case_5\nAssertionError: 'Histogram and Normal Distribution' != 'Fit results: mu = -88.28,  std = 0.00'\n- Histogram and Normal Distribution\n+ Fit results: mu = -88.28,  std = 0.00\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.061s\n\nFAILED (failures=5)"}}
{"result": "```python\nimport pandas as pd\nimport collections\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df_unique = df.drop_duplicates(subset='Customer Name')\n    total_sales = df_unique['Sales'].sum()\n    category_counts = collections.Counter(df_unique['Category'])\n    if not category_counts:\n        most_popular = None\n    else:\n        max_count = max(category_counts.values())\n        most_common_categories = [cat for cat, count in category_counts.items() if count == max_count]\n        most_popular = sorted(most_common_categories)[0]\n    return {'Total Sales': total_sales, 'Most Popular Category': most_popular}\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_empty (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_case_empty\n  File \"<bigcode>\", line 7, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 6522, in drop_duplicates\n    result = self[-self.duplicated(subset, keep=keep)]\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 6654, in duplicated\n    raise KeyError(Index(diff))\nKeyError: Index(['Customer Name'], dtype='object')\n\n======================================================================\nERROR: test_case_regular (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_case_regular\n  File \"<bigcode>\", line 7, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 6522, in drop_duplicates\n    result = self[-self.duplicated(subset, keep=keep)]\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 6654, in duplicated\n    raise KeyError(Index(diff))\nKeyError: Index(['Customer Name'], dtype='object')\n\n======================================================================\nERROR: test_case_tie_categories (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 45, in test_case_tie_categories\n  File \"<bigcode>\", line 7, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 6522, in drop_duplicates\n    result = self[-self.duplicated(subset, keep=keep)]\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 6654, in duplicated\n    raise KeyError(Index(diff))\nKeyError: Index(['Customer Name'], dtype='object')\n\n======================================================================\nERROR: test_case_unique_customers (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 35, in test_case_unique_customers\n  File \"<bigcode>\", line 7, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 6522, in drop_duplicates\n    result = self[-self.duplicated(subset, keep=keep)]\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 6654, in duplicated\n    raise KeyError(Index(diff))\nKeyError: Index(['Customer Name'], dtype='object')\n\n======================================================================\nERROR: test_case_with_duplicates (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_case_with_duplicates\n  File \"<bigcode>\", line 7, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 6522, in drop_duplicates\n    result = self[-self.duplicated(subset, keep=keep)]\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 6654, in duplicated\n    raise KeyError(Index(diff))\nKeyError: Index(['Customer Name'], dtype='object')\n\n----------------------------------------------------------------------\nRan 6 tests in 0.008s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport random\nimport matplotlib.pyplot as plt\n# Sample data\nclass Object:\n    value = 0\n    def __init__(self, value=None):\n        if value is None:\n            self.value = random.gauss(0, 1)\n        else:\n            self.value = value\ndef task_func(obj_list, attr, num_bins=30, seed=0):\n    random.seed(seed)\n    values = [getattr(obj, attr) for obj in obj_list]\n    fig, ax = plt.subplots()\n    ax.hist(values, bins=num_bins)\n    ax.set_title('Histogram of attribute values')\n    ax.set_xlabel('Attribute Value')\n    ax.set_ylabel('Count')\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame\")\n    df_unique = df.drop_duplicates(subset='name')\n    x = df_unique['age']\n    y = df_unique['score']\n    slope, intercept, _, _, _ = stats.linregress(x, y)\n    plt_obj = plt\n    fig, ax = plt.subplots()\n    ax.scatter(x, y)\n    ax.plot(x, intercept + slope * x, 'r')\n    ax.set_title(\"Linear Regression\")\n    ax.set_xlabel(\"Age\")\n    ax.set_ylabel(\"Score\")\n    return plt_obj, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_correct_data_handling (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_correct_data_handling\n  File \"<bigcode>\", line 8, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 6522, in drop_duplicates\n    result = self[-self.duplicated(subset, keep=keep)]\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 6654, in duplicated\n    raise KeyError(Index(diff))\nKeyError: Index(['name'], dtype='object')\n\n======================================================================\nERROR: test_empty_dataframe (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 40, in test_empty_dataframe\n  File \"<bigcode>\", line 8, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 6522, in drop_duplicates\n    result = self[-self.duplicated(subset, keep=keep)]\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 6654, in duplicated\n    raise KeyError(Index(diff))\nKeyError: Index(['name'], dtype='object')\n\n======================================================================\nERROR: test_linear_regression (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 22, in test_linear_regression\n  File \"<bigcode>\", line 8, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 6522, in drop_duplicates\n    result = self[-self.duplicated(subset, keep=keep)]\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 6654, in duplicated\n    raise KeyError(Index(diff))\nKeyError: Index(['name'], dtype='object')\n\n======================================================================\nERROR: test_plotting_elements (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 31, in test_plotting_elements\n  File \"<bigcode>\", line 8, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 6522, in drop_duplicates\n    result = self[-self.duplicated(subset, keep=keep)]\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 6654, in duplicated\n    raise KeyError(Index(diff))\nKeyError: Index(['name'], dtype='object')\n\n----------------------------------------------------------------------\nRan 6 tests in 0.006s\n\nFAILED (errors=4)"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\nimport pandas as pd\nfrom scipy.stats import norm\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    np.random.seed(seed)\n    data = np.random.normal(mu, sigma, num_samples)\n    \n    fig, ax = plt.subplots()\n    counts, bins, patches = ax.hist(data, bins=num_bins, density=True, alpha=0.6, color='gray', edgecolor='black')\n    \n    # Plot PDF\n    x_vals = np.linspace(bins[0], bins[-1], 500)\n    pdf_vals = norm.pdf(x_vals, mu, sigma)\n    ax.plot(x_vals, pdf_vals, color='red', label='Normal PDF')\n    \n    # Prepare data for OLS: bin midpoints as x, counts as y\n    bin_midpoints = 0.5 * (bins[:-1] + bins[1:])\n    df = pd.DataFrame({'x': bin_midpoints, 'y': counts})\n    \n    # Add polynomial terms\n    df['x2'] = df['x']**2\n    \n    # Fit OLS quadratic model\n    model = ols('y ~ x + x2', data=df).fit()\n    \n    # Predict at bin midpoints\n    y_pred = model.predict(df)\n    ax.plot(bin_midpoints, y_pred, color='green', label='OLS 2nd order fit')\n    \n    ax.legend()\n    \n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_case_1\nAssertionError: 'red' != 'r'\n- red\n+ r\n : The PDF line color should be red.\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 16, in test_case_2\nAssertionError: 'red' != 'r'\n- red\n+ r\n : The PDF line color should be red.\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_case_3\nAssertionError: 'red' != 'r'\n- red\n+ r\n : The PDF line color should be red.\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 38, in test_case_4\nAssertionError: 'red' != 'r'\n- red\n+ r\n : The PDF line color should be red.\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 46, in test_case_5\nAssertionError: 'red' != 'r'\n- red\n+ r\n : The PDF line color should be red.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.164s\n\nFAILED (failures=5)"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\ndef task_func(df, test_size=0.2, random_state=42):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a pandas DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    X = df[['Age', 'Score']]\n    y = df['Category']\n    X_train, X_test, y_train, y_test = train_test_split(\n        X, y, test_size=test_size, random_state=random_state)\n    clf = RandomForestClassifier(random_state=random_state)\n    clf.fit(X_train, y_train)\n    y_pred = clf.predict(X_test)\n    return accuracy_score(y_test, y_pred)\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\n\ndef task_func(data, save_plot=False, plot_path=None):\n    objects, coords = zip(*data)\n    coords = np.array(coords)\n    pca = PCA(n_components=2)\n    coordinates_2d = pca.fit_transform(coords)\n\n    if save_plot:\n        if plot_path is None:\n            raise ValueError(\"plot_path must be provided if save_plot is True\")\n        fig, ax = plt.subplots()\n        ax.scatter(coordinates_2d[:, 0], coordinates_2d[:, 1])\n        for obj, (x, y) in zip(objects, coordinates_2d):\n            ax.annotate(obj, (x, y))\n        plt.savefig(plot_path)\n        plt.close(fig)\n        return coordinates_2d, ax\n    else:\n        return coordinates_2d, None\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_case_1\n  File \"<bigcode>\", line 7, in task_func\nValueError: too many values to unpack (expected 2)\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 22, in test_case_3\n  File \"<bigcode>\", line 7, in task_func\nValueError: too many values to unpack (expected 2)\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_case_4\n  File \"<bigcode>\", line 7, in task_func\nValueError: too many values to unpack (expected 2)\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 34, in test_case_5\n  File \"<bigcode>\", line 7, in task_func\nValueError: too many values to unpack (expected 2)\n\n----------------------------------------------------------------------\nRan 5 tests in 0.000s\n\nFAILED (errors=4)"}}
{"result": "```python\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\n\ndef task_func(df):\n    df = df.drop_duplicates(subset='Name').copy()\n    scaler = StandardScaler()\n    df[['Age', 'Score']] = scaler.fit_transform(df[['Age', 'Score']])\n    \n    fig, ax = plt.subplots()\n    ax.scatter(df['Age'], df['Score'])\n    ax.set_title(\"Scatter Plot of Standardized Age and Score\")\n    ax.set_xlabel(\"Age (standardized)\")\n    ax.set_ylabel(\"Score (standardized)\")\n    \n    return df, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(original):\n    # Extract numeric values from tuples (flatten and filter non-numeric)\n    values = []\n    for item in original:\n        for v in item:\n            try:\n                val = float(v)\n                values.append(val)\n            except (ValueError, TypeError):\n                continue\n    arr = np.array(values)\n    \n    # Compute basic statistics\n    stats_dict = {\n        'mean': np.mean(arr),\n        'std': np.std(arr),\n        'min': np.min(arr),\n        'max': np.max(arr)\n    }\n    \n    # Plot histogram with overlaid PDF\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(arr, bins='auto', density=True, alpha=0.6, color='g')\n    \n    # Overlay PDF using gaussian kernel density estimate\n    kde = stats.gaussian_kde(arr)\n    x = np.linspace(arr.min(), arr.max(), 1000)\n    pdf = kde(x)\n    ax.plot(x, pdf, 'r-', lw=2)\n    \n    ax.set_xlabel('Value')\n    ax.set_ylabel('Density')\n    ax.set_title('Histogram and PDF')\n    \n    return arr, stats_dict, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_case_4\n  File \"<bigcode>\", line 30, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/scipy/stats/kde.py\", line 206, in __init__\n    self.set_bandwidth(bw_method=bw_method)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/scipy/stats/kde.py\", line 554, in set_bandwidth\n    self._compute_covariance()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/scipy/stats/kde.py\", line 566, in _compute_covariance\n    self._data_inv_cov = linalg.inv(self._data_covariance)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/scipy/linalg/basic.py\", line 968, in inv\n    raise LinAlgError(\"singular matrix\")\nnumpy.linalg.LinAlgError: singular matrix\n\n----------------------------------------------------------------------\nRan 5 tests in 0.051s\n\nFAILED (errors=1)"}}
{"result": "```python\nimport pandas as pd\nfrom random import uniform\n\ndef task_func(n_data_points=1000, min_value=0.0, max_value=10.0, column_name='Value'):\n    data = [int(uniform(min_value, max_value) * 1000) / 1000 for _ in range(n_data_points)]\n    df = pd.DataFrame(data, columns=[column_name])\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\n\ndef task_func(original):\n    original_array = np.array(original)\n    normalized_array = preprocessing.normalize(original_array.reshape(1, -1)).flatten()\n    \n    fig, ax = plt.subplots()\n    ax.plot(original_array, label='Original')\n    ax.plot(normalized_array, label='Normalized')\n    ax.set_title('Original vs. Normalized Data')\n    ax.legend()\n    \n    return original_array, normalized_array, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 7, in test_case_1\n  File \"<bigcode>\", line 8, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/utils/_param_validation.py\", line 211, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/preprocessing/_data.py\", line 1841, in normalize\n    X = check_array(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 915, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 380, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\nValueError: could not convert string to float: 'a'\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_case_2\n  File \"<bigcode>\", line 8, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/utils/_param_validation.py\", line 211, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/preprocessing/_data.py\", line 1841, in normalize\n    X = check_array(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 915, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 380, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\nValueError: could not convert string to float: 'a'\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 36, in test_case_3\n  File \"<bigcode>\", line 8, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/utils/_param_validation.py\", line 211, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/preprocessing/_data.py\", line 1841, in normalize\n    X = check_array(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 915, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 380, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\nValueError: could not convert string to float: 'a'\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 49, in test_case_4\n  File \"<bigcode>\", line 8, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/utils/_param_validation.py\", line 211, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/preprocessing/_data.py\", line 1841, in normalize\n    X = check_array(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 915, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 380, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\nValueError: could not convert string to float: 'a'\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 66, in test_case_5\n  File \"<bigcode>\", line 8, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/utils/_param_validation.py\", line 211, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/preprocessing/_data.py\", line 1841, in normalize\n    X = check_array(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 976, in check_array\n    raise ValueError(\nValueError: Found array with 0 feature(s) (shape=(1, 0)) while a minimum of 1 is required by the normalize function.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.004s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport cv2\nimport matplotlib.pyplot as plt\n\ndef task_func(image_path, kernel_size):\n    if not isinstance(kernel_size, int) or kernel_size <= 0:\n        raise ValueError(\"kernel_size must be a positive integer.\")\n    image = cv2.imread(image_path)\n    if image is None:\n        raise FileNotFoundError(f\"No such file: '{image_path}'\")\n    blurred = cv2.blur(image, (kernel_size, kernel_size))\n    blurred_rgb = cv2.cvtColor(blurred, cv2.COLOR_BGR2RGB)\n    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    fig, axs = plt.subplots(1, 2, figsize=(10, 5))\n    axs[0].imshow(image_rgb)\n    axs[0].set_title(\"Original Image\")\n    axs[0].axis(\"off\")\n    axs[1].imshow(blurred_rgb)\n    axs[1].set_title(f\"Blurred Image (kernel={kernel_size})\")\n    axs[1].axis(\"off\")\n    plt.tight_layout()\n    return blurred, axs[0], axs[1]\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_valid_input (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 17, in test_valid_input\nAssertionError: 'Original Image' != 'Original'\n- Original Image\n?         ------\n+ Original\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.089s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pandas as pd\nimport random\n# Constants\nN_DATA_POINTS = 10000\nMIN_VALUE = 0.0\nMAX_VALUE = 10.0\ndef task_func(n_data_points=N_DATA_POINTS):\n    if n_data_points == 0:\n        return pd.DataFrame(columns=['Value'])\n    values = []\n    for _ in range(n_data_points):\n        val = random.uniform(MIN_VALUE, MAX_VALUE)\n        truncated_val = int(val * 1000) / 1000\n        values.append(truncated_val)\n    return pd.DataFrame({'Value': values})\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nfrom scipy.fft import fft\nfrom matplotlib import pyplot as plt\ndef task_func(original):\n    if not original:\n        return np.array([]), np.array([]), None\n    orig_array = np.array(original)\n    fft_data = fft(orig_array)\n    fig, ax = plt.subplots()\n    ax.hist(np.abs(fft_data), bins=30)\n    ax.set_title(\"Histogram of FFT magnitude\")\n    ax.set_xlabel(\"Magnitude\")\n    ax.set_ylabel(\"Frequency\")\n    return orig_array, fft_data, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 6, in test_case_1\n  File \"<bigcode>\", line 9, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/scipy/fft/_backend.py\", line 23, in __ua_function__\n    return fn(*args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/scipy/fft/_pocketfft/basic.py\", line 17, in c2c\n    tmp = _asfarray(x)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/scipy/fft/_pocketfft/helper.py\", line 92, in _asfarray\n    return np.asarray(x, np.float64)\nValueError: could not convert string to float: 'a'\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_case_2\n  File \"<bigcode>\", line 9, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/scipy/fft/_backend.py\", line 23, in __ua_function__\n    return fn(*args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/scipy/fft/_pocketfft/basic.py\", line 17, in c2c\n    tmp = _asfarray(x)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/scipy/fft/_pocketfft/helper.py\", line 92, in _asfarray\n    return np.asarray(x, np.float64)\nValueError: could not convert string to float: 'a'\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 22, in test_case_3\n  File \"<bigcode>\", line 9, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/scipy/fft/_backend.py\", line 23, in __ua_function__\n    return fn(*args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/scipy/fft/_pocketfft/basic.py\", line 17, in c2c\n    tmp = _asfarray(x)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/scipy/fft/_pocketfft/helper.py\", line 92, in _asfarray\n    return np.asarray(x, np.float64)\nValueError: could not convert string to float: 'a'\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_case_4\n  File \"<bigcode>\", line 9, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/scipy/fft/_backend.py\", line 23, in __ua_function__\n    return fn(*args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/scipy/fft/_pocketfft/basic.py\", line 17, in c2c\n    tmp = _asfarray(x)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/scipy/fft/_pocketfft/helper.py\", line 92, in _asfarray\n    return np.asarray(x, np.float64)\nValueError: could not convert string to float: 'a'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.001s\n\nFAILED (errors=4)"}}
{"result": "```python\nimport pandas as pd\nimport random\nfrom scipy import stats\n\ndef task_func(n_data_points=5000, min_value=0.0, max_value=10.0):\n    data = [round(random.uniform(min_value, max_value), 3) for _ in range(n_data_points)]\n    s = pd.Series(data)\n    mode_res = stats.mode(s, nan_policy='omit')\n    mode_val = mode_res.mode[0] if mode_res.count[0] > 0 else None\n    return {\n        'mean': s.mean(),\n        'median': s.median(),\n        'mode': mode_val\n    }\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.fft import fft\nANGLES = np.arange(0, 2*np.pi, 0.01)\ndef task_func(n_waves, seed=0):\n    if n_waves < 1:\n        return [], np.array([]), None\n\n    np.random.seed(seed)\n    sine_waves = []\n    for i in range(1, n_waves + 1):\n        sine_wave = np.sin(i * ANGLES)\n        sine_waves.append(sine_wave)\n\n    mixed_signal = np.sum(sine_waves, axis=0)\n    fft_data = fft(mixed_signal)\n\n    magnitudes = np.abs(fft_data)\n    fig, ax = plt.subplots()\n    ax.hist(magnitudes, bins=50)\n    ax.set_xlabel(\"Magnitude\")\n    ax.set_ylabel(\"Frequency\")\n    ax.set_title(\"Histogram of FFT magnitudes\")\n    plt.close(fig)\n\n    return sine_waves, fft_data, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_case_2\nAssertionError: 50 != 10\n\n----------------------------------------------------------------------\nRan 5 tests in 0.078s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pandas as pd\nimport random\nfrom sklearn.preprocessing import StandardScaler\n# Constants\nN_DATA_POINTS = 5000\nMIN_VALUE = 0.0\nMAX_VALUE = 10.0\ndef task_func(n_data_points=5000, min_value=0.0, max_value=10.0):\n    if max_value < min_value:\n        raise ValueError(\"max_value must be greater than or equal to min_value.\")\n    data = [float(f\"{random.uniform(min_value, max_value):.3f}\") for _ in range(n_data_points)]\n    df = pd.DataFrame(data, columns=[\"Value\"])\n    scaler = StandardScaler()\n    normalized = scaler.fit_transform(df[[\"Value\"]])\n    df_norm = pd.DataFrame(normalized, columns=[\"Normalized Value\"])\n    return df_norm\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport itertools\ndef task_func(data_list):\n    if not data_list:\n        raise ValueError(\"If the data_list is empty.\")\n    # Unzip the list of tuples\n    unzipped = list(zip(*data_list))\n    \n    # Convert unzipped data to numpy arrays for plotting\n    arrs = [np.array(col) for col in unzipped]\n    \n    fig, ax = plt.subplots()\n    for i, arr in enumerate(arrs):\n        ax.plot(arr, label=f'Position {i}')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Value')\n    ax.legend()\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_case_2\nAssertionError: 3 != 2\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 23, in test_case_4\nAssertionError: 3 != 2\n\n----------------------------------------------------------------------\nRan 5 tests in 0.075s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport pandas as pd\nimport random\nfrom sklearn.model_selection import train_test_split\ndef task_func(n_data_points=10000, min_value=0.0, max_value=10.0, test_size=0.2):\n    data = [float(f\"{random.uniform(min_value, max_value):.3f}\") for _ in range(n_data_points)]\n    df = pd.DataFrame(data, columns=[\"Value\"])\n    train_df, test_df = train_test_split(df, test_size=test_size, random_state=42)\n    return train_df.reset_index(drop=True), test_df.reset_index(drop=True)\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport itertools\nimport json\ndef task_func(data_list, json_file_name=\"mean_values.json\"):\n    # Transpose the data_list to group by position, handling uneven lengths\n    grouped = itertools.zip_longest(*data_list, fillvalue=np.nan)\n    \n    means = {}\n    for i, group in enumerate(grouped, 1):\n        # Filter numeric values, ignoring None and np.nan\n        numeric_vals = [x for x in group if isinstance(x, (int, float)) and not (isinstance(x, float) and np.isnan(x))]\n        mean_val = np.mean(numeric_vals) if numeric_vals else None\n        means[f'Position {i}'] = mean_val\n\n    # Write to json file\n    with open(json_file_name, 'w') as f:\n        json.dump(means, f)\n\n    return means\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_case_1\nAssertionError: {'Position 1': None, 'Position 2': 3.0, 'Position 3': 4.0} != {'Position 1': 3.0, 'Position 2': 4.0}\n- {'Position 1': None, 'Position 2': 3.0, 'Position 3': 4.0}\n+ {'Position 1': 3.0, 'Position 2': 4.0}\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 16, in test_case_2\nAssertionError: {'Position 1': None, 'Position 2': 20.0, 'Position 3': 30.0} != {'Position 1': 20.0, 'Position 2': 30.0}\n- {'Position 1': None, 'Position 2': 20.0, 'Position 3': 30.0}\n+ {'Position 1': 20.0, 'Position 2': 30.0}\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_case_3\nAssertionError: {'Position 1': None, 'Position 2': 10.0} != {'Position 1': 10.0}\n- {'Position 1': None, 'Position 2': 10.0}\n+ {'Position 1': 10.0}\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_case_4\nAssertionError: {'Position 1': None, 'Position 2': 4.0, 'Position 3': 5.0, 'Position 4': 6.0} != {'Position 1': 4.0, 'Position 2': 5.0, 'Position 3': 6.0}\n- {'Position 1': None, 'Position 2': 4.0, 'Position 3': 5.0, 'Position 4': 6.0}\n?                ^^^^                ^                 -------------------\n\n+ {'Position 1': 4.0, 'Position 2': 5.0, 'Position 3': 6.0}\n?                ^^^                ^\n\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 31, in test_case_5\nAssertionError: {'Position 1': None, 'Position 2': 2.0, 'Position 3': 3.0} != {'Position 1': 2.0, 'Position 2': 3.0}\n- {'Position 1': None, 'Position 2': 2.0, 'Position 3': 3.0}\n+ {'Position 1': 2.0, 'Position 2': 3.0}\n\n----------------------------------------------------------------------\nRan 5 tests in 0.005s\n\nFAILED (failures=5)"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Input data must be a pandas DataFrame.\")\n    if 'job' not in data.columns:\n        raise ValueError(\"DataFrame must contain a 'job' column.\")\n    job_counts = data['job'].value_counts()\n    fig, ax = plt.subplots()\n    ax.pie(job_counts, labels=job_counts.index, autopct='%1.1f%%', startangle=90)\n    ax.set_title('Job Distribution')\n    ax.axis('equal')  # Equal aspect ratio ensures pie chart is circular.\n    return fig\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_empty_data (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 7, in test_empty_data\n  File \"<bigcode>\", line 8, in task_func\nValueError: DataFrame must contain a 'job' column.\n\n======================================================================\nERROR: test_large_dataset (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 33, in test_large_dataset\n  File \"<bigcode>\", line 8, in task_func\nValueError: DataFrame must contain a 'job' column.\n\n======================================================================\nERROR: test_multiple_jobs (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_multiple_jobs\n  File \"<bigcode>\", line 8, in task_func\nValueError: DataFrame must contain a 'job' column.\n\n======================================================================\nERROR: test_repeated_jobs (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_repeated_jobs\n  File \"<bigcode>\", line 8, in task_func\nValueError: DataFrame must contain a 'job' column.\n\n======================================================================\nERROR: test_single_job (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_single_job\n  File \"<bigcode>\", line 8, in task_func\nValueError: DataFrame must contain a 'job' column.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.006s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport matplotlib.pyplot as plt\nfrom itertools import zip_longest\n# Constants\nCOLORS = ['red', 'green', 'blue', 'yellow', 'purple']\ndef task_func(data, labels):\n    fig, ax = plt.subplots()\n    n_colors = len(COLORS)\n    n_labels = len(labels)\n    for i, (series, label) in enumerate(zip_longest(data, labels, fillvalue=None)):\n        if i < n_colors:\n            color = COLORS[i]\n        elif i < n_colors + n_labels:\n            color = COLORS[i % n_colors]\n        else:\n            color = 'black'\n        ax.plot(series, color=color, label=label)\n    if any(label is not None for label in labels):\n        ax.legend()\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 35, in test_case_4\nAssertionError: 'red' != 'black'\n- red\n+ black\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.070s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport numpy as np\nimport random\n# Constants\nCOLORS = ['b', 'g', 'r', 'c', 'm', 'y', 'k']\ndef task_func(ax):\n    color = random.choice(COLORS)\n    theta = np.linspace(0, 2 * np.pi, 500)\n    amplitude = random.uniform(0.5, 1.0)\n    frequency = random.randint(1, 10)\n    phase = random.uniform(0, 2*np.pi)\n    r = 1 + amplitude * np.sin(frequency * theta + phase)\n    ax.plot(theta, r, color=color)\n    ax.set_rlabel_position(random.choice(range(0, 360)))\n    return color\n```", "match": {"category": "success"}}
{"result": "```python\nimport json\nimport math\ndef task_func(decimal_value, precision=2):\n    sqrt_value = round(math.sqrt(decimal_value), precision)\n    return json.dumps(str(sqrt_value))\n```", "match": {"category": "success"}}
{"result": "```python\nimport matplotlib\nimport numpy as np\n# Constants\nFUNCTIONS = [np.sin, np.cos, np.tan]\n\ndef task_func(ax, func_index):\n    if not isinstance(ax, matplotlib.axes.Axes):\n        raise ValueError(\"Input ax must be an instance of matplotlib.axes.Axes\")\n\n    if not (0 <= func_index < len(FUNCTIONS)):\n        raise ValueError(f\"func_index must be between 0 and {len(FUNCTIONS)-1}\")\n\n    func = FUNCTIONS[func_index]\n\n    # Prepare polar axis\n    ax.set_theta_direction(-1)\n    ax.set_theta_zero_location('N')\n\n    # Create theta values (radians)\n    theta = np.linspace(0, 2*np.pi, 1000)\n\n    # Compute r values\n    with np.errstate(divide='ignore', invalid='ignore'):\n        r = func(theta)\n\n    # Mask invalid or extremely large values (for tan)\n    r = np.ma.masked_where(np.abs(r) > 10, r)\n\n    # Plot the function\n    ax.plot(theta, r, label=f'{func.__name__}(theta)')\n\n    # Set radial ticks at positions corresponding to index * 45 degrees\n    tick_angle_deg = func_index * 45\n    tick_angle_rad = np.deg2rad(tick_angle_deg)\n\n    # Set yticks at standard positions but label with empty labels\n    # Then add radial ticks using ax.annotate or custom ticks\n\n    # Construct radial ticks locations and labels: show ticks at func_index*45 degrees\n    ax.set_rticks(np.linspace(0, ax.get_rmax(), 5))  # default radial ticks\n\n    # Since radial ticks are distance from center, to place radial ticks at angle is unusual\n    # Interpretation: place (angular) ticks at func_index*45 degrees\n\n    # Set angular ticks at multiples of 45 deg\n    angles = np.arange(0, 360, 45)\n    labels = [str(angle) if angle == tick_angle_deg else '' for angle in angles]\n    ax.set_xticks(np.deg2rad(angles))\n    ax.set_xticklabels(labels)\n\n    ax.legend()\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_invalid_index (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_invalid_index\n  File \"<bigcode>\", line 12, in task_func\nValueError: func_index must be between 0 and 2\n\n======================================================================\nFAIL: test_rlabel_position (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_rlabel_position\nAssertionError: 22.5 != 45 : Rlabel position should be 45 for index 1\n\n----------------------------------------------------------------------\nRan 6 tests in 0.123s\n\nFAILED (failures=1, errors=1)"}}
{"result": "```python\nimport json\nimport random\nimport hashlib\nfrom datetime import datetime\ndef task_func(utc_datetime, salt='salt', password_length=10, seed=0):\n    if not isinstance(utc_datetime, datetime):\n        raise ValueError(\"utc_datetime must be a datetime object\")\n    if not isinstance(salt, str):\n        raise ValueError(\"salt must be a string\")\n\n    random.seed(seed)\n    chars = 'abcdefghijklmnopqrstuvwxyz0123456789'\n    password = ''.join(random.choices(chars, k=password_length))\n\n    datetime_str = utc_datetime.isoformat()\n    combined = salt + datetime_str + password\n    hashed = hashlib.sha256(combined.encode()).hexdigest()\n\n    return json.dumps(hashed)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 18, in test_case_1\nAssertionError: '595df65fa9557e4684d9e20cc1b96fe53a97bed53081d5b035f838c41d74f1d4' != '3da4b6faf766416fe75b2e5efd831f0fc907e0cc450e7fb58f61110be0a6ab3a'\n- 595df65fa9557e4684d9e20cc1b96fe53a97bed53081d5b035f838c41d74f1d4\n+ 3da4b6faf766416fe75b2e5efd831f0fc907e0cc450e7fb58f61110be0a6ab3a\n\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 41, in test_case_3\nAssertionError: '4ad989fc67b7d37ead1a438cb23ac53e3d921f1537abda9fed0753950fe08d6c' != 'afd33d74be6cbfb08c6ad76d6f8556ef910e252912d7ebb13603ace3edccd260'\n- 4ad989fc67b7d37ead1a438cb23ac53e3d921f1537abda9fed0753950fe08d6c\n+ afd33d74be6cbfb08c6ad76d6f8556ef910e252912d7ebb13603ace3edccd260\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.002s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport numpy as np\nimport math\ndef task_func(ax, num_turns):\n    theta = np.linspace(0, 2 * np.pi * num_turns, 1000)\n    r = theta / (2 * np.pi)  # radius grows linearly with the angle (number of turns)\n    ax.plot(theta, r)\n    \n    # Set radial ticks at intervals corresponding to num_turns * 45 degrees = num_turns * \u03c0/4 radians\n    interval_deg = num_turns * 45\n    interval_rad = np.deg2rad(interval_deg)\n    \n    # Angular ticks\n    ax.set_xticks(np.arange(0, 2 * np.pi, interval_rad))\n    ax.set_xticklabels([f'{int(np.rad2deg(t))}\u00b0' for t in np.arange(0, 2 * np.pi, interval_rad)])\n    \n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_zero_turns (builtins.TestCases)\nTest the function with zero turns\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 14, in test_zero_turns\n  File \"<bigcode>\", line 14, in task_func\nValueError: Maximum allowed size exceeded\n\n======================================================================\nFAIL: test_positive_turns (builtins.TestCases)\nTest the function with positive number of turns\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 11, in test_positive_turns\nAssertionError: 22.5 != 135\n\n----------------------------------------------------------------------\nRan 5 tests in 0.145s\n\nFAILED (failures=1, errors=1)"}}
{"result": "```python\nimport json\nimport random\n# Constants\nDATA = [\n    {'name': 'John', 'age': 30, 'city': 'New York'},\n    {'name': 'Peter', 'age': 35, 'city': 'London'},\n    {'name': 'Susan', 'age': 25, 'city': 'Sydney'},\n    {'name': 'Alice', 'age': 28, 'city': 'Paris'},\n    {'name': 'Bob', 'age': 40, 'city': 'Tokyo'},\n    {'name': 'Charlie', 'age': 22, 'city': 'Beijing'},\n    {'name': 'David', 'age': 33, 'city': 'Mumbai'},\n    {'name': 'Eve', 'age': 27, 'city': 'Berlin'},\n    {'name': 'Frank', 'age': 32, 'city': 'Moscow'},\n    {'name': 'Grace', 'age': 29, 'city': 'Rome'}\n]\ndef task_func(utc_datetime, seed=0):\n    random.seed(seed)\n    person = random.choice(DATA).copy()\n    person['timestamp'] = utc_datetime.isoformat()\n    return json.dumps(person)\n```", "match": {"category": "success"}}
{"result": "```python\nimport matplotlib\nimport numpy as np\n\ndef task_func(ax, num_points):\n    if not isinstance(ax, matplotlib.axes.Axes):\n        raise ValueError(\"ax must be a matplotlib.axes.Axes instance\")\n    if not isinstance(num_points, int) or num_points < 0:\n        raise ValueError(\"num_points must be a non-negative integer\")\n    \n    # Generate random points in polar coordinates\n    theta = np.random.uniform(0, 2*np.pi, num_points)\n    r = np.random.uniform(0, 1, num_points)\n    \n    ax.clear()\n    ax.set_theta_zero_location(\"N\")\n    ax.set_theta_direction(-1)\n    \n    # Plot points\n    ax.scatter(theta, r)\n    \n    # Set radial ticks based on num_points/10 degrees\n    # degrees step = num_points / 10\n    step_deg = num_points / 10 if num_points > 0 else 36  # default step if zero points\n    # Convert degrees to radians for theta ticks\n    theta_ticks = np.deg2rad(np.arange(0, 360, step_deg))\n    ax.set_xticks(theta_ticks)\n    \n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_case_1\nAssertionError: 22.5 != 1.0 : Radial label position should be set to 1\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_case_2\nAssertionError: 22.5 != 10.0 : Radial label position should be set to 10\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 30, in test_case_3\nAssertionError: 22.5 != 5.0 : Radial label position should be set to 5\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 39, in test_case_4\nAssertionError: 22.5 != 0.0 : Radial label position should be set to 0\n\n----------------------------------------------------------------------\nRan 6 tests in 0.412s\n\nFAILED (failures=4)"}}
{"result": "```python\nimport json\nimport os\nimport glob\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\ndef task_func(directory):\n    updated_count = 0\n    pattern = os.path.join(directory, '*.json')\n    for filepath in glob.glob(pattern):\n        try:\n            with open(filepath, 'r', encoding='utf-8') as f:\n                data = json.load(f)\n            if isinstance(data, dict) and KEY not in data:\n                data[KEY] = VALUE\n                with open(filepath, 'w', encoding='utf-8') as f:\n                    json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_count += 1\n        except Exception:\n            # skip files that can't be read or parsed as JSON\n            continue\n    return updated_count\n```", "match": {"category": "success"}}
{"result": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(ax, radius):\n    if not hasattr(ax, 'name') or ax.name != 'polar':\n        raise TypeError(\"The provided Axes object is not a polar plot.\")\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative.\")\n    theta = np.linspace(0, 2 * np.pi, 360)\n    r = np.full_like(theta, radius)\n    ax.plot(theta, r)\n    # Set radial ticks including the radius\n    rmax = ax.get_rmax()\n    # Create radial ticks up to max radius or radius if bigger\n    max_tick = max(rmax, radius)\n    # Generate ticks including radius, use default ticks if radius is smaller\n    rticks = list(ax.get_yticks())\n    if radius not in rticks:\n        rticks.append(radius)\n        rticks = sorted(set(rticks))\n    ax.set_yticks(rticks)\n    if radius > rmax:\n        ax.set_rmax(radius*1.1)\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport collections\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(dictionary, new_key, new_value):\n    dictionary[new_key] = new_value\n    fig, ax = plt.subplots()\n    sns.barplot(x=list(dictionary.keys()), y=list(dictionary.values()), ax=ax)\n    ax.set_ylabel('Values')\n    ax.set_title('Distribution of Dictionary Values')\n    plt.tight_layout()\n    return dictionary, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport glob\nimport shutil\nimport time\n# Constants\nFILE_EXTENSIONS = ['.txt', '.csv', '.xlsx', '.docx', '.pdf']\ndef task_func(my_path: str, days_old: int) -> str:\n    archive_dir = os.path.join(my_path, 'archive')\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n\n    cutoff_time = time.time() - days_old * 86400\n    for ext in FILE_EXTENSIONS:\n        pattern = os.path.join(my_path, f'*{ext}')\n        for file_path in glob.glob(pattern):\n            if os.path.isfile(file_path):\n                if os.path.getmtime(file_path) < cutoff_time:\n                    shutil.move(file_path, archive_dir)\n\n    return archive_dir\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndef task_func(dictionary, key, value, n=100, bins=30, seed=0):\n    if not isinstance(value, (int, float, np.number)):\n        raise ValueError(\"Provided value is not a number.\")\n    \n    # Update dictionary\n    dictionary[key] = value\n    \n    # Generate dataset\n    np.random.seed(seed)\n    data = np.random.normal(loc=value, scale=value, size=n)\n    data_series = pd.Series(data)\n    \n    # Plot histogram\n    plt.figure(figsize=(8, 5))\n    plt.hist(data_series, bins=bins, color='skyblue', edgecolor='black')\n    plt.title(f'Histogram of Normal Distribution (mean=std={value})')\n    plt.xlabel('Value')\n    plt.ylabel('Frequency')\n    plt.grid(True, linestyle='--', alpha=0.7)\n    plt.show()\n    \n    return dictionary, data_series\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 6, in test_case_1\n  File \"<bigcode>\", line 8, in task_func\nValueError: Provided value is not a number.\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_case_2\n  File \"<bigcode>\", line 8, in task_func\nValueError: Provided value is not a number.\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 18, in test_case_3\n  File \"<bigcode>\", line 8, in task_func\nValueError: Provided value is not a number.\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 29, in test_case_4\n  File \"<bigcode>\", line 8, in task_func\nValueError: Provided value is not a number.\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 39, in test_case_5\n  File \"<bigcode>\", line 8, in task_func\nValueError: Provided value is not a number.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.000s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport collections\nimport json\nimport os\ndef task_func(data, json_file_name='data.json'):\n    data['a'] = 1\n    freq = dict(collections.Counter(data.values()))\n    output = {\n        'data': data,\n        'freq': freq\n    }\n    with open(json_file_name, 'w') as f:\n        json.dump(output, f, indent=4)\n    return os.path.abspath(json_file_name)\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport os.path\nimport csv\nimport collections\n# Constants\nFILE_NAME = 'file_sizes.csv'\ndef task_func(my_path):\n    files = []\n    if not os.path.isdir(my_path):\n        raise ValueError(f\"Provided path '{my_path}' is not a directory.\")\n\n    for entry in os.scandir(my_path):\n        if entry.is_file():\n            size = entry.stat().st_size\n            files.append((entry.name, size))\n\n    # Sort files by name\n    files.sort(key=lambda x: x[0])\n\n    with open(FILE_NAME, mode='w', newline='', encoding='utf-8') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['Filename', 'Size'])\n        for name, size in files:\n            writer.writerow([name, size])\n    return os.path.abspath(FILE_NAME)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_nested_directories (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 45, in test_nested_directories\nAssertionError: 1 != 3 : Incorrect number of rows in CSV for nested directories\n\n----------------------------------------------------------------------\nRan 5 tests in 0.006s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport numpy as np\nfrom scipy import fftpack\nimport matplotlib.pyplot as plt\n\ndef task_func(data, sample_rate=8000):\n    # 1. Add new key \"a\" with value 1\n    data['a'] = 1\n\n    # 2. Generate a signal based on values in data\n    # For demonstration, generate a signal as sum of sines of values in data\n    t = np.arange(0, 1.0, 1/sample_rate)\n    signal = np.zeros_like(t)\n    for i, val in enumerate(data.values()):\n        freq = 100 * (i + 1)  # frequency based on index\n        signal += val * np.sin(2 * np.pi * freq * t)\n\n    # 3. Run FFT on the signal\n    fft_vals = fftpack.fft(signal)\n    fft_freq = fftpack.fftfreq(len(signal), 1/sample_rate)\n\n    # 4. Plot the absolute value of FFT\n    fig, ax = plt.subplots()\n    ax.plot(fft_freq[:len(fft_freq)//2], np.abs(fft_vals)[:len(fft_vals)//2])\n    ax.set_title('FFT of the signal')\n    ax.set_xlabel('Frequency (Hz)')\n    ax.set_ylabel('Amplitude')\n\n    return fft_vals, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 15, in test_case_1\nAssertionError: 'FFT of the signal' != 'FFT of the Signal'\n- FFT of the signal\n?            ^\n+ FFT of the Signal\n?            ^\n\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 29, in test_case_2\nAssertionError: 'FFT of the signal' != 'FFT of the Signal'\n- FFT of the signal\n?            ^\n+ FFT of the Signal\n?            ^\n\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 43, in test_case_3\nAssertionError: 'FFT of the signal' != 'FFT of the Signal'\n- FFT of the signal\n?            ^\n+ FFT of the Signal\n?            ^\n\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 58, in test_case_4\nAssertionError: 'FFT of the signal' != 'FFT of the Signal'\n- FFT of the signal\n?            ^\n+ FFT of the Signal\n?            ^\n\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 73, in test_case_5\nAssertionError: 'FFT of the signal' != 'FFT of the Signal'\n- FFT of the signal\n?            ^\n+ FFT of the Signal\n?            ^\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.079s\n\nFAILED (failures=5)"}}
{"result": "```python\nimport collections\nimport random\n# Constants\nLETTERS = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\ndef task_func(n_keys, n_values):\n    chosen_keys = random.choices(LETTERS, k=n_keys)\n    result = collections.defaultdict(list)\n    for i in range(1, n_values + 1):\n        key = random.choice(chosen_keys)\n        result[key].append(i)\n    return dict(result)\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_no_keys (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 14, in test_no_keys\n  File \"<bigcode>\", line 10, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/random.py\", line 378, in choice\n    return seq[self._randbelow(len(seq))]\nIndexError: list index out of range\n\n======================================================================\nFAIL: test_basic_functionality (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 11, in test_basic_functionality\nAssertionError: Lists differ: [1, 3, 4, 5] != [1, 2, 3, 4, 5]\n\nFirst differing element 1:\n3\n2\n\nSecond list contains 1 additional elements.\nFirst extra element 4:\n5\n\n- [1, 3, 4, 5]\n+ [1, 2, 3, 4, 5]\n?     +++\n\n\n======================================================================\nFAIL: test_large_input (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 26, in test_large_input\nAssertionError: 96 != 1000\n\n======================================================================\nFAIL: test_max_keys (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 32, in test_max_keys\nAssertionError: Lists differ: [1] != [1, 2, 3, 4, 5]\n\nSecond list contains 4 additional elements.\nFirst extra element 1:\n2\n\n- [1]\n+ [1, 2, 3, 4, 5]\n\n----------------------------------------------------------------------\nRan 5 tests in 0.003s\n\nFAILED (failures=3, errors=1)"}}
{"result": "```python\nimport numpy as np\nfrom scipy import stats\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\ndef task_func(data_dict):\n    # 1. Add key \"a\" with value 1\n    data_dict = data_dict.copy()\n    data_dict[\"a\"] = 1\n    \n    # Extract values as numpy array\n    values = np.array(list(data_dict.values()), dtype=float)\n    \n    # 2. Statistical analysis\n    mean_val = round(np.mean(values), 2)\n    median_val = np.median(values)\n    try:\n        mode_val = stats.mode(values, nan_policy='omit').mode[0]\n    except:\n        mode_val = None\n    \n    stats_dict = {\"mean\": mean_val, \"median\": median_val, \"mode\": mode_val}\n    \n    # 3. Normalize values with MinMaxScaler\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    values_reshaped = values.reshape(-1, 1)\n    normalized_values = scaler.fit_transform(values_reshaped).flatten()\n    \n    # Update dictionary values with normalized values\n    keys = list(data_dict.keys())\n    normalized_dict = {k: v for k, v in zip(keys, normalized_values)}\n    \n    # 4. Plot histogram\n    fig, ax = plt.subplots()\n    ax.hist(normalized_values, bins='auto', edgecolor='black')\n    ax.set_title(\"Histogram of Normalized Values\")\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Frequency\")\n    \n    plt.close(fig)  # Prevent immediate display if run interactively\n    \n    return normalized_dict, stats_dict, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 7, in test_case_1\nAssertionError: {'key1': 0.3333333333333333, 'key2': 1.0, 'a': 0.0} != {'key1': 2, 'key2': 4, 'a': 1}\n- {'a': 0.0, 'key1': 0.3333333333333333, 'key2': 1.0}\n+ {'a': 1, 'key1': 2, 'key2': 4}\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 17, in test_case_2\nAssertionError: {'a': 0.0} != {'a': 1}\n- {'a': 0.0}\n?       ^^^\n\n+ {'a': 1}\n?       ^\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.090s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport re\nfrom collections import Counter\ndef task_func(sentence):\n    words = re.findall(r'\\b\\w+\\b', sentence.lower())\n    return dict(Counter(words))\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_sensitivity (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 18, in test_case_sensitivity\nAssertionError: {'apple': 2} != {'Apple': 1, 'apple': 1}\n- {'apple': 2}\n+ {'Apple': 1, 'apple': 1}\n\n----------------------------------------------------------------------\nRan 6 tests in 0.002s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport random\nimport string\nimport hashlib\nimport time\ndef task_func(data_dict: dict, seed=0) -> dict:\n    random.seed(seed)\n    data_dict[\"a\"] = 1\n    salt = ''.join(random.choices(string.ascii_lowercase, k=5))\n    for k in list(data_dict.keys()):\n        val = str(data_dict[k])\n        to_hash = val + salt\n        hashed = hashlib.sha256(to_hash.encode()).hexdigest()\n        data_dict[k] = hashed\n    data_dict['timestamp'] = int(time.time())\n    return data_dict\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_case_1\nAssertionError: '8d1578e1643b59534f0122a4b798aab069981f7ff9c40e15f52ec5fb03b99f5e' != '8691a011016e0fba3c2b0b8a26e4c9c722975f1defe42f580ab55a9c97dfccf8'\n- 8d1578e1643b59534f0122a4b798aab069981f7ff9c40e15f52ec5fb03b99f5e\n+ 8691a011016e0fba3c2b0b8a26e4c9c722975f1defe42f580ab55a9c97dfccf8\n\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 44, in test_case_4\nAssertionError: '038f24a1bb0798ac2c2423167514543a81c1faeebd7c5c3efd3bc841db42c8c2' != '99a44a377de81b704fcc13054924e260927064689112828e9385597a93d65f76'\n- 038f24a1bb0798ac2c2423167514543a81c1faeebd7c5c3efd3bc841db42c8c2\n+ 99a44a377de81b704fcc13054924e260927064689112828e9385597a93d65f76\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.003s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport cgi\nimport http.server\nimport json\ndef task_func():\n    class POSTHandler(http.server.BaseHTTPRequestHandler):\n        def do_POST(self):\n            content_type = self.headers.get('Content-Type')\n            if content_type != 'application/json':\n                self.send_response(400)\n                self.send_header('Content-Type', 'application/json')\n                self.end_headers()\n                resp = {\"status\": \"error\", \"message\": \"Content-Type header is not application/json\"}\n                self.wfile.write(json.dumps(resp).encode('utf-8'))\n                return\n\n            content_length = self.headers.get('Content-Length')\n            if content_length is None:\n                self.send_response(400)\n                self.send_header('Content-Type', 'application/json')\n                self.end_headers()\n                resp = {\"status\": \"error\", \"message\": \"No data received\"}\n                self.wfile.write(json.dumps(resp).encode('utf-8'))\n                return\n            \n            try:\n                length = int(content_length)\n                raw_data = self.rfile.read(length)\n                data_json = json.loads(raw_data)\n            except Exception:\n                self.send_response(400)\n                self.send_header('Content-Type', 'application/json')\n                self.end_headers()\n                resp = {\"status\": \"error\", \"message\": \"No data received\"}\n                self.wfile.write(json.dumps(resp).encode('utf-8'))\n                return\n\n            if 'data' not in data_json:\n                self.send_response(400)\n                self.send_header('Content-Type', 'application/json')\n                self.end_headers()\n                resp = {\"status\": \"error\", \"message\": \"No data received\"}\n                self.wfile.write(json.dumps(resp).encode('utf-8'))\n                return\n\n            self.send_response(200)\n            self.send_header('Content-Type', 'application/json')\n            self.end_headers()\n            resp = {\"status\": \"success\", \"message\": \"Data received successfully.\"}\n            self.wfile.write(json.dumps(resp).encode('utf-8'))\n    return POSTHandler\n```", "match": {"category": "success"}}
{"result": "```python\nimport cgi\nimport http.server\nimport json\nSUCCESS_RESPONSE = {\n    'status': 'success',\n    'message': 'Data received successfully.'\n}\nERROR_RESPONSE = {\n    'status': 'error',\n    'message': 'Invalid data received.'\n}\ndef task_func():\n    class RequestHandler(http.server.BaseHTTPRequestHandler):\n        def do_POST(self):\n            content_type = self.headers.get('Content-Type')\n            if content_type != 'application/json':\n                self.send_response(400)\n                response = \"Content-Type header is not application/json\"\n                self.send_header('Content-Type', 'text/plain')\n                self.send_header('Content-Length', str(len(response)))\n                self.end_headers()\n                self.wfile.write(response.encode('utf-8'))\n                return\n\n            content_length = self.headers.get('Content-Length')\n            try:\n                length = int(content_length) if content_length is not None else 0\n            except ValueError:\n                length = 0\n\n            post_data = self.rfile.read(length)\n            try:\n                data = json.loads(post_data)\n            except Exception:\n                self.send_response(400)\n                response = \"Invalid JSON\"\n                self.send_header('Content-Type', 'text/plain')\n                self.send_header('Content-Length', str(len(response)))\n                self.end_headers()\n                self.wfile.write(response.encode('utf-8'))\n                return\n\n            if 'data' not in data:\n                self.send_response(400)\n                response = \"No data key in request\"\n                self.send_header('Content-Type', 'text/plain')\n                self.send_header('Content-Length', str(len(response)))\n                self.end_headers()\n                self.wfile.write(response.encode('utf-8'))\n                return\n\n            # If everything is valid\n            self.send_response(200)\n            response_json = json.dumps(SUCCESS_RESPONSE)\n            self.send_header('Content-Type', 'application/json')\n            self.send_header('Content-Length', str(len(response_json)))\n            self.end_headers()\n            self.wfile.write(response_json.encode('utf-8'))\n\n    return RequestHandler\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_invalid_content_type (builtins.TestCases)\nTest handler response to invalid Content-Type.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 15, in test_invalid_content_type\n  File \"<bigcode>\", line 18, in do_POST\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/http/server.py\", line 498, in send_response\n    self.log_request(code)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/http/server.py\", line 551, in log_request\n    self.requestline, str(code), str(size))\nAttributeError: 'RequestHandler' object has no attribute 'requestline'\n\n======================================================================\nERROR: test_invalid_json (builtins.TestCases)\nTest handler response to invalid JSON.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 48, in test_invalid_json\n  File \"<bigcode>\", line 18, in do_POST\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/http/server.py\", line 498, in send_response\n    self.log_request(code)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/http/server.py\", line 551, in log_request\n    self.requestline, str(code), str(size))\nAttributeError: 'RequestHandler' object has no attribute 'requestline'\n\n======================================================================\nERROR: test_missing_data_key (builtins.TestCases)\nTest handler response to JSON without 'data' key.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 59, in test_missing_data_key\n  File \"<bigcode>\", line 18, in do_POST\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/http/server.py\", line 498, in send_response\n    self.log_request(code)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/http/server.py\", line 551, in log_request\n    self.requestline, str(code), str(size))\nAttributeError: 'RequestHandler' object has no attribute 'requestline'\n\n======================================================================\nFAIL: test_valid_json_data (builtins.TestCases)\nTest handler response to valid JSON with 'data' key.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 37, in test_valid_json_data\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 929, in assert_called_with\n    raise AssertionError(_error_message()) from cause\nAssertionError: expected call not found.\nExpected: mock(200)\nActual: mock(400)\n\n----------------------------------------------------------------------\nRan 5 tests in 0.019s\n\nFAILED (failures=1, errors=3)"}}
{"result": "```python\nimport cgi\nimport http.server\nimport smtplib\nfrom email.mime.text import MIMEText\nimport json\n\ndef task_func(smtp_server, smtp_port, smtp_username, smtp_password):\n    class EmailHandler(http.server.BaseHTTPRequestHandler):\n        def do_POST(self):\n            content_length = int(self.headers.get('Content-Length', 0))\n            raw_post_data = self.rfile.read(content_length)\n            try:\n                email_data = json.loads(raw_post_data)\n            except json.JSONDecodeError:\n                self.send_response(400, \"Bad Request\")\n                self.send_header(\"Content-Type\", \"text/plain\")\n                self.end_headers()\n                self.wfile.write(b\"Invalid JSON data\")\n                return\n\n            try:\n                subject = email_data['subject']\n                message = email_data['message']\n                recipient = email_data['to']\n            except KeyError:\n                self.send_response(400, \"Bad Request\")\n                self.send_header(\"Content-Type\", \"text/plain\")\n                self.end_headers()\n                self.wfile.write(b\"Missing required keys: 'subject', 'message', 'to'\")\n                return\n\n            msg = MIMEText(message)\n            msg['Subject'] = subject\n            msg['From'] = smtp_username\n            msg['To'] = recipient\n\n            try:\n                with smtplib.SMTP(smtp_server, smtp_port) as server:\n                    server.starttls()\n                    server.login(smtp_username, smtp_password)\n                    server.sendmail(smtp_username, [recipient], msg.as_string())\n            except smtplib.SMTPAuthenticationError as e:\n                self.send_response(535, \"Authentication Failed\")\n                self.send_header(\"Content-Type\", \"text/plain\")\n                self.end_headers()\n                self.wfile.write(b\"SMTP Authentication Failed\")\n                return\n\n            response_body = b\"Email sent successfully\"\n            self.send_response(200, \"OK\")\n            self.send_header(\"Content-Type\", \"text/plain\")\n            self.send_header(\"Content-Length\", str(len(response_body)))\n            self.end_headers()\n            self.wfile.write(response_body)\n\n    return EmailHandler\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_email_sending_exception (builtins.TestCases)\nTest handling of exceptions during the email sending process, such as authentication failure.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<bigcode>\", line 14, in do_POST\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 63, in test_email_sending_exception\n  File \"<bigcode>\", line 17, in do_POST\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/http/server.py\", line 519, in send_header\n    if self.request_version != 'HTTP/0.9':\nAttributeError: 'EmailHandler' object has no attribute 'request_version'. Did you mean: 'server_version'?\n\n======================================================================\nERROR: test_empty_json_data (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<bigcode>\", line 14, in do_POST\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"<string>\", line 49, in test_empty_json_data\n  File \"<bigcode>\", line 17, in do_POST\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/http/server.py\", line 519, in send_header\n    if self.request_version != 'HTTP/0.9':\nAttributeError: 'EmailHandler' object has no attribute 'request_version'. Did you mean: 'server_version'?\n\n======================================================================\nERROR: test_invalid_content_type (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_invalid_content_type\n  File \"<bigcode>\", line 12, in do_POST\nValueError: I/O operation on closed file.\n\n======================================================================\nERROR: test_invalid_json_format (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<bigcode>\", line 14, in do_POST\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"<string>\", line 43, in test_invalid_json_format\n  File \"<bigcode>\", line 17, in do_POST\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/http/server.py\", line 519, in send_header\n    if self.request_version != 'HTTP/0.9':\nAttributeError: 'EmailHandler' object has no attribute 'request_version'. Did you mean: 'server_version'?\n\n======================================================================\nERROR: test_missing_key_in_json_data (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<bigcode>\", line 14, in do_POST\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_missing_key_in_json_data\n  File \"<bigcode>\", line 17, in do_POST\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/http/server.py\", line 519, in send_header\n    if self.request_version != 'HTTP/0.9':\nAttributeError: 'EmailHandler' object has no attribute 'request_version'. Did you mean: 'server_version'?\n\n======================================================================\nERROR: test_valid_json_request (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<bigcode>\", line 14, in do_POST\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 34, in test_valid_json_request\n  File \"<bigcode>\", line 17, in do_POST\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/http/server.py\", line 519, in send_header\n    if self.request_version != 'HTTP/0.9':\nAttributeError: 'EmailHandler' object has no attribute 'request_version'. Did you mean: 'server_version'?\n\n----------------------------------------------------------------------\nRan 6 tests in 0.022s\n\nFAILED (errors=6)"}}
{"result": "```python\nimport numpy as np\nfrom itertools import combinations\ndef task_func(n):\n    if n < 1:\n        raise ValueError(\"Input n must be at least 1.\")\n    return list(combinations(range(1, n+1), 2))\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(matrix):\n    max_vals = np.max(matrix, axis=1)\n    skew = stats.skew(max_vals)\n    kurt = stats.kurtosis(max_vals)\n    kde = stats.gaussian_kde(max_vals)\n    x = np.linspace(np.min(max_vals), np.max(max_vals), 200)\n    density = kde(x)\n\n    fig, ax = plt.subplots()\n    ax.hist(max_vals, bins=30, density=True, alpha=0.6, color='g', label='Histogram')\n    ax.plot(x, density, 'r-', label='KDE')\n    ax.set_title('Distribution of Row-wise Maximum Values')\n    ax.set_xlabel('Maximum Value')\n    ax.set_ylabel('Density')\n    ax.legend()\n\n    return skew, kurt, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 31, in test_case_4\n  File \"<bigcode>\", line 9, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/scipy/stats/kde.py\", line 206, in __init__\n    self.set_bandwidth(bw_method=bw_method)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/scipy/stats/kde.py\", line 554, in set_bandwidth\n    self._compute_covariance()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/scipy/stats/kde.py\", line 566, in _compute_covariance\n    self._data_inv_cov = linalg.inv(self._data_covariance)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/scipy/linalg/basic.py\", line 968, in inv\n    raise LinAlgError(\"singular matrix\")\nnumpy.linalg.LinAlgError: singular matrix\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 39, in test_case_5\n  File \"<bigcode>\", line 9, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/scipy/stats/kde.py\", line 193, in __init__\n    raise ValueError(\"`dataset` input should have multiple elements.\")\nValueError: `dataset` input should have multiple elements.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.117s\n\nFAILED (errors=2)"}}
{"result": "```python\nimport random\nfrom itertools import combinations\nimport math\ndef task_func(n):\n    if n < 2:\n        return None\n    points = [(random.random(), random.random()) for _ in range(n)]\n    def dist(p1, p2):\n        return math.sqrt((p1[0]-p2[0])**2 + (p1[1]-p2[1])**2)\n    closest_pair = None\n    min_dist = float('inf')\n    for p1, p2 in combinations(points, 2):\n        d = dist(p1, p2)\n        if d < min_dist:\n            min_dist = d\n            closest_pair = (p1, p2)\n    return closest_pair\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nfrom sympy import symbols, solve\n\ndef task_func(precision=2, seed=0):\n    np.random.seed(seed)\n    a, b, c = np.random.randint(-10, 11, size=3)\n    x = symbols('x')\n    # Ensure a is not zero to keep it quadratic\n    while a == 0:\n        a = np.random.randint(-10, 11)\n    eq = a*x**2 + b*x + c\n    sols = solve(eq, x)\n    results = []\n    for sol in sols:\n        val = complex(sol.evalf())\n        val_rounded = complex(round(val.real, precision), round(val.imag, precision))\n        results.append(val_rounded)\n    return tuple(results)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_case_1\nAssertionError: Tuples differ: ((0.72+0j), (-1.12+0j)) != ((-5.15+0j), (0.41+0j))\n\nFirst differing element 0:\n(0.72+0j)\n(-5.15+0j)\n\n- ((0.72+0j), (-1.12+0j))\n+ ((-5.15+0j), (0.41+0j))\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 35, in test_case_5\nAssertionError: Tuples differ: ((0.36886+0j), (-2.16886+0j)) != ((0.19792-0.40336j), (0.19792+0.40336j))\n\nFirst differing element 0:\n(0.36886+0j)\n(0.19792-0.40336j)\n\n- ((0.36886+0j), (-2.16886+0j))\n+ ((0.19792-0.40336j), (0.19792+0.40336j))\n\n----------------------------------------------------------------------\nRan 5 tests in 0.309s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport random\nfrom collections import Counter\n# Constants\nCARDS = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']\ndef task_func(x=1):\n    full_deck = CARDS * 4\n    random.shuffle(full_deck)\n    hands = []\n    drawn_cards = []\n    for i in range(x):\n        hand = full_deck[i*5:(i+1)*5]\n        hands.append(hand)\n        drawn_cards.extend(hand)\n    return hands, Counter(drawn_cards)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_card_uniqueness (builtins.TestCases)\nTest if all cards in the hand are unique.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_card_uniqueness\nAssertionError: 5 != 3\n\n----------------------------------------------------------------------\nRan 7 tests in 0.022s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.fft import fft\ndef task_func(signal, precision=2, seed=777):\n    np.random.seed(seed)\n    transformed = fft(signal)\n    transformed_rounded = np.round(transformed, decimals=precision)\n    \n    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(8,6))\n    \n    ax1.plot(signal, marker='o')\n    ax1.set_title('Original Signal')\n    ax1.grid(True)\n    \n    ax2.plot(transformed_rounded.real, label='Real', marker='o')\n    ax2.plot(transformed_rounded.imag, label='Imag', marker='x')\n    ax2.set_title('Transformed Signal')\n    ax2.legend()\n    ax2.grid(True)\n    \n    plt.tight_layout()\n    plt.show()\n    \n    return transformed_rounded, (ax1, ax2)\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport os\nfrom collections import Counter\ndef task_func(folder_path: str) -> dict:\n    ip_pattern = re.compile(r'\\b(?:\\d{1,3}\\.){3}\\d{1,3}\\b')\n    ip_counter = Counter()\n    for root, _, files in os.walk(folder_path):\n        for file in files:\n            if file.endswith('.log'):\n                try:\n                    with open(os.path.join(root, file), 'r', encoding='utf-8') as f:\n                        for line in f:\n                            ips = ip_pattern.findall(line)\n                            ip_counter.update(ips)\n                except (IOError, UnicodeDecodeError):\n                    # Skip files that can't be opened or decoded\n                    continue\n    return dict(ip_counter)\n```", "match": {"category": "success"}}
{"result": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\nimport cv2\nimport os\n\ndef task_func(file_path, onpick):\n    if not os.path.isfile(file_path):\n        raise FileNotFoundError(f\"No such file: '{file_path}'\")\n\n    img = cv2.imread(file_path)\n    if img is None:\n        raise FileNotFoundError(f\"Failed to load image: '{file_path}'\")\n\n    # Convert BGR to RGB\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\n    # Calculate histogram for each channel (R,G,B) with 256 bins each\n    histSize = 256\n    bins = np.arange(histSize)\n\n    hist_r = cv2.calcHist([img], [0], None, [histSize], [0, 256]).flatten()\n    hist_g = cv2.calcHist([img], [1], None, [histSize], [0, 256]).flatten()\n    hist_b = cv2.calcHist([img], [2], None, [histSize], [0, 256]).flatten()\n\n    # Prepare data points: for each intensity 0-255, create a point (R count, G count, B count)\n    # But this doesn't produce meaningful 3D histogram as sets are separate.\n    # Instead we will plot points: x=intensity, y=channel index, z=frequency to visualize per channel.\n\n    fig = plt.figure()\n    ax = fig.add_subplot(111, projection='3d')\n\n    # We'll use intensity on x axis, channel on y axis, freq on z axis\n    xs = np.tile(bins, 3)\n    ys = np.concatenate([np.zeros(histSize), np.ones(histSize), 2*np.ones(histSize)])\n    zs = np.concatenate([hist_r, hist_g, hist_b])\n\n    colors = ['r']*histSize + ['g']*histSize + ['b']*histSize\n\n    pts = ax.scatter(xs, ys, zs, c=colors, picker=5)\n\n    ax.set_xlabel('Intensity')\n    ax.set_ylabel('Channel')\n    ax.set_zlabel('Frequency')\n    ax.set_yticks([0,1,2])\n    ax.set_yticklabels(['Red','Green','Blue'])\n    ax.set_title('3D Color Histogram')\n\n    def on_pick(event):\n        ind = event.ind\n        for i in ind:\n            intensity = xs[i]\n            channel = ['Red', 'Green', 'Blue'][int(ys[i])]\n            freq = zs[i]\n            onpick(intensity, channel, freq)\n\n    fig.canvas.mpl_connect('pick_event', on_pick)\n\n    plt.show()\n\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport json\nfrom collections import Counter\ndef task_func(json_files_path='./json_files/', key='name'):\n    counter = Counter()\n    for filename in os.listdir(json_files_path):\n        if filename.endswith('.json'):\n            filepath = os.path.join(json_files_path, filename)\n            try:\n                with open(filepath, 'r', encoding='utf-8') as f:\n                    data = json.load(f)\n                # data can be dict or list or other structure, we need to find all values of the key\n                def extract_values(obj):\n                    if isinstance(obj, dict):\n                        for k, v in obj.items():\n                            if k == key:\n                                counter[v] += 1\n                            extract_values(v)\n                    elif isinstance(obj, list):\n                        for item in obj:\n                            extract_values(item)\n                extract_values(data)\n            except Exception:\n                continue\n    return dict(counter)\n```", "match": {"category": "success"}}
{"result": "```python\nimport mechanize\nfrom bs4 import BeautifulSoup\nfrom urllib.parse import urljoin\n\ndef task_func(url):\n    br = mechanize.Browser()\n    br.set_handle_robots(False)\n    br.open(url)\n    html = br.response().read()\n    soup = BeautifulSoup(html, \"html.parser\")\n    links = []\n    for tag in soup.find_all('a', href=True):\n        absolute_url = urljoin(url, tag['href'])\n        links.append(absolute_url)\n    return links\n```", "match": {"category": "timeout", "error": "Test execution timed out after 10 seconds"}}
{"result": "```python\nimport mechanize\nfrom bs4 import BeautifulSoup\n\ndef task_func(url, form_id, data):\n    br = mechanize.Browser()\n    br.set_handle_robots(False)\n    br.open(url)\n    for form in br.forms():\n        if form.attrs.get(\"id\") == form_id:\n            br.form = form\n            break\n    else:\n        raise ValueError(\"Form with the specified id not found.\")\n    for key, value in data.items():\n        try:\n            br.form[name=key] = value\n        except LookupError:\n            # If form does not have the control, ignore or raise error\n            raise KeyError(f\"Form does not have a control named '{key}'.\")\n    response = br.submit()\n    html = response.read()\n    soup = BeautifulSoup(html, \"html.parser\")\n    title_tag = soup.title\n    if title_tag and title_tag.string:\n        return title_tag.string.strip()\n    else:\n        return \"No Title\"\n```", "match": {"category": "syntax_error", "error": "File \"<bigcode>\", line 17"}}
{"result": "```python\nfrom collections import Counter\nimport os\nimport csv\n# Constants\nFILE_DIR = './yourdictfiles/'\ndef task_func(output_file, test_directory):\n    try:\n        if not os.path.isdir(test_directory):\n            return 0\n        total_counter = Counter()\n        for filename in os.listdir(test_directory):\n            if filename.endswith('.txt'):\n                filepath = os.path.join(test_directory, filename)\n                if not os.path.isfile(filepath):\n                    continue\n                with open(filepath, 'r', encoding='utf-8') as f:\n                    for line in f:\n                        words = line.split()\n                        total_counter.update(words)\n        if not total_counter:\n            with open(output_file, 'w', newline='', encoding='utf-8') as cf:\n                writer = csv.writer(cf)\n                writer.writerow(['Word', 'Count'])\n            return 0\n        with open(output_file, 'w', newline='', encoding='utf-8') as cf:\n            writer = csv.writer(cf)\n            writer.writerow(['Word', 'Count'])\n            for word, count in total_counter.items():\n                writer.writerow([word, count])\n        return sum(total_counter.values())\n    except:\n        return 0\n```", "match": {"category": "success"}}
{"result": "```python\nfrom collections import Counter\nimport os\nimport json\n\ndef task_func(filename, directory):\n    word_counts = Counter()\n    total_words = 0\n\n    for file in os.listdir(directory):\n        if file.endswith('.txt'):\n            path = os.path.join(directory, file)\n            with open(path, 'r', encoding='utf-8') as f:\n                text = f.read()\n                words = text.split()\n                count = len(words)\n                word_counts[file] = count\n                total_words += count\n\n    with open(filename, 'w', encoding='utf-8') as json_file:\n        json.dump(word_counts, json_file, indent=2)\n\n    return total_words\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_empty_files (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 50, in test_empty_files\nAssertionError: {'empty_file.txt': 0} != {}\n- {'empty_file.txt': 0}\n+ {}\n\n======================================================================\nFAIL: test_files_with_special_characters (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 63, in test_files_with_special_characters\nAssertionError: {'special_chars.txt': 2} != {'hello-world': 1, 'hello_python': 1}\n- {'special_chars.txt': 2}\n+ {'hello-world': 1, 'hello_python': 1}\n\n======================================================================\nFAIL: test_multiple_files (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 39, in test_multiple_files\nAssertionError: {'second.txt': 3, 'third.txt': 2, 'first.txt': 2} != {'hello': 2, 'world': 2, 'python': 2, 'coding': 1}\n- {'first.txt': 2, 'second.txt': 3, 'third.txt': 2}\n+ {'coding': 1, 'hello': 2, 'python': 2, 'world': 2}\n\n======================================================================\nFAIL: test_nested_directories (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 77, in test_nested_directories\nAssertionError: {'nested_file.txt': 3} != {'hello': 2, 'world': 1}\n- {'nested_file.txt': 3}\n+ {'hello': 2, 'world': 1}\n\n======================================================================\nFAIL: test_single_file_few_words (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_single_file_few_words\nAssertionError: {'single_file.txt': 3} != {'hello': 2, 'world': 1}\n- {'single_file.txt': 3}\n+ {'hello': 2, 'world': 1}\n\n----------------------------------------------------------------------\nRan 5 tests in 0.080s\n\nFAILED (failures=5)"}}
{"result": "```python\nimport collections\nimport json\nimport os\ndef task_func(directory_path: str) -> dict:\n    key_counts = collections.Counter()\n    for filename in os.listdir(directory_path):\n        if filename.endswith('.json'):\n            filepath = os.path.join(directory_path, filename)\n            try:\n                with open(filepath, 'r', encoding='utf-8') as f:\n                    data = json.load(f)\n                def count_keys(obj):\n                    if isinstance(obj, dict):\n                        for k, v in obj.items():\n                            key_counts[k] += 1\n                            count_keys(v)\n                    elif isinstance(obj, list):\n                        for item in obj:\n                            count_keys(item)\n                count_keys(data)\n            except (json.JSONDecodeError, OSError):\n                continue\n    return dict(key_counts)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 53, in test_case_4\nAssertionError: {'name': 6, 'age': 3, 'address': 2, 'email': 2, 'title': 1, 'person': 1} != {'name': 5, 'age': 2, 'address': 2, 'email': 2, 'title': 1, 'person': 1}\n- {'address': 2, 'age': 3, 'email': 2, 'name': 6, 'person': 1, 'title': 1}\n?                       ^                      ^\n\n+ {'address': 2, 'age': 2, 'email': 2, 'name': 5, 'person': 1, 'title': 1}\n?                       ^                      ^\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.005s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport tensorflow as tf\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(X, y, n_splits, batch_size, epochs):\n    histories = []\n    X = X.astype('float32')\n    y = y.astype('float32')\n    scaler = MinMaxScaler()\n    X = scaler.fit_transform(X)\n\n    kf = KFold(n_splits=n_splits, shuffle=True, random_state=42)\n\n    for train_index, val_index in kf.split(X):\n        X_train, X_val = X[train_index], X[val_index]\n        y_train, y_val = y[train_index], y[val_index]\n\n        model = tf.keras.Sequential([\n            tf.keras.layers.Dense(20, activation='relu', input_shape=(X.shape[1],)),\n            tf.keras.layers.Dense(1, activation='sigmoid')\n        ])\n\n        model.compile(optimizer='adam',\n                      loss='binary_crossentropy',\n                      metrics=['accuracy'])\n\n        history = model.fit(X_train, y_train,\n                            validation_data=(X_val, y_val),\n                            epochs=epochs,\n                            batch_size=batch_size,\n                            verbose=0)\n\n        histories.append(history.history)\n\n    return histories\n```", "match": {"category": "timeout", "error": "Test execution timed out after 10 seconds"}}
{"result": "```python\nimport nltk\nnltk.download('stopwords')\nfrom collections import Counter\nimport os\nfrom nltk.corpus import stopwords\nimport re\n\n# Constants\nSTOPWORDS = set(stopwords.words('english'))\n\ndef task_func(directory_path):\n    unique_words = set()\n    for filename in os.listdir(directory_path):\n        if filename.endswith('.txt'):\n            filepath = os.path.join(directory_path, filename)\n            with open(filepath, 'r', encoding='utf-8') as file:\n                text = file.read().lower()\n                words = re.findall(r'\\b[a-z]+\\b', text)\n                filtered = [w for w in words if w not in STOPWORDS]\n                unique_words.update(filtered)\n    return len(unique_words)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_insensitivity (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_case_insensitivity\nAssertionError: 1 != 4\n\n----------------------------------------------------------------------\nRan 5 tests in 0.002s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\ndef task_func(mu, sigma, seed=0):\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, 1000)\n    fig, ax = plt.subplots()\n    # Calculate pdf values for color mapping\n    x = np.linspace(mu - 4*sigma, mu + 4*sigma, 1000)\n    pdf = (1/(sigma * np.sqrt(2*np.pi))) * np.exp(-0.5 * ((x - mu)/sigma)**2)\n    # Scatter plot samples with colors based on their PDF value\n    sample_pdf = (1/(sigma * np.sqrt(2*np.pi))) * np.exp(-0.5 * ((samples - mu)/sigma)**2)\n    sc = ax.scatter(samples, np.zeros_like(samples), c=sample_pdf, cmap='viridis', edgecolor='none', alpha=0.7)\n    # KDE plot with seaborn\n    sns.kdeplot(samples, ax=ax, color='black')\n    # Plot mean and std lines\n    ax.axvline(mu, color='red', linestyle='--', label='Mean')\n    ax.axvline(mu - sigma, color='blue', linestyle=':', label='Mean - Std')\n    ax.axvline(mu + sigma, color='blue', linestyle=':', label='Mean + Std')\n    # Add colorbar\n    cbar = plt.colorbar(sc, ax=ax)\n    cbar.set_label('PDF value')\n    # Formatting\n    ax.set_yticks([])\n    ax.set_xlabel('Sample value')\n    ax.legend()\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(df):\n    scaled_df = df.copy()\n    scaler = MinMaxScaler()\n\n    def scale_group(group):\n        group[['Age', 'Income']] = scaler.fit_transform(group[['Age', 'Income']])\n        return group\n\n    scaled_df = scaled_df.groupby('id').apply(scale_group).reset_index(drop=True)\n    hist_values, bin_edges = np.histogram(scaled_df['Income'], bins='auto')\n    hist_data = {'values': hist_values, 'bin_edges': bin_edges}\n    return scaled_df, hist_data\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_histogram_data_integrity (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 39, in test_histogram_data_integrity\n  File \"<bigcode>\", line 13, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/groupby/groupby.py\", line 1353, in apply\n    result = self._python_apply_general(f, self._selected_obj)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/groupby/groupby.py\", line 1402, in _python_apply_general\n    values, mutated = self.grouper.apply(f, data, self.axis)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/groupby/ops.py\", line 767, in apply\n    res = f(group)\n  File \"<bigcode>\", line 10, in scale_group\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3767, in __getitem__\n    indexer = self.columns._get_indexer_strict(key, \"columns\")[1]\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 5877, in _get_indexer_strict\n    self._raise_if_missing(keyarr, indexer, axis_name)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 5938, in _raise_if_missing\n    raise KeyError(f\"None of [{key}] are in the [{axis_name}]\")\nKeyError: \"None of [Index(['Age', 'Income'], dtype='object')] are in the [columns]\"\n\n======================================================================\nERROR: test_multiple_groups_dataframe (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_multiple_groups_dataframe\n  File \"<bigcode>\", line 13, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/groupby/groupby.py\", line 1353, in apply\n    result = self._python_apply_general(f, self._selected_obj)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/groupby/groupby.py\", line 1402, in _python_apply_general\n    values, mutated = self.grouper.apply(f, data, self.axis)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/groupby/ops.py\", line 767, in apply\n    res = f(group)\n  File \"<bigcode>\", line 10, in scale_group\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3767, in __getitem__\n    indexer = self.columns._get_indexer_strict(key, \"columns\")[1]\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 5877, in _get_indexer_strict\n    self._raise_if_missing(keyarr, indexer, axis_name)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 5938, in _raise_if_missing\n    raise KeyError(f\"None of [{key}] are in the [{axis_name}]\")\nKeyError: \"None of [Index(['Age', 'Income'], dtype='object')] are in the [columns]\"\n\n======================================================================\nERROR: test_scaled_values_range (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 33, in test_scaled_values_range\n  File \"<bigcode>\", line 13, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/groupby/groupby.py\", line 1353, in apply\n    result = self._python_apply_general(f, self._selected_obj)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/groupby/groupby.py\", line 1402, in _python_apply_general\n    values, mutated = self.grouper.apply(f, data, self.axis)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/groupby/ops.py\", line 767, in apply\n    res = f(group)\n  File \"<bigcode>\", line 10, in scale_group\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3767, in __getitem__\n    indexer = self.columns._get_indexer_strict(key, \"columns\")[1]\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 5877, in _get_indexer_strict\n    self._raise_if_missing(keyarr, indexer, axis_name)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 5938, in _raise_if_missing\n    raise KeyError(f\"None of [{key}] are in the [{axis_name}]\")\nKeyError: \"None of [Index(['Age', 'Income'], dtype='object')] are in the [columns]\"\n\n======================================================================\nERROR: test_single_group_dataframe (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 23, in test_single_group_dataframe\n  File \"<bigcode>\", line 13, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/groupby/groupby.py\", line 1353, in apply\n    result = self._python_apply_general(f, self._selected_obj)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/groupby/groupby.py\", line 1402, in _python_apply_general\n    values, mutated = self.grouper.apply(f, data, self.axis)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/groupby/ops.py\", line 767, in apply\n    res = f(group)\n  File \"<bigcode>\", line 10, in scale_group\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3767, in __getitem__\n    indexer = self.columns._get_indexer_strict(key, \"columns\")[1]\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 5877, in _get_indexer_strict\n    self._raise_if_missing(keyarr, indexer, axis_name)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 5938, in _raise_if_missing\n    raise KeyError(f\"None of [{key}] are in the [{axis_name}]\")\nKeyError: \"None of [Index(['Age', 'Income'], dtype='object')] are in the [columns]\"\n\n----------------------------------------------------------------------\nRan 5 tests in 0.093s\n\nFAILED (errors=4)"}}
{"result": "```python\nimport itertools\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(elements, subset_size):\n    # Generate all subsets of the given size\n    subsets = list(itertools.combinations(elements, subset_size))\n    # Calculate the sums of each subset\n    sums = [sum(subset) for subset in subsets]\n    \n    # Plot histogram of the sums\n    fig, ax = plt.subplots()\n    ax.hist(sums, bins='auto', edgecolor='black')\n    ax.set_title(f'Histogram of sums of all subsets of size {subset_size}')\n    ax.set_xlabel('Sum')\n    ax.set_ylabel('Frequency')\n    \n    return ax, subsets, sums\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n    required_columns = {'id', 'age', 'income'}\n    if not required_columns.issubset(df.columns):\n        raise ValueError(\"DataFrame must contain 'id', 'age', and 'income' columns\")\n    \n    df = df.copy()\n    scaler = StandardScaler()\n    \n    def standardize(group):\n        group[['age', 'income']] = scaler.fit_transform(group[['age', 'income']])\n        return group\n\n    df = df.groupby('id').apply(standardize).reset_index(drop=True)\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport itertools\nimport statistics\n# Refined function after importing required libraries\ndef task_func(elements, subset_size):\n    subsets = itertools.combinations(elements, subset_size)\n    sums = [sum(subset) for subset in subsets]\n    \n    if not sums:\n        return {\"mean\": None, \"median\": None, \"mode\": None}\n    \n    mean_val = statistics.mean(sums)\n    median_val = statistics.median(sums)\n    try:\n        mode_val = statistics.mode(sums)\n    except statistics.StatisticsError:\n        # If no unique mode, return None or handle as needed\n        mode_val = None\n    \n    return {\"mean\": mean_val, \"median\": median_val, \"mode\": mode_val}\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    \n    fig, ax = plt.subplots()\n    if 'value' in df.columns and not df.empty:\n        counts = df['value'].value_counts()\n        ax.bar(counts.index.astype(str), counts.values)\n    else:\n        ax.bar([], [])\n    \n    ax.set_title(\"Value Distribution\")\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Count\")\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport itertools\nimport collections\ndef task_func(elements, subset_size):\n    sums = (sum(subset) for subset in itertools.combinations(elements, subset_size))\n    return dict(collections.Counter(sums))\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\n# Constants\nCOLUMNS = ['Date', 'Value']\ndef task_func(df, plot=False):\n    if not all(col in df.columns for col in COLUMNS):\n        raise KeyError(f\"DataFrame must contain columns: {COLUMNS}\")\n    df = df.copy()\n    df['Date'] = pd.to_datetime(df['Date'])\n    # Expand the 'Value' column, assuming each item is a list-like\n    values_expanded = pd.DataFrame(df['Value'].tolist(), index=df.index)\n    # Scale the expanded columns\n    scaler = StandardScaler()\n    scaled_values = scaler.fit_transform(values_expanded)\n    scaled_df = pd.DataFrame(scaled_values, columns=values_expanded.columns, index=df.index)\n    # Combine date with scaled values\n    result_df = pd.concat([df[['Date']], scaled_df], axis=1)\n    result_df.set_index('Date', inplace=True)\n    \n    if plot:\n        ax = result_df.plot(kind='bar', figsize=(10, 6))\n        ax.set_title(\"Scaled Values Over Time\")\n        ax.set_xlabel(\"Date\")\n        ax.set_ylabel(\"Scaled Value\")\n        plt.tight_layout()\n        return result_df.reset_index(), ax\n    else:\n        return result_df.reset_index()\n```", "match": {"category": "success"}}
{"result": "```python\nimport itertools\nimport math\nfrom pandas import Series\ndef task_func(elements, subset_size, top_n=2):\n    if subset_size == 0 or subset_size > len(elements):\n        return 1, Series(dtype=int)\n    subsets = list(itertools.combinations(elements, subset_size))\n    sums = [sum(subset) for subset in subsets]\n    product_of_sums = math.prod(sums)\n    top_sums = sorted(sums, reverse=True)[:top_n]\n    return product_of_sums, Series(top_sums)\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom scipy.stats import zscore\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    # Check for required columns\n    if 'Date' not in df.columns or 'Value' not in df.columns:\n        raise KeyError(\"DataFrame must contain 'Date' and 'Value' columns.\")\n    \n    # Convert 'Date' to datetime\n    df = df.copy()\n    df['Date'] = pd.to_datetime(df['Date'])\n    \n    # Expand the 'Value' lists into separate columns\n    values_expanded = pd.DataFrame(df['Value'].tolist(), index=df.index)\n    \n    # Calculate Z-scores for each value column\n    zscores = values_expanded.apply(zscore, axis=0)\n    \n    # Replace original 'Value' lists columns with Z-scores columns\n    for col in zscores.columns:\n        df[f'Value_{col}'] = zscores[col]\n    df.drop(columns=['Value'], inplace=True)\n    \n    # Prepare data for box plot: melt DataFrame with Date and all Z-score columns\n    melt_cols = [f'Value_{col}' for col in zscores.columns]\n    plot_data = df.melt(id_vars='Date', value_vars=melt_cols, var_name='Value_Col', value_name='Z-Score')\n    \n    # Create box plot\n    fig, ax = plt.subplots(figsize=(10,6))\n    # Boxplot of Z-scores by Date (need to sort dates for coherent ordering)\n    plot_data_sorted = plot_data.sort_values('Date')\n    # Because boxplot works with categorical x axis, map Date to str to show nicely\n    plot_data_sorted['Date_str'] = plot_data_sorted['Date'].dt.strftime('%Y-%m-%d')\n    sns = None\n    try:\n        import seaborn as sns\n        sns.boxplot(x='Date_str', y='Z-Score', data=plot_data_sorted, ax=ax)\n    except ImportError:\n        # fallback: matplotlib boxplot grouped by date\n        unique_dates = plot_data_sorted['Date_str'].unique()\n        data_to_plot = [plot_data_sorted.loc[plot_data_sorted['Date_str'] == dt, 'Z-Score'] for dt in unique_dates]\n        ax.boxplot(data_to_plot, labels=unique_dates)\n    \n    ax.set_title(\"Z-Scores Over Time\")\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Z-Score\")\n    plt.xticks(rotation=45, ha='right')\n    plt.tight_layout()\n    \n    return df, fig\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_single_row_data (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 36, in test_single_row_data\n  File \"<bigcode>\", line 39, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/seaborn/categorical.py\", line 1634, in boxplot\n    p.plot_boxes(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/seaborn/categorical.py\", line 700, in plot_boxes\n    artists = ax.bxp(**boxplot_kws)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/axes/_axes.py\", line 4187, in bxp\n    raise ValueError(datashape_message.format(\"positions\"))\nValueError: List of boxplot statistics and `positions` values must have same the length\n\n----------------------------------------------------------------------\nRan 6 tests in 0.810s\n\nFAILED (errors=1)"}}
{"result": "```python\nimport pytz\nimport numpy as np\nfrom dateutil.parser import parse\nimport math\nSOLAR_CYCLE_YEARS = np.array([1986, 1996, 2008, 2019])\ndef task_func(date_str, from_tz, to_tz):\n    # Parse input date and convert to specified timezone\n    dt = parse(date_str)\n    dt = pytz.timezone(from_tz).localize(dt).astimezone(pytz.timezone(to_tz))\n    \n    year = dt.year + (dt.timetuple().tm_yday / 365.25)\n    \n    # Find the closest solar cycle start year\n    closest_year = SOLAR_CYCLE_YEARS[np.argmin(np.abs(SOLAR_CYCLE_YEARS - year))]\n    \n    # Calculate years since closest solar cycle year\n    years_since_cycle = year - closest_year\n    \n    # Calculate solar activity using cosine over an 11 year cycle\n    activity = 0.5 * (1 + math.cos(2 * math.pi * years_since_cycle / 11))\n    \n    # Clip result to [0, 1] just in case of rounding\n    return float(np.clip(activity, 0, 1))\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 9, in test_case_1\nAssertionError: 0.9999999617867533 != 0.95949 within 5 places (0.04050996178675337 difference)\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 15, in test_case_2\nAssertionError: 0.02030862352547086 != 0.415415 within 5 places (0.3951063764745291 difference)\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_case_3\nAssertionError: 0.9999999617867533 != 0.959492 within 5 places (0.04050796178675331 difference)\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_case_4\nAssertionError: 0.17271739355358512 != 0.65486 within 5 places (0.4821426064464149 difference)\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 30, in test_case_5\nAssertionError: 0.9205210486748014 != 0.841253 within 5 places (0.07926804867480142 difference)\n\n----------------------------------------------------------------------\nRan 5 tests in 0.013s\n\nFAILED (failures=5)"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Constants\nCOLUMNS = ['Date', 'Value']\ndef task_func(df, plot=False):\n    if df.empty:\n        raise ValueError(\"Input DataFrame is empty.\")\n    if not all(col in df.columns for col in COLUMNS):\n        raise ValueError(f\"Input DataFrame must contain columns {COLUMNS}.\")\n    # Check 'Value' column entries are list-like with consistent length\n    if df['Value'].isnull().any():\n        raise ValueError(\"Value column contains null entries.\")\n    if not all(isinstance(x, (list, tuple)) for x in df['Value']):\n        raise ValueError(\"All entries in 'Value' column must be lists or tuples.\")\n    list_lengths = df['Value'].apply(len)\n    if (list_lengths != list_lengths.iloc[0]).any():\n        raise ValueError(\"Not all lists in 'Value' column have the same length.\")\n    \n    # Create DataFrame from 'Value' column lists\n    values_df = pd.DataFrame(df['Value'].tolist())\n    corr_df = values_df.corr(method='pearson')\n    \n    if plot:\n        plt.figure(figsize=(8,6))\n        ax = sns.heatmap(corr_df, annot=True, fmt=\".2f\", cmap='coolwarm', square=True, cbar_kws={\"shrink\": .8})\n        ax.set_title(\"Correlation Heatmap\")\n        plt.tight_layout()\n        return corr_df, ax\n    else:\n        return corr_df\n```", "match": {"category": "success"}}
{"result": "```python\nimport pytz\nimport numpy as np\nfrom dateutil.parser import parse\nimport math\nMOON_PHASES_YEARS = np.array([1987, 1994, 2001, 2008, 2015, 2022])\ndef task_func(date_str, from_tz, to_tz):\n    # Parse date string and convert timezones\n    from_zone = pytz.timezone(from_tz)\n    to_zone = pytz.timezone(to_tz)\n    dt = parse(date_str)\n    if dt.tzinfo is None:\n        dt = from_zone.localize(dt)\n    dt = dt.astimezone(to_zone)\n    \n    # Constants\n    LUNAR_CYCLE_DAYS = 29.53058867\n    LUNAR_CYCLE_YEARS = 7  # lunar phase cycle length in years\n\n    # Choose reference year closest and prior to given date based on MOON_PHASES_YEARS\n    year = dt.year\n    # Find the reference year index: closest less or equal reference year to target year modulo 7\n    # Actually find closest MOON_PHASES_YEARS year within 7 years cycle\n    # We wrap the year to a 7 year window since cycle is 7 years\n    years_mod = (year - MOON_PHASES_YEARS[0]) % LUNAR_CYCLE_YEARS\n    # Find reference year with minimum |(year - ref_year) % 7|\n    diffs = np.abs(((year - MOON_PHASES_YEARS) % LUNAR_CYCLE_YEARS) - years_mod)\n    ref_year_idx = np.argmin(diffs)\n    ref_year = MOON_PHASES_YEARS[ref_year_idx]\n\n    # Reference new moon date for ref_year: let's fix it as Jan 1st midnight UTC of ref_year\n    # Assume new moon phase starts at 0 on January 1 midnight UTC of the ref_year\n    ref_date = pytz.utc.localize(parse(f\"{ref_year}-01-01T00:00:00\"))\n\n    # Convert dt to UTC for consistent calculation\n    dt_utc = dt.astimezone(pytz.utc)\n\n    # Calculate days difference (fractional) between dt_utc and ref_date\n    delta = dt_utc - ref_date\n    days_diff = delta.total_seconds() / 86400.0\n\n    # Adjust days_diff by taking modulo over the lunar phase period in days\n    lunar_age = days_diff % LUNAR_CYCLE_DAYS\n\n    # Moon phase float between 0 and 1, where 0 = new moon,\n    # 0.5 roughly full moon; 1 also new moon again, so normalize lunar_age/LUNAR_CYCLE_DAYS\n    phase = lunar_age / LUNAR_CYCLE_DAYS\n\n    # Convert to 0 (new moon) to 1 (full moon) with linear mapping:\n    # Full moon is at half lunar cycle (phase=0.5), map that to 1,\n    # New moon at phase=0 or 1 mapped to 0.\n    # The function of phase:\n    #   phase 0 -> 0\n    #   phase 0.5 -> 1\n    #   phase 1 -> 0\n    # This can be modeled by: 1 - abs(phase - 0.5)*2\n    moon_phase = 1 - abs(phase - 0.5)*2\n\n    return moon_phase\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    if df.empty:\n        return 0, 0\n\n    # Assume the dataframe has a 'dates' column and a 'numbers' column containing lists\n    # Expand the lists into separate columns\n    numbers_expanded = pd.DataFrame(df.iloc[:, 1].tolist())\n    # Perform PCA\n    pca = PCA()\n    pca.fit(numbers_expanded)\n    explained_variance_ratio = pca.explained_variance_ratio_\n\n    # Plot the explained variance ratio\n    fig, ax = plt.subplots()\n    ax.bar(range(1, len(explained_variance_ratio) + 1), explained_variance_ratio)\n    ax.set_title(\"Explained Variance Ratio of Principal Components\")\n    ax.set_xlabel(\"Principal Component\")\n    ax.set_ylabel(\"Explained Variance Ratio\")\n\n    return explained_variance_ratio, ax\n```", "match": {"category": "success"}}
{"result": "```python\nfrom collections import Counter\nimport itertools\nimport random\n# Constants\nALPHABET = 'abcdefghijklmnopqrstuvwxyz'\ndef task_func(list_of_lists, seed=0):\n    random.seed(seed)\n    for i, sublist in enumerate(list_of_lists):\n        if not sublist:\n            # replace empty list with random sample of length 5 (arbitrary length)\n            list_of_lists[i] = random.choices(ALPHABET, k=5)\n    combined = itertools.chain.from_iterable(list_of_lists)\n    return Counter(combined)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_case_2\nAssertionError: 11 != 16\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 16, in test_case_3\nAssertionError: 15 != 30\n\n----------------------------------------------------------------------\nRan 5 tests in 0.002s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport os\nimport logging\n\ndef task_func(directory):\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    \n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n    \n    removed_files = []\n    for filename in os.listdir(directory):\n        if 'jquery' in filename.lower() and filename.lower().endswith('.js'):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                os.remove(filepath)\n                removed_files.append(filename)\n                logging.info(f\"Removed file: {filename}\")\n    \n    return (len(removed_files), removed_files)\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_empty_directory (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 18, in test_empty_directory\n  File \"<bigcode>\", line 7, in task_func\nFileNotFoundError: The directory '/fake/empty/directory' does not exist.\n\n======================================================================\nERROR: test_logging (builtins.TestCases)\nTest if logging works as expected.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 54, in test_logging\n  File \"<bigcode>\", line 7, in task_func\nFileNotFoundError: The directory '/fake/directory' does not exist.\n\n======================================================================\nERROR: test_remove_jquery_files (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 10, in test_remove_jquery_files\n  File \"<bigcode>\", line 7, in task_func\nFileNotFoundError: The directory '/fake/directory' does not exist.\n\n======================================================================\nERROR: test_remove_jquery_files_error (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 44, in test_remove_jquery_files_error\n  File \"<bigcode>\", line 7, in task_func\nFileNotFoundError: The directory '/fake/directory' does not exist.\n\n======================================================================\nERROR: test_remove_jquery_files_not_js (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 30, in test_remove_jquery_files_not_js\n  File \"<bigcode>\", line 7, in task_func\nFileNotFoundError: The directory '/fake/directory' does not exist.\n\n======================================================================\nERROR: test_remove_jquery_files_subdirectory (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 37, in test_remove_jquery_files_subdirectory\n  File \"<bigcode>\", line 7, in task_func\nFileNotFoundError: The directory '/fake/directory' does not exist.\n\n----------------------------------------------------------------------\nRan 7 tests in 0.008s\n\nFAILED (errors=6)"}}
{"result": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport random\n\ndef task_func(list_of_lists, seed=0):\n    random.seed(seed)\n    combined_data = []\n    for sublist in list_of_lists:\n        if not sublist:\n            sublist.extend(random.randint(0, 100) for _ in range(5))\n        combined_data.extend(sublist)\n    fig, ax = plt.subplots()\n    sns.histplot(combined_data, ax=ax)\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom statistics import mean\nimport random\n# Constants for generating the report data\nFIELDS = ['Physics', 'Math', 'Chemistry', 'Biology', 'English', 'History']\nSTUDENTS = ['Student_' + str(i) for i in range(1, 101)]\ndef task_func(additional_fields = []):\n    subjects = FIELDS + additional_fields\n    # Generate random grades for each student and subject (0-100)\n    data = {student: [random.randint(0, 100) for _ in subjects] for student in STUDENTS}\n    df = pd.DataFrame(data, index=subjects).T\n    # Calculate average grade for each student (row)\n    df['Average Grade'] = df.mean(axis=1)\n    # Calculate average grade for each subject (column)\n    avg_row = df.mean(axis=0).to_frame().T\n    avg_row.index = ['Average']\n    df_final = pd.concat([df, avg_row])\n    return df_final\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport random\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(list_of_lists, seed=42):\n    random.seed(seed)\n    # Fill empty inner lists with 5 random integers\n    filled_lists = [lst if lst else [random.randint(0, 100) for _ in range(5)] for lst in list_of_lists]\n    # Fit scaler on all values flattened and then transform each list independently\n    scaler = MinMaxScaler()\n    # Flatten and reshape for scaler fitting\n    all_vals = np.array([val for sublist in filled_lists for val in sublist]).reshape(-1, 1)\n    scaler.fit(all_vals)\n    # Scale each sublist\n    scaled = [scaler.transform(np.array(sublist).reshape(-1,1)).flatten().tolist() for sublist in filled_lists]\n    return scaled\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 32, in test_case_4\nAssertionError: Lists differ: [[0.0], [0.25], [0.5], [0.75], [1.0]] != [[0.0], [0.0], [0.0], [0.0], [0.0]]\n\nFirst differing element 1:\n[0.25]\n[0.0]\n\n- [[0.0], [0.25], [0.5], [0.75], [1.0]]\n?            ^^      ^      ^^    ^\n\n+ [[0.0], [0.0], [0.0], [0.0], [0.0]]\n?            ^      ^      ^    ^\n\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 38, in test_case_5\nAssertionError: Lists differ: [[0.0, 1.0], [0.0, 0.5], [0.5, 1.0]] != [[0.0, 1.0], [0.0, 1.0], [0.0, 1.0]]\n\nFirst differing element 1:\n[0.0, 0.5]\n[0.0, 1.0]\n\n- [[0.0, 1.0], [0.0, 0.5], [0.5, 1.0]]\n?                     --      ^\n\n+ [[0.0, 1.0], [0.0, 1.0], [0.0, 1.0]]\n?                    ++       ^\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.008s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport os\nimport csv\nimport random\nfrom statistics import mean\n\n# Constants\nCOLUMNS = ['Name', 'Age', 'Height', 'Weight']\nPEOPLE_COUNT = 100\n\ndef task_func(filename):\n    first_names = ['John', 'Jane', 'Alex', 'Emily', 'Chris', 'Katie', 'Mike', 'Laura', 'David', 'Sarah']\n    last_names = ['Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Miller', 'Davis', 'Garcia', 'Rodriguez', 'Wilson']\n\n    data = []\n    for _ in range(PEOPLE_COUNT):\n        name = random.choice(first_names) + ' ' + random.choice(last_names)\n        age = random.randint(18, 80)\n        height = round(random.uniform(150.0, 200.0), 1)  # in cm\n        weight = round(random.uniform(50.0, 120.0), 1)   # in kg\n        data.append({'Name': name, 'Age': age, 'Height': height, 'Weight': weight})\n\n    with open(filename, mode='w', newline='') as csvfile:\n        writer = csv.DictWriter(csvfile, fieldnames=COLUMNS)\n        writer.writeheader()\n        for person in data:\n            writer.writerow(person)\n        avg_age = round(mean([p['Age'] for p in data]), 1)\n        avg_height = round(mean([p['Height'] for p in data]), 1)\n        avg_weight = round(mean([p['Weight'] for p in data]), 1)\n        writer.writerow({'Name': 'Average', 'Age': avg_age, 'Height': avg_height, 'Weight': avg_weight})\n\n    return os.path.abspath(filename)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_averages_calculation (builtins.TestCases)\nTest if the averages are calculated correctly.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 35, in test_averages_calculation\nAssertionError: Lists differ: [50.2, 172.3, 89.7] != [50.19, 172.337, 89.655]\n\nFirst differing element 0:\n50.2\n50.19\n\n- [50.2, 172.3, 89.7]\n?     ^            ^\n\n+ [50.19, 172.337, 89.655]\n?     ^^       ++     ^^^\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.008s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport numpy as np\nimport random\nfrom scipy import stats\ndef task_func(list_of_lists, size=5, seed=0):\n    random.seed(seed)\n    all_values = []\n    for lst in list_of_lists:\n        if not lst:\n            lst.extend(random.randint(0, 100) for _ in range(size))\n        all_values.extend(lst)\n    mean_val = np.mean(all_values)\n    median_val = np.median(all_values)\n    mode_result = stats.mode(all_values, nan_policy='omit')\n    mode_val = mode_result.mode[0] if mode_result.count[0] > 0 else None\n    return {'mean': mean_val, 'median': median_val, 'mode': mode_val}\n```", "match": {"category": "success"}}
{"result": "```python\nimport random\nimport matplotlib.pyplot as plt\n# Constants\nDISTRIBUTION_SIZE = 1000\ndef task_func(bins=30):\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    fig, ax = plt.subplots()\n    patches = ax.hist(distribution, bins=bins)\n    plt.close(fig)  # Prevent displaying in some environments\n    return distribution, patches[2]\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport os\nimport shutil\nfrom datetime import datetime\ndef task_func(directory):\n    moved_files = {}\n    for filename in os.listdir(directory):\n        full_path = os.path.join(directory, filename)\n        if not os.path.isfile(full_path):\n            continue\n        # Find all bracket enclosed parts and remove them to find first non-bracket text\n        # Or parse by scanning from beginning, skipping bracketed parts\n        # Instead, we use regex to capture first text outside []\n        # Pattern: Skip any number of [.*], then capture the first text chunk that is not []\n        # We'll split the filename (without extension)\n        name = filename\n        # Extract name without extension for matching text\n        name_only, ext = os.path.splitext(name)\n        \n        # Find all square bracket matches with spans\n        bracket_spans = list(re.finditer(r'\\[[^\\]]*\\]', name_only))\n        # We'll scan name from start and extract the first text outside the spans\n        pos = 0\n        first_text = None\n        while pos < len(name_only):\n            inside_bracket = False\n            for span in bracket_spans:\n                if span.start() <= pos < span.end():\n                    pos = span.end()\n                    inside_bracket = True\n                    break\n            if inside_bracket:\n                continue\n            # Collect text from pos to next bracket start or end of string\n            next_bracket_start = len(name_only)\n            for span in bracket_spans:\n                if span.start() > pos:\n                    next_bracket_start = min(next_bracket_start, span.start())\n            segment = name_only[pos:next_bracket_start].strip()\n            # Extract first word from segment (split by whitespace)\n            if segment:\n                first_text = segment.split()[0]\n                break\n            pos = next_bracket_start\n        \n        if not first_text:\n            continue\n        \n        target_dir = os.path.join(directory, first_text)\n        if not os.path.exists(target_dir):\n            os.makedirs(target_dir)\n        \n        new_path = os.path.join(target_dir, filename)\n        # If file already exists in target directory, add a suffix to avoid overwrite\n        if os.path.exists(new_path):\n            base, ext = os.path.splitext(filename)\n            counter = 1\n            while True:\n                new_name = f\"{base}_{counter}{ext}\"\n                new_path = os.path.join(target_dir, new_name)\n                if not os.path.exists(new_path):\n                    break\n                counter += 1\n            shutil.move(full_path, new_path)\n            moved_name = new_name\n        else:\n            shutil.move(full_path, new_path)\n            moved_name = filename\n        \n        if first_text not in moved_files:\n            moved_files[first_text] = []\n        moved_files[first_text].append(moved_name)\n    return (directory, moved_files)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 32, in test_case_1\nAssertionError: 'example' not found in {'test_file1': ['test_file1.txt']}\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 42, in test_case_2\nAssertionError: 'example' not found in {'test_file1': ['test_file1.txt'], 'test_file3': ['test_file3.txt'], 'test_file2': ['test_file2.txt']}\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 55, in test_case_4\nAssertionError: {'test_file1': ['test_file1.txt']} != {}\n- {'test_file1': ['test_file1.txt']}\n+ {}\n\n----------------------------------------------------------------------\nRan 5 tests in 0.004s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport socket\nimport ssl\nimport http.client\ndef task_func(SERVER_NAME, SERVER_PORT, path):\n    context = ssl.create_default_context()\n    try:\n        conn = http.client.HTTPSConnection(SERVER_NAME, SERVER_PORT, context=context)\n        conn.request(\"GET\", path)\n        response = conn.getresponse()\n        body = response.read().decode()\n        conn.close()\n        return body\n    except ssl.SSLError:\n        raise\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_ssl_handshake_error_handling (builtins.TestCases)\nTest handling of SSL handshake errors.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 36, in test_ssl_handshake_error_handling\nAssertionError: SSLError not raised\n\n----------------------------------------------------------------------\nRan 5 tests in 0.171s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport os\nfrom sendgrid import SendGridAPIClient\nfrom sendgrid.helpers.mail import Mail\nfrom python_http_client.exceptions import HTTPError\n\ndef task_func(dir, api_key, recipient_email):\n    try:\n        if not os.path.isdir(dir):\n            return False\n        \n        files = os.listdir(dir)\n        file_list = \"\\n\".join(files) if files else \"No files found.\"\n\n        message = Mail(\n            from_email='no-reply@example.com',\n            to_emails=recipient_email,\n            subject=f'List of files in directory: {dir}',\n            plain_text_content=file_list\n        )\n\n        sg = SendGridAPIClient(api_key)\n        response = sg.send(message)\n\n        return 200 <= response.status_code < 300\n\n    except FileNotFoundError:\n        # If directory does not exist, returning False already done above,\n        # but if FileNotFoundError is raised from other causes, re-raise.\n        raise\n    except HTTPError as e:\n        raise e\n    except Exception as e:\n        raise e\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_empty_directory (builtins.TestCases)\nTest sending an email with an empty directory.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 50, in test_empty_directory\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_failed_email_send (builtins.TestCases)\nTest handling of a failed email send by ensuring HTTPError is raised.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 37, in test_failed_email_send\nAssertionError: HTTPError not raised\n\n======================================================================\nFAIL: test_generic_exception_handling (builtins.TestCases)\nTest handling of generic exceptions during email sending.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 61, in test_generic_exception_handling\nAssertionError: Exception not raised\n\n======================================================================\nFAIL: test_invalid_directory (builtins.TestCases)\nTest the handling of an invalid directory.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 23, in test_invalid_directory\nAssertionError: FileNotFoundError not raised\n\n======================================================================\nFAIL: test_successful_email_send (builtins.TestCases)\nTest successful email sending with a valid directory.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 18, in test_successful_email_send\nAssertionError: False is not true\n\n----------------------------------------------------------------------\nRan 5 tests in 0.007s\n\nFAILED (failures=5)"}}
{"result": "```python\nimport pandas as pd\nimport random\n# Constants\nCATEGORIES = ['A', 'B', 'C', 'D', 'E']\ndef task_func(value_range=(0, 100)):\n    counts = [random.randint(value_range[0], value_range[1]) for _ in CATEGORIES]\n    df = pd.DataFrame({'Category': CATEGORIES, 'Count': counts})\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport re\ndef task_func(example_str):\n    # Extract text not enclosed in square brackets\n    texts = re.findall(r'(?:^|])([^\\[\\]]+)(?:\\[|$)', example_str)\n    cleaned_text = ' '.join(t.strip() for t in texts if t.strip())\n    # Compute TF-IDF\n    vectorizer = TfidfVectorizer()\n    tfidf_matrix = vectorizer.fit_transform([cleaned_text])\n    tfidf_scores = tfidf_matrix.toarray()[0]\n    feature_names = vectorizer.get_feature_names_out()\n    return dict(zip(feature_names, tfidf_scores))\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 46, in test_case_5\n  File \"<bigcode>\", line 11, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/feature_extraction/text.py\", line 2139, in fit_transform\n    X = super().fit_transform(raw_documents)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 1152, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/feature_extraction/text.py\", line 1389, in fit_transform\n    vocabulary, X = self._count_vocab(raw_documents, self.fixed_vocabulary_)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/feature_extraction/text.py\", line 1295, in _count_vocab\n    raise ValueError(\nValueError: empty vocabulary; perhaps the documents only contain stop words\n\n======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_case_1\nAssertionError: {'in': 1.0} != {'adversarial': 0.5773502691896258, 'in': 0[42 chars]6258}\n- {'in': 1.0}\n+ {'adversarial': 0.5773502691896258,\n+  'in': 0.5773502691896258,\n+  'input': 0.5773502691896258}\n\n----------------------------------------------------------------------\nRan 5 tests in 0.011s\n\nFAILED (failures=1, errors=1)"}}
{"result": "```python\nimport random\nimport math\nimport matplotlib.pyplot as plt\ndef task_func(points_count=1000, radius=1):\n    points = []\n    for _ in range(points_count):\n        r = radius * math.sqrt(random.random())\n        theta = random.uniform(0, 2 * math.pi)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        points.append((x, y))\n    x_vals, y_vals = zip(*points)\n    fig, ax = plt.subplots()\n    ax.scatter(x_vals, y_vals)\n    ax.set_aspect('equal')\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport matplotlib.pyplot as plt\nfrom nltk.probability import FreqDist\n\ndef task_func(example_str, top_n=30):\n    # Remove texts inside square brackets including the brackets\n    text = re.sub(r'\\[.*?\\]', '', example_str)\n    # Tokenize words (alphanumeric + apostrophes for contractions)\n    words = re.findall(r\"\\b\\w+'\\w+|\\b\\w+\\b\", text.lower())\n    # Frequency distribution\n    freq_dist = FreqDist(words)\n    # Plot frequency distribution of top_n words\n    most_common = freq_dist.most_common(top_n)\n    words_top = [w for w, c in most_common]\n    counts_top = [c for w, c in most_common]\n\n    fig, ax = plt.subplots(figsize=(12, 6))\n    ax.bar(words_top, counts_top)\n    ax.set_title(f'Top {top_n} Most Common Words Frequency')\n    ax.set_ylabel('Frequency')\n    ax.set_xlabel('Words')\n    ax.tick_params(axis='x', rotation=45)\n    plt.tight_layout()\n\n    top_dict = dict(most_common)\n    return ax, top_dict\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 11, in test_case_1\nAssertionError: {'smith': 2, 'josie': 1, 'mugsy': 1, 'dog': 1} != {'Smith': 2, 'Josie': 1, 'Mugsy': 1, 'Dog': 1}\n- {'dog': 1, 'josie': 1, 'mugsy': 1, 'smith': 2}\n?   ^         ^           ^           ^\n\n+ {'Dog': 1, 'Josie': 1, 'Mugsy': 1, 'Smith': 2}\n?   ^         ^           ^           ^\n : The top_n_words dictionary is incorrect.\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 23, in test_case_3\nAssertionError: {'this': 1, 'is': 1, 'a': 1, 'simple': 1, 'test': 1} != {'This': 1, 'is': 1, 'a': 1, 'simple': 1, 'test': 1}\n- {'a': 1, 'is': 1, 'simple': 1, 'test': 1, 'this': 1}\n?                                        -----------\n\n+ {'This': 1, 'a': 1, 'is': 1, 'simple': 1, 'test': 1}\n?  +++++++++++\n : The top_n_words dictionary is incorrect.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.226s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport subprocess\nimport os\nimport random\n\ndef task_func(directory, file_list):\n    if not file_list:\n        return None\n    file_choice = random.choice(file_list)\n    full_path = os.path.join(directory, file_choice)\n    if not os.path.isfile(full_path):\n        return None\n    try:\n        proc = subprocess.Popen(full_path)\n        proc.poll()\n        if proc.returncode is None:\n            return None\n        else:\n            return proc.returncode\n    except Exception:\n        return None\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_non_zero_exit_code (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 44, in test_non_zero_exit_code\nAssertionError: None != 1\n\n======================================================================\nFAIL: test_random_file_selection (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 66, in test_random_file_selection\nAssertionError: False is not true : Expected call with valid_dir/script1.bat not found\n\n======================================================================\nFAIL: test_valid_input (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 17, in test_valid_input\nAssertionError: None != 0\n\n----------------------------------------------------------------------\nRan 5 tests in 0.005s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport pandas as pd\nimport re\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(text):\n    # Remove all names inside square brackets\n    text_filtered = re.sub(r'\\[[^\\]]*\\]', '', text)\n    \n    # Extract all words starting with uppercase letter (assuming names)\n    names = re.findall(r'\\b[A-Z][a-zA-Z]*\\b', text_filtered)\n    \n    if not names:\n        return pd.Series(dtype=int), None, None, None\n    \n    freq = pd.Series(names).value_counts()\n    \n    fig, ax = plt.subplots()\n    freq.plot(kind='bar', ax=ax)\n    ax.set_xlabel('Names')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Name Frequencies')\n    \n    skewness = stats.skew(freq) if not pd.isna(stats.skew(freq)) else None\n    kurtosis = stats.kurtosis(freq) if not pd.isna(stats.kurtosis(freq)) else None\n    \n    if pd.isna(skewness):\n        skewness = None\n    if pd.isna(kurtosis):\n        kurtosis = None\n    \n    return freq, ax, skewness, kurtosis\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'John Doe'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_case_1\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/series.py\", line 1007, in __getitem__\n    return self._get_value(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/series.py\", line 1116, in _get_value\n    loc = self.index.get_loc(label)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'John Doe'\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Mr. X'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 42, in test_case_3\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/series.py\", line 1007, in __getitem__\n    return self._get_value(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/series.py\", line 1116, in _get_value\n    loc = self.index.get_loc(label)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Mr. X'\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'John Doe'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 61, in test_case_5\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/series.py\", line 1007, in __getitem__\n    return self._get_value(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/series.py\", line 1116, in _get_value\n    loc = self.index.get_loc(label)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'John Doe'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.132s\n\nFAILED (errors=3)"}}
{"result": "```python\nimport subprocess\nimport os\nimport shutil\nimport sys\n# Constants\nDIRECTORY = r'c:\\Program Files\\VMware\\VMware Server'\nBACKUP_DIRECTORY = r'c:\\Program Files\\VMware\\VMware Server\\Backup'\n\ndef task_func(filename):\n    src_path = os.path.join(DIRECTORY, filename)\n    dest_path = os.path.join(BACKUP_DIRECTORY, filename)\n\n    try:\n        # Ensure backup directory exists\n        os.makedirs(BACKUP_DIRECTORY, exist_ok=True)\n\n        # Copy file to backup directory\n        shutil.copy2(src_path, dest_path)\n    except Exception:\n        return -1\n\n    try:\n        # Run the original file from the original directory as subprocess\n        completed_process = subprocess.run([src_path], check=False)\n        return completed_process.returncode\n    except Exception:\n        return -1\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_backup_of_large_file (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 40, in test_backup_of_large_file\nAssertionError: -1 != 0\n\n======================================================================\nFAIL: test_successful_execution (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 14, in test_successful_execution\nAssertionError: -1 != 0\n\n----------------------------------------------------------------------\nRan 5 tests in 0.006s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport re\nimport numpy as np\nfrom collections import Counter\nfrom sklearn.mixture import GaussianMixture\ndef task_func(text, num_gaussians=1, seed=42):\n    if num_gaussians <= 0:\n        raise ValueError(\"num_gaussians must be greater than 0\")\n    # Remove substrings enclosed in square brackets\n    filtered_text = re.sub(r'\\[.*?\\]', '', text)\n    # Extract words (tokenize names into words)\n    words = re.findall(r'\\b\\w+\\b', filtered_text)\n    word_counts = Counter(words)\n    unique_words = len(word_counts)\n    if num_gaussians > unique_words:\n        raise Exception(\"num_gaussians cannot be greater than the number of unique words\")\n    freqs = np.array(list(word_counts.values())).reshape(-1, 1)\n    gmm = GaussianMixture(n_components=num_gaussians, random_state=seed)\n    gmm.fit(freqs)\n    means = gmm.means_.flatten()\n    vars_ = gmm.covariances_.flatten()\n    return dict(word_counts), means, vars_\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 6, in test_case_1\nValueError: too many values to unpack (expected 2)\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 11, in test_case_2\nValueError: too many values to unpack (expected 2)\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_case_4\nValueError: too many values to unpack (expected 2)\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 26, in test_case_5\nValueError: too many values to unpack (expected 2)\n\n----------------------------------------------------------------------\nRan 5 tests in 0.144s\n\nFAILED (errors=4)"}}
{"result": "```python\nimport subprocess\nimport time\nimport threading\ndef task_func(file_list):\n    exit_codes = [None] * len(file_list)\n    processes = []\n\n    def run_process(i, filename):\n        proc = subprocess.Popen([filename])\n        processes.append(proc)\n        proc.wait()\n        exit_codes[i] = proc.returncode\n\n    threads = []\n    for i, file in enumerate(file_list):\n        t = threading.Thread(target=run_process, args=(i, file))\n        t.start()\n        threads.append(t)\n\n    for t in threads:\n        t.join()\n\n    return exit_codes\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_multiple_processes_with_different_exit_codes (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 37, in test_multiple_processes_with_different_exit_codes\nAssertionError: Lists differ: [<MagicMock name='Popen().returncode' id='[133 chars]52'>] != [0, 1, None]\n\nFirst differing element 0:\n<MagicMock name='Popen().returncode' id='132643233089952'>\n0\n\n+ [0, 1, None]\n- [<MagicMock name='Popen().returncode' id='132643233089952'>,\n-  <MagicMock name='Popen().returncode' id='132643233089952'>,\n-  <MagicMock name='Popen().returncode' id='132643233089952'>]\n\n======================================================================\nFAIL: test_process_still_running (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 31, in test_process_still_running\nAssertionError: Lists differ: [<MagicMock name='Popen().returncode' id='132649642448912'>] != [None]\n\nFirst differing element 0:\n<MagicMock name='Popen().returncode' id='132649642448912'>\nNone\n\n- [<MagicMock name='Popen().returncode' id='132649642448912'>]\n+ [None]\n\n======================================================================\nFAIL: test_valid_directory_and_files (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 24, in test_valid_directory_and_files\nAssertionError: Lists differ: [<MagicMock name='Popen().returncode' id='[73 chars]80'>] != [0, 0]\n\nFirst differing element 0:\n<MagicMock name='Popen().returncode' id='132649642544480'>\n0\n\n+ [0, 0]\n- [<MagicMock name='Popen().returncode' id='132649642544480'>,\n-  <MagicMock name='Popen().returncode' id='132649642544480'>]\n\n======================================================================\nFAIL: test_valid_files (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 16, in test_valid_files\nAssertionError: Lists differ: [<MagicMock name='Popen().returncode' id='[73 chars]68'>] != [0, 0]\n\nFirst differing element 0:\n<MagicMock name='Popen().returncode' id='132649642656768'>\n0\n\n+ [0, 0]\n- [<MagicMock name='Popen().returncode' id='132649642656768'>,\n-  <MagicMock name='Popen().returncode' id='132649642656768'>]\n\n----------------------------------------------------------------------\nRan 5 tests in 0.020s\n\nFAILED (failures=4)"}}
{"result": "```python\nimport re\nimport os\nfrom pathlib import Path\nimport glob\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\(.+?\\)|\\w') -> dict:\n    result = {}\n    pattern = re.compile(regex_pattern)\n    p = Path(directory_path)\n    for file_path in p.glob(\"*.txt\"):\n        with open(file_path, \"r\", encoding=\"utf-8\") as f:\n            content = f.read()\n            matches = pattern.findall(content)\n        result[file_path.name] = matches\n    return result\n```", "match": {"category": "success"}}
{"result": "```python\nimport subprocess\nimport os\nimport sys\nimport glob\ndef task_func(directory_path):\n    results = []\n    bat_files = glob.glob(os.path.join(directory_path, '*.bat'))\n    for bat_file in bat_files:\n        try:\n            completed = subprocess.run(bat_file, shell=True, check=False)\n            results.append((os.path.basename(bat_file), completed.returncode))\n        except Exception:\n            results.append((os.path.basename(bat_file), None))\n    return results\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_multiple_bat_files_mixed_results (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 41, in test_multiple_bat_files_mixed_results\nAssertionError: Lists differ: [('file1.bat', None), ('file2.bat', None), ('file3.bat', None)] != [('file1.bat', 0), ('file2.bat', 1), ('file3.bat', None)]\n\nFirst differing element 0:\n('file1.bat', None)\n('file1.bat', 0)\n\n- [('file1.bat', None), ('file2.bat', None), ('file3.bat', None)]\n?                ^^^^                 ^^^^\n\n+ [('file1.bat', 0), ('file2.bat', 1), ('file3.bat', None)]\n?                ^                 ^\n\n\n======================================================================\nFAIL: test_single_bat_file_failure (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 28, in test_single_bat_file_failure\nAssertionError: Lists differ: [('file1.bat', None)] != [('file1.bat', 1)]\n\nFirst differing element 0:\n('file1.bat', None)\n('file1.bat', 1)\n\n- [('file1.bat', None)]\n?                ^^^^\n\n+ [('file1.bat', 1)]\n?                ^\n\n\n======================================================================\nFAIL: test_single_bat_file_success (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 19, in test_single_bat_file_success\nAssertionError: Lists differ: [('file1.bat', None)] != [('file1.bat', 0)]\n\nFirst differing element 0:\n('file1.bat', None)\n('file1.bat', 0)\n\n- [('file1.bat', None)]\n?                ^^^^\n\n+ [('file1.bat', 0)]\n?                ^\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.011s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport csv\nimport re\nfrom collections import Counter\ndef task_func(file_path, regex_pattern=r'\\(.+?\\)|\\w+|[\\W_]+'):\n    counter = Counter()\n    pattern = re.compile(regex_pattern)\n    with open(file_path, newline='', encoding='utf-8') as csvfile:\n        reader = csv.reader(csvfile)\n        for row in reader:\n            for cell in row:\n                matches = pattern.findall(cell)\n                counter.update(matches)\n    return dict(counter)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 36, in test_case_1\nAssertionError: {'a': 4, 'b': 2, '(abc)': 2, '(def)': 1, '(ghi)': 1, 'c': 1} != {'a': 4, ' ': 3, 'b': 2, ' (': 4, 'abc': 2, ') ': 3[32 chars]': 1}\n- {'(abc)': 2, '(def)': 1, '(ghi)': 1, 'a': 4, 'b': 2, 'c': 1}\n+ {' ': 3,\n+  ' (': 4,\n+  ')': 1,\n+  ') ': 3,\n+  'a': 4,\n+  'abc': 2,\n+  'b': 2,\n+  'c': 1,\n+  'def': 1,\n+  'ghi': 1} : Expected {'a': 4, ' ': 3, 'b': 2, ' (': 4, 'abc': 2, ') ': 3, 'def': 1, 'ghi': 1, 'c': 1, ')': 1} but got {'a': 4, 'b': 2, '(abc)': 2, '(def)': 1, '(ghi)': 1, 'c': 1}\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 40, in test_case_2\nAssertionError: {'x': 2, 'y': 2, '(xyz)': 2, '(uvw)': 1, 'z': 1, '(rst)': 1} != {'x': 2, ' ': 2, 'y': 2, ' (': 3, 'xyz': 2, ') ': 2[42 chars]': 1}\n- {'(rst)': 1, '(uvw)': 1, '(xyz)': 2, 'x': 2, 'y': 2, 'z': 1}\n+ {' ': 2,\n+  ' (': 3,\n+  ')': 1,\n+  ') ': 2,\n+  ') (': 1,\n+  'rst': 1,\n+  'uvw': 1,\n+  'x': 2,\n+  'xyz': 2,\n+  'y': 2,\n+  'z': 1} : Expected {'x': 2, ' ': 2, 'y': 2, ' (': 3, 'xyz': 2, ') ': 2, 'uvw': 1, 'z': 1, 'rst': 1, ') (': 1, ')': 1} but got {'x': 2, 'y': 2, '(xyz)': 2, '(uvw)': 1, 'z': 1, '(rst)': 1}\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 44, in test_case_3\nAssertionError: {'1': 1, '2': 2, '(345)': 1, '(678)': 1, '3': 1, '([24 chars]': 1} != {'1': 1, ' ': 2, '2': 2, ' (': 3, '345': 1, ') (': [60 chars]': 1}\n- {'(234)': 1, '(345)': 1, '(678)': 1, '(901)': 1, '1': 1, '2': 2, '3': 1, '4': 1}\n+ {' ': 2,\n+  ' (': 3,\n+  ')': 1,\n+  ') ': 2,\n+  ') (': 1,\n+  '1': 1,\n+  '2': 2,\n+  '234': 1,\n+  '3': 1,\n+  '345': 1,\n+  '4': 1,\n+  '678': 1,\n+  '901': 1} : Expected {'1': 1, ' ': 2, '2': 2, ' (': 3, '345': 1, ') (': 1, '678': 1, ') ': 2, '3': 1, '901': 1, '4': 1, '234': 1, ')': 1} but got {'1': 1, '2': 2, '(345)': 1, '(678)': 1, '3': 1, '(901)': 1, '4': 1, '(234)': 1}\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 48, in test_case_4\nAssertionError: {'@': 2, '#': 1, '($%^)': 1, '&': 1, '*': 1,[32 chars]': 1} != {'@ # ($%^) & * (*)_+ @ (#&)': 1}\n+ {'@ # ($%^) & * (*)_+ @ (#&)': 1}\n- {'#': 1,\n-  '&': 1,\n-  '(#&)': 1,\n-  '($%^)': 1,\n-  '(*)': 1,\n-  '*': 1,\n-  '+': 1,\n-  '@': 2,\n-  '_': 1} : Expected {'@ # ($%^) & * (*)_+ @ (#&)': 1} but got {'@': 2, '#': 1, '($%^)': 1, '&': 1, '*': 1, '(*)': 1, '_': 1, '+': 1, '(#&)': 1}\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 52, in test_case_5\nAssertionError: {'apple': 1, 'banana': 1, '(cherry)': 1, 'date': 1, '(f[54 chars]': 1} != {'apple': 1, ' ': 1, 'banana': 1, ' (': 4, 'cherry': 1,[80 chars]': 1}\n- {'(cherry)': 1,\n+ {' ': 1,\n+  ' (': 4,\n-  '(fig)': 1,\n?   ----\n\n+  ')': 1,\n+  ') ': 3,\n-  '(kiwi)': 1,\n-  '(mango)': 1,\n   'apple': 1,\n   'banana': 1,\n+  'cherry': 1,\n   'date': 1,\n+  'fig': 1,\n   'grape': 1,\n+  'kiwi': 1,\n-  'lemon': 1}\n?            ^\n\n+  'lemon': 1,\n?            ^\n\n+  'mango': 1} : Expected {'apple': 1, ' ': 1, 'banana': 1, ' (': 4, 'cherry': 1, ') ': 3, 'date': 1, 'fig': 1, 'grape': 1, 'kiwi': 1, 'lemon': 1, 'mango': 1, ')': 1} but got {'apple': 1, 'banana': 1, '(cherry)': 1, 'date': 1, '(fig)': 1, 'grape': 1, '(kiwi)': 1, 'lemon': 1, '(mango)': 1}\n\n----------------------------------------------------------------------\nRan 5 tests in 0.003s\n\nFAILED (failures=5)"}}
{"result": "```python\nimport collections\nimport random\nfrom queue import PriorityQueue\ndef task_func(number_teams=5):\n    teams = {f\"Team {i}\": random.randint(0, 100) for i in range(1, number_teams+1)}\n    pq = PriorityQueue()\n    for team, points in teams.items():\n        pq.put((-points, team))\n    sorted_dict = collections.OrderedDict()\n    while not pq.empty():\n        points_neg, team = pq.get()\n        sorted_dict[team] = -points_neg\n    return sorted_dict\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport json\nimport os\ndef task_func(file_path: str, regex_pattern=r'\\(.+?\\)|\\w') -> dict:\n    matches = []\n    with open(file_path, 'r', encoding='utf-8') as f:\n        data = json.load(f)\n    def extract_matches(obj):\n        if isinstance(obj, dict):\n            for v in obj.values():\n                extract_matches(v)\n        elif isinstance(obj, list):\n            for item in obj:\n                extract_matches(item)\n        elif isinstance(obj, str):\n            matches.extend(re.findall(regex_pattern, obj))\n    extract_matches(data)\n    filename = os.path.basename(file_path)\n    return {filename: matches}\n```", "match": {"category": "success"}}
{"result": "```python\nimport heapq\nimport random\n\ndef task_func(list_length: int, k: int):\n    random_list = [random.randint(0, 1000) for _ in range(list_length)]\n    k_largest = heapq.nlargest(k, random_list)\n    return (random_list, k_largest)\n```", "match": {"category": "success"}}
{"result": "```python\nimport bisect\nimport random\ndef task_func(num, list_length = 5, min_value = 0, max_value = 100):\n    if max_value < min_value:\n        max_value = min_value\n    rand_list = sorted(random.randint(min_value, max_value) for _ in range(list_length))\n    new_list = rand_list[:]\n    bisect.insort(new_list, num)\n    return (rand_list, new_list)\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nfrom collections import Counter\nfrom nltk.corpus import stopwords\n\ndef task_func(text: str) -> dict:\n    stop_words = set(stopwords.words('english'))\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    filtered_words = [word for word in words if word not in stop_words]\n    return dict(Counter(filtered_words))\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_case_2\nAssertionError: {'words': 2, 'repeated': 2, 'common': 1} != {'words': 2, 'repeated': 1, 'Repeated': 1, 'common': 1}\n- {'common': 1, 'repeated': 2, 'words': 2}\n?                           ^\n\n+ {'Repeated': 1, 'common': 1, 'repeated': 1, 'words': 2}\n?  +++++++++++++++                         ^\n\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 19, in test_case_3\nAssertionError: {'python': 1, 'programming': 1, 'language': 1} != {'Python': 1, 'programming': 1, 'language': 1}\n- {'language': 1, 'programming': 1, 'python': 1}\n+ {'Python': 1, 'language': 1, 'programming': 1}\n\n----------------------------------------------------------------------\nRan 5 tests in 0.003s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport heapq\nimport random\ndef task_func(k, list_length = 5, min_value = 0, max_value = 100):\n    rand_list = [random.randint(min_value, max_value) for _ in range(list_length)]\n    k_smallest = heapq.nsmallest(k, rand_list)\n    return (rand_list, k_smallest)\n```", "match": {"category": "success"}}
{"result": "```python\nfrom nltk.tokenize import word_tokenize\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport pandas as pd\n\ndef task_func(documents):\n    # Define a tokenizer that uses nltk's word_tokenize\n    def nltk_tokenizer(text):\n        return word_tokenize(text)\n    \n    vectorizer = TfidfVectorizer(tokenizer=nltk_tokenizer)\n    tfidf_matrix = vectorizer.fit_transform(documents)\n    df = pd.DataFrame(tfidf_matrix.toarray(), columns=vectorizer.get_feature_names_out())\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport collections\nfrom queue import PriorityQueue\nimport random\n# Constants\nLETTERS = ['a', 'b', 'c', 'd', 'e']\ndef task_func(string_length=100):\n    random_str = ''.join(random.choices(LETTERS, k=string_length))\n    freq = collections.Counter(random_str)\n    # Use PriorityQueue to sort by frequency descending\n    pq = PriorityQueue()\n    for letter, count in freq.items():\n        pq.put((-count, letter))  # Negative count for descending order\n    ordered_freq = collections.OrderedDict()\n    while not pq.empty():\n        count, letter = pq.get()\n        ordered_freq[letter] = -count\n    return ordered_freq\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport os\nimport glob\nfrom pathlib import Path\ndef task_func(pattern, directory, extensions):\n    regex = re.compile(pattern, re.IGNORECASE)\n    matched_files = []\n    directory = Path(directory).resolve()\n    for ext in extensions:\n        for file_path in directory.rglob(f\"*{ext}\"):\n            try:\n                with file_path.open(\"r\", encoding=\"utf-8\") as f:\n                    content = f.read()\n                if regex.search(content):\n                    matched_files.append(str(file_path))\n            except (UnicodeDecodeError, PermissionError):\n                continue\n    return matched_files\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 31, in test_case_1\n  File \"<bigcode>\", line 11, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/pathlib.py\", line 1046, in rglob\n    selector = _make_selector((\"**\",) + tuple(pattern_parts), self._flavour)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/pathlib.py\", line 379, in _make_selector\n    return cls(pat, child_parts, flavour)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/pathlib.py\", line 466, in __init__\n    _Selector.__init__(self, child_parts, flavour)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/pathlib.py\", line 392, in __init__\n    self.successor = _make_selector(child_parts, flavour)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/pathlib.py\", line 374, in _make_selector\n    raise ValueError(\"Invalid pattern: '**' can only be an entire path component\")\nValueError: Invalid pattern: '**' can only be an entire path component\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 36, in test_case_2\n  File \"<bigcode>\", line 11, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/pathlib.py\", line 1046, in rglob\n    selector = _make_selector((\"**\",) + tuple(pattern_parts), self._flavour)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/pathlib.py\", line 379, in _make_selector\n    return cls(pat, child_parts, flavour)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/pathlib.py\", line 466, in __init__\n    _Selector.__init__(self, child_parts, flavour)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/pathlib.py\", line 392, in __init__\n    self.successor = _make_selector(child_parts, flavour)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/pathlib.py\", line 374, in _make_selector\n    raise ValueError(\"Invalid pattern: '**' can only be an entire path component\")\nValueError: Invalid pattern: '**' can only be an entire path component\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 41, in test_case_3\n  File \"<bigcode>\", line 11, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/pathlib.py\", line 1046, in rglob\n    selector = _make_selector((\"**\",) + tuple(pattern_parts), self._flavour)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/pathlib.py\", line 379, in _make_selector\n    return cls(pat, child_parts, flavour)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/pathlib.py\", line 466, in __init__\n    _Selector.__init__(self, child_parts, flavour)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/pathlib.py\", line 392, in __init__\n    self.successor = _make_selector(child_parts, flavour)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/pathlib.py\", line 374, in _make_selector\n    raise ValueError(\"Invalid pattern: '**' can only be an entire path component\")\nValueError: Invalid pattern: '**' can only be an entire path component\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 46, in test_case_4\n  File \"<bigcode>\", line 11, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/pathlib.py\", line 1046, in rglob\n    selector = _make_selector((\"**\",) + tuple(pattern_parts), self._flavour)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/pathlib.py\", line 379, in _make_selector\n    return cls(pat, child_parts, flavour)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/pathlib.py\", line 466, in __init__\n    _Selector.__init__(self, child_parts, flavour)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/pathlib.py\", line 392, in __init__\n    self.successor = _make_selector(child_parts, flavour)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/pathlib.py\", line 374, in _make_selector\n    raise ValueError(\"Invalid pattern: '**' can only be an entire path component\")\nValueError: Invalid pattern: '**' can only be an entire path component\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 51, in test_case_5\n  File \"<bigcode>\", line 11, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/pathlib.py\", line 1046, in rglob\n    selector = _make_selector((\"**\",) + tuple(pattern_parts), self._flavour)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/pathlib.py\", line 379, in _make_selector\n    return cls(pat, child_parts, flavour)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/pathlib.py\", line 466, in __init__\n    _Selector.__init__(self, child_parts, flavour)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/pathlib.py\", line 392, in __init__\n    self.successor = _make_selector(child_parts, flavour)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/pathlib.py\", line 374, in _make_selector\n    raise ValueError(\"Invalid pattern: '**' can only be an entire path component\")\nValueError: Invalid pattern: '**' can only be an entire path component\n\n----------------------------------------------------------------------\nRan 5 tests in 0.006s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nCOLORS = ['r', 'g', 'b']\n\ndef task_func(df, group_col, value_col):\n    # Check if value_col contains numeric data\n    if not np.issubdtype(df[value_col].dtype, np.number):\n        raise TypeError(f\"Column '{value_col}' contains non-numeric values.\")\n    \n    groups = df[group_col].unique()\n    means = []\n    stds = []\n    \n    for g in groups:\n        values = df.loc[df[group_col] == g, value_col]\n        means.append(values.mean())\n        stds.append(values.std())\n    \n    x = np.arange(len(groups))\n    fig, ax = plt.subplots()\n    for idx, (mean, std) in enumerate(zip(means, stds)):\n        color = COLORS[idx % len(COLORS)]\n        ax.bar(x[idx], mean, yerr=std, color=color, capsize=5)\n    \n    ax.set_xticks(x)\n    ax.set_xticklabels(groups)\n    ax.set_xlabel(group_col)\n    ax.set_ylabel(value_col)\n    ax.set_title(f\"Bar chart of {value_col} by {group_col}\")\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport random\nimport string\nfrom matplotlib import pyplot as plt\n\ndef task_func(elements, seed=100):\n    random.seed(seed)\n    formatted_elements = []\n    all_chars = []\n\n    for _ in elements:\n        rand_str = ''.join(random.choices(string.ascii_letters + string.digits, k=5))\n        formatted = f\"% {rand_str}%\"\n        formatted_elements.append(formatted)\n        all_chars.extend(formatted)\n\n    char_counts = {}\n    for ch in all_chars:\n        char_counts[ch] = char_counts.get(ch, 0) + 1\n\n    fig, ax = plt.subplots()\n    ax.bar(char_counts.keys(), char_counts.values())\n    ax.set_title('Character Occurrence Histogram')\n    ax.set_xlabel('Characters')\n    ax.set_ylabel('Counts')\n\n    return formatted_elements, ax, char_counts\n```", "match": {"category": "success"}}
{"result": "```python\nimport json\nimport urllib.parse\nimport hmac\nimport hashlib\ndef task_func(req_data, secret_key):\n    if not isinstance(req_data, dict):\n        raise TypeError(\"req_data must be a dictionary\")\n    message = json.dumps(req_data, separators=(',', ':'), sort_keys=True).encode()\n    key = secret_key.encode()\n    signature = hmac.new(key, message, hashlib.sha256).digest()\n    url_encoded = urllib.parse.quote_plus(signature.hex())\n    return url_encoded.replace(' ', '+')\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_complex_data_structure (builtins.TestCases)\nCheck the function's behavior with complex nested data structures.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 35, in test_complex_data_structure\nAssertionError: 'bf33633ccf6a502336f732a9a205cbee905d660721bc0bcf4129f0887b7b454d' != 'a6dbaeed964fde5e658ae00228791306490239e588d6bdcec5a085d35be8ce92'\n- bf33633ccf6a502336f732a9a205cbee905d660721bc0bcf4129f0887b7b454d\n+ a6dbaeed964fde5e658ae00228791306490239e588d6bdcec5a085d35be8ce92\n\n\n======================================================================\nFAIL: test_consistent_hash_with_same_input (builtins.TestCases)\nTest that hashing the same data multiple times results in the same hashes.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 57, in test_consistent_hash_with_same_input\nAssertionError: '62e0334fffe372e7fadafd19f117be6070de5934d1fe45c9671509aac9b39341' != '2dc2c067314cf643a93c27c5ffe30b951b0996441650cd8616aede3f0e4542bb'\n- 62e0334fffe372e7fadafd19f117be6070de5934d1fe45c9671509aac9b39341\n+ 2dc2c067314cf643a93c27c5ffe30b951b0996441650cd8616aede3f0e4542bb\n\n\n======================================================================\nFAIL: test_different_data_different_signatures (builtins.TestCases)\nTest that different data results in different HMAC signatures.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 48, in test_different_data_different_signatures\nAssertionError: '2b9280489b325185743a0caca2351d0c0a4aac8312b060b57f8cc28499079b7b' != 'e14e6a908a6bc549661786f5d7fe91f826183daa4262f8cc930ea52345a14fdf'\n- 2b9280489b325185743a0caca2351d0c0a4aac8312b060b57f8cc28499079b7b\n+ e14e6a908a6bc549661786f5d7fe91f826183daa4262f8cc930ea52345a14fdf\n\n\n======================================================================\nFAIL: test_known_data_signature (builtins.TestCases)\nValidate the HMAC signature against a known output for specific data.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_known_data_signature\nAssertionError: '36d34f84f9c3fd8a105f15d89614261beacb27b27f2b84523a4c21b115adb588' != '2260ffaebd93cab1dc4f29884757ac15329812c0fbafcc54ae1e89617a3c9d7d'\n- 36d34f84f9c3fd8a105f15d89614261beacb27b27f2b84523a4c21b115adb588\n+ 2260ffaebd93cab1dc4f29884757ac15329812c0fbafcc54ae1e89617a3c9d7d\n\n\n----------------------------------------------------------------------\nRan 7 tests in 0.003s\n\nFAILED (failures=4)"}}
{"result": "```python\nimport json\nimport hashlib\nimport blake3\ndef task_func(req_data):\n    # Serialize request data to JSON string\n    json_data = json.dumps(req_data, sort_keys=True).encode('utf-8')\n    # Compute BLAKE3 hash\n    blake3_hash = blake3.blake3(json_data).hexdigest()\n    # Compute MD5 hash of the BLAKE3 hex digest\n    md5_hash = hashlib.md5(blake3_hash.encode('utf-8')).hexdigest()\n    return blake3_hash, md5_hash\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef task_func(df, col):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df must be a pandas DataFrame.\")\n    if df.empty:\n        raise ValueError(\"The input DataFrame must not be empty.\")\n    if col not in df.columns:\n        raise ValueError(f\"The specified column '{col}' is not in the DataFrame.\")\n    \n    fig, axes = plt.subplots(2, 1, figsize=(8, 6), gridspec_kw={'height_ratios': [3, 1]})\n    \n    if pd.api.types.is_numeric_dtype(df[col]):\n        sns.histplot(df[col].dropna(), kde=True, ax=axes[0])\n    else:\n        sns.histplot(df[col].dropna(), kde=False, ax=axes[0])\n    \n    sns.boxplot(x=df[col], ax=axes[1])\n    \n    axes[0].set_title(f'Histogram of {col}')\n    axes[1].set_title(f'Box Plot of {col}')\n    \n    plt.tight_layout()\n    return fig\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_categorical_data (builtins.TestCases)\nTest with categorical data for count plot and strip plot\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_categorical_data\nAssertionError: False is not true\n\n----------------------------------------------------------------------\nRan 5 tests in 0.283s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport string\nimport random\nimport re\ndef task_func(elements, pattern, seed=100):\n    random.seed(seed)\n    formatted_elements = []\n    for elem in elements:\n        replaced = ''.join(random.choice(string.printable.rstrip()) for _ in elem)\n        formatted = f\"%{replaced}%\"\n        formatted_elements.append(formatted)\n    concat_str = ''.join(formatted_elements)\n    match = re.search(pattern, concat_str) is not None\n    return formatted_elements, match\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\n# Constants for pie chart colors\nCOLORS = ['r', 'g', 'b', 'y', 'm']\ndef task_func(df, col, title=None):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a pandas DataFrame.\")\n    if df.empty:\n        raise ValueError(\"Input DataFrame must not be empty.\")\n    if col not in df.columns:\n        raise ValueError(f\"Column '{col}' not found in DataFrame.\")\n    \n    counts = df[col].value_counts()\n    colors = [COLORS[i % len(COLORS)] for i in range(len(counts))]\n    \n    fig, ax = plt.subplots()\n    ax.pie(counts, labels=counts.index, colors=colors, autopct='%1.1f%%')\n    if title:\n        ax.set_title(title)\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport shutil\ndef task_func(src_folder, backup_dir):\n    if not os.path.exists(src_folder) or not os.path.isdir(src_folder):\n        raise ValueError(\"Source folder does not exist.\")\n    try:\n        if not os.path.exists(backup_dir):\n            os.makedirs(backup_dir)\n        backup_path = os.path.join(backup_dir, os.path.basename(src_folder))\n        if os.path.exists(backup_path):\n            shutil.rmtree(backup_path)\n        shutil.copytree(src_folder, backup_path)\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        raise Exception(\"Error deleting source folder.\") from e\n    return False\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 45, in test_case_5\nAssertionError: FileExistsError not raised\n\n----------------------------------------------------------------------\nRan 5 tests in 0.003s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef task_func(df, col1, col2):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame.\")\n    if df.empty:\n        raise ValueError(\"Input DataFrame is empty.\")\n    if col1 not in df.columns or col2 not in df.columns:\n        raise ValueError(f\"DataFrame must contain columns '{col1}' and '{col2}'.\")\n    if not pd.api.types.is_numeric_dtype(df[col1]) or not pd.api.types.is_numeric_dtype(df[col2]):\n        raise TypeError(\"Both columns must be numeric type.\")\n    \n    ax = sns.regplot(data=df, x=col1, y=col2)\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport subprocess\nimport os\nimport sys\nimport time\n\ndef task_func(script_path, wait=True, *args):\n    if not os.path.isfile(script_path):\n        raise ValueError(f\"Script does not exist: {script_path}\")\n\n    cmd = [sys.executable, script_path] + list(args)\n    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n\n    if not wait:\n        return None\n\n    stdout, stderr = proc.communicate()\n\n    if proc.returncode != 0:\n        raise subprocess.CalledProcessError(proc.returncode, cmd, output=stdout, stderr=stderr)\n\n    return proc.returncode\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 44, in test_case_2\n  File \"<bigcode>\", line 20, in task_func\nsubprocess.CalledProcessError: Command '['/home/yewei/miniconda3/envs/llm/bin/python', '/tmp/tmpgsenlt72/test/script2.py']' returned non-zero exit status 1.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.078s\n\nFAILED (errors=1)"}}
{"result": "```python\nimport pandas as pd\nimport re\nimport numpy as np\n# Constants\nPATTERN = r\"([a-fA-F\\d]{32})\"\ndef task_func(df, column):\n    if column not in df.columns:\n        raise KeyError(f\"Column '{column}' not found in DataFrame\")\n    all_matches = []\n    pattern = re.compile(PATTERN)\n    for val in df[column].dropna().astype(str):\n        all_matches.extend(pattern.findall(val))\n    return pd.Series(all_matches).value_counts()\n```", "match": {"category": "success"}}
{"result": "```python\nimport subprocess\nimport os\nimport signal\nimport time\ndef task_func(process_name: str) -> int:\n    # Get list of all processes with the given name\n    try:\n        # 'pgrep' returns PIDs of processes matching the name\n        proc = subprocess.run(['pgrep', '-f', process_name], stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, text=True)\n        pids = proc.stdout.strip().split('\\n') if proc.stdout.strip() else []\n    except Exception:\n        pids = []\n\n    count = 0\n    for pid_str in pids:\n        if not pid_str.isdigit():\n            continue\n        pid = int(pid_str)\n        try:\n            os.kill(pid, signal.SIGTERM)\n            count += 1\n        except ProcessLookupError:\n            # Process no longer exists\n            pass\n        except PermissionError:\n            # No permission to kill this process\n            pass\n\n    if count > 0:\n        time.sleep(1)\n    return count\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 12, in test_case_1\nAssertionError: 620 != 3\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 28, in test_case_3\nAssertionError: 4 != 2\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 36, in test_case_4\nAssertionError: 0 != 1\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 44, in test_case_5\nAssertionError: 8 != 4\n\n----------------------------------------------------------------------\nRan 5 tests in 3.433s\n\nFAILED (failures=4)"}}
{"result": "```python\nimport pandas as pd\nimport random\n\ndef task_func(product_list, categories):\n    data = []\n    for product, category in zip(product_list, categories):\n        quantity_sold = random.randint(1, 100)\n        price_per_unit = random.randint(10, 100)\n        revenue = quantity_sold * price_per_unit\n        data.append({\n            'Product': product,\n            'Category': category,\n            'Quantity Sold': quantity_sold,\n            'Revenue': revenue\n        })\n    return pd.DataFrame(data)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 34, in test_case_4\nAssertionError: 5 != 10\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 41, in test_case_5\nAssertionError: 5 != 20\n\n----------------------------------------------------------------------\nRan 5 tests in 0.006s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport subprocess\nimport os\nimport shutil\nfrom glob import glob\ndef task_func(src_folder, dst_folder):\n    if not os.path.isdir(src_folder):\n        return {'success': False, 'message': f\"Source folder '{src_folder}' does not exist.\", 'failed_files': []}\n    if not os.path.isdir(dst_folder):\n        try:\n            os.makedirs(dst_folder)\n        except Exception as e:\n            return {'success': False, 'message': f\"Failed to create destination folder '{dst_folder}': {e}\", 'failed_files': []}\n\n    files = [f for f in glob(os.path.join(src_folder, '*')) if os.path.isfile(f)]\n    failed_files = []\n\n    for file_path in files:\n        filename = os.path.basename(file_path)\n        # Compress using gzip command in background.\n        cmd = ['gzip', '-kf', file_path]  # -k to keep original file, -f to force overwrite if exists\n        proc = subprocess.Popen(cmd)\n        proc.wait()\n        if proc.returncode != 0:\n            failed_files.append(filename)\n            continue\n\n        gz_file = file_path + '.gz'\n        if not os.path.isfile(gz_file):\n            failed_files.append(filename)\n            continue\n\n        # Move compressed file to destination folder\n        dest_path = os.path.join(dst_folder, os.path.basename(gz_file))\n        try:\n            shutil.move(gz_file, dest_path)\n        except Exception:\n            failed_files.append(filename)\n            # Clean up gz_file if move failed\n            if os.path.isfile(gz_file):\n                os.remove(gz_file)\n\n    success = len(failed_files) == 0\n    msg = \"All files compressed and moved successfully.\" if success else f\"Failed to process files: {', '.join(failed_files)}\"\n    return {'success': success, 'message': msg, 'failed_files': failed_files}\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_2 (builtins.TestCases)\nTest non-existent source folder.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 44, in test_case_2\nAssertionError: ValueError not raised\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\nTest non-existent destination folder.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 49, in test_case_3\nAssertionError: ValueError not raised\n\n----------------------------------------------------------------------\nRan 5 tests in 0.026s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport pandas as pd\nimport random\ndef task_func(product_list, categories, min_value = 10, max_value = 100):\n    data = []\n    for product in product_list:\n        category = random.choice(categories)\n        quantity_sold = random.randint(min_value, max_value)\n        price_per_unit = round(random.uniform(5.0, 100.0), 2)\n        revenue = round(quantity_sold * price_per_unit, 2)\n        data.append({\n            'Product': product,\n            'Category': category,\n            'Quantity Sold': quantity_sold,\n            'Revenue': revenue\n        })\n    df = pd.DataFrame(data, columns=['Product', 'Category', 'Quantity Sold', 'Revenue'])\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_6 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 51, in test_case_6\nAssertionError: 88.5 != 100\n\n----------------------------------------------------------------------\nRan 6 tests in 0.008s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pandas as pd\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n\ndef task_func(text_dict, word_keys, top_k=2):\n    if top_k < 0:\n        raise ValueError(\"top_k must be a non-negative integer\")\n    \n    # Calculate frequencies for provided word_keys\n    freq_dict = {word: text_dict.get(word, 0) for word in word_keys}\n    \n    # Get top_k most common words from text_dict\n    counter = Counter(text_dict)\n    most_common = dict(counter.most_common(top_k))\n    \n    # Prepare data for bar chart\n    words = list(freq_dict.keys())\n    frequencies = list(freq_dict.values())\n    \n    fig, ax = plt.subplots()\n    ax.bar(words, frequencies)\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Word Frequencies')\n    \n    return ax, most_common\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 9, in test_case_1\nAttributeError: 'list' object has no attribute 'tolist'\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 16, in test_case_2\nAttributeError: 'list' object has no attribute 'tolist'\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 22, in test_case_3\nAttributeError: 'list' object has no attribute 'tolist'\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_case_4\nAttributeError: 'list' object has no attribute 'tolist'\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 35, in test_case_5\nAttributeError: 'list' object has no attribute 'tolist'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.090s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport pandas as pd\nimport random\ndef task_func(product_list, categories, min_value = 10, max_value = 100):\n    data = []\n    for product in product_list:\n        category = random.choice(categories)\n        quantity_sold = random.randint(min_value, max_value)\n        revenue = round(random.uniform(1.0, 100.0), 2)\n        total_revenue = round(quantity_sold * revenue, 2)\n        data.append({\n            'Product': product,\n            'Category': category,\n            'Quantity Sold': quantity_sold,\n            'Revenue': revenue,\n            'Total Revenue': total_revenue\n        })\n    df = pd.DataFrame(data)\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_6 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 51, in test_case_6\nAssertionError: 50.1 != 100\n\n======================================================================\nFAIL: test_case_8 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 66, in test_case_8\nAssertionError: 5868.45 != 5868.450000000001\n\n----------------------------------------------------------------------\nRan 8 tests in 0.010s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport collections\nimport matplotlib.pyplot as plt\nimport pandas as pd\n# Constants\nWORDS = ['the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'I']\ndef task_func(sentences_dict, word_keys):\n    # Count occurrences of specified words in the sentences\n    counter = collections.Counter()\n    for key in word_keys:\n        sentence = sentences_dict.get(key, \"\")\n        words = sentence.lower().split()\n        counter.update(w for w in words if w in WORDS)\n    # Create a pandas Series for plotting\n    freqs = pd.Series({w: counter[w] for w in WORDS})\n    # Plot bar chart\n    fig, ax = plt.subplots()\n    freqs.plot(kind='bar', ax=ax)\n    ax.set_xlabel('Word')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Word Frequency in Sentences')\n    plt.tight_layout()\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 15, in test_case_1\nAssertionError: Lists differ: ['the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'I'] != ['the', 'dog']\n\nFirst differing element 1:\n'be'\n'dog'\n\nFirst list contains 8 additional elements.\nFirst extra element 2:\n'to'\n\n- ['the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'I']\n+ ['the', 'dog']\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 30, in test_case_2\nAssertionError: Lists differ: ['the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'I'] != ['apple', 'orange', 'banana']\n\nFirst differing element 0:\n'the'\n'apple'\n\nFirst list contains 7 additional elements.\nFirst extra element 3:\n'of'\n\n- ['the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'I']\n+ ['apple', 'orange', 'banana']\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 45, in test_case_3\nAssertionError: Lists differ: ['the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'I'] != ['cat', 'mouse', 'dog']\n\nFirst differing element 0:\n'the'\n'cat'\n\nFirst list contains 7 additional elements.\nFirst extra element 3:\n'of'\n\n- ['the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'I']\n+ ['cat', 'mouse', 'dog']\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 59, in test_case_4\nAssertionError: Lists differ: ['the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'I'] != ['sun', 'stars', 'moon']\n\nFirst differing element 0:\n'the'\n'sun'\n\nFirst list contains 7 additional elements.\nFirst extra element 3:\n'of'\n\n- ['the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'I']\n+ ['sun', 'stars', 'moon']\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 73, in test_case_5\nAssertionError: Lists differ: ['the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'I'] != ['car', 'bus', 'bike']\n\nFirst differing element 0:\n'the'\n'car'\n\nFirst list contains 7 additional elements.\nFirst extra element 3:\n'of'\n\n- ['the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'I']\n+ ['car', 'bus', 'bike']\n\n----------------------------------------------------------------------\nRan 5 tests in 0.367s\n\nFAILED (failures=5)"}}
{"result": "```python\nimport numpy as np\nimport math\nimport matplotlib.pyplot as plt\nfrom scipy.signal import get_window\n\ndef task_func(amplitude, frequency, time):\n    window = get_window('hann', len(time))\n    wave = amplitude * (np.cos(2 * np.pi * frequency * time) + 1j * np.sin(2 * np.pi * frequency * time))\n    wave_windowed = wave * window\n\n    fig, ax = plt.subplots()\n    ax.plot(time, wave_windowed.real, label='Real (Cosine)')\n    ax.plot(time, wave_windowed.imag, label='Imaginary (Sine)')\n    ax.set_title(\"Complex Wave with Hann Window\")\n    ax.set_xlabel(\"Time\")\n    ax.set_ylabel(\"Amplitude\")\n    ax.legend()\n    \n    return wave_windowed, fig, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport cmath\ndef task_func(x, y):\n    if not isinstance(x, np.ndarray) or not isinstance(y, np.ndarray):\n        raise TypeError(\"Both x and y must be numpy.ndarray\")\n    if x.shape != y.shape:\n        raise ValueError(\"x and y must have the same shape\")\n\n    X, Y = np.meshgrid(x, y)\n    \n    Z = X + 1j*Y\n    phase = np.angle(Z)\n\n    fig, ax = plt.subplots()\n    c = ax.imshow(phase, extent=(x.min(), x.max(), y.min(), y.max()), origin='lower', cmap='hsv')\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_title('Phase of complex function f(x,y) = x + iy')\n    fig.colorbar(c, ax=ax, label='Phase (radians)')\n    \n    return ax, phase\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_empty_arrays (builtins.TestCases)\nTest function with empty numpy arrays.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_empty_arrays\n  File \"<bigcode>\", line 17, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/numpy/core/_methods.py\", line 44, in _amin\n    return umr_minimum(a, axis, None, out, keepdims, initial, where)\nValueError: zero-size array to reduction operation minimum which has no identity\n\n======================================================================\nFAIL: test_phase_calculation (builtins.TestCases)\nTest phase calculation for known values.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_phase_calculation\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/numpy/testing/_private/utils.py\", line 1046, in assert_array_almost_equal\n    assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/numpy/testing/_private/utils.py\", line 844, in assert_array_compare\n    raise AssertionError(msg)\nAssertionError: \nArrays are not almost equal to 6 decimals\n\nMismatched elements: 1 / 2 (50%)\nMax absolute difference: 3.14159265\nMax relative difference: inf\n x: array([0.      , 3.141593])\n y: array([0., 0.])\n\n----------------------------------------------------------------------\nRan 5 tests in 0.088s\n\nFAILED (failures=1, errors=1)"}}
{"result": "```python\nimport numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\ndef task_func(x):\n    if not isinstance(x, np.ndarray):\n        raise TypeError(\"x must be a numpy.ndarray\")\n    \n    real_part = norm.pdf(x, loc=0, scale=1)\n    imag_part = norm.pdf(x, loc=2, scale=2)\n    complex_dist = real_part + 1j * imag_part\n    \n    plt.plot(x, real_part, label='Real part (N(0,1))')\n    plt.plot(x, imag_part, label='Imaginary part (N(2,2))')\n    plt.title('Gaussian Components of Complex Distribution')\n    plt.xlabel('x')\n    plt.ylabel('Probability Density')\n    plt.legend()\n    plt.grid(True)\n    plt.show()\n    \n    return complex_dist\n```", "match": {"category": "success"}}
{"result": "```python\nimport itertools\nimport json\ndef task_func(json_list, r):\n    try:\n        data = json.loads(json_list)\n    except json.JSONDecodeError:\n        raise Exception(\"Invalid JSON input\")\n    if not data or 'number_list' not in data:\n        raise Exception(\"'number_list' key not found or JSON is empty\")\n    number_list = data['number_list']\n    if not isinstance(number_list, list):\n        raise Exception(\"'number_list' is not a list\")\n    return list(itertools.combinations(number_list, r))\n```", "match": {"category": "success"}}
{"result": "```python\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(data_dict, data_keys):\n    x = data_dict[data_keys[0]]\n    y = data_dict[data_keys[1]]\n    \n    corr_coef, _ = stats.pearsonr(x, y)\n    \n    fig, ax = plt.subplots()\n    ax.scatter(x, y)\n    ax.set_xlabel(data_keys[0])\n    ax.set_ylabel(data_keys[1])\n    ax.set_title(f'Scatter plot with correlation coefficient: {corr_coef:.2f}')\n    \n    return corr_coef, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\ndef task_func(file_location, sheet_name):\n    if not os.path.isfile(file_location):\n        raise FileNotFoundError(f\"No such file: '{file_location}'\")\n    try:\n        df = pd.read_excel(file_location, sheet_name=sheet_name)\n    except ValueError as e:\n        if f\"Worksheet named '{sheet_name}' not found\" in str(e):\n            raise ValueError(f\"Sheet '{sheet_name}' does not exist in the workbook\")\n        else:\n            raise\n\n    # Calculate mean and std dev for each column (numerical only)\n    means = df.mean(numeric_only=True)\n    stds = df.std(numeric_only=True)\n\n    data_dict = {col: {'mean': means[col], 'std': stds[col]} for col in means.index}\n\n    # Prepare data for plotting\n    labels = list(means.index)\n    mean_values = means.values\n    std_values = stds.values\n\n    x = np.arange(len(labels))\n    width = 0.35\n\n    fig, ax = plt.subplots(figsize=(10,6))\n    bars1 = ax.bar(x - width/2, mean_values, width, label='Mean')\n    bars2 = ax.bar(x + width/2, std_values, width, label='Std Dev')\n\n    ax.set_title('Mean and Standard Deviation')\n    ax.set_xlabel('Columns')\n    ax.set_ylabel('Values')\n    ax.set_xticks(x)\n    ax.set_xticklabels(labels, rotation=45, ha='right')\n    ax.legend()\n\n    plt.tight_layout()\n\n    return data_dict, fig\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_correct_mean_and_std_values (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 42, in test_correct_mean_and_std_values\nAssertionError: {'A':[19 chars]d': 14.142135623730951}, 'B': {'mean': 30.0, '[21 chars]951}} != {'A':[19 chars]d': 10.0}, 'B': {'mean': 30.0, 'std': 10.0}}\n+ {'A': {'mean': 20.0, 'std': 10.0}, 'B': {'mean': 30.0, 'std': 10.0}}\n- {'A': {'mean': 20.0, 'std': 14.142135623730951},\n-  'B': {'mean': 30.0, 'std': 14.142135623730951}}\n\n======================================================================\nFAIL: test_value (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 52, in test_value\nAssertionError: {'A':[19 chars]d': 10.0}, 'B': {'mean': 30.0, 'std': 10.0}} != {'A':[19 chars]d': 14.142135623730951}, 'B': {'mean': 30.0, '[21 chars]951}}\n- {'A': {'mean': 20.0, 'std': 10.0}, 'B': {'mean': 30.0, 'std': 10.0}}\n+ {'A': {'mean': 20.0, 'std': 14.142135623730951},\n+  'B': {'mean': 30.0, 'std': 14.142135623730951}}\n\n----------------------------------------------------------------------\nRan 6 tests in 0.579s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport pandas as pd\nimport logging\n# Set up basic configuration for logging\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\ndef task_func(sheet_name, excel_file_location=\"test.xlsx\", csv_file_location=\"test.csv\"):\n    try:\n        # Read Excel file\n        df = pd.read_excel(excel_file_location, sheet_name=sheet_name)\n    except FileNotFoundError as fnf_error:\n        logging.error(f\"File not found: {excel_file_location}\")\n        raise fnf_error\n    except ValueError as val_error:\n        # Typically raised when sheet_name not found\n        if f\"Worksheet named '{sheet_name}' not found\" in str(val_error):\n            logging.error(f\"Sheet name '{sheet_name}' not found in Excel file.\")\n            raise ValueError(f\"Sheet name '{sheet_name}' not found in Excel file.\") from val_error\n        else:\n            raise val_error\n    \n    # Save to CSV\n    df.to_csv(csv_file_location, index=False)\n    logging.info(f\"Data saved to CSV file: {csv_file_location}\")\n\n    # Read CSV for sum calculation\n    df_csv = pd.read_csv(csv_file_location)\n    \n    # Check for numeric data only or try to convert\n    try:\n        df_numeric = df_csv.apply(pd.to_numeric)\n    except Exception as e:\n        logging.error(\"The CSV file contains non-numeric data.\")\n        raise ValueError(\"The CSV file contains non-numeric data.\") from e\n\n    # Calculate sum of each column\n    column_sums = df_numeric.sum().to_dict()\n    \n    logging.info(\"Sum of each column calculated successfully.\")\n    return column_sums\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport os\ndef task_func(original_file_location=\"test.xlsx\", new_file_location=\"new_test.xlsx\", sheet_name=\"Sheet1\"):\n    if not os.path.exists(original_file_location):\n        raise FileNotFoundError(f\"The file {original_file_location} does not exist.\")\n\n    with pd.ExcelFile(original_file_location) as xls:\n        if sheet_name not in xls.sheet_names:\n            raise ValueError(f\"Sheet '{sheet_name}' does not exist in the workbook.\")\n        df = pd.read_excel(xls, sheet_name=sheet_name)\n\n    df.to_excel(new_file_location, index=False)\n\n    new_df = pd.read_excel(new_file_location)\n    return new_df\n```", "match": {"category": "success"}}
{"result": "```python\nfrom multiprocessing import Pool\nimport math\n\ndef calculate_factorial(number: int) -> tuple:\n    return number, math.factorial(number)\n    \ndef task_func(numbers: list) -> dict:\n    if not all(isinstance(n, int) and n >= 0 for n in numbers):\n        raise ValueError(\"All elements must be non-negative integers.\")\n    with Pool() as pool:\n        results = pool.map(calculate_factorial, numbers)\n    return dict(results)\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_large_numbers (builtins.TestCases)\nTest function with large numbers.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 22, in test_large_numbers\n  File \"<bigcode>\", line 12, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/pool.py\", line 367, in map\n    return self._map_async(func, iterable, mapstar, chunksize).get()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/pool.py\", line 774, in get\n    raise self._value\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/pool.py\", line 540, in _handle_tasks\n    put(task)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/connection.py\", line 206, in send\n    self._send_bytes(_ForkingPickler.dumps(obj))\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/reduction.py\", line 51, in dumps\n    cls(buf, protocol).dump(obj)\n_pickle.PicklingError: Can't pickle <function calculate_factorial at 0x78a3691c3a30>: attribute lookup calculate_factorial on __main__ failed\n\n======================================================================\nERROR: test_return_type (builtins.TestCases)\nTest that the function returns a dictionary.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 6, in test_return_type\n  File \"<bigcode>\", line 12, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/pool.py\", line 367, in map\n    return self._map_async(func, iterable, mapstar, chunksize).get()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/pool.py\", line 774, in get\n    raise self._value\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/pool.py\", line 540, in _handle_tasks\n    put(task)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/connection.py\", line 206, in send\n    self._send_bytes(_ForkingPickler.dumps(obj))\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/reduction.py\", line 51, in dumps\n    cls(buf, protocol).dump(obj)\n_pickle.PicklingError: Can't pickle <function calculate_factorial at 0x78a3691c3a30>: attribute lookup calculate_factorial on __main__ failed\n\n======================================================================\nERROR: test_single_element (builtins.TestCases)\nTest function with a single-element list.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 14, in test_single_element\n  File \"<bigcode>\", line 12, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/pool.py\", line 367, in map\n    return self._map_async(func, iterable, mapstar, chunksize).get()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/pool.py\", line 774, in get\n    raise self._value\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/pool.py\", line 540, in _handle_tasks\n    put(task)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/connection.py\", line 206, in send\n    self._send_bytes(_ForkingPickler.dumps(obj))\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/reduction.py\", line 51, in dumps\n    cls(buf, protocol).dump(obj)\n_pickle.PicklingError: Can't pickle <function calculate_factorial at 0x78a3691c3a30>: attribute lookup calculate_factorial on __main__ failed\n\n======================================================================\nERROR: test_very_large_number (builtins.TestCases)\nTest function with a very large number to check for performance or overflow issues.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 31, in test_very_large_number\n  File \"<bigcode>\", line 12, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/pool.py\", line 367, in map\n    return self._map_async(func, iterable, mapstar, chunksize).get()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/pool.py\", line 774, in get\n    raise self._value\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/pool.py\", line 540, in _handle_tasks\n    put(task)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/connection.py\", line 206, in send\n    self._send_bytes(_ForkingPickler.dumps(obj))\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/multiprocessing/reduction.py\", line 51, in dumps\n    cls(buf, protocol).dump(obj)\n_pickle.PicklingError: Can't pickle <function calculate_factorial at 0x78a3691c3a30>: attribute lookup calculate_factorial on __main__ failed\n\n----------------------------------------------------------------------\nRan 7 tests in 5.234s\n\nFAILED (errors=4)"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n# Constants\nFEATURES = ['feature '+str(i) for i in range(1, 11)]\nTARGET = 'target'\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a pandas DataFrame\")\n    X = df[FEATURES]\n    y = df[TARGET]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model\n```", "match": {"category": "success"}}
{"result": "```python\nfrom collections import Counter\nimport json\nimport random\n# Constants\nWORDS = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew']\ndef task_func(n, file_name, seed=77):\n    random.seed(seed)\n    selected_words = random.choices(WORDS, k=n)\n    counts = Counter(selected_words)\n    with open(file_name, 'w') as f:\n        json.dump(counts, f)\n    return file_name\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 23, in test_case_2\nAssertionError: 3 != 5\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 33, in test_case_3\nAssertionError: ValueError not raised\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 38, in test_case_4\nAssertionError: ValueError not raised\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 52, in test_case_5\nAssertionError: 6 != 8\n\n----------------------------------------------------------------------\nRan 5 tests in 0.001s\n\nFAILED (failures=4)"}}
{"result": "```python\nimport matplotlib.pyplot as plt\nimport random\n# Constants\nCOLORS = ['#00bfbf', '#000000', '#0000ff']\ndef task_func(number_list, bins):\n    fig, ax = plt.subplots()\n    color = random.choice(COLORS)\n    ax.hist(number_list, bins=bins, color=color)\n    ax.set_title('Histogram')\n    ax.set_xlabel('Number')\n    ax.set_ylabel('Frequency')\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nfrom datetime import datetime\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\ndef task_func(activities):\n    if not all(isinstance(act, datetime) for act in activities):\n        raise TypeError(\"If the activities are not datetime objects.\")\n    \n    day_counts = defaultdict(int)\n    days_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n    \n    for act in activities:\n        day_name = act.strftime('%A')\n        day_counts[day_name] += 1\n    \n    counts = [day_counts[day] for day in days_order]\n    \n    fig, ax = plt.subplots()\n    ax.bar(days_order, counts)\n    ax.set_xlabel('Day of the Week')\n    ax.set_ylabel('Number of Activities')\n    ax.set_title('Weekly Activity')\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    \n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport shutil\nimport random\ndef task_func(src_dir: str, dest_dir: str, seed:int = 100) -> str:\n    random.seed(seed)\n    files = [f for f in os.listdir(src_dir) if os.path.isfile(os.path.join(src_dir, f))]\n    if not files:\n        raise FileNotFoundError(\"No files found in the source directory.\")\n    chosen_file = random.choice(files)\n    shutil.move(os.path.join(src_dir, chosen_file), os.path.join(dest_dir, chosen_file))\n    return chosen_file\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(l):\n    mu, std = stats.norm.fit(l)\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(l, bins=30, density=True, alpha=0.6, color='g')\n    xmin, xmax = plt.xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = stats.norm.pdf(x, mu, std)\n    ax.plot(x, p, 'k', linewidth=2)\n    ax.set_title(f\"Fit results: mu = {mu:.2f},  std = {std:.2f}\")\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport re\nimport json\nimport glob\ndef task_func(directory_path: str) -> list:\n    if not os.path.isdir(directory_path):\n        raise FileNotFoundError(f\"Directory not found: {directory_path}\")\n\n    processed_files = []\n    json_files = glob.glob(os.path.join(directory_path, \"*.json\"))\n\n    for file_path in json_files:\n        with open(file_path, \"r\", encoding=\"utf-8\") as f:\n            try:\n                data = json.load(f)\n            except json.JSONDecodeError:\n                # Skip files that are not valid JSON\n                continue\n\n        # Dump JSON content to string with compact separators\n        json_str = json.dumps(data, separators=(\",\", \":\"))\n\n        # Escape double quotes by prepending double backslash\n        # Each original double quote \" becomes \\\\\" (two backslashes + one quote)\n        modified_str = json_str.replace('\"', r'\\\\\\\"')\n\n        with open(file_path, \"w\", encoding=\"utf-8\") as f:\n            f.write(modified_str)\n\n        processed_files.append(os.path.basename(file_path))\n\n    return processed_files\n```", "match": {"category": "success"}}
{"result": "```python\nfrom sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\ndef task_func(l):\n    scaler = MinMaxScaler()\n    scaled = scaler.fit_transform(pd.DataFrame(l))\n    return pd.DataFrame(scaled, columns=['Scaled Values'])\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport glob\nfrom docx import Document\n\ndef task_func(directory_path: str) -> int:\n    files = glob.glob(f\"{directory_path}/*.docx\")\n    for file_path in files:\n        doc = Document(file_path)\n        for para in doc.paragraphs:\n            if '\"' in para.text:\n                para.text = re.sub(r'\"', r'\\\\\"', para.text)\n        for table in doc.tables:\n            for row in table.rows:\n                for cell in row.cells:\n                    for para in cell.paragraphs:\n                        if '\"' in para.text:\n                            para.text = re.sub(r'\"', r'\\\\\"', para.text)\n        doc.save(file_path)\n    return len(files)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 46, in test_case_3\nAssertionError: 'This is a \\\\\\\\\"sample\\\\\\\\\" text with double quotes already protected.' != 'This is a \\\\\"sample\\\\\" text with double quotes already protected.'\n- This is a \\\\\"sample\\\\\" text with double quotes already protected.\n?           -         -\n+ This is a \\\"sample\\\" text with double quotes already protected.\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.866s\n\nFAILED (failures=1)"}}
{"result": "```python\nfrom scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef task_func(l, x_data, plot=False):\n    def quadratic(x, a, b, c):\n        return a * x**2 + b * x + c\n\n    params, _ = curve_fit(quadratic, x_data, l)\n    fitted_values = quadratic(x_data, *params)\n\n    ax = None\n    if plot:\n        fig, ax = plt.subplots()\n        ax.scatter(x_data, l, label='Data')\n        ax.plot(x_data, fitted_values, color='red', label='Fitted curve')\n        ax.legend()\n        ax.set_xlabel('x')\n        ax.set_ylabel('y')\n        ax.set_title('Quadratic Curve Fit')\n    \n    return (params, fitted_values, ax)\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 7, in test_case_1\nValueError: too many values to unpack (expected 2)\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 16, in test_case_2\nValueError: too many values to unpack (expected 2)\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 37, in test_case_5\nAssertionError: 3 != 2\n\n----------------------------------------------------------------------\nRan 5 tests in 0.023s\n\nFAILED (failures=1, errors=2)"}}
{"result": "```python\nimport regex as re\nimport glob\nimport os\nfrom openpyxl import load_workbook\ndef task_func(directory_path='./xlsx_files/'):\n    files = glob.glob(os.path.join(directory_path, '*.xlsx'))\n    count = 0\n    pattern = re.compile(r'\"')\n    for file in files:\n        wb = load_workbook(file)\n        changed = False\n        for ws in wb.worksheets:\n            for row in ws.iter_rows():\n                for cell in row:\n                    if isinstance(cell.value, str):\n                        if '\"' in cell.value:\n                            cell.value = pattern.sub(r'\\\\\\\\\\\"', cell.value)\n                            changed = True\n        if changed:\n            wb.save(file)\n        count += 1\n    return count\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 67, in test_case_1\nAssertionError: 'This is a \\\\\\\\\\\\\"test\\\\\\\\\\\\\" string.' != 'This is a \\\\\"test\\\\\" string.'\n- This is a \\\\\\\"test\\\\\\\" string.\n?           --       --\n+ This is a \\\"test\\\" string.\n\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 88, in test_case_4\nAssertionError: FileNotFoundError not raised\n\n----------------------------------------------------------------------\nRan 5 tests in 0.069s\n\nFAILED (failures=2)"}}
{"result": "```python\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\n\ndef task_func(l):\n    pca = PCA(n_components=2)\n    components = pca.fit_transform(l)\n    fig, ax = plt.subplots()\n    ax.scatter(components[:, 0], components[:, 1])\n    ax.set_title(\"PCA Result\")\n    ax.set_xlabel(\"First Principal Component\")\n    ax.set_ylabel(\"Second Principal Component\")\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport nltk\nimport re\nfrom collections import Counter\n\n# Download stopwords if not already downloaded\nnltk.download('stopwords')\n\n# Constants\nSTOPWORDS = set(nltk.corpus.stopwords.words('english'))\n\ndef task_func(text):\n    # Remove punctuation and split text into words\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    # Filter out stopwords\n    filtered_words = [word for word in words if word not in STOPWORDS]\n    # Calculate frequency\n    freq = Counter(filtered_words)\n    return dict(freq)\n```", "match": {"category": "success"}}
{"result": "```python\nfrom texttable import Texttable\nimport os\nimport psutil\ndef task_func():\n    table = Texttable()\n    table.set_deco(Texttable.HEADER)\n    table.set_cols_align([\"l\", \"r\"])\n    table.set_cols_dtype([\"t\", \"f\"])\n    table.header([\"Item\", \"Value (%)\"])\n    \n    cpu = psutil.cpu_percent(interval=1)\n    mem = psutil.virtual_memory().percent\n    disk = psutil.disk_usage('/').percent\n    \n    table.add_rows([\n        [\"Item\", \"Value (%)\"],  # Header already set, but add_rows requires the header row too\n        [\"CPU Usage\", cpu],\n        [\"Memory Usage\", mem],\n        [\"Disk Usage\", disk]\n    ], True)\n    print(table.draw())\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_proper_values (builtins.TestCases)\nTest that the table's values are not empty or zero.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 17, in test_proper_values\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/re.py\", line 240, in findall\n    return _compile(pattern, flags).findall(string)\nTypeError: expected string or bytes-like object\n\n======================================================================\nERROR: test_table_headers (builtins.TestCases) (header='CPU Usage (%)')\nTest the presence of correct headers in the table.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_table_headers\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/case.py\", line 1109, in assertIn\n    if member not in container:\nTypeError: argument of type 'NoneType' is not iterable\n\n======================================================================\nERROR: test_table_headers (builtins.TestCases) (header='Memory Usage (%)')\nTest the presence of correct headers in the table.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_table_headers\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/case.py\", line 1109, in assertIn\n    if member not in container:\nTypeError: argument of type 'NoneType' is not iterable\n\n======================================================================\nERROR: test_table_headers (builtins.TestCases) (header='Disk Usage (%)')\nTest the presence of correct headers in the table.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_table_headers\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/case.py\", line 1109, in assertIn\n    if member not in container:\nTypeError: argument of type 'NoneType' is not iterable\n\n======================================================================\nERROR: test_table_structure (builtins.TestCases)\nTest that the table's structure is as expected.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 33, in test_table_structure\nAttributeError: 'NoneType' object has no attribute 'split'\n\n======================================================================\nERROR: test_value_ranges (builtins.TestCases)\nTest that CPU and memory usage percentages are within 0-100%.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_value_ranges\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/re.py\", line 240, in findall\n    return _compile(pattern, flags).findall(string)\nTypeError: expected string or bytes-like object\n\n======================================================================\nFAIL: test_return_type (builtins.TestCases)\nTest that the function returns a string.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_return_type\nAssertionError: None is not an instance of <class 'str'>\n\n----------------------------------------------------------------------\nRan 5 tests in 5.044s\n\nFAILED (failures=1, errors=6)"}}
{"result": "```python\nimport pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"Directory '{data_dir}' does not exist.\")\n    csv_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not csv_files:\n        raise ValueError(f\"No CSV files found in directory '{data_dir}'.\")\n    table = Texttable()\n    table.header(['File Name', 'Number of Rows', 'Number of Columns'])\n    for file in csv_files:\n        try:\n            df = pd.read_csv(file)\n        except pd.errors.EmptyDataError:\n            raise\n        table.add_row([os.path.basename(file), df.shape[0], df.shape[1]])\n    return table.draw()\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_normal_functionality (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 67, in test_normal_functionality\nAssertionError: '+-----------+------+---------+\\n|   File    | Rows | Columns[286 chars]---+' != '+-----------+----------------+-------------------+\\n| File N[298 chars]---+'\nDiff is 1004 characters long. Set self.maxDiff to None to see it.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.034s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\n# Constants\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\ndef task_func(length):\n    data = np.random.randn(length, len(COLUMNS))\n    df = pd.DataFrame(data, columns=COLUMNS)\n    # Record the data (e.g., save to CSV)\n    df.to_csv('random_data.csv', index=False)\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 30, in test_case_4\nAssertionError: False is not true : Data values should be between 0 and 99.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.013s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport re\nimport os\nimport shutil\ndef task_func(directory):\n    for entry in os.listdir(directory):\n        full_path = os.path.join(directory, entry)\n        if os.path.isfile(full_path):\n            # Extract extension without dot and in lowercase\n            ext = os.path.splitext(entry)[1].lower().lstrip('.')\n            if ext:\n                ext_dir = os.path.join(directory, ext)\n                if not os.path.exists(ext_dir):\n                    os.makedirs(ext_dir)\n                shutil.move(full_path, os.path.join(ext_dir, entry))\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport numpy as np\n\ndef task_func(file_path='arena.csv', target_column='Index', seed=42):\n    # Check if file exists\n    if not os.path.isfile(file_path):\n        raise FileNotFoundError(f\"File {file_path} does not exist.\")\n    \n    # Load data\n    df = pd.read_csv(file_path)\n    \n    # Check if target_column exists\n    if target_column not in df.columns:\n        raise ValueError(f\"Target column '{target_column}' not found in CSV columns.\")\n    \n    # Drop rows with any NaN values (handling missing values)\n    df = df.dropna(axis=0, how='any')\n    \n    # Check if any NaN remains (shouldn't), or any infinity or too large values for float32\n    if df.isna().any().any():\n        raise ValueError(\"Input data contains NaN values after dropping.\")\n    \n    if np.isinf(df.values).any():\n        raise ValueError(\"Input data contains infinity values.\")\n\n    # Check float32 range for all numeric columns\n    numeric_df = df.select_dtypes(include=[np.number])\n    float32_max = np.finfo(np.float32).max\n    float32_min = np.finfo(np.float32).min\n    if ((numeric_df > float32_max) | (numeric_df < float32_min)).any().any():\n        raise ValueError(\"Input data contains values too large for dtype('float32').\")\n    \n    # Separate features and target\n    X = df.drop(columns=[target_column])\n    y = df[target_column]\n    \n    # Convert X to numeric, raise error if conversion fails (non-numeric features)\n    try:\n        X = X.apply(pd.to_numeric)\n    except Exception:\n        raise ValueError(\"All feature columns must be numeric.\")\n    \n    # Convert y to numeric if possible or categorical (RandomForestClassifier accepts categorical)\n    # We attempt classification, so if y is numeric with many unique values, it might be problematic.\n    # We let RandomForestClassifier handle it.\n    try:\n        y = pd.to_numeric(y)\n    except Exception:\n        y = y.astype('category')\n    \n    # Train random forest\n    clf = RandomForestClassifier(random_state=seed)\n    clf.fit(X, y)\n    \n    importances = clf.feature_importances_\n    \n    # Plot feature importances\n    fig, ax = plt.subplots(figsize=(8, 6))\n    sns.barplot(x=importances, y=X.columns, ax=ax, palette=\"deep\")\n    ax.set_xlabel(\"Feature Importance\")\n    ax.set_ylabel(\"Feature\")\n    ax.set_title(f\"Random Forest Feature Importances predicting '{target_column}'\")\n    plt.tight_layout()\n    \n    return ax, importances\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\ndef task_func(length):\n    MU = 0\n    SIGMA = 1\n    data = np.random.normal(MU, SIGMA, length)\n    \n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(data, bins=30, density=True, alpha=0.6, color='g', edgecolor='black')\n    \n    x = np.linspace(bins[0], bins[-1], 1000)\n    pdf = norm.pdf(x, MU, SIGMA)\n    ax.plot(x, pdf, 'r-', lw=2)\n    \n    ax.set_title('Histogram and PDF of Normal Distribution')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Density')\n    \n    return data, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport seaborn as sns\nfrom collections import Counter\nfrom textblob import TextBlob\nfrom matplotlib import pyplot as plt\ndef task_func(text, n, top_k):\n    # Get n-grams using TextBlob\n    blob = TextBlob(text.lower())\n    ngrams = blob.ngrams(n)\n    \n    # Count frequencies of n-grams\n    counts = Counter(ngrams)\n    \n    # Get top_k most common n-grams\n    top_ngrams = counts.most_common(top_k)\n    \n    # Prepare DataFrame for plotting\n    df = pd.DataFrame(top_ngrams, columns=['ngram', 'count'])\n    df['ngram'] = df['ngram'].apply(lambda x: ' '.join(x))\n    \n    # Plot\n    plt.figure(figsize=(10, 6))\n    sns.barplot(x='count', y='ngram', data=df, palette='viridis')\n    plt.xlabel('Frequency')\n    plt.ylabel(f'Top {top_k} {n}-grams')\n    plt.title(f'Top {top_k} {n}-grams in text')\n    plt.tight_layout()\n    plt.show()\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 9, in test_case_1\n  File \"<bigcode>\", line 13, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/collections/__init__.py\", line 577, in __init__\n    self.update(iterable, **kwds)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/collections/__init__.py\", line 670, in update\n    _count_elements(self, iterable)\nTypeError: unhashable type: 'WordList'\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 16, in test_case_2\n  File \"<bigcode>\", line 13, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/collections/__init__.py\", line 577, in __init__\n    self.update(iterable, **kwds)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/collections/__init__.py\", line 670, in update\n    _count_elements(self, iterable)\nTypeError: unhashable type: 'WordList'\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_case_3\n  File \"<bigcode>\", line 13, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/collections/__init__.py\", line 577, in __init__\n    self.update(iterable, **kwds)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/collections/__init__.py\", line 670, in update\n    _count_elements(self, iterable)\nTypeError: unhashable type: 'WordList'\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 30, in test_case_4\n  File \"<bigcode>\", line 13, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/collections/__init__.py\", line 577, in __init__\n    self.update(iterable, **kwds)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/collections/__init__.py\", line 670, in update\n    _count_elements(self, iterable)\nTypeError: unhashable type: 'WordList'\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 36, in test_case_5\n  File \"<bigcode>\", line 13, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/collections/__init__.py\", line 577, in __init__\n    self.update(iterable, **kwds)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/collections/__init__.py\", line 670, in update\n    _count_elements(self, iterable)\nTypeError: unhashable type: 'WordList'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.005s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport collections\nimport random\nimport itertools\nANIMALS = ['Cat', 'Dog', 'Elephant', 'Lion', 'Tiger', 'Bear', 'Giraffe', 'Horse', 'Rabbit', 'Snake', 'Zebra']\ndef task_func(animal_dict, max_count=10, seed=0):\n    random.seed(seed)\n    reversed_dict = collections.defaultdict(list)\n    for person, animal in animal_dict.items():\n        reversed_dict[animal].append(person)\n    reversed_dict = dict(reversed_dict)\n\n    counter = {animal: random.randint(1, max_count) for animal in ANIMALS}\n    return reversed_dict, counter\n```", "match": {"category": "success"}}
{"result": "```python\nimport matplotlib.pyplot as plt\nfrom collections import Counter\nFRUITS = ['Apple', 'Banana', 'Cherry', 'Date', 'Elderberry', 'Fig', 'Grape', 'Honeydew', 'Indian Prune', 'Jackfruit']\ndef task_func(fruit_dict):\n    # Count occurrences of fruits in the dict values\n    count = Counter(fruit_dict.values())\n    # Ensure all fruits in FRUITS appear in the count dictionary (with 0 if missing)\n    freq = {fruit: count.get(fruit, 0) for fruit in FRUITS}\n\n    # Plotting\n    fig, ax = plt.subplots()\n    ax.bar(freq.keys(), freq.values())\n    ax.set_xlabel('Fruit')\n    ax.set_ylabel('Count')\n    ax.set_title('Fruit Frequency')\n    plt.xticks(rotation=45, ha='right')\n    plt.tight_layout()\n\n    return freq, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_case_1\nAssertionError: {'App[27 chars]y': 1, 'Date': 0, 'Elderberry': 0, 'Fig': 0, '[55 chars]': 0} != {'App[27 chars]y': 1}\n+ {'Apple': 1, 'Banana': 1, 'Cherry': 1}\n- {'Apple': 1,\n-  'Banana': 1,\n-  'Cherry': 1,\n-  'Date': 0,\n-  'Elderberry': 0,\n-  'Fig': 0,\n-  'Grape': 0,\n-  'Honeydew': 0,\n-  'Indian Prune': 0,\n-  'Jackfruit': 0}\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_case_2\nAssertionError: {'App[14 chars]a': 1, 'Cherry': 0, 'Date': 0, 'Elderberry': 0[68 chars]': 0} != {'App[14 chars]a': 1}\n+ {'Apple': 2, 'Banana': 1}\n- {'Apple': 2,\n-  'Banana': 1,\n-  'Cherry': 0,\n-  'Date': 0,\n-  'Elderberry': 0,\n-  'Fig': 0,\n-  'Grape': 0,\n-  'Honeydew': 0,\n-  'Indian Prune': 0,\n-  'Jackfruit': 0}\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 18, in test_case_3\nAssertionError: {'Apple': 0, 'Banana': 0, 'Cherry': 0, 'Da[91 chars]': 0} != {}\n+ {}\n- {'Apple': 0,\n-  'Banana': 0,\n-  'Cherry': 0,\n-  'Date': 0,\n-  'Elderberry': 0,\n-  'Fig': 0,\n-  'Grape': 0,\n-  'Honeydew': 0,\n-  'Indian Prune': 0,\n-  'Jackfruit': 0}\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 23, in test_case_4\nAssertionError: {'Apple': 1, 'Banana': 0, 'Cherry': 0, 'Date': 0, 'E[81 chars]': 0} != {'Apple': 1}\n- {'Apple': 1,\n?            ^\n\n+ {'Apple': 1}\n?            ^\n\n-  'Banana': 0,\n-  'Cherry': 0,\n-  'Date': 0,\n-  'Elderberry': 0,\n-  'Fig': 0,\n-  'Grape': 0,\n-  'Honeydew': 0,\n-  'Indian Prune': 0,\n-  'Jackfruit': 0}\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_case_5\nAssertionError: {'Apple': 1, 'Banana': 0, 'Cherry': 0, 'Date': 0, 'E[81 chars]': 0} != {'Apple': 1}\n- {'Apple': 1,\n?            ^\n\n+ {'Apple': 1}\n?            ^\n\n-  'Banana': 0,\n-  'Cherry': 0,\n-  'Date': 0,\n-  'Elderberry': 0,\n-  'Fig': 0,\n-  'Grape': 0,\n-  'Honeydew': 0,\n-  'Indian Prune': 0,\n-  'Jackfruit': 0}\n\n----------------------------------------------------------------------\nRan 5 tests in 0.230s\n\nFAILED (failures=5)"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\n# Constants\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\ndef task_func(length, min_value = 0, max_value = 100):\n    # Generate random DataFrame\n    data = np.random.uniform(min_value, max_value, size=(length, len(COLUMNS)))\n    df = pd.DataFrame(data, columns=COLUMNS)\n    # Calculate CDF for each column\n    cdf_df = df.rank(method='average', pct=True)\n    return cdf_df\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 6, in test_case_1\nAssertionError: 100 != 1\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 14, in test_case_2\nAssertionError: 0.4 != 10\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_case_4\nAssertionError: False is not true\n\n----------------------------------------------------------------------\nRan 5 tests in 0.006s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nCITIES = ['New York', 'London', 'Beijing', 'Tokyo', 'Sydney', 'Paris', 'Berlin', 'Moscow', 'Madrid', 'Rome']\ndef task_func(city_dict, max_range=1000000, seed=0):\n    np.random.seed(seed)\n    populations = {}\n    for name, city in city_dict.items():\n        if city in CITIES:\n            populations[city] = np.random.randint(1, max_range+1)\n        else:\n            populations[city] = -1\n\n    # Filter populations to only cities in CITIES and unique keys, maintaining order of CITIES list\n    filtered_pop = {city: populations.get(city, -1) for city in CITIES}\n\n    fig, ax = plt.subplots()\n    ax.bar(filtered_pop.keys(), filtered_pop.values(), color='skyblue')\n    ax.set_ylabel('Population')\n    ax.set_title('City Populations')\n    ax.set_xticklabels(filtered_pop.keys(), rotation=45, ha='right')\n    plt.tight_layout()\n    return filtered_pop, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\nTest if the population dictionary has correct structure and values.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 9, in test_case_1\nAssertionError: Items in the first set but not the second:\n'Paris'\n'Madrid'\n'Rome'\n'Berlin'\n'Sydney'\n'Moscow'\nItems in the second set but not the first:\n'Mumbai'\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\nTest if the bar chart plot has the correct attributes.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 18, in test_case_2\nAssertionError: '' != 'City'\n+ City\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\nTest the function with an empty input dictionary.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_case_3\nAssertionError: Items in the first set but not the second:\n'Tokyo'\n'Paris'\n'Madrid'\n'London'\n'Rome'\n'New York'\n'Berlin'\n'Beijing'\n'Sydney'\n'Moscow'\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\nTest the function with a differently structured input dictionary.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 34, in test_case_4\nAssertionError: {'New York': -1, 'London': -1, 'Beijing': -[91 chars]: -1} != {'City1': -1, 'City2': -1}\n+ {'City1': -1, 'City2': -1}\n- {'Beijing': -1,\n-  'Berlin': -1,\n-  'London': -1,\n-  'Madrid': -1,\n-  'Moscow': -1,\n-  'New York': -1,\n-  'Paris': -1,\n-  'Rome': -1,\n-  'Sydney': -1,\n-  'Tokyo': -1}\n\n----------------------------------------------------------------------\nRan 5 tests in 0.382s\n\nFAILED (failures=4)"}}
{"result": "```python\nimport collections\nimport pandas as pd\ndef task_func(my_tuple, path_csv_files):\n    # my_tuple: tuple of column names to count occurrences for\n    # path_csv_files: list of csv file paths\n    \n    overall_counts = {col: collections.Counter() for col in my_tuple}\n    \n    for file_path in path_csv_files:\n        df = pd.read_csv(file_path, usecols=my_tuple, dtype=str)  # read only relevant columns as strings\n        for col in my_tuple:\n            overall_counts[col].update(df[col].dropna())\n    \n    # Convert Counters to dicts\n    result = {col: dict(overall_counts[col]) for col in my_tuple}\n    return result\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_empty_csv_files (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 20, in test_empty_csv_files\n  File \"<bigcode>\", line 11, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1114, in __call__\n    return self._mock_call(*args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1118, in _mock_call\n    return self._execute_mock_call(*args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1179, in _execute_mock_call\n    result = effect(*args, **kwargs)\nTypeError: TestCases.test_empty_csv_files.<locals>.<lambda>() got an unexpected keyword argument 'usecols'\n\n======================================================================\nERROR: test_missing_column (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 29, in test_missing_column\n  File \"<bigcode>\", line 11, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1114, in __call__\n    return self._mock_call(*args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1118, in _mock_call\n    return self._execute_mock_call(*args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1179, in _execute_mock_call\n    result = effect(*args, **kwargs)\nTypeError: TestCases.test_missing_column.<locals>.<lambda>() got an unexpected keyword argument 'usecols'\n\n======================================================================\nERROR: test_read_csv_files (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 10, in test_read_csv_files\n  File \"<bigcode>\", line 11, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1114, in __call__\n    return self._mock_call(*args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1118, in _mock_call\n    return self._execute_mock_call(*args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1179, in _execute_mock_call\n    result = effect(*args, **kwargs)\nTypeError: TestCases.test_read_csv_files.<locals>.<lambda>() got an unexpected keyword argument 'usecols'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.005s\n\nFAILED (errors=3)"}}
{"result": "```python\nimport re\nimport os\nimport shutil\ndef task_func(directory):\n    pattern = re.compile(r'like|what', re.IGNORECASE)\n    dest_dir = os.path.join(directory, \"Interesting Files\")\n    os.makedirs(dest_dir, exist_ok=True)\n    moved_files = []\n    for filename in os.listdir(directory):\n        file_path = os.path.join(directory, filename)\n        if os.path.isfile(file_path) and pattern.search(filename):\n            shutil.move(file_path, os.path.join(dest_dir, filename))\n            moved_files.append(filename)\n    print(\"List of files moved\")\n    print(moved_files)\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_caae_1 (builtins.TestCases)\nTest if only files with 'like' or 'what' in their names are moved.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 31, in test_caae_1\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/case.py\", line 1188, in assertCountEqual\n    first_seq, second_seq = list(first), list(second)\nTypeError: 'NoneType' object is not iterable\n\n======================================================================\nERROR: test_caae_4 (builtins.TestCases)\nTest the case insensitivity of the keyword matching.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 46, in test_caae_4\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/case.py\", line 1109, in assertIn\n    if member not in container:\nTypeError: argument of type 'NoneType' is not iterable\n\n======================================================================\nFAIL: test_caae_5 (builtins.TestCases)\nTest the function with an empty directory (should handle gracefully).\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 52, in test_caae_5\nAssertionError: None != []\n\n----------------------------------------------------------------------\nRan 5 tests in 0.003s\n\nFAILED (failures=1, errors=2)"}}
{"result": "```python\nimport pandas as pd\nimport requests\nfrom io import StringIO\ndef task_func(csv_url_dict, sort_by_column=\"title\"):\n    if not csv_url_dict or \"URL\" not in csv_url_dict:\n        raise ValueError(\"Input dictionary is empty or missing 'URL' key.\")\n    url = csv_url_dict[\"URL\"]\n    response = requests.get(url)\n    response.raise_for_status()\n    df = pd.read_csv(StringIO(response.text))\n    if sort_by_column not in df.columns:\n        raise ValueError(f\"Column '{sort_by_column}' not found in the DataFrame.\")\n    df_sorted = df.sort_values(by=sort_by_column).reset_index(drop=True)\n    return df_sorted\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport glob\nimport shutil\ndef task_func(directory, archive_dir='archive'):\n    errors = []\n    if not os.path.isdir(directory):\n        return False, [f\"Source directory '{directory}' does not exist.\"]\n    archive_path = os.path.join(directory, archive_dir)\n    if not os.path.exists(archive_path):\n        try:\n            os.makedirs(archive_path)\n        except Exception as e:\n            return False, [f\"Could not create archive directory '{archive_path}': {str(e)}\"]\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    for file_path in json_files:\n        try:\n            base_name = os.path.basename(file_path)\n            dest_path = os.path.join(archive_path, base_name)\n            shutil.move(file_path, dest_path)\n        except Exception as e:\n            errors.append(f\"Failed to move '{file_path}': {str(e)}\")\n    success = len(errors) == 0\n    return success, errors\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\nTest archiving JSON files with the default archive directory.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 26, in test_case_1\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\nTest archiving with a custom archive directory.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 33, in test_case_2\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\nTest with a nonexistent source directory.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 38, in test_case_3\nAssertionError: False is not true\n\n----------------------------------------------------------------------\nRan 5 tests in 0.003s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nCOLORS = ['r', 'g', 'b']\ndef task_func(df, group_col, value_col, group_name):\n    if group_name not in df[group_col].values:\n        raise ValueError(f\"Group name '{group_name}' does not exist in the dataframe.\")\n    filtered_df = df[df[group_col] == group_name]\n    \n    fig, ax = plt.subplots()\n    bars = ax.bar(filtered_df.index.astype(str), filtered_df[value_col], color=COLORS[0])\n    \n    ax.set_title(f'Bar chart of {value_col} for {group_name}')\n    ax.set_xlabel(group_col)\n    ax.set_ylabel(value_col)\n    \n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n\n    fig, axs = plt.subplots(1, 2, figsize=(12, 5))\n\n    # Histogram\n    axs[0].hist(samples, bins=30, color='skyblue', edgecolor='black', density=True)\n    axs[0].set_title(\"Histogram\")\n    axs[0].set_xlabel(\"Value\")\n    axs[0].set_ylabel(\"Density\")\n\n    # QQ plot\n    stats.probplot(samples, dist=\"norm\", sparams=(mu, sigma), plot=axs[1])\n    axs[1].set_title(\"Q-Q Plot\")\n\n    plt.tight_layout()\n    return fig\n```", "match": {"category": "success"}}
{"result": "```python\nimport collections\nimport string\nimport random\ndef task_func(length, seed=0):\n    random.seed(seed)\n    s = ''.join(random.choices(string.ascii_letters, k=length))\n    freq = collections.Counter(s)\n    return dict(freq)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_case_4\nAssertionError: {'P': 1, 'q': 1, 'm': 1, 'Q': 1, 'f': 1, 'y': 1, 'D': 1, 'F': 1, 'h': 1, 'G': 1} != {'Z': 1, 'q': 1, 'u': 1, 'm': 2, 'p': 1, 'h': 1, 's': 1, 'E': 1, 'J': 1}\n- {'D': 1, 'F': 1, 'G': 1, 'P': 1, 'Q': 1, 'f': 1, 'h': 1, 'm': 1, 'q': 1, 'y': 1}\n+ {'E': 1, 'J': 1, 'Z': 1, 'h': 1, 'm': 2, 'p': 1, 'q': 1, 's': 1, 'u': 1}\n\n----------------------------------------------------------------------\nRan 5 tests in 0.002s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    pattern = os.path.join(directory, file_pattern)\n    files = glob.glob(pattern)\n    if not files:\n        raise ValueError(f\"No files matching pattern '{file_pattern}' found in '{directory}'.\")\n    files = natsort.natsorted(files)\n    data = []\n    for filepath in files:\n        with open(filepath, 'r', encoding='utf-8') as f:\n            content = f.read()\n        nums = re.findall(regex, content)\n        numeric_data = [int(n) for n in nums]\n        data.append({'Filename': os.path.basename(filepath), 'Numeric Data': numeric_data})\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_mixed_content_file (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 62, in test_mixed_content_file\nAssertionError: '123' not found in [123, 456]\n\n======================================================================\nFAIL: test_normal_functionality (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 44, in test_normal_functionality\nAssertionError: '123' not found in [123, 456]\n\n----------------------------------------------------------------------\nRan 5 tests in 0.006s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(mu, sigma, sample_size, seed=0):\n    np.random.seed(seed)\n    sample = np.random.normal(loc=mu, scale=sigma, size=sample_size)\n    kde = stats.gaussian_kde(sample)\n    x = np.linspace(mu - 4*sigma, mu + 4*sigma, 1000)\n    y = kde(x)\n    fig, ax = plt.subplots()\n    ax.plot(x, y)\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport urllib.request\nimport json\n# Constants\nIP_REGEX = r'[0-9]+(?:\\.[0-9]+){3}'\ndef task_func(API_URL):\n    try:\n        with urllib.request.urlopen(API_URL, timeout=10) as response:\n            if response.status != 200:\n                raise Exception(f\"API request failed with status code {response.status}\")\n            data = response.read().decode('utf-8')\n            # Try to parse JSON\n            try:\n                json_data = json.loads(data)\n                # Common keys for IP in JSON responses\n                for key in ['ip', 'query', 'origin']:\n                    if key in json_data and re.match(IP_REGEX, json_data[key]):\n                        return json_data[key]\n                # If no known key matches but json_data is string, check that\n                if isinstance(json_data, str) and re.match(IP_REGEX, json_data):\n                    return json_data\n            except json.JSONDecodeError:\n                # Not JSON response, fall back to regex search in raw data\n                match = re.search(IP_REGEX, data)\n                if match:\n                    return match.group()\n            raise Exception(\"Public IP address not found in API response\")\n    except Exception as e:\n        raise Exception(f\"API request failed: {e}\")\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_api_failure (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<bigcode>\", line 9, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1114, in __call__\n    return self._mock_call(*args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1118, in _mock_call\n    return self._execute_mock_call(*args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1173, in _execute_mock_call\n    raise effect\nException: API failure\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 33, in test_api_failure\n  File \"<bigcode>\", line 30, in task_func\nException: API request failed: API failure\n\n======================================================================\nERROR: test_invalid_ip (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<bigcode>\", line 11, in task_func\nException: API request failed with status code <MagicMock name='urlopen().status' id='132649642477792'>\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 24, in test_invalid_ip\n  File \"<bigcode>\", line 30, in task_func\nException: API request failed: API request failed with status code <MagicMock name='urlopen().status' id='132649642477792'>\n\n======================================================================\nERROR: test_missing_ip_key (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<bigcode>\", line 11, in task_func\nException: API request failed with status code <MagicMock name='urlopen().status' id='132643232871520'>\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 43, in test_missing_ip_key\n  File \"<bigcode>\", line 30, in task_func\nException: API request failed: API request failed with status code <MagicMock name='urlopen().status' id='132643232871520'>\n\n======================================================================\nERROR: test_valid_ip (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<bigcode>\", line 11, in task_func\nException: API request failed with status code <MagicMock name='urlopen().status' id='132649642609776'>\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 14, in test_valid_ip\n  File \"<bigcode>\", line 30, in task_func\nException: API request failed: API request failed with status code <MagicMock name='urlopen().status' id='132649642609776'>\n\n----------------------------------------------------------------------\nRan 5 tests in 0.011s\n\nFAILED (errors=4)"}}
{"result": "```python\nimport json\nimport os\ndef task_func(file_path):\n    if not os.path.isfile(file_path):\n        return False\n    try:\n        with open(file_path, 'r', encoding='utf-8') as f:\n            data = json.load(f)\n        if isinstance(data, list) and all(isinstance(item, dict) for item in data):\n            return True\n        return False\n    except (json.JSONDecodeError, OSError):\n        return False\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\ndef task_func(frequency, sample_size=10000):\n    if frequency < 0:\n        raise ValueError(\"Frequency cannot be negative.\")\n    if sample_size <= 0:\n        raise ValueError(\"Sample size must be positive.\")\n    \n    t = np.linspace(0, 2 * math.pi, sample_size)\n    sine_wave = np.sin(2 * math.pi * frequency * t)\n    cosine_wave = np.cos(2 * math.pi * frequency * t)\n    \n    fig, ax = plt.subplots()\n    ax.plot(t, sine_wave, label='Sine wave')\n    ax.plot(t, cosine_wave, label='Cosine wave')\n    ax.set_title(f'Sine and Cosine Waves at frequency {frequency} Hz')\n    ax.set_xlabel('Time (s)')\n    ax.set_ylabel('Amplitude')\n    ax.legend()\n    return fig, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 7, in test_case_1\nAssertionError: False is not true\n\n----------------------------------------------------------------------\nRan 5 tests in 0.072s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport json\nfrom glob import glob\nimport os\n\ndef task_func(directory, string):\n    def contains_string(obj):\n        if isinstance(obj, dict):\n            for v in obj.values():\n                if contains_string(v):\n                    return True\n        elif isinstance(obj, list):\n            for item in obj:\n                if contains_string(item):\n                    return True\n        elif isinstance(obj, str):\n            if obj == string:\n                return True\n        return False\n\n    json_files = glob(os.path.join(directory, '**', '*.json'), recursive=True)\n    result = []\n    for path in json_files:\n        try:\n            with open(path, 'r', encoding='utf-8') as f:\n                data = json.load(f)\n            if contains_string(data):\n                result.append(path)\n        except (json.JSONDecodeError, OSError):\n            pass\n    return result\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_nested_directories (builtins.TestCases)\nTest with nested directories.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 67, in test_nested_directories\nAssertionError: '/tmp/tmp9xdyau1i/test/nested/nested_file_with_target.json' unexpectedly found in ['/tmp/tmp9xdyau1i/test/file_with_target_2.json', '/tmp/tmp9xdyau1i/test/file_with_target_1.json', '/tmp/tmp9xdyau1i/test/nested/nested_file_with_target.json'] : The file in the nested directory containing the target string was found.\n\n======================================================================\nFAIL: test_with_target_string (builtins.TestCases)\nTest with files containing the target string.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 56, in test_with_target_string\nAssertionError: True is not false : Not all expected files with target string were found.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.004s\n\nFAILED (failures=2)"}}
{"result": "```python\nfrom flask import Flask\nimport os\nfrom flask_mail import Mail\n\ndef task_func(app_name):\n    app = Flask(app_name)\n    mail_config = {\n        'MAIL_SERVER': os.getenv('MAIL_SERVER', 'localhost'),\n        'MAIL_PORT': int(os.getenv('MAIL_PORT', 25)),\n        'MAIL_USE_TLS': os.getenv('MAIL_USE_TLS', 'False').lower() in ['true', '1', 'yes'],\n        'MAIL_USERNAME': os.getenv('MAIL_USERNAME', None),\n        'MAIL_PASSWORD': os.getenv('MAIL_PASSWORD', None)\n    }\n    app.config.update(mail_config)\n    mail = Mail(app)\n    return mail, mail_config\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport requests\nimport json\nimport csv\nimport os  \n# Constants\nAPI_URL = 'https://api.example.com/data'\n\ndef task_func(pattern):\n    response = requests.get(API_URL)\n    response.raise_for_status()\n    json_data = response.json()\n    \n    data_list = json_data.get('data', [])\n    matched = [item for item in data_list if re.search(pattern, str(item))]\n    \n    filename = \"matched_data.csv\"\n    with open(filename, mode='w', newline='', encoding='utf-8') as csvfile:\n        writer = csv.writer(csvfile)\n        for match in matched:\n            # If match is a dict or list, convert to JSON string; else write as single cell.\n            if isinstance(match, (dict, list)):\n                writer.writerow([json.dumps(match)])\n            else:\n                writer.writerow([match])\n    \n    return os.path.abspath(filename)\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 31, in test_case_1\n  File \"<bigcode>\", line 12, in task_func\nAttributeError: 'MockResponse' object has no attribute 'raise_for_status'\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 39, in test_case_2\n  File \"<bigcode>\", line 12, in task_func\nAttributeError: 'MockResponse' object has no attribute 'raise_for_status'\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 47, in test_case_3\n  File \"<bigcode>\", line 12, in task_func\nAttributeError: 'MockResponse' object has no attribute 'raise_for_status'\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 55, in test_case_4\n  File \"<bigcode>\", line 12, in task_func\nAttributeError: 'MockResponse' object has no attribute 'raise_for_status'\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 62, in test_case_5\n  File \"<bigcode>\", line 12, in task_func\nAttributeError: 'MockResponse' object has no attribute 'raise_for_status'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.008s\n\nFAILED (errors=5)"}}
{"result": "```python\nfrom PIL import Image, ImageFilter\nimport cv2\nimport numpy as np\nimport os\n\ndef task_func(img_path, blur_radius=5):\n    if not os.path.exists(img_path):\n        raise FileNotFoundError(f\"Image file does not exist: {img_path}\")\n\n    # Open the image using PIL\n    img = Image.open(img_path).convert(\"RGB\")\n    original_np = np.array(img)\n\n    # Apply blur filter\n    blurred_img = img.filter(ImageFilter.GaussianBlur(radius=blur_radius))\n    # Convert blurred image to grayscale\n    gray_img = blurred_img.convert(\"L\")\n    gray_np = np.array(gray_img)\n\n    # Prepare images for side-by-side display with OpenCV\n    # Convert original to BGR format for OpenCV display\n    original_bgr = cv2.cvtColor(original_np, cv2.COLOR_RGB2BGR)\n    # Convert grayscale single channel to BGR for side by side concatenation\n    gray_bgr = cv2.cvtColor(gray_np, cv2.COLOR_GRAY2BGR)\n\n    combined = np.hstack((original_bgr, gray_bgr))\n\n    cv2.imshow(\"Original (left) and Blurred + Grayscale (right)\", combined)\n    cv2.waitKey(0)\n    cv2.destroyAllWindows()\n\n    return original_np, gray_np\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_blur_effectiveness (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 36, in test_blur_effectiveness\n  File \"<bigcode>\", line 29, in task_func\ncv2.error: OpenCV(4.9.0) /io/opencv/modules/highgui/src/window.cpp:1272: error: (-2:Unspecified error) The function is not implemented. Rebuild the library with Windows, GTK+ 2.x or Cocoa support. If you are on Ubuntu or Debian, install libgtk2.0-dev and pkg-config, then re-run cmake or configure script in function 'cvShowImage'\n\n\n======================================================================\nERROR: test_different_blur_radius (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 43, in test_different_blur_radius\n  File \"<bigcode>\", line 29, in task_func\ncv2.error: OpenCV(4.9.0) /io/opencv/modules/highgui/src/window.cpp:1272: error: (-2:Unspecified error) The function is not implemented. Rebuild the library with Windows, GTK+ 2.x or Cocoa support. If you are on Ubuntu or Debian, install libgtk2.0-dev and pkg-config, then re-run cmake or configure script in function 'cvShowImage'\n\n\n======================================================================\nERROR: test_normal_functionality (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 15, in test_normal_functionality\n  File \"<bigcode>\", line 29, in task_func\ncv2.error: OpenCV(4.9.0) /io/opencv/modules/highgui/src/window.cpp:1272: error: (-2:Unspecified error) The function is not implemented. Rebuild the library with Windows, GTK+ 2.x or Cocoa support. If you are on Ubuntu or Debian, install libgtk2.0-dev and pkg-config, then re-run cmake or configure script in function 'cvShowImage'\n\n\n======================================================================\nERROR: test_returned_image_shapes (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 39, in test_returned_image_shapes\n  File \"<bigcode>\", line 29, in task_func\ncv2.error: OpenCV(4.9.0) /io/opencv/modules/highgui/src/window.cpp:1272: error: (-2:Unspecified error) The function is not implemented. Rebuild the library with Windows, GTK+ 2.x or Cocoa support. If you are on Ubuntu or Debian, install libgtk2.0-dev and pkg-config, then re-run cmake or configure script in function 'cvShowImage'\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.013s\n\nFAILED (errors=4)"}}
{"result": "```python\nimport cv2\nimport numpy as np\nimport os\ndef task_func(img_path):\n    if not os.path.isfile(img_path):\n        raise FileNotFoundError(f\"No file found at specified path: {img_path}\")\n    img = cv2.imread(img_path, cv2.IMREAD_COLOR)\n    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    contours, _ = cv2.findContours(gray, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n    return img, contours\n```", "match": {"category": "success"}}
{"result": "```python\nimport random\nimport matplotlib.pyplot as plt\ndef task_func(points: int):\n    random_numbers = [random.random() for _ in range(points)]\n    fig, ax = plt.subplots()\n    ax.plot(range(points), random_numbers)\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Random Number')\n    ax.set_title('Plot of Random Numbers')\n    return random_numbers, ax\n```", "match": {"category": "success"}}
{"result": "```python\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\n\ndef task_func(img_path, angle):\n    if not os.path.isfile(img_path):\n        raise FileNotFoundError(f\"No such file: '{img_path}'\")\n    \n    # Open image\n    img = Image.open(img_path)\n    \n    # Rotate image with expand=True\n    rotated_img = img.rotate(angle, expand=True)\n    \n    # Convert to numpy arrays\n    orig_array = np.array(img)\n    rotated_array = np.array(rotated_img)\n    \n    # Display images side by side\n    fig, axes = plt.subplots(1, 2, figsize=(10, 5))\n    axes[0].imshow(orig_array)\n    axes[0].set_title(\"Original Image\")\n    axes[0].axis('off')\n    \n    axes[1].imshow(rotated_array)\n    axes[1].set_title(f\"Rotated Image ({angle}\u00b0)\")\n    axes[1].axis('off')\n    \n    plt.tight_layout()\n    plt.show()\n    \n    return orig_array, rotated_array\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport csv\nfrom openpyxl import load_workbook\n\ndef task_func(file_name, excel_file_path, csv_file_path) -> str:\n    # Full path to the Excel file\n    excel_full_path = os.path.join(excel_file_path, file_name)\n    \n    # Validate Excel file extension\n    if not (file_name.endswith('.xls') or file_name.endswith('.xlsx')):\n        raise ValueError(\"Input file must have .xls or .xlsx extension\")\n    \n    # If it's .xls, openpyxl cannot read it, so raise an error\n    if file_name.endswith('.xls'):\n        raise ValueError(\".xls format not supported by openpyxl; please convert to .xlsx\")\n    \n    # Load workbook and select active sheet\n    wb = load_workbook(excel_full_path, data_only=True)\n    ws = wb.active\n    \n    # Prepare CSV filename (replace extension with .csv)\n    base_name = os.path.splitext(file_name)[0]\n    csv_file_name = base_name + '.csv'\n    \n    # Full path for the CSV output\n    csv_full_path = os.path.join(csv_file_path, csv_file_name)\n    \n    # Write the active sheet content to CSV\n    with open(csv_full_path, 'w', newline='', encoding='utf-8') as f:\n        writer = csv.writer(f)\n        for row in ws.iter_rows(values_only=True):\n            writer.writerow(row)\n    \n    return csv_file_name\n```", "match": {"category": "success"}}
{"result": "```python\nimport sqlite3\nimport pandas as pd\ndef task_func(db_file: str, query: str) -> pd.DataFrame:\n    with sqlite3.connect(db_file) as conn:\n        df = pd.read_sql_query(query, conn)\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport pandas as pd\nimport numpy as np\ndef task_func(excel_file_path, file_name, column_name):\n    full_path = os.path.join(excel_file_path, file_name)\n    if not os.path.isfile(full_path):\n        raise FileNotFoundError(f\"The file {full_path} does not exist.\")\n    \n    df = pd.read_excel(full_path)\n    \n    if column_name not in df.columns:\n        raise ValueError(f\"Column '{column_name}' not found in the Excel file.\")\n    \n    col_data = df[column_name].dropna()\n    \n    mean_val = col_data.mean()\n    median_val = col_data.median()\n    std_val = col_data.std()\n    \n    return {'mean': mean_val, 'median': median_val, 'std_dev': std_val}\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_normal_functionality (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_normal_functionality\nAssertionError: 79.05694150420949 != 70.71067811865476 within 7 places (8.346263385554735 difference)\n\n----------------------------------------------------------------------\nRan 5 tests in 0.202s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport os\nimport pandas as pd\nfrom datetime import datetime\ndef task_func(excel_directory: str, file_name: str, column_name: str, start_date: str, end_date: str) -> pd.DataFrame:\n    file_path = os.path.join(excel_directory, file_name)\n    if not os.path.isfile(file_path):\n        raise FileNotFoundError(f\"The file {file_path} does not exist.\")\n    \n    try:\n        start_dt = datetime.strptime(start_date, '%Y-%m-%d')\n        end_dt = datetime.strptime(end_date, '%Y-%m-%d')\n    except ValueError:\n        raise ValueError(\"start_date or end_date is in an incorrect format. Expected format: YYYY-MM-DD\")\n    \n    df = pd.read_excel(file_path)\n    \n    if column_name not in df.columns:\n        raise ValueError(f\"The column '{column_name}' does not exist in the DataFrame.\")\n    \n    try:\n        df[column_name] = pd.to_datetime(df[column_name])\n    except Exception:\n        raise ValueError(f\"The column '{column_name}' cannot be converted to datetime.\")\n    \n    filtered_df = df[(df[column_name] >= start_dt) & (df[column_name] <= end_dt)]\n    \n    return filtered_df\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport json\ndef task_func(data: dict, output_path: str = \"./default_data_output.json\") -> str:\n    df = pd.DataFrame(data)\n    if 'c' in df.columns:\n        df = df.drop(columns=['c'])\n    dict_data = df.to_dict(orient='records')\n    with open(output_path, 'w') as f:\n        json.dump(dict_data, f, indent=4)\n    return output_path\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 36, in test_case_1\nAssertionError: [{'a': 1, 'b': 3}, {'a': 2, 'b': 4}] != {'a': {'0': 1, '1': 2}, 'b': {'0': 3, '1': 4}}\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 47, in test_case_2\nAssertionError: [{'name': 'Alice', 'country': 'USA'}, {'name': 'Bob', 'country': 'Canada'}] != {'name': {'0': 'Alice', '1': 'Bob'}, 'country': {'0': 'USA', '1': 'Canada'}}\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 56, in test_case_3\nAssertionError: [{'age': 25, 'height': 170}, {'age': 30, 'height': 175}] != {'age': {'0': 25, '1': 30}, 'height': {'0': 170, '1': 175}}\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 71, in test_case_4\nAssertionError: [{'id': 1, 'is_student': True, 'grades': [47 chars]'B'}] != {'id': {'0': 1, '1': 2}, 'is_student': {'[49 chars]'B'}}\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 80, in test_case_5\nAssertionError: [] != {}\n\n----------------------------------------------------------------------\nRan 5 tests in 0.016s\n\nFAILED (failures=5)"}}
{"result": "```python\nimport json\nimport base64\nimport unicodedata\ndef task_func(json_file: str) -> dict:\n    with open(json_file, 'r', encoding='utf-8') as f:\n        data = json.load(f)\n    result = {}\n    for key, b64_value in data.items():\n        decoded_bytes = base64.b64decode(b64_value)\n        decoded_str = decoded_bytes.decode('utf-8')\n        normalized_str = unicodedata.normalize('NFC', decoded_str)\n        result[key] = normalized_str\n    return result\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nfrom flask_mail import Mail\ndef task_func(app):\n    app.config['MAIL_SERVER'] = os.getenv('MAIL_SERVER', 'localhost')\n    app.config['MAIL_PORT'] = int(os.getenv('MAIL_PORT', 25))\n    app.config['MAIL_USE_TLS'] = os.getenv('MAIL_USE_TLS', 'false').lower() in ('true', '1', 't')\n    app.config['MAIL_USE_SSL'] = os.getenv('MAIL_USE_SSL', 'false').lower() in ('true', '1', 't')\n    app.config['MAIL_USERNAME'] = os.getenv('MAIL_USERNAME', None)\n    app.config['MAIL_PASSWORD'] = os.getenv('MAIL_PASSWORD', None)\n    app.config['MAIL_DEFAULT_SENDER'] = os.getenv('MAIL_DEFAULT_SENDER', None)\n    mail = Mail(app)\n    mail_config = {key: app.config[key] for key in app.config if key.startswith('MAIL_')}\n    return mail, mail_config\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(data, column=\"c\"):\n    df = pd.DataFrame(data)\n    if column in df.columns:\n        df = df.drop(columns=column)\n    numeric_df = df.select_dtypes(include=[np.number])\n    ax = None\n    if not numeric_df.empty:\n        ax = numeric_df.plot()\n        plt.close(ax.figure)\n    return df, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport codecs\n\ndef task_func(dataframe: pd.DataFrame) -> pd.DataFrame:\n    if not isinstance(dataframe, pd.DataFrame):\n        raise TypeError(\"Input is not a pandas DataFrame\")\n    if \"UnicodeString\" not in dataframe.columns:\n        raise KeyError('Column \"UnicodeString\" does not exist in the DataFrame')\n    \n    def decode_unicode_escape(s):\n        if pd.isna(s):\n            return s\n        try:\n            return codecs.decode(s, 'unicode_escape')\n        except Exception:\n            return s\n    \n    dataframe = dataframe.copy()\n    dataframe[\"UnicodeString\"] = dataframe[\"UnicodeString\"].apply(decode_unicode_escape)\n    return dataframe\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_non_string_unicode_values (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_non_string_unicode_values\nAssertionError: Exception not raised\n\n----------------------------------------------------------------------\nRan 5 tests in 0.011s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef task_func(data, column=\"c\"):\n    if not data:\n        return None\n    df = pd.DataFrame(data)\n    if column in df.columns:\n        df = df.drop(columns=[column])\n    numeric_df = df.select_dtypes(include='number')\n    if numeric_df.empty:\n        return None\n    corr = numeric_df.corr()\n    if corr.empty:\n        return None\n    plt.figure()\n    ax = sns.heatmap(corr, annot=True, fmt=\".2f\", cmap=\"coolwarm\")\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import SGD\n\ndef task_func(X, Y):\n    # Split the data: 75% train, 25% test\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25, random_state=42)\n    \n    # Build the model\n    model = Sequential()\n    model.add(Dense(1, activation='sigmoid', input_shape=(2,)))\n    \n    # Compile the model with SGD optimizer and binary crossentropy loss\n    optimizer = SGD(learning_rate=0.01)\n    model.compile(loss='binary_crossentropy', optimizer=optimizer)\n    \n    # Fit the model without verbose, with validation on test set\n    history = model.fit(X_train, Y_train, validation_data=(X_test, Y_test), verbose=0)\n    \n    # Plot training and validation loss\n    fig, ax = plt.subplots()\n    ax.plot(history.history['loss'], label='Train')\n    ax.plot(history.history['val_loss'], label='Test')\n    ax.set_title('Model loss')\n    ax.set_xlabel('Epoch')\n    ax.set_ylabel('Loss')\n    ax.legend()\n    \n    return model, ax\n```", "match": {"category": "success"}}
{"result": "```python\nfrom tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve, auc\nimport matplotlib.pyplot as plt\n\ndef task_func(X, Y):\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=42)\n\n    model = keras.Sequential([\n        keras.layers.Dense(1, activation='sigmoid', input_shape=(X.shape[1],))\n    ])\n\n    optimizer = keras.optimizers.SGD(learning_rate=0.01)\n    model.compile(loss='binary_crossentropy', optimizer=optimizer)\n\n    model.fit(X_train, Y_train, verbose=0)\n\n    y_score = model.predict(X_test).ravel()\n    fpr, tpr, _ = roc_curve(Y_test, y_score)\n    roc_auc = auc(fpr, tpr)\n\n    fig, ax = plt.subplots()\n    ax.plot(fpr, tpr, label=f'ROC curve (AUC = {roc_auc:.2f})')\n    ax.plot([0, 1], [0, 1], 'k--', label='Chance')\n    ax.set_title('ROC curve')\n    ax.set_xlabel('False positive rate')\n    ax.set_ylabel('True positive rate')\n    ax.legend(loc='lower right')\n\n    return model, ax\n```", "match": {"category": "success"}}
{"result": "```python\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import precision_recall_curve\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\ndef task_func(X, Y):\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, train_size=0.7, random_state=42)\n    model = keras.Sequential([\n        keras.layers.Dense(1, activation='sigmoid', input_shape=(X.shape[1],))\n    ])\n    model.compile(loss='binary_crossentropy', optimizer='sgd')\n    model.fit(X_train, Y_train, verbose=0)\n    y_scores = model.predict(X_test).ravel()\n    precision, recall, _ = precision_recall_curve(Y_test, y_scores)\n    fig, ax = plt.subplots()\n    ax.plot(recall, precision)\n    ax.set_xlabel('Recall')\n    ax.set_ylabel('Precision')\n    ax.set_title('Precision-Recall Curve')\n    return model, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(data):\n    df = pd.DataFrame(data)\n    scaler = StandardScaler()\n    for col in df.columns:\n        # Check if column is numeric or can be converted to numeric\n        if pd.api.types.is_numeric_dtype(df[col]):\n            # Already numeric\n            values = df[col].values.reshape(-1, 1)\n            scaled_values = scaler.fit_transform(values).flatten()\n            df[col] = scaled_values\n        else:\n            # Try to convert to float, if fail, leave unchanged\n            try:\n                converted = pd.to_numeric(df[col], errors='raise')\n                values = converted.values.reshape(-1, 1)\n                scaled_values = scaler.fit_transform(values).flatten()\n                df[col] = scaled_values\n            except:\n                # leave column unchanged\n                pass\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport requests\nimport os\nimport json\nimport time\n# Redefining the function in the current context\nHEADERS = {\n    'accept': 'text/json',\n    'Content-Type': 'application/json'\n}\ndef task_func(url, directory, metadata):\n    if not isinstance(url, str) or not url.startswith(('http://', 'https://')):\n        raise TypeError(\"Invalid URL\")\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory does not exist: {directory}\")\n\n    status_codes = []\n    for filename in os.listdir(directory):\n        filepath = os.path.join(directory, filename)\n        if os.path.isfile(filepath):\n            with open(filepath, 'rb') as f:\n                files = {'file': (filename, f)}\n                # Merge metadata with the filename (if filename specific metadata needed)\n                payload = metadata.copy() if isinstance(metadata, dict) else {}\n                try:\n                    # We send metadata as json inline (not multipart)\n                    resp = requests.post(url, headers=HEADERS, files=files, data={'metadata': json.dumps(payload)})\n                    status_codes.append(resp.status_code)\n                except Exception as e:\n                    # Optionally, you could append or handle errors differently, but spec doesn't mention this\n                    raise e\n            time.sleep(1)\n    return status_codes\n```", "match": {"category": "timeout", "error": "Test execution timed out after 10 seconds"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndef task_func(df, target_column, column_to_remove=\"c\", test_size=0.2):\n    df_copy = df.copy()\n    if column_to_remove in df_copy.columns:\n        df_copy = df_copy.drop(columns=[column_to_remove])\n    X = df_copy.drop(columns=[target_column])\n    y = df_copy[target_column]\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=42)\n    return X_train, X_test, y_train, y_test\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 16, in test_case_1\n  File \"<bigcode>\", line 6, in task_func\nAttributeError: 'dict' object has no attribute 'columns'\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 23, in test_case_2\n  File \"<bigcode>\", line 6, in task_func\nAttributeError: 'dict' object has no attribute 'columns'\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 30, in test_case_3\n  File \"<bigcode>\", line 6, in task_func\nAttributeError: 'dict' object has no attribute 'columns'\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 37, in test_case_4\n  File \"<bigcode>\", line 6, in task_func\nAttributeError: 'dict' object has no attribute 'columns'\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 42, in test_case_5\n  File \"<bigcode>\", line 6, in task_func\nAttributeError: 'dict' object has no attribute 'columns'\n\n======================================================================\nERROR: test_case_6 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 52, in test_case_6\n  File \"<bigcode>\", line 6, in task_func\nAttributeError: 'dict' object has no attribute 'columns'\n\n----------------------------------------------------------------------\nRan 6 tests in 0.005s\n\nFAILED (errors=6)"}}
{"result": "```python\nimport numpy as np\nimport cv2\nimport os\ndef task_func(image_path='image.jpg', threshold=128):\n    if not os.path.isfile(image_path):\n        raise FileNotFoundError(f\"No file found at the specified path: {image_path}\")\n    if not isinstance(threshold, int) or not (0 <= threshold <= 255):\n        raise ValueError(\"Threshold must be an integer in the range 0-255.\")\n\n    # Read the image in color\n    img_bgr = cv2.imread(image_path, cv2.IMREAD_COLOR)\n    # Convert to grayscale\n    img_gray = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2GRAY)\n    # Binarize the grayscale image\n    _, img_bin = cv2.threshold(img_gray, threshold, 255, cv2.THRESH_BINARY)\n\n    return img_gray, img_bin\n```", "match": {"category": "success"}}
{"result": "```python\nimport cv2\nimport numpy as np\nimport os\nfrom sklearn.cluster import KMeans\n\ndef task_func(image_path='image.jpg', n_clusters=3, random_seed=42):\n    if not isinstance(n_clusters, int) or n_clusters <= 0:\n        raise ValueError(\"'n_clusters' must be a positive integer.\")\n    if not os.path.exists(image_path):\n        raise FileNotFoundError(f\"The image file at '{image_path}' does not exist.\")\n\n    # Read image in RGB format\n    img_bgr = cv2.imread(image_path)\n    if img_bgr is None:\n        # image not found or corrupted\n        raise FileNotFoundError(f\"The image file at '{image_path}' could not be loaded.\")\n    img = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2RGB)\n    original_img = img.copy()\n\n    if n_clusters == 1:\n        # Save single cluster image (same as original)\n        base_name, ext = os.path.splitext(image_path)\n        output_path = f\"{base_name}_cluster_0{ext}\"\n        # Convert RGB back to BGR to save with OpenCV\n        save_img = cv2.cvtColor(original_img, cv2.COLOR_RGB2BGR)\n        cv2.imwrite(output_path, save_img)\n        return original_img, original_img\n\n    # Reshape image data to (num_pixels, 3)\n    pixel_data = img.reshape((-1, 3)).astype(float)\n\n    # Fit KMeans clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_seed)\n    kmeans.fit(pixel_data)\n    labels = kmeans.labels_\n    centroids = kmeans.cluster_centers_.astype(np.uint8)\n\n    # Create segmented image by replacing each pixel by its centroid color\n    segmented_data = centroids[labels]\n    segmented_img = segmented_data.reshape(img.shape)\n\n    # Save each cluster as a separate image\n    base_name, ext = os.path.splitext(image_path)\n    for i in range(n_clusters):\n        mask = (labels == i)\n        cluster_pixels = np.zeros_like(pixel_data, dtype=np.uint8)\n        cluster_pixels[mask] = centroids[i]\n        cluster_img = cluster_pixels.reshape(img.shape)\n        output_img = cluster_img\n\n        # Convert RGB to BGR for saving\n        output_bgr = cv2.cvtColor(output_img, cv2.COLOR_RGB2BGR)\n        output_path = f\"{base_name}_cluster_{i}{ext}\"\n        cv2.imwrite(output_path, output_bgr)\n\n    return original_img, segmented_img\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_normal_functionality (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 35, in test_normal_functionality\nAssertionError: False is not true : The arrays should be equal\n\n----------------------------------------------------------------------\nRan 5 tests in 0.208s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport cv2\nimport os\nfrom matplotlib import pyplot as plt\n\ndef task_func(image_path='image.jpg', histogram_path='histogram.png'):\n    if not os.path.isfile(image_path):\n        raise FileNotFoundError(f\"No file found at {image_path}\")\n    \n    img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)\n    if img is None:\n        raise FileNotFoundError(f\"Could not read image file {image_path}\")\n\n    # Display original image\n    plt.figure(figsize=(10,4))\n    plt.subplot(1,2,1)\n    plt.title('Original Image')\n    plt.axis('off')\n    plt.imshow(img, cmap='gray')\n\n    # Calculate histogram\n    hist = cv2.calcHist([img], [0], None, [256], [0,256])\n\n    # Plot histogram\n    plt.subplot(1,2,2)\n    ax = plt.gca()\n    ax.plot(hist, color='black')\n    ax.set_xlim([0,255])\n    ax.set_title('Histogram')\n    ax.set_xlabel('Pixel Intensity')\n    ax.set_ylabel('Frequency')\n\n    plt.tight_layout()\n    plt.show()\n\n    # Save histogram figure as PNG\n    fig = ax.figure\n    fig.savefig(histogram_path)\n\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_histogram_labels (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 32, in test_histogram_labels\nAssertionError: 'Pixel Intensity' != 'Bins'\n- Pixel Intensity\n+ Bins\n\n\n======================================================================\nFAIL: test_normal_functionality (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 26, in test_normal_functionality\nAssertionError: 'Histogram' != 'Grayscale Histogram'\n- Histogram\n+ Grayscale Histogram\n\n\n----------------------------------------------------------------------\nRan 4 tests in 0.338s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport numpy as np\nimport cv2\nimport os\ndef task_func(image_path='image.jpg', threshold=128):\n    if not os.path.exists(image_path):\n        raise FileNotFoundError(f\"No such file: '{image_path}'\")\n    if not isinstance(threshold, int) or not (0 <= threshold <= 255):\n        raise ValueError(\"Threshold must be an integer in the range 0-255.\")\n    original = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)\n    if original is None:\n        raise FileNotFoundError(f\"Failed to read image '{image_path}' as grayscale.\")\n    _, binary = cv2.threshold(original, threshold, 255, cv2.THRESH_BINARY)\n    cv2.imwrite('binary_image.jpg', binary)\n    return original, binary\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\ndef task_func(df1, df2, features=[\"feature1\", \"feature2\", \"feature3\"], target=\"target\"):\n    # Merge the dataframes on 'id'\n    df_merged = pd.merge(df1, df2, on='id')\n    \n    # Prepare feature matrix X and target vector y\n    X = df_merged[features]\n    y = df_merged[target]\n    \n    # Fit linear regression model\n    model = LinearRegression()\n    model.fit(X, y)\n    \n    # Predict and compute residuals\n    y_pred = model.predict(X)\n    residuals = y - y_pred\n    \n    # Plot residuals\n    fig, ax = plt.subplots()\n    ax.scatter(y_pred, residuals)\n    ax.axhline(0, color='red', linestyle='--')\n    ax.set_title('Residuals Plot')\n    ax.set_xlabel('Predicted Values')\n    ax.set_ylabel('Residuals')\n    \n    return {\n        'coefficients': model.coef_.tolist(),\n        'intercept': float(model.intercept_),\n        'residuals_plot': ax\n    }\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\n\ndef task_func(df1, df2):\n    # Merge dataframes on 'id' using outer join\n    merged_df = pd.merge(df1, df2, on='id', how='outer')\n\n    # Identify numeric columns originally from df1 (excluding 'id')\n    numeric_cols = df1.select_dtypes(include='number').columns.tolist()\n    if 'id' in numeric_cols:\n        numeric_cols.remove('id')\n\n    # Scale only these columns in the merged dataframe\n    scaler = StandardScaler()\n    merged_df[numeric_cols] = scaler.fit_transform(merged_df[numeric_cols])\n\n    # Generate pair plot for the scaled features from df1\n    pair_plot = sns.pairplot(merged_df[numeric_cols])\n\n    return merged_df, pair_plot\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_7 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 107, in test_case_7\n  File \"<bigcode>\", line 17, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/utils/_set_output.py\", line 157, in wrapped\n    data_to_wrap = f(self, X, *args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 916, in fit_transform\n    return self.fit(X, **fit_params).transform(X)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/preprocessing/_data.py\", line 839, in fit\n    return self.partial_fit(X, y, sample_weight)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 1152, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/preprocessing/_data.py\", line 875, in partial_fit\n    X = self._validate_data(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 605, in _validate_data\n    out = check_array(X, input_name=\"X\", **check_params)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 795, in check_array\n    dtype_orig = np.result_type(*dtypes_orig)\n  File \"<__array_function__ internals>\", line 5, in result_type\nValueError: at least one array or dtype is required\n\n----------------------------------------------------------------------\nRan 8 tests in 4.330s\n\nFAILED (errors=1)"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.feature_selection import SelectKBest, f_classif\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef task_func(df1, df2):\n    # Assume df1 contains features and df2 contains the target\n    X = df1\n    y = df2.iloc[:, 0] if df2.shape[1] == 1 else df2  # handle if df2 is DataFrame or Series\n    \n    # Apply SelectKBest with k=2 and f_classif\n    selector = SelectKBest(score_func=f_classif, k=2)\n    X_new = selector.fit_transform(X, y)\n    \n    # Get selected feature names\n    selected_mask = selector.get_support()\n    selected_features = X.columns[selected_mask].tolist()\n    \n    # Prepare dataframe with selected features\n    df_selected = X[selected_features]\n    \n    # Create correlation matrix of selected features\n    corr = df_selected.corr()\n    \n    # Plot heatmap\n    fig, ax = plt.subplots()\n    sns.heatmap(corr, annot=True, cmap=\"coolwarm\", ax=ax)\n    \n    return selected_features, ax\n```", "match": {"category": "timeout", "error": "Test execution timed out after 10 seconds"}}
{"result": "```python\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef task_func(df1, df2, column1=\"feature1\", column2=\"feature2\"):\n    # Extract the specified columns from both dataframes\n    x = df1[column1].values\n    y = df2[column2].values\n    \n    # Make sure lengths match by taking the minimum number of rows\n    n = min(len(x), len(y))\n    x = x[:n]\n    y = y[:n]\n    \n    # Combine into a single feature array for clustering\n    X = np.column_stack((x, y))\n    \n    # Perform KMeans clustering with k=2, n_init=10\n    kmeans = KMeans(n_clusters=2, n_init=10, random_state=0)\n    kmeans.fit(X)\n    labels = kmeans.labels_.astype(np.int32)\n    \n    # Plot scatter plot\n    fig, ax = plt.subplots()\n    scatter = ax.scatter(x, y, c=labels, cmap='viridis', edgecolor='k')\n    ax.set_xlabel(column1)\n    ax.set_ylabel(column2)\n    ax.set_title('KMeans Clustering (k=2)')\n    \n    return labels, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 38, in test_case_4\nAssertionError: 3 != 2\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 44, in test_case_5\nAssertionError: ValueError not raised\n\n----------------------------------------------------------------------\nRan 7 tests in 0.290s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport cv2\nimport os\nimport numpy as np\ndef task_func(image_file: str) -> np.ndarray:\n    if not os.path.exists(image_file):\n        raise FileNotFoundError(f\"The file '{image_file}' does not exist.\")\n    \n    image = cv2.imread(image_file, cv2.IMREAD_GRAYSCALE)\n    if image is None:\n        raise ValueError(f\"The file '{image_file}' is not a valid image or cannot be read as grayscale.\")\n    \n    hist = np.zeros(256, dtype=int)\n    for pixel_value in image.flatten():\n        hist[pixel_value] += 1\n    return hist\n```", "match": {"category": "success"}}
{"result": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.stats import chi2_contingency\n\ndef task_func(df1, df2, column1=\"feature1\", column2=\"feature2\"):\n    merged = df1.merge(df2, on='id')\n    contingency_table = pd.crosstab(merged[column1], merged[column2])\n    chi2, p, dof, expected = chi2_contingency(contingency_table)\n    fig, ax = plt.subplots()\n    heatmap = sns.heatmap(contingency_table, annot=True, fmt='d', cmap='YlGnBu', ax=ax)\n    return p, heatmap\n```", "match": {"category": "success"}}
{"result": "```python\nimport base64\nimport hashlib\nimport hmac\nimport binascii\ndef task_func(s, signature, secret_key):\n    try:\n        message = base64.b64decode(s)\n    except (binascii.Error, ValueError):\n        return False\n    computed_hmac = hmac.new(secret_key.encode(), message, hashlib.sha1).hexdigest()\n    return hmac.compare_digest(computed_hmac, signature)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_invalid_base64 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 18, in test_invalid_base64\nAssertionError: Error not raised\n\n----------------------------------------------------------------------\nRan 8 tests in 0.003s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pandas as pd\nimport re\nimport random\ndef task_func(s: str, seed: int = 0) -> pd.DataFrame:\n    random.seed(seed)\n    lines = s.strip().split('\\n')\n    codes = []\n    rows = []\n    for line in lines:\n        parts = line.strip().split()\n        ID = parts[0].strip()\n        Quantity = int(parts[1].strip())\n        Code = parts[2].strip()\n        Price = int(parts[3].strip())\n        Description = ' '.join(parts[4:]).strip()\n        codes.append(Code)\n        rows.append({'ID': ID, 'Quantity': Quantity, 'Code': Code, 'Price': Price, 'Description': Description})\n        \n    product_names = ['Apple', 'Banana', 'Orange', 'Pear', 'Grape']\n    unique_codes = list(dict.fromkeys(codes))\n    code_to_product = {code: random.choice(product_names) for code in unique_codes}\n    \n    for row in rows:\n        row['Product'] = code_to_product[row['Code']]\n    \n    data_df = pd.DataFrame(rows, columns=['ID', 'Quantity', 'Code', 'Price', 'Product', 'Description'])\n    data_df['ID'] = data_df['ID'].astype(str)\n    data_df['Quantity'] = data_df['Quantity'].astype(int)\n    data_df['Price'] = data_df['Price'].astype(int)\n    return data_df\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_6 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 83, in test_case_6\n  File \"<bigcode>\", line 12, in task_func\nIndexError: list index out of range\n\n======================================================================\nERROR: test_case_7 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 88, in test_case_7\n  File \"<bigcode>\", line 14, in task_func\nIndexError: list index out of range\n\n----------------------------------------------------------------------\nRan 7 tests in 0.031s\n\nFAILED (errors=2)"}}
{"result": "```python\nimport pandas as pd\nfrom random import choice\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    job_titles = ['Engineer', 'Manager', 'Analyst', 'Developer', 'Tester']\n    data = {\n        'Name': [name],\n        'Age': [age],\n        'Code': [code],\n        'Salary': [salary],\n        'Bio': [bio],\n        'Job Title': [choice(job_titles)]\n    }\n    data_df = pd.DataFrame(data)\n    return data_df\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 43, in test_case_5\nAssertionError: ValueError not raised\n\n======================================================================\nFAIL: test_case_8 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 81, in test_case_8\nAssertionError: ValueError not raised\n\n----------------------------------------------------------------------\nRan 8 tests in 0.027s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport string\nimport matplotlib.pyplot as plt\n\ndef task_func(s):\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    s = s.lower()\n    freq = {}\n    for ch in s:\n        if ch in string.ascii_lowercase:\n            freq[ch] = freq.get(ch, 0) + 1\n\n    letters = sorted(freq.keys())\n    frequencies = [freq[l] for l in letters]\n\n    fig, ax = plt.subplots()\n    ax.bar(letters, frequencies)\n    ax.set_title(\"Letter Frequencies\")\n    ax.set_xlabel(\"Letters\")\n    ax.set_ylabel(\"Frequency\")\n\n    return freq, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 11, in test_case_1\nAssertionError: {'t': 4, 'h': 1, 'i': 3, 's': 4, 'a': 1, 'e[24 chars]': 1} != {'a': 1, 'b': 0, 'c': 0, 'd': 0, 'e': 1, 'f[160 chars]': 0}\n- {'a': 1, 'e': 1, 'g': 1, 'h': 1, 'i': 3, 'n': 1, 'r': 1, 's': 4, 't': 4}\n+ {'a': 1,\n+  'b': 0,\n+  'c': 0,\n+  'd': 0,\n+  'e': 1,\n+  'f': 0,\n+  'g': 1,\n+  'h': 1,\n+  'i': 3,\n+  'j': 0,\n+  'k': 0,\n+  'l': 0,\n+  'm': 0,\n+  'n': 1,\n+  'o': 0,\n+  'p': 0,\n+  'q': 0,\n+  'r': 1,\n+  's': 4,\n+  't': 4,\n+  'u': 0,\n+  'v': 0,\n+  'w': 0,\n+  'x': 0,\n+  'y': 0,\n+  'z': 0}\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 29, in test_case_3\nAssertionError: {} != {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, '[161 chars]': 0}\n- {}\n+ {'a': 0,\n+  'b': 0,\n+  'c': 0,\n+  'd': 0,\n+  'e': 0,\n+  'f': 0,\n+  'g': 0,\n+  'h': 0,\n+  'i': 0,\n+  'j': 0,\n+  'k': 0,\n+  'l': 0,\n+  'm': 0,\n+  'n': 0,\n+  'o': 0,\n+  'p': 0,\n+  'q': 0,\n+  'r': 0,\n+  's': 0,\n+  't': 0,\n+  'u': 0,\n+  'v': 0,\n+  'w': 0,\n+  'x': 0,\n+  'y': 0,\n+  'z': 0}\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 38, in test_case_4\nAssertionError: {} != {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, '[161 chars]': 0}\n- {}\n+ {'a': 0,\n+  'b': 0,\n+  'c': 0,\n+  'd': 0,\n+  'e': 0,\n+  'f': 0,\n+  'g': 0,\n+  'h': 0,\n+  'i': 0,\n+  'j': 0,\n+  'k': 0,\n+  'l': 0,\n+  'm': 0,\n+  'n': 0,\n+  'o': 0,\n+  'p': 0,\n+  'q': 0,\n+  'r': 0,\n+  's': 0,\n+  't': 0,\n+  'u': 0,\n+  'v': 0,\n+  'w': 0,\n+  'x': 0,\n+  'y': 0,\n+  'z': 0}\n\n----------------------------------------------------------------------\nRan 5 tests in 0.083s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport pickle\nimport os\ndef task_func(df, file_name=\"save.pkl\"):\n    with open(file_name, \"wb\") as f:\n        pickle.dump(df, f)\n    with open(file_name, \"rb\") as f:\n        loaded_df = pickle.load(f)\n    os.remove(file_name)\n    return loaded_df\n```", "match": {"category": "success"}}
{"result": "```python\nimport pickle\nimport os\nimport matplotlib.pyplot as plt\n\ndef task_func(numbers, file_path=\"save.pkl\"):\n    if not (isinstance(numbers, list) and all(isinstance(n, (int, float)) for n in numbers)):\n        raise TypeError(\"Input must be a list of numbers.\")\n    \n    fig, ax = plt.subplots()\n    ax.plot(numbers)\n    \n    with open(file_path, \"wb\") as f:\n        pickle.dump(fig, f)\n    plt.close(fig)\n    \n    with open(file_path, \"rb\") as f:\n        loaded_fig = pickle.load(f)\n    os.remove(file_path)\n    \n    return loaded_fig\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef task_func(P, T):\n    # P: 2D matrix (m x n)\n    # T: 3D tensor (n x p x q)\n    # We want to multiply P (m x n) with each slice T[:, :, k] (n x p) to get (m x p x q)\n\n    # Validate dimensions\n    if P.shape[1] != T.shape[0]:\n        raise ValueError(\"The number of columns in P must match the first dimension of T\")\n\n    # Compute product along the first axis of T\n    # result shape: (m x p x q)\n    result = np.einsum('mn,npq->mpq', P, T)\n\n    # For visualization, reduce the 3D result to 2D by summing over the third axis\n    heatmap_data = result.sum(axis=2)\n\n    # Plot heatmap\n    fig, ax = plt.subplots()\n    sns.heatmap(heatmap_data, ax=ax)\n\n    return result, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 38, in test_case_5\n  File \"<bigcode>\", line 12, in task_func\nAttributeError: 'list' object has no attribute 'shape'\n\n----------------------------------------------------------------------\nRan 6 tests in 0.233s\n\nFAILED (errors=1)"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(P, T):\n    if P.shape[1] != T.shape[0]:\n        raise ValueError(f\"Incompatible shapes for multiplication: P.shape={P.shape}, T.shape={T.shape}\")\n    # Perform matrix-tensor multiplication: result shape (P.shape[0], T.shape[1], T.shape[2])\n    result = np.tensordot(P, T, axes=([1],[0]))\n    # Flatten the last two dimensions\n    result_flat = result.reshape(result.shape[0], -1)\n    # Normalize\n    scaler = StandardScaler()\n    normalized = scaler.fit_transform(result_flat)\n    # Create DataFrame with column names feature_0, feature_1, ...\n    columns = [f\"feature_{i}\" for i in range(normalized.shape[1])]\n    df = pd.DataFrame(normalized, columns=columns)\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 18, in test_case_1\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/preprocessing/_data.py\", line 1066, in inverse_transform\n    X *= self.scale_\nValueError: operands could not be broadcast together with shapes (3,16) (12,) (3,16) \n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 36, in test_case_3\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/preprocessing/_data.py\", line 1066, in inverse_transform\n    X *= self.scale_\nValueError: operands could not be broadcast together with shapes (4,36) (24,) (4,36) \n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 48, in test_case_4\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/preprocessing/_data.py\", line 1066, in inverse_transform\n    X *= self.scale_\nValueError: operands could not be broadcast together with shapes (5,49) (35,) (5,49) \n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 60, in test_case_5\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/preprocessing/_data.py\", line 1066, in inverse_transform\n    X *= self.scale_\nValueError: operands could not be broadcast together with shapes (6,64) (48,) (6,64) \n\n======================================================================\nERROR: test_case_6 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 69, in test_case_6\n  File \"<bigcode>\", line 6, in task_func\nIndexError: tuple index out of range\n\n======================================================================\nERROR: test_case_8 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 81, in test_case_8\n  File \"<__array_function__ internals>\", line 5, in allclose\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/numpy/core/numeric.py\", line 2249, in allclose\n    res = all(isclose(a, b, rtol=rtol, atol=atol, equal_nan=equal_nan))\n  File \"<__array_function__ internals>\", line 5, in isclose\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/numpy/core/numeric.py\", line 2358, in isclose\n    return within_tol(x, y, atol, rtol)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/numpy/core/numeric.py\", line 2339, in within_tol\n    return less_equal(abs(x-y), atol + rtol * abs(y))\nValueError: operands could not be broadcast together with shapes (5,9) (3,15) \n\n======================================================================\nFAIL: test_case_10 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 108, in test_case_10\nAssertionError: Lists differ: [0, 1] != [0, 1, 2, 3, 4]\n\nSecond list contains 3 additional elements.\nFirst extra element 2:\n2\n\n- [0, 1]\n+ [0, 1, 2, 3, 4]\n\n======================================================================\nFAIL: test_case_9 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 101, in test_case_9\nAssertionError: Lists differ: ['fea[146 chars]re_11', 'feature_12', 'feature_13', 'feature_14', 'feature_15'] != ['fea[146 chars]re_11']\n\nFirst list contains 4 additional elements.\nFirst extra element 12:\n'feature_12'\n\n  ['feature_0',\n   'feature_1',\n   'feature_2',\n   'feature_3',\n   'feature_4',\n   'feature_5',\n   'feature_6',\n   'feature_7',\n   'feature_8',\n   'feature_9',\n   'feature_10',\n-  'feature_11',\n?              ^\n\n+  'feature_11']\n?              ^\n\n-  'feature_12',\n-  'feature_13',\n-  'feature_14',\n-  'feature_15']\n\n----------------------------------------------------------------------\nRan 10 tests in 0.021s\n\nFAILED (failures=2, errors=6)"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\ndef task_func(P, T):\n    # P shape: (N, M) or (N,3)\n    # T shape: (M, 3, 3)\n    # Using Einstein summation to compute result of shape (N, 3):\n    # result[n, k] = sum_m sum_j P[n,m] * T[m,j,k]\n    # Here, assuming P shape (N, M) and T shape (M, 3, 3), reduce last dims appropriately\n    # But since the problem states \"product of matrix and tensor\" to get (N,3),\n    # a reasonable assumption is:\n    # P shape: (N,M)\n    # T shape: (M, 3) or (M,3,3), to get (N,3) after einsum\n    # We'll do: result[n,k] = sum_m P[n,m] * T[m,k] or sum over axis=1 and 2 combined\n    \n    # If T is (M, 3, 3), maybe we want: result[n, k] = sum_m sum_j P[n,m] * T[m,j,k]\n    # Let's clarify with einsum:\n    # Use: 'nm,mjk->njk' => (N,3,3)\n    # Then reduce along axis 1 or 2 to get (N,3)?\n    # But problem says result shape (N,3), so final shape is 2D\n    \n    # Try einsum 'nm,mjk->njk' then sum over j axis:\n    product = np.einsum('nm,mjk->njk', P, T)  # shape (N,3,3)\n    result = product.sum(axis=1)  # sum over the middle index j, shape (N,3)\n    \n    fig = plt.figure()\n    ax = fig.add_subplot(111, projection='3d')\n    ax.scatter(result[:,0], result[:,1], result[:,2])\n    ax.set_xlabel('X')\n    ax.set_ylabel('Y')\n    ax.set_zlabel('Z')\n    ax.set_title('3D Visualization of Result')\n    \n    return result, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_case_2\nAssertionError: False is not true\n\n----------------------------------------------------------------------\nRan 6 tests in 0.069s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport numpy as np\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(P, T, tensor_shape=(3, 3, 3)):\n    # P: shape (N, M)\n    # T: shape tensor_shape or (d1,d2,d3)\n    # We assume M matches the product of tensor_shape (or compatible with T)\n    N, M = P.shape\n    # Reshape T to 2D matrix for multiplication: flatten last two dims or first dims to match M\n    # We want to multiply each row of P by \"flattened\" T\n    # Let's flatten T to shape (M, K) where K = third dimension, or flatten T to 2D\n    T_flat = T.reshape(M, -1)  # shape (M, K)\n    result = P @ T_flat  # shape (N, K)\n    # Apply PCA to reduce to 2 components\n    pca = PCA(n_components=2)\n    pca_result = pca.fit_transform(result)  # shape (N, 2)\n    \n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    ax.set_title('PCA Result Visualization')\n    ax.set_xlabel('Principal Component 1')\n    ax.set_ylabel('Principal Component 2')\n    \n    return pca_result, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\n\ndef task_func(\n    P: np.ndarray,\n    T: np.ndarray,\n    n_clusters: int = 3,\n    random_state: int = 0,\n    n_init: int = 10,\n) -> (np.ndarray, plt.Axes):\n    # Check dimensions\n    if P.shape[1] != T.shape[0]:\n        raise ValueError(\"P's columns must match T's first dimension\")\n    \n    # Multiply matrix P with each slice of tensor T along the last two dimensions\n    # T is 3D: (D1, D2, D3)\n    # Apply P (shape: (p,m)) to T (shape: (m,d2,d3)) => result shape: (p,d2,d3)\n    result = np.tensordot(P, T, axes=([1],[0]))  # shape (p, d2, d3)\n    \n    # Flatten the result to 2D: samples x features\n    # Interpret each row in result as a sample: flatten (d2*d3)\n    flattened = result.reshape(result.shape[0], -1)  # shape (p, d2*d3)\n    \n    # Apply KMeans clustering on flattened data\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state, n_init=n_init)\n    cluster_result = kmeans.fit_predict(flattened)\n    \n    # Visualization using PCA to 2D\n    pca = PCA(n_components=2)\n    reduced_data = pca.fit_transform(flattened)\n    \n    fig, ax = plt.subplots()\n    scatter = ax.scatter(reduced_data[:,0], reduced_data[:,1], c=cluster_result, cmap='viridis', s=50)\n    ax.set_title('KMeans Clustering Visualization')\n    ax.set_xlabel('PCA Component 1')\n    ax.set_ylabel('PCA Component 2')\n    legend1 = ax.legend(*scatter.legend_elements(), title=\"Clusters\")\n    ax.add_artist(legend1)\n    \n    return cluster_result, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 36, in test_case_2\nAttributeError: 'bool' object has no attribute 'all'\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 52, in test_case_4\n  File \"<bigcode>\", line 29, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py\", line 1069, in fit_predict\n    return self.fit(X, sample_weight=sample_weight).labels_\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 1152, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py\", line 1484, in fit\n    self._check_params_vs_input(X)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py\", line 1416, in _check_params_vs_input\n    super()._check_params_vs_input(X, default_n_init=10)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py\", line 866, in _check_params_vs_input\n    raise ValueError(\nValueError: n_samples=4 should be >= n_clusters=5.\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 48, in test_case_3\nAssertionError: 4 != 12\n\n----------------------------------------------------------------------\nRan 7 tests in 0.280s\n\nFAILED (failures=1, errors=2)"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(n_points=100, random_seed=None):\n    if random_seed is not None:\n        np.random.seed(random_seed)\n    points = np.random.rand(n_points, 3)\n    \n    fig = plt.figure()\n    ax = fig.add_subplot(111, projection='3d')\n    ax.scatter(points[:, 0], points[:, 1], points[:, 2])\n    plt.close(fig)  # Prevent immediate display when called\n    return points, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nfrom scipy.spatial import Voronoi, voronoi_plot_2d\nimport matplotlib.pyplot as plt\ndef task_func(points, seed=0):\n    # Validate input type and shape\n    if not isinstance(points, (np.ndarray, list)):\n        raise TypeError(\"Input points should be a numpy array or a list.\")\n    points = np.asarray(points)\n    if points.ndim != 2 or points.shape[1] != 2:\n        raise ValueError(\"Input points must be of shape (N, 2).\")\n    if points.shape[0] < 2:\n        raise ValueError(\"At least two points are required to compute a Voronoi diagram.\")\n    \n    # Apply jittering for numerical stability\n    rng = np.random.default_rng(seed)\n    jittered_points = points + rng.normal(scale=1e-8, size=points.shape)\n    \n    # Calculate Voronoi diagram\n    vor = Voronoi(jittered_points)\n    \n    # Plot the Voronoi diagram\n    fig, ax = plt.subplots()\n    voronoi_plot_2d(vor, ax=ax, show_vertices=False, line_colors='orange', line_width=2)\n    ax.plot(points[:,0], points[:,1], 'bo', markersize=5)\n    ax.set_aspect('equal')\n    ax.set_title(\"Voronoi diagram\")\n    \n    return vor, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import make_blobs\n\ndef task_func(n_samples=100, centers=3, n_features=2, random_seed=42):\n    X, y = make_blobs(n_samples=n_samples, centers=centers, n_features=n_features, random_state=random_seed)\n    fig, ax = plt.subplots()\n    scatter = ax.scatter(X[:, 0], X[:, 1], c=y, cmap='viridis', edgecolor='k', s=50)\n    ax.set_title('Isotropic Gaussian Blobs')\n    ax.set_xlabel('Feature 1')\n    ax.set_ylabel('Feature 2')\n    return X, y, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(data, n_components=2, random_state=None):\n    pca = PCA(n_components=n_components, random_state=random_state)\n    transformed_data = pca.fit_transform(data)\n    \n    fig, ax = plt.subplots()\n    if n_components == 1:\n        ax.scatter(transformed_data[:, 0], np.zeros_like(transformed_data[:, 0]))\n        ax.set_xlabel(\"PC1\")\n        ax.set_yticks([])\n    else:\n        ax.scatter(transformed_data[:, 0], transformed_data[:, 1])\n        ax.set_xlabel(\"PC1\")\n        ax.set_ylabel(\"PC2\")\n    \n    ax.set_title(\"PCA Projection\")\n    plt.close(fig)\n    \n    return {\"transformed_data\": transformed_data, \"ax\": ax}\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\ndef task_func(mu=0, sigma=1):\n    x = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\n    y = norm.pdf(x, mu, sigma)\n    fig, ax = plt.subplots()\n    ax.plot(x, y)\n    ax.set_title(f'Normal Distribution (mu={mu}, sigma={sigma})')\n    ax.set_xlabel('x')\n    ax.set_ylabel('Probability Density')\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\n\ndef task_func(data: pd.DataFrame) -> (pd.DataFrame, list):\n    scaler = StandardScaler()\n    scaled_array = scaler.fit_transform(data.values)\n    standardized_data = pd.DataFrame(scaled_array, columns=data.columns, index=data.index)\n\n    num_features = len(data.columns)\n    fig, axes = plt.subplots(nrows=num_features, ncols=1, figsize=(6, 3*num_features))\n    if num_features == 1:\n        axes = [axes]\n\n    axes_list = []\n    for ax, col in zip(axes, data.columns):\n        ax.hist(standardized_data[col], bins=20)\n        ax.set_title(f'Histogram of standardized {col}')\n        axes_list.append(ax)\n\n    plt.tight_layout()\n    return standardized_data, axes_list\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_9 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 95, in test_case_9\n  File \"<bigcode>\", line 8, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/utils/_set_output.py\", line 157, in wrapped\n    data_to_wrap = f(self, X, *args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 916, in fit_transform\n    return self.fit(X, **fit_params).transform(X)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/preprocessing/_data.py\", line 839, in fit\n    return self.partial_fit(X, y, sample_weight)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 1152, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/preprocessing/_data.py\", line 875, in partial_fit\n    X = self._validate_data(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 605, in _validate_data\n    out = check_array(X, input_name=\"X\", **check_params)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 967, in check_array\n    raise ValueError(\nValueError: Found array with 0 sample(s) (shape=(0, 0)) while a minimum of 1 is required by StandardScaler.\n\n======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 15, in test_case_1\n  File \"<string>\", line 150, in standardized_data_test\nAssertionError: 'Histogram of standardized Feature1' != 'Histogram of Feature1'\n- Histogram of standardized Feature1\n?             -------------\n+ Histogram of Feature1\n\n\n======================================================================\nFAIL: test_case_13 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 138, in test_case_13\nAssertionError: KeyError not raised\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 22, in test_case_2\n  File \"<string>\", line 150, in standardized_data_test\nAssertionError: 'Histogram of standardized Feature1' != 'Histogram of Feature1'\n- Histogram of standardized Feature1\n?             -------------\n+ Histogram of Feature1\n\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 31, in test_case_3\n  File \"<string>\", line 150, in standardized_data_test\nAssertionError: 'Histogram of standardized Feature1' != 'Histogram of Feature1'\n- Histogram of standardized Feature1\n?             -------------\n+ Histogram of Feature1\n\n\n======================================================================\nFAIL: test_case_7 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 83, in test_case_7\nAssertionError: 7 != 5\n\n======================================================================\nFAIL: test_case_8 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 89, in test_case_8\nAssertionError: KeyError not raised\n\n----------------------------------------------------------------------\nRan 13 tests in 3.780s\n\nFAILED (failures=6, errors=1)"}}
{"result": "```python\nfrom scipy.spatial.distance import cdist\nfrom sklearn.datasets import make_blobs\nimport matplotlib.pyplot as plt\n\ndef task_func(n_samples=200, centers=4, plot_path=None, random_seed=None):\n    X, y = make_blobs(n_samples=n_samples, centers=centers, n_features=2, random_state=random_seed)\n\n    distances = cdist(X, X, metric='euclidean')\n\n    fig, ax = plt.subplots()\n    scatter = ax.scatter(X[:, 0], X[:, 1], c=y, cmap='viridis', edgecolor='k')\n    ax.set_xlabel(\"Feature 1\")\n    ax.set_ylabel(\"Feature 2\")\n    ax.set_title(\"Synthetic 2D Dataset with Blobs\")\n    cbar = plt.colorbar(scatter, ax=ax)\n    cbar.set_label(\"Cluster label\")\n\n    if plot_path is None:\n        return distances, ax\n    else:\n        plt.savefig(plot_path)\n        plt.close(fig)\n        return distances, None\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndef task_func(n_components=2, N_SAMPLES=500, N_FEATURES=50, random_seed=None):\n    rng = np.random.default_rng(random_seed)\n    # Generate high-dimensional data\n    data = rng.normal(size=(N_SAMPLES, N_FEATURES))\n\n    # Run PCA\n    pca = PCA(n_components=n_components)\n    transformed_data = pca.fit_transform(data)\n\n    heatmap_axes = None\n    if n_components > 1:\n        # Compute covariance matrix of transformed data\n        cov_matrix = np.cov(transformed_data, rowvar=False)\n\n        # Plot heatmap\n        fig, heatmap_axes = plt.subplots(figsize=(8, 6))\n        sns.heatmap(cov_matrix, ax=heatmap_axes, cmap=\"viridis\", cbar=True,\n                    xticklabels=True, yticklabels=True)\n        heatmap_axes.set_title(\"Covariance Matrix Heatmap of Transformed Data\")\n\n    return transformed_data, heatmap_axes\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\ndef task_func(n_samples=100, n_features=10, random_seed=None):\n    # Generate synthetic regression data\n    X, y = datasets.make_regression(n_samples=n_samples, n_features=n_features, noise=10.0, random_state=random_seed)\n    \n    # Split into train and test\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=random_seed)\n    \n    # Fit linear regression model\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n    \n    # Predict on test set\n    predictions = model.predict(X_test)\n    \n    # Calculate mean squared error\n    mse = mean_squared_error(y_test, predictions)\n    \n    # Return predictions, coefficients, intercept, and mse\n    return predictions, model.coef_, model.intercept_, mse\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 34, in test_case_1\nAssertionError: 103.18114916840871 != 8.252779390363411\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 46, in test_case_2\nAssertionError: 102.6567345829142 != 23.23351897728344\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 71, in test_case_5\nAssertionError: 101.42327812255411 != 0.010142327812255192 within 4 places (101.41313579474185 difference)\n\n----------------------------------------------------------------------\nRan 9 tests in 0.487s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport re\nimport string\nfrom random import choice\ndef task_func(n, pattern):\n    chars = string.ascii_letters\n    while True:\n        s = ''.join(choice(chars) for _ in range(n))\n        if re.fullmatch(pattern, s):\n            return s\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport shutil\nimport glob\n\ndef task_func(src_dir, dest_dir, ext):\n    if not os.path.isdir(src_dir):\n        raise FileNotFoundError(f\"Source directory does not exist: {src_dir}\")\n    if not os.path.isdir(dest_dir):\n        raise FileNotFoundError(f\"Destination directory does not exist: {dest_dir}\")\n\n    pattern = os.path.join(src_dir, f\"*{ext}\")\n    files_to_move = glob.glob(pattern)\n    moved_files = []\n\n    for file_path in files_to_move:\n        filename = os.path.basename(file_path)\n        dest_path = os.path.join(dest_dir, filename)\n        if not os.path.exists(dest_path):\n            shutil.move(file_path, dest_path)\n            moved_files.append(dest_path)\n\n    return moved_files\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_move_specified_extension_files (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 47, in test_move_specified_extension_files\n  File \"<bigcode>\", line 8, in task_func\nFileNotFoundError: Source directory does not exist: /fake/source\n\n======================================================================\nFAIL: test_empty_extension (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_empty_extension\nAssertionError: 1 != 0 : Should not move files when the extension is empty.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.007s\n\nFAILED (failures=1, errors=1)"}}
{"result": "```python\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(mean, std_dev, n):\n    samples = np.random.normal(loc=mean, scale=std_dev, size=n)\n    x = np.linspace(mean - 4*std_dev, mean + 4*std_dev, 1000)\n    pdf = stats.norm.pdf(x, loc=mean, scale=std_dev)\n    \n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g', edgecolor='black')\n    plt.plot(x, pdf, 'r-', lw=2)\n    plt.title('Histogram and PDF of Normal Distribution')\n    plt.xlabel('Value')\n    plt.ylabel('Density')\n    plt.grid(True)\n    plt.show()\n    \n    return samples\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data: pd.DataFrame) -> (pd.DataFrame, plt.Axes):\n    scaler = MinMaxScaler()\n    normalized_array = scaler.fit_transform(data.values)\n    normalized_data = pd.DataFrame(normalized_array, index=data.index, columns=data.columns)\n    \n    plt.figure(figsize=(10, 8))\n    ax = sns.heatmap(normalized_data, cmap=\"YlGnBu\", cbar_kws={'label': 'Normalized Value'})\n    plt.close()  # To avoid double display in some environments\n    return normalized_data, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\n\ndef task_func(L):\n    if not isinstance(L, list) or any(not isinstance(sublist, list) for sublist in L):\n        raise TypeError(\"Input must be a list of lists.\")\n    # Flatten non-empty sublists and check for integer elements\n    elements = []\n    for sublist in L:\n        if len(sublist) == 0:\n            continue\n        if any(not isinstance(x, int) for x in sublist):\n            raise TypeError(\"All elements must be integers.\")\n        elements.extend(sublist)\n    elements = np.array(elements)\n    unique_values = np.unique(elements)\n    bins = np.arange(unique_values.min() - 0.5, unique_values.max() + 1.5)\n    s = pd.Series(elements)\n    ax = s.hist(bins=bins, rwidth=0.8)\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_11 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 67, in test_case_11\n  File \"<bigcode>\", line 14, in task_func\nTypeError: All elements must be integers.\n\n======================================================================\nERROR: test_case_12 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 76, in test_case_12\n  File \"<bigcode>\", line 14, in task_func\nTypeError: All elements must be integers.\n\n======================================================================\nFAIL: test_case_10 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 63, in test_case_10\nAssertionError: 11 != 9\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_case_3\nAssertionError: 9 != 11\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 26, in test_case_4\nAssertionError: 9 != 11\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 32, in test_case_5\nAssertionError: 9 != 11\n\n======================================================================\nFAIL: test_case_7 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 45, in test_case_7\nAssertionError: 9 != 11\n\n----------------------------------------------------------------------\nRan 13 tests in 8.053s\n\nFAILED (failures=5, errors=2)"}}
{"result": "```python\nimport json\nimport re\nimport pandas as pd\n\ndef task_func(json_str):\n    if not json_str or not json_str.strip():\n        return pd.DataFrame()\n    try:\n        data = json.loads(json_str)\n    except Exception:\n        return pd.DataFrame()\n\n    if not isinstance(data, dict):\n        return pd.DataFrame()\n\n    def extract_and_double_number_from_string(s):\n        # Extract first number (int or float) from string using regex\n        match = re.search(r'[+-]?(\\d+(\\.\\d*)?|\\.\\d+)', s)\n        if match:\n            num = float(match.group())\n            return num * 2\n        return s\n\n    def double_value(v):\n        if isinstance(v, (int, float)):\n            return float(v) * 2\n        elif isinstance(v, list):\n            new_list = []\n            for item in v:\n                if isinstance(item, (int, float)):\n                    new_list.append(float(item) * 2)\n                elif isinstance(item, str):\n                    # try to extract number from string & double if found\n                    new_val = extract_and_double_number_from_string(item)\n                    new_list.append(new_val)\n                else:\n                    new_list.append(item)\n            return new_list\n        elif isinstance(v, str):\n            # Extract number from string and double if possible\n            return extract_and_double_number_from_string(v)\n        else:\n            # Other types unchanged\n            return v\n\n    normalized_dict = {k: double_value(v) for k, v in data.items()}\n\n    # Check if at least one valid key for DataFrame columns: list or scalar numeric/str\n    # Pandas can create dataframe from dict of lists or dict of scalars (treated as single row)\n    try:\n        df = pd.DataFrame([normalized_dict])\n    except Exception:\n        return pd.DataFrame()\n\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 9, in test_case_1\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1163, in assert_frame_equal\n    raise_assert_detail(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame are different\n\nDataFrame shape mismatch\n[left]:  (1, 3)\n[right]: (3, 3)\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_case_2\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1163, in assert_frame_equal\n    raise_assert_detail(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame are different\n\nDataFrame shape mismatch\n[left]:  (1, 0)\n[right]: (0, 0)\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_case_3\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1163, in assert_frame_equal\n    raise_assert_detail(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame are different\n\nDataFrame shape mismatch\n[left]:  (1, 4)\n[right]: (3, 4)\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 32, in test_case_5\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1163, in assert_frame_equal\n    raise_assert_detail(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame are different\n\nDataFrame shape mismatch\n[left]:  (1, 2)\n[right]: (3, 2)\n\n----------------------------------------------------------------------\nRan 5 tests in 0.012s\n\nFAILED (failures=4)"}}
{"result": "```python\nimport subprocess\nimport os\nimport time\nfrom datetime import datetime\ndef task_func(script_dir, scripts, delay):\n    if delay < 0:\n        raise ValueError(\"Delay cannot be negative\")\n    if not scripts:\n        raise ValueError(\"No scripts provided\")\n    timestamps = []\n    for i, script in enumerate(scripts):\n        script_path = os.path.join(script_dir, script)\n        start_time = datetime.now()\n        timestamps.append(start_time)\n        subprocess.run([\"bash\", script_path], check=True)\n        if i < len(scripts) - 1:\n            time.sleep(delay)\n    return timestamps\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 29, in test_case_1\nTypeError: strptime() argument 1 must be str, not datetime.datetime\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 40, in test_case_2\nTypeError: strptime() argument 1 must be str, not datetime.datetime\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 47, in test_case_3\n  File \"<bigcode>\", line 16, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/subprocess.py\", line 526, in run\n    raise CalledProcessError(retcode, process.args,\nsubprocess.CalledProcessError: Command '['bash', \"/tmp/tmpcwk2xbdf/this-doesn't-exist\"]' returned non-zero exit status 127.\n\n----------------------------------------------------------------------\nRan 6 tests in 2.039s\n\nFAILED (errors=3)"}}
{"result": "```python\nimport subprocess\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(script_path, output_file_path):\n    try:\n        result = subprocess.run([\"python\", script_path], check=True, capture_output=True, text=True)\n    except subprocess.CalledProcessError as e:\n        raise ValueError(\"Script failed to execute\") from e\n\n    try:\n        df = pd.read_csv(output_file_path)\n    except Exception as e:\n        raise ValueError(\"Failed to read the CSV file\") from e\n\n    if df.shape[1] != 2:\n        raise ValueError(\"CSV does not contain exactly 2 columns\")\n    \n    x = df.iloc[:, 0]\n    y = df.iloc[:, 1]\n\n    fig, ax = plt.subplots()\n    ax.bar(x, y)\n    ax.set_xlabel(df.columns[0])\n    ax.set_ylabel(df.columns[1])\n    ax.set_title(\"Bar graph of CSV data\")\n\n    return df, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<bigcode>\", line 7, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/subprocess.py\", line 526, in run\n    raise CalledProcessError(retcode, process.args,\nsubprocess.CalledProcessError: Command '['python', '/tmp/tmpalljxvq0/script.sh']' returned non-zero exit status 1.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 49, in test_case_1\n  File \"<bigcode>\", line 9, in task_func\nValueError: Script failed to execute\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<bigcode>\", line 7, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/subprocess.py\", line 526, in run\n    raise CalledProcessError(retcode, process.args,\nsubprocess.CalledProcessError: Command '['python', '/tmp/tmp1gg_9cu9/script.sh']' returned non-zero exit status 1.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 64, in test_case_2\n  File \"<bigcode>\", line 9, in task_func\nValueError: Script failed to execute\n\n======================================================================\nERROR: test_case_7 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<bigcode>\", line 7, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/subprocess.py\", line 526, in run\n    raise CalledProcessError(retcode, process.args,\nsubprocess.CalledProcessError: Command '['python', '/tmp/tmpffyn56a7/script.sh']' returned non-zero exit status 1.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 111, in test_case_7\n  File \"<bigcode>\", line 9, in task_func\nValueError: Script failed to execute\n\n======================================================================\nERROR: test_case_8 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<bigcode>\", line 7, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/subprocess.py\", line 526, in run\n    raise CalledProcessError(retcode, process.args,\nsubprocess.CalledProcessError: Command '['python', '/tmp/tmp8bhu6e73/script.sh']' returned non-zero exit status 1.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 120, in test_case_8\n  File \"<bigcode>\", line 9, in task_func\nValueError: Script failed to execute\n\n----------------------------------------------------------------------\nRan 9 tests in 0.214s\n\nFAILED (errors=4)"}}
{"result": "```python\nimport subprocess\nimport psutil\nimport time\nimport os\ndef task_func(script_path: str, timeout=10) -> dict:\n    if not os.path.isfile(script_path):\n        raise FileNotFoundError(f\"Script path does not exist: {script_path}\")\n\n    proc = subprocess.Popen(['/bin/bash', script_path])\n    try:\n        p = psutil.Process(proc.pid)\n    except psutil.NoSuchProcess:\n        proc.wait()\n        return {'CPU Usage': 0.0, 'Memory Usage': 0}\n\n    cpu_usage = 0.0\n    memory_usage = 0\n    last_cpu_times = None\n    last_rss = None\n\n    start_time = time.time()\n    while True:\n        if time.time() - start_time > timeout:\n            try:\n                proc.terminate()\n            except Exception:\n                pass\n            proc.wait()\n            break\n\n        if proc.poll() is not None:\n            # process finished\n            break\n\n        try:\n            if p.status() == psutil.STATUS_ZOMBIE:\n                break\n\n            cpu_times = p.cpu_times()\n            rss = p.memory_info().rss\n\n            # accumulate CPU time as user+system difference\n            cur_cpu_time = cpu_times.user + cpu_times.system\n            if last_cpu_times is None:\n                last_cpu_times = cur_cpu_time\n            else:\n                diff = cur_cpu_time - last_cpu_times\n                if diff > 0:\n                    cpu_usage += diff * 100  # CPU time to CPU%\n\n                last_cpu_times = cur_cpu_time\n\n            # accumulate memory increments\n            if last_rss is None:\n                last_rss = rss\n            else:\n                if rss > last_rss:\n                    memory_usage += (rss - last_rss)\n                last_rss = rss\n\n        except (psutil.NoSuchProcess, psutil.ZombieProcess):\n            break\n\n        time.sleep(0.1)\n\n    # Final cpu time check after finishing\n    try:\n        cpu_times = p.cpu_times()\n        cur_cpu_time = cpu_times.user + cpu_times.system\n        if last_cpu_times is not None:\n            diff = cur_cpu_time - last_cpu_times\n            if diff > 0:\n                cpu_usage += diff * 100\n    except (psutil.NoSuchProcess, psutil.ZombieProcess):\n        pass\n\n    return {'CPU Usage': cpu_usage, 'Memory Usage': memory_usage}\n```", "match": {"category": "timeout", "error": "Test execution timed out after 10 seconds"}}
{"result": "```python\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    data = {\n        'category': [random.choice(categories) for _ in range(num_rows)],\n        'value': [random.randint(1, 100) for _ in range(num_rows)]\n    }\n    df = pd.DataFrame(data)\n    counts = df['category'].value_counts().sort_index()\n    fig, ax = plt.subplots()\n    counts.plot(kind='bar', ax=ax)\n    ax.set_title('Category Counts')\n    ax.set_xlabel('Category')\n    ax.set_ylabel('Count')\n    plt.tight_layout()\n    return df, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Category'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 9, in test_case_1\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Category'\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Category'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 30, in test_case_5\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Category'\n\n======================================================================\nERROR: test_case_6 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Category'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 35, in test_case_6\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Category'\n\n----------------------------------------------------------------------\nRan 9 tests in 0.402s\n\nFAILED (errors=3)"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef task_func(data_str, separator=\",\", bins=20):\n    if not data_str or not data_str.strip():\n        raise ValueError(\"Input data string is empty.\")\n    try:\n        data_list = data_str.split(separator)\n        data_list = [x.strip() for x in data_list]\n        data_int = pd.Series(data_list, dtype=\"int64\")\n    except Exception:\n        raise ValueError(\"Failed to convert data to int64.\")\n    fig, ax = plt.subplots()\n    ax.hist(data_int, bins=bins, grid=True, rwidth=0.9, color='#607c8e')\n    return data_int, ax\n```", "match": {"category": "timeout", "error": "Test execution timed out after 10 seconds"}}
{"result": "```python\nimport json\nfrom datetime import datetime\nfrom decimal import Decimal\n\ndef task_func(my_obj, My_class=None):\n    def default(o):\n        if isinstance(o, datetime):\n            return o.isoformat()\n        if isinstance(o, Decimal):\n            return float(o)\n        raise TypeError(f\"Object of type {o.__class__.__name__} is not JSON serializable\")\n    return json.dumps(my_obj, default=default)\n```", "match": {"category": "success"}}
{"result": "```python\nimport json\nfrom datetime import datetime\nimport numpy as np\nfrom decimal import Decimal\n\nclass CustomEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, datetime):\n            return obj.isoformat()\n        elif isinstance(obj, np.ndarray):\n            return obj.tolist()\n        elif isinstance(obj, Decimal):\n            return float(obj)\n        return super().default(obj)\n\ndef task_func(my_obj):\n    try:\n        return json.dumps(my_obj, cls=CustomEncoder)\n    except TypeError as e:\n        raise e\n```", "match": {"category": "success"}}
{"result": "```python\nimport json\nfrom enum import Enum\nclass Color(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\ndef task_func(my_obj):\n    class EnumEncoder(json.JSONEncoder):\n        def default(self, o):\n            if isinstance(o, Enum):\n                return o.name\n            return super().default(o)\n    return json.dumps(my_obj, cls=EnumEncoder)\n```", "match": {"category": "success"}}
{"result": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(n, seed=0):\n    np.random.seed(seed)\n    x = np.random.rand(n)\n    y = np.random.rand(n)\n    points = list(zip(x, y))\n    fig, ax = plt.subplots()\n    ax.scatter(x, y)\n    ax.set_title(\"Scatter plot of random points\")\n    ax.set_xlabel(\"X\")\n    ax.set_ylabel(\"Y\")\n    return fig, points\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(file_path=\"data.csv\", columns=[\"A\", \"B\", \"C\"]):\n    df = pd.read_csv(file_path)\n    df[columns] = df[columns].apply(pd.to_numeric, errors='coerce').astype(float)\n    cube_root_series = df[columns].applymap(lambda x: np.cbrt(x))\n    fig, ax = plt.subplots()\n    df[columns].plot(ax=ax, kind='line')\n    return df, ax, cube_root_series\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 77, in test_case_4\nAssertionError: Exception not raised\n\n----------------------------------------------------------------------\nRan 5 tests in 0.162s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n\ndef task_func(student_grades, possible_grades=[\"A\", \"B\", \"C\", \"D\", \"F\"]):\n    # Normalize possible grades to uppercase for comparison, keep original case with whitespace\n    # We consider grades case-insensitive but whitespace-sensitive\n    # So for matching, we convert student grades to uppercase but keep whitespace as is\n    # We'll create a set of possible grades uppercase normalized (but with original whitespace)\n    # Actually, possible_grades are probably clean with no whitespace, so we trust that.\n\n    # Create a dict mapping uppercase possible grades to original possible grades to preserve case/whitespace\n    possible_set = set(pg.upper() for pg in possible_grades)\n\n    # Filter student_grades: only those whose upper matches a possible grade (case-insensitive)\n    filtered = [g for g in student_grades if g.upper() in possible_set]\n\n    # Count occurrences by grade uppercase normalized (with whitespace) so the grade key preserves whitespace\n    # We want case-insensitive matching, so count with uppercase keys but output counts indexed by original possible_grades\n    # That means we need to count keys normalized (grade upper) but preserve the whitespace in original grades?\n    # The instruction says \"Grades are case-insensitive but whitespace-sensitive\"\n    # So \" A\" and \"A\" are different grades because of whitespace.\n    # However, for checking membership, uppercase is used but whitespace must be exact.\n    # So \" A\" with a leading space is distinct from \"A\".\n    # Therefore, we match case-insensitive but whitespace sensitive.\n    # So for each student grade, to check if grade is valid:\n    # For possible_grades, list is e.g. [\"A\",\"B\",\"C\",\"D\",\"F\"] no whitespace.\n    # So \" A\" (with leading space) is not in possible_grades as is, so ignore it.\n    # For \"a\", upper is \"A\" which is in possible_set -> accepted.\n    # For \" A\", upper is \" A\" since whitespace is preserved, .upper() turns only letters up, whitespaces remain,\n    # so \" A\".upper() == \" A\", \" A\" is not in possible_set.\n    # So actually we need to check the student grade against possible_grades case-insensitive but must have exact whitespace.\n    # So we can do: for each grade in possible_grades, build a set of all possible uppercase versions\n    # Actually that is complex, better to check membership by normalizing the student grade with .upper()\n    # but also force same whitespace => student grade must match possible grade ignoring case only, with exact whitespace.\n\n    # So the membership test is: does the student grade match any possible grade ignoring case but with exact whitespace?\n\n    # We'll do this by building a set of possible_grades uppercased, and for each student grade, check if its uppercased\n    # form matches any possible grade uppercased, with exact whitespaces.\n\n    # So for membership: for each pg in possible_grades, keep the original.\n    # Then student grade g is valid if exists pg in possible_grades with same stripped and same whitespace:\n    # But whitespace is sensitive so must be exact.\n\n    # We'll check membership by searching possible_grades for any pg where pg.upper() == g.upper() and len(pg)==len(g).\n\n    # Instead of a set, check membership with a list comprehension.\n    def is_valid_grade(g):\n        return any(pg.upper() == g.upper() and len(pg) == len(g) for pg in possible_grades)\n\n    filtered = [g for g in student_grades if is_valid_grade(g)]\n\n    # Count occurrences of each grade *with original case and whitespace* as appeared in filtered\n    # But since \"a\" and \"A\" represent the same grade (case-insensitive), we should unify to a canonical form:\n    # We want 'Grade' index to be the entries from possible_grades in their original form.\n    # So counts indexed by possible_grades, counting how many student grades match that possible grade ignoring case.\n\n    counts = Counter()\n    for g in filtered:\n        for pg in possible_grades:\n            if pg.upper() == g.upper() and len(pg) == len(g):\n                counts[pg] += 1\n                break\n\n    # Create DataFrame indexed by possible_grades with corresponding counts, zero if missing\n    df = pd.DataFrame({\n        'Count': [counts.get(pg, 0) for pg in possible_grades]\n    }, index=possible_grades)\n    df.index.name = 'Grade'\n\n    # Plot bar chart\n    fig, ax = plt.subplots()\n    df['Count'].plot(kind='bar', ax=ax)\n    ax.set_title('Grade Distribution')\n    ax.set_xlabel('Grade')\n    ax.set_ylabel('Number of Students')\n\n    return df, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(myList):\n    values = np.array(myList)\n    min_val = np.floor(values.min())\n    max_val = np.ceil(values.max())\n    bins = np.arange(min_val, max_val + 2) - 0.5  # edges aligned to integers\n    \n    fig, ax = plt.subplots()\n    ax.hist(values, bins=bins, edgecolor='black')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Histogram of Values')\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nfrom collections import Counter\nimport pandas as pd\ndef task_func(myList):\n    counts = Counter(myList)\n    df = pd.DataFrame(list(counts.items()), columns=['word', 'count'])\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 10, in test_case_1\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1163, in assert_frame_equal\n    raise_assert_detail(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame are different\n\nDataFrame shape mismatch\n[left]:  (3, 2)\n[right]: (3, 1)\n\n======================================================================\nFAIL: test_case_10 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 59, in test_case_10\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1163, in assert_frame_equal\n    raise_assert_detail(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame are different\n\nDataFrame shape mismatch\n[left]:  (3, 2)\n[right]: (1, 1)\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 15, in test_case_2\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1163, in assert_frame_equal\n    raise_assert_detail(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame are different\n\nDataFrame shape mismatch\n[left]:  (1, 2)\n[right]: (1, 1)\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_case_3\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1163, in assert_frame_equal\n    raise_assert_detail(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame are different\n\nDataFrame shape mismatch\n[left]:  (0, 2)\n[right]: (0, 1)\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_case_4\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1163, in assert_frame_equal\n    raise_assert_detail(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame are different\n\nDataFrame shape mismatch\n[left]:  (1, 2)\n[right]: (1, 1)\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 30, in test_case_5\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1163, in assert_frame_equal\n    raise_assert_detail(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame are different\n\nDataFrame shape mismatch\n[left]:  (3, 2)\n[right]: (1, 1)\n\n======================================================================\nFAIL: test_case_6 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 35, in test_case_6\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1163, in assert_frame_equal\n    raise_assert_detail(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame are different\n\nDataFrame shape mismatch\n[left]:  (3, 2)\n[right]: (1, 1)\n\n======================================================================\nFAIL: test_case_7 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 42, in test_case_7\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1163, in assert_frame_equal\n    raise_assert_detail(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame are different\n\nDataFrame shape mismatch\n[left]:  (3, 2)\n[right]: (3, 1)\n\n======================================================================\nFAIL: test_case_8 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 49, in test_case_8\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1163, in assert_frame_equal\n    raise_assert_detail(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame are different\n\nDataFrame shape mismatch\n[left]:  (3, 2)\n[right]: (3, 1)\n\n======================================================================\nFAIL: test_case_9 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 54, in test_case_9\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1163, in assert_frame_equal\n    raise_assert_detail(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame are different\n\nDataFrame shape mismatch\n[left]:  (5, 2)\n[right]: (2, 1)\n\n----------------------------------------------------------------------\nRan 10 tests in 0.014s\n\nFAILED (failures=10)"}}
{"result": "```python\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\n\ndef task_func(myList, n_clusters):\n    if not isinstance(myList, list):\n        raise ValueError(\"Input must be a list of points.\")\n    if not all(isinstance(p, (list, tuple)) and len(p) == 2 and \n               all(isinstance(coord, (int, float)) for coord in p) for p in myList):\n        raise ValueError(\"Each point must be a list or tuple of two numeric coordinates.\")\n    if not isinstance(n_clusters, int) or n_clusters <= 0:\n        raise ValueError(\"Number of clusters must be a positive integer.\")\n    if len(myList) < n_clusters:\n        raise ValueError(\"Number of clusters cannot be greater than number of points.\")\n\n    points = myList\n    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)\n    labels = kmeans.fit_predict(points)\n    centers = kmeans.cluster_centers_\n\n    fig, ax = plt.subplots()\n    for i in range(n_clusters):\n        cluster_points = [points[j] for j in range(len(points)) if labels[j] == i]\n        xs, ys = zip(*cluster_points)\n        ax.scatter(xs, ys)\n\n    ax.scatter(centers[:, 0], centers[:, 1], c='red', marker='x', s=100)\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 11, in test_case_1\nTypeError: 'NoneType' object is not iterable\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 17, in test_case_2\nTypeError: 'NoneType' object is not iterable\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 48, in test_case_5\nTypeError: 'NoneType' object is not iterable\n\n----------------------------------------------------------------------\nRan 5 tests in 0.311s\n\nFAILED (errors=3)"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport itertools\ndef task_func(n_walks, n_steps, seed=None):\n    if not isinstance(n_walks, int) or n_walks <= 0:\n        raise ValueError(\"n_walks must be a positive integer\")\n    if not isinstance(n_steps, int) or n_steps <= 0:\n        raise ValueError(\"n_steps must be a positive integer\")\n    colors = ['b', 'g', 'r', 'c', 'm', 'y', 'k']\n    rng = np.random.default_rng(seed)\n    # Generate steps: -1 or 1 for each step of each walk\n    steps = rng.choice([-1, 1], size=(n_walks, n_steps))\n    # Cumulative sum to get positions\n    walks = np.cumsum(steps, axis=1)\n    fig, ax = plt.subplots()\n    color_cycle = itertools.cycle(colors)\n    x = np.arange(1, n_steps+1)\n    for i in range(n_walks):\n        ax.plot(x, walks[i], color=next(color_cycle))\n    ax.set_xlabel(\"Step\")\n    ax.set_ylabel(\"Position\")\n    ax.set_title(f\"{n_walks} Random Walks with {n_steps} Steps\")\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_case_2\n  File \"<bigcode>\", line 7, in task_func\nValueError: n_walks must be a positive integer\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 18, in test_case_3\n  File \"<bigcode>\", line 9, in task_func\nValueError: n_steps must be a positive integer\n\n----------------------------------------------------------------------\nRan 6 tests in 0.068s\n\nFAILED (errors=2)"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\ndef task_func(n_samples=1000, mu=0, sigma=1, random_seed=0):\n    np.random.seed(random_seed)\n    samples = np.random.normal(mu, sigma, n_samples)\n    fig, ax = plt.subplots()\n    ax.hist(samples, bins=30, density=True, alpha=0.6, color='blue', edgecolor='black')\n    x = np.linspace(mu - 4*sigma, mu + 4*sigma, 500)\n    pdf = norm.pdf(x, mu, sigma)\n    ax.plot(x, pdf, 'r-', linewidth=2)\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Density')\n    ax.set_title(f'Histogram and PDF of N({mu}, {sigma}^2)')\n    return ax, samples\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_10 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 92, in test_case_10\nAssertionError: Exception not raised\n\n======================================================================\nFAIL: test_case_9 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 88, in test_case_9\nAssertionError: Exception not raised\n\n----------------------------------------------------------------------\nRan 12 tests in 0.390s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport pandas as pd\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\n\ndef task_func(data, date_format, country, country_codes=None):\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data must be a pandas DataFrame.\")\n    if not isinstance(date_format, str):\n        raise ValueError(\"date_format must be a string.\")\n    if not isinstance(country_codes, dict):\n        raise ValueError(\"country_codes must be a dictionary.\")\n    if country not in country_codes:\n        raise ValueError(f\"country '{country}' is not in country_codes.\")\n\n    # Extract the relevant column based on the country (assuming country_codes maps country to column name)\n    column = country_codes[country]\n    if column not in data.columns:\n        raise ValueError(f\"Column '{column}' for country '{country}' not found in DataFrame.\")\n\n    # Convert the column to datetime using the provided format\n    try:\n        dates = pd.to_datetime(data[column], format=date_format)\n    except Exception as e:\n        raise ValueError(f\"Error converting data to datetime with format '{date_format}': {e}\")\n\n    fig, ax = plt.subplots()\n    ax.hist(dates.dropna(), bins='auto')\n    ax.set_title('Date Distribution')\n    ax.set_ylabel('Frequency')\n\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_custom_country_codes (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_custom_country_codes\n  File \"<bigcode>\", line 19, in task_func\nValueError: Column 'en_US' for country 'Mars' not found in DataFrame.\n\n======================================================================\nERROR: test_histogram_values (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_histogram_values\n  File \"<bigcode>\", line 12, in task_func\nValueError: country_codes must be a dictionary.\n\n======================================================================\nERROR: test_valid_data (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 10, in test_valid_data\n  File \"<bigcode>\", line 12, in task_func\nValueError: country_codes must be a dictionary.\n\n----------------------------------------------------------------------\nRan 6 tests in 0.003s\n\nFAILED (errors=3)"}}
{"result": "```python\nimport matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\nimport numpy as np\n\ndef task_func(X, Y):\n    def quad_func(x, a, b, c):\n        return a*x**2 + b*x + c\n\n    params, _ = curve_fit(quad_func, X, Y)\n    a, b, c = params\n\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, label='Data')\n    x_fit = np.linspace(min(X), max(X), 300)\n    y_fit = quad_func(x_fit, a, b, c)\n    ax.plot(x_fit, y_fit, 'r-', label=f'Fit: {a:.3f}x\u00b2 + {b:.3f}x + {c:.3f}')\n    ax.legend()\n    ax.set_xlabel('X')\n    ax.set_ylabel('Y')\n    ax.set_title('Quadratic Fit')\n\n    return (a, b, c), ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 85, in test_case_5\nAssertionError: TypeError not raised\n\n----------------------------------------------------------------------\nRan 6 tests in 0.110s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(N=100, CATEGORIES=[\"A\", \"B\", \"C\", \"D\", \"E\"], seed=42):\n    np.random.seed(seed)\n    n_cat = len(CATEGORIES)\n    if N >= n_cat:\n        # First, ensure each category appears at least once\n        cats = CATEGORIES.copy()\n        # Then fill the rest with random categories\n        cats += list(np.random.choice(CATEGORIES, N - n_cat, replace=True))\n        np.random.shuffle(cats)\n    else:\n        # Sample without replacement from CATEGORIES\n        cats = list(np.random.choice(CATEGORIES, N, replace=False))\n    x = np.random.rand(N)\n    y = np.random.rand(N)\n    df = pd.DataFrame({\"x\": x, \"y\": y, \"category\": cats})\n    fig, ax = plt.subplots()\n    for cat in sorted(df['category'].unique()):\n        sub_df = df[df['category'] == cat]\n        ax.scatter(sub_df['x'], sub_df['y'], label=cat)\n    ax.legend(title=\"category\")\n    ax.set_xlabel(\"x\")\n    ax.set_ylabel(\"y\")\n    return df, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport re\nimport random\ndef task_func(data_list, seed=None):\n    if seed is not None:\n        random.seed(seed)\n    original_strings = []\n    modified_strings = []\n    for s in data_list:\n        original_strings.append(s)\n        parts = [p.strip() for p in s.split(',')]\n        if parts:\n            idx = random.randrange(len(parts))\n            del parts[idx]\n        modified_strings.append(', '.join(parts))\n    return pd.DataFrame({'Original String': original_strings, 'Modified String': modified_strings})\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 34, in test_case_5\nAssertionError: 'apple' != ''\n- apple\n+ \n\n\n======================================================================\nFAIL: test_case_6 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 40, in test_case_6\n  File \"<string>\", line 66, in _test_dataframe\nAssertionError: False is not true\n\n----------------------------------------------------------------------\nRan 9 tests in 0.006s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport random\nimport string\nimport pandas as pd\ndef task_func(data_list, seed=0):\n    random.seed(seed)\n    modified = []\n    for s in data_list:\n        parts = s.split(',')\n        if not parts:\n            modified.append(s)\n            continue\n        idx = random.randint(0, len(parts)-1)\n        length = len(parts[idx])\n        replacement = ''.join(random.choices(string.ascii_lowercase, k=length))\n        parts[idx] = replacement\n        modified.append(','.join(parts))\n    df = pd.DataFrame({'Original String': data_list, 'Modified String': modified})\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_11 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 93, in test_case_11\nAssertionError: False is not true : All items in the modified string should have leading and trailing whitespaces removed\n\n----------------------------------------------------------------------\nRan 11 tests in 0.005s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport re\nimport random\nimport pandas as pd\ndef task_func(data_list, seed=None):\n    if seed is not None:\n        random.seed(seed)\n    originals = []\n    shuff_strs = []\n    for s in data_list:\n        originals.append(s)\n        # Split by commas and strip whitespace\n        parts = [part.strip() for part in s.split(',')]\n        # Shuffle parts\n        shuffled_parts = parts[:]\n        random.shuffle(shuffled_parts)\n        shuff_strs.append(', '.join(shuffled_parts))\n    return pd.DataFrame({'Original String': originals, 'Shuffled String': shuff_strs})\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport random\nimport re\n\ndef task_func(data_list, seed=42):\n    random.seed(seed)\n    def randomize_string(s):\n        # Normalize spaces: ensure single space after each comma\n        normalized = re.sub(r'\\s*,\\s*', ', ', s.strip())\n        # Split by comma+space\n        parts = normalized.split(', ')\n        # Shuffle parts\n        random.shuffle(parts)\n        # Join back with ', '\n        return ', '.join(parts)\n\n    randomized = [randomize_string(s) for s in data_list]\n    return pd.DataFrame({'Original String': data_list, 'Randomized String': randomized})\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport random\nimport re\ndef task_func(data_list, seed=None):\n    if seed is not None:\n        random.seed(seed)\n\n    results = []\n\n    for s in data_list:\n        substrings = s.split(',')\n\n        # Do not strip, keep exact substring including whitespace\n        # e.g. ' apple ' is different from 'apple' and preserved as is\n\n        ops = ['remove', 'replace', 'shuffle', 'randomize']\n        # Remove is only possible if more than one substring\n        if len(substrings) == 1:\n            ops.remove('remove')\n\n        operation = random.choice(ops)\n\n        modified_substrings = substrings.copy()\n\n        if operation == 'remove':\n            # remove one randomly selected substring\n            idx = random.randrange(len(modified_substrings))\n            del modified_substrings[idx]\n\n        elif operation == 'replace':\n            idx = random.randrange(len(modified_substrings))\n            modified_substrings[idx] = 'random_string'\n\n        elif operation == 'shuffle':\n            # shuffle in place (random.shuffle)\n            random.shuffle(modified_substrings)\n\n        elif operation == 'randomize':\n            # new random order of substrings\n            # shuffle is already random order, but this can be considered same as shuffle,\n            # but to comply: create a new shuffled list differently\n            modified_substrings = random.sample(modified_substrings, len(modified_substrings))\n\n        modified_s = ','.join(modified_substrings)\n\n        results.append((s, modified_s))\n\n    df = pd.DataFrame(results, columns=['Original String', 'Modified String'])\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_8 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 71, in test_case_8\n  File \"<bigcode>\", line 12, in task_func\nAttributeError: 'int' object has no attribute 'split'\n\n======================================================================\nFAIL: test_case_7 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 57, in test_case_7\nAssertionError: Lists differ: [' b, c', ' e, f,d'] != ['b, c', 'e, f, d']\n\nFirst differing element 0:\n' b, c'\n'b, c'\n\n- [' b, c', ' e, f,d']\n?   -        -\n\n+ ['b, c', 'e, f, d']\n?                +\n : With a fixed seed, the modifications should be predictable and reproducible.\n\n----------------------------------------------------------------------\nRan 11 tests in 0.013s\n\nFAILED (failures=1, errors=1)"}}
{"result": "```python\nimport re\nimport pandas as pd\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    if pattern == \"\":\n        return df.copy()\n\n    regex = re.compile(pattern)\n\n    def reverse_matching_words(text: str) -> str:\n        words = text.split()\n        matching_words = [w for w in words if regex.fullmatch(w)]\n        rev_matching_iter = iter(matching_words[::-1])\n\n        def helper(word):\n            if regex.fullmatch(word):\n                return next(rev_matching_iter)\n            else:\n                return word\n\n        return ' '.join(helper(w) for w in words)\n\n    new_df = df.copy()\n    new_df[column_name] = new_df[column_name].astype(str).map(reverse_matching_words)\n    return new_df\n```", "match": {"category": "success"}}
{"result": "```python\nimport math\nimport numpy as np\nfrom datetime import datetime, timedelta\nimport pandas as pd\n\ndef task_func(\n    start_time,\n    end_time,\n    step,\n    columns=[\"Timestamp\", \"Sensor1\", \"Sensor2\", \"Sensor3\", \"SensorStatus\"],\n    sensor_statuses=[\"OK\", \"MAINTENANCE_REQUIRED\", \"ERROR\"],\n    random_seed=42,\n):\n    np.random.seed(random_seed)\n\n    # Ensure Timestamp is included in columns\n    if \"Timestamp\" not in columns:\n        columns = [\"Timestamp\"] + columns\n\n    # Parse start and end times if they are strings\n    if isinstance(start_time, str):\n        start_time = datetime.fromisoformat(start_time)\n    if isinstance(end_time, str):\n        end_time = datetime.fromisoformat(end_time)\n    \n    # Generate timestamps list\n    timestamps = []\n    current_time = start_time\n    while current_time <= end_time:\n        timestamps.append(current_time)\n        current_time += step if isinstance(step, timedelta) else timedelta(seconds=step)\n\n    # Prepare output data list\n    data = []\n    sensor1_col = next((col for col in columns if col.lower() == \"sensor1\"), None)\n    sensor2_col = next((col for col in columns if col.lower() == \"sensor2\"), None)\n    sensor3_col = next((col for col in columns if col.lower() == \"sensor3\"), None)\n    status_col = next((col for col in columns if col.lower() == \"sensorstatus\"), None)\n\n    for ts in timestamps:\n        # Convert timestamp to seconds since Unix epoch\n        ts_seconds = ts.timestamp()\n        noise_scale = 0.05\n\n        row = {}\n        row[\"Timestamp\"] = ts\n\n        if sensor1_col:\n            val1 = math.sin(ts_seconds) + np.random.normal(0, noise_scale)\n            row[sensor1_col] = val1\n        if sensor2_col:\n            val2 = math.cos(ts_seconds) + np.random.normal(0, noise_scale)\n            row[sensor2_col] = val2\n        if sensor3_col:\n            val3 = math.tan(ts_seconds) + np.random.normal(0, noise_scale)\n            # Clamp tan values to avoid extreme values\n            if val3 > 10:\n                val3 = 10 + np.random.normal(0, noise_scale)\n            elif val3 < -10:\n                val3 = -10 + np.random.normal(0, noise_scale)\n            row[sensor3_col] = val3\n        if status_col:\n            row[status_col] = np.random.choice(sensor_statuses)\n\n        # Fill extra columns with NaNs if they aren't set yet\n        for col in columns:\n            if col not in row:\n                row[col] = np.nan\n\n        data.append(row)\n\n    df = pd.DataFrame(data, columns=columns)\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 7, in test_case_1\n  File \"<bigcode>\", line 32, in task_func\nTypeError: unsupported operand type(s) for +=: 'int' and 'datetime.timedelta'\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_case_2\n  File \"<bigcode>\", line 32, in task_func\nTypeError: unsupported operand type(s) for +=: 'int' and 'datetime.timedelta'\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 33, in test_case_3\n  File \"<bigcode>\", line 32, in task_func\nTypeError: unsupported operand type(s) for +=: 'int' and 'datetime.timedelta'\n\n======================================================================\nERROR: test_case_6 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 48, in test_case_6\n  File \"<bigcode>\", line 32, in task_func\nTypeError: unsupported operand type(s) for +=: 'int' and 'datetime.timedelta'\n\n======================================================================\nERROR: test_case_7 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 58, in test_case_7\n  File \"<bigcode>\", line 32, in task_func\nTypeError: unsupported operand type(s) for +=: 'int' and 'datetime.timedelta'\n\n======================================================================\nERROR: test_case_8 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 64, in test_case_8\n  File \"<bigcode>\", line 32, in task_func\nTypeError: unsupported operand type(s) for +=: 'int' and 'datetime.timedelta'\n\n======================================================================\nERROR: test_case_9 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 70, in test_case_9\n  File \"<bigcode>\", line 32, in task_func\nTypeError: unsupported operand type(s) for +=: 'int' and 'datetime.timedelta'\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 39, in test_case_4\nAssertionError: ValueError not raised\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 43, in test_case_5\nAssertionError: ValueError not raised\n\n----------------------------------------------------------------------\nRan 9 tests in 0.009s\n\nFAILED (failures=2, errors=7)"}}
{"result": "```python\nfrom datetime import datetime, timedelta\nimport pytz\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(start_time, end_time):\n    \"\"\"\n    Plots the hourly difference in hours between UTC and specified global time zones across a date range.\n\n    Parameters:\n    - start_time (datetime): Start of the date range (inclusive). Should be timezone-naive or UTC.\n    - end_time (datetime): End of the date range (inclusive). Should be timezone-naive or UTC.\n\n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the plotted time differences.\n    \"\"\"\n\n    # Ensure inputs are datetime and timezone naive or UTC\n    if start_time.tzinfo is not None:\n        start_time = start_time.astimezone(pytz.utc).replace(tzinfo=None)\n    if end_time.tzinfo is not None:\n        end_time = end_time.astimezone(pytz.utc).replace(tzinfo=None)\n\n    # Define the time zones and colors\n    tz_names = [\n        \"UTC\",\n        \"America/Los_Angeles\",\n        \"Europe/Paris\",\n        \"Asia/Kolkata\",\n        \"Australia/Sydney\"\n    ]\n    colors = [\"b\", \"g\", \"r\", \"c\", \"m\", \"y\", \"k\"]\n\n    # Convert tz names to pytz timezone objects\n    tz_objs = [pytz.timezone(tz) for tz in tz_names]\n\n    # Create list of dates from start_time to end_time inclusive\n    # We'll take the date part of start_time and end_time\n    start_date = start_time.date()\n    end_date = end_time.date()\n    delta_days = (end_date - start_date).days\n\n    dates = [start_date + timedelta(days=i) for i in range(delta_days + 1)]\n\n    # For each date, create 24 datetime objects at each hour UTC (hour: 0 to 23)\n    utc = pytz.utc\n\n    hours = np.arange(24)\n\n    # Prepare data structure:\n    # For each tz, for each date, for each hour, compute difference = (tz local datetime hour - UTC hour) in hours\n    # We'll store a dict tz_name -> 2D array with shape (len(dates), 24) with differences\n\n    diffs = {}\n    for tz_name, tz in zip(tz_names, tz_objs):\n        diffs_array = np.zeros((len(dates), 24))\n        for i, date in enumerate(dates):\n            for h in range(24):\n                utc_dt = utc.localize(datetime.combine(date, datetime.min.time()) + timedelta(hours=h))\n                local_dt = utc_dt.astimezone(tz)\n                # Compute difference in hours = local hour + local minute/60 - UTC hour - UTC minute/60\n                utc_total_hours = utc_dt.hour + utc_dt.minute / 60 + utc_dt.second / 3600\n                local_total_hours = local_dt.hour + local_dt.minute / 60 + local_dt.second / 3600\n\n                # Because of possible day difference, compute total offset in hours:\n\n                # Calculate total offset = (local_dt - utc_dt).total_seconds() / 3600\n                offset_hours = (local_dt - utc_dt).total_seconds() / 3600\n                diffs_array[i, h] = offset_hours\n        diffs[tz_name] = diffs_array\n\n    # Now plot\n    fig, ax = plt.subplots(figsize=(12, 6))\n\n    # x axis: hours across all days concatenated: we can label as day-hour number or datetime strings\n\n    # Create x values from 0 to 24*number_of_days - 1\n    x = np.arange(len(dates) * 24)\n\n    # Create x labels for each day by 24-hour blocks\n    # For clarity, we can mark day boundaries with vertical lines and show date in xticks every ~day\n\n    for idx, tz_name in enumerate(tz_names):\n        color = colors[idx % len(colors)]\n        y = diffs[tz_name].flatten()\n        ax.plot(x, y, label=tz_name, color=color)\n\n    # Setup x-axis ticks: we will label dates at beginning of each day (every 24 hours)\n\n    tick_positions = np.arange(0, len(dates) * 24, 24)\n    tick_labels = [date.strftime('%Y-%m-%d') for date in dates]\n    ax.set_xticks(tick_positions)\n    ax.set_xticklabels(tick_labels, rotation=45, ha='right')\n\n    # Add vertical grid lines for each day\n    for pos in tick_positions:\n        ax.axvline(pos, color='gray', linestyle='--', linewidth=0.5)\n\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Offset from UTC (hours)')\n    ax.set_title(f'Hourly Difference Between UTC and Specified Time Zones\\nfrom {start_date} to {end_date}')\n    ax.legend()\n    ax.grid(True, axis='y')\n\n    plt.tight_layout()\n\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 6, in test_case_1\n  File \"<bigcode>\", line 20, in task_func\nAttributeError: 'str' object has no attribute 'tzinfo'\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 10, in test_case_2\n  File \"<bigcode>\", line 20, in task_func\nAttributeError: 'str' object has no attribute 'tzinfo'\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 14, in test_case_3\n  File \"<bigcode>\", line 20, in task_func\nAttributeError: 'str' object has no attribute 'tzinfo'\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 18, in test_case_4\n  File \"<bigcode>\", line 20, in task_func\nAttributeError: 'str' object has no attribute 'tzinfo'\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 22, in test_case_5\n  File \"<bigcode>\", line 20, in task_func\nAttributeError: 'str' object has no attribute 'tzinfo'\n\n======================================================================\nERROR: test_case_6 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_case_6\n  File \"<bigcode>\", line 20, in task_func\nAttributeError: 'str' object has no attribute 'tzinfo'\n\n----------------------------------------------------------------------\nRan 6 tests in 0.006s\n\nFAILED (errors=6)"}}
{"result": "```python\nfrom datetime import datetime\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(start_time, end_time, step, trend, seed=42):\n    np.random.seed(seed)\n    # Generate time range\n    times = pd.date_range(start=start_time, end=end_time, freq=step)\n    n = len(times)\n    \n    # Generate normal values\n    values = np.random.normal(loc=0, scale=1, size=n)\n    \n    # Add linear trend\n    trend_values = trend * np.arange(n)\n    values += trend_values\n    \n    # Create DataFrame\n    df = pd.DataFrame({'Time': times, 'Value': values})\n    \n    # Plotting\n    fig, ax = plt.subplots()\n    ax.plot(df['Time'], df['Value'])\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Value')\n    fig.autofmt_xdate()\n    plt.tight_layout()\n    \n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_case_1\n  File \"<bigcode>\", line 10, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/datetimes.py\", line 945, in date_range\n    dtarr = DatetimeArray._generate_range(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/arrays/datetimes.py\", line 398, in _generate_range\n    freq = to_offset(freq)\n  File \"pandas/_libs/tslibs/offsets.pyx\", line 4102, in pandas._libs.tslibs.offsets.to_offset\n  File \"pandas/_libs/tslibs/offsets.pyx\", line 4203, in pandas._libs.tslibs.offsets.to_offset\nValueError: Invalid frequency: 100\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_case_2\n  File \"<bigcode>\", line 10, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/datetimes.py\", line 945, in date_range\n    dtarr = DatetimeArray._generate_range(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/arrays/datetimes.py\", line 398, in _generate_range\n    freq = to_offset(freq)\n  File \"pandas/_libs/tslibs/offsets.pyx\", line 4102, in pandas._libs.tslibs.offsets.to_offset\n  File \"pandas/_libs/tslibs/offsets.pyx\", line 4203, in pandas._libs.tslibs.offsets.to_offset\nValueError: Invalid frequency: 100\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 40, in test_case_3\n  File \"<bigcode>\", line 10, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/datetimes.py\", line 945, in date_range\n    dtarr = DatetimeArray._generate_range(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/arrays/datetimes.py\", line 398, in _generate_range\n    freq = to_offset(freq)\n  File \"pandas/_libs/tslibs/offsets.pyx\", line 4102, in pandas._libs.tslibs.offsets.to_offset\n  File \"pandas/_libs/tslibs/offsets.pyx\", line 4203, in pandas._libs.tslibs.offsets.to_offset\nValueError: Invalid frequency: 100\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 60, in test_case_4\n  File \"<bigcode>\", line 10, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/datetimes.py\", line 945, in date_range\n    dtarr = DatetimeArray._generate_range(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/arrays/datetimes.py\", line 398, in _generate_range\n    freq = to_offset(freq)\n  File \"pandas/_libs/tslibs/offsets.pyx\", line 4102, in pandas._libs.tslibs.offsets.to_offset\n  File \"pandas/_libs/tslibs/offsets.pyx\", line 4203, in pandas._libs.tslibs.offsets.to_offset\nValueError: Invalid frequency: 100\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 64, in test_case_5\n  File \"<bigcode>\", line 10, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/datetimes.py\", line 945, in date_range\n    dtarr = DatetimeArray._generate_range(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/arrays/datetimes.py\", line 398, in _generate_range\n    freq = to_offset(freq)\n  File \"pandas/_libs/tslibs/offsets.pyx\", line 4102, in pandas._libs.tslibs.offsets.to_offset\n  File \"pandas/_libs/tslibs/offsets.pyx\", line 4203, in pandas._libs.tslibs.offsets.to_offset\nValueError: Invalid frequency: 100\n\n======================================================================\nERROR: test_case_8 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 76, in test_case_8\n  File \"<bigcode>\", line 10, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/datetimes.py\", line 945, in date_range\n    dtarr = DatetimeArray._generate_range(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/arrays/datetimes.py\", line 398, in _generate_range\n    freq = to_offset(freq)\n  File \"pandas/_libs/tslibs/offsets.pyx\", line 4102, in pandas._libs.tslibs.offsets.to_offset\n  File \"pandas/_libs/tslibs/offsets.pyx\", line 4203, in pandas._libs.tslibs.offsets.to_offset\nValueError: Invalid frequency: 100\n\n----------------------------------------------------------------------\nRan 8 tests in 0.002s\n\nFAILED (errors=6)"}}
{"result": "```python\nimport os\nimport pandas as pd\nimport re\ndef task_func(file_path: str) -> pd.DataFrame:\n    if not os.path.isfile(file_path):\n        raise FileNotFoundError(f\"No such file: '{file_path}'\")\n\n    pattern = re.compile(r'^(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d{6}) - (\\w+) - (.*)$')\n    timestamps = []\n    levels = []\n    messages = []\n\n    with open(file_path, 'r', encoding='utf-8') as f:\n        for line in f:\n            line = line.rstrip('\\n')\n            match = pattern.match(line)\n            if match:\n                timestamps.append(match.group(1))\n                levels.append(match.group(2))\n                messages.append(match.group(3))\n\n    if not timestamps:\n        return pd.DataFrame(columns=['Timestamp', 'Level', 'Message'])\n\n    df = pd.DataFrame({\n        'Timestamp': pd.to_datetime(timestamps),\n        'Level': levels,\n        'Message': messages\n    })\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nfrom datetime import datetime\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(start_time, end_time, step, amplitude, period, seed=0):\n    \"\"\"\n    Generate a time series with seasonality and plot it.\n\n    Parameters:\n    - start_time (str or datetime): Start UTC time (e.g. '2023-01-01 00:00:00')\n    - end_time (str or datetime): End UTC time (e.g. '2023-01-03 00:00:00')\n    - step (str): Pandas frequency string (e.g. '1H' for 1 hour)\n    - amplitude (float): Amplitude of the seasonal component\n    - period (int or float): Period of seasonality in number of steps\n    - seed (int): Random seed for reproducibility (default=0)\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot axes\n    \"\"\"\n    np.random.seed(seed)\n    # Create time index\n    times = pd.date_range(start=start_time, end=end_time, freq=step)\n    n = len(times)\n\n    # Generate seasonal component (sinusoidal)\n    x = np.arange(n)\n    seasonal = amplitude * np.sin(2 * np.pi * x / period)\n\n    # Optional: Add small noise\n    noise = np.random.normal(scale=0.1*amplitude, size=n)\n\n    values = seasonal + noise\n\n    # Create DataFrame\n    df = pd.DataFrame({'Timestamp': times, 'Value': values})\n\n    # Plot\n    fig, ax = plt.subplots(figsize=(10, 5))\n    ax.plot(df['Timestamp'], df['Value'], label='Time Series with Seasonality')\n    ax.set_xlabel('Timestamp')\n    ax.set_ylabel('Value')\n    ax.set_title('Time Series with Seasonality')\n    ax.legend()\n    plt.tight_layout()\n\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases) (start_time=0, end_time=10000, step=100, amplitude=1, period=1000)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_case_1\n  File \"<bigcode>\", line 24, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/datetimes.py\", line 945, in date_range\n    dtarr = DatetimeArray._generate_range(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/arrays/datetimes.py\", line 398, in _generate_range\n    freq = to_offset(freq)\n  File \"pandas/_libs/tslibs/offsets.pyx\", line 4102, in pandas._libs.tslibs.offsets.to_offset\n  File \"pandas/_libs/tslibs/offsets.pyx\", line 4203, in pandas._libs.tslibs.offsets.to_offset\nValueError: Invalid frequency: 100\n\n======================================================================\nERROR: test_case_1 (builtins.TestCases) (start_time=0, end_time=100000, step=1000, amplitude=2, period=5000)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_case_1\n  File \"<bigcode>\", line 24, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/datetimes.py\", line 945, in date_range\n    dtarr = DatetimeArray._generate_range(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/arrays/datetimes.py\", line 398, in _generate_range\n    freq = to_offset(freq)\n  File \"pandas/_libs/tslibs/offsets.pyx\", line 4102, in pandas._libs.tslibs.offsets.to_offset\n  File \"pandas/_libs/tslibs/offsets.pyx\", line 4203, in pandas._libs.tslibs.offsets.to_offset\nValueError: Invalid frequency: 1000\n\n======================================================================\nERROR: test_case_1 (builtins.TestCases) (start_time=0, end_time=10000, step=100, amplitude=0.5, period=1000)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_case_1\n  File \"<bigcode>\", line 24, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/datetimes.py\", line 945, in date_range\n    dtarr = DatetimeArray._generate_range(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/arrays/datetimes.py\", line 398, in _generate_range\n    freq = to_offset(freq)\n  File \"pandas/_libs/tslibs/offsets.pyx\", line 4102, in pandas._libs.tslibs.offsets.to_offset\n  File \"pandas/_libs/tslibs/offsets.pyx\", line 4203, in pandas._libs.tslibs.offsets.to_offset\nValueError: Invalid frequency: 100\n\n======================================================================\nERROR: test_case_1 (builtins.TestCases) (start_time=0, end_time=10000, step=100, amplitude=1, period=500)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_case_1\n  File \"<bigcode>\", line 24, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/datetimes.py\", line 945, in date_range\n    dtarr = DatetimeArray._generate_range(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/arrays/datetimes.py\", line 398, in _generate_range\n    freq = to_offset(freq)\n  File \"pandas/_libs/tslibs/offsets.pyx\", line 4102, in pandas._libs.tslibs.offsets.to_offset\n  File \"pandas/_libs/tslibs/offsets.pyx\", line 4203, in pandas._libs.tslibs.offsets.to_offset\nValueError: Invalid frequency: 100\n\n======================================================================\nERROR: test_case_1 (builtins.TestCases) (start_time=0, end_time=10000, step=500, amplitude=1, period=1000)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_case_1\n  File \"<bigcode>\", line 24, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/datetimes.py\", line 945, in date_range\n    dtarr = DatetimeArray._generate_range(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/arrays/datetimes.py\", line 398, in _generate_range\n    freq = to_offset(freq)\n  File \"pandas/_libs/tslibs/offsets.pyx\", line 4102, in pandas._libs.tslibs.offsets.to_offset\n  File \"pandas/_libs/tslibs/offsets.pyx\", line 4203, in pandas._libs.tslibs.offsets.to_offset\nValueError: Invalid frequency: 500\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 29, in test_case_2\n  File \"<bigcode>\", line 24, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/datetimes.py\", line 945, in date_range\n    dtarr = DatetimeArray._generate_range(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/arrays/datetimes.py\", line 398, in _generate_range\n    freq = to_offset(freq)\n  File \"pandas/_libs/tslibs/offsets.pyx\", line 4102, in pandas._libs.tslibs.offsets.to_offset\n  File \"pandas/_libs/tslibs/offsets.pyx\", line 4203, in pandas._libs.tslibs.offsets.to_offset\nValueError: Invalid frequency: 200000\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 48, in test_case_5\n  File \"<bigcode>\", line 24, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/datetimes.py\", line 945, in date_range\n    dtarr = DatetimeArray._generate_range(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/arrays/datetimes.py\", line 398, in _generate_range\n    freq = to_offset(freq)\n  File \"pandas/_libs/tslibs/offsets.pyx\", line 4102, in pandas._libs.tslibs.offsets.to_offset\n  File \"pandas/_libs/tslibs/offsets.pyx\", line 4203, in pandas._libs.tslibs.offsets.to_offset\nValueError: Invalid frequency: 100\n\n======================================================================\nERROR: test_case_6 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 54, in test_case_6\n  File \"<bigcode>\", line 24, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/datetimes.py\", line 945, in date_range\n    dtarr = DatetimeArray._generate_range(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/arrays/datetimes.py\", line 398, in _generate_range\n    freq = to_offset(freq)\n  File \"pandas/_libs/tslibs/offsets.pyx\", line 4102, in pandas._libs.tslibs.offsets.to_offset\n  File \"pandas/_libs/tslibs/offsets.pyx\", line 4203, in pandas._libs.tslibs.offsets.to_offset\nValueError: Invalid frequency: 100\n\n----------------------------------------------------------------------\nRan 6 tests in 0.003s\n\nFAILED (errors=8)"}}
{"result": "```python\nimport pandas as pd\nfrom datetime import datetime, timedelta\nimport random\n\ndef task_func(epoch_milliseconds, seed=0):\n    random.seed(seed)\n    users = ['user1', 'user2', 'user3', 'user4', 'user5']\n    activities = ['login', 'logout', 'browse', 'search', 'purchase']\n\n    start_dt = datetime.fromtimestamp(epoch_milliseconds / 1000)\n    now_dt = datetime.now()\n    if start_dt > now_dt:\n        raise ValueError(\"Start time is after the current system time.\")\n\n    logs = []\n    current_dt = start_dt\n    while current_dt <= now_dt:\n        user = random.choice(users)\n        activity = random.choice(activities)\n        logs.append({'User': user, 'Activity': activity, 'Time': current_dt})\n        increment = random.randint(1, 10)\n        current_dt += timedelta(seconds=increment)\n\n    return pd.DataFrame(logs)\n```", "match": {"category": "success"}}
{"result": "```python\nimport xmltodict\nimport json\ndef task_func(s, file_path):\n    d = xmltodict.parse(s)\n    with open(file_path, 'w', encoding='utf-8') as f:\n        json.dump(d, f, ensure_ascii=False, indent=4)\n    return d\n```", "match": {"category": "success"}}
{"result": "```python\nimport random\nfrom datetime import datetime, timedelta\nimport matplotlib.pyplot as plt\n\ndef task_func(epoch_milliseconds, seed=None):\n    if epoch_milliseconds < 0:\n        raise ValueError(\"Start time cannot be negative.\")\n    start_dt = datetime.utcfromtimestamp(epoch_milliseconds / 1000)\n    now = datetime.utcnow()\n    if start_dt > now:\n        raise ValueError(\"Start time cannot be after the current time.\")\n    \n    if seed is not None:\n        random.seed(seed)\n    \n    categories = ['Electronics', 'Clothing', 'Home', 'Books', 'Sports']\n    days_diff = (now.date() - start_dt.date()).days + 1\n    \n    sales_data = {cat: [] for cat in categories}\n    for day in range(days_diff):\n        for cat in categories:\n            sales = random.randint(10, 50)\n            sales_data[cat].append(sales)\n    \n    fig, ax = plt.subplots(figsize=(10,6))\n    x_vals = list(range(days_diff))\n    for cat in categories:\n        ax.plot(x_vals, sales_data[cat], label=cat)\n    ax.set_xlabel(f'Days since {start_dt.date()}')\n    ax.set_ylabel('Sales units')\n    ax.set_title('Sales Trend by Category')\n    ax.legend()\n    ax.grid(True)\n    \n    return sales_data, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 23, in test_case_1\n  File \"<string>\", line 14, in _check_sales_data\nAssertionError: 1605 != 1604\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 31, in test_case_2\nAssertionError: ValueError not raised\n\n----------------------------------------------------------------------\nRan 6 tests in 0.069s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport pandas as pd\nfrom datetime import datetime, timedelta\nimport random\ndef task_func(\n    epoch_milliseconds,\n    random_seed=0,\n    products=[\"Product1\", \"Product2\", \"Product3\", \"Product4\", \"Product5\"],\n):\n    if not isinstance(epoch_milliseconds, (int, float)):\n        raise ValueError(\"epoch_milliseconds must be an integer or float representing milliseconds since epoch.\")\n    if epoch_milliseconds < 0:\n        raise ValueError(\"epoch_milliseconds must be non-negative.\")\n    \n    start_datetime = datetime.utcfromtimestamp(epoch_milliseconds / 1000)\n    start_date = start_datetime.date()\n    current_date = datetime.utcnow().date()\n    \n    if start_date > current_date:\n        raise ValueError(\"Given epoch_milliseconds corresponds to a date in the future.\")\n    \n    random.seed(random_seed)\n    \n    data = []\n    day_count = (current_date - start_date).days + 1\n    for day_offset in range(day_count):\n        date = start_date + timedelta(days=day_offset)\n        for product in products:\n            sales = random.randint(10, 50)\n            data.append({\"Product\": product, \"Date\": pd.Timestamp(date), \"Sales\": sales})\n    \n    df = pd.DataFrame(data)\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_case_1\nAssertionError: Timestamp('2021-09-10 00:00:00') != datetime.datetime(2021, 9, 10, 16, 0)\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_case_2\nAssertionError: Timestamp('2025-05-21 00:00:00') != datetime.datetime(2025, 5, 21, 22, 13, 21, 77329)\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 32, in test_case_3\nAssertionError: Timestamp('2025-04-24 00:00:00') != datetime.datetime(2025, 4, 24, 22, 13, 21, 77963)\n\n======================================================================\nFAIL: test_case_6 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 56, in test_case_6\nAssertionError: ValueError not raised\n\n======================================================================\nFAIL: test_case_7 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 60, in test_case_7\nAssertionError: ValueError not raised\n\n----------------------------------------------------------------------\nRan 7 tests in 0.098s\n\nFAILED (failures=5)"}}
{"result": "```python\nfrom datetime import datetime, timedelta\nimport random\nimport matplotlib.pyplot as plt\n\ndef task_func(\n    epoch_milliseconds,\n    teams=[\"Team1\", \"Team2\", \"Team3\", \"Team4\", \"Team5\"],\n    random_seed=0,\n):\n    random.seed(random_seed)\n    start_date = datetime.fromtimestamp(epoch_milliseconds / 1000)\n    today = datetime.now()\n    delta_days = (today - start_date).days + 1\n\n    performance_data = {}\n    for team in teams:\n        performance_data[team] = {}\n        for day in range(delta_days):\n            performance_data[team][day] = random.uniform(0.1, 1)\n\n    fig, ax = plt.subplots()\n    for team, data in performance_data.items():\n        days = list(data.keys())\n        values = list(data.values())\n        ax.plot(days, values, label=team)\n\n    ax.set_xlabel('Days since start date')\n    ax.set_ylabel('Performance')\n    ax.set_title('Performance Trend of Teams')\n    ax.legend()\n    ax.grid(True)\n    fig.tight_layout()\n\n    return performance_data, fig\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_case_1\n  File \"<string>\", line 13, in _check_valid_performance_data\nAssertionError: False is not true : Performance out of range for Team1\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 34, in test_case_3\n  File \"<string>\", line 13, in _check_valid_performance_data\nAssertionError: False is not true : Performance out of range for Team1\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 40, in test_case_4\n  File \"<string>\", line 13, in _check_valid_performance_data\nAssertionError: False is not true : Performance out of range for A\n\n======================================================================\nFAIL: test_case_6 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 51, in test_case_6\nAssertionError: ValueError not raised\n\n======================================================================\nFAIL: test_case_7 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 55, in test_case_7\nAssertionError: TypeError not raised\n\n----------------------------------------------------------------------\nRan 7 tests in 0.456s\n\nFAILED (failures=5)"}}
{"result": "```python\nfrom datetime import datetime, timedelta, timezone\nimport pytz\nimport re\nfrom faker import Faker\nimport random\n\ndef task_func(epoch_milliseconds, seed=0, timezones=[\"UTC\"]):\n    fake = Faker()\n    Faker.seed(seed)\n    random.seed(seed)\n\n    # Convert epoch milliseconds to datetime in local system timezone\n    dt_utc = datetime.utcfromtimestamp(epoch_milliseconds / 1000).replace(tzinfo=pytz.utc)\n    local_tz = datetime.now().astimezone().tzinfo\n    dt_local = dt_utc.astimezone(local_tz)\n\n    # Validate timezones using pytz and regex (UTC\u00b1HH:MM)\n    utc_offset_pattern = re.compile(r\"^UTC([+-])(\\d{2}):(\\d{2})$\")\n    valid_timezones = []\n    for tz in timezones:\n        if tz in pytz.all_timezones:\n            valid_timezones.append(tz)\n            continue\n        match = utc_offset_pattern.match(tz)\n        if match:\n            sign, hh, mm = match.groups()\n            hh = int(hh)\n            mm = int(mm)\n            if 0 <= hh <= 23 and 0 <= mm < 60:\n                valid_timezones.append(tz)\n\n    if not valid_timezones:\n        valid_timezones = [\"UTC\"]\n\n    # Randomly select a valid timezone\n    chosen_tz = random.choice(valid_timezones)\n\n    # If chosen_tz matches UTC\u00b1HH:MM, create a fixed offset tzinfo\n    m = utc_offset_pattern.match(chosen_tz)\n    if m:\n        sign, hh, mm = m.groups()\n        offset = timedelta(hours=int(hh), minutes=int(mm))\n        if sign == \"-\":\n            offset = -offset\n        tzinfo = timezone(offset, name=chosen_tz)\n        dt_event = dt_utc.astimezone(tzinfo)\n        event_timezone = chosen_tz\n    else:\n        # Use pytz timezone\n        tzinfo = pytz.timezone(chosen_tz)\n        dt_event = dt_utc.astimezone(tzinfo)\n        event_timezone = chosen_tz\n\n    event_name = fake.catch_phrase()\n    event_details = {\n        \"date\": dt_event.strftime(\"%Y-%m-%d\"),\n        \"time\": dt_event.strftime(\"%H:%M:%S\"),\n        \"timezone\": event_timezone\n    }\n\n    return {event_name: [event_details]}\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 22, in test_case_1\n  File \"<string>\", line 13, in check_structure_and_content\nAssertionError: '2009-03-08' != datetime.date(2009, 3, 8)\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_case_2\n  File \"<string>\", line 13, in check_structure_and_content\nAssertionError: '2009-03-08' != datetime.date(2009, 3, 8)\n\n======================================================================\nFAIL: test_case_7 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 57, in test_case_7\n  File \"<string>\", line 13, in check_structure_and_content\nAssertionError: '2101-01-01' != datetime.date(2101, 1, 1)\n\n======================================================================\nFAIL: test_case_8 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 65, in test_case_8\n  File \"<string>\", line 13, in check_structure_and_content\nAssertionError: '2020-02-29' != datetime.date(2020, 2, 29)\n\n----------------------------------------------------------------------\nRan 7 tests in 0.127s\n\nFAILED (failures=4)"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\ndef task_func(days, random_seed=0):\n    np.random.seed(random_seed)\n    start_date = pd.to_datetime('2023-01-01')\n    dates = pd.date_range(start_date, periods=days)\n    data = {\n        'Groceries': np.random.randint(0, 101, size=days),\n        'Entertainment': np.random.randint(0, 101, size=days),\n        'Rent': np.random.randint(0, 101, size=days),\n        'Utilities': np.random.randint(0, 101, size=days),\n        'Miscellaneous': np.random.randint(0, 101, size=days)\n    }\n    df = pd.DataFrame(data, index=dates)\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nfrom datetime import datetime, timedelta\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(days_in_past=7, random_seed=0):\n    if days_in_past < 1:\n        raise ValueError(\"days_in_past must be at least 1\")\n    np.random.seed(random_seed)\n    dates = [datetime.now() - timedelta(days=i) for i in reversed(range(days_in_past))]\n    temps = np.random.randint(15, 36, size=days_in_past)\n    fig, ax = plt.subplots()\n    ax.plot(dates, temps, marker='o', linestyle='-', color='b')\n    ax.set_title('Temperature Trend')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Temperature (\u00b0C)')\n    fig.autofmt_xdate()\n    plt.tight_layout()\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nfrom datetime import datetime, timedelta\nimport pytz\nimport calendar\ndef task_func(days_in_past=7):\n    if days_in_past < 0:\n        raise ValueError(\"days_in_past cannot be negative\")\n    utc_now = datetime.now(pytz.utc)\n    target_date = utc_now.date() - timedelta(days=days_in_past)\n    weekday_idx = target_date.weekday()\n    weekday_name = calendar.day_name[weekday_idx]\n    return weekday_name\n```", "match": {"category": "success"}}
{"result": "```python\nimport xmltodict\nimport json\ndef task_func(s, save_json=False, json_file_path=None):\n    if not s or s.strip() == '':\n        raise ValueError(\"Input XML string is empty or contains only whitespace.\")\n    parsed_dict = xmltodict.parse(s)\n\n    if save_json:\n        if not json_file_path:\n            raise ValueError(\"json_file_path must be provided when save_json is True.\")\n        with open(json_file_path, 'w', encoding='utf-8') as f:\n            json.dump(parsed_dict, f, ensure_ascii=False, indent=4)\n    return parsed_dict\n```", "match": {"category": "success"}}
{"result": "```python\nimport xlwt\nimport os\nimport io\nimport csv\ndef task_func(csv_content, filename):\n    book = xlwt.Workbook()\n    sheet = book.add_sheet('Sheet1')\n    f = io.StringIO(csv_content)\n    reader = csv.reader(f)\n    for r, row in enumerate(reader):\n        for c, val in enumerate(row):\n            sheet.write(r, c, val)\n    abspath = os.path.abspath(filename)\n    book.save(abspath)\n    return abspath\n```", "match": {"category": "success"}}
{"result": "```python\nimport xlwt\nimport os\n# Constants\nFIELDS = ['ID', 'Name', 'Age']\ndef task_func(values, filename):\n    wb = xlwt.Workbook()\n    ws = wb.add_sheet('Sheet1')\n    for col, field in enumerate(FIELDS):\n        ws.write(0, col, field)\n    for row, odict in enumerate(values, start=1):\n        for col, field in enumerate(FIELDS):\n            ws.write(row, col, odict.get(field, ''))\n    abs_path = os.path.abspath(filename)\n    wb.save(abs_path)\n    return abs_path\n```", "match": {"category": "success"}}
{"result": "```python\nimport xlwt\nimport os\nimport pandas as pd\nimport json\n\ndef task_func(json_str, filename, sheet_name=\"sheet1\"):\n    if not isinstance(json_str, (str, bytes, bytearray)):\n        raise TypeError(\"json_str must be a string, bytes, or bytearray\")\n    try:\n        data = json.loads(json_str)\n    except ValueError as e:\n        raise ValueError(\"Invalid JSON string\") from e\n\n    try:\n        if not isinstance(data, list):\n            df = pd.DataFrame([data])\n        else:\n            if len(data) == 0:\n                # Create empty DataFrame to generate an excel file with no data rows\n                df = pd.DataFrame()\n            else:\n                df = pd.DataFrame(data)\n\n        # Use xlwt to save to excel (xls)\n        wb = xlwt.Workbook()\n        ws = wb.add_sheet(sheet_name)\n\n        # Write headers if DataFrame has columns\n        if not df.empty:\n            for col_idx, col_name in enumerate(df.columns):\n                ws.write(0, col_idx, col_name)\n            # Write data rows\n            for row_idx, row in enumerate(df.itertuples(index=False), start=1):\n                for col_idx, value in enumerate(row):\n                    ws.write(row_idx, col_idx, value)\n        else:\n            # No data rows and no columns, create empty sheet\n            pass\n\n        # Ensure the directory exists\n        os.makedirs(os.path.dirname(os.path.abspath(filename)) or '.', exist_ok=True)\n\n        wb.save(filename)\n        return os.path.abspath(filename)\n    except Exception as e:\n        raise Exception(f\"Error writing Excel file: {e}\") from e\n```", "match": {"category": "success"}}
{"result": "```python\nfrom datetime import datetime, timedelta\nimport pandas as pd\nimport random\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef task_func(days_in_past=7, random_seed=0):\n    random.seed(random_seed)\n    activities = [\"Running\", \"Swimming\", \"Cycling\", \"Yoga\", \"Weight Training\"]\n    dates = [datetime.today().date() - timedelta(days=i) for i in range(days_in_past)]\n    data = []\n    for date in dates:\n        for activity in activities:\n            duration = random.randint(0, 120)\n            data.append({\"Date\": date.strftime(\"%Y-%m-%d\"), \"Activity\": activity, \"Duration\": duration})\n    df = pd.DataFrame(data)\n    \n    plt.figure(figsize=(10, 6))\n    ax = sns.lineplot(data=df, x=\"Date\", y=\"Duration\", hue=\"Activity\", marker=\"o\")\n    ax.set_title(f'Daily Activity Durations for Past {days_in_past} Days')\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Duration (minutes)\")\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    return ax, df\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime, timedelta\n\ndef task_func(\n    days_in_past=7, stock_names=[\"AAPL\", \"GOOGL\", \"MSFT\", \"AMZN\", \"FB\"], random_seed=0\n):\n    np.random.seed(random_seed)\n    end_date = datetime.now().date()\n    dates = [end_date - timedelta(days=i) for i in range(days_in_past)]\n    dates.sort()\n    data = np.random.rand(days_in_past, len(stock_names))\n    df = pd.DataFrame(data, index=dates, columns=stock_names)\n    df.index.name = \"Date\"\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 19, in test_case_1\nAttributeError: 'datetime.date' object has no attribute 'date'\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 35, in test_case_2\nAttributeError: 'datetime.date' object has no attribute 'date'\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 51, in test_case_3\nAttributeError: 'datetime.date' object has no attribute 'date'\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 63, in test_case_4\nAssertionError: ValueError not raised\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 69, in test_case_5\nAssertionError: ValueError not raised\n\n----------------------------------------------------------------------\nRan 8 tests in 0.007s\n\nFAILED (failures=2, errors=3)"}}
{"result": "```python\nimport hashlib\nimport rsa\nimport base64\ndef task_func(file_path):\n    with open(file_path, 'rb') as f:\n        file_data = f.read()\n    hash_digest = hashlib.sha256(file_data).digest()\n    with open('private.pem', 'rb') as f:\n        private_key = rsa.PrivateKey.load_pkcs1(f.read())\n    signature = rsa.sign_hash(hash_digest, private_key, 'SHA-256')\n    return base64.b64encode(signature).decode()\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_rsa_verification_error_handling (builtins.TestCases)\nTest that rsa.pkcs1.VerificationError is correctly handled within the signing process.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 60, in test_rsa_verification_error_handling\nAssertionError: VerificationError not raised\n\n----------------------------------------------------------------------\nRan 6 tests in 0.217s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport hashlib\nimport hmac\ndef task_func(secret, message):\n    return hmac.new(secret.encode(), message.encode(), hashlib.sha256).hexdigest()\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(column, data):\n    df = pd.DataFrame(data, columns=['date', 'temperature', 'humidity', 'wind speed', 'precipitation'])\n    \n    if df.empty:\n        res = {\n            'sum': 0,\n            'mean': np.nan,\n            'min': np.inf,\n            'max': -np.inf,\n            'plot': None\n        }\n        return res\n    \n    col_data = df[column]\n    col_sum = col_data.sum()\n    col_mean = col_data.mean()\n    col_min = col_data.min()\n    col_max = col_data.max()\n    \n    fig, ax = plt.subplots()\n    bars = ax.hist(col_data, bins=10, edgecolor='black')[2]\n    plt.close(fig)  # close the figure to not display automatically outside function\n    \n    res = {\n        'sum': col_sum,\n        'mean': col_mean,\n        'min': col_min,\n        'max': col_max,\n        'plot': bars\n    }\n    return res\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Temperature'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 17, in test_case_1\n  File \"<bigcode>\", line 18, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Temperature'\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Humidity'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_case_2\n  File \"<bigcode>\", line 18, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Humidity'\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Wind Speed'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 33, in test_case_3\n  File \"<bigcode>\", line 18, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Wind Speed'\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Precipitation'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 41, in test_case_4\n  File \"<bigcode>\", line 18, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Precipitation'\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 58, in test_case_5\nAssertionError: None is not an instance of <class 'matplotlib.container.BarContainer'>\n\n----------------------------------------------------------------------\nRan 5 tests in 0.007s\n\nFAILED (failures=1, errors=4)"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\ndef task_func(column, data):\n    if not data:\n        return {'sum': 0, 'mean': np.nan, 'min': np.nan, 'max': np.nan}\n    df = pd.DataFrame(data)\n    if column not in df.columns:\n        raise ValueError(\"Invalid column name\")\n    col_data = df[column].dropna()\n    if col_data.empty:\n        return {'sum': 0, 'mean': np.nan, 'min': np.nan, 'max': np.nan}\n    return {\n        'sum': col_data.sum(),\n        'mean': col_data.mean(),\n        'min': col_data.min(),\n        'max': col_data.max()\n    }\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 19, in test_case_1\n  File \"<bigcode>\", line 9, in task_func\nValueError: Invalid column name\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 50, in test_case_4\n  File \"<bigcode>\", line 9, in task_func\nValueError: Invalid column name\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 56, in test_case_5\n  File \"<bigcode>\", line 9, in task_func\nValueError: Invalid column name\n\n======================================================================\nERROR: test_case_6 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 66, in test_case_6\n  File \"<bigcode>\", line 9, in task_func\nValueError: Invalid column name\n\n======================================================================\nERROR: test_case_7 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 70, in test_case_7\n  File \"<bigcode>\", line 9, in task_func\nValueError: Invalid column name\n\n======================================================================\nERROR: test_case_8 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 76, in test_case_8\n  File \"<bigcode>\", line 9, in task_func\nValueError: Invalid column name\n\n======================================================================\nERROR: test_case_9 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 82, in test_case_9\n  File \"<bigcode>\", line 9, in task_func\nValueError: Invalid column name\n\n----------------------------------------------------------------------\nRan 14 tests in 0.014s\n\nFAILED (errors=7)"}}
{"result": "```python\nimport hashlib\nimport io\nimport os\ndef task_func(file_path1, file_path2):\n    if not os.path.isfile(file_path1):\n        raise FileNotFoundError(f\"No such file: '{file_path1}'\")\n    if not os.path.isfile(file_path2):\n        raise FileNotFoundError(f\"No such file: '{file_path2}'\")\n\n    def md5_hash(filepath):\n        hash_md5 = hashlib.md5()\n        with open(filepath, \"rb\") as f:\n            for chunk in iter(lambda: f.read(4096), b\"\"):\n                hash_md5.update(chunk)\n        return hash_md5.hexdigest()\n\n    return md5_hash(file_path1) == md5_hash(file_path2)\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport csv\nfrom difflib import ndiff\n\ndef task_func(file_path1, file_path2, delimiter=',', quotechar='\"'):\n    try:\n        with open(file_path1, 'r', newline='', encoding='utf-8') as f1, \\\n             open(file_path2, 'r', newline='', encoding='utf-8') as f2:\n            reader1 = csv.reader(f1, delimiter=delimiter, quotechar=quotechar)\n            reader2 = csv.reader(f2, delimiter=delimiter, quotechar=quotechar)\n\n            lines1 = [''.join(row) for row in reader1]\n            lines2 = [''.join(row) for row in reader2]\n    except FileNotFoundError as e:\n        raise FileNotFoundError(str(e))\n    except ValueError as e:\n        raise ValueError(str(e))\n    except Exception as e:\n        raise Exception(str(e))\n\n    if not lines1:\n        raise ValueError(f\"The first file '{file_path1}' is empty.\")\n    if not lines2:\n        raise ValueError(f\"The second file '{file_path2}' is empty.\")\n\n    diff_result = list(ndiff(lines1, lines2))\n    data = []\n    line_num1 = line_num2 = 0\n\n    for line in diff_result:\n        sign = line[0]\n        content = line[2:]\n\n        if sign == ' ':\n            line_num1 += 1\n            line_num2 += 1\n            data.append({\n                'Line Number': line_num1,\n                'Status': ' ',\n                'Content': content\n            })\n        elif sign == '-':\n            line_num1 += 1\n            data.append({\n                'Line Number': line_num1,\n                'Status': '-',\n                'Content': content\n            })\n        elif sign == '+':\n            line_num2 += 1\n            data.append({\n                'Line Number': line_num2,\n                'Status': '+',\n                'Content': content\n            })\n\n    df = pd.DataFrame(data, columns=['Line Number', 'Status', 'Content'])\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_difference_report (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 54, in test_difference_report\nAssertionError: Lists differ: ['1, ,nameage', '2,-,Alice30', '2,+,Alice31', '3, ,Bob25'] != [\"1, ,('name', 'age')\", \"2,-,('Alice', '30[43 chars]5')\"]\n\nFirst differing element 0:\n'1, ,nameage'\n\"1, ,('name', 'age')\"\n\n- ['1, ,nameage', '2,-,Alice30', '2,+,Alice31', '3, ,Bob25']\n+ [\"1, ,('name', 'age')\",\n+  \"2,-,('Alice', '30')\",\n+  \"3,+,('Alice', '31')\",\n+  \"4, ,('Bob', '25')\"]\n\n----------------------------------------------------------------------\nRan 5 tests in 0.008s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport difflib\nimport gzip\ndef task_func(file_path1, file_path2):\n    with gzip.open(file_path1, 'rt', encoding='utf-8') as f1, gzip.open(file_path2, 'rt', encoding='utf-8') as f2:\n        content1 = f1.readlines()\n        content2 = f2.readlines()\n    diff = list(difflib.unified_diff(content1, content2, fromfile=file_path1, tofile=file_path2))\n    return ''.join(diff) if diff else ''\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(column, data):\n    df = pd.DataFrame(data)\n    if df.empty or column not in df.columns or df[column].dropna().empty:\n        stats = {'sum': 0, 'mean': np.nan, 'min': np.nan, 'max': np.nan}\n        fig, ax = plt.subplots()\n        ax.text(0.5, 0.5, 'No data to plot', horizontalalignment='center', verticalalignment='center')\n        ax.axis('off')\n        return (stats, ax)\n    \n    values = df[column].dropna()\n    stats = {\n        'sum': values.sum(),\n        'mean': values.mean(),\n        'min': values.min(),\n        'max': values.max()\n    }\n    # For pie chart: use the column values and Age as labels\n    if 'Age' in df.columns:\n        labels = df['Age'].astype(str).tolist()\n    else:\n        labels = [str(i) for i in range(len(values))]\n    # Align lengths in case of NaN or different lengths\n    min_len = min(len(labels), len(values))\n    labels = labels[:min_len]\n    values = values.iloc[:min_len]\n    \n    fig, ax = plt.subplots()\n    ax.pie(values, labels=labels, autopct='%1.1f%%', startangle=90)\n    ax.axis('equal')\n    return (stats, ax)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 15, in test_case_1\nAssertionError: {'sum': 0, 'mean': nan, 'min': nan, 'max': nan} != {'sum': 500000, 'mean': 100000.0, 'min': 50000, 'max': 150000}\n- {'max': nan, 'mean': nan, 'min': nan, 'sum': 0}\n+ {'max': 150000, 'mean': 100000.0, 'min': 50000, 'sum': 500000}\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_case_2\nAssertionError: {'sum': 0, 'mean': nan, 'min': nan, 'max': nan} != {'sum': 41, 'mean': 8.2, 'min': 3, 'max': 13}\n- {'max': nan, 'mean': nan, 'min': nan, 'sum': 0}\n?         ^^^          ^^^         ^^^         ^\n\n+ {'max': 13, 'mean': 8.2, 'min': 3, 'sum': 41}\n?         ^^          ^^^         ^         ^^\n\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 39, in test_case_3\nAssertionError: {'sum': 0, 'mean': nan, 'min': nan, 'max': nan} != {'sum': 185, 'mean': 37.0, 'min': 27, 'max': 47}\n- {'max': nan, 'mean': nan, 'min': nan, 'sum': 0}\n?         ^^^          ^^^         ^^^         ^\n\n+ {'max': 47, 'mean': 37.0, 'min': 27, 'sum': 185}\n?         ^^          ^^^^         ^^         ^^^\n\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 51, in test_case_5\nAssertionError: {'sum': 0, 'mean': nan, 'min': nan, 'max': nan} != {'sum': 30, 'mean': 30.0, 'min': 30, 'max': 30}\n- {'max': nan, 'mean': nan, 'min': nan, 'sum': 0}\n?         ^^^          ^^^         ^^^\n\n+ {'max': 30, 'mean': 30.0, 'min': 30, 'sum': 30}\n?         ^^          ^^^^         ^^         +\n\n\n======================================================================\nFAIL: test_case_6 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 59, in test_case_6\nAssertionError: KeyError not raised\n\n======================================================================\nFAIL: test_case_7 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 72, in test_case_7\nAssertionError: 0 != 5 : The number of pie slices does not match the number of data points.\n\n----------------------------------------------------------------------\nRan 7 tests in 0.104s\n\nFAILED (failures=6)"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(column, data):\n    if column not in data.columns:\n        raise ValueError(f\"Column '{column}' not found in data.\")\n    if 'Quantity Sold' in data.columns and (data['Quantity Sold'] < 0).any():\n        raise ValueError(\"Quantity Sold contains negative values.\")\n    if 'Total Sales' in data.columns and (data['Total Sales'] < 0).any():\n        raise ValueError(\"Total Sales contains negative values.\")\n    \n    col_values = data[column]\n    summary = {\n        \"sum\": col_values.sum(),\n        \"mean\": col_values.mean(),\n        \"min\": col_values.min(),\n        \"max\": col_values.max()\n    }\n\n    fig, ax = plt.subplots()\n    ax.bar(data['Product'], col_values)\n    ax.set_xlabel(\"Product\")\n    ax.set_title(f\"Bar Chart of {column}\")\n    plt.close(fig)\n    return summary, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases) (data=[['Product A', 100, 10000], ['Product B', 150, 15000], ['Product C', 200, 20000]])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 31, in test_case_1\n  File \"<bigcode>\", line 7, in task_func\nAttributeError: 'list' object has no attribute 'columns'\n\n======================================================================\nERROR: test_case_1 (builtins.TestCases) (data=[['Product A', 10, 1000], ['Product B', 20, 2000], ['Product C', 30, 3000], ['Product D', 40, 4000]])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 31, in test_case_1\n  File \"<bigcode>\", line 7, in task_func\nAttributeError: 'list' object has no attribute 'columns'\n\n======================================================================\nERROR: test_case_1 (builtins.TestCases) (data=[['Product A', 5, 500]])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 31, in test_case_1\n  File \"<bigcode>\", line 7, in task_func\nAttributeError: 'list' object has no attribute 'columns'\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases) (data=[['Product A', 100, 5000], ['Product B', 200, 6000], ['Product C', 300, 7000]])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 59, in test_case_2\n  File \"<bigcode>\", line 7, in task_func\nAttributeError: 'list' object has no attribute 'columns'\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases) (data=[['Product A', 5, 500], ['Product B', 10, 1000], ['Product C', 15, 1500], ['Product D', 20, 2000], ['Product E', 25, 2500]])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 59, in test_case_2\n  File \"<bigcode>\", line 7, in task_func\nAttributeError: 'list' object has no attribute 'columns'\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 66, in test_case_3\n  File \"<bigcode>\", line 7, in task_func\nAttributeError: 'list' object has no attribute 'columns'\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 76, in test_case_5\n  File \"<bigcode>\", line 7, in task_func\nAttributeError: 'list' object has no attribute 'columns'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.005s\n\nFAILED (errors=7)"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(column, data):\n    if not data:\n        raise ValueError(\"Data list is empty.\")\n        \n    df = pd.DataFrame(data)\n    \n    # Validate column existence\n    if column not in df.columns:\n        raise KeyError(f\"Column '{column}' not found in data.\")\n    \n    # Validate required numeric fields and non-negativity\n    required_numeric_fields = ['steps', 'calories burned', 'distance walked']\n    for field in required_numeric_fields:\n        if field not in df.columns:\n            raise KeyError(f\"Required numeric field '{field}' not found in data.\")\n        if df[field].isnull().any():\n            raise ValueError(f\"Null values found in '{field}'.\")\n        if (df[field] < 0).any():\n            raise ValueError(f\"Negative values found in '{field}'.\")\n    \n    # Calculate statistics\n    col_series = df[column]\n    total = col_series.sum()\n    mean = col_series.mean()\n    minimum = col_series.min()\n    maximum = col_series.max()\n    stats = {\n        'sum': total,\n        'mean': mean,\n        'min': minimum,\n        'max': maximum\n    }\n    \n    # Plot line chart\n    if 'Date' not in df.columns:\n        raise KeyError(\"Column 'Date' not found in data.\")\n    # Convert 'Date' to datetime if not already\n    try:\n        df['Date'] = pd.to_datetime(df['Date'])\n    except Exception as e:\n        raise ValueError(f\"Could not convert 'Date' column to datetime: {e}\")\n    df = df.sort_values('Date')\n    \n    fig, ax = plt.subplots()\n    ax.plot(df['Date'], col_series, marker='o')\n    ax.set_xlabel('Date')\n    ax.set_ylabel(column)\n    ax.set_title(f'Line Chart of {column}')\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    \n    return stats, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 11, in test_case_1\n  File \"<bigcode>\", line 14, in task_func\nKeyError: \"Column 'Steps' not found in data.\"\n\n======================================================================\nERROR: test_case_11 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 93, in test_case_11\n  File \"<bigcode>\", line 14, in task_func\nKeyError: \"Column 'Steps' not found in data.\"\n\n======================================================================\nERROR: test_case_12 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 103, in test_case_12\n  File \"<bigcode>\", line 14, in task_func\nKeyError: \"Column 'Distance Walked' not found in data.\"\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 22, in test_case_2\n  File \"<bigcode>\", line 14, in task_func\nKeyError: \"Column 'Calories Burned' not found in data.\"\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 30, in test_case_3\n  File \"<bigcode>\", line 14, in task_func\nKeyError: \"Column 'Distance Walked' not found in data.\"\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 40, in test_case_4\n  File \"<bigcode>\", line 14, in task_func\nKeyError: \"Column 'Steps' not found in data.\"\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 50, in test_case_5\n  File \"<bigcode>\", line 14, in task_func\nKeyError: \"Column 'Calories Burned' not found in data.\"\n\n======================================================================\nERROR: test_case_7 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 64, in test_case_7\n  File \"<bigcode>\", line 14, in task_func\nKeyError: \"Column 'Steps' not found in data.\"\n\n======================================================================\nERROR: test_case_8 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 68, in test_case_8\n  File \"<bigcode>\", line 14, in task_func\nKeyError: \"Column 'Steps' not found in data.\"\n\n======================================================================\nERROR: test_case_9 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 77, in test_case_9\n  File \"<bigcode>\", line 14, in task_func\nKeyError: \"Column 'Steps' not found in data.\"\n\n----------------------------------------------------------------------\nRan 12 tests in 0.006s\n\nFAILED (errors=10)"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(array):\n    COLUMNS = ['A', 'B', 'C', 'D', 'E']\n    df = pd.DataFrame(array, columns=COLUMNS)\n    col_sums = df.sum()\n    fig, ax = plt.subplots()\n    col_sums.plot(kind='bar', ax=ax)\n    ax.set_ylabel('Sum')\n    ax.set_title('Sum of Each Column')\n    return df, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef task_func(array):\n    if not array or any(len(row) != 5 for row in array):\n        raise ValueError(\"Input array is empty or contains sublists of varying lengths.\")\n    df = pd.DataFrame(array, columns=['A', 'B', 'C', 'D', 'E'])\n    corr = df.corr()\n    heatmap = sns.heatmap(corr, annot=True, cmap='coolwarm')\n    plt.close()  # Prevents immediate display in some environments\n    return df, heatmap\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    # Validate input\n    if not isinstance(array, list) or len(array) == 0:\n        raise ValueError(\"Input must be a non-empty 2D list.\")\n    row_length = None\n    for row in array:\n        if not isinstance(row, list):\n            raise ValueError(\"Each element of input must be a list.\")\n        if row_length is None:\n            row_length = len(row)\n            if row_length != 5:\n                raise ValueError(\"Each inner list must have exactly 5 elements.\")\n        elif len(row) != row_length:\n            raise ValueError(\"All inner lists must have the same length.\")\n\n    # Set numpy random seed\n    np.random.seed(random_seed)\n\n    # Create DataFrame\n    df = pd.DataFrame(array, columns=['A', 'B', 'C', 'D', 'Response'])\n\n    # Separate independent and dependent variables\n    X = df[['A', 'B', 'C', 'D']]\n    y = df['Response']\n\n    # Add constant for intercept\n    X_const = sm.add_constant(X)\n\n    # Fit linear regression model\n    model = sm.OLS(y, X_const)\n    results = model.fit()\n\n    return df, results\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed = pca.fit_transform(df)\n    return df, transformed\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\ndef task_func(array):\n    # Create column labels starting from 'A'\n    cols = [chr(ord('A') + i) for i in range(len(array[0]))]\n    # Convert array to DataFrame\n    df = pd.DataFrame(array, columns=cols)\n    # Compute Euclidean distance matrix between rows\n    dist_array = squareform(pdist(df.values, metric='euclidean'))\n    distance_matrix = pd.DataFrame(dist_array, index=df.index, columns=df.index)\n    return df, distance_matrix\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_9 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 65, in test_case_9\n  File \"<bigcode>\", line 11, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/scipy/spatial/distance.py\", line 2250, in pdist\n    return pdist_fn(X, out=out, **kwargs)\nValueError: Unsupported dtype object\n\n----------------------------------------------------------------------\nRan 10 tests in 0.008s\n\nFAILED (errors=1)"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    df = pd.DataFrame(data).fillna(0)\n    ax = df.plot.line(title='Fruit Sales over Time', xlabel='Time', ylabel='Sales Quantity')\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 56, in test_case_5\nAssertionError: TypeError not raised\n\n----------------------------------------------------------------------\nRan 5 tests in 0.144s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport collections\nimport matplotlib.pyplot as plt\n\ndef task_func(data):\n    if not data:\n        return {}, None\n\n    # Validate and sum sales for each fruit\n    total_sales = collections.defaultdict(int)\n    for record in data:\n        for fruit, qty in record.items():\n            if qty < 0:\n                raise ValueError(\"Sales quantity must not be negative\")\n            total_sales[fruit] += qty\n\n    if not total_sales:\n        return {}, None\n\n    fruits = list(total_sales.keys())\n    sales = [total_sales[fruit] for fruit in fruits]\n\n    colors_map = ['red', 'yellow', 'green', 'blue', 'purple']\n    # Assign colors cycling through the list if more fruits than colors\n    colors = [colors_map[i % len(colors_map)] for i in range(len(fruits))]\n\n    fig, ax = plt.subplots()\n    bars = ax.bar(fruits, sales, color=colors)\n\n    return dict(total_sales), bars\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data_list):\n    df = pd.DataFrame(data_list)\n    ax = df.plot(marker='o')\n    ax.set_xlabel('Test Number')\n    ax.set_ylabel('Score')\n    ax.set_title('Student Scores Over Tests')\n    ax.legend(title='Student')\n    ax.grid(True)\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_6 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 43, in test_case_6\n  File \"<string>\", line 53, in validate_plot\n  File \"<bigcode>\", line 6, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/plotting/_core.py\", line 975, in __call__\n    return plot_backend.plot(data, kind=kind, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/plotting/_matplotlib/__init__.py\", line 71, in plot\n    plot_obj.generate()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/plotting/_matplotlib/core.py\", line 446, in generate\n    self._compute_plot_data()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/plotting/_matplotlib/core.py\", line 632, in _compute_plot_data\n    raise TypeError(\"no numeric data to plot\")\nTypeError: no numeric data to plot\n\n----------------------------------------------------------------------\nRan 8 tests in 0.198s\n\nFAILED (errors=1)"}}
{"result": "```python\nimport collections\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    if not data:\n        return None\n    scores = collections.defaultdict(list)\n    for d in data:\n        for student, score in d.items():\n            if score is not None:\n                if score < 0:\n                    raise ValueError(\"Negative score encountered\")\n                scores[student].append(score)\n    if not scores:\n        return None\n    avg_scores = {student: sum(vals)/len(vals) for student, vals in scores.items()}\n    colors = ['red', 'yellow', 'green', 'blue', 'purple']\n    students = list(avg_scores.keys())\n    averages = [avg_scores[s] for s in students]\n    fig, ax = plt.subplots()\n    bars = ax.bar(students, averages, color=[colors[i % len(colors)] for i in range(len(students))])\n    ax.set_xlabel('Student')\n    ax.set_ylabel('Average Score')\n    ax.set_title('Average Student Scores')\n    plt.xticks(rotation=45, ha='right')\n    plt.tight_layout()\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_case_1\nAssertionError: 5.75 != 9.25\n\n======================================================================\nFAIL: test_case_12 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 123, in test_case_12\nAssertionError: 5.0 != 10\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 45, in test_case_3\nAssertionError: 10.0 != 15\n\n======================================================================\nFAIL: test_case_6 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 80, in test_case_6\nAssertionError: 5.0 != 10\n\n----------------------------------------------------------------------\nRan 12 tests in 0.266s\n\nFAILED (failures=4)"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    if not data:\n        return None\n    df = pd.DataFrame(data)\n    ax = df.plot.line(x='Time', y=[k for k in df.columns if k != 'Time'], title='Data over Time')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Data Points')\n    return ax\n```", "match": {"category": "timeout", "error": "Test execution timed out after 10 seconds"}}
{"result": "```python\nfrom collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(data):\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input is not a list.\")\n    for item in data:\n        if not isinstance(item, dict):\n            raise TypeError(\"Input list must contain dictionaries only.\")\n\n    aggregated = defaultdict(list)\n    for d in data:\n        for k, v in d.items():\n            if not isinstance(v, (int, float, np.number)):\n                raise TypeError(f\"Value for key '{k}' is not numeric.\")\n            aggregated[k].append(v)\n\n    stats = {}\n    axes = []\n    for k, vals in aggregated.items():\n        arr = np.array(vals)\n        mean = np.mean(arr)\n        std = np.std(arr, ddof=1) if len(arr) > 1 else 0.0\n        stats[k] = {'mean': mean, 'std': std}\n        \n        fig, ax = plt.subplots()\n        ax.bar([0], [mean], yerr=[std], capsize=5, color='skyblue')\n        ax.set_xticks([0])\n        ax.set_xticklabels([k])\n        ax.set_ylabel('Value')\n        ax.set_title(f'Statistics for {k}')\n        axes.append(ax)\n\n    return stats, axes\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_case_1\nAssertionError: 1.0 != 0.816496580927726 within 7 places (0.18350341907227397 difference)\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 22, in test_case_2\nAssertionError: 1.0 != 0.816496580927726 within 7 places (0.18350341907227397 difference)\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 35, in test_case_3\nAssertionError: 1.0 != 0.816496580927726 within 7 places (0.18350341907227397 difference)\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 49, in test_case_4\nAssertionError: 'Statistics for cat' != 'Statistics of cat'\n- Statistics for cat\n?             --\n+ Statistics of cat\n?            +\n\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 60, in test_case_5\nAssertionError: 'Statistics for cat' != 'Statistics of cat'\n- Statistics for cat\n?             --\n+ Statistics of cat\n?            +\n\n\n======================================================================\nFAIL: test_case_8 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 86, in test_case_8\nAssertionError: 2.0 != 1.632993161855452 within 7 places (0.36700683814454793 difference)\n\n======================================================================\nFAIL: test_case_9 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 94, in test_case_9\nAssertionError: 2.0 != 1.632993161855452 within 7 places (0.36700683814454793 difference)\n\n----------------------------------------------------------------------\nRan 9 tests in 0.232s\n\nFAILED (failures=7)"}}
{"result": "```python\nimport json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\ndef task_func(input_file):\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n\n    # Collect values for each key across all dictionaries\n    values = defaultdict(list)\n    for d in data:\n        for k, v in d.items():\n            values[k].append(v)\n\n    result = {}\n    plots = []\n\n    for k, vals in values.items():\n        arr = np.array(vals)\n        mean_val = np.mean(arr)\n        median_val = np.median(arr)\n        result[k] = {'mean': mean_val, 'median': median_val}\n\n        # Create bar chart for this key\n        fig, ax = plt.subplots()\n        ax.bar(['mean', 'median'], [mean_val, median_val], color=['skyblue', 'salmon'])\n        ax.set_title(f\"Mean and Median for key: {k}\")\n        ax.set_ylabel('Value')\n        plots.append(ax)\n\n    return result, plots\n```", "match": {"category": "success"}}
{"result": "```python\nimport json\nimport pandas as pd\nimport numpy as np\nfrom collections import defaultdict\ndef task_func(input_file=\"data.json\"):\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n\n    values = defaultdict(list)\n    for entry in data:\n        for k, v in entry.items():\n            if isinstance(v, (int, float)) and not isinstance(v, bool):\n                values[k].append(v)\n\n    stats = {}\n    for k, vals in values.items():\n        if vals:\n            mean_val = np.mean(vals)\n            median_val = np.median(vals)\n            stats[k] = {\"mean\": mean_val, \"median\": median_val}\n\n    df = pd.DataFrame.from_dict(stats, orient=\"index\")\n    df.index.name = \"variable\"\n    df.sort_index(inplace=True)\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_8 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 87, in test_case_8\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexing.py\", line 1096, in __getitem__\n    return self.obj._get_value(*key, takeable=self._takeable)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3870, in _get_value\n    series = self._get_item_cache(col)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 4255, in _get_item_cache\n    loc = self.columns.get_loc(item)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/range.py\", line 349, in get_loc\n    raise KeyError(key)\nKeyError: 'mean'\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 36, in test_case_3\nAssertionError: Lists differ: ['a'] != ['a', 'b']\n\nSecond list contains 1 additional elements.\nFirst extra element 1:\n'b'\n\n- ['a']\n+ ['a', 'b']\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 48, in test_case_5\nAssertionError: Lists differ: ['a', 'c'] != ['a', 'b', 'c']\n\nFirst differing element 1:\n'c'\n'b'\n\nSecond list contains 1 additional elements.\nFirst extra element 2:\n'c'\n\n- ['a', 'c']\n+ ['a', 'b', 'c']\n?       +++++\n\n\n----------------------------------------------------------------------\nRan 9 tests in 0.021s\n\nFAILED (failures=2, errors=1)"}}
{"result": "```python\nimport json\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nfrom collections import defaultdict\n\ndef task_func(input_file: str):\n    with open(input_file, 'r') as f:\n        data = json.load(f)  # list of dicts\n\n    # Aggregate values for each key\n    agg = defaultdict(list)\n    for dic in data:\n        for k, v in dic.items():\n            agg[k].append(v)\n\n    # Compute mean and median for each key\n    results = {}\n    for k, vals in agg.items():\n        arr = np.array(vals)\n        results[k] = {'mean': np.mean(arr), 'median': np.median(arr)}\n\n    # Prepare data for seaborn boxplot\n    records = []\n    for k, vals in agg.items():\n        for v in vals:\n            records.append({'X': k, 'Y': v})\n    df = pd.DataFrame(records)\n\n    plt.figure(figsize=(10, 6))\n    ax = sns.boxplot(x='X', y='Y', data=df)\n    ax.set_title('Box Plot of Values for Each Key')\n\n    return results, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport csv\nfrom collections import Counter\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef task_func(file_path):\n    if not file_path.endswith('.csv'):\n        raise ValueError(\"File must have a .csv extension\")\n\n    with open(file_path, newline='', encoding='utf-8') as f:\n        reader = csv.reader(f)\n        header = next(reader)\n        rows = list(reader)\n\n    row_counts = Counter(tuple(row) for row in rows)\n    duplicates = {row: count for row, count in row_counts.items() if count > 1}\n\n    if not duplicates:\n        df = pd.DataFrame(columns=header)\n    else:\n        # Expand keys tuples into lists for dataframe rows\n        df = pd.DataFrame([list(row) for row in duplicates.keys()], columns=header)\n        df['count'] = [duplicates[row] for row in duplicates]\n\n    plt.figure(figsize=(10, 6))\n    ax = plt.gca()\n\n    # For plotting, create readable labels from row data\n    labels = [' | '.join(row) for row in duplicates.keys()]\n    counts = list(duplicates.values())\n\n    ax.bar(range(len(counts)), counts, tick_label=labels)\n    plt.xticks(rotation=45, ha='right')\n    ax.set_ylabel('Count')\n    ax.set_title('Duplicate Rows Count')\n    plt.tight_layout()\n\n    return duplicates, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 35, in test_case_2\nAssertionError: 'Duplicate Rows Count' != 'Duplicate Entries'\n- Duplicate Rows Count\n+ Duplicate Entries\n\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 43, in test_case_3\nAssertionError: <Axes: title={'center': 'Duplicate Rows Count'}, ylabel='Count'> is not None\n\n----------------------------------------------------------------------\nRan 5 tests in 0.158s\n\nFAILED (failures=2)"}}
{"result": "```python\nfrom collections import Counter\nimport random\nimport matplotlib.pyplot as plt\n\ndef task_func(num_rolls, num_dice, plot_path=None, random_seed=0):\n    random.seed(random_seed)\n    \n    sums = []\n    for _ in range(num_rolls):\n        roll_sum = sum(random.randint(1, 6) for _ in range(num_dice))\n        sums.append(roll_sum)\n        \n    counts = Counter(sums)\n    \n    fig, ax = plt.subplots()\n    # possible sums range from num_dice to 6*num_dice\n    x_vals = list(range(num_dice, 6*num_dice + 1))\n    y_vals = [counts.get(x, 0) for x in x_vals]\n    ax.bar(x_vals, y_vals)\n    ax.set_xlabel(\"Sum of Dice Roll\")\n    ax.set_ylabel(\"Count\")\n    ax.set_title(\"Distribution of Dice Roll Sums\")\n    \n    if plot_path is not None:\n        plt.savefig(plot_path)\n    plt.close(fig)\n    \n    return counts, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nfrom collections import Counter\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df: pd.DataFrame) -> (Counter, plt.Axes):\n    if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n    if 'name' not in df.columns or 'age' not in df.columns:\n        raise ValueError(\"DataFrame must contain 'name' and 'age' columns\")\n    \n    # Round down ages to nearest integer\n    ages_rounded = np.floor(df['age']).astype(int)\n    if (ages_rounded < 0).any():\n        raise ValueError(\"Age contains negative values\")\n\n    df = df.copy()\n    df['age'] = ages_rounded\n\n    # Identify duplicate names (names appearing more than once)\n    duplicated_names = df['name'][df['name'].duplicated(keep=False)].unique()\n    if len(duplicated_names) == 0:\n        return Counter(), None\n    \n    # Filter DataFrame to only rows with duplicate names\n    duplicates_df = df[df['name'].isin(duplicated_names)]\n\n    # Construct age distribution Counter\n    age_dist = Counter(duplicates_df['age'])\n    \n    # Create histogram plot\n    min_age = duplicates_df['age'].min()\n    max_age = duplicates_df['age'].max()\n    bins = np.arange(min_age - 0.5, max_age + 1.5, 1)\n    fig, ax = plt.subplots()\n    sns.histplot(duplicates_df['age'], bins=bins, discrete=True, ax=ax)\n    ax.set_xlabel('Age')\n    ax.set_ylabel('Count')\n    ax.set_title('Age Distribution among Duplicate Names')\n    \n    return age_dist, ax\n```", "match": {"category": "success"}}
{"result": "```python\nfrom collections import Counter\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndef task_func(df, n_clusters=3, random_state=None, n_init=10):\n    # Identify duplicate points\n    tuples = list(map(tuple, df.values))\n    dup_counts = Counter(tuples)\n    dup_counts = Counter({k: v for k, v in dup_counts.items() if v > 1})\n\n    # Remove duplicates to get unique points\n    unique_df = df.drop_duplicates().reset_index(drop=True)\n\n    # Perform KMeans clustering on unique points\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state, n_init=n_init)\n    unique_df['cluster'] = kmeans.fit_predict(unique_df.values)\n\n    # Plotting\n    fig, ax = plt.subplots()\n    if unique_df.shape[1] - 1 >= 2:  # At least 2 dimensions for scatter plot\n        ax.scatter(unique_df.iloc[:,0], unique_df.iloc[:,1], c=unique_df['cluster'], cmap='viridis', s=50)\n        ax.set_xlabel(unique_df.columns[0])\n        ax.set_ylabel(unique_df.columns[1])\n        ax.set_title('KMeans Clustering')\n    else:\n        # If only one feature, plot points on x-axis with cluster color\n        ax.scatter(unique_df.iloc[:,0], [0]*len(unique_df), c=unique_df['cluster'], cmap='viridis', s=50)\n        ax.set_xlabel(unique_df.columns[0])\n        ax.set_yticks([])\n        ax.set_title('KMeans Clustering (1D)')\n    plt.tight_layout()\n\n    return dup_counts, unique_df, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_case_3\n  File \"<bigcode>\", line 18, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py\", line 1069, in fit_predict\n    return self.fit(X, sample_weight=sample_weight).labels_\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 1152, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py\", line 1484, in fit\n    self._check_params_vs_input(X)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py\", line 1416, in _check_params_vs_input\n    super()._check_params_vs_input(X, default_n_init=10)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py\", line 866, in _check_params_vs_input\n    raise ValueError(\nValueError: n_samples=1 should be >= n_clusters=3.\n\n======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_case_1\nAssertionError: 'KMeans Clustering' != 'KMeans Clusters'\n- KMeans Clustering\n?               ^^^\n+ KMeans Clusters\n?               ^\n\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_case_2\nAssertionError: 'KMeans Clustering' != 'KMeans Clusters'\n- KMeans Clustering\n?               ^^^\n+ KMeans Clusters\n?               ^\n\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 34, in test_case_4\nAssertionError: 'KMeans Clustering' != 'KMeans Clusters'\n- KMeans Clustering\n?               ^^^\n+ KMeans Clusters\n?               ^\n\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 43, in test_case_5\nAssertionError: 'KMeans Clustering' != 'KMeans Clusters'\n- KMeans Clustering\n?               ^^^\n+ KMeans Clusters\n?               ^\n\n\n======================================================================\nFAIL: test_case_6 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 53, in test_case_6\nAssertionError: 'KMeans Clustering' != 'KMeans Clusters'\n- KMeans Clustering\n?               ^^^\n+ KMeans Clusters\n?               ^\n\n\n----------------------------------------------------------------------\nRan 8 tests in 0.471s\n\nFAILED (failures=5, errors=1)"}}
{"result": "```python\nimport numpy as np\nfrom collections import Counter\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\ndef task_func(df, bins=4):\n    values = df['value']\n    # Count duplicates (only values that occur more than once)\n    counts = Counter(values)\n    duplicates = Counter({k: v for k, v in counts.items() if v > 1})\n\n    # Plot histogram\n    fig, ax = plt.subplots()\n    n, bins, patches = ax.hist(values, bins=bins, color='green', alpha=0.6, density=True)\n\n    # Fit normal distribution\n    mu, std = norm.fit(values)\n\n    # Plot normal distribution curve\n    x = np.linspace(min(values), max(values), 1000)\n    p = norm.pdf(x, mu, std)\n    ax.plot(x, p, 'k-', linewidth=2)\n\n    # Titles and labels\n    ax.set_title(\"Distribution\")\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Frequency\")\n\n    return duplicates, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 26, in test_case_3\n  File \"<bigcode>\", line 20, in task_func\nValueError: min() arg is an empty sequence\n\n----------------------------------------------------------------------\nRan 6 tests in 0.088s\n\nFAILED (errors=1)"}}
{"result": "```python\nimport numpy as np\nimport secrets\nimport hashlib\nimport base64\n\ndef task_func(num, from_base, to_base, alphabet):\n    if from_base < 2 or to_base < 2:\n        raise ValueError(\"Invalid base for conversion. Base must be >= 2.\")\n\n    # Validate input characters\n    valid_chars = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+/\"\n    valid_for_from_base = valid_chars[:from_base]\n    if any(c not in valid_for_from_base for c in num):\n        raise ValueError(\"Invalid number format for conversion.\")\n\n    # Convert from from_base to integer\n    try:\n        integer = 0\n        for c in num:\n            val = valid_for_from_base.index(c)\n            integer = integer * from_base + val\n    except Exception:\n        raise ValueError(\"Invalid number format for conversion.\")\n\n    # Convert integer to to_base string\n    if integer == 0:\n        converted = valid_chars[0]\n    else:\n        digits = []\n        while integer > 0:\n            digits.append(alphabet[integer % to_base])\n            integer //= to_base\n        converted = ''.join(reversed(digits))\n\n    # Generate a random salt of length 16 bytes (hex string)\n    salt = secrets.token_hex(16)\n\n    # Concatenate converted string with salt\n    to_hash = (converted + salt).encode('utf-8')\n\n    # Hash using SHA-256\n    hash_digest = hashlib.sha256(to_hash).digest()\n\n    # Encode hash in base64, then translate to custom alphabet\n    std_b64 = base64.b64encode(hash_digest).decode('ascii')\n\n    # Standard base64 alphabet\n    std_alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n\n    # Create translation table from std_alphabet to custom alphabet\n    if len(alphabet) != 64:\n        raise ValueError(\"Alphabet length must be 64 for base64 encoding.\")\n    trans_table = str.maketrans(std_alphabet, alphabet)\n    custom_b64 = std_b64.translate(trans_table)\n\n    return custom_b64, salt\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport base64\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import padding\n\ndef task_func(num, from_base, to_base, private_key, alphabet):\n    # Convert num string from from_base to integer\n    digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+/\"\n    digit_map = {ch: i for i, ch in enumerate(digits)}\n    n = 0\n    for ch in num:\n        n = n * from_base + digit_map[ch]\n\n    # Convert integer n to string in to_base\n    if n == 0:\n        conv = \"0\"\n    else:\n        conv_digits = []\n        while n > 0:\n            n, r = divmod(n, to_base)\n            conv_digits.append(digits[r])\n        conv = ''.join(reversed(conv_digits))\n\n    # Sign the converted number bytes\n    # Use the UTF-8 bytes of the string conv\n    signature = private_key.sign(\n        conv.encode('utf-8'),\n        padding.PKCS1v15(),\n        hashes.SHA256()\n    )\n\n    # Base64 encode the signature using standard base64\n    b64 = base64.b64encode(signature).decode('ascii')\n\n    # Translate to custom alphabet\n    standard_b64_alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n    trans_table = str.maketrans(standard_b64_alphabet, alphabet)\n\n    return b64.translate(trans_table)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_invalid_base_conversion_raises_value_error (builtins.TestCases)\nTest that invalid base conversion raises a ValueError\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 29, in test_invalid_base_conversion_raises_value_error\nAssertionError: ValueError not raised\n\n----------------------------------------------------------------------\nRan 5 tests in 1.155s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport sqlite3\nimport numpy as np\nfrom random import choice, seed\n\ndef task_func(db_path, table_name, num_entries, random_seed=None):\n    NAMES = ['John', 'Jane', 'Steve', 'Emma', 'Liam', 'Olivia']\n    AGES = range(18, 65)\n    HEIGHTS = range(150, 200)\n    \n    if num_entries < 0:\n        raise ValueError(\"num_entries must not be negative\")\n        \n    if random_seed is not None:\n        seed(random_seed)\n        np.random.seed(random_seed)\n        \n    conn = sqlite3.connect(db_path)\n    cur = conn.cursor()\n    \n    create_table_sql = f'''\n    CREATE TABLE IF NOT EXISTS {table_name} (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        name TEXT NOT NULL,\n        age INTEGER NOT NULL,\n        height INTEGER NOT NULL\n    )\n    '''\n    cur.execute(create_table_sql)\n    \n    data = []\n    for _ in range(num_entries):\n        name = choice(NAMES)\n        age = choice(AGES)\n        height = choice(HEIGHTS)\n        data.append((name, age, height))\n    \n    insert_sql = f'INSERT INTO {table_name} (name, age, height) VALUES (?, ?, ?)'\n    cur.executemany(insert_sql, data)\n    conn.commit()\n    rows_inserted = cur.rowcount\n    \n    cur.close()\n    conn.close()\n    \n    return rows_inserted\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_6 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 44, in test_case_6\nAssertionError: 1 not found in ['John', 'Jane', 'Steve', 'Emma', 'Liam', 'Olivia']\n\n----------------------------------------------------------------------\nRan 13 tests in 0.013s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport sqlite3\nimport pandas as pd\nimport os\ndef task_func(db_name, table_name, csv_path=\"data.csv\"):\n    conn = sqlite3.connect(db_name)\n    df = pd.read_sql_query(f\"SELECT * FROM {table_name}\", conn)\n    conn.close()\n    df.to_csv(csv_path, index=False)\n    return os.path.abspath(csv_path)\n```", "match": {"category": "success"}}
{"result": "```python\nimport sqlite3\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef task_func(db_name=\"test.db\", table_name=\"People\"):\n    conn = sqlite3.connect(db_name)\n    query = f\"SELECT age FROM {table_name}\"\n    df = pd.read_sql_query(query, conn)\n    conn.close()\n\n    if (df['age'] < 0).any():\n        raise ValueError(\"If the data contains negative age values.\")\n\n    ax = sns.histplot(df['age'], bins=30, kde=True)\n    ax.set_xlabel('age')\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef task_func(db_name, table_name):\n    conn = sqlite3.connect(db_name)\n    query = f\"PRAGMA table_info({table_name})\"\n    schema = pd.read_sql(query, conn)\n    \n    # Filter out 'id' column and keep only numerical columns\n    # Numerical types often are: INTEGER, REAL, FLOAT, NUMERIC\n    def is_numeric_type(typ):\n        typ = typ.upper()\n        return any(nt in typ for nt in ['INT', 'REAL', 'FLOA', 'NUM'])\n    \n    numeric_cols = [row['name'] for idx, row in schema.iterrows() if row['name'].lower() != 'id' and is_numeric_type(row['type'])]\n    \n    if len(numeric_cols) < 2:\n        conn.close()\n        raise ValueError(\"If the table has less than two numerical columns.\")\n    \n    # Read only the first two numerical columns from the table\n    query = f\"SELECT {numeric_cols[0]}, {numeric_cols[1]} FROM {table_name}\"\n    df = pd.read_sql(query, conn)\n    conn.close()\n    \n    ax = df.plot.scatter(x=numeric_cols[0], y=numeric_cols[1])\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport sqlite3\nfrom random import choice, seed, randint\nimport os\ndef task_func(db_name, table_name, num_entries, random_seed=None):\n    if num_entries < 0:\n        raise ValueError(\"num_entries cannot be negative\")\n    if random_seed is not None:\n        seed(random_seed)\n    NAMES = ['John', 'Jane', 'Steve', 'Emma', 'Liam', 'Olivia']\n    AGES = range(18, 66)\n    HEIGHTS = range(150, 201)\n\n    conn = sqlite3.connect(db_name)\n    c = conn.cursor()\n    c.execute(f\"DROP TABLE IF EXISTS {table_name}\")\n    c.execute(f\"\"\"\n        CREATE TABLE {table_name} (\n            name TEXT,\n            age INTEGER,\n            height INTEGER\n        )\n    \"\"\")\n    data = [(choice(NAMES), choice(AGES), choice(HEIGHTS)) for _ in range(num_entries)]\n    c.executemany(f\"INSERT INTO {table_name} (name, age, height) VALUES (?, ?, ?)\", data)\n    conn.commit()\n    conn.close()\n    return os.path.abspath(db_name)\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_6 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 53, in test_case_6\n  File \"<bigcode>\", line 16, in task_func\nsqlite3.Warning: You can only execute one statement at a time.\n\n----------------------------------------------------------------------\nRan 6 tests in 0.007s\n\nFAILED (errors=1)"}}
{"result": "```python\nfrom collections import Counter\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport itertools\n\ndef task_func(list_of_menuitems, title=\"Menu Distribution\", color=\"blue\", width=1.0):\n    # Flatten the nested list\n    flat_list = list(itertools.chain.from_iterable(list_of_menuitems))\n    # Count occurrences\n    counts = Counter(flat_list)\n    # Sort items alphabetically\n    items = sorted(counts.keys())\n    frequencies = [counts[item] for item in items]\n\n    fig, ax = plt.subplots()\n    ax.bar(items, frequencies, color=color, width=width)\n    ax.set_xlabel(\"Menu Items\")\n    ax.set_ylabel(\"Frequency\")\n    ax.set_title(title)\n    plt.xticks(rotation=45, ha='right')\n\n    # Adjust layout to prevent cutting off labels\n    plt.tight_layout()\n\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_6 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 50, in test_case_6\nAssertionError: ValueError not raised\n\n----------------------------------------------------------------------\nRan 6 tests in 0.327s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport os\nimport sys\nimport importlib\nfrom pkgutil import iter_modules\n\ndef task_func(package_name):\n    try:\n        package = importlib.import_module(package_name)\n    except ImportError:\n        raise ImportError(f\"Package '{package_name}' not found. Please install it: pip install {package_name}\")\n\n    if not hasattr(package, '__path__'):\n        # Not a package but a module, add its directory\n        package_path = os.path.dirname(package.__file__)\n        if package_path not in sys.path:\n            sys.path.append(package_path)\n        return [package_name]\n\n    modules_added = []\n    for finder, name, ispkg in iter_modules(package.__path__):\n        full_name = f\"{package_name}.{name}\"\n        try:\n            mod = importlib.import_module(full_name)\n            mod_path = os.path.dirname(mod.__file__)\n            if mod_path not in sys.path:\n                sys.path.append(mod_path)\n            modules_added.append(name)\n        except ImportError:\n            # Skip if module cannot be imported\n            continue\n    return modules_added\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_module_path_in_sys_path (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 36, in test_module_path_in_sys_path\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_no_duplicates_in_sys_path (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 41, in test_no_duplicates_in_sys_path\nAssertionError: 0 != 1\n\n----------------------------------------------------------------------\nRan 5 tests in 0.079s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport hashlib\nimport random\nimport struct\nKEYS = ['470FC614', '4A0FC614', '4B9FC614', '4C8FC614', '4D7FC614']\ndef task_func(hex_keys=KEYS, seed=42):\n    random.seed(seed)\n    chosen_hex = random.choice(hex_keys)\n    if len(chosen_hex) != 8:\n        raise ValueError(\"Invalid hexadecimal string length\")\n    try:\n        int_val = int(chosen_hex, 16)\n    except ValueError:\n        raise ValueError(\"Invalid hexadecimal string\")\n    # Convert int_val to bytes (4 bytes, big endian)\n    try:\n        bytes_val = struct.pack(\">I\", int_val)\n        float_val = struct.unpack(\">f\", bytes_val)[0]\n    except struct.error:\n        raise ValueError(\"Invalid hexadecimal string for float conversion\")\n    float_str = f\"{float_val}\"\n    md5_hash = hashlib.md5(float_str.encode(\"utf-8\")).hexdigest()\n    return md5_hash\n```", "match": {"category": "success"}}
{"result": "```python\nimport base64\nimport os\nimport struct\nimport random\n\ndef task_func():\n    # Generate a random float number\n    rand_float = random.random()\n    # Convert float to bytes (using double precision)\n    float_bytes = struct.pack('>d', rand_float)\n    # Convert bytes to hexadecimal string\n    hex_str = float_bytes.hex()\n    # Encode hexadecimal string to bytes\n    hex_bytes = hex_str.encode()\n    # Base64 encode the hexadecimal bytes\n    b64_encoded = base64.b64encode(hex_bytes).decode()\n    return b64_encoded\n```", "match": {"category": "success"}}
{"result": "```python\nimport struct\nimport zlib\n# Constants\nKEY = '470FC614'\ndef task_func(hex_string=KEY):\n    # Convert hex string to float (binary32)\n    int_value = int(hex_string, 16)\n    float_value = struct.unpack('!f', struct.pack('!I', int_value))[0]\n    # Pack float to binary32 bytes\n    float_bytes = struct.pack('!f', float_value)\n    # Compress the bytes\n    compressed = zlib.compress(float_bytes)\n    return compressed\n```", "match": {"category": "success"}}
{"result": "```python\nimport codecs\nimport random\nimport struct\nKEYS = ['470FC614', '4A0FC614', '4B9FC614', '4C8FC614', '4D7FC614']\ndef task_func(hex_keys=KEYS):\n    hex_str = random.choice(hex_keys)\n    # Convert hex string to bytes\n    b = bytes.fromhex(hex_str)\n    # Unpack bytes as float (assuming big-endian IEEE 754)\n    f = struct.unpack('>f', b)[0]\n    # Encode float as UTF-8 string\n    encoded = str(f).encode('utf-8')\n    return {'bytes': encoded}\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_custom_hex_keys (builtins.TestCases)\nTest the function with a custom list of hexadecimal keys.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 11, in test_custom_hex_keys\nAssertionError: {'bytes': b'3.634915803432275e-23'} is not an instance of <class 'bytes'>\n\n======================================================================\nFAIL: test_default_functionality (builtins.TestCases)\nTest the function with default parameters.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 6, in test_default_functionality\nAssertionError: {'bytes': b'20941864.0'} is not an instance of <class 'bytes'>\n\n----------------------------------------------------------------------\nRan 5 tests in 0.002s\n\nFAILED (failures=2)"}}
{"result": "```python\nfrom collections import OrderedDict\nfrom prettytable import PrettyTable\ndef task_func(my_dict):\n    sorted_items = OrderedDict(sorted(my_dict.items()))\n    pt = PrettyTable()\n    pt.field_names = [\"Key\", \"Value\"]\n    for k, v in sorted_items.items():\n        pt.add_row([k, v])\n    return pt\n```", "match": {"category": "success"}}
{"result": "```python\nimport hashlib\nimport os\nimport base64\ndef task_func(password: str, salt_length: int = 8) -> str:\n    salt = os.urandom(salt_length)\n    hash_digest = hashlib.sha256(salt + password.encode()).digest()\n    return base64.b64encode(salt + hash_digest).decode()\n```", "match": {"category": "success"}}
{"result": "```python\nimport random\nimport string\nimport base64\nimport zlib\ndef task_func(string_length=100):\n    random_str = ''.join(random.choices(string.ascii_uppercase + string.digits, k=string_length))\n    compressed = zlib.compress(random_str.encode())\n    encoded = base64.b64encode(compressed).decode()\n    return encoded\n```", "match": {"category": "success"}}
{"result": "```python\nimport base64\nimport pandas as pd\ndef task_func(data_dict):\n    df = pd.DataFrame(data_dict)\n    csv_bytes = df.to_csv(index=False).encode('utf-8')\n    base64_str = base64.b64encode(csv_bytes).decode('utf-8')\n    return base64_str\n```", "match": {"category": "success"}}
{"result": "```python\nfrom collections import Counter\nimport pandas as pd\ndef task_func(list_of_menuitems):\n    # Flatten the nested list\n    flat_list = []\n    def flatten(items):\n        for item in items:\n            if isinstance(item, list):\n                flatten(item)\n            else:\n                flat_list.append(item)\n    flatten(list_of_menuitems)\n    \n    # Count the occurrences\n    counts = Counter(flat_list)\n    \n    # Create DataFrame\n    df = pd.DataFrame.from_dict(counts, orient='index', columns=['Count'])\n    df.index.name = 'MenuItem'\n    \n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nfrom collections import Counter\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\ndef task_func(list_of_menuitems):\n    # Flatten the nested list\n    flat_list = []\n    def flatten(lst):\n        for item in lst:\n            if isinstance(item, list):\n                flatten(item)\n            else:\n                flat_list.append(item)\n    flatten(list_of_menuitems)\n\n    if not flat_list:\n        return None\n\n    # Count frequency\n    counter = Counter(flat_list)\n    df = pd.DataFrame(counter.items(), columns=['Menu Item', 'Frequency'])\n    df = df.sort_values('Frequency', ascending=False)\n\n    # Plot\n    plt.figure(figsize=(10,6))\n    ax = sns.barplot(x='Frequency', y='Menu Item', data=df, palette='viridis')\n    ax.set_title('Menu Item Frequencies')\n    plt.tight_layout()\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport collections\nimport itertools\nimport matplotlib.pyplot as plt\n# Constants\nITEMS = ['apple', 'banana']\ndef task_func(a, b, items=ITEMS):\n    combined = list(itertools.chain(a, b))\n    counter = collections.Counter(combined)\n    frequencies = [counter[item] for item in items]\n    \n    fig, ax = plt.subplots()\n    ax.bar(items, frequencies, color='skyblue')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Frequency of Predefined Items')\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n# Constants\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(a, b):\n    nrows = len(a)\n    ncols = len(b)\n    cols = COLUMNS[:ncols]\n    data = np.random.rand(nrows, ncols)\n    df = pd.DataFrame(data, index=a, columns=cols)\n    ax = df.plot.bar()\n    plt.tight_layout()\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_both_lists_empty (builtins.TestCases)\nTest with both 'a' and 'b' lists empty.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 18, in test_both_lists_empty\n  File \"<bigcode>\", line 13, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/plotting/_core.py\", line 1136, in bar\n    return self(kind=\"bar\", x=x, y=y, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/plotting/_core.py\", line 975, in __call__\n    return plot_backend.plot(data, kind=kind, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/plotting/_matplotlib/__init__.py\", line 71, in plot\n    plot_obj.generate()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/plotting/_matplotlib/core.py\", line 446, in generate\n    self._compute_plot_data()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/plotting/_matplotlib/core.py\", line 632, in _compute_plot_data\n    raise TypeError(\"no numeric data to plot\")\nTypeError: no numeric data to plot\n\n======================================================================\nERROR: test_empty_a_list (builtins.TestCases)\nTest with an empty 'a' list.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 10, in test_empty_a_list\n  File \"<bigcode>\", line 13, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/plotting/_core.py\", line 1136, in bar\n    return self(kind=\"bar\", x=x, y=y, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/plotting/_core.py\", line 975, in __call__\n    return plot_backend.plot(data, kind=kind, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/plotting/_matplotlib/__init__.py\", line 71, in plot\n    plot_obj.generate()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/plotting/_matplotlib/core.py\", line 455, in generate\n    self._post_plot_logic(ax, self.data)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/plotting/_matplotlib/core.py\", line 1750, in _post_plot_logic\n    s_edge = self.ax_pos[0] - 0.25 + self.lim_offset\nIndexError: index 0 is out of bounds for axis 0 with size 0\n\n======================================================================\nERROR: test_empty_b_list (builtins.TestCases)\nTest with an empty 'b' list.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 14, in test_empty_b_list\n  File \"<bigcode>\", line 13, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/plotting/_core.py\", line 1136, in bar\n    return self(kind=\"bar\", x=x, y=y, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/plotting/_core.py\", line 975, in __call__\n    return plot_backend.plot(data, kind=kind, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/plotting/_matplotlib/__init__.py\", line 71, in plot\n    plot_obj.generate()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/plotting/_matplotlib/core.py\", line 446, in generate\n    self._compute_plot_data()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/plotting/_matplotlib/core.py\", line 632, in _compute_plot_data\n    raise TypeError(\"no numeric data to plot\")\nTypeError: no numeric data to plot\n\n----------------------------------------------------------------------\nRan 5 tests in 0.137s\n\nFAILED (errors=3)"}}
{"result": "```python\nimport numpy as np\nimport random\ndef task_func(MIN_WORDS, MAX_WORDS, WORDS_POOL):\n    length = random.randint(MIN_WORDS, MAX_WORDS)\n    half_len = length // 2\n    middle = [] if length % 2 == 0 else [random.choice(WORDS_POOL)]\n    first_half = [random.choice(WORDS_POOL) for _ in range(half_len)]\n    sentence = first_half + middle + first_half[::-1]\n    return ' '.join(sentence)\n```", "match": {"category": "success"}}
{"result": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom scipy import stats\n\ndef task_func(a, b):\n    # Calculate Pearson correlation coefficient\n    corr_coef, _ = stats.pearsonr(a, b)\n    \n    # Create DataFrame\n    df = pd.DataFrame({'a': a, 'b': b})\n    \n    # Create scatter plot\n    fig, ax = plt.subplots()\n    ax.scatter(df['a'], df['b'], label='Data points')\n    \n    # Calculate regression line\n    slope, intercept, _, _, _ = stats.linregress(df['a'], df['b'])\n    x_vals = np.array(ax.get_xlim())\n    y_vals = intercept + slope * x_vals\n    ax.plot(x_vals, y_vals, color='red', label='Regression line')\n    \n    ax.set_xlabel('a')\n    ax.set_ylabel('b')\n    ax.legend()\n    \n    return corr_coef, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport random\nfrom difflib import SequenceMatcher\ndef task_func(s, min_length, max_length, letters):\n    length = random.randint(min_length, max_length)\n    generated = ''.join(random.choices(letters, k=length))\n    similarity = SequenceMatcher(None, s, generated).ratio()\n    return (generated, similarity >= 0.5)\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nfrom difflib import SequenceMatcher\nimport matplotlib.pyplot as plt\ndef task_func(s_list, plot_path=None):\n    if not isinstance(s_list, list) or not all(isinstance(s, str) for s in s_list):\n        raise ValueError(\"Input must be a list of strings\")\n    n = len(s_list)\n    if n == 1:\n        return [np.nan]\n    scores = []\n    for i, s1 in enumerate(s_list):\n        total_ratio = 0.0\n        count = 0\n        for j, s2 in enumerate(s_list):\n            if i != j:\n                ratio = SequenceMatcher(None, s1, s2).ratio()\n                total_ratio += ratio\n                count += 1\n        avg_ratio = total_ratio / count if count > 0 else np.nan\n        scores.append(avg_ratio)\n    if plot_path is not None:\n        plt.figure(figsize=(8, 4))\n        plt.plot(range(1, n + 1), scores, marker='o', linestyle='-', color='b')\n        plt.title(\"Average Similarity Scores\")\n        plt.xlabel(\"String Index\")\n        plt.ylabel(\"Average Similarity Score\")\n        plt.ylim(0, 1)\n        plt.grid(True)\n        plt.savefig(plot_path)\n        plt.close()\n    return scores\n```", "match": {"category": "success"}}
{"result": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(a, b, columns=['A', 'B']):\n    data = np.column_stack((a, b))\n    scaler = StandardScaler()\n    scaled = scaler.fit_transform(data)\n    df = pd.DataFrame(scaled, columns=columns, index=range(len(a)))\n    \n    ax = df.plot(kind='bar', figsize=(10, 6))\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Standardized values')\n    ax.set_title('Standardized Values Bar Plot')\n    plt.tight_layout()\n    plt.show()\n    \n    return df, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_empty_lists (builtins.TestCases)\nTest the function with empty lists.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_empty_lists\n  File \"<bigcode>\", line 9, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/utils/_set_output.py\", line 157, in wrapped\n    data_to_wrap = f(self, X, *args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 916, in fit_transform\n    return self.fit(X, **fit_params).transform(X)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/preprocessing/_data.py\", line 839, in fit\n    return self.partial_fit(X, y, sample_weight)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 1152, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/preprocessing/_data.py\", line 875, in partial_fit\n    X = self._validate_data(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 605, in _validate_data\n    out = check_array(X, input_name=\"X\", **check_params)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 967, in check_array\n    raise ValueError(\nValueError: Found array with 0 sample(s) (shape=(0, 2)) while a minimum of 1 is required by StandardScaler.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.312s\n\nFAILED (errors=1)"}}
{"result": "```python\nimport pandas as pd\nfrom scipy.spatial import distance\nimport matplotlib.pyplot as plt\n\ndef task_func(a, b):\n    # Calculate Euclidean distance between the two lists\n    dist = distance.euclidean(a, b)\n    \n    # Create a DataFrame with the two lists as columns and indices 'A' and 'B'\n    df = pd.DataFrame([a, b], index=['A', 'B']).T\n    \n    # Plot the values\n    fig, ax = plt.subplots()\n    df.plot(kind='line', ax=ax, marker='o')\n    \n    # Annotate the plot with the Euclidean distance\n    ax.text(0.5, 0.9, f'Euclidean distance: {dist:.4f}', \n            transform=ax.transAxes, ha='center', fontsize=12, bbox=dict(facecolor='white', alpha=0.7))\n    \n    ax.set_xlabel('Index')\n    ax.set_ylabel('Value')\n    ax.set_title('Values from lists A and B with Euclidean Distance')\n    \n    return dist, df, ax\n```", "match": {"category": "success"}}
{"result": "```python\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(data):\n    \"\"\"\n    Plots a bar chart of monthly data values for a single year.\n\n    Parameters:\n    data (pd.DataFrame): DataFrame with columns 'month' (1-12) and 'value', and a 'year' column or single year indicated.\n\n    Returns:\n    matplotlib.axes.Axes: The axes object with the plot.\n    \"\"\"\n    # If data is a DataFrame with 'year' column, get the year from the first row\n    if 'year' in data.columns:\n        year = data['year'].iloc[0]\n    else:\n        # If no year info, get current year\n        year = datetime.now().year\n\n    fig, ax = plt.subplots(figsize=(8,5))\n\n    # Ensure months are from 1 to 12 and sorted\n    df = data.copy()\n    df = df.sort_values('month')\n\n    ax.bar(df['month'], df['value'], width=0.6)\n    ax.set_title(f'Monthly Data for {year}')\n    ax.set_xlabel('Month')\n    ax.set_ylabel('Value')\n    ax.set_xticks(range(1,13))\n    ax.set_xticklabels(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])\n    ax.set_xlim(0.5, 12.5)\n\n    plt.tight_layout()\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_basic_functionality (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 5, in test_basic_functionality\n  File \"<bigcode>\", line 16, in task_func\nAttributeError: 'str' object has no attribute 'columns'\n\n======================================================================\nERROR: test_empty_data (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_empty_data\n  File \"<bigcode>\", line 16, in task_func\nAttributeError: 'str' object has no attribute 'columns'\n\n======================================================================\nERROR: test_full_year_data (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_full_year_data\n  File \"<bigcode>\", line 16, in task_func\nAttributeError: 'str' object has no attribute 'columns'\n\n======================================================================\nERROR: test_incorrect_data_format (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_incorrect_data_format\n  File \"<bigcode>\", line 16, in task_func\nAttributeError: 'str' object has no attribute 'columns'\n\n======================================================================\nERROR: test_partial_year_data (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 16, in test_partial_year_data\n  File \"<bigcode>\", line 16, in task_func\nAttributeError: 'str' object has no attribute 'columns'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.004s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport pytz\nfrom dateutil import parser\ndef task_func(date_str, from_tz, to_tz):\n    from_timezone = pytz.timezone(from_tz)\n    to_timezone = pytz.timezone(to_tz)\n    dt = parser.parse(date_str)\n    if dt.tzinfo is None:\n        dt = from_timezone.localize(dt)\n    else:\n        dt = dt.astimezone(from_timezone)\n    converted_dt = dt.astimezone(to_timezone)\n    return converted_dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport ctypes\nimport sys\nimport subprocess\n\ndef task_func(filepath):\n    if not isinstance(filepath, str):\n        raise TypeError(\"Filepath must be a string.\")\n    if not filepath or not os.path.isfile(filepath):\n        raise OSError(\"Invalid or empty filepath.\")\n    dll = ctypes.CDLL(filepath)\n\n    import platform\n    system = platform.system()\n    node = platform.node()\n    release = platform.release()\n    version = platform.version()\n    machine = platform.machine()\n    python_version = platform.python_version()\n    \n    try:\n        pip_version = subprocess.check_output([sys.executable, \"-m\", \"pip\", \"--version\"], stderr=subprocess.STDOUT)\n        pip_version = pip_version.decode().strip().split()[1]\n    except Exception:\n        pip_version = \"Unknown\"\n\n    print(f\"System: {system} Node Name: {node} Release: {release} Version: {version} Machine: {machine} Python Version: {python_version} PIP Version: {pip_version}\")\n\n    return os.path.basename(filepath)\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_return_type (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 39, in test_return_type\n  File \"<bigcode>\", line 11, in task_func\nOSError: Invalid or empty filepath.\n\n======================================================================\nERROR: test_system_info_printing (builtins.TestCases)\nCheck if system information is correctly printed.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 18, in test_system_info_printing\n  File \"<bigcode>\", line 11, in task_func\nOSError: Invalid or empty filepath.\n\n----------------------------------------------------------------------\nRan 6 tests in 0.017s\n\nFAILED (errors=2)"}}
{"result": "```python\nimport ctypes\nimport os\nimport shutil\nimport glob\ndef task_func(filepath, destination_dir):\n    # Load the specified DLL file\n    dll = ctypes.CDLL(filepath)\n    # Get the loaded DLL file name\n    dll_name = os.path.basename(filepath)\n    \n    # Ensure destination directory exists\n    if not os.path.exists(destination_dir):\n        os.makedirs(destination_dir)\n    \n    # Get directory of the specified DLL file\n    dll_dir = os.path.dirname(os.path.abspath(filepath))\n    # Find all DLL files in the directory\n    dll_files = glob.glob(os.path.join(dll_dir, \"*.dll\"))\n    \n    # Move all DLL files to the destination directory\n    for f in dll_files:\n        dest_file = os.path.join(destination_dir, os.path.basename(f))\n        # If the destination file exists, overwrite it\n        shutil.move(f, dest_file)\n    \n    return dll_name\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport ctypes\nfrom datetime import datetime\nimport pytz\n\ndef task_func(filepath):\n    # Load the DLL using ctypes\n    dll = ctypes.CDLL(filepath)\n    \n    # Get file metadata\n    stat_info = os.stat(filepath)\n    \n    # Convert times to UTC datetime strings\n    utc = pytz.UTC\n    creation_time = datetime.utcfromtimestamp(stat_info.st_ctime).replace(tzinfo=pytz.utc).strftime('%Y-%m-%d %H:%M:%S %Z')\n    modification_time = datetime.utcfromtimestamp(stat_info.st_mtime).replace(tzinfo=pytz.utc).strftime('%Y-%m-%d %H:%M:%S %Z')\n    \n    metadata = {\n        'Creation Time': creation_time,\n        'Modification Time': modification_time,\n        'Size': stat_info.st_size\n    }\n    \n    # Return name of DLL file and metadata dictionary\n    return os.path.basename(filepath), metadata\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_metadata_printing (builtins.TestCases)\nCheck if file metadata is correctly printed.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 54, in test_metadata_printing\nAssertionError: {'Creation Time': '2021-01-01 00:00:00 UTC', 'Modification [44 chars]3456} != {'Creation Time': datetime.datetime(2021, 1, 1, 0, 0, tzinf[92 chars]3456}\n- {'Creation Time': '2021-01-01 00:00:00 UTC',\n-  'Modification Time': '2021-01-02 00:00:00 UTC',\n+ {'Creation Time': datetime.datetime(2021, 1, 1, 0, 0, tzinfo=<UTC>),\n+  'Modification Time': datetime.datetime(2021, 1, 2, 0, 0, tzinfo=<UTC>),\n   'Size': 123456}\n\n----------------------------------------------------------------------\nRan 5 tests in 0.010s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport ctypes\nimport hashlib\nimport binascii\n\ndef task_func(filepath):\n    # Load the DLL\n    dll = ctypes.CDLL(filepath)\n    \n    # Read the file content to compute hashes\n    with open(filepath, 'rb') as f:\n        content = f.read()\n    \n    md5_hash = hashlib.md5(content).digest()\n    sha256_hash = hashlib.sha256(content).digest()\n    \n    # Convert to hex\n    md5_hex = binascii.hexlify(md5_hash).decode()\n    sha256_hex = binascii.hexlify(sha256_hash).decode()\n    \n    print(f\"MD5: {md5_hex}\")\n    print(f\"SHA256: {sha256_hex}\")\n    \n    # Return the DLL's actual loaded name\n    return dll._name\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_md5_hash_printed (builtins.TestCases)\nTest if the MD5 hash is correctly calculated and printed.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 42, in test_md5_hash_printed\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1000, in assert_any_call\n    raise AssertionError(\nAssertionError: print('MD5 Hash: 9315983fcdb4cccb287bccdbdd4e8a45') call not found\n\n======================================================================\nFAIL: test_sha256_hash_printed (builtins.TestCases)\nTest if the SHA256 hash is correctly calculated and printed.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 53, in test_sha256_hash_printed\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1000, in assert_any_call\n    raise AssertionError(\nAssertionError: print('SHA256 Hash: d7a8fb48d28d1d73a0346bbf4041df98c2501d4ae4889b934faa63f7af67e9b1') call not found\n\n----------------------------------------------------------------------\nRan 5 tests in 0.028s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport inspect\nimport types\ndef task_func(f):\n    result = {}\n    result['name'] = f.__name__ if hasattr(f, '__name__') else None\n    result['is_lambda'] = isinstance(f, types.LambdaType) and f.__name__ == (lambda:0).__name__\n    \n    sig = None\n    try:\n        sig = inspect.signature(f)\n    except (ValueError, TypeError):\n        # Could not get signature\n        result['arguments'] = None\n        result['defaults'] = None\n        result['annotations'] = None\n        return result\n\n    params = sig.parameters\n    args = []\n    defaults = {}\n    for name, param in params.items():\n        args.append(name)\n        if param.default is not param.empty:\n            defaults[name] = param.default\n\n    result['arguments'] = args\n    result['defaults'] = defaults if defaults else None\n    result['annotations'] = dict(sig.parameters[name].annotation for name in params if sig.parameters[name].annotation is not inspect._empty)\n    if sig.return_annotation is not inspect._empty:\n        result['annotations']['return'] = sig.return_annotation\n\n    if not result['annotations']:\n        result['annotations'] = None\n\n    return result\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_annotations (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 19, in test_annotations\n  File \"<bigcode>\", line 29, in task_func\nTypeError: cannot convert dictionary update sequence element #0 to a sequence\n\n======================================================================\nERROR: test_defaults_none (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_defaults_none\nKeyError: 0\n\n======================================================================\nERROR: test_no_arguments (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 16, in test_no_arguments\nKeyError: 'args'\n\n======================================================================\nERROR: test_regular_function (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 6, in test_regular_function\nKeyError: 'function_name'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.002s\n\nFAILED (errors=4)"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    values = pd.to_numeric(data.split(), errors='coerce').dropna()\n    bins = np.arange(values.min(), values.max() + 2) - 0.5\n    fig, ax = plt.subplots()\n    ax.hist(values, bins=bins, edgecolor='black')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Histogram of Values')\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 5, in test_case_1\n  File \"<bigcode>\", line 6, in task_func\nAttributeError: 'numpy.ndarray' object has no attribute 'dropna'\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_case_2\n  File \"<bigcode>\", line 6, in task_func\nAttributeError: 'numpy.ndarray' object has no attribute 'dropna'\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 19, in test_case_3\n  File \"<bigcode>\", line 6, in task_func\nAttributeError: 'numpy.ndarray' object has no attribute 'dropna'\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 26, in test_case_4\n  File \"<bigcode>\", line 6, in task_func\nAttributeError: 'numpy.ndarray' object has no attribute 'dropna'\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 33, in test_case_5\n  File \"<bigcode>\", line 6, in task_func\nAttributeError: 'numpy.ndarray' object has no attribute 'dropna'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.009s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport inspect\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(f_list):\n    for f in f_list:\n        if callable(f) and (f.__name__ == \"<lambda>\"):\n            raise ValueError(\"Input contains lambda function\")\n    data = []\n    for f in f_list:\n        sig = inspect.signature(f)\n        params = sig.parameters\n        # Count only positional or keyword arguments, excluding *args and **kwargs\n        count = sum(\n            1 for p in params.values()\n            if p.kind in (inspect.Parameter.POSITIONAL_ONLY, \n                          inspect.Parameter.POSITIONAL_OR_KEYWORD,\n                          inspect.Parameter.KEYWORD_ONLY)\n        )\n        data.append((f.__name__, count))\n    df = pd.DataFrame(data, columns=[\"Function\", \"NumArgs\"])\n    plt.figure(figsize=(8, 5))\n    plt.bar(df[\"Function\"], df[\"NumArgs\"])\n    plt.xlabel(\"Function Names\")\n    plt.ylabel(\"Number of Arguments\")\n    plt.title(\"Number of Arguments per Function\")\n    plt.xticks(rotation=45, ha=\"right\")\n    plt.tight_layout()\n    plt.show()\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_function_with_defaults (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Number of Arguments'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_function_with_defaults\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexing.py\", line 1096, in __getitem__\n    return self.obj._get_value(*key, takeable=self._takeable)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3870, in _get_value\n    series = self._get_item_cache(col)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 4255, in _get_item_cache\n    loc = self.columns.get_loc(item)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Number of Arguments'\n\n======================================================================\nERROR: test_multiple_functions (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Number of Arguments'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 14, in test_multiple_functions\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexing.py\", line 1096, in __getitem__\n    return self.obj._get_value(*key, takeable=self._takeable)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3870, in _get_value\n    series = self._get_item_cache(col)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 4255, in _get_item_cache\n    loc = self.columns.get_loc(item)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Number of Arguments'\n\n======================================================================\nERROR: test_no_arguments_function (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Number of Arguments'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 19, in test_no_arguments_function\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexing.py\", line 1096, in __getitem__\n    return self.obj._get_value(*key, takeable=self._takeable)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3870, in _get_value\n    series = self._get_item_cache(col)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 4255, in _get_item_cache\n    loc = self.columns.get_loc(item)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Number of Arguments'\n\n======================================================================\nERROR: test_single_function (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Number of Arguments'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 9, in test_single_function\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexing.py\", line 1096, in __getitem__\n    return self.obj._get_value(*key, takeable=self._takeable)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3870, in _get_value\n    series = self._get_item_cache(col)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 4255, in _get_item_cache\n    loc = self.columns.get_loc(item)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Number of Arguments'\n\n----------------------------------------------------------------------\nRan 6 tests in 0.273s\n\nFAILED (errors=4)"}}
{"result": "```python\nimport inspect\nimport types\nimport math\ndef task_func(f):\n    sig = inspect.signature(f)\n    params = sig.parameters.values()\n    num_args = len(params)\n    sqrt_num_args = math.sqrt(num_args)\n    defaults = [p.default for p in params if p.default is not inspect.Parameter.empty]\n    lambda_count = sum(1 for d in defaults if isinstance(d, types.LambdaType) and d.__name__ == \"<lambda>\")\n    return {\n        \"name\": f.__name__,\n        \"sqrt_num_args\": sqrt_num_args,\n        \"lambda_count_in_defaults\": lambda_count,\n    }\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_function_with_multiple_defaults (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_function_with_multiple_defaults\nKeyError: 'lambda_in_defaults'\n\n======================================================================\nERROR: test_function_with_no_lambda_defaults (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_function_with_no_lambda_defaults\nKeyError: 'lambda_in_defaults'\n\n======================================================================\nERROR: test_lambda_function (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_lambda_function\nKeyError: 'function_name'\n\n======================================================================\nERROR: test_lambda_in_defaults (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_lambda_in_defaults\nKeyError: 'lambda_in_defaults'\n\n======================================================================\nERROR: test_math_operation_direct_check (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 44, in test_math_operation_direct_check\nKeyError: 'sqrt_args'\n\n======================================================================\nERROR: test_no_arguments (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 16, in test_no_arguments\nKeyError: 'sqrt_args'\n\n======================================================================\nERROR: test_regular_function (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 7, in test_regular_function\nKeyError: 'function_name'\n\n======================================================================\nERROR: test_sqrt_args_correctness (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 35, in test_sqrt_args_correctness\nKeyError: 'sqrt_args'\n\n----------------------------------------------------------------------\nRan 9 tests in 0.002s\n\nFAILED (errors=8)"}}
{"result": "```python\nimport inspect\nimport types\nimport json\ndef task_func(f):\n    func_name = f.__name__\n    sig = inspect.signature(f)\n    params = {}\n    defaults = {}\n    annotations = {}\n    for name, param in sig.parameters.items():\n        params[name] = str(param.kind)\n        if param.default is not inspect._empty:\n            defaults[name] = param.default\n        if param.annotation is not inspect._empty:\n            annotations[name] = str(param.annotation)\n    ret_ann = sig.return_annotation\n    if ret_ann is not inspect._empty:\n        annotations['return'] = str(ret_ann)\n\n    result = {\n        \"name\": func_name,\n        \"args\": list(sig.parameters.keys()),\n        \"defaults\": defaults,\n        \"annotations\": annotations,\n        \"is_lambda\": isinstance(f, types.LambdaType) and f.__name__ == \"<lambda>\"\n    }\n    return json.dumps(result)\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_function_name (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_function_name\nKeyError: 'function_name'\n\n======================================================================\nERROR: test_lambda_function (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_lambda_function\nKeyError: 'function_name'\n\n======================================================================\nERROR: test_regular_function (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 7, in test_regular_function\nKeyError: 'function_name'\n\n======================================================================\nFAIL: test_function_annotations (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 30, in test_function_annotations\nAssertionError: {'x': \"<class 'int'>\", 'y': \"<class 'str'>\", 'return': 'None'} != {'x': 'int', 'y': 'str', 'return': 'None'}\n- {'return': 'None', 'x': \"<class 'int'>\", 'y': \"<class 'str'>\"}\n?                        --------      --      --------      --\n\n+ {'return': 'None', 'x': 'int', 'y': 'str'}\n\n======================================================================\nFAIL: test_function_with_no_defaults (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_function_with_no_defaults\nAssertionError: {} is not None\n\n----------------------------------------------------------------------\nRan 6 tests in 0.003s\n\nFAILED (failures=2, errors=3)"}}
{"result": "```python\nimport inspect\nimport pandas as pd\nimport os\n\ndef task_func(f_list, file_path):\n    # Validate f_list\n    if not isinstance(f_list, list) or len(f_list) == 0:\n        raise ValueError(\"f_list must be a non-empty list\")\n    if not all(callable(f) and inspect.isfunction(f) for f in f_list):\n        raise ValueError(\"All elements in f_list must be functions\")\n    \n    # Validate file_path\n    if not isinstance(file_path, str) or file_path.strip() == \"\":\n        raise ValueError(\"file_path must be a valid non-empty string path\")\n    dir_path = os.path.dirname(os.path.abspath(file_path)) if os.path.dirname(file_path) else os.getcwd()\n    if not os.path.exists(dir_path):\n        raise ValueError(\"The directory of file_path does not exist\")\n    \n    rows = []\n    for f in f_list:\n        try:\n            sig = inspect.signature(f)\n        except ValueError:\n            # some built-in or special functions might not have a signature\n            sig = None\n        \n        # Function Name\n        fname = f.__name__ if hasattr(f, \"__name__\") else str(f)\n        \n        # Number of Arguments\n        num_args = 0\n        defaults = None\n        annotations = {}\n        if sig is not None:\n            params = sig.parameters.values()\n            # Count only parameters that are positional or keyword (not *args/**kwargs separately counted)\n            num_args = len(params)\n            # Defaults\n            if any(p.default is not inspect.Parameter.empty for p in params):\n                defaults_dict = {p.name: p.default for p in params if p.default is not inspect.Parameter.empty}\n                # serialize defaults dictionary as string\n                defaults = str(defaults_dict)\n            else:\n                defaults = \"\"\n            # Annotations\n            annotations = {}\n            for p in params:\n                if p.annotation is not inspect.Parameter.empty:\n                    annotations[p.name] = p.annotation\n            if sig.return_annotation is not inspect.Signature.empty:\n                annotations['return'] = sig.return_annotation\n            if annotations:\n                # convert annotations to string dictionary with repr for each value\n                ann_dict = {k: repr(v) for k,v in annotations.items()}\n                annotations = str(ann_dict)\n            else:\n                annotations = \"\"\n        else:\n            num_args = \"\"\n            defaults = \"\"\n            annotations = \"\"\n\n        is_lambda = fname == \"<lambda>\"\n        \n        rows.append({\n            \"Function Name\": fname,\n            \"Number of Arguments\": num_args,\n            \"Defaults\": defaults,\n            \"Annotations\": annotations,\n            \"Is Lambda\": is_lambda\n        })\n    \n    df = pd.DataFrame(rows, columns=[\"Function Name\", \"Number of Arguments\", \"Defaults\", \"Annotations\", \"Is Lambda\"])\n    try:\n        df.to_csv(file_path, index=False)\n    except IOError as e:\n        raise IOError(e)\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_io_error (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_io_error\n  File \"<bigcode>\", line 18, in task_func\nValueError: The directory of file_path does not exist\n\n----------------------------------------------------------------------\nRan 7 tests in 0.021s\n\nFAILED (errors=1)"}}
{"result": "```python\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(array_length=100):\n    arr1 = np.array([randint(0, 100) for _ in range(array_length)])\n    arr2 = np.array([randint(0, 100) for _ in range(array_length)])\n    max_values = np.maximum(arr1, arr2)\n    fig, ax = plt.subplots()\n    ax.plot(max_values)\n    ax.set_ylabel('Maximum Values')\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef task_func(array_length=100):\n    # Generate two random arrays\n    arr1 = np.random.rand(array_length)\n    arr2 = np.random.rand(array_length)\n    \n    # Calculate statistics\n    stats = {\n        'Mean': [np.mean(arr1), np.mean(arr2)],\n        'Median': [np.median(arr1), np.median(arr2)],\n        'Standard Deviation': [np.std(arr1), np.std(arr2)]\n    }\n    \n    # Create DataFrame\n    statistics = pd.DataFrame(stats, index=['Array1', 'Array2']).T\n    \n    # Plot bar chart\n    ax = statistics.plot(kind='bar', rot=0)\n    ax.set_title('Comparison of Statistics')\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Statistic')\n    ax.legend(title='Array')\n    plt.tight_layout()\n    \n    return statistics, ax\n```", "match": {"category": "success"}}
{"result": "```python\nfrom scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(array_length=100, noise_level=0.2):\n    # Generate x values\n    x = np.linspace(0, 4 * np.pi, array_length)\n    # True sine values\n    y_true = np.sin(x)\n    # Add noise\n    noise = np.random.normal(0, noise_level, array_length)\n    y_noisy = y_true + noise\n\n    # Define sine function for curve fitting\n    def sine_func(x, A, B, C, D):\n        return A * np.sin(B * x + C) + D\n\n    # Initial guess for parameters: amplitude=1, frequency=1, phase=0, offset=0\n    p0 = [1, 1, 0, 0]\n    params, _ = curve_fit(sine_func, x, y_noisy, p0=p0)\n\n    # Generate fitted curve\n    y_fit = sine_func(x, *params)\n\n    # Plot\n    fig, ax = plt.subplots()\n    ax.plot(x, y_noisy, 'o', label='Noisy data', markersize=4)\n    ax.plot(x, y_fit, '-', label='Fitted curve', linewidth=2)\n    ax.set_title('Noisy Sine Wave and Fitted Curve')\n    ax.legend()\n    ax.grid(True)\n\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_case_1\nAssertionError: '' != 'x'\n+ x\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 23, in test_case_5\nAssertionError: False is not true\n\n----------------------------------------------------------------------\nRan 5 tests in 0.065s\n\nFAILED (failures=2)"}}
{"result": "```python\nfrom random import shuffle\nimport pandas as pd\nimport numpy as np\n# Constants\ndef task_func(l, n_groups = 5):\n    shuffle(l)\n    df = pd.DataFrame(l)\n    def shift_row(row):\n        return np.concatenate((row[n_groups:], row[:n_groups]))\n    df = df.apply(shift_row, axis=1, result_type='expand')\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_shuffle_and_roll_operation (builtins.TestCases)\nTest to ensure shuffle and roll operations change the list order.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 37, in test_shuffle_and_roll_operation\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/ops/common.py\", line 81, in new_method\n    return method(self, other)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/arraylike.py\", line 44, in __ne__\n    return self._cmp_method(other, operator.ne)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 7442, in _cmp_method\n    self, other = ops.align_method_FRAME(self, other, axis, flex=False, level=None)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/ops/__init__.py\", line 313, in align_method_FRAME\n    raise ValueError(\nValueError: Can only compare identically-labeled (both index and columns) DataFrame objects\n\n======================================================================\nFAIL: test_single_element_list (builtins.TestCases)\nTest function with a single-element list.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_single_element_list\nAssertionError: Tuples differ: (1, 1) != (5, 1)\n\nFirst differing element 0:\n1\n5\n\n- (1, 1)\n?  ^\n\n+ (5, 1)\n?  ^\n\n\n======================================================================\nFAIL: test_varying_data_types (builtins.TestCases)\nTest function with a list containing varying data types.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_varying_data_types\nAssertionError: Tuples differ: (5, 1) != (5, 5)\n\nFirst differing element 1:\n1\n5\n\n- (5, 1)\n?     ^\n\n+ (5, 5)\n?     ^\n\n\n======================================================================\nFAIL: test_with_predefined_elements (builtins.TestCases)\nTest function with the predefined ELEMENTS list.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_with_predefined_elements\nAssertionError: Tuples differ: (10, 1) != (5, 10)\n\nFirst differing element 0:\n10\n5\n\n- (10, 1)\n+ (5, 10)\n\n----------------------------------------------------------------------\nRan 5 tests in 0.011s\n\nFAILED (failures=3, errors=1)"}}
{"result": "```python\nfrom random import shuffle, randint\nimport pandas as pd\ndef task_func(l, n_groups = 5):\n    shuffle(l)\n    length = len(l)\n    extended_len = length * 10\n    result = []\n    for i in range(extended_len):\n        s = l[i % length]\n        n = randint(0, min(n_groups, len(s)))\n        modified = s[n:] + s[:n]\n        result.append(modified)\n    return pd.Series(result)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_series_length (builtins.TestCases)\nTest the length of the series is as expected.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_series_length\nAssertionError: 100 != 50 : The series length should match the expected length.\n\n======================================================================\nFAIL: test_with_repeated_elements (builtins.TestCases)\nTest the function with a list containing repeated elements.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 35, in test_with_repeated_elements\nAssertionError: 60 != 30 : The series length should correctly reflect the input list with repetitions.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.003s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    def normalize_filename(filename):\n        nfkd_form = unicodedata.normalize('NFKD', filename)\n        return nfkd_form.encode('ASCII', 'ignore').decode('ASCII')\n    \n    result = {}\n    dir_path = pathlib.Path(directory)\n    for file_path in dir_path.iterdir():\n        if file_path.is_file():\n            normalized_name = normalize_filename(file_path.name)\n            size = file_path.stat().st_size\n            hash_md5 = md5()\n            with file_path.open('rb') as f:\n                for chunk in iter(lambda: f.read(8192), b''):\n                    hash_md5.update(chunk)\n            result[normalized_name] = {\n                'Size': size,\n                'MD5 Hash': hash_md5.hexdigest()\n            }\n    return result\n```", "match": {"category": "success"}}
{"result": "```python\nimport unicodedata\nimport requests\nURL = 'https://api.github.com/users/'\ndef task_func(username):\n    response = requests.get(URL + username)\n    response.raise_for_status()\n    data = response.json()\n\n    def normalize_value(v):\n        if isinstance(v, str):\n            return unicodedata.normalize('NFKD', v).encode('ascii', 'ignore').decode('ascii')\n        elif isinstance(v, dict):\n            return {k: normalize_value(val) for k, val in v.items()}\n        elif isinstance(v, list):\n            return [normalize_value(i) for i in v]\n        else:\n            return v\n\n    return {k: normalize_value(v) for k, v in data.items()}\n```", "match": {"category": "success"}}
{"result": "```python\nimport unicodedata\nimport csv\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n\ndef task_func(csv_file):\n    try:\n        with open(csv_file, newline='', encoding='utf-8') as f:\n            reader = csv.reader(f)\n            text_data = []\n            for row in reader:\n                for cell in row:\n                    # Normalize text to ASCII\n                    normalized = unicodedata.normalize('NFKD', cell).encode('ascii', 'ignore').decode('ascii')\n                    text_data.append(normalized.lower())\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"File not found: {csv_file}\")\n    except IOError as e:\n        raise IOError(f\"Error reading the file: {e}\")\n    \n    # Join all text and split into words\n    all_text = \" \".join(text_data)\n    words = all_text.split()\n    word_counts = Counter(words)\n    most_common_10 = word_counts.most_common(10)\n    \n    # Prepare bar plot\n    words_ = [wc[0] for wc in most_common_10]\n    counts_ = [wc[1] for wc in most_common_10]\n\n    fig, ax = plt.subplots()\n    ax.bar(words_, counts_)\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Frequency')\n    ax.set_title('10 Most Common Words')\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    \n    return ax, most_common_10\n```", "match": {"category": "timeout", "error": "Test execution timed out after 10 seconds"}}
{"result": "```python\nimport pandas as pd\nimport random\nimport statistics\nimport matplotlib.pyplot as plt\nimport numpy as np\n# Constants\nRANGE = 10000  # The range within which random numbers are generated\nSIZE = 1000  # The number of random numbers to generate\nBIN_WIDTH = 100  # The width of bins for the histogram\ndef task_func():\n    random_numbers = [random.randint(0, RANGE) for _ in range(SIZE)]\n    moving_averages = []\n    for i in range(SIZE):\n        window = random_numbers[max(0, i-5):i+1]\n        avg = statistics.mean(window)\n        moving_averages.append(avg)\n    df = pd.DataFrame({\n        \"Random Numbers\": random_numbers,\n        \"Moving Average\": moving_averages\n    })\n    bins = list(range(0, RANGE + BIN_WIDTH, BIN_WIDTH))\n    plt.hist(df[\"Random Numbers\"], bins=bins, edgecolor='black')\n    plt.title(\"Histogram of Random Numbers\")\n    plt.xlabel(\"Random Number\")\n    plt.ylabel(\"Frequency\")\n    plt.show()\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport math\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport random\n# Constants\nRANGE = 10000\nSIZE = 1000\nPI = np.pi\ndef task_func(size=SIZE, frequency=1):\n    x = np.linspace(0, 2 * PI, size)\n    # Generate random amplitude and phase for sinusoidal values\n    amplitude = random.uniform(0.5, 2.0)\n    phase = random.uniform(0, 2 * PI)\n    y = amplitude * np.sin(frequency * x + phase)\n    fig, ax = plt.subplots()\n    ax.plot(x, y)\n    ax.set_title('Random Sinusoidal Wave')\n    ax.set_xlabel('x')\n    ax.set_ylabel('Amplitude')\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_case_4\nAssertionError: False is not true\n\n----------------------------------------------------------------------\nRan 5 tests in 0.076s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(size=1000):\n    data = np.random.normal(loc=0, scale=1, size=size)\n    fig, ax = plt.subplots()\n    # Plot histogram\n    count, bins, ignored = ax.hist(data, bins=30, density=True, alpha=0.6, color='b', edgecolor='black')\n    # Plot PDF\n    x = np.linspace(bins[0], bins[-1], 1000)\n    pdf = stats.norm.pdf(x, loc=np.mean(data), scale=np.std(data))\n    ax.plot(x, pdf, 'r-', lw=2)\n    ax.set_title('Histogram and PDF of Normally Distributed Data')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Density')\n    return fig\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_histogram_pdf_overlay (builtins.TestCases)\nVerify histogram and PDF line are present in the plot and the number of bins is correct.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 30, in test_histogram_pdf_overlay\nAssertionError: 30 != 28 : Number of histogram bins does not match expected\n\n----------------------------------------------------------------------\nRan 5 tests in 0.147s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport rsa\nimport os\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Cipher import AES\nfrom base64 import b64encode, b64decode\n\ndef task_func():\n    # Generate RSA key pair\n    (pubkey, privkey) = rsa.newkeys(2048)\n\n    # Export private key as PEM (bytes)\n    privkey_pem = privkey.save_pkcs1(format='PEM')\n\n    # Generate encryption password (AES key)\n    password = get_random_bytes(32)  # AES-256 key\n\n    # AES GCM encryption\n    cipher = AES.new(password, AES.MODE_GCM)\n    nonce = cipher.nonce\n\n    ciphertext, tag = cipher.encrypt_and_digest(privkey_pem)\n\n    # Generate random 8 bytes and convert to hex\n    rand_bytes = os.urandom(8)\n    rand_hex = rand_bytes.hex()\n\n    filename = f\"private_key_{rand_hex}.txt\"\n\n    # Store nonce, tag, and ciphertext in file (base64 encoded for safe storage)\n    with open(filename, \"w\") as f:\n        f.write(b64encode(nonce).decode() + \"\\n\")\n        f.write(b64encode(tag).decode() + \"\\n\")\n        f.write(b64encode(ciphertext).decode() + \"\\n\")\n\n    return pubkey, filename, password, nonce\n```", "match": {"category": "timeout", "error": "Test execution timed out after 10 seconds"}}
{"result": "```python\nimport rsa\nimport urllib.request\nfrom hashlib import sha256\nimport urllib.error\n\ndef task_func(url):\n    try:\n        # Generate RSA keys\n        (pubkey, privkey) = rsa.newkeys(2048)\n\n        # Retrieve content from URL\n        with urllib.request.urlopen(url) as response:\n            content = response.read()\n\n        # Calculate SHA256 hash\n        content_hash = sha256(content).digest()\n\n        # Sign the hash with the private key\n        signed_hash = rsa.sign(content_hash, privkey, 'SHA-256')\n\n        return pubkey, signed_hash.hex(), content_hash\n\n    except urllib.error.URLError as e:\n        raise e\n    except ValueError as e:\n        raise e\n    except rsa.pkcs1.VerificationError as e:\n        raise e\n```", "match": {"category": "timeout", "error": "Test execution timed out after 10 seconds"}}
{"result": "```python\nimport rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    # Generate RSA keys\n    (pubkey, privkey) = rsa.newkeys(2048)\n    \n    # Prepare zip filename\n    zip_filename = \"encrypted_files.zip\"\n    \n    # Create a zip file\n    with zipfile.ZipFile(zip_filename, 'w') as zf:\n        for root, _, files in os.walk(directory):\n            for file in files:\n                filepath = os.path.join(root, file)\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                # Split data into chunks to encrypt because RSA can only encrypt up to key size (in bytes) - padding overhead\n                max_chunk_size = 245  # For 2048 bit key and PKCS1v15 padding, max size = 256-11=245 bytes\n                encrypted_chunks = []\n                for i in range(0, len(data), max_chunk_size):\n                    chunk = data[i:i+max_chunk_size]\n                    encrypted_chunk = rsa.encrypt(chunk, pubkey)\n                    encrypted_chunks.append(encrypted_chunk)\n                encrypted_data = b\"\".join(encrypted_chunks)\n                \n                # Store encrypted data in zip as base64 encoded to avoid binary issues\n                encrypted_base64 = b64encode(encrypted_data)\n                \n                # Determine file path relative to directory for zip structure\n                arcname = os.path.relpath(filepath, start=directory)\n                \n                # Write encrypted file into zip\n                zf.writestr(arcname, encrypted_base64)\n    \n    return pubkey, zip_filename\n```", "match": {"category": "timeout", "error": "Test execution timed out after 10 seconds"}}
{"result": "```python\nimport rsa\nfrom cryptography.fernet import Fernet\nfrom base64 import b64encode\n\ndef task_func(file_path):\n    # Generate RSA keys (public and private)\n    (public_key, private_key) = rsa.newkeys(2048)\n\n    # Generate Fernet key\n    f_key = Fernet.generate_key()\n    fernet = Fernet(f_key)\n\n    # Read file contents\n    with open(file_path, 'rb') as f:\n        data = f.read()\n\n    # Encrypt file contents with Fernet key\n    encrypted_data = fernet.encrypt(data)\n\n    # Encrypt the Fernet key with RSA public key\n    encrypted_fernet_key = rsa.encrypt(f_key, public_key)\n\n    # Prepare filenames for outputs\n    encrypted_file_name = file_path + '.encrypted'\n    encrypted_key_file_name = file_path + '.key.encrypted'\n\n    # Save encrypted file contents\n    with open(encrypted_file_name, 'wb') as f:\n        f.write(encrypted_data)\n\n    # Save encrypted Fernet key\n    with open(encrypted_key_file_name, 'wb') as f:\n        f.write(encrypted_fernet_key)\n\n    return (public_key, encrypted_file_name, encrypted_key_file_name)\n```", "match": {"category": "timeout", "error": "Test execution timed out after 10 seconds"}}
{"result": "```python\nimport rsa\nimport os\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.primitives import padding\nfrom base64 import b64encode\n\ndef task_func(file_path):\n    # Generate RSA keys\n    (pubkey, privkey) = rsa.newkeys(2048)\n\n    # Generate AES key and IV\n    aes_key = os.urandom(32)  # 256-bit AES key\n    iv = os.urandom(16)       # 128-bit IV for CBC mode\n\n    # Read the file content\n    with open(file_path, 'rb') as f:\n        plaintext = f.read()\n\n    # Pad plaintext to block size\n    padder = padding.PKCS7(128).padder()\n    padded_data = padder.update(plaintext) + padder.finalize()\n\n    # Encrypt with AES\n    cipher = Cipher(algorithms.AES(aes_key), modes.CBC(iv), backend=default_backend())\n    encryptor = cipher.encryptor()\n    ciphertext = encryptor.update(padded_data) + encryptor.finalize()\n\n    # Encrypt AES key with RSA public key\n    encrypted_aes_key = rsa.encrypt(aes_key, pubkey)\n\n    # Prepare output filenames\n    enc_file = file_path + '.enc'\n    enc_key_file = file_path + '.key.enc'\n\n    # Write encrypted file: save IV + ciphertext\n    with open(enc_file, 'wb') as f:\n        f.write(iv + ciphertext)\n\n    # Write encrypted AES key\n    with open(enc_key_file, 'wb') as f:\n        f.write(encrypted_aes_key)\n\n    return pubkey, enc_file, enc_key_file\n```", "match": {"category": "timeout", "error": "Test execution timed out after 10 seconds"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Constants defining the range of random integers and the size of the DataFrame\nRANGE = 100\nSIZE = 1000\ndef task_func():\n    data = {\n        'X': np.random.randint(0, RANGE, SIZE),\n        'Y': np.random.randint(0, RANGE, SIZE)\n    }\n    df = pd.DataFrame(data)\n    sns.scatterplot(data=df, x='X', y='Y')\n    plt.show()\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\ndef task_func():\n    data = np.random.rand(SIZE, 2) * RANGE\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42).fit(data)\n    labels = kmeans.labels_\n    centroids = kmeans.cluster_centers_\n\n    plt.figure(figsize=(8, 6))\n    for cluster_id in range(CLUSTERS):\n        cluster_points = data[labels == cluster_id]\n        plt.scatter(cluster_points[:, 0], cluster_points[:, 1], s=10, label=f'Cluster {cluster_id}')\n    plt.scatter(centroids[:, 0], centroids[:, 1], s=200, c='black', marker='X', label='Centroids')\n    plt.title('KMeans Clustering Results')\n    plt.xlabel('X')\n    plt.ylabel('Y')\n    plt.legend()\n    plt.grid(True)\n    plt.show()\n\n    return data, kmeans\n```", "match": {"category": "success"}}
{"result": "```python\nimport urllib.request\nfrom urllib.error import URLError\nfrom pyquery import PyQuery as pq\nfrom datetime import datetime\nimport pandas as pd\n\ndef task_func(url):\n    if not isinstance(url, str) or not url.strip():\n        raise ValueError(\"Invalid or empty URL provided.\")\n    try:\n        with urllib.request.urlopen(url) as response:\n            html_content = response.read()\n    except URLError as e:\n        raise e\n    \n    doc = pq(html_content)\n    anchors = doc('a')\n    fetch_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n    data = []\n    for a in anchors.items():\n        text = a.text()\n        href = a.attr('href')\n        data.append({'text': text, 'href': href, 'fetch_time': fetch_time})\n    return pd.DataFrame(data, columns=['text', 'href', 'fetch_time'])\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_dynamic_comparison (builtins.TestCases)\nCompare task_func function output with dynamically fetched content.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 43, in test_dynamic_comparison\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1224, in assert_frame_equal\n    assert_series_equal(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1014, in assert_series_equal\n    _testing.assert_almost_equal(\n  File \"pandas/_libs/testing.pyx\", line 52, in pandas._libs.testing.assert_almost_equal\n  File \"pandas/_libs/testing.pyx\", line 172, in pandas._libs.testing.assert_almost_equal\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame.iloc[:, 0] (column name=\"text\") are different\n\nDataFrame.iloc[:, 0] (column name=\"text\") values are different (66.66667 %)\n[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]\n[left]:  [Jump to content, Main Page, Help, Browse, Cookbook, Wikijunior, Featured books, Recent changes, Random book, Using Wikibooks, Reading room forum, Community portal, Bulletin Board, Help out!, Policies and guidelines, Contact us, , Search, Donations, Create account, Log in, Donations, Create account, Log in, learn more, Contributions, Discussion for this IP address, Main Page, Discussion, Read, View source, View history, Read, View source, View history, What links here, Related changes, Upload file, Permanent link, Page information, Cite this page, Get shortened URL, Download QR code, Wikipedia, Wikiversity, Wiktionary, Wikiquote, Wikisource, Wikinews, Wikivoyage, Commons, Wikidata, MediaWiki, Meta-Wiki, Create a collection, Download as PDF, Printable version, Wikimedia Commons, Wikimedia Foundation, MediaWiki, Meta-Wiki, Wikimedia Outreach, Multilingual Wikisource, Wikispecies, Wikidata, Wikifunctions, Wikinews, Wikipedia, Wikiquote, Wikisource, Wikiversity, Wikivoyage, Wiktionary, Wikidata item, Featured books, Wikijunior, Cookbook, Browse books, Help, Forum, Using Wikibooks, Welcome, Wikibooks, anyone can edit, 3,324 books, 97,847 pages, Computing, Engineering, Humanities, Languages, Mathematics, Miscellaneous, Recreational activities, Science, Social sciences, Standard curricula, Wikijunior, All subjects, More featured books..., , ...]\n[right]: [Jump to content, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, \n\t, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Featured books, Wikijunior, Cookbook, Browse books, Help, Forum, Using Wikibooks, Welcome, Wikibooks, anyone can edit, 3,324 books, 97,847 pages, Computing, Engineering, Humanities, Languages, Mathematics, Miscellaneous, Recreational activities, Science, Social sciences, Standard curricula, Wikijunior, All subjects, More featured books..., None, ...]\nAt positional index 1, first diff: Main Page != None\n\n----------------------------------------------------------------------\nRan 6 tests in 0.751s\n\nFAILED (failures=1)"}}
{"result": "```python\nfrom datetime import datetime, timedelta\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\nTEMP_CATEGORIES = ['Cold', 'Normal', 'Hot']\nFILE_PATH = 'custom_data.csv'\ndef task_func(hours, file_path=FILE_PATH):\n    data = {'Time': [], 'Temperature': [], 'Category': []}\n    start_time = datetime.now()\n    for hour in range(hours):\n        time_point = start_time + timedelta(hours=hour)\n        temp = randint(-10, 40)\n        if temp <= 10:\n            category = TEMP_CATEGORIES[0]\n        elif temp <= 25:\n            category = TEMP_CATEGORIES[1]\n        else:\n            category = TEMP_CATEGORIES[2]\n        data['Time'].append(time_point)\n        data['Temperature'].append(temp)\n        data['Category'].append(category)\n    df = pd.DataFrame(data)\n    df.to_csv(file_path, index=False)\n    fig, ax = plt.subplots()\n    ax.plot(df['Time'], df['Temperature'], marker='o')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Temperature (\u00b0C)')\n    ax.set_title('Temperature over Time')\n    plt.xticks(rotation=45, ha='right')\n    plt.tight_layout()\n    return file_path, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport csv\nimport os\nfrom datetime import datetime, timedelta\nfrom random import randint\n# Constants\nSENSORS = ['Temperature', 'Humidity', 'Pressure']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n    filename = os.path.join(output_dir, 'sensor_data.csv')\n    start_time = datetime.now()\n    with open(filename, mode='w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(['Time'] + SENSORS)\n        for h in range(hours):\n            current_time = start_time + timedelta(hours=h)\n            # Generate random sensor data in plausible ranges\n            temperature = randint(15, 35)   # degrees Celsius\n            humidity = randint(30, 90)      # percentage\n            pressure = randint(980, 1050)   # hPa\n            writer.writerow([current_time.strftime('%Y-%m-%d %H:%M:%S'), temperature, humidity, pressure])\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_file_path_return (builtins.TestCases)\nTest if the correct file path is returned.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 32, in test_file_path_return\nAssertionError: None != './output/sensor_data.csv'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.003s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport csv\nimport os\nfrom datetime import datetime, timedelta\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\n# Constants\nVEHICLE_TYPES = ['Car', 'Bus', 'Truck', 'Bike']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    times = [datetime.now() + timedelta(hours=i) for i in range(hours)]\n    data = {\n        'Time': [t.strftime('%Y-%m-%d %H:%M:%S') for t in times],\n    }\n    for vt in VEHICLE_TYPES:\n        # Generate random counts for each vehicle type\n        if vt == 'Car':\n            data[vt] = [randint(200, 500) for _ in range(hours)]\n        elif vt == 'Bus':\n            data[vt] = [randint(20, 80) for _ in range(hours)]\n        elif vt == 'Truck':\n            data[vt] = [randint(30, 100) for _ in range(hours)]\n        elif vt == 'Bike':\n            data[vt] = [randint(150, 400) for _ in range(hours)]\n\n    df = pd.DataFrame(data)\n\n    csv_path = os.path.join(output_dir, f\"traffic_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv\")\n    df.to_csv(csv_path, index=False)\n\n    # Plotting\n    fig, ax = plt.subplots(figsize=(10, 6))\n    for vt in VEHICLE_TYPES:\n        ax.plot(df['Time'], df[vt], label=vt)\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Vehicle Count')\n    ax.set_title('Traffic Data over Time')\n    ax.legend()\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n\n    return (csv_path, ax)\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_dataframe_content (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1376, in patched\n    with self.decoration_helper(patched,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/contextlib.py\", line 135, in __enter__\n    return next(self.gen)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1358, in decoration_helper\n    arg = exit_stack.enter_context(patching)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/contextlib.py\", line 492, in enter_context\n    result = _cm_type.__enter__(cm)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1447, in __enter__\n    original, local = self.get_original()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1420, in get_original\n    raise AttributeError(\nAttributeError: <module 'builtins' (built-in)> does not have the attribute 'randint'\n\n======================================================================\nERROR: test_empty_dataframe_on_zero_hours (builtins.TestCases)\nCheck for empty DataFrame on zero hours input.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1376, in patched\n    with self.decoration_helper(patched,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/contextlib.py\", line 135, in __enter__\n    return next(self.gen)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1358, in decoration_helper\n    arg = exit_stack.enter_context(patching)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/contextlib.py\", line 492, in enter_context\n    result = _cm_type.__enter__(cm)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1431, in __enter__\n    self.target = self.getter()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1618, in <lambda>\n    getter = lambda: _importer(target)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1261, in _importer\n    thing = _dot_lookup(thing, comp, import_path)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1250, in _dot_lookup\n    __import__(import_path)\nModuleNotFoundError: No module named 'builtins.pd'; 'builtins' is not a package\n\n======================================================================\nERROR: test_plot_generation (builtins.TestCases)\nVerify that the plot is generated.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1376, in patched\n    with self.decoration_helper(patched,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/contextlib.py\", line 135, in __enter__\n    return next(self.gen)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1358, in decoration_helper\n    arg = exit_stack.enter_context(patching)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/contextlib.py\", line 492, in enter_context\n    result = _cm_type.__enter__(cm)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1431, in __enter__\n    self.target = self.getter()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1618, in <lambda>\n    getter = lambda: _importer(target)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1261, in _importer\n    thing = _dot_lookup(thing, comp, import_path)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1250, in _dot_lookup\n    __import__(import_path)\nModuleNotFoundError: No module named 'builtins.plt'; 'builtins' is not a package\n\n======================================================================\nERROR: test_task_func_runs_without_error (builtins.TestCases)\nTest task_func function to ensure it runs with given hours without raising an error.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1376, in patched\n    with self.decoration_helper(patched,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/contextlib.py\", line 135, in __enter__\n    return next(self.gen)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1358, in decoration_helper\n    arg = exit_stack.enter_context(patching)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/contextlib.py\", line 492, in enter_context\n    result = _cm_type.__enter__(cm)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1431, in __enter__\n    self.target = self.getter()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1618, in <lambda>\n    getter = lambda: _importer(target)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1261, in _importer\n    thing = _dot_lookup(thing, comp, import_path)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1250, in _dot_lookup\n    __import__(import_path)\nModuleNotFoundError: No module named 'builtins.plt'; 'builtins' is not a package\n\n----------------------------------------------------------------------\nRan 5 tests in 0.050s\n\nFAILED (errors=4)"}}
{"result": "```python\nimport csv\nimport os\nimport shutil\nfrom datetime import datetime, timedelta\nfrom random import randint\n# Constants\nWEATHER_CONDITIONS = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    os.makedirs(output_dir, exist_ok=True)\n    backup_dir = os.path.join(output_dir, 'backup')\n    os.makedirs(backup_dir, exist_ok=True)\n\n    now = datetime.now()\n    rows = []\n    for h in range(hours):\n        time_label = (now + timedelta(hours=h)).strftime('%Y-%m-%d %H:%M:%S')\n        condition = WEATHER_CONDITIONS[randint(0, len(WEATHER_CONDITIONS)-1)]\n        rows.append([time_label, condition])\n\n    filename = f'weather_{now.strftime(\"%Y%m%d_%H%M%S\")}.csv'\n    filepath = os.path.join(output_dir, filename)\n    with open(filepath, mode='w', newline='', encoding='utf-8') as f:\n        writer = csv.writer(f)\n        writer.writerow(['Time', 'Condition'])\n        writer.writerows(rows)\n\n    backup_path = os.path.join(backup_dir, filename)\n    shutil.copy(filepath, backup_path)\n\n    return filepath\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_backup_file_creation (builtins.TestCases)\nTest that the CSV file is correctly copied to the backup directory.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 61, in test_backup_file_creation\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 941, in assert_called_once_with\n    return self.assert_called_with(*args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 929, in assert_called_with\n    raise AssertionError(_error_message()) from cause\nAssertionError: expected call not found.\nExpected: copy('./output/weather_data.csv', './output/backup/')\nActual: copy('./output/weather_20250524_221954.csv', './output/backup/weather_20250524_221954.csv')\n\n======================================================================\nFAIL: test_task_func_checks_backup_directory_exists (builtins.TestCases)\nTest checking for the existence of the backup directory.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 31, in test_task_func_checks_backup_directory_exists\nAssertionError: 'output/backup' != 'output'\n- output/backup\n+ output\n : Expected output/backup, got output\n\n----------------------------------------------------------------------\nRan 5 tests in 0.022s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport random\nimport bisect\nfrom array import array\n\ndef task_func(n=10, total=100):\n    for _ in range(1000):  # retry mechanism\n        # generate n-1 random cut points between 0 and total\n        cuts = sorted(random.sample(range(1, total), n - 1))\n        numbers = [cuts[0]] + [cuts[i] - cuts[i - 1] for i in range(1, n - 1)] + [total - cuts[-1]]\n        if sum(numbers) == total:\n            break\n    else:\n        # fallback equal division if fails after retries\n        base, remainder = divmod(total, n)\n        numbers = [base] * n\n        for i in range(remainder):\n            numbers[i] += 1\n\n    arr = array('i', sorted(numbers))\n    new_num = random.randint(0, total)\n    pos = bisect.bisect(arr, new_num)\n    return (arr, pos)\n```", "match": {"category": "success"}}
{"result": "```python\nimport time\nfrom datetime import datetime\nfrom random import randint\nimport matplotlib.pyplot as plt\n\ndef task_func(duration):\n    timestamps = []\n    values = []\n    start = time.time()\n    plt.ion()\n    fig, ax = plt.subplots()\n    line, = ax.plot([], [], 'b-')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Value')\n    ax.set_title('Real-time Random Data')\n    ax.grid(True)\n\n    while time.time() - start < duration:\n        now = datetime.now()\n        ts = now.strftime('%H:%M:%S.%f')\n        val = randint(0, 100)\n        timestamps.append(ts)\n        values.append(val)\n\n        line.set_data(range(len(values)), values)\n        ax.relim()\n        ax.autoscale_view()\n        fig.canvas.draw()\n        fig.canvas.flush_events()\n        time.sleep(0.1)\n\n    plt.ioff()\n    plt.show()\n    return (timestamps, values)\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_random_values_consistency (builtins.TestCases)\nTest that generated values are consistent with the mocked random function.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1376, in patched\n    with self.decoration_helper(patched,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/contextlib.py\", line 135, in __enter__\n    return next(self.gen)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1358, in decoration_helper\n    arg = exit_stack.enter_context(patching)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/contextlib.py\", line 492, in enter_context\n    result = _cm_type.__enter__(cm)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1447, in __enter__\n    original, local = self.get_original()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1420, in get_original\n    raise AttributeError(\nAttributeError: <module 'builtins' (built-in)> does not have the attribute 'randint'\n\n----------------------------------------------------------------------\nRan 5 tests in 4.049s\n\nFAILED (errors=1)"}}
{"result": "```python\nimport pandas as pd\nimport time\n# Constants\nLETTERS = list('abcdefghijklmnopqrstuvwxyz')\ndef task_func(data, letter):\n    df = pd.DataFrame(data)\n    filtered_series = df.loc[df['Name'].str.startswith(letter), 'Name']\n    return filtered_series\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_insensitivity (builtins.TestCases)\nTest case insensitivity of the filter.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 32, in test_case_insensitivity\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n\n======================================================================\nERROR: test_filter_letter_a (builtins.TestCases)\nTest filtering by letter 'a'.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 11, in test_filter_letter_a\n  File \"<string>\", line 11, in <genexpr>\nAttributeError: 'int' object has no attribute 'startswith'\n\n======================================================================\nFAIL: test_series_sorted_by_value_counts (builtins.TestCases)\nTest that the Series is sorted by value counts.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_series_sorted_by_value_counts\nAssertionError: False is not true\n\n----------------------------------------------------------------------\nRan 5 tests in 0.008s\n\nFAILED (failures=1, errors=2)"}}
{"result": "```python\nimport pandas as pd\nimport time\ndef task_func(df, letter):\n    # Convert dict of lists to DataFrame\n    df = pd.DataFrame(df)\n    # Filter rows where 'Word' starts with the specified letter\n    filtered = df[df['Word'].str.startswith(letter)]\n    # Calculate lengths of the filtered words\n    lengths = filtered['Word'].str.len()\n    # Count occurrences of each length and convert to dict\n    result = lengths.value_counts().to_dict()\n    return result\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport time\nimport matplotlib.pyplot as plt\n\ndef task_func(df, letter):\n    # Convert input dictionary to DataFrame if it's not already one\n    if not isinstance(df, pd.DataFrame):\n        df = pd.DataFrame(df)\n    \n    # Filter rows where 'Word' starts with the specified letter\n    filtered = df[df['Word'].str.startswith(letter)]\n    \n    # Calculate lengths of these words\n    word_lengths = filtered['Word'].str.len()\n    \n    # Plot histogram of word lengths\n    ax = word_lengths.plot(kind='hist', bins=range(1, word_lengths.max()+2), edgecolor='black')\n    ax.set_title(f'Histogram of word lengths starting with \"{letter}\"')\n    ax.set_xlabel('Word Length')\n    ax.set_ylabel('Frequency')\n    plt.tight_layout()\n    \n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_nonexistent_letter (builtins.TestCases)\nTest filtering by a letter not present returns None.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 35, in test_nonexistent_letter\n  File \"<bigcode>\", line 18, in task_func\nTypeError: 'float' object cannot be interpreted as an integer\n\n======================================================================\nFAIL: test_histogram_plot_calls (builtins.TestCases)\nTest if histogram plot is generated with correct parameters.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 23, in test_histogram_plot_calls\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 908, in assert_called_once\n    raise AssertionError(msg)\nAssertionError: Expected 'hist' to have been called once. Called 0 times.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.184s\n\nFAILED (failures=1, errors=1)"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\ndef task_func(df, letter):\n    df = pd.DataFrame(df)\n    filtered = df[df['Word'].str.startswith(letter)]\n    lengths = filtered['Word'].str.len()\n    mean_len = lengths.mean()\n    median_len = lengths.median()\n    mode_len = lengths.mode()\n    mode_val = mode_len.iloc[0] if not mode_len.empty else np.nan\n    return {'mean': mean_len, 'median': median_len, 'mode': mode_val}\n```", "match": {"category": "success"}}
{"result": "```python\nimport seaborn as sns\nimport time\nimport matplotlib.pyplot as plt\n\ndef task_func(df, letter):\n    if df.empty or 'Word' not in df.columns:\n        return None\n    \n    filtered = df[df['Word'].str.startswith(letter, na=False)]\n    if filtered.empty:\n        return None\n    \n    filtered = filtered.copy()\n    filtered['length'] = filtered['Word'].str.len()\n    \n    fig, ax = plt.subplots()\n    sns.boxplot(x='length', data=filtered, ax=ax)\n    ax.set_title(f\"Distribution of word lengths starting with '{letter}'\")\n    ax.set_xlabel(\"Word Length\")\n    ax.set_ylabel(\"Frequency\")\n    \n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_no_word_column (builtins.TestCases)\nTest handling of DataFrame without 'Word' column.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 34, in test_no_word_column\nAssertionError: ValueError not raised\n\n----------------------------------------------------------------------\nRan 5 tests in 0.103s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\nimport os\n# Constants\nLETTERS = list('abcdefghijklmnopqrstuvwxyz')\nOUTPUT_DIR = './output'\ndef task_func(file_path, output_dir=OUTPUT_DIR):\n    # Ensure output directory exists\n    os.makedirs(output_dir, exist_ok=True)\n    # Parameters: define matrix size (example 10x10)\n    rows, cols = 10, 10\n    # Generate random letters matrix\n    matrix = np.random.choice(LETTERS, size=(rows, cols))\n    # Convert to DataFrame\n    df = pd.DataFrame(matrix)\n    # Write to CSV\n    csv_path = os.path.join(output_dir, file_path)\n    df.to_csv(csv_path, index=False, header=False)\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 18, in test_case_1\n  File \"<bigcode>\", line 19, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/generic.py\", line 3772, in to_csv\n    return DataFrameRenderer(formatter).to_csv(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/formats/format.py\", line 1186, in to_csv\n    csv_formatter.save()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/formats/csvs.py\", line 240, in save\n    with get_handle(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/common.py\", line 737, in get_handle\n    check_parent_directory(str(handle))\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/common.py\", line 600, in check_parent_directory\n    raise OSError(rf\"Cannot save file into a non-existent directory: '{parent}'\")\nOSError: Cannot save file into a non-existent directory: 'output/output'\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_case_2\n  File \"<bigcode>\", line 19, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/generic.py\", line 3772, in to_csv\n    return DataFrameRenderer(formatter).to_csv(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/formats/format.py\", line 1186, in to_csv\n    csv_formatter.save()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/formats/csvs.py\", line 240, in save\n    with get_handle(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/common.py\", line 737, in get_handle\n    check_parent_directory(str(handle))\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/common.py\", line 600, in check_parent_directory\n    raise OSError(rf\"Cannot save file into a non-existent directory: '{parent}'\")\nOSError: Cannot save file into a non-existent directory: 'output/output'\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 31, in test_case_3\n  File \"<bigcode>\", line 19, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/generic.py\", line 3772, in to_csv\n    return DataFrameRenderer(formatter).to_csv(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/formats/format.py\", line 1186, in to_csv\n    csv_formatter.save()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/formats/csvs.py\", line 240, in save\n    with get_handle(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/common.py\", line 737, in get_handle\n    check_parent_directory(str(handle))\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/common.py\", line 600, in check_parent_directory\n    raise OSError(rf\"Cannot save file into a non-existent directory: '{parent}'\")\nOSError: Cannot save file into a non-existent directory: 'output/output'\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 38, in test_case_4\n  File \"<bigcode>\", line 19, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/generic.py\", line 3772, in to_csv\n    return DataFrameRenderer(formatter).to_csv(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/formats/format.py\", line 1186, in to_csv\n    csv_formatter.save()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/formats/csvs.py\", line 240, in save\n    with get_handle(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/common.py\", line 737, in get_handle\n    check_parent_directory(str(handle))\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/common.py\", line 600, in check_parent_directory\n    raise OSError(rf\"Cannot save file into a non-existent directory: '{parent}'\")\nOSError: Cannot save file into a non-existent directory: 'output/output'\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 47, in test_case_5\n  File \"<bigcode>\", line 19, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/generic.py\", line 3772, in to_csv\n    return DataFrameRenderer(formatter).to_csv(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/formats/format.py\", line 1186, in to_csv\n    csv_formatter.save()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/formats/csvs.py\", line 240, in save\n    with get_handle(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/common.py\", line 737, in get_handle\n    check_parent_directory(str(handle))\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/common.py\", line 600, in check_parent_directory\n    raise OSError(rf\"Cannot save file into a non-existent directory: '{parent}'\")\nOSError: Cannot save file into a non-existent directory: 'output/output'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.012s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\ndef task_func(matrix1, matrix2):\n    combined = np.concatenate((matrix1, matrix2), axis=1)\n    df = pd.DataFrame(combined)\n    return df.to_string(index=False, header=False)\n```", "match": {"category": "success"}}
{"result": "```python\nimport subprocess\nimport logging\n\ndef task_func(filepath):\n    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n    compiler = \"g++\"\n    output_file = \"a.out\"\n    try:\n        subprocess.run([compiler, filepath, \"-o\", output_file], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        logging.info(f\"Compilation of '{filepath}' succeeded.\")\n    except subprocess.CalledProcessError as e:\n        logging.error(f\"Compilation failed for '{filepath}'. Error: {e.stderr.decode().strip() if e.stderr else e}\")\n        raise\n    except FileNotFoundError as e:\n        logging.error(f\"Compiler not found or file '{filepath}' does not exist. Error: {e}\")\n        raise\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_compilation_failure (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 17, in test_compilation_failure\n  File \"<bigcode>\", line 10, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/subprocess.py\", line 526, in run\n    raise CalledProcessError(retcode, process.args,\nsubprocess.CalledProcessError: Command '['g++', 'example.cpp', '-o', 'a.out']' returned non-zero exit status 1.\n\n======================================================================\nERROR: test_compiler_not_found (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 23, in test_compiler_not_found\n  File \"<bigcode>\", line 10, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/subprocess.py\", line 526, in run\n    raise CalledProcessError(retcode, process.args,\nsubprocess.CalledProcessError: Command '['g++', 'example.cpp', '-o', 'a.out']' returned non-zero exit status 1.\n\n======================================================================\nERROR: test_empty_file (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 27, in test_empty_file\n  File \"<bigcode>\", line 10, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/subprocess.py\", line 526, in run\n    raise CalledProcessError(retcode, process.args,\nsubprocess.CalledProcessError: Command '['g++', './empty_file.cpp', '-o', 'a.out']' returned non-zero exit status 1.\n\n======================================================================\nERROR: test_logging_output (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 32, in test_logging_output\n  File \"<bigcode>\", line 10, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/subprocess.py\", line 526, in run\n    raise CalledProcessError(retcode, process.args,\nsubprocess.CalledProcessError: Command '['g++', 'example.cpp', '-o', 'a.out']' returned non-zero exit status 1.\n\n======================================================================\nERROR: test_successful_compilation (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 13, in test_successful_compilation\n  File \"<bigcode>\", line 10, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/subprocess.py\", line 526, in run\n    raise CalledProcessError(retcode, process.args,\nsubprocess.CalledProcessError: Command '['g++', 'example.cpp', '-o', 'a.out']' returned non-zero exit status 1.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.110s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(matrix):\n    fig, ax = plt.subplots()\n    cax = ax.imshow(matrix, cmap='hot', interpolation='nearest')\n    plt.colorbar(cax, ax=ax)\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom scipy import stats\ndef task_func(matrix):\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore, axis=0)\n    return normalized_df\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_case_3\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1224, in assert_frame_equal\n    assert_series_equal(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1014, in assert_series_equal\n    _testing.assert_almost_equal(\n  File \"pandas/_libs/testing.pyx\", line 52, in pandas._libs.testing.assert_almost_equal\n  File \"pandas/_libs/testing.pyx\", line 172, in pandas._libs.testing.assert_almost_equal\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame.iloc[:, 0] (column name=\"0\") are different\n\nDataFrame.iloc[:, 0] (column name=\"0\") values are different (100.0 %)\n[index]: [0]\n[left]:  [nan]\n[right]: [0.0]\nAt positional index 0, first diff: nan != 0.0\n\n======================================================================\nFAIL: test_uniform_data (builtins.TestCases)\nTest a matrix where all elements are the same.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 32, in test_uniform_data\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1224, in assert_frame_equal\n    assert_series_equal(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1014, in assert_series_equal\n    _testing.assert_almost_equal(\n  File \"pandas/_libs/testing.pyx\", line 52, in pandas._libs.testing.assert_almost_equal\n  File \"pandas/_libs/testing.pyx\", line 172, in pandas._libs.testing.assert_almost_equal\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame.iloc[:, 0] (column name=\"0\") are different\n\nDataFrame.iloc[:, 0] (column name=\"0\") values are different (100.0 %)\n[index]: [0, 1]\n[left]:  [nan, nan]\n[right]: [0.0, 0.0]\nAt positional index 0, first diff: nan != 0.0\n\n----------------------------------------------------------------------\nRan 5 tests in 0.017s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom random import sample\n# Constants for column names to use in plots\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(df: pd.DataFrame, tuples: list, n_plots: int) -> (pd.DataFrame, list):\n    # Remove rows based on tuples of (column, value)\n    df_filtered = df.copy()\n    for col, val in tuples:\n        if col in df_filtered.columns:\n            df_filtered = df_filtered[df_filtered[col] != val]\n    # Generate random scatter plots\n    axes_list = []\n    available_cols = [col for col in COLUMNS if col in df_filtered.columns]\n    for _ in range(n_plots):\n        if len(available_cols) < 2:\n            break\n        x_col, y_col = sample(available_cols, 2)\n        fig, ax = plt.subplots()\n        ax.scatter(df_filtered[x_col], df_filtered[y_col])\n        ax.set_xlabel(x_col)\n        ax.set_ylabel(y_col)\n        ax.set_title(f\"Scatter plot: {x_col} vs {y_col}\")\n        axes_list.append(ax)\n    return df_filtered, axes_list\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_no_row_removal (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 22, in test_no_row_removal\n  File \"<bigcode>\", line 10, in task_func\nValueError: too many values to unpack (expected 2)\n\n----------------------------------------------------------------------\nRan 5 tests in 0.098s\n\nFAILED (errors=1)"}}
{"result": "```python\nimport seaborn as sns\nfrom random import sample\nimport matplotlib.pyplot as plt\n\n# Constants\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\n\ndef task_func(df, tuples, n_plots):\n    # Remove rows based on values of multiple columns specified in tuples\n    # tuples: list of (col, val) pairs\n    for col, val in tuples:\n        df = df[df[col] != val]\n\n    pairplot_axes = []\n    available_pairs = [(c1, c2) for i, c1 in enumerate(COLUMNS) for c2 in COLUMNS[i+1:]]\n\n    chosen_pairs = sample(available_pairs, min(n_plots, len(available_pairs)))\n\n    for x_col, y_col in chosen_pairs:\n        g = sns.pairplot(df, vars=[x_col, y_col])\n        pairplot_axes.append(g)\n\n    return df, pairplot_axes\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 15, in test_case_1\n  File \"<bigcode>\", line 12, in task_func\nValueError: too many values to unpack (expected 2)\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 22, in test_case_2\n  File \"<bigcode>\", line 12, in task_func\nValueError: too many values to unpack (expected 2)\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 32, in test_case_4\n  File \"<bigcode>\", line 12, in task_func\nValueError: too many values to unpack (expected 2)\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 37, in test_case_5\n  File \"<bigcode>\", line 12, in task_func\nValueError: too many values to unpack (expected 2)\n\n----------------------------------------------------------------------\nRan 5 tests in 0.366s\n\nFAILED (errors=4)"}}
{"result": "```python\nfrom itertools import combinations\nfrom random import sample\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef task_func(df, tuples, n_plots):\n    # Remove rows matching any tuple in the given list\n    # Assuming tuples correspond to values in all columns in order\n    # Create a mask to identify rows to remove\n    mask = df.apply(tuple, axis=1).isin(tuples)\n    df_filtered = df.loc[~mask].copy()\n\n    # Get all combinations of two columns\n    col_pairs = list(combinations(df_filtered.columns, 2))\n\n    # If n_plots is greater than number of pairs, limit it\n    n_plots = min(n_plots, len(col_pairs))\n\n    # Randomly sample column pairs\n    chosen_pairs = sample(col_pairs, n_plots)\n\n    plots = []\n    for x_col, y_col in chosen_pairs:\n        fig, ax = plt.subplots()\n        ax.scatter(df_filtered[x_col], df_filtered[y_col])\n        ax.set_xlabel(x_col)\n        ax.set_ylabel(y_col)\n        ax.set_title(f'Scatter plot of {x_col} vs {y_col}')\n        plots.append(((x_col, y_col), fig))\n\n    return df_filtered, plots\n```", "match": {"category": "success"}}
{"result": "```python\nfrom random import sample\nimport seaborn as sns\nimport pandas as pd\n# Constants\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(df: pd.DataFrame, tuples: list, n_plots: int) -> (pd.DataFrame, list):\n    # Remove rows where all specified column values match any tuple in tuples\n    mask = pd.Series([False] * len(df))\n    for values in tuples:\n        if len(values) != len(COLUMNS):\n            continue\n        condition = pd.Series([True] * len(df))\n        for col, val in zip(COLUMNS, values):\n            condition &= (df[col] == val)\n        mask |= condition\n    df_filtered = df[~mask].copy()\n    \n    plots = []\n    if not df_filtered.empty:\n        # Generate n_plots random joint plots of two columns against each other\n        # Sample pairs of different columns\n        possible_pairs = [(c1, c2) for i, c1 in enumerate(COLUMNS) for c2 in COLUMNS[i+1:]]\n        n = min(n_plots, len(possible_pairs))\n        pairs = sample(possible_pairs, n)\n        for x_col, y_col in pairs:\n            g = sns.jointplot(data=df_filtered, x=x_col, y=y_col)\n            plots.append(g)\n    \n    return df_filtered, plots\n```", "match": {"category": "success"}}
{"result": "```python\nfrom random import sample\nimport matplotlib.pyplot as plt\n# Constants\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(df, tuples, n_plots):\n    \"\"\"\n    df: pd.DataFrame - input DataFrame\n    tuples: list of tuples (col, val) - rows to remove based on col==val\n    n_plots: int - number of random plots to create\n    \n    Returns:\n        (pd.DataFrame, list): modified df and list of plotted column pairs\n    \"\"\"\n    # Remove rows based on given column-value conditions\n    for col, val in tuples:\n        df = df[df[col] != val]\n\n    # Prepare all pairs of columns (without repetition)\n    col_pairs = [(COLUMNS[i], COLUMNS[j]) for i in range(len(COLUMNS)) \n                                        for j in range(i+1, len(COLUMNS))]\n\n    # Sample random pairs for plotting\n    n_plots = min(n_plots, len(col_pairs))\n    selected_pairs = sample(col_pairs, n_plots)\n\n    # Create line plots for each pair\n    for x_col, y_col in selected_pairs:\n        plt.figure()\n        plt.plot(df[x_col].values, df[y_col].values)\n        plt.xlabel(x_col)\n        plt.ylabel(y_col)\n        plt.title(f'Line plot: {y_col} vs {x_col}')\n        plt.grid(True)\n        plt.show()\n        \n    return df, selected_pairs\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_basic_functionality (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 10, in test_basic_functionality\n  File \"<bigcode>\", line 16, in task_func\nValueError: too many values to unpack (expected 2)\n\n======================================================================\nFAIL: test_more_plots_than_data (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_more_plots_than_data\nAssertionError: False is not true\n\n----------------------------------------------------------------------\nRan 5 tests in 0.204s\n\nFAILED (failures=1, errors=1)"}}
{"result": "```python\nfrom random import choice\nimport numpy as np\nimport pandas as pd\n# Constants\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTIES_COSTS = [100, 200, 300, 400, 500]\ndef task_func(goals, penalties, teams=TEAMS, penalties_costs=PENALTIES_COSTS):\n    data = []\n    for team in teams:\n        team_goals = goals.get(team, 0)\n        team_penalties = penalties.get(team, 0)\n        penalty_cost = team_penalties * choice(penalties_costs)\n        performance_score = max(team_goals - team_penalties, 0)\n        data.append({\n            'Team': team,\n            'Goals': team_goals,\n            'Penalties': team_penalties,\n            'Penalties Cost': penalty_cost,\n            'Performance Score': performance_score\n        })\n    return pd.DataFrame(data)\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_all_teams_penalty (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1376, in patched\n    with self.decoration_helper(patched,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/contextlib.py\", line 135, in __enter__\n    return next(self.gen)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1358, in decoration_helper\n    arg = exit_stack.enter_context(patching)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/contextlib.py\", line 492, in enter_context\n    result = _cm_type.__enter__(cm)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1447, in __enter__\n    original, local = self.get_original()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1420, in get_original\n    raise AttributeError(\nAttributeError: <module 'builtins' (built-in)> does not have the attribute 'choice'\n\n======================================================================\nERROR: test_empty_goals_and_penalties (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1376, in patched\n    with self.decoration_helper(patched,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/contextlib.py\", line 135, in __enter__\n    return next(self.gen)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1358, in decoration_helper\n    arg = exit_stack.enter_context(patching)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/contextlib.py\", line 492, in enter_context\n    result = _cm_type.__enter__(cm)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1447, in __enter__\n    original, local = self.get_original()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1420, in get_original\n    raise AttributeError(\nAttributeError: <module 'builtins' (built-in)> does not have the attribute 'choice'\n\n======================================================================\nERROR: test_goals_greater_than_penalties (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1376, in patched\n    with self.decoration_helper(patched,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/contextlib.py\", line 135, in __enter__\n    return next(self.gen)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1358, in decoration_helper\n    arg = exit_stack.enter_context(patching)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/contextlib.py\", line 492, in enter_context\n    result = _cm_type.__enter__(cm)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1447, in __enter__\n    original, local = self.get_original()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1420, in get_original\n    raise AttributeError(\nAttributeError: <module 'builtins' (built-in)> does not have the attribute 'choice'\n\n======================================================================\nERROR: test_no_penalties (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1376, in patched\n    with self.decoration_helper(patched,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/contextlib.py\", line 135, in __enter__\n    return next(self.gen)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1358, in decoration_helper\n    arg = exit_stack.enter_context(patching)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/contextlib.py\", line 492, in enter_context\n    result = _cm_type.__enter__(cm)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1447, in __enter__\n    original, local = self.get_original()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1420, in get_original\n    raise AttributeError(\nAttributeError: <module 'builtins' (built-in)> does not have the attribute 'choice'\n\n======================================================================\nERROR: test_penalties_greater_than_goals (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1376, in patched\n    with self.decoration_helper(patched,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/contextlib.py\", line 135, in __enter__\n    return next(self.gen)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1358, in decoration_helper\n    arg = exit_stack.enter_context(patching)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/contextlib.py\", line 492, in enter_context\n    result = _cm_type.__enter__(cm)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1447, in __enter__\n    original, local = self.get_original()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1420, in get_original\n    raise AttributeError(\nAttributeError: <module 'builtins' (built-in)> does not have the attribute 'choice'\n\n======================================================================\nERROR: test_some_teams_missing (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1376, in patched\n    with self.decoration_helper(patched,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/contextlib.py\", line 135, in __enter__\n    return next(self.gen)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1358, in decoration_helper\n    arg = exit_stack.enter_context(patching)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/contextlib.py\", line 492, in enter_context\n    result = _cm_type.__enter__(cm)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1447, in __enter__\n    original, local = self.get_original()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1420, in get_original\n    raise AttributeError(\nAttributeError: <module 'builtins' (built-in)> does not have the attribute 'choice'\n\n----------------------------------------------------------------------\nRan 6 tests in 0.003s\n\nFAILED (errors=6)"}}
{"result": "```python\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n# Constants\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nGOALS_RANGE = (-10, 10)\ndef task_func(goals, penalties):\n    net_scores = [g - p for g, p in zip(goals, penalties)]\n    clipped_scores = [max(min(score, GOALS_RANGE[1]), GOALS_RANGE[0]) for score in net_scores]\n    df = pd.DataFrame({'Team': TEAMS, 'Score': clipped_scores})\n    plt.bar(df['Team'], df['Score'], color='skyblue')\n    plt.xlabel('Team')\n    plt.ylabel('Score')\n    plt.title('Adjusted Team Scores')\n    plt.ylim(GOALS_RANGE)\n    plt.grid(axis='y', linestyle='--', alpha=0.7)\n    plt.show()\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_clipping_negative_scores (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 22, in test_clipping_negative_scores\n  File \"<bigcode>\", line 8, in task_func\n  File \"<bigcode>\", line 8, in <listcomp>\nTypeError: unsupported operand type(s) for -: 'str' and 'str'\n\n======================================================================\nERROR: test_clipping_positive_scores (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_clipping_positive_scores\n  File \"<bigcode>\", line 8, in task_func\n  File \"<bigcode>\", line 8, in <listcomp>\nTypeError: unsupported operand type(s) for -: 'str' and 'str'\n\n======================================================================\nERROR: test_goals_no_penalties (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_goals_no_penalties\n  File \"<bigcode>\", line 10, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 709, in __init__\n    mgr = dict_to_mgr(data, index, columns, dtype=dtype, copy=copy, typ=manager)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/internals/construction.py\", line 481, in dict_to_mgr\n    return arrays_to_mgr(arrays, columns, index, dtype=dtype, typ=typ, consolidate=copy)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/internals/construction.py\", line 115, in arrays_to_mgr\n    index = _extract_index(arrays)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/internals/construction.py\", line 655, in _extract_index\n    raise ValueError(\"All arrays must be of the same length\")\nValueError: All arrays must be of the same length\n\n======================================================================\nERROR: test_goals_with_penalties (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 17, in test_goals_with_penalties\n  File \"<bigcode>\", line 8, in task_func\n  File \"<bigcode>\", line 8, in <listcomp>\nTypeError: unsupported operand type(s) for -: 'str' and 'str'\n\n======================================================================\nERROR: test_no_goals_no_penalties (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 7, in test_no_goals_no_penalties\n  File \"<bigcode>\", line 10, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 709, in __init__\n    mgr = dict_to_mgr(data, index, columns, dtype=dtype, copy=copy, typ=manager)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/internals/construction.py\", line 481, in dict_to_mgr\n    return arrays_to_mgr(arrays, columns, index, dtype=dtype, typ=typ, consolidate=copy)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/internals/construction.py\", line 115, in arrays_to_mgr\n    index = _extract_index(arrays)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/internals/construction.py\", line 655, in _extract_index\n    raise ValueError(\"All arrays must be of the same length\")\nValueError: All arrays must be of the same length\n\n----------------------------------------------------------------------\nRan 5 tests in 0.005s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef task_func(goals, penalties):\n    # Assuming goals and penalties are dicts or lists of equal length with team names as keys or indices\n    if isinstance(goals, dict):\n        teams = list(goals.keys())\n        goals_list = list(goals.values())\n        penalties_list = [penalties[t] for t in teams]\n    else:\n        # If lists, create dummy teams as \"Team1\", \"Team2\", ...\n        teams = [f\"Team{i+1}\" for i in range(len(goals))]\n        goals_list = goals\n        penalties_list = penalties\n\n    df = pd.DataFrame({\n        'Team': teams,\n        'Goals': goals_list,\n        'Penalties': penalties_list\n    })\n\n    pairplot = sns.pairplot(df.drop(columns='Team'), diag_kind='kde')\n\n    return df, pairplot\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_data_integrity (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 46, in test_data_integrity\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1163, in assert_frame_equal\n    raise_assert_detail(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame are different\n\nDataFrame shape mismatch\n[left]:  (3, 3)\n[right]: (5, 3)\n\n======================================================================\nFAIL: test_empty_input (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_empty_input\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1163, in assert_frame_equal\n    raise_assert_detail(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame are different\n\nDataFrame shape mismatch\n[left]:  (0, 3)\n[right]: (5, 3)\n\n======================================================================\nFAIL: test_invalid_keys (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 34, in test_invalid_keys\nAssertionError: True is not false\n\n----------------------------------------------------------------------\nRan 5 tests in 1.251s\n\nFAILED (failures=3)"}}
{"result": "```python\nfrom random import randint, seed\nimport pandas as pd\n# Method\ndef task_func(goals, penalties, rng_seed=None):\n    \"\"\"\n    Generate a DataFrame with 'Team' and 'Match Result' columns.\n    \n    Parameters:\n    - goals: dict of {team: number_of_matches} specifying how many matches each team played for goals generation\n    - penalties: dict of {team: number_of_matches} specifying how many matches each team played for penalties generation\n    - rng_seed: optional random seed for reproducibility\n    \n    Returns:\n    - pd.DataFrame with columns ['Team', 'Match Result'], where 'Match Result' contains \n      a string like \"Goals: X, Fines: Y\"\n    \"\"\"\n    if rng_seed is not None:\n        seed(rng_seed)\n    \n    # Predefined penalty cost\n    PENALTY_COST = 50\n    \n    # We assume that for each team:\n    # - the number of goals is generated randomly between 0 and 5 for each match played (specified in goals[team])\n    # - the number of penalties is generated randomly between 0 and 2 for each match played (specified in penalties[team])\n    \n    records = []\n    teams = set(goals.keys()).union(set(penalties.keys()))\n    for team in teams:\n        total_goals = 0\n        total_fines = 0\n        \n        # Generate goals for specified matches\n        for _ in range(goals.get(team,0)):\n            total_goals += randint(0,5)\n        \n        # Generate penalties for specified matches\n        total_penalties = 0\n        for _ in range(penalties.get(team,0)):\n            total_penalties += randint(0,2)\n        \n        total_fines = total_penalties * PENALTY_COST\n        \n        records.append({\n            \"Team\": team,\n            \"Match Result\": f\"Goals: {total_goals}, Fines: {total_fines}\"\n        })\n    \n    return pd.DataFrame(records)\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_extremely_high_values (builtins.TestCases)\nTest the function with extremely high values for goals and penalties.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 48, in test_extremely_high_values\n  File \"<bigcode>\", line 29, in task_func\nAttributeError: 'int' object has no attribute 'keys'\n\n======================================================================\nERROR: test_goals_and_penalties_within_range (builtins.TestCases)\nTest that goals and penalties fall within specified ranges.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 11, in test_goals_and_penalties_within_range\n  File \"<bigcode>\", line 29, in task_func\nAttributeError: 'int' object has no attribute 'keys'\n\n======================================================================\nERROR: test_mixed_values (builtins.TestCases)\nTest the function with a mix of low and high values for goals and penalties.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 60, in test_mixed_values\n  File \"<bigcode>\", line 29, in task_func\nAttributeError: 'int' object has no attribute 'keys'\n\n======================================================================\nERROR: test_negative_input_handling (builtins.TestCases)\nTest that negative inputs are handled correctly.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_negative_input_handling\n  File \"<bigcode>\", line 29, in task_func\nAttributeError: 'int' object has no attribute 'keys'\n\n======================================================================\nERROR: test_zero_goals_and_penalties (builtins.TestCases)\nTest that the function handles 0 goals and 0 penalties correctly.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 37, in test_zero_goals_and_penalties\n  File \"<bigcode>\", line 29, in task_func\nAttributeError: 'int' object has no attribute 'keys'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.002s\n\nFAILED (errors=5)"}}
{"result": "```python\nfrom random import randint, seed\nimport matplotlib.pyplot as plt\nimport pandas as pd\n# Constants (they can be overridden with default parameters)\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000  # in dollars\ndef task_func(goals, penalties, teams=TEAMS, penalty_cost=PENALTY_COST, rng_seed=None):\n    if rng_seed is not None:\n        seed(rng_seed)\n    data = []\n    for team in teams:\n        g = randint(0, goals)\n        p = randint(0, penalties)\n        data.append({'Team': team, 'Goals': g, 'Penalty Cost': p})\n    df = pd.DataFrame(data)\n    # Calculate fines\n    df['Fines'] = df['Penalty Cost'] * penalty_cost\n\n    # Plotting\n    fig, ax = plt.subplots(figsize=(8,5))\n    width = 0.35\n    x = range(len(df))\n\n    ax.bar(x, df['Goals'], width=width, label='Goals', color='tab:blue')\n    ax.bar([i + width for i in x], df['Fines'], width=width, label='Penalty Fines', color='tab:red')\n\n    ax.set_xticks([i + width/2 for i in x])\n    ax.set_xticklabels(df['Team'])\n    ax.set_ylabel('Counts / Fines')\n    ax.set_title('Football Match Results with Penalty Fines')\n    ax.legend()\n    plt.tight_layout()\n    return df, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_negative_input (builtins.TestCases)\nEnsure negative inputs are treated as positive.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 18, in test_negative_input\n  File \"<bigcode>\", line 13, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/random.py\", line 370, in randint\n    return self.randrange(a, b+1)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/random.py\", line 353, in randrange\n    raise ValueError(\"empty range for randrange() (%d, %d, %d)\" % (istart, istop, width))\nValueError: empty range for randrange() (0, -4, -4)\n\n======================================================================\nFAIL: test_custom_penalty_cost (builtins.TestCases)\nTest the function with a custom penalty cost.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 33, in test_custom_penalty_cost\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_positive_outcomes (builtins.TestCases)\nTest the function with positive goals and penalties.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 9, in test_positive_outcomes\nAssertionError: Lists differ: ['Team', 'Goals', 'Penalty Cost', 'Fines'] != ['Team', 'Goals', 'Penalty Cost']\n\nFirst list contains 1 additional elements.\nFirst extra element 3:\n'Fines'\n\n- ['Team', 'Goals', 'Penalty Cost', 'Fines']\n?                                 ---------\n\n+ ['Team', 'Goals', 'Penalty Cost']\n\n----------------------------------------------------------------------\nRan 5 tests in 0.215s\n\nFAILED (failures=2, errors=1)"}}
{"result": "```python\nfrom random import randint, seed\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport re\n\n# Constants\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000  # in dollars\n\ndef task_func(goals, penalties, rng_seed=None, teams=TEAMS):\n    if rng_seed is not None:\n        seed(rng_seed)\n\n    # Generate match results and data lists\n    data = []\n    for team in teams:\n        g = randint(0, goals)\n        p = randint(0, penalties)\n        penalty_cost = p * PENALTY_COST\n        match_result = f\"{team} scored {g} goals, {p} penalties\"\n        data.append({\n            'Team': team,\n            'Goals': g,\n            'Penalties': p,\n            'Penalty Cost': penalty_cost,\n            'Match Result': match_result\n        })\n\n    # Create DataFrame\n    df = pd.DataFrame(data)\n\n    # Visualization\n    plt.figure(figsize=(10,6))\n    bar_width = 0.35\n    index = range(len(teams))\n\n    plt.bar(index, df['Goals'], bar_width, label='Goals', color='skyblue')\n    plt.bar([i + bar_width for i in index], df['Penalty Cost'], bar_width, label='Penalty Cost ($)', color='salmon')\n\n    plt.xlabel('Team')\n    plt.ylabel('Count / Cost')\n    plt.title('Football Teams Goals and Penalty Costs')\n    plt.xticks([i + bar_width/2 for i in index], df['Team'])\n    plt.legend()\n    plt.tight_layout()\n    plt.show()\n\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_no_teams (builtins.TestCases)\nTest function with no teams.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_no_teams\n  File \"<bigcode>\", line 38, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/range.py\", line 349, in get_loc\n    raise KeyError(key)\nKeyError: 'Goals'\n\n======================================================================\nFAIL: test_dataframe_structure (builtins.TestCases)\nTest if the DataFrame contains the expected structure.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 9, in test_dataframe_structure\nAssertionError: Lists differ: ['Team', 'Goals', 'Penalties', 'Penalty Cost', 'Match Result'] != ['Team', 'Match Result', 'Goals', 'Penalty Cost']\n\nFirst differing element 1:\n'Goals'\n'Match Result'\n\nFirst list contains 1 additional elements.\nFirst extra element 4:\n'Match Result'\n\n- ['Team', 'Goals', 'Penalties', 'Penalty Cost', 'Match Result']\n+ ['Team', 'Match Result', 'Goals', 'Penalty Cost']\n\n----------------------------------------------------------------------\nRan 5 tests in 0.231s\n\nFAILED (failures=1, errors=1)"}}
{"result": "```python\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n# Constants\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000  # in dollars\n\ndef task_func(goals, penalties):\n    # Create list of match results for each team\n    data = []\n    for team in TEAMS:\n        team_goals = randint(0, goals)\n        team_penalties = randint(0, penalties)\n        data.append({\n            'Team': team,\n            'Goals': team_goals,\n            'Penalty Cost': team_penalties * PENALTY_COST,\n            'Fines': team_penalties * PENALTY_COST\n        })\n    df = pd.DataFrame(data)\n\n    # Plot goals\n    plt.figure(figsize=(12, 5))\n    fig, axes = plt.subplots(1, 2, figsize=(14, 5))\n    sns.barplot(x='Team', y='Goals', data=df, ax=axes[0], palette='viridis')\n    axes[0].set_title('Goals by Team')\n    axes[0].set_ylim(0, goals + 2)\n\n    # Plot penalty costs\n    sns.barplot(x='Team', y='Penalty Cost', data=df, ax=axes[1], palette='magma')\n    axes[1].set_title('Penalty Costs by Team')\n    axes[1].set_ylim(0, penalties * PENALTY_COST + PENALTY_COST * 2)\n    axes[1].set_ylabel('Penalty Cost ($)')\n    \n    plt.tight_layout()\n\n    return df, axes.tolist()\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 11, in test_case_1\nAssertionError: Tuples differ: (5, 4) != (5, 3)\n\nFirst differing element 1:\n4\n3\n\n- (5, 4)\n?     ^\n\n+ (5, 3)\n?     ^\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.912s\n\nFAILED (failures=1)"}}
{"result": "```python\nfrom random import randint, seed\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n# Constants\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000  # in dollars\ndef task_func(goals, penalties, rng_seed=None):\n    if rng_seed is not None:\n        seed(rng_seed)\n    data = []\n    for team in TEAMS:\n        g = randint(*goals)\n        p = randint(*penalties)\n        penalty_total = p * PENALTY_COST\n        data.append({'Team': team, 'Goals': g, 'Penalty Cost': penalty_total})\n    df = pd.DataFrame(data)\n    model = LinearRegression()\n    X = df[['Goals']]\n    y = df['Penalty Cost']\n    model.fit(X, y)\n    return df, model\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_dataframe_structure (builtins.TestCases)\nEnsures the DataFrame has the correct structure.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_dataframe_structure\n  File \"<bigcode>\", line 13, in task_func\nTypeError: random.Random.randint() argument after * must be an iterable, not int\n\n======================================================================\nERROR: test_model_type (builtins.TestCases)\nChecks if the returned model is a LinearRegression instance.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_model_type\n  File \"<bigcode>\", line 13, in task_func\nTypeError: random.Random.randint() argument after * must be an iterable, not int\n\n======================================================================\nERROR: test_positive_goals_and_penalties (builtins.TestCases)\nConfirms goals and penalty costs are non-negative.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_positive_goals_and_penalties\n  File \"<bigcode>\", line 13, in task_func\nTypeError: random.Random.randint() argument after * must be an iterable, not int\n\n======================================================================\nERROR: test_predictions_type (builtins.TestCases)\nVerifies that model predictions return a numpy array.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 16, in test_predictions_type\n  File \"<bigcode>\", line 13, in task_func\nTypeError: random.Random.randint() argument after * must be an iterable, not int\n\n======================================================================\nERROR: test_regression_coefficients_sign (builtins.TestCases)\nChecks that the regression model produces a coefficient.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 26, in test_regression_coefficients_sign\n  File \"<bigcode>\", line 13, in task_func\nTypeError: random.Random.randint() argument after * must be an iterable, not int\n\n----------------------------------------------------------------------\nRan 5 tests in 0.001s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\n# Constants\nRANGE = (1, 100)\ndef task_func(L):\n    rows = 1\n    cols = 1\n    for pair in L:\n        if len(pair) == 2:\n            rows *= pair[0]\n            cols *= pair[1]\n    data = np.random.randint(RANGE[0], RANGE[1] + 1, size=(rows, cols))\n    return pd.DataFrame(data)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 6, in test_case_1\nAssertionError: Tuples differ: (10, 18) != (6, 30)\n\nFirst differing element 0:\n10\n6\n\n- (10, 18)\n+ (6, 30)\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 16, in test_case_3\nAssertionError: Tuples differ: (8, 15) != (20, 6)\n\nFirst differing element 0:\n8\n20\n\n- (8, 15)\n+ (20, 6)\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_case_4\nAssertionError: Tuples differ: (18, 10) != (6, 30)\n\nFirst differing element 0:\n18\n6\n\n- (18, 10)\n+ (6, 30)\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 26, in test_case_5\nAssertionError: Tuples differ: (7, 16) != (56, 2)\n\nFirst differing element 0:\n7\n56\n\n- (7, 16)\n+ (56, 2)\n\n----------------------------------------------------------------------\nRan 5 tests in 0.003s\n\nFAILED (failures=4)"}}
{"result": "```python\nfrom itertools import chain\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\ndef task_func(L):\n    # Flatten the list of lists into a single list of integers\n    flat_list = list(chain.from_iterable(L))\n    arr = np.array(flat_list).reshape(-1, 1)\n    # Standardize the integers\n    scaler = StandardScaler()\n    standardized = scaler.fit_transform(arr).flatten()\n    # Plot the standardized values\n    fig, ax = plt.subplots()\n    ax.plot(standardized, marker='o', linestyle='-')\n    ax.set_title(\"Standardized values\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Standardized value\")\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.stats import norm\nfrom itertools import chain\ndef task_func(L):\n    data = list(chain.from_iterable(L))\n    data = np.array(data, dtype=int)\n    mu, std = norm.fit(data)\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(data, bins=30, density=True, alpha=0.6, color='g')\n    xmin, xmax = plt.xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = norm.pdf(x, mu, std)\n    ax.plot(x, p, 'k', linewidth=2)\n    ax.set_title(f\"Fit results: mu = {mu:.2f},  std = {std:.2f}\")\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nfrom itertools import chain\nimport numpy as np\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\n\ndef task_func(L):\n    # Flatten the list of lists into a single list of integers\n    flat_list = list(chain.from_iterable(L))\n    data = np.array(flat_list).reshape(-1, 1)\n    \n    # Determine number of clusters (example: 3)\n    n_clusters = 3 if len(data) >= 3 else 1\n    \n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=0)\n    labels = kmeans.fit_predict(data)\n    \n    # Create scatter plot with points color-coded by cluster\n    fig, ax = plt.subplots()\n    scatter = ax.scatter(np.arange(len(data)), data.flatten(), c=labels, cmap='viridis')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Value')\n    ax.set_title('KMeans Clustering Scatter Plot')\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nfrom sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nN_COMPONENTS = 2\ndef task_func(L):\n    arr = np.array(L, dtype=float)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(arr)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    ax.set_xlabel('PC1')\n    ax.set_ylabel('PC2')\n    ax.set_title('PCA Scatter Plot')\n    return pca_result, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport math\nfrom random import randint\nimport pandas as pd\ndef task_func(cities_list):\n    populations = []\n    for _ in cities_list:\n        pop = randint(100000, 10000000)\n        pop_rounded = math.ceil(pop / 1000) * 1000\n        populations.append(pop_rounded)\n    df = pd.DataFrame({'City': cities_list, 'Population': populations})\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nfrom random import choice\nimport pytz\nfrom dateutil.parser import parse\n# Constants\nTIMEZONES = ['America/New_York', 'Europe/London', 'Asia/Shanghai', 'Asia/Tokyo', 'Australia/Sydney']\ndef task_func(date_str, from_tz):\n    from_timezone = pytz.timezone(from_tz)\n    dt = parse(date_str)\n    if dt.tzinfo is None:\n        dt = from_timezone.localize(dt)\n    else:\n        dt = dt.astimezone(from_timezone)\n    to_tz = choice(TIMEZONES)\n    to_timezone = pytz.timezone(to_tz)\n    converted_dt = dt.astimezone(to_timezone)\n    result_str = converted_dt.strftime('%Y-%m-%d %H:%M:%S %Z%z')\n    return result_str, to_tz\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_case_1\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/_strptime.py\", line 568, in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/_strptime.py\", line 352, in _strptime\n    raise ValueError(\"unconverted data remains: %s\" %\nValueError: unconverted data remains:  BST+0100\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 16, in test_case_2\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/_strptime.py\", line 568, in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/_strptime.py\", line 352, in _strptime\n    raise ValueError(\"unconverted data remains: %s\" %\nValueError: unconverted data remains:  EST-0500\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_case_3\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/_strptime.py\", line 568, in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/_strptime.py\", line 352, in _strptime\n    raise ValueError(\"unconverted data remains: %s\" %\nValueError: unconverted data remains:  CST+0800\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 32, in test_case_4\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/_strptime.py\", line 568, in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/_strptime.py\", line 352, in _strptime\n    raise ValueError(\"unconverted data remains: %s\" %\nValueError: unconverted data remains:  AEST+1000\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 40, in test_case_5\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/_strptime.py\", line 568, in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/_strptime.py\", line 352, in _strptime\n    raise ValueError(\"unconverted data remains: %s\" %\nValueError: unconverted data remains:  CST+0800\n\n----------------------------------------------------------------------\nRan 5 tests in 0.016s\n\nFAILED (errors=5)"}}
{"result": "```python\nfrom random import randint\nfrom statistics import mean\nimport pandas as pd\ndef task_func(products_list):\n    data = []\n    for product in products_list:\n        monthly_sales = [randint(0, 1000) for _ in range(12)]\n        avg_sales = mean(monthly_sales)\n        data.append([product] + monthly_sales + [avg_sales])\n    columns = ['Product'] + [f'Month {i}' for i in range(1, 13)] + ['Average Sales']\n    df = pd.DataFrame(data, columns=columns)\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 17, in test_case_1\nAssertionError: False is not true\n\n----------------------------------------------------------------------\nRan 5 tests in 0.011s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport math\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef task_func():\n    freq = randint(1, 10)\n    amp = randint(1, 10)\n    phase = randint(0, 360)\n    t = np.linspace(0, 2*math.pi, 500)\n    y = amp * np.sin(freq * t + math.radians(phase))\n\n    fig, ax = plt.subplots()\n    ax.plot(t, y)\n    ax.set_title('Random Sine Wave')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Amplitude')\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport time\nOUTPUT_DIR = './output'\ndef task_func(dataset, filename, output_dir=OUTPUT_DIR):\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n    filepath = os.path.join(output_dir, filename)\n    with open(filepath, 'w', encoding='utf-8') as f:\n        for i, df in enumerate(dataset):\n            df.to_csv(f, index=False)\n            if i != len(dataset) - 1:\n                f.write('------\\n')\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport os\nOUTPUT_DIR = './output'\ndef task_func(df, filename, output_dir=OUTPUT_DIR):\n    os.makedirs(output_dir, exist_ok=True)\n    filepath = os.path.join(output_dir, filename)\n    df.to_json(filepath, orient='records', lines=True)\n    return filepath\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_all_nan_dataframe (builtins.TestCases)\nTest DataFrame with all NaN values.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 46, in test_all_nan_dataframe\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/json/__init__.py\", line 293, in load\n    return loads(fp.read(),\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/json/decoder.py\", line 340, in decode\n    raise JSONDecodeError(\"Extra data\", s, end)\njson.decoder.JSONDecodeError: Extra data: line 2 column 1 (char 20)\n\n======================================================================\nERROR: test_basic_dataframe (builtins.TestCases)\nTest saving a simple DataFrame.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 17, in test_basic_dataframe\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/json/__init__.py\", line 293, in load\n    return loads(fp.read(),\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/json/decoder.py\", line 340, in decode\n    raise JSONDecodeError(\"Extra data\", s, end)\njson.decoder.JSONDecodeError: Extra data: line 2 column 1 (char 14)\n\n======================================================================\nERROR: test_empty_dataframe (builtins.TestCases)\nTest with an empty DataFrame.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 39, in test_empty_dataframe\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/json/__init__.py\", line 293, in load\n    return loads(fp.read(),\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n======================================================================\nERROR: test_integer_conversion (builtins.TestCases)\nTest converting float to int where applicable.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 31, in test_integer_conversion\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/json/__init__.py\", line 293, in load\n    return loads(fp.read(),\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/json/decoder.py\", line 340, in decode\n    raise JSONDecodeError(\"Extra data\", s, end)\njson.decoder.JSONDecodeError: Extra data: line 2 column 1 (char 18)\n\n======================================================================\nERROR: test_nan_values (builtins.TestCases)\nTest DataFrame with NaN values.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_nan_values\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/json/__init__.py\", line 293, in load\n    return loads(fp.read(),\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/json/decoder.py\", line 340, in decode\n    raise JSONDecodeError(\"Extra data\", s, end)\njson.decoder.JSONDecodeError: Extra data: line 2 column 1 (char 19)\n\n----------------------------------------------------------------------\nRan 5 tests in 0.013s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport csv\nimport os\nOUTPUT_DIR = './output'\ndef task_func(df, filename, output_dir=OUTPUT_DIR):\n    parent_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\n    data_dir = os.path.join(parent_dir, 'data')\n    if not os.path.exists(data_dir):\n        os.makedirs(data_dir)\n    file_path = os.path.join(data_dir, filename)\n    df.to_csv(file_path, index=False)\n    return os.path.abspath(file_path)\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_basic_dataframe (builtins.TestCases)\nTest saving a simple DataFrame.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 16, in test_basic_dataframe\n  File \"<bigcode>\", line 6, in task_func\nNameError: name '__file__' is not defined. Did you mean: '__name__'?\n\n======================================================================\nERROR: test_empty_dataframe (builtins.TestCases)\nTest saving an empty DataFrame.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 32, in test_empty_dataframe\n  File \"<bigcode>\", line 6, in task_func\nNameError: name '__file__' is not defined. Did you mean: '__name__'?\n\n======================================================================\nERROR: test_returned_path_format (builtins.TestCases)\nTest the format of the returned file path.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 37, in test_returned_path_format\n  File \"<bigcode>\", line 6, in task_func\nNameError: name '__file__' is not defined. Did you mean: '__name__'?\n\n======================================================================\nERROR: test_with_numeric_and_text (builtins.TestCases)\nTest a DataFrame with both numeric and text columns.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 22, in test_with_numeric_and_text\n  File \"<bigcode>\", line 6, in task_func\nNameError: name '__file__' is not defined. Did you mean: '__name__'?\n\n======================================================================\nERROR: test_with_special_characters (builtins.TestCases)\nTest a DataFrame containing special characters.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_with_special_characters\n  File \"<bigcode>\", line 6, in task_func\nNameError: name '__file__' is not defined. Did you mean: '__name__'?\n\n----------------------------------------------------------------------\nRan 5 tests in 0.013s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport pandas as pd\nimport time\nimport os\n\nOUTPUT_DIR = './output'\n\ndef task_func(df: pd.DataFrame, filename: str) -> str:\n    os.makedirs(OUTPUT_DIR, exist_ok=True)\n    full_path = os.path.join(OUTPUT_DIR, filename)\n    df.to_json(full_path, orient='records', lines=True)\n    return full_path\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nfrom nltk.corpus import stopwords\n\ndef task_func(text: str) -> dict:\n    stop_words = set(stopwords.words('english'))\n    words = re.findall(r\"\\b\\w+\\b\", text.lower())\n    seen = set()\n    filtered = []\n    for w in words:\n        if w not in seen and w not in stop_words:\n            seen.add(w)\n            filtered.append(w)\n    freq = {}\n    for w in filtered:\n        freq[w] = freq.get(w, 0) + 1\n    return freq\n```", "match": {"category": "success"}}
{"result": "```python\nimport itertools\nfrom typing import Any\nfrom scipy import stats\n\ndef task_func(input_list: list, repetitions: int) -> Any:\n    flattened = list(itertools.chain.from_iterable(itertools.repeat(input_list, repetitions)))\n    result = stats.mode(flattened, keepdims=True)\n    return result\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 7, in test_case_1\n  File \"<bigcode>\", line 8, in task_func\nTypeError: mode() got an unexpected keyword argument 'keepdims'\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_case_2\n  File \"<bigcode>\", line 8, in task_func\nTypeError: mode() got an unexpected keyword argument 'keepdims'\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 19, in test_case_3\n  File \"<bigcode>\", line 8, in task_func\nTypeError: mode() got an unexpected keyword argument 'keepdims'\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_case_4\n  File \"<bigcode>\", line 8, in task_func\nTypeError: mode() got an unexpected keyword argument 'keepdims'\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 31, in test_case_5\n  File \"<bigcode>\", line 8, in task_func\nTypeError: mode() got an unexpected keyword argument 'keepdims'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.001s\n\nFAILED (errors=5)"}}
{"result": "```python\n# Importing the required libraries\nimport re\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom nltk.corpus import stopwords\n\ndef task_func(text, n=2):\n    # Remove duplicate consecutive words (case-insensitive)\n    def remove_consecutive_duplicates(text):\n        pattern = re.compile(r'\\b(\\w+)( \\1\\b)+', flags=re.IGNORECASE)\n        while True:\n            new_text = pattern.sub(r'\\1', text)\n            if new_text == text:\n                break\n            text = new_text\n        return text\n\n    text = remove_consecutive_duplicates(text)\n\n    # Lowercase and tokenize\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n\n    # Remove stopwords\n    stop_words = set(stopwords.words('english'))\n    filtered_words = [w for w in words if w not in stop_words]\n\n    # If no words left, return empty DataFrame and axes\n    if len(filtered_words) == 0:\n        fig, ax = plt.subplots()\n        return pd.DataFrame(), ax\n\n    # Create vocabulary sorted alphabetically\n    vocab = sorted(set(filtered_words))\n\n    # Build co-occurrence matrix\n    # We'll consider co-occurrences within a window of size n on each side (total window size 2n+1)\n    size = len(vocab)\n    word_to_idx = {w: i for i, w in enumerate(vocab)}\n    cooc_mat = np.zeros((size, size), dtype=np.int32)\n\n    length = len(filtered_words)\n    for i, w in enumerate(filtered_words):\n        w_idx = word_to_idx[w]\n        start = max(0, i - n)\n        end = min(length, i + n + 1)\n        for j in range(start, end):\n            if i != j:\n                neigh_w = filtered_words[j]\n                neigh_idx = word_to_idx[neigh_w]\n                cooc_mat[w_idx, neigh_idx] += 1\n\n    df = pd.DataFrame(cooc_mat, index=vocab, columns=vocab)\n\n    # Plotting\n    fig, ax = plt.subplots(figsize=(8, 6))\n    cax = ax.matshow(df.values, cmap='viridis')\n    fig.colorbar(cax, ax=ax)\n\n    ax.set_xticks(range(size))\n    ax.set_yticks(range(size))\n    ax.set_xticklabels(vocab, rotation=90)\n    ax.set_yticklabels(vocab)\n    ax.set_xlabel('Word')\n    ax.set_ylabel('Word')\n    ax.set_title('Word Co-occurrence Matrix')\n\n    plt.tight_layout()\n\n    return df, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_duplicate_words (builtins.TestCases)\nTest text with duplicate consecutive words.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 17, in test_duplicate_words\nAssertionError: 'happy joy' not found in Index(['happy', 'joy'], dtype='object') : Matrix should contain 'happy joy' after duplicates are removed.\n\n======================================================================\nFAIL: test_ngram_range (builtins.TestCases)\nTest with a specific n-gram range.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_ngram_range\nAssertionError: Tuples differ: (4, 4) != (2, 2)\n\nFirst differing element 0:\n4\n2\n\n- (4, 4)\n+ (2, 2) : Matrix shape should be (3, 3) for a tri-gram analysis without word removal.\n\n======================================================================\nFAIL: test_simple_text (builtins.TestCases)\nTest with a simple text.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 7, in test_simple_text\nAssertionError: Tuples differ: (2, 2) != (1, 1)\n\nFirst differing element 0:\n2\n1\n\n- (2, 2)\n+ (1, 1) : Matrix shape should be (1, 1) for unique words 'hello' and 'world'.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.233s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n# Constants\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\ndef task_func(rows):\n    df = pd.DataFrame(np.random.randint(0, 10, size=(rows, len(COLUMNS))), columns=COLUMNS)\n    counts = (df != 0).sum()\n    fig, ax = plt.subplots()\n    counts.plot(kind='bar', ax=ax)\n    ax.set_ylabel('Count of Non-Zero Values')\n    ax.set_title('Non-Zero Value Counts per Column')\n    return df, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_case_4\n  File \"<bigcode>\", line 8, in task_func\n  File \"mtrand.pyx\", line 748, in numpy.random.mtrand.RandomState.randint\n  File \"_bounded_integers.pyx\", line 1256, in numpy.random._bounded_integers._rand_int64\nValueError: negative dimensions are not allowed\n\n======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_case_1\nAssertionError: 5 != 0\n\n----------------------------------------------------------------------\nRan 5 tests in 0.170s\n\nFAILED (failures=1, errors=1)"}}
{"result": "```python\nfrom random import sample\nfrom typing import Tuple\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\ndef task_func(num_students) -> Tuple[pd.DataFrame, plt.Axes]:\n    np.random.seed(0)\n    all_students = [f'Student{i}' for i in range(1, 101)]\n    courses = ['Math', 'English', 'History', 'Science', 'Art']\n    selected_students = sample(all_students, min(num_students, 100))\n    grades_data = {course: np.random.randint(40, 101, size=len(selected_students)) for course in courses}\n    df = pd.DataFrame(grades_data, index=selected_students)\n    df.index.name = 'Student'\n    avg_grades = df.mean()\n    passing_counts = (df >= 60).sum()\n    summary_df = pd.DataFrame({\n        'Average Grade': avg_grades,\n        'Passing Count': passing_counts\n    })\n    fig, ax = plt.subplots(figsize=(10, 6))\n    width = 0.4\n    x = np.arange(len(courses))\n    bars1 = ax.bar(x - width/2, summary_df['Average Grade'], width, label='Average Grade')\n    bars2 = ax.bar(x + width/2, summary_df['Passing Count'], width, label='Passing Count')\n    ax.set_xticks(x)\n    ax.set_xticklabels(courses)\n    ax.set_ylabel('Count / Grade')\n    ax.set_title('Course-wise Average and Passing Grade Counts')\n    ax.legend()\n    ax.bar_label(bars1, fmt='%.1f')\n    ax.bar_label(bars2)\n    plt.tight_layout()\n    return df, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\ndef task_func(num_teams=5, num_games=100):\n    teams = [f\"Team_{i+1}\" for i in range(num_teams)]\n    games = [f\"Game_{j+1}\" for j in range(num_games)]\n    scores = np.random.randint(0, 101, size=(num_teams, num_games))\n    df = pd.DataFrame(scores, index=teams, columns=games)\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_case_3\nAssertionError: Lists differ: ['Team_1', 'Team_2', 'Team_3', 'Team_4'] != ['Team1', 'Team2', 'Team3', 'Team4']\n\nFirst differing element 0:\n'Team_1'\n'Team1'\n\n- ['Team_1', 'Team_2', 'Team_3', 'Team_4']\n?       -         -         -         -\n\n+ ['Team1', 'Team2', 'Team3', 'Team4']\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 16, in test_case_4\nAssertionError: Lists differ: ['Game_1', 'Game_2', 'Game_3', 'Game_4', 'Game_5'] != ['Game1', 'Game2', 'Game3', 'Game4', 'Game5']\n\nFirst differing element 0:\n'Game_1'\n'Game1'\n\n- ['Game_1', 'Game_2', 'Game_3', 'Game_4', 'Game_5']\n?       -         -         -         -         -\n\n+ ['Game1', 'Game2', 'Game3', 'Game4', 'Game5']\n\n----------------------------------------------------------------------\nRan 5 tests in 0.006s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef task_func(num_samples=100, num_features=5):\n    # Generate random DataFrame\n    data = np.random.randn(num_samples, num_features)\n    columns = [f'Feature_{i+1}' for i in range(num_features)]\n    df = pd.DataFrame(data, columns=columns)\n    \n    # Calculate correlation matrix\n    corr = df.corr()\n    \n    # Plot heatmap\n    plt.figure(figsize=(8, 6))\n    ax = sns.heatmap(corr, annot=True, cmap='coolwarm', vmin=-1, vmax=1)\n    plt.title('Feature Correlation Heatmap')\n    \n    return df, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nPRODUCTS = ['Product' + str(i) for i in range(1, 6)]\nMONTHS = ['Month' + str(i) for i in range(1, 13)]\ndef task_func():\n    # Generate random sales data\n    np.random.seed(0)\n    data = np.random.randint(50, 200, size=(12, 5))\n    df = pd.DataFrame(data, index=MONTHS, columns=PRODUCTS)\n\n    # Calculate total sales per product\n    total_sales = df.sum(axis=0)\n\n    plt.figure(figsize=(12, 5))\n\n    # Line plot of total sales per product\n    plt.subplot(1, 2, 1)\n    sns.lineplot(x=total_sales.index, y=total_sales.values, marker='o')\n    plt.title('Total Sales per Product')\n    plt.ylabel('Total Sales')\n    plt.xlabel('Product')\n    plt.grid(True)\n\n    # Heatmap of sales per month per product\n    plt.subplot(1, 2, 2)\n    sns.heatmap(df, annot=True, fmt=\"d\", cmap='YlGnBu')\n    plt.title('Monthly Sales Heatmap')\n    plt.xlabel('Product')\n    plt.ylabel('Month')\n\n    plt.tight_layout()\n    plt.show()\n\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_sales_range (builtins.TestCases)\nTest if sales figures are within the expected range.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_sales_range\nAssertionError: False is not true\n\n----------------------------------------------------------------------\nRan 5 tests in 0.693s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport os\nimport re\nimport pandas as pd\n\ndef task_func(pattern: str, directory: str, output_csv: str) -> pd.DataFrame:\n    regex = re.compile(pattern)\n    matched_paths = []\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if regex.search(file):\n                matched_paths.append(os.path.join(root, file))\n    df = pd.DataFrame({'File Path': matched_paths})\n    df.to_csv(output_csv, index=False)\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport binascii\nimport hashlib\nimport re\nimport os\nOUTPUT_DIR = './output'\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    regex = re.compile(pattern)\n    result = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            filepath = os.path.join(root, file)\n            # Use normalized path with backslashes for matching as pattern includes backslash\n            norm_path = filepath.replace('/', '\\\\')\n            if regex.search(norm_path):\n                try:\n                    with open(filepath, 'rb') as f:\n                        file_bytes = f.read()\n                    sha256_hash = hashlib.sha256(file_bytes).hexdigest()\n                    result[filepath] = sha256_hash\n                except Exception:\n                    pass\n    return result\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport pandas as pd\nimport numpy as np\n# Constants\nDATA_PATTERN = r'>\\d+\\.\\d+<'\ndef task_func(dataframe, data_pattern=DATA_PATTERN):\n    pattern = re.compile(data_pattern)\n    def extract_numeric(cell):\n        if not isinstance(cell, str):\n            return np.nan\n        match = pattern.search(cell)\n        if match:\n            # Extract number between > and <\n            num_str = match.group()[1:-1]\n            try:\n                return float(num_str)\n            except ValueError:\n                return np.nan\n        return np.nan\n    return dataframe.applymap(extract_numeric)\n```", "match": {"category": "success"}}
{"result": "```python\nimport hashlib\nimport base64\nimport os\n\ndef task_func(filename, data, password):\n    # Derive a key from the password\n    key = hashlib.sha256(password.encode()).digest()\n    data_bytes = data.encode()\n    encrypted_bytes = bytearray()\n    for i in range(len(data_bytes)):\n        encrypted_bytes.append(data_bytes[i] ^ key[i % len(key)])\n    encrypted_str = base64.b64encode(encrypted_bytes).decode()\n    \n    os.makedirs(os.path.dirname(filename), exist_ok=True) if os.path.dirname(filename) else None\n    with open(filename, 'w') as f:\n        f.write(encrypted_str)\n    return encrypted_str\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport pandas as pd\ndef task_func(filename: str) -> pd.DataFrame:\n    if not os.path.isfile(filename):\n        raise FileNotFoundError(f\"No such file: '{filename}'\")\n    df = pd.read_csv(filename)\n    with open(filename, 'w', encoding='utf-8') as f:\n        f.truncate(0)\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_empty_csv (builtins.TestCases)\nTest reading an empty CSV file.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 30, in test_empty_csv\n  File \"<bigcode>\", line 7, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/parsers/readers.py\", line 912, in read_csv\n    return _read(filepath_or_buffer, kwds)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/parsers/readers.py\", line 577, in _read\n    parser = TextFileReader(filepath_or_buffer, **kwds)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/parsers/readers.py\", line 1407, in __init__\n    self._engine = self._make_engine(f, self.engine)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/parsers/readers.py\", line 1679, in _make_engine\n    return mapping[engine](f, **self.options)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/parsers/c_parser_wrapper.py\", line 93, in __init__\n    self._reader = parsers.TextReader(src, **kwds)\n  File \"pandas/_libs/parsers.pyx\", line 557, in pandas._libs.parsers.TextReader.__cinit__\npandas.errors.EmptyDataError: No columns to parse from file\n\n----------------------------------------------------------------------\nRan 5 tests in 0.012s\n\nFAILED (errors=1)"}}
{"result": "```python\nimport os\nimport pandas as pd\nfrom dateutil.parser import parse\nimport matplotlib.pyplot as plt\n\nOUTPUT_DIR = './output'\n\ndef task_func(csv_path=os.path.join(OUTPUT_DIR, 'data.csv'), date_column='date'):\n    df = pd.read_csv(csv_path)\n    df[date_column] = df[date_column].apply(parse)\n    years = df[date_column].dt.year\n    fig, ax = plt.subplots()\n    ax.hist(years, bins=range(years.min(), years.max() + 2), edgecolor='black')\n    ax.set_xlabel('Year')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Year Distribution Histogram')\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pytz\nfrom dateutil.parser import parse\n\ndef task_func(date_str, from_tz, to_tz):\n    from_zone = pytz.timezone(from_tz)\n    to_zone = pytz.timezone(to_tz)\n\n    # Parse date string and localize to from_tz\n    naive_dt = parse(date_str)\n    if naive_dt.tzinfo is None:\n        from_dt = from_zone.localize(naive_dt)\n    else:\n        from_dt = naive_dt.astimezone(from_zone)\n\n    # Convert to destination timezone\n    to_dt = from_dt.astimezone(to_zone)\n\n    # Current time in destination timezone\n    now_to_tz = pytz.utc.localize(parse(\"now\")).astimezone(to_zone)\n\n    # Calculate difference in seconds\n    diff_seconds = int((to_dt - now_to_tz).total_seconds())\n\n    return diff_seconds\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 6, in test_case_1\n  File \"<bigcode>\", line 20, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/dateutil/parser/_parser.py\", line 1368, in parse\n    return DEFAULTPARSER.parse(timestr, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/dateutil/parser/_parser.py\", line 643, in parse\n    raise ParserError(\"Unknown string format: %s\", timestr)\ndateutil.parser._parser.ParserError: Unknown string format: now\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 11, in test_case_2\n  File \"<bigcode>\", line 20, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/dateutil/parser/_parser.py\", line 1368, in parse\n    return DEFAULTPARSER.parse(timestr, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/dateutil/parser/_parser.py\", line 643, in parse\n    raise ParserError(\"Unknown string format: %s\", timestr)\ndateutil.parser._parser.ParserError: Unknown string format: now\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_case_4\n  File \"<bigcode>\", line 20, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/dateutil/parser/_parser.py\", line 1368, in parse\n    return DEFAULTPARSER.parse(timestr, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/dateutil/parser/_parser.py\", line 643, in parse\n    raise ParserError(\"Unknown string format: %s\", timestr)\ndateutil.parser._parser.ParserError: Unknown string format: now\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 32, in test_case_5\n  File \"<bigcode>\", line 20, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/dateutil/parser/_parser.py\", line 1368, in parse\n    return DEFAULTPARSER.parse(timestr, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/dateutil/parser/_parser.py\", line 643, in parse\n    raise ParserError(\"Unknown string format: %s\", timestr)\ndateutil.parser._parser.ParserError: Unknown string format: now\n\n======================================================================\nFAIL: test_known_time_zone_offset_difference (builtins.TestCases)\nTest the function with time zones having a known, static offset.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_known_time_zone_offset_difference\n  File \"<bigcode>\", line 20, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/dateutil/parser/_parser.py\", line 1368, in parse\n    return DEFAULTPARSER.parse(timestr, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/dateutil/parser/_parser.py\", line 643, in parse\n    raise ParserError(\"Unknown string format: %s\", timestr)\ndateutil.parser._parser.ParserError: Unknown string format: now\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"<string>\", line 23, in test_known_time_zone_offset_difference\nAssertionError: task_func raised an exception with known static offset time zones: Unknown string format: now\n\n----------------------------------------------------------------------\nRan 5 tests in 0.015s\n\nFAILED (failures=1, errors=4)"}}
{"result": "```python\nfrom dateutil.parser import parse\nfrom datetime import timedelta\ndef task_func(date_str):\n    dt = parse(date_str)\n    next_day = dt + timedelta(days=1)\n    while next_day.weekday() >= 5:\n        next_day += timedelta(days=1)\n    return next_day\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\nfrom dateutil.parser import parse\n\ndef task_func(dates_str_list):\n    weekdays = [parse(date_str).weekday() for date_str in dates_str_list]\n    weekday_counts = pd.Series(weekdays).value_counts().reindex(range(7), fill_value=0)\n    weekday_names = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n    weekday_distribution = pd.Series(weekday_counts.values, index=weekday_names)\n    return weekday_distribution\n```", "match": {"category": "success"}}
{"result": "```python\nfrom datetime import datetime\nimport pytz\nfrom dateutil.parser import parse\ndef task_func(date_str, tz_str):\n    tz = pytz.timezone(tz_str)\n    dt = parse(date_str)\n    if dt.tzinfo is None:\n        dt = tz.localize(dt)\n    else:\n        dt = dt.astimezone(tz)\n\n    year = dt.year\n    next_year = datetime(year=year+1, month=1, day=1, tzinfo=tz)\n    # If dt is already past the New Year, next_Yeay=datetime(year+1) is correct, else next_year=Jan 1 of current year+1\n\n    delta = next_year - dt\n    return int(delta.total_seconds())\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport time\nimport matplotlib.pyplot as plt\n\ndef task_func(dic, target_value):\n    df = pd.DataFrame(dic)\n    if df.empty:\n        return pd.Series(dtype=int), None\n    counts = (df == target_value).sum()\n    ax = counts.plot(kind='bar')\n    ax.set_xlabel('Columns')\n    ax.set_ylabel(f'Count of \"{target_value}\"')\n    ax.set_title(f'Count of target value \"{target_value}\" per column')\n    plt.tight_layout()\n    return counts, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 49, in test_case_5\nAssertionError: 0 != 1\n\n----------------------------------------------------------------------\nRan 5 tests in 0.174s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport scipy.stats as stats\n# Constants\nTARGET_VALUE = '332'\nARRAY = np.array([['0', '1', '2'], ['a', 'bb', 'ccc'], ['332', '33', '2'], ['33', '22', '332']])\ndef task_func(target_value=TARGET_VALUE, array=ARRAY):\n    # Find row indices where first cell matches target_value\n    indices = np.where(array[:, 0] == target_value)[0]\n\n    if len(indices) == 0:\n        return 'N/A'\n    \n    # Statistical analysis\n    mean = np.mean(indices)\n    variance = np.var(indices, ddof=1) if len(indices) > 1 else 0.0\n    skewness = stats.skew(indices) if len(indices) > 2 else 0.0\n    kurtosis = stats.kurtosis(indices) if len(indices) > 3 else 0.0\n\n    # Plot distribution of the indices\n    plt.figure()\n    plt.hist(indices, bins=np.arange(indices.min(), indices.max() + 2) - 0.5, edgecolor='black')\n    plt.title(f'Distribution of row indices for target value \"{target_value}\"')\n    plt.xlabel('Row index')\n    plt.ylabel('Frequency')\n    plt.xticks(range(indices.min(), indices.max() + 1))\n    plt.grid(axis='y', linestyle='--', alpha=0.7)\n    plt.show()\n\n    return mean, variance, skewness, kurtosis\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_empty_array (builtins.TestCases)\nTest with an array that has no matching target value.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 15, in test_empty_array\nAssertionError: 'N/A' != ('N/A', 'N/A', 'N/A', 'N/A') : Should return 'N/A' for all stats if no target value found.\n\n======================================================================\nFAIL: test_single_match (builtins.TestCases)\nTest with an array that has exactly one matching target value.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 22, in test_single_match\nAssertionError: 0.0 != 'N/A' : Variance should be 'N/A' for a single match.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.069s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndef task_func(dataframe, target_value='332'):\n    bool_df = dataframe.eq(target_value)\n    fig, ax = plt.subplots(figsize=(dataframe.shape[1], dataframe.shape[0]))\n    sns.heatmap(bool_df, cmap='Reds', cbar=False, ax=ax, linewidths=0.5, linecolor='gray')\n    ax.set_title(f\"Occurrences of '{target_value}' in DataFrame\")\n    ax.set_xlabel(\"Columns\")\n    ax.set_ylabel(\"Rows\")\n    return bool_df, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport matplotlib.pyplot as plt\nimport scipy.optimize as optimize\nimport numpy as np\ndef task_func(array, target_value):\n    # Select indices where first column matches target_value\n    indices = np.where(array[:,0] == target_value)[0]\n    \n    # Define exponential decay function\n    def exp_decay(x, a, b, c):\n        return a * np.exp(-b * x) + c\n    \n    xdata = indices\n    ydata = np.arange(len(indices))  # Use position or could use array values, but unclear, using indices for fit\n    \n    # Alternatively, if fitting y values, we might need to clarify what to fit. \n    # The problem states 'fit ... to the indices in the array where the first column matches...'\n    # Actually, I believe the instruction is to fit an exponential decay to the indices themselves (x values), so ydata should be indices\n    # But that would be trivial. So maybe the intention is to fit the indices (xdata) and the row's second column (ydata).\n    # Let's assume xdata = 0..len(indices)-1 and ydata = array[indices, 1]\n    \n    ydata = array[indices, 1]\n    xdata = np.arange(len(indices))\n    \n    # Initial guess for parameters a,b,c\n    initial_guess = (ydata[0], 1, ydata[-1] if len(ydata) > 1 else 0)\n    \n    popt, _ = optimize.curve_fit(exp_decay, xdata, ydata, p0=initial_guess, maxfev=10000)\n    \n    # Plotting\n    fig, ax = plt.subplots()\n    ax.scatter(xdata, ydata, label='Data')\n    x_fit = np.linspace(xdata.min(), xdata.max(), 100)\n    y_fit = exp_decay(x_fit, *popt)\n    ax.plot(x_fit, y_fit, 'r-', label='Fit')\n    ax.set_xlabel('Index order')\n    ax.set_ylabel('Value (col 2)')\n    ax.legend()\n    \n    return popt, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_functionality (builtins.TestCases)\nTest the overall functionality.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 32, in test_functionality\n  File \"<bigcode>\", line 28, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/scipy/optimize/minpack.py\", line 789, in curve_fit\n    res = leastsq(func, p0, Dfun=jac, full_output=1, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/scipy/optimize/minpack.py\", line 410, in leastsq\n    shape, dtype = _check_func('leastsq', 'func', func, x0, args, n)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/scipy/optimize/minpack.py\", line 24, in _check_func\n    res = atleast_1d(thefunc(*((x0[:numinputs],) + args)))\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/scipy/optimize/minpack.py\", line 485, in func_wrapped\n    return func(xdata, *params) - ydata\n  File \"<bigcode>\", line 11, in exp_decay\nTypeError: bad operand type for unary -: 'numpy.str_'\n\n======================================================================\nERROR: test_not_enough_points (builtins.TestCases)\nTest with not enough points for fitting.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 29, in test_not_enough_points\n  File \"<bigcode>\", line 22, in task_func\nIndexError: index 1 is out of bounds for axis 1 with size 1\n\n======================================================================\nERROR: test_return_types (builtins.TestCases)\nTest the return types of the function.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 14, in test_return_types\n  File \"<bigcode>\", line 28, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/scipy/optimize/minpack.py\", line 789, in curve_fit\n    res = leastsq(func, p0, Dfun=jac, full_output=1, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/scipy/optimize/minpack.py\", line 410, in leastsq\n    shape, dtype = _check_func('leastsq', 'func', func, x0, args, n)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/scipy/optimize/minpack.py\", line 24, in _check_func\n    res = atleast_1d(thefunc(*((x0[:numinputs],) + args)))\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/scipy/optimize/minpack.py\", line 485, in func_wrapped\n    return func(xdata, *params) - ydata\n  File \"<bigcode>\", line 11, in exp_decay\nTypeError: bad operand type for unary -: 'numpy.str_'\n\n======================================================================\nERROR: test_target_value_found (builtins.TestCases)\nTest when the target value is found.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 19, in test_target_value_found\n  File \"<bigcode>\", line 28, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/scipy/optimize/minpack.py\", line 789, in curve_fit\n    res = leastsq(func, p0, Dfun=jac, full_output=1, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/scipy/optimize/minpack.py\", line 410, in leastsq\n    shape, dtype = _check_func('leastsq', 'func', func, x0, args, n)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/scipy/optimize/minpack.py\", line 24, in _check_func\n    res = atleast_1d(thefunc(*((x0[:numinputs],) + args)))\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/scipy/optimize/minpack.py\", line 485, in func_wrapped\n    return func(xdata, *params) - ydata\n  File \"<bigcode>\", line 11, in exp_decay\nTypeError: bad operand type for unary -: 'numpy.str_'\n\n======================================================================\nERROR: test_target_value_not_found (builtins.TestCases)\nTest when the target value is not found.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_target_value_not_found\n  File \"<bigcode>\", line 26, in task_func\nIndexError: index 0 is out of bounds for axis 0 with size 0\n\n----------------------------------------------------------------------\nRan 5 tests in 0.001s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport re\nimport nltk\nfrom sklearn.decomposition import NMF\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n# Ensure nltk's stopwords are downloaded\nnltk.download('stopwords')\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\nSTOPWORDS = set(nltk.corpus.stopwords.words('english'))\n\ndef task_func(texts, num_topics):\n    # Preprocessing function\n    def preprocess(text):\n        text = ALPHANUMERIC.sub(' ', text)  # Remove non-alphanumeric except spaces\n        text = text.lower()\n        tokens = text.split()\n        tokens = [token for token in tokens if token not in STOPWORDS]\n        return ' '.join(tokens)\n    \n    processed_texts = [preprocess(text) for text in texts]\n    \n    vectorizer = TfidfVectorizer()\n    tfidf = vectorizer.fit_transform(processed_texts)\n    \n    nmf_model = NMF(n_components=num_topics, random_state=1, init='nndsvda', max_iter=200)\n    nmf_model.fit(tfidf)\n    \n    feature_names = vectorizer.get_feature_names_out()\n    topics = []\n    for topic_idx, topic in enumerate(nmf_model.components_):\n        top_indices = topic.argsort()[::-1]\n        # Extract top 10 words for each topic or fewer if vocabulary is small\n        top_words = [feature_names[i] for i in top_indices[:10]]\n        topics.append(top_words)\n    \n    return topics\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_all_stopwords (builtins.TestCases)\nTest texts containing only stopwords.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 29, in test_all_stopwords\nTypeError: 'set' object is not subscriptable\n\n======================================================================\nERROR: test_empty_texts (builtins.TestCases)\nTest with an empty list of texts.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_empty_texts\n  File \"<bigcode>\", line 24, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/feature_extraction/text.py\", line 2139, in fit_transform\n    X = super().fit_transform(raw_documents)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 1152, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/feature_extraction/text.py\", line 1389, in fit_transform\n    vocabulary, X = self._count_vocab(raw_documents, self.fixed_vocabulary_)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/feature_extraction/text.py\", line 1295, in _count_vocab\n    raise ValueError(\nValueError: empty vocabulary; perhaps the documents only contain stop words\n\n----------------------------------------------------------------------\nRan 5 tests in 0.040s\n\nFAILED (errors=2)"}}
{"result": "```python\nimport re\nimport string\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nnltk.download('vader_lexicon')\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\nPUNCTUATIONS = string.punctuation\ndef task_func(text: str, sia: SentimentIntensityAnalyzer) -> dict:\n    # Remove all non-alphanumeric characters except spaces\n    cleaned = re.sub(r'[^a-zA-Z0-9 ]', '', text)\n    # Convert to lowercase\n    cleaned = cleaned.lower()\n    # Remove punctuation (though already removed non-alphanumeric except spaces)\n    cleaned = cleaned.translate(str.maketrans('', '', PUNCTUATIONS))\n    # Get sentiment scores\n    scores = sia.polarity_scores(cleaned)\n    return scores\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport nltk\nfrom gensim.models import Word2Vec\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\n\ndef task_func(texts, stopwords=None):\n    if stopwords is None:\n        nltk.download('stopwords')\n        from nltk.corpus import stopwords as sw\n        stopwords = set(sw.words('english'))\n    else:\n        stopwords = set(stopwords)\n    \n    cleaned_texts = []\n    for text in texts:\n        text = text.lower()\n        text = ALPHANUMERIC.sub(' ', text)\n        tokens = text.split()\n        tokens = [t for t in tokens if t not in stopwords]\n        cleaned_texts.append(tokens)\n    \n    model = Word2Vec(sentences=cleaned_texts, vector_size=100, window=5, min_count=1, workers=4)\n    return model\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 19, in test_case_3\n  File \"<bigcode>\", line 24, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/gensim/models/word2vec.py\", line 430, in __init__\n    self.train(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/gensim/models/word2vec.py\", line 1045, in train\n    self._check_training_sanity(epochs=epochs, total_examples=total_examples, total_words=total_words)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/gensim/models/word2vec.py\", line 1554, in _check_training_sanity\n    raise RuntimeError(\"you must first build vocabulary before training the model\")\nRuntimeError: you must first build vocabulary before training the model\n\n----------------------------------------------------------------------\nRan 5 tests in 0.044s\n\nFAILED (errors=1)"}}
{"result": "```python\nimport re\nimport nltk\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\n# Make sure to download NLTK stopwords\nnltk.download('stopwords')\n# Define a regex pattern for matching all non-alphanumeric characters\nALPHANUMERIC = re.compile('[\\W_]+')\n# Load NLTK's list of English stop words\nSTOPWORDS = nltk.corpus.stopwords.words('english')\ndef task_func(texts):\n    def preprocess(text):\n        # Remove non-alphanumeric chars (except spaces)\n        text = ALPHANUMERIC.sub(' ', text)\n        # Lowercase\n        text = text.lower()\n        return text\n\n    # Preprocess all texts\n    cleaned_texts = [preprocess(text) for text in texts]\n\n    vectorizer = CountVectorizer(stop_words=STOPWORDS)\n    dtm = vectorizer.fit_transform(cleaned_texts)\n    df = pd.DataFrame(dtm.toarray(), columns=vectorizer.get_feature_names_out())\n\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport scipy.stats as stats\ndef task_func(x, y, labels):\n    fig, ax = plt.subplots()\n    for xi, yi, label in zip(x, y, labels):\n        # Calculate mean and std from y assuming y is the density,\n        # but since we have y as array paired with x, we fit normal to data points\n        # We'll use xi as data points, ignoring yi here since y appears as values for normal curves\n        mu, std = np.mean(xi), np.std(xi)\n        x_vals = np.linspace(np.min(xi), np.max(xi), 200)\n        y_vals = stats.norm.pdf(x_vals, mu, std)\n        ax.plot(x_vals, y_vals, label=label)\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Probability Density')\n    ax.legend()\n    return fig\n```", "match": {"category": "success"}}
{"result": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(x, y, labels):\n    fig, ax = plt.subplots()\n    for xi, yi, label in zip(x, y, labels):\n        scaler_x = StandardScaler()\n        scaler_y = StandardScaler()\n        xi_scaled = scaler_x.fit_transform(np.array(xi).reshape(-1, 1)).flatten()\n        yi_scaled = scaler_y.fit_transform(np.array(yi).reshape(-1, 1)).flatten()\n        ax.plot(xi_scaled, yi_scaled, label=label)\n    ax.legend()\n    return fig\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nLABELS = ['H\\u2082O', 'O\\u2082', 'CO\\u2082', 'N\\u2082', 'Ar']\ndef task_func(x, y, labels):\n    # Create dataframe from input lists\n    df = pd.DataFrame({'x': x, 'y': y})\n    # Create a pivot table counting occurrences of each x-y pair\n    heatmap_data = df.pivot_table(index='y', columns='x', aggfunc=len, fill_value=0)\n    \n    # Replace index and columns with labels if possible\n    heatmap_data.index = [labels[i] if i < len(labels) else str(i) for i in heatmap_data.index]\n    heatmap_data.columns = [labels[i] if i < len(labels) else str(i) for i in heatmap_data.columns]\n    \n    # Plot heatmap\n    fig, ax = plt.subplots(figsize=(8,6))\n    ax = sns.heatmap(heatmap_data, annot=True, fmt='d', cmap='YlGnBu', ax=ax)\n    \n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    plt.tight_layout()\n    \n    return ax, df\n```", "match": {"category": "timeout", "error": "Test execution timed out after 10 seconds"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\n\ndef task_func(x, y, labels):\n    # Stack x and y into a 2D array for PCA\n    data = np.vstack((x, y)).T\n    \n    # Perform PCA\n    pca = PCA(n_components=2)\n    transformed = pca.fit_transform(data)\n    \n    fig, ax = plt.subplots(figsize=(8,6))\n    \n    # Scatter plot of original data\n    scatter = ax.scatter(x, y, c='blue', label='Original data')\n    \n    # Annotate points with labels\n    for xi, yi, label in zip(x, y, labels):\n        ax.text(xi, yi, label)\n    \n    # Plot principal components as arrows starting from mean\n    mean = np.mean(data, axis=0)\n    for i, (comp, var) in enumerate(zip(pca.components_, pca.explained_variance_)):\n        vector = comp * np.sqrt(var) * 3  # scale for visualization\n        ax.arrow(mean[0], mean[1], vector[0], vector[1], \n                 width=0.02, head_width=0.1, head_length=0.1, \n                 fc='red', ec='red', label=f'PC{i+1}' if i==0 else None)\n        ax.text(mean[0] + vector[0]*1.1, mean[1] + vector[1]*1.1,\n                f'PC{i+1}', color='red')\n    \n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_title('PCA on (x, y)')\n    ax.legend()\n    ax.grid(True)\n    \n    return fig\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nfrom scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit exponential curves of form f(x) = a * exp(-b * x) + c to datasets and plot them.\n\n    Parameters:\n    x : list or array-like of 1D array-like\n        Each element corresponds to the x-data of a dataset.\n    y : list or array-like of 1D array-like\n        Each element corresponds to the y-data of a dataset.\n    labels : list of str\n        Labels for each dataset.\n\n    Returns:\n    matplotlib.figure.Figure\n        The figure containing the plotted curves.\n    \"\"\"\n    def exp_func(x, a, b, c):\n        return a * np.exp(-b * x) + c\n\n    fig, ax = plt.subplots()\n    colors = plt.cm.tab10.colors\n\n    for i, (xi, yi, label) in enumerate(zip(x, y, labels)):\n        xi = np.array(xi)\n        yi = np.array(yi)\n\n        # Initial guesses for a, b, c\n        a0 = yi.max() - yi.min()\n        b0 = 1.0\n        c0 = yi.min()\n\n        try:\n            popt, _ = curve_fit(exp_func, xi, yi, p0=(a0, b0, c0))\n        except RuntimeError:\n            # If fit fails, use NaNs to skip plotting the fit curve\n            popt = [np.nan, np.nan, np.nan]\n\n        x_fit = np.linspace(np.min(xi), np.max(xi), 200)\n        if not np.any(np.isnan(popt)):\n            y_fit = exp_func(x_fit, *popt)\n            ax.plot(x_fit, y_fit, label=f\"{label} fit\", color=colors[i % len(colors)], lw=2)\n        # Plot original data points\n        ax.scatter(xi, yi, label=f\"{label} data\", color=colors[i % len(colors)], alpha=0.5)\n\n    ax.set_xlabel(\"x\")\n    ax.set_ylabel(\"f(x)\")\n    ax.legend()\n    ax.grid(True)\n    fig.tight_layout()\n    return fig\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_non_numeric_data (builtins.TestCases)\nEnsure non-numeric data raises a ValueError during fitting.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 35, in test_non_numeric_data\n  File \"<bigcode>\", line 33, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/numpy/core/_methods.py\", line 40, in _amax\n    return umr_maximum(a, axis, None, out, keepdims, initial, where)\nTypeError: cannot perform reduce with flexible type\n\n======================================================================\nFAIL: test_no_data (builtins.TestCases)\nTest the function with no data provided.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_no_data\nAssertionError: ValueError not raised : Empty data lists should raise a ValueError.\n\n======================================================================\nFAIL: test_plot_labels (builtins.TestCases)\nEnsure the plot includes all specified labels.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 14, in test_plot_labels\nAssertionError: Lists differ: ['Test 1 data', 'Test 2 data', 'Test 3 data'] != ['Test 1', 'Test 2', 'Test 3']\n\nFirst differing element 0:\n'Test 1 data'\n'Test 1'\n\n- ['Test 1 data', 'Test 2 data', 'Test 3 data']\n?         -----          -----          -----\n\n+ ['Test 1', 'Test 2', 'Test 3'] : Legend labels do not match input labels.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.210s\n\nFAILED (failures=2, errors=1)"}}
{"result": "```python\nimport statistics\nimport matplotlib.pyplot as plt\ndef task_func(sales_data):\n    \"\"\"\n    sales_data: dict of format\n        {\n            'ProductA': {\n                'Month1': [sales_values],\n                'Month2': [sales_values],\n                ...\n            },\n            'ProductB': {...},\n            ...\n        }\n    \"\"\"\n    months = sorted(next(iter(sales_data.values())).keys(), key=lambda m: int(''.join(filter(str.isdigit,m))))\n    fig, ax = plt.subplots(figsize=(10,6))\n\n    for product, month_data in sales_data.items():\n        means = []\n        stds = []\n        for m in months:\n            vals = month_data[m]\n            mean_val = statistics.mean(vals) if vals else 0\n            means.append(mean_val)\n            std_val = statistics.stdev(vals) if len(vals) > 1 else 0\n            stds.append(std_val)\n        ax.plot(months, means, label=product)\n        lower = [m - s for m,s in zip(means,stds)]\n        upper = [m + s for m,s in zip(means,stds)]\n        ax.fill_between(months, lower, upper, alpha=0.2)\n\n    ax.set_xlabel('Month')\n    ax.set_ylabel('Sales')\n    ax.set_title('Sales Trends with Standard Deviation Shading')\n    ax.legend()\n    ax.grid(True)\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_monthly_ticks (builtins.TestCases)\nVerify that all months are correctly plotted as x-ticks.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_monthly_ticks\n  File \"<bigcode>\", line 17, in task_func\nTypeError: 'numpy.ndarray' object is not callable\n\n======================================================================\nERROR: test_plot_labels (builtins.TestCases)\nEnsure all product labels are present in the plot legend.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 17, in test_plot_labels\n  File \"<bigcode>\", line 17, in task_func\nTypeError: 'numpy.ndarray' object is not callable\n\n======================================================================\nERROR: test_plot_lines (builtins.TestCases)\nCheck if the plot contains lines for each product.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 23, in test_plot_lines\n  File \"<bigcode>\", line 17, in task_func\nTypeError: 'numpy.ndarray' object is not callable\n\n======================================================================\nERROR: test_positive_sales (builtins.TestCases)\nEnsure all plotted sales values are positive.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 35, in test_positive_sales\n  File \"<bigcode>\", line 17, in task_func\nTypeError: 'numpy.ndarray' object is not callable\n\n======================================================================\nERROR: test_std_dev_shading (builtins.TestCases)\nCheck for standard deviation shading around each product line.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 41, in test_std_dev_shading\n  File \"<bigcode>\", line 17, in task_func\nTypeError: 'numpy.ndarray' object is not callable\n\n----------------------------------------------------------------------\nRan 5 tests in 0.003s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport shutil\nimport os\nimport fnmatch\nimport itertools\ndef task_func(src_dir, dst_dir):\n    os.makedirs(dst_dir, exist_ok=True)\n    patterns = ['*.txt', '*.docx']\n    all_files = []\n    for pattern in patterns:\n        matched = fnmatch.filter(os.listdir(src_dir), pattern)\n        all_files.extend(matched)\n    for filename in set(all_files):\n        src_path = os.path.join(src_dir, filename)\n        dst_path = os.path.join(dst_dir, filename)\n        shutil.copy2(src_path, dst_path)\n    return dst_dir\n```", "match": {"category": "success"}}
{"result": "```python\nfrom itertools import combinations\nimport math\ndef task_func(seq, letter_weight_dict):\n    max_weight = -math.inf\n    max_subseq = \"\"\n    n = len(seq)\n    for length in range(1, n+1):\n        for comb in combinations(range(n), length):\n            subseq = ''.join(seq[i] for i in comb)\n            weight = sum(letter_weight_dict.get(ch, 0) for ch in subseq)\n            if weight > max_weight:\n                max_weight = weight\n                max_subseq = subseq\n    return max_subseq\n```", "match": {"category": "success"}}
{"result": "```python\nimport heapq\nimport collections\ndef task_func(x, n):\n    return [item[0] for item in heapq.nlargest(n, x.items(), key=lambda kv: kv[1])]\n```", "match": {"category": "success"}}
{"result": "```python\nimport itertools\nimport math\ndef task_func(x):\n    keys = list(x.keys())\n    min_length = math.inf\n    min_subseq = []\n    for r in range(1, len(keys) + 1):\n        for subseq in itertools.combinations(keys, r):\n            total_len = sum(x[k] for k in subseq)\n            if total_len < min_length:\n                min_length = total_len\n                min_subseq = list(subseq)\n    return min_subseq\n```", "match": {"category": "success"}}
{"result": "```python\nimport itertools\nimport math\ndef task_func(x):\n    max_pair = None\n    max_sum = -float('inf')\n    keys = list(x.keys())\n    for k1, k2 in itertools.combinations(keys, 2):\n        current_sum = math.cos(x[k1]) + math.cos(x[k2])\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_pair = (k1, k2)\n    return max_pair\n```", "match": {"category": "success"}}
{"result": "```python\nfrom itertools import combinations\nimport math\ndef task_func(x, w):\n    max_weight = -math.inf\n    max_substr = \"\"\n    current_weight = 0\n    start = 0\n    for end in range(len(x)):\n        current_weight += w.get(x[end], 0)\n        while start <= end and current_weight < 0:\n            current_weight -= w.get(x[start], 0)\n            start += 1\n        if current_weight > max_weight:\n            max_weight = current_weight\n            max_substr = x[start:end+1]\n    return max_substr\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport random\nimport json\n\ndef task_func(directory, n):\n    os.makedirs(directory, exist_ok=True)\n    files = []\n    for i in range(n):\n        filepath = os.path.join(directory, f\"file_{i+1}.json\")\n        with open(filepath, 'w+') as f:\n            data = {'number': random.randint(1, 100)}\n            json.dump(data, f)\n            f.seek(0)\n    return directory\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 16, in test_case_1\nAssertionError: Lists differ: [{'nu[18 chars]er': 62}, {'number': 98}, {'number': 54}, {'nu[85 chars] 39}] != [{'nu[18 chars]er': 98}, {'number': 54}, {'number': 6}, {'num[85 chars] 62}]\n\nFirst differing element 1:\n{'number': 62}\n{'number': 98}\n\n  [{'number': 50},\n-  {'number': 62},\n   {'number': 98},\n   {'number': 54},\n   {'number': 6},\n   {'number': 34},\n   {'number': 66},\n   {'number': 63},\n   {'number': 52},\n-  {'number': 39}]\n?                ^\n\n+  {'number': 39},\n?                ^\n\n+  {'number': 62}]\n\n----------------------------------------------------------------------\nRan 5 tests in 0.011s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport csv\nimport sys\ndef task_func(filename):\n    with open(filename, 'r+', newline='') as f:\n        lines = f.readlines()\n        f.seek(0)\n        f.truncate()\n        for line in reversed(lines):\n            f.write(line)\n        f.seek(0)\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport random\ndef task_func(directory, n_files):\n    os.makedirs(directory, exist_ok=True)\n    for i in range(1, n_files + 1):\n        path = os.path.join(directory, f'file_{i}.txt')\n        with open(path, 'w+') as f:\n            digit = str(random.randint(0, 9))\n            f.write(digit)\n            f.seek(0)\n    return n_files\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport os\ndef task_func(filename):\n    if os.path.getsize(filename) == 0:\n        # Empty file, nothing to do\n        return\n    df = pd.read_csv(filename)\n    if df.empty:\n        # File has header but no data rows, so nothing to reverse\n        return\n    df.iloc[:] = df.iloc[::-1].values\n    df.to_csv(filename, index=False)\n    with open(filename, 'r+') as f:\n        f.seek(0)\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport random\nimport string\n\ndef task_func(directory, n_files):\n    os.makedirs(directory, exist_ok=True)\n    for i in range(n_files):\n        filename = f\"file_{i+1}.txt\"\n        filepath = os.path.join(directory, filename)\n        with open(filepath, 'w+') as f:\n            rand_str = ''.join(random.choices(string.ascii_letters + string.digits, k=20))\n            f.write(rand_str)\n            f.seek(0)\n    return directory\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport random\n\ndef task_func(df):\n    def decide_winner(row):\n        if row['score_team1'] > row['score_team2']:\n            return row['team1']\n        elif row['score_team2'] > row['score_team1']:\n            return row['team2']\n        else:\n            return random.choice([row['team1'], row['team2']])\n    df['winner'] = df.apply(decide_winner, axis=1)\n    return df\n```", "match": {"category": "timeout", "error": "Test execution timed out after 10 seconds"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\nfrom scipy.stats import linregress\ndef task_func(df):\n    x = df.iloc[:, 0]\n    y = df.iloc[:, 1]\n    slope, intercept, _, _, _ = linregress(x, y)\n    df['predicted'] = intercept + slope * x\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport json\nimport os\nimport shutil\ndef task_func(path):\n    processed_dir = os.path.join(path, 'processed')\n    if not os.path.exists(processed_dir):\n        os.makedirs(processed_dir)\n\n    files = sorted(f for f in os.listdir(path) if f.endswith('.json') and os.path.isfile(os.path.join(path, f)))\n    dfs = []\n    for filename in files:\n        file_path = os.path.join(path, filename)\n        with open(file_path, 'r', encoding='utf-8') as f:\n            data = json.load(f)\n        df = pd.DataFrame(data)\n        df['Source'] = filename\n        dfs.append(df)\n        shutil.move(file_path, os.path.join(processed_dir, filename))\n\n    if dfs:\n        return pd.concat(dfs, ignore_index=True)\n    else:\n        return pd.DataFrame()\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_empty_directory (builtins.TestCases)\nTest operation on an empty directory.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 30, in test_empty_directory\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/os.py\", line 225, in makedirs\n    mkdir(name, mode)\nFileExistsError: [Errno 17] File exists: './test_data_2'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.014s\n\nFAILED (errors=1)"}}
{"result": "```python\nimport pandas as pd\nfrom collections import Counter\n\ndef task_func(df):\n    # Create combination column by sorting and joining row elements as strings\n    df['combination'] = df.astype(str).apply(lambda x: ','.join(sorted(x)), axis=1)\n    # Calculate frequency of each combination\n    freq_dict = dict(Counter(df['combination']))\n    return freq_dict\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 6, in test_case_1\nKeyError: ('a', 'b', 'c', 'd', 'e')\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_case_2\nKeyError: ('a', 'b', 'c', 'd', 'e')\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_case_3\nKeyError: ('a', 'a', 'a', 'a', 'a')\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_case_4\nKeyError: ('a', 'b', 'c', 'd', 'e')\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 31, in test_case_5\nKeyError: ('a', 'b', 'c', 'd', 'e')\n\n----------------------------------------------------------------------\nRan 5 tests in 0.010s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df, features):\n    scaler = StandardScaler()\n    df_scaled = df.copy()\n    df_scaled[features] = scaler.fit_transform(df[features])\n    return df_scaled\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 47, in test_case_5\n  File \"<bigcode>\", line 8, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/utils/_set_output.py\", line 157, in wrapped\n    data_to_wrap = f(self, X, *args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 916, in fit_transform\n    return self.fit(X, **fit_params).transform(X)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/preprocessing/_data.py\", line 839, in fit\n    return self.partial_fit(X, y, sample_weight)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 1152, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/preprocessing/_data.py\", line 875, in partial_fit\n    X = self._validate_data(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 605, in _validate_data\n    out = check_array(X, input_name=\"X\", **check_params)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 795, in check_array\n    dtype_orig = np.result_type(*dtypes_orig)\n  File \"<__array_function__ internals>\", line 5, in result_type\nValueError: at least one array or dtype is required\n\n----------------------------------------------------------------------\nRan 5 tests in 0.026s\n\nFAILED (errors=1)"}}
{"result": "```python\nimport pandas as pd\nimport json\n\ndef task_func(file_path, key):\n    with open(file_path, 'r') as f:\n        data = json.load(f)\n    for obj in data:\n        obj.pop(key, None)\n    df = pd.DataFrame(data)\n    df.to_json(file_path, orient='records', lines=False)\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nfrom collections import Counter\nimport math\ndef task_func(nested_dict):\n    agg = Counter()\n    for d in nested_dict.values():\n        for k, v in d.items():\n            if k != \"ele\":\n                agg[k] += v\n    return {k: math.sin(v) for k, v in agg.items()}\n```", "match": {"category": "success"}}
{"result": "```python\nimport math\nimport yaml\n\ndef task_func(yaml_path, key):\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(f)\n    \n    def apply_cosine(d, k):\n        if isinstance(d, dict):\n            for kk, vv in d.items():\n                if kk == k:\n                    if isinstance(vv, (int, float)):\n                        d[kk] = math.cos(vv)\n                else:\n                    apply_cosine(vv, k)\n        elif isinstance(d, list):\n            for item in d:\n                apply_cosine(item, k)\n\n    apply_cosine(data, key)\n\n    with open(yaml_path, 'w') as f:\n        yaml.dump(data, f)\n\n    return data\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\ndef task_func(df, col):\n    df = df.drop(columns=[col])\n    df['IsEvenIndex'] = df.index.to_series().mod(2) == 0\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nfrom collections import Counter\nfrom itertools import chain\ndef task_func(list_of_lists):\n    merged = chain.from_iterable(list_of_lists)\n    return Counter(merged)\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nfrom sklearn.preprocessing import OneHotEncoder\ndef task_func(list_of_lists):\n    merged_list = [item for sublist in list_of_lists for item in sublist]\n    merged_array = np.array(merged_list).reshape(-1, 1)\n    encoder = OneHotEncoder(sparse=False, dtype=int)\n    one_hot = encoder.fit_transform(merged_array)\n    return one_hot\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nfrom scipy.stats import mode\ndef task_func(list_of_lists):\n    merged = np.concatenate(list_of_lists)\n    mode_result = mode(merged)\n    mode_value = mode_result.mode[0]\n    mode_count = mode_result.count[0]\n    return (mode_value, mode_count), mode_value, mode_count\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 4, in test_case_1\nAssertionError: Tuples differ: ((1, 2), 1, 2) != (1, 2)\n\nFirst differing element 0:\n(1, 2)\n1\n\nFirst tuple contains 1 additional elements.\nFirst extra element 2:\n2\n\n- ((1, 2), 1, 2)\n+ (1, 2)\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 6, in test_case_2\nAssertionError: Tuples differ: ((1, 5), 1, 5) != (1, 5)\n\nFirst differing element 0:\n(1, 5)\n1\n\nFirst tuple contains 1 additional elements.\nFirst extra element 2:\n5\n\n- ((1, 5), 1, 5)\n+ (1, 5)\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_case_3\nAssertionError: Tuples differ: ((1, 5), 1, 5) != (1, 5)\n\nFirst differing element 0:\n(1, 5)\n1\n\nFirst tuple contains 1 additional elements.\nFirst extra element 2:\n5\n\n- ((1, 5), 1, 5)\n+ (1, 5)\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 10, in test_case_4\nAssertionError: Tuples differ: ((1, 5), 1, 5) != (1, 5)\n\nFirst differing element 0:\n(1, 5)\n1\n\nFirst tuple contains 1 additional elements.\nFirst extra element 2:\n5\n\n- ((1, 5), 1, 5)\n+ (1, 5)\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_case_5\nAssertionError: Tuples differ: ((1, 5), 1, 5) != (1, 5)\n\nFirst differing element 0:\n(1, 5)\n1\n\nFirst tuple contains 1 additional elements.\nFirst extra element 2:\n5\n\n- ((1, 5), 1, 5)\n+ (1, 5)\n\n----------------------------------------------------------------------\nRan 5 tests in 0.005s\n\nFAILED (failures=5)"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n    scaler = StandardScaler()\n    scaled_array = scaler.fit_transform(df)\n    df_standardized = pd.DataFrame(scaled_array, columns=df.columns, index=df.index)\n    return df_standardized\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nfrom scipy import stats\ndef task_func(df):\n    p_values = {}\n    for col in df.columns:\n        # Shapiro test requires at least 3 data points\n        if df[col].dropna().shape[0] >= 3:\n            stat, p = stats.shapiro(df[col].dropna())\n            p_values[col] = p\n        else:\n            p_values[col] = np.nan\n    return p_values\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\nROWS = 100\nCOLUMNS = ['X', 'Y']\n\ndef task_func(df):\n    model = LinearRegression()\n    X = df[['X']]\n    y = df['Y']\n    model.fit(X, y)\n    return model\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\n\ndef task_func(df):\n    scaler = StandardScaler()\n    scaled_data = scaler.fit_transform(df.values)\n    kmeans = KMeans(n_clusters=3, random_state=42)\n    kmeans.fit(scaled_data)\n    labels = kmeans.labels_\n    return labels\n```", "match": {"category": "success"}}
{"result": "```python\nimport math\nimport pandas as pd\ndef task_func(tuples_list):\n    data = [[math.sin(x) for x in tup] for tup in tuples_list]\n    df = pd.DataFrame(data)\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(tuples_list, columns):\n    df = pd.DataFrame(tuples_list, columns=columns)\n    scaler = StandardScaler()\n    scaled_array = scaler.fit_transform(df)\n    df_scaled = pd.DataFrame(scaled_array, columns=columns)\n    return df_scaled\n```", "match": {"category": "success"}}
{"result": "```python\nimport itertools\nimport random\ndef task_func(t, n):\n    combos = list(itertools.combinations(t, n))\n    return random.choice(combos)\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\ndef task_func(tuples_list, n_components):\n    data = np.array(tuples_list)\n    pca = PCA(n_components=n_components)\n    transformed_data = pca.fit_transform(data)\n    return transformed_data\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport math\nimport random\nfrom random import uniform\ndef task_func(radius, num_points):\n    out = []\n    for _ in range(num_points):\n        r = radius * math.sqrt(random.uniform(0, 1))\n        theta = random.uniform(0, 2 * math.pi)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        out.append((x, y))\n    return out\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df):\n    X = df[['feature']].values\n    y = df['value'].values\n    model = LinearRegression()\n    model.fit(X, y)\n    result = {\n        'coefficients': model.coef_.tolist(),\n        'intercept': model.intercept_.item() if hasattr(model.intercept_, 'item') else model.intercept_\n    }\n    return result\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_case_1\nTypeError: object of type 'float' has no len()\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 14, in test_case_2\nTypeError: object of type 'float' has no len()\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 22, in test_case_3\nTypeError: object of type 'float' has no len()\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 30, in test_case_4\nTypeError: object of type 'float' has no len()\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 38, in test_case_5\nTypeError: object of type 'float' has no len()\n\n----------------------------------------------------------------------\nRan 5 tests in 0.012s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndef task_func(df):\n    X = df.drop(columns=[\"target\"])\n    y = df[\"target\"]\n    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=42)\n    return X_train, X_test, y_train, y_test\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\n\ndef task_func(x_list, y_list, n_clusters=2, random_state=0):\n    df = pd.DataFrame({'x': x_list, 'y': y_list})\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state)\n    kmeans.fit(df)\n    return kmeans.labels_, kmeans.cluster_centers_\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\ndef task_func(data, cols):\n    df = pd.DataFrame(data, columns=cols)\n    numeric_df = df.select_dtypes(include=[np.number])\n    correlation_matrix = numeric_df.corr()\n    return correlation_matrix\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    X = df.drop(columns=[target])\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    score = model.score(X, y)\n    return score\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\n\ndef task_func(df):\n    pca = PCA(n_components=2)\n    components = pca.fit_transform(df)\n    df_pca = pd.DataFrame(components, columns=['PC1', 'PC2'], index=df.index)\n    return df_pca\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.cluster import DBSCAN\n\ndef task_func(data, cols):\n    df = pd.DataFrame(data, columns=cols)\n    clustering = DBSCAN(eps=3, min_samples=2).fit(df)\n    df['Cluster'] = clustering.labels_\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom itertools import combinations\n# Constants\nMIN_PERCENTAGE = 0.75\ndef task_func(data, cols, percentage):\n    corr_combinations = []\n    for c1, c2 in combinations(cols, 2):\n        corr = data[c1].corr(data[c2])\n        if abs(corr) > percentage:\n            corr_combinations.append((c1, c2))\n    return corr_combinations\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 4, in test_case_1\n  File \"<bigcode>\", line 9, in task_func\nTypeError: list indices must be integers or slices, not str\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 6, in test_case_2\n  File \"<bigcode>\", line 9, in task_func\nTypeError: list indices must be integers or slices, not str\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_case_3\n  File \"<bigcode>\", line 9, in task_func\nTypeError: list indices must be integers or slices, not str\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 10, in test_case_4\n  File \"<bigcode>\", line 9, in task_func\nTypeError: list indices must be integers or slices, not str\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_case_5\n  File \"<bigcode>\", line 9, in task_func\nTypeError: list indices must be integers or slices, not str\n\n----------------------------------------------------------------------\nRan 5 tests in 0.002s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport numpy as np\nfrom scipy import stats\ndef task_func(df, column, alpha):\n    data = df[column].dropna()\n    # Artificial step to explicitly use np (e.g., casting to np.array)\n    data_np = np.array(data)\n    stat, p_value = stats.shapiro(data_np)\n    return p_value > alpha\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\ndef task_func(data, columns, target_column):\n    X = data[columns]\n    y = data[target_column]\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    model = LogisticRegression(max_iter=1000)\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    accuracy = accuracy_score(y_test, y_pred)\n    return accuracy\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_case_1\n  File \"<bigcode>\", line 8, in task_func\nIndexError: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_case_2\n  File \"<bigcode>\", line 8, in task_func\nIndexError: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_case_3\n  File \"<bigcode>\", line 8, in task_func\nIndexError: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 38, in test_case_4\n  File \"<bigcode>\", line 8, in task_func\nIndexError: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 49, in test_case_5\n  File \"<bigcode>\", line 8, in task_func\nIndexError: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices\n\n----------------------------------------------------------------------\nRan 5 tests in 0.001s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport json\nimport numpy as np\ndef task_func(df):\n    df['IntCol'] = np.log10(df['IntCol'])\n    with open('IntCol.json', 'w') as f:\n        json.dump(df['IntCol'].tolist(), f)\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport json\nimport csv\nimport os\nimport base64\n\ndef task_func(raw_string, filename, output_dir):\n    decoded_bytes = base64.b64decode(raw_string)\n    data = json.loads(decoded_bytes.decode('utf-8'))\n\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    file_path = os.path.join(output_dir, filename)\n\n    if isinstance(data, list) and data and isinstance(data[0], dict):\n        keys = set()\n        for item in data:\n            keys.update(item.keys())\n        keys = sorted(keys)\n\n        with open(file_path, mode='w', newline='', encoding='utf-8') as csvfile:\n            writer = csv.DictWriter(csvfile, fieldnames=keys)\n            writer.writeheader()\n            for row in data:\n                writer.writerow(row)\n    elif isinstance(data, dict):\n        keys = sorted(data.keys())\n        with open(file_path, mode='w', newline='', encoding='utf-8') as csvfile:\n            writer = csv.DictWriter(csvfile, fieldnames=keys)\n            writer.writeheader()\n            writer.writerow(data)\n    else:\n        # If data is not a dict or list of dicts, write as single string under a single column\n        with open(file_path, mode='w', newline='', encoding='utf-8') as csvfile:\n            writer = csv.writer(csvfile)\n            writer.writerow(['data'])\n            writer.writerow([str(data)])\n\n    return file_path\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_case_1\nAssertionError: './output/data' != './output/data.csv'\n- ./output/data\n+ ./output/data.csv\n?              ++++\n\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_case_2\nAssertionError: './output/data' != './output/data.csv'\n- ./output/data\n+ ./output/data.csv\n?              ++++\n\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 34, in test_case_3\nAssertionError: './output/data' != './output/data.csv'\n- ./output/data\n+ ./output/data.csv\n?              ++++\n\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 44, in test_case_4\nAssertionError: './output/data' != './output/data.csv'\n- ./output/data\n+ ./output/data.csv\n?              ++++\n\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 54, in test_case_5\nAssertionError: './output/data' != './output/data.csv'\n- ./output/data\n+ ./output/data.csv\n?              ++++\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.004s\n\nFAILED (failures=5)"}}
{"result": "```python\nimport base64\nimport re\nfrom html import unescape\nimport textwrap\ndef task_func(raw_string, line_length):\n    decoded_bytes = base64.b64decode(raw_string)\n    decoded_str = decoded_bytes.decode('utf-8')\n    unescaped_str = unescape(decoded_str)\n    cleaned_str = re.sub(r'\\s+', ' ', unescaped_str).strip()\n    wrapped_text = textwrap.fill(cleaned_str, width=line_length)\n    return wrapped_text\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data_path):\n    df = pd.read_csv(data_path)\n    scaler = MinMaxScaler()\n    numeric_cols = df.select_dtypes(include=['number']).columns\n    df[numeric_cols] = scaler.fit_transform(df[numeric_cols])\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport json\nimport csv\n\ndef task_func(json_file, csv_file):\n    with open(json_file, 'r', encoding='utf-8') as jf:\n        data = json.load(jf)\n\n    # If data is a dict with a list inside, try to extract list; else assume list of dicts directly\n    if isinstance(data, dict):\n        # Try to find the first list in the dict\n        for value in data.values():\n            if isinstance(value, list):\n                data = value\n                break\n        else:\n            # No list found, wrap dict in list\n            data = [data]\n    elif not isinstance(data, list):\n        data = [data]\n\n    # Collect all fieldnames\n    fieldnames = set()\n    for entry in data:\n        if isinstance(entry, dict):\n            fieldnames.update(entry.keys())\n    fieldnames = list(fieldnames)\n\n    with open(csv_file, 'w', newline='', encoding='utf-8') as cf:\n        writer = csv.DictWriter(cf, fieldnames=fieldnames)\n        writer.writeheader()\n        for entry in data:\n            if isinstance(entry, dict):\n                writer.writerow(entry)\n            else:\n                writer.writerow({})\n\n    return csv_file\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_case_1\nAssertionError: Lists differ: [['b', 'c', 'a'], ['2', '3', '1']] != [['a', 'b', 'c'], ['1', '2', '3']]\n\nFirst differing element 0:\n['b', 'c', 'a']\n['a', 'b', 'c']\n\n- [['b', 'c', 'a'], ['2', '3', '1']]\n+ [['a', 'b', 'c'], ['1', '2', '3']]\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 34, in test_case_2\nAssertionError: Lists differ: [['z', 'x', 'y'], ['1', '3', '2']] != [['z', 'y', 'x'], ['1', '2', '3']]\n\nFirst differing element 0:\n['z', 'x', 'y']\n['z', 'y', 'x']\n\n- [['z', 'x', 'y'], ['1', '3', '2']]\n+ [['z', 'y', 'x'], ['1', '2', '3']]\n\n----------------------------------------------------------------------\nRan 5 tests in 0.004s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport os\nimport shutil\nimport glob\ndef task_func(source_dir, dest_dir, extension):\n    if not os.path.isdir(source_dir) or not os.path.isdir(dest_dir):\n        return 0\n    pattern = os.path.join(source_dir, f\"*.{extension.lstrip('.')}\")\n    files = glob.glob(pattern)\n    count = 0\n    for file in files:\n        if os.path.isfile(file):\n            try:\n                shutil.move(file, dest_dir)\n                count += 1\n            except Exception:\n                pass\n    return count\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport re\n\ndef task_func(log_file_path: str, keywords: list):\n    formatted_lines = []\n    if not os.path.isfile(log_file_path):\n        return formatted_lines\n    \n    # Compile regex to match timestamp (assuming ISO-like or common log timestamp) and find keywords\n    # Example timestamp pattern: 2023-04-27 12:34:56 or 2023-04-27T12:34:56\n    timestamp_pattern = re.compile(r'(\\d{4}-\\d{2}-\\d{2}[ T]\\d{2}:\\d{2}:\\d{2})')\n    keywords_pattern = re.compile('|'.join(re.escape(k) for k in keywords), re.IGNORECASE)\n\n    with open(log_file_path, 'r', encoding='utf-8') as f:\n        for line in f:\n            if keywords_pattern.search(line):\n                # Find the first keyword matched (case insensitive)\n                match_keyword = keywords_pattern.search(line)\n                keyword_found = match_keyword.group(0)\n                \n                # Extract timestamp if present, else empty string\n                match_timestamp = timestamp_pattern.search(line)\n                timestamp = match_timestamp.group(1) if match_timestamp else ''\n                \n                # Extract message: remove timestamp and keyword from line (leave the rest)\n                # Remove timestamp\n                message = timestamp_pattern.sub('', line).strip()\n                # Remove keyword\n                # Replace only first occurrence (case insensitive)\n                keyword_regex = re.compile(re.escape(keyword_found), re.IGNORECASE)\n                message = keyword_regex.sub('', message, count=1).strip()\n                \n                # Format: keyword + 20 spaces + timestamp + 20 spaces + message\n                formatted_line = f\"{keyword_found}{' ' * 20}{timestamp}{' ' * 20}{message}\"\n                formatted_lines.append(formatted_line)\n                \n    return formatted_lines\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_empty_keywords (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 18, in test_empty_keywords\nAssertionError: Lists differ: ['                                        [122 chars]age'] != []\n\nFirst list contains 2 additional elements.\nFirst extra element 0:\n'                                        ERROR 11:30:10 This is an error message'\n\n+ []\n- ['                                        ERROR 11:30:10 This is an error '\n-  'message',\n-  '                                        WARNING 11:35:10 This is a warning '\n-  'message']\n\n======================================================================\nFAIL: test_nonexistent_file (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 15, in test_nonexistent_file\nAssertionError: FileNotFoundError not raised\n\n----------------------------------------------------------------------\nRan 5 tests in 0.006s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport sys\nfrom pathlib import Path\n# Constants\nPATH_TO_APPEND = '/path/to/whatever'\ndef task_func(path_to_append=PATH_TO_APPEND):\n    path = Path(path_to_append)\n    if not path.exists():\n        path.mkdir(parents=True, exist_ok=True)\n    if path_to_append not in sys.path:\n        sys.path.append(path_to_append)\n    return path_to_append\n```", "match": {"category": "success"}}
{"result": "```python\nimport sys\nimport subprocess\n\n# Constants\nPYTHON_VERSION = '3.8'\nPATH_TO_APPEND = '/path/to/whatever'\n\ndef task_func(python_version=PYTHON_VERSION, path_to_append=PATH_TO_APPEND):\n    # Find full path to desired python executable\n    python_executable = f'python{python_version}'\n    try:\n        # Check if the python version is available and get executable path\n        result = subprocess.run([python_executable, '-c', 'import sys; print(sys.executable)'], \n                                capture_output=True, text=True, check=True)\n        new_python_path = result.stdout.strip()\n    except Exception:\n        raise RuntimeError(f\"Python version {python_version} not found on the system PATH.\")\n\n    # Update sys.executable and sys.version_info\n    sys.executable = new_python_path\n    # Attempt to overwrite sys.version / sys.version_info (not straightforward, so simulate)\n    # Warning: This only simulates the version switch for this running Python process.\n    # True Python interpreter switch requires restarting the process.\n    import importlib\n\n    # Reload sys module forcibly to reflect new python version cannot be done directly,\n    # so we leave sys.version as is but note python_executable was changed.\n    \n    # Append the specified path to sys.path if not already present\n    if path_to_append not in sys.path:\n        sys.path.append(path_to_append)\n    \n    return python_version\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_switch_to_default_python_version (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 9, in test_switch_to_default_python_version\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 929, in assert_called_with\n    raise AssertionError(_error_message()) from cause\nAssertionError: expected call not found.\nExpected: run(['pyenv', 'global', '3.8'], check=True)\nActual: run(['python3.8', '-c', 'import sys; print(sys.executable)'], capture_output=True, text=True, check=True)\n\n======================================================================\nFAIL: test_switch_to_python_2_7 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 30, in test_switch_to_python_2_7\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 929, in assert_called_with\n    raise AssertionError(_error_message()) from cause\nAssertionError: expected call not found.\nExpected: run(['pyenv', 'global', '2.7'], check=True)\nActual: run(['python2.7', '-c', 'import sys; print(sys.executable)'], capture_output=True, text=True, check=True)\n\n======================================================================\nFAIL: test_switch_to_python_3_6 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 37, in test_switch_to_python_3_6\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 929, in assert_called_with\n    raise AssertionError(_error_message()) from cause\nAssertionError: expected call not found.\nExpected: run(['pyenv', 'global', '3.6'], check=True)\nActual: run(['python3.6', '-c', 'import sys; print(sys.executable)'], capture_output=True, text=True, check=True)\n\n======================================================================\nFAIL: test_switch_to_python_3_7 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 16, in test_switch_to_python_3_7\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 929, in assert_called_with\n    raise AssertionError(_error_message()) from cause\nAssertionError: expected call not found.\nExpected: run(['pyenv', 'global', '3.7'], check=True)\nActual: run(['python3.7', '-c', 'import sys; print(sys.executable)'], capture_output=True, text=True, check=True)\n\n======================================================================\nFAIL: test_switch_to_python_3_9 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 23, in test_switch_to_python_3_9\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 929, in assert_called_with\n    raise AssertionError(_error_message()) from cause\nAssertionError: expected call not found.\nExpected: run(['pyenv', 'global', '3.9'], check=True)\nActual: run(['python3.9', '-c', 'import sys; print(sys.executable)'], capture_output=True, text=True, check=True)\n\n----------------------------------------------------------------------\nRan 5 tests in 0.010s\n\nFAILED (failures=5)"}}
{"result": "```python\nimport sys\nimport json\nfrom datetime import datetime\n# Constants\nPATH_TO_APPEND = '/path/to/whatever'\nJSON_FILE = '/path/to/json_file.json'\ndef task_func(path_to_append=PATH_TO_APPEND, json_file=JSON_FILE):\n    if path_to_append not in sys.path:\n        sys.path.append(path_to_append)\n    try:\n        with open(json_file, 'r', encoding='utf-8') as f:\n            json_data = json.load(f)\n    except (FileNotFoundError, json.JSONDecodeError):\n        json_data = {}\n    json_data['last_updated'] = datetime.now().isoformat()\n    with open(json_file, 'w', encoding='utf-8') as f:\n        json.dump(json_data, f, indent=4)\n    return json_data\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_default_json (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 50, in test_default_json\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/_strptime.py\", line 568, in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/_strptime.py\", line 349, in _strptime\n    raise ValueError(\"time data %r does not match format %r\" %\nValueError: time data '2025-05-24T22:25:25.189277' does not match format '%Y-%m-%d %H:%M:%S.%f'\n\n======================================================================\nERROR: test_json_update_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 36, in test_json_update_1\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/_strptime.py\", line 568, in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/_strptime.py\", line 349, in _strptime\n    raise ValueError(\"time data %r does not match format %r\" %\nValueError: time data '2025-05-24T22:25:25.192495' does not match format '%Y-%m-%d %H:%M:%S.%f'\n\n======================================================================\nERROR: test_json_update_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 41, in test_json_update_2\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/_strptime.py\", line 568, in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/_strptime.py\", line 349, in _strptime\n    raise ValueError(\"time data %r does not match format %r\" %\nValueError: time data '2025-05-24T22:25:25.193057' does not match format '%Y-%m-%d %H:%M:%S.%f'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.007s\n\nFAILED (errors=3)"}}
{"result": "```python\nimport sys\nfrom configparser import ConfigParser\n\n# Constants\nPATH_TO_APPEND = '/path/to/whatever'\nCONFIG_FILE = '/path/to/config.ini'\n\ndef task_func(path_to_append=PATH_TO_APPEND, config_file=CONFIG_FILE):\n    # Append path_to_append to sys.path if not already present\n    if path_to_append not in sys.path:\n        sys.path.append(path_to_append)\n\n    # Create ConfigParser object and read config file\n    config = ConfigParser()\n    config.read(config_file)\n\n    # Ensure 'paths' section exists\n    if not config.has_section('paths'):\n        config.add_section('paths')\n\n    # Read existing paths, add the new path if not present, and update config\n    existing_paths = config.get('paths', 'sys_path', fallback='')\n    paths_list = [p.strip() for p in existing_paths.split(',') if p.strip()]\n    if path_to_append not in paths_list:\n        paths_list.append(path_to_append)\n        config.set('paths', 'sys_path', ','.join(paths_list))\n\n        # Write back to the config file\n        with open(config_file, 'w') as f:\n            config.write(f)\n\n    return config, config_file\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_append_path_and_update_config (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_append_path_and_update_config\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/configparser.py\", line 1259, in __getitem__\n    raise KeyError(key)\nKeyError: 'path_to_append'\n\n======================================================================\nERROR: test_default_path_and_config (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_default_path_and_config\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/configparser.py\", line 1259, in __getitem__\n    raise KeyError(key)\nKeyError: 'path_to_append'\n\n======================================================================\nERROR: test_multiple_paths (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 47, in test_multiple_paths\n  File \"<bigcode>\", line 27, in task_func\nTypeError: sequence item 0: expected str instance, list found\n\n----------------------------------------------------------------------\nRan 5 tests in 0.005s\n\nFAILED (errors=3)"}}
{"result": "```python\nimport re\nimport numpy as np\nfrom scipy.stats import ttest_rel\ndef task_func(text1, text2):\n    words1 = re.findall(r'\\b\\w+\\b', text1)\n    words2 = re.findall(r'\\b\\w+\\b', text2)\n    if len(words1) != len(words2):\n        return float('nan'), float('nan')\n    arr1 = np.array([len(w) for w in words1])\n    arr2 = np.array([len(w) for w in words2])\n    t_statistic, p_value = ttest_rel(arr1, arr2)\n    return t_statistic, p_value\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport os\nimport glob\ndef task_func(directory, word):\n    count = 0\n    pattern = re.compile(re.escape(word))\n    for filepath in glob.glob(os.path.join(directory, '*')):\n        if os.path.isfile(filepath):\n            try:\n                with open(filepath, 'r', encoding='utf-8') as f:\n                    content = f.read()\n                    if pattern.search(content):\n                        count += 1\n            except (UnicodeDecodeError, OSError):\n                pass\n    return count\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 15, in test_1\nAssertionError: 0 != 1\n\n======================================================================\nFAIL: test_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 18, in test_2\nAssertionError: 0 != 1\n\n======================================================================\nFAIL: test_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_3\nAssertionError: 0 != 1\n\n======================================================================\nFAIL: test_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_4\nAssertionError: 0 != 1\n\n======================================================================\nFAIL: test_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_5\nAssertionError: 0 != 1\n\n----------------------------------------------------------------------\nRan 5 tests in 0.338s\n\nFAILED (failures=5)"}}
{"result": "```python\nimport os\nimport csv\nimport random\nfrom datetime import datetime\ndef task_func():\n    folder = \"task_func_data\"\n    if not os.path.exists(folder):\n        os.makedirs(folder)\n    file_path = os.path.join(folder, \"Output.txt\")\n\n    # Generate random sensor data\n    temperature = round(random.uniform(-20.0, 50.0), 2)  # temperature in Celsius\n    humidity = round(random.uniform(0, 100), 2)          # humidity in percentage\n    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\n    # Write data in append mode\n    file_exists = os.path.exists(file_path)\n    with open(file_path, 'a', newline='') as file:\n        writer = csv.writer(file)\n        if not file_exists:\n            writer.writerow(['Timestamp', 'Temperature', 'Humidity'])\n        writer.writerow([timestamp, temperature, humidity])\n\n    # Return the file path before deletion\n    path_to_return = file_path\n\n    # Delete the file after use\n    os.remove(file_path)\n\n    return path_to_return\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_data_appending (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 39, in test_data_appending\nFileNotFoundError: [Errno 2] No such file or directory: 'task_func_data/Output.txt'\n\n======================================================================\nERROR: test_data_appending (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 16, in tearDown\nFileNotFoundError: [Errno 2] No such file or directory: 'task_func_data/Output.txt'\n\n======================================================================\nERROR: test_file_content (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_file_content\nFileNotFoundError: [Errno 2] No such file or directory: 'task_func_data/Output.txt'\n\n======================================================================\nERROR: test_file_content (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 16, in tearDown\nFileNotFoundError: [Errno 2] No such file or directory: 'task_func_data/Output.txt'\n\n======================================================================\nERROR: test_file_existence (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 16, in tearDown\nFileNotFoundError: [Errno 2] No such file or directory: 'task_func_data/Output.txt'\n\n======================================================================\nERROR: test_headers_only_once (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 47, in test_headers_only_once\nFileNotFoundError: [Errno 2] No such file or directory: 'task_func_data/Output.txt'\n\n======================================================================\nERROR: test_headers_only_once (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 16, in tearDown\nFileNotFoundError: [Errno 2] No such file or directory: 'task_func_data/Output.txt'\n\n======================================================================\nERROR: test_return_value (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 16, in tearDown\nFileNotFoundError: [Errno 2] No such file or directory: 'task_func_data/Output.txt'\n\n======================================================================\nFAIL: test_file_existence (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_file_existence\nAssertionError: False is not true\n\n----------------------------------------------------------------------\nRan 5 tests in 0.002s\n\nFAILED (failures=1, errors=8)"}}
{"result": "```python\nimport os\nimport csv\nfrom collections import Counter\ndef task_func(file_path):\n    if not os.path.isfile(file_path):\n        return None\n    word_counter = Counter()\n    try:\n        with open(file_path, newline='', encoding='utf-8') as csvfile:\n            reader = csv.reader(csvfile)\n            for row in reader:\n                for item in row:\n                    words = item.split()\n                    word_counter.update(words)\n        if not word_counter:\n            return None\n        most_common_word, freq = word_counter.most_common(1)[0]\n        return (most_common_word, freq)\n    except Exception:\n        return None\n```", "match": {"category": "success"}}
{"result": "```python\nimport urllib.request\nimport os\nimport re\n\n# Constants\nTARGET_FILE = 'downloaded_file.txt'\nSEARCH_PATTERN = r'\\bERROR\\b'\n\ndef task_func(url):\n    urllib.request.urlretrieve(url, TARGET_FILE)\n    with open(TARGET_FILE, 'r', encoding='utf-8', errors='ignore') as f:\n        content = f.read()\n    occurrences = len(re.findall(SEARCH_PATTERN, content))\n    return occurrences\n```", "match": {"category": "success"}}
{"result": "```python\nimport urllib.request\nfrom bs4 import BeautifulSoup\nimport csv\nimport os\n# Constants\nCSV_FILE_PATH = 'scraped_data.csv'\ndef task_func(url):\n    # Fetch the HTML content from the URL\n    response = urllib.request.urlopen(url)\n    html = response.read()\n    soup = BeautifulSoup(html, 'html.parser')\n\n    # Find all tables on the page, if any, and use the first one for scraping data\n    table = soup.find('table')\n    if not table:\n        # If no table found, return empty CSV path\n        with open(CSV_FILE_PATH, 'w', newline='', encoding='utf-8') as csvfile:\n            pass\n        return CSV_FILE_PATH\n\n    # Extract headers\n    headers = []\n    header_row = table.find('tr')\n    if header_row:\n        header_cells = header_row.find_all(['th','td'])\n        headers = [cell.get_text(strip=True) for cell in header_cells]\n\n    # Extract all data rows\n    rows = []\n    for row in table.find_all('tr')[1:]:\n        cells = row.find_all(['td', 'th'])\n        if cells:\n            row_data = [cell.get_text(strip=True) for cell in cells]\n            rows.append(row_data)\n\n    # Write to CSV\n    with open(CSV_FILE_PATH, 'w', newline='', encoding='utf-8') as csvfile:\n        writer = csv.writer(csvfile)\n        if headers:\n            writer.writerow(headers)\n        writer.writerows(rows)\n\n    return CSV_FILE_PATH\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_no_table (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 38, in test_no_table\nAssertionError: Exception not raised\n\n======================================================================\nFAIL: test_overwrite_existing_csv (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 53, in test_overwrite_existing_csv\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 941, in assert_called_once_with\n    return self.assert_called_with(*args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 929, in assert_called_with\n    raise AssertionError(_error_message()) from cause\nAssertionError: expected call not found.\nExpected: open('scraped_data.csv', 'w')\nActual: open('scraped_data.csv', 'w', newline='', encoding='utf-8')\n\n----------------------------------------------------------------------\nRan 5 tests in 0.025s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport os\nimport json\ndef task_func(config_path: str) -> dict:\n    if not os.path.isfile(config_path):\n        raise FileNotFoundError(f\"The file {config_path} does not exist.\")\n    with open(config_path, \"r\", encoding=\"utf-8\") as f:\n        config = json.load(f)\n    return config\n```", "match": {"category": "success"}}
{"result": "```python\nimport codecs\nimport os\nimport glob\n# Constants\nDIRECTORY_PATH = './files/'\ndef task_func(directory=DIRECTORY_PATH, from_encoding='cp1251', to_encoding='utf8'):\n    pattern = os.path.join(directory, '*.txt')\n    for filepath in glob.glob(pattern):\n        with codecs.open(filepath, 'r', from_encoding) as f:\n            content = f.read()\n        with codecs.open(filepath, 'w', to_encoding) as f:\n            f.write(content)\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport random\nfrom nltk.corpus import words\nfrom random import sample\n# Ensure the words corpus is downloaded\nimport nltk\nnltk.download('words')\n# Constants\nSAMPLE_ENGLISH_WORDS = set(words.words())  # Correct initialization\ndef task_func(s, n):\n    # Extract words ignoring case\n    found_words = set()\n    for word in re.findall(r'\\b[a-zA-Z]+\\b', s):\n        low_word = word.lower()\n        if low_word in SAMPLE_ENGLISH_WORDS:\n            found_words.add(low_word)\n    # Return up to n different words\n    return list(sample(found_words, min(n, len(found_words)))) if found_words else []\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_duplicate_words (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 30, in test_duplicate_words\nAssertionError: 2 != 4\n\n----------------------------------------------------------------------\nRan 5 tests in 0.001s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport re\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport numpy as np\n# Constants\nSENTENCES = ['This is a sentence', 'Another sentence here', 'More sentences']\ndef task_func(s: str) -> np.ndarray:\n    corpus = SENTENCES + [s]\n    vectorizer = CountVectorizer()\n    X = vectorizer.fit_transform(corpus)\n    return X.toarray()[-1]\n```", "match": {"category": "success"}}
{"result": "```python\nimport csv\nimport io\ndef task_func(filename='sample.csv', from_encoding='cp1251', to_encoding='utf8', delimiter=','):\n    # Read the original CSV file with the given source encoding\n    with open(filename, 'r', encoding=from_encoding, newline='') as f:\n        reader = csv.DictReader(f, delimiter=delimiter)\n        rows = list(reader)\n        fieldnames = reader.fieldnames\n\n    # Write the CSV data to a string buffer with the target encoding\n    output_io = io.StringIO()\n    writer = csv.DictWriter(output_io, fieldnames=fieldnames, delimiter=delimiter)\n    writer.writeheader()\n    writer.writerows(rows)\n\n    csv_data_utf8 = output_io.getvalue()\n    output_io.close()\n\n    return rows, csv_data_utf8\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 15, in test_case_1\n  File \"<bigcode>\", line 6, in task_func\nFileNotFoundError: [Errno 2] No such file or directory: 'sample_1.csv'\n\n======================================================================\nERROR: test_csv_with_only_headers (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 53, in test_csv_with_only_headers\n  File \"<bigcode>\", line 6, in task_func\nFileNotFoundError: [Errno 2] No such file or directory: 'headers_only.csv'\n\n======================================================================\nERROR: test_different_encoding (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 32, in test_different_encoding\n  File \"<bigcode>\", line 6, in task_func\nFileNotFoundError: [Errno 2] No such file or directory: 'sample_1.csv'\n\n======================================================================\nERROR: test_empty_file (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 39, in test_empty_file\n  File \"<bigcode>\", line 6, in task_func\nFileNotFoundError: [Errno 2] No such file or directory: 'empty.csv'\n\n======================================================================\nFAIL: test_invalid_csv_format (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 50, in test_invalid_csv_format\nAssertionError: False is not true\n\n----------------------------------------------------------------------\nRan 5 tests in 0.023s\n\nFAILED (failures=1, errors=4)"}}
{"result": "```python\nimport pickle\nimport os\nimport random\nimport string\ndef task_func(strings, filename=None):\n    if filename is None:\n        random_suffix = ''.join(random.choices(string.ascii_letters + string.digits, k=8))\n        filename = f\"strings_{random_suffix}.pkl\"\n    with open(filename, 'wb') as f:\n        pickle.dump(strings, f)\n    with open(filename, 'rb') as f:\n        loaded_strings = pickle.load(f)\n    return loaded_strings\n```", "match": {"category": "success"}}
{"result": "```python\nimport pickle\nimport os\n# Constants\nFILE_NAME = 'save.pkl'\ndef task_func(dt):\n    with open(FILE_NAME, 'wb') as f:\n        pickle.dump(dt, f)\n    with open(FILE_NAME, 'rb') as f:\n        loaded_dt = pickle.load(f)\n    return loaded_dt\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_file_cleanup (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_file_cleanup\nAssertionError: True is not false : The pickle file should be cleaned up after loading\n\n----------------------------------------------------------------------\nRan 5 tests in 0.013s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pickle\nimport os\nfrom sklearn.datasets import make_classification\n# Constants\nFILE_NAME = 'save.pkl'\nDATA, TARGET = make_classification(n_samples=100, n_features=20, n_informative=2, n_redundant=10, n_classes=2, random_state=1)\ndef task_func(data, target):\n    # Save to pickle\n    with open(FILE_NAME, 'wb') as f:\n        pickle.dump((data, target), f)\n\n    # Load back from pickle\n    with open(FILE_NAME, 'rb') as f:\n        loaded = pickle.load(f)\n\n    return loaded\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport string\nfrom nltk.stem import PorterStemmer\nfrom collections import Counter\nSTEMMER = PorterStemmer()\ndef task_func(content):\n    # Tokenize the sentence into words using regex to handle punctuation\n    words = re.findall(r'\\b\\w+\\b', content)\n    if not words:\n        return {}\n    # Stem every word except the last\n    stems = [STEMMER.stem(word) for word in words[:-1]]\n    # Count frequency of each stem\n    freq = Counter(stems)\n    return dict(freq)\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport string\ndef task_func(content):\n    stop_words = {\n        'i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\", \"you've\",\n        \"you'll\", \"you'd\", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his',\n        'himself', 'she', \"she's\", 'her', 'hers', 'herself', 'it', \"it's\", 'its', 'itself',\n        'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom',\n        'this', 'that', \"that'll\", 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be',\n        'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a',\n        'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at',\n        'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during',\n        'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on',\n        'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when',\n        'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other',\n        'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too',\n        'very', 's', 't', 'can', 'will', 'just', 'don', \"don't\", 'should', \"should've\",\n        'now', 'd', 'll', 'm', 'o', 're', 've', 'y', 'ain', 'aren', \"aren't\", 'couldn',\n        \"couldn't\", 'didn', \"didn't\", 'doesn', \"doesn't\", 'hadn', \"hadn't\", 'hasn',\n        \"hasn't\", 'haven', \"haven't\", 'isn', \"isn't\", 'ma', 'mightn', \"mightn't\", 'mustn',\n        \"mustn't\", 'needn', \"needn't\", 'shan', \"shan't\", 'shouldn', \"shouldn't\", 'wasn',\n        \"wasn't\", 'weren', \"weren't\", 'won', \"won't\", 'wouldn', \"wouldn't\"\n    }\n    # Remove punctuation except apostrophes for contractions\n    content = re.sub(r'[{}]+'.format(re.escape(string.punctuation.replace(\"'\", \"\"))), '', content)\n    words = content.split()\n    # Remove last word\n    words = words[:-1]\n    count = 0\n    for w in words:\n        w_lower = w.lower()\n        if w_lower not in stop_words:\n            count += 1\n    return count\n```", "match": {"category": "success"}}
{"result": "```python\nimport nltk\n# Download necessary NLTK data (if not already present)\nnltk.download('punkt')\nnltk.download('averaged_perceptron_tagger')\nfrom collections import Counter\ndef task_func(content):\n    tokens = nltk.word_tokenize(content)\n    if len(tokens) > 1:\n        tokens = tokens[:-1]\n    else:\n        tokens = []\n    pos_tags = nltk.pos_tag(tokens)\n    counts = Counter(tag for word, tag in pos_tags)\n    return dict(counts)\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nfrom itertools import chain\ndef task_func(L):\n    flat = list(chain.from_iterable(L))\n    mean = np.mean(flat)\n    var = np.var(flat)\n    return {'mean': mean, 'variance': var}\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nfrom scipy import stats\ndef task_func(L):\n    flat_list = [item for sublist in L for item in sublist]\n    mode_result = stats.mode(flat_list, keepdims=False)\n    return int(mode_result.mode)\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 5, in test_1\n  File \"<bigcode>\", line 6, in task_func\nTypeError: mode() got an unexpected keyword argument 'keepdims'\n\n======================================================================\nERROR: test_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 10, in test_2\n  File \"<bigcode>\", line 6, in task_func\nTypeError: mode() got an unexpected keyword argument 'keepdims'\n\n======================================================================\nERROR: test_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 15, in test_3\n  File \"<bigcode>\", line 6, in task_func\nTypeError: mode() got an unexpected keyword argument 'keepdims'\n\n======================================================================\nERROR: test_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_4\n  File \"<bigcode>\", line 6, in task_func\nTypeError: mode() got an unexpected keyword argument 'keepdims'\n\n======================================================================\nERROR: test_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_5\n  File \"<bigcode>\", line 6, in task_func\nTypeError: mode() got an unexpected keyword argument 'keepdims'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.002s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport numpy as np\nimport math\ndef task_func(L):\n    flat_list = []\n    def flatten(lst):\n        for item in lst:\n            if isinstance(item, list):\n                flatten(item)\n            else:\n                flat_list.append(item)\n    flatten(L)\n    median = float(np.median(flat_list))\n    return median\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_median_empty_list (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_median_empty_list\nAssertionError: ValueError not raised\n\n----------------------------------------------------------------------\nRan 5 tests in 0.004s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport numpy as np\nfrom scipy.stats import iqr\ndef task_func(L):\n    flat_list = np.array([item for sublist in L for item in sublist])\n    iqr_value = iqr(flat_list)\n    return iqr_value\n```", "match": {"category": "success"}}
{"result": "```python\nimport struct\nimport random\n# Constants\nKEYS = ['470FC614', '4A0FC614', '4B9FC614', '4C8FC614', '4D7FC614']\ndef task_func(hex_key=None):\n    if hex_key is None:\n        hex_key = random.choice(KEYS)\n    # Convert hex string to bytes\n    b = bytes.fromhex(hex_key)\n    # Unpack to float using big-endian format\n    float_num = struct.unpack('>f', b)[0]\n    # Round to 2 decimal places\n    rounded_float = round(float_num, 2)\n    return rounded_float\n```", "match": {"category": "success"}}
{"result": "```python\nfrom collections import Counter\nimport heapq\n# Constants\nLETTERS = list('abcdefghijklmnopqrstuvwxyz')\ndef task_func(my_dict):\n    counter = Counter(my_dict)\n    most_common = heapq.nlargest(3, counter.items(), key=lambda x: x[1])\n    most_common_letters = [item[0] for item in most_common]\n    return most_common_letters\n```", "match": {"category": "success"}}
{"result": "```python\nfrom itertools import groupby\nfrom operator import itemgetter\n# Constants\nKEY_FUNC = itemgetter(0)\ndef task_func(my_dict):\n    aggregated_dict = {}\n    for key, group in groupby(sorted(my_dict.items(), key=lambda x: x[0][0]), key=lambda x: x[0][0]):\n        aggregated_dict[key] = sum(value for _, value in group)\n    return aggregated_dict\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(list_of_pairs):\n    if not list_of_pairs:\n        raise Exception(\"If the input array is empty.\")\n    \n    categories = []\n    values = []\n    for pair in list_of_pairs:\n        if len(pair) != 2:\n            raise ValueError(\"Each element must be a pair (tuple of length 2).\")\n        cat, val = pair\n        categories.append(cat)\n        values.append(val)\n        \n    # Check if all values are numeric\n    if not all(isinstance(v, (int, float)) for v in values):\n        raise ValueError(\"Values are not numeric.\")\n    \n    df = pd.DataFrame({'Category': categories, 'Value': values})\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport json\nimport os\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\ndef task_func(directory):\n    counts = {prefix: 0 for prefix in PREFIXES}\n    \n    def count_keys(obj):\n        if isinstance(obj, dict):\n            for key, value in obj.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        counts[prefix] += 1\n                count_keys(value)\n        elif isinstance(obj, list):\n            for item in obj:\n                count_keys(item)\n    \n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            filepath = os.path.join(directory, filename)\n            try:\n                with open(filepath, 'r', encoding='utf-8') as f:\n                    data = json.load(f)\n                count_keys(data)\n            except Exception:\n                # Ignore files that cannot be read or parsed\n                pass\n    \n    return counts\n```", "match": {"category": "success"}}
{"result": "```python\nimport nltk\nfrom string import punctuation\nimport pandas as pd\n\ndef task_func(text):\n    if not isinstance(text, str):\n        raise ValueError(\"Input must be a string\")\n    words = text.split()\n    filtered_words = []\n    for w in words:\n        if w.startswith('$'):\n            # Remove the '$' and check if rest is punctuation only\n            rest = w[1:]\n            if rest and any(c not in punctuation for c in rest):\n                filtered_words.append(w)\n    freq = pd.Series(filtered_words).value_counts().reset_index()\n    freq.columns = ['Word', 'Frequency']\n    return freq\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_case_1\nAssertionError: Lists differ: ['$abc', '$hij', '$efg'] != ['$abc', '$efg', '$hij']\n\nFirst differing element 1:\n'$hij'\n'$efg'\n\n- ['$abc', '$hij', '$efg']\n+ ['$abc', '$efg', '$hij']\n\n----------------------------------------------------------------------\nRan 9 tests in 0.010s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport subprocess\nimport random\n# Constants\nSCRIPTS = ['script1.sh', 'script2.sh', 'script3.sh']\nSCRIPTS_DIR = '/path/to/scripts'  \ndef task_func():\n    script = random.choice(SCRIPTS)\n    script_path = f\"{SCRIPTS_DIR}/{script}\"\n    subprocess.run(['bash', script_path], check=True)\n    return {'script': script_path}\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_environment_variables (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 32, in test_environment_variables\n  File \"<bigcode>\", line 10, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/subprocess.py\", line 526, in run\n    raise CalledProcessError(retcode, process.args,\nsubprocess.CalledProcessError: Command '['bash', '/path/to/scripts/script2.sh']' returned non-zero exit status 127.\n\n======================================================================\nERROR: test_full_path_execution (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_full_path_execution\n  File \"<bigcode>\", line 10, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/subprocess.py\", line 526, in run\n    raise CalledProcessError(retcode, process.args,\nsubprocess.CalledProcessError: Command '['bash', '/path/to/scripts/script1.sh']' returned non-zero exit status 127.\n\n======================================================================\nERROR: test_random_script_selection (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_random_script_selection\n  File \"<string>\", line 21, in <setcomp>\n  File \"<bigcode>\", line 10, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/subprocess.py\", line 526, in run\n    raise CalledProcessError(retcode, process.args,\nsubprocess.CalledProcessError: Command '['bash', '/path/to/scripts/script3.sh']' returned non-zero exit status 127.\n\n======================================================================\nERROR: test_script_execution (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 15, in test_script_execution\n  File \"<bigcode>\", line 10, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/subprocess.py\", line 526, in run\n    raise CalledProcessError(retcode, process.args,\nsubprocess.CalledProcessError: Command '['bash', '/path/to/scripts/script2.sh']' returned non-zero exit status 127.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.023s\n\nFAILED (errors=4)"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target_column, target_values=None):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df must be a pandas DataFrame\")\n    if not isinstance(target_column, str):\n        raise ValueError(\"target_column must be a string\")\n    if target_values is None or not hasattr(target_values, \"__iter__\") or isinstance(target_values, str):\n        raise ValueError(\"target_values must be an array-like object\")\n\n    # Replace elements not in target_values with 0 for columns except target_column\n    target_values_set = set(target_values)\n    for col in df.columns:\n        if col == target_column:\n            continue\n        df[col] = df[col].where(df[col].isin(target_values_set), other=0)\n\n    X = df.drop(columns=[target_column])\n    y = df[target_column]\n\n    model = LinearRegression()\n    model.fit(X, y)\n    return model\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\nprediction for one column\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 48, in test_case_1\n  File \"<bigcode>\", line 12, in task_func\nValueError: target_values must be an array-like object\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\nmultiple column prediction\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 62, in test_case_2\n  File \"<bigcode>\", line 12, in task_func\nValueError: target_values must be an array-like object\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\ndf with constant values\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 90, in test_case_4\n  File \"<bigcode>\", line 12, in task_func\nValueError: target_values must be an array-like object\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\ndf filled with random floats\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 98, in test_case_5\n  File \"<bigcode>\", line 12, in task_func\nValueError: target_values must be an array-like object\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\ntest working target value --> with target value linear regression can't deliver good results\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 84, in test_case_3\nAssertionError: 0.5542239979087153 != 0.2921456 within 2 places (0.26207839790871534 difference)\n\n----------------------------------------------------------------------\nRan 9 tests in 0.037s\n\nFAILED (failures=1, errors=4)"}}
{"result": "```python\nimport re\nimport math\ndef task_func(s):\n    nums = re.findall(r'[-+]?\\d*\\.?\\d+(?:[eE][-+]?\\d+)?', s)\n    count = 0\n    sqrt_sum = 0.0\n    for num_str in nums:\n        try:\n            num = float(num_str)\n            if num >= 0:\n                count += 1\n                sqrt_sum += math.sqrt(num)\n        except:\n            continue\n    return count, sqrt_sum\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df, age, weight):\n    if not {'Age', 'Weight'}.issubset(df.columns):\n        raise KeyError(\"Input DataFrame must contain 'Age' and 'Weight' columns.\")\n    filtered_df = df[(df['Age'] < age) & (df['Weight'] > weight)]\n    if filtered_df.empty:\n        return pd.DataFrame()\n    scaler = StandardScaler()\n    scaled_array = scaler.fit_transform(filtered_df.values)\n    return pd.DataFrame(scaled_array, columns=filtered_df.columns, index=filtered_df.index)\n```", "match": {"category": "success"}}
{"result": "```python\nfrom sklearn.preprocessing import MinMaxScaler\nimport numpy as np\ndef task_func(myList):\n    arr = np.array(myList).reshape(-1, 1)\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    normalized = scaler.fit_transform(arr)\n    return normalized.flatten()\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport statsmodels.api as sm\ndef task_func(df: pd.DataFrame, height: int, weight: int, columns: list) -> sm.regression.linear_model.RegressionResultsWrapper:\n    if df.empty:\n        return None\n    dependent_col = columns[0]\n    cond = (df[columns[1]] > height) & (df[columns[2]] < weight)\n    subset = df.loc[cond, columns]\n    if subset.empty:\n        return None\n    y = subset[dependent_col]\n    X = subset.drop(columns=[dependent_col])\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    return model\n```", "match": {"category": "success"}}
{"result": "```python\nimport random\nfrom collections import Counter\ndef task_func(values, weights, n_samples):\n    samples = random.choices(values, weights=weights, k=n_samples)\n    histogram = dict(Counter(samples))\n    return histogram\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndef task_func(data, target_column, test_size=0.2, random_state = 0) -> float:\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"If data is not a DataFrame.\")\n    if data.empty:\n        raise ValueError(\"If data is empty.\")\n    if target_column not in data.columns:\n        raise ValueError(\"If target_column ist not a column of data.\")\n    if not isinstance(random_state, int):\n        raise ValueError(\"If random_state is not an integer.\")\n    if not (0 < test_size < 1):\n        raise ValueError(\"If test_size is not between 0 and 1.\")\n    \n    X = data.drop(columns=[target_column])\n    y = data[target_column]\n    \n    if not np.all(np.isreal(X.values)) or not np.all(np.isreal(y.values)):\n        raise ValueError(\"If data contains values that are not numeric.\")\n    if not np.issubdtype(y.dtype, np.number):\n        raise ValueError(\"If data contains values that are not numeric.\")\n    if not all(np.issubdtype(dtype, np.number) for dtype in X.dtypes):\n        raise ValueError(\"If data contains values that are not numeric.\")\n    \n    X_train, X_test, y_train, y_test = train_test_split(\n        X, y, test_size=test_size, random_state=random_state)\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n    score = model.score(X_test, y_test)\n    return score\n```", "match": {"category": "success"}}
{"result": "```python\nimport math\nimport random\nimport statistics\n# Constants\nRADIUS = 5\ndef task_func(n):\n    distances = []\n    for _ in range(n):\n        r = RADIUS * math.sqrt(random.random())\n        theta = random.uniform(0, 2 * math.pi)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distances.append(math.sqrt(x*x + y*y))\n    return statistics.mean(distances)\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\n# Constants\nDATE_FORMAT = '%Y-%m-%d %H:%M:%S'\ndef task_func(result):\n    from_user_values = [item.get('from_user') for item in result if 'from_user' in item]\n\n    if not from_user_values:\n        stats = {\n            'mean': np.nan,\n            'median': np.nan,\n            'min': np.nan,\n            'max': np.nan,\n            'std': np.nan,\n            'current_time': datetime.now().strftime(DATE_FORMAT)\n        }\n        return pd.Series(stats)\n\n    # Check if all are numeric (int or float)\n    try:\n        arr = np.array(from_user_values, dtype=float)\n    except ValueError:\n        raise ValueError(\"from_user values are not numeric.\")\n\n    stats = {\n        'mean': np.mean(arr),\n        'median': np.median(arr),\n        'min': np.min(arr),\n        'max': np.max(arr),\n        'std': np.std(arr, ddof=0),\n        'current_time': datetime.now().strftime(DATE_FORMAT)\n    }\n    return pd.Series(stats)\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport glob\ndef task_func(directory_path):\n    new_filenames = []\n    for filepath in glob.glob(os.path.join(directory_path, '*')):\n        dirname, filename = os.path.split(filepath)\n        parts = filename.split('.')\n        reversed_filename = '.'.join(parts[::-1])\n        new_filepath = os.path.join(dirname, reversed_filename)\n        os.rename(filepath, new_filepath)\n        new_filenames.append(reversed_filename)\n    return new_filenames\n```", "match": {"category": "success"}}
{"result": "```python\nimport shutil\nfrom pathlib import Path\nfrom typing import List\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    src = Path(source_dir)\n    tgt = Path(target_dir)\n    if not src.is_dir() or not tgt.is_dir():\n        raise ValueError(\"source_dir or target_dir does not exist\")\n    moved_count = 0\n    extensions = {ext.lower() if ext.startswith('.') else '.' + ext.lower() for ext in extensions}\n    for file in src.iterdir():\n        if file.is_file() and file.suffix.lower() in extensions:\n            shutil.move(str(file), tgt)\n            moved_count += 1\n    return moved_count\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport datetime\ndef task_func(arr):\n    return np.vectorize(lambda s: \".\".join(s.split(\".\")[::-1]))(arr)\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(num_samples, countries=['Russia', 'China', 'USA', 'India', 'Brazil'], \n           ages=np.arange(18, 60), genders=['Male', 'Female'], rng_seed=None):\n    if not isinstance(num_samples, int):\n        raise ValueError(\"num_samples must be an integer.\")\n    rng = np.random.default_rng(rng_seed)\n    chosen_countries = rng.choice(countries, size=num_samples)\n    chosen_ages = rng.choice(ages, size=num_samples)\n    chosen_genders = rng.choice(genders, size=num_samples)\n    le = LabelEncoder()\n    encoded_genders = le.fit_transform(chosen_genders)\n    df = pd.DataFrame({\n        \"Country\": chosen_countries,\n        \"Age\": chosen_ages,\n        \"Gender\": encoded_genders\n    })\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport shutil\nimport fnmatch\ndef task_func(source_directory, destination_directory, file_pattern):\n    moved_files = []\n    if not os.path.exists(destination_directory):\n        os.makedirs(destination_directory)\n    for filename in os.listdir(source_directory):\n        if fnmatch.fnmatch(filename, file_pattern):\n            src_path = os.path.join(source_directory, filename)\n            dst_path = os.path.join(destination_directory, filename)\n            shutil.move(src_path, dst_path)\n            moved_files.append(filename)\n    return moved_files\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_sensitivity (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 32, in test_case_sensitivity\n  File \"<bigcode>\", line 8, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/os.py\", line 215, in makedirs\n    makedirs(head, exist_ok=exist_ok)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/os.py\", line 225, in makedirs\n    mkdir(name, mode)\nPermissionError: [Errno 13] Permission denied: '/fake'\n\n======================================================================\nERROR: test_no_files_to_move (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 15, in test_no_files_to_move\n  File \"<bigcode>\", line 8, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/os.py\", line 215, in makedirs\n    makedirs(head, exist_ok=exist_ok)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/os.py\", line 225, in makedirs\n    mkdir(name, mode)\nPermissionError: [Errno 13] Permission denied: '/fake'\n\n======================================================================\nERROR: test_non_existing_source_directory (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 23, in test_non_existing_source_directory\n  File \"<bigcode>\", line 8, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/os.py\", line 215, in makedirs\n    makedirs(head, exist_ok=exist_ok)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/os.py\", line 225, in makedirs\n    mkdir(name, mode)\nPermissionError: [Errno 13] Permission denied: '/fake'\n\n======================================================================\nERROR: test_special_characters_in_filenames (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 42, in test_special_characters_in_filenames\n  File \"<bigcode>\", line 8, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/os.py\", line 215, in makedirs\n    makedirs(head, exist_ok=exist_ok)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/os.py\", line 225, in makedirs\n    mkdir(name, mode)\nPermissionError: [Errno 13] Permission denied: '/fake'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.007s\n\nFAILED (errors=4)"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nimport codecs\nimport re\nimport datetime\ndef task_func(start_year=1980, end_year=2000, email_domain='example.com',\n           latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'],\n           other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], \n           rng_seed=None):\n    # Function to fix improperly encoded Latin characters in a string\n    def fix_encoding(s):\n        # Try utf-8 decode/encode cycle to fix mojibake, fallback to original\n        try:\n            b = s.encode('latin1')\n            fixed = b.decode('utf-8')\n            return fixed\n        except Exception:\n            return s\n\n    # Setup random generator\n    rng = np.random.default_rng(rng_seed)\n    n = 100\n    ids = np.arange(1, n+1)\n    # Combine names\n    all_names = latin_names + other_names\n    # Randomly select names for each record\n    names = rng.choice(all_names, size=n, replace=True)\n\n    # Fix any improperly encoded latin characters in names\n    names_fixed = [fix_encoding(name) for name in names]\n\n    # Generate random dates between start_year and end_year (inclusive)\n    # Considering dates between Jan 1 of start_year and Dec 31 of end_year\n    # Use datetime.datetime objects\n    base_date_start = datetime.datetime(start_year, 1, 1)\n    base_date_end = datetime.datetime(end_year, 12, 31)\n    days_between = (base_date_end - base_date_start).days\n    random_days = rng.integers(0, days_between+1, size=n)\n    dob_dates = [base_date_start + datetime.timedelta(days=int(d)) for d in random_days]\n\n    # For the email construction:\n    # email = lowercased name + year of birth (only number) + '@' + email_domain\n    # year of birth = dob_dates[i].year, but for years < 1000, we want 3 or 4 digit year? Use full year int as string.\n\n    emails = []\n    for name, dob in zip(names_fixed, dob_dates):\n        year_str = str(dob.year)\n        # email uses the name lowercased including accents (no ASCII conversion)\n        # but for safety remove spaces and special chars from name in email (like accents kept)\n        # The example shows accents kept in email as well.\n        clean_name = name.lower().replace(\" \", \"\")\n        email = f\"{clean_name}{year_str}@{email_domain}\"\n        emails.append(email)\n\n    # Build DataFrame\n    df = pd.DataFrame({\n        'ID': ids,\n        'Name': names_fixed,\n        'Date of Birth': dob_dates,\n        'Email': emails\n    })\n\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport json\nimport re\nfrom collections import Counter\n# Constants\nREPLACE_NONE = \"None\"\n\nemail_pattern = re.compile(r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\\b')\n\ndef task_func(json_str):\n    def clean_and_replace(value):\n        if isinstance(value, dict):\n            new_dict = {}\n            for k, v in value.items():\n                cleaned_val = clean_and_replace(v)\n                if cleaned_val is not None:\n                    new_dict[k] = cleaned_val\n            return new_dict\n        elif isinstance(value, list):\n            new_list = []\n            for item in value:\n                cleaned_item = clean_and_replace(item)\n                if cleaned_item is not None:\n                    new_list.append(cleaned_item)\n            return new_list\n        elif isinstance(value, str):\n            if email_pattern.fullmatch(value):\n                return REPLACE_NONE\n            else:\n                return value\n        elif value is None:\n            return None\n        else:\n            return value\n\n    def flatten_values(value):\n        # Return a list of all terminal values (non-container)\n        if isinstance(value, dict):\n            result = []\n            for v in value.values():\n                result.extend(flatten_values(v))\n            return result\n        elif isinstance(value, list):\n            result = []\n            for item in value:\n                result.extend(flatten_values(item))\n            return result\n        else:\n            return [value]\n\n    data_obj = json.loads(json_str)\n    processed_data = clean_and_replace(data_obj)\n\n    flattened_vals = flatten_values(processed_data)\n    value_counts = Counter(flattened_vals)\n\n    return {\"data\": processed_data, \"value_counts\": value_counts}\n```", "match": {"category": "success"}}
{"result": "```python\nimport codecs\nimport os\nimport zipfile\n\ndef task_func(directory_name=\"latin_files\",\n          content='Sopet\u00f3n',\n          file_names=['file1.txt', 'file2.txt', 'file3.txt'],\n          encoding=\"latin-1\"):\n    if not os.path.exists(directory_name):\n        os.makedirs(directory_name)\n    for fname in file_names:\n        filepath = os.path.join(directory_name, fname)\n        with codecs.open(filepath, \"w\", encoding=encoding) as f:\n            f.write(content)\n    zip_path = directory_name + \".zip\"\n    with zipfile.ZipFile(zip_path, \"w\", zipfile.ZIP_DEFLATED) as zf:\n        for fname in file_names:\n            filepath = os.path.join(directory_name, fname)\n            zf.write(filepath, arcname=fname)\n    return zip_path\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 51, in test_case_3\nFileNotFoundError: [Errno 2] No such file or directory: 'test_case_3/latin_files/file1.txt'\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 66, in test_case_4\nFileNotFoundError: [Errno 2] No such file or directory: 'test_case_4/all_custom/all1.txt'\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 33, in test_case_2\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 81, in test_case_5\nAssertionError: False is not true\n\n----------------------------------------------------------------------\nRan 5 tests in 0.008s\n\nFAILED (failures=2, errors=2)"}}
{"result": "```python\nimport numpy as np\nfrom collections import defaultdict\nimport json\nimport csv\n# Constants\ndef task_func(input_file, output_file):\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    if not data:\n        return {}\n\n    # Collect values by key\n    values_dict = defaultdict(list)\n    for entry in data:\n        for k, v in entry.items():\n            # Only consider numeric values\n            if isinstance(v, (int, float)):\n                values_dict[k].append(v)\n\n    stats = {}\n    for k, vals in values_dict.items():\n        arr = np.array(vals)\n        mean_val = np.mean(arr)\n        median_val = np.median(arr)\n        stats[k] = {\"mean\": mean_val, \"median\": median_val}\n\n    # Write to CSV\n    # Fields: key, mean, median\n    with open(output_file, 'w', newline='') as f:\n        writer = csv.writer(f)\n        writer.writerow(['field', 'mean', 'median'])\n        for k, stat in stats.items():\n            writer.writerow([k, stat['mean'], stat['median']])\n\n    return stats\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 56, in test_case_1\n  File \"<string>\", line 50, in validate_data\nKeyError: 'key'\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 59, in test_case_2\n  File \"<string>\", line 50, in validate_data\nKeyError: 'key'\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 62, in test_case_3\n  File \"<string>\", line 50, in validate_data\nKeyError: 'key'\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 65, in test_case_4\n  File \"<string>\", line 50, in validate_data\nKeyError: 'key'\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 68, in test_case_5\n  File \"<string>\", line 50, in validate_data\nKeyError: 'key'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.007s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport csv\nimport random\ndef task_func(csv_file='names.csv', \n          latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'],\n          names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'],\n          encoding='latin-1', rng_seed=None):\n    if not isinstance(csv_file, str):\n        raise TypeError(\"csv_file must be a string\")\n    if not isinstance(latin_names, (list, tuple)):\n        raise TypeError(\"latin_names must be an array\")\n    if not isinstance(names, (list, tuple)):\n        raise TypeError(\"names must be an array\")\n\n    header = ['Name', 'Age']\n    total_lines = 100\n    \n    if rng_seed is not None:\n        random.seed(rng_seed)\n\n    half = total_lines // 2\n\n    # If either latin_names or names list is empty, generate csv with header only\n    if len(latin_names) == 0 or len(names) == 0:\n        with open(csv_file, 'w', newline='', encoding=encoding) as f:\n            writer = csv.writer(f)\n            writer.writerow(header)\n        return csv_file\n\n    lines = []\n    # half Latin names, half English names\n    for _ in range(half):\n        name = random.choice(latin_names)\n        age = random.randint(20, 50)\n        lines.append([name, str(age)])\n    for _ in range(half):\n        name = random.choice(names)\n        age = random.randint(20, 50)\n        lines.append([name, str(age)])\n\n    random.shuffle(lines)\n\n    with open(csv_file, 'w', newline='', encoding=encoding) as f:\n        writer = csv.writer(f)\n        writer.writerow(header)\n        writer.writerows(lines)\n\n    return csv_file\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nfrom pathlib import Path\nimport shutil\ndef task_func(kwargs, target_dir=\"non_none_files\"):\n    copied_files = []\n    target_path = Path(target_dir)\n    target_path.mkdir(parents=True, exist_ok=True)\n    for key, file_path in kwargs.items():\n        path = Path(file_path)\n        if path.is_file() and path.stat().st_size > 0:\n            dest = target_path / path.name\n            shutil.copy2(path, dest)\n            copied_files.append(str(dest.resolve()))\n    return copied_files\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_files_with_no_content (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 33, in test_files_with_no_content\n  File \"<bigcode>\", line 10, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/pathlib.py\", line 960, in __new__\n    self = cls._from_parts(args)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/pathlib.py\", line 594, in _from_parts\n    drv, root, parts = self._parse_args(args)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/pathlib.py\", line 578, in _parse_args\n    a = os.fspath(a)\nTypeError: expected str, bytes or os.PathLike object, not NoneType\n\n======================================================================\nERROR: test_mixed_case (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 49, in test_mixed_case\n  File \"<bigcode>\", line 10, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/pathlib.py\", line 960, in __new__\n    self = cls._from_parts(args)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/pathlib.py\", line 594, in _from_parts\n    drv, root, parts = self._parse_args(args)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/pathlib.py\", line 578, in _parse_args\n    a = os.fspath(a)\nTypeError: expected str, bytes or os.PathLike object, not NoneType\n\n======================================================================\nFAIL: test_files_with_content (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 22, in test_files_with_content\nAssertionError: 0 != 2\n\n----------------------------------------------------------------------\nRan 5 tests in 0.005s\n\nFAILED (failures=1, errors=2)"}}
{"result": "```python\nimport re\nimport collections\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    if not isinstance(string, str):\n        raise TypeError(\"Input 'string' must be of type str.\")\n    if not (isinstance(patterns, list) and all(isinstance(p, str) for p in patterns)):\n        raise TypeError(\"Input 'patterns' must be a list of str.\")\n    counts = {}\n    for pattern in patterns:\n        counts[pattern] = len(re.findall(re.escape(pattern), string))\n    return counts\n```", "match": {"category": "success"}}
{"result": "```python\nfrom collections import Counter\nimport random\nimport string\n# Constants\nLETTERS = string.ascii_letters\ndef task_func(list_of_lists):\n    replaced_list = [random.choice(LETTERS) if isinstance(item, list) else item for item in list_of_lists]\n    return dict(Counter(replaced_list))\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport os\nimport glob\ndef task_func(dir_path):\n    if not os.path.isdir(dir_path):\n        raise ValueError(\"Provided directory path does not exist.\")\n    pattern = re.compile(r'error', re.IGNORECASE)\n    result = {}\n    for root, _, files in os.walk(dir_path):\n        for file in files:\n            if file.lower().endswith('.txt'):\n                filepath = os.path.join(root, file)\n                with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:\n                    text = f.read()\n                    count = len(pattern.findall(text))\n                    rel_path = os.path.relpath(filepath, dir_path)\n                    if count > 0:\n                        result[rel_path] = count\n    return result\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_exact_word_matching (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 69, in test_exact_word_matching\nAssertionError: {'fil[14 chars]ubdir2/nested/file3.txt': 1, 'subdir/file2.txt[48 chars]': 1} != {'fil[14 chars]ubdir/file2.txt': 1, 'subdir2/nested/file3.txt[48 chars]': 3}\n  {'file1.txt': 3,\n-  'subdir/file2.txt': 3,\n?                      ^\n\n+  'subdir/file2.txt': 1,\n?                      ^\n\n   'subdir2/nested/file3.txt': 1,\n-  'subdir3/file4.txt': 1,\n?                       ^\n\n+  'subdir3/file4.txt': 0,\n?                       ^\n\n   'subdir3/file5.txt': 3}\n\n======================================================================\nFAIL: test_files_with_errors (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 43, in test_files_with_errors\nAssertionError: {'1.txt': 3, 'subfolder2/3.txt': 3} != {'1.txt': 3, 'subfolder1/2.txt': 0, 'subfolder2/3.txt': 3}\n- {'1.txt': 3, 'subfolder2/3.txt': 3}\n+ {'1.txt': 3, 'subfolder1/2.txt': 0, 'subfolder2/3.txt': 3}\n?             +++++++++++++++++++++++\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.007s\n\nFAILED (failures=2)"}}
{"result": "```python\nfrom collections import Counter\nimport itertools\nimport operator\ndef task_func(list_of_menuitems):\n    flattened = list(itertools.chain.from_iterable(\n        item if isinstance(item, list) else [item] for item in list_of_menuitems\n    ))\n    count = Counter(flattened)\n    most_common_item = max(count.items(), key=operator.itemgetter(1))[0]\n    return most_common_item\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(num_samples=500, noise_strength=1, random_seed=None, test_size=0.2):\n    if test_size * num_samples < 2:\n        raise ValueError(\"Test set size is smaller than 2.\")\n\n    rng = np.random.default_rng(random_seed)\n    X = rng.uniform(-10, 10, size=(num_samples, 1))\n    true_slope = 3.5\n    true_intercept = -1.2\n    noise = rng.normal(0, noise_strength, size=num_samples)\n    y = true_slope * X.squeeze() + true_intercept + noise\n\n    X_train, X_test, y_train, y_test = train_test_split(\n        X, y, test_size=test_size, random_state=random_seed\n    )\n\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n    r2_score = model.score(X_test, y_test)\n\n    return r2_score, model\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport os\nfrom pathlib import Path\nimport csv\ndef task_func(directory: str, pattern: str = r'^(.*?)-\\d+\\.csv$') -> list:\n    new_files = []\n    regex = re.compile(pattern)\n    dir_path = Path(directory)\n    if not dir_path.is_dir():\n        return new_files\n\n    for file_path in dir_path.iterdir():\n        if file_path.is_file() and file_path.suffix.lower() == '.csv':\n            match = regex.match(file_path.name)\n            if match:\n                base_name = match.group(1)\n                new_name = f\"{base_name}_new.csv\"\n                new_path = dir_path / new_name\n\n                # Copy content from original CSV to new CSV\n                with open(file_path, newline='', encoding='utf-8') as src_file:\n                    reader = csv.reader(src_file)\n                    rows = list(reader)\n\n                with open(new_path, 'w', newline='', encoding='utf-8') as dst_file:\n                    writer = csv.writer(dst_file)\n                    writer.writerows(rows)\n\n                new_files.append(new_path.name)\n    return new_files\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_exception_handling (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 50, in test_exception_handling\nAssertionError: OSError not raised\n\n======================================================================\nFAIL: test_file_creation_and_content (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 19, in test_file_creation_and_content\nAssertionError: Lists differ: [] != ['Shan.csv', 'Shannon.csv']\n\nSecond list contains 2 additional elements.\nFirst extra element 0:\n'Shan.csv'\n\n- []\n+ ['Shan.csv', 'Shannon.csv']\n\n======================================================================\nFAIL: test_mixed_file_types (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 43, in test_mixed_file_types\nAssertionError: Lists differ: [] != ['Shan.csv']\n\nSecond list contains 1 additional elements.\nFirst extra element 0:\n'Shan.csv'\n\n- []\n+ ['Shan.csv']\n\n----------------------------------------------------------------------\nRan 5 tests in 0.019s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import mean_squared_error\n\ndef task_func(num_samples=1000, k=5, d=2, random_seed=None):\n    if random_seed is not None:\n        np.random.seed(random_seed)\n    # Generate original data from standard normal distribution\n    X = np.random.randn(num_samples, d)\n    # Apply linear transformation: multiply by k and add d (as vector)\n    # For broadcasting, add d to all features\n    X_transformed = k * X + d\n    # Standardize the transformed data\n    scaler = StandardScaler()\n    X_std = scaler.fit_transform(X_transformed)\n    # Compute mean squared error between original transformed and standardized data\n    mse = mean_squared_error(X_transformed, X_std)\n    return mse\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\nlow mse + mse decreasing with num_samples\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 10, in test_case_1\n  File \"<bigcode>\", line 16, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/utils/_set_output.py\", line 157, in wrapped\n    data_to_wrap = f(self, X, *args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 916, in fit_transform\n    return self.fit(X, **fit_params).transform(X)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/preprocessing/_data.py\", line 839, in fit\n    return self.partial_fit(X, y, sample_weight)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 1152, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/preprocessing/_data.py\", line 875, in partial_fit\n    X = self._validate_data(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 605, in _validate_data\n    out = check_array(X, input_name=\"X\", **check_params)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 976, in check_array\n    raise ValueError(\nValueError: Found array with 0 feature(s) (shape=(1000000, 0)) while a minimum of 1 is required by StandardScaler.\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\nrandom input\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_case_3\n  File \"<bigcode>\", line 16, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/utils/_set_output.py\", line 157, in wrapped\n    data_to_wrap = f(self, X, *args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 916, in fit_transform\n    return self.fit(X, **fit_params).transform(X)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/preprocessing/_data.py\", line 839, in fit\n    return self.partial_fit(X, y, sample_weight)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 1152, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/preprocessing/_data.py\", line 875, in partial_fit\n    X = self._validate_data(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 605, in _validate_data\n    out = check_array(X, input_name=\"X\", **check_params)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 976, in check_array\n    raise ValueError(\nValueError: Found array with 0 feature(s) (shape=(10000, 0)) while a minimum of 1 is required by StandardScaler.\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\nfloats\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_case_5\n  File \"<bigcode>\", line 10, in task_func\n  File \"mtrand.pyx\", line 1243, in numpy.random.mtrand.RandomState.randn\n  File \"mtrand.pyx\", line 1400, in numpy.random.mtrand.RandomState.standard_normal\n  File \"_common.pyx\", line 598, in numpy.random._common.cont\nTypeError: 'float' object cannot be interpreted as an integer\n\n----------------------------------------------------------------------\nRan 5 tests in 0.009s\n\nFAILED (errors=3)"}}
{"result": "```python\nimport os\nimport re\nimport shutil\n# Constants\nSOURCE_DIR = '/source/dir'\nTARGET_DIR = '/target/dir'\nFILE_PATTERN = re.compile(r'^(.*)-[^-]+\\.json$')\ndef task_func():\n    if not os.path.exists(TARGET_DIR):\n        os.makedirs(TARGET_DIR)\n    for filename in os.listdir(SOURCE_DIR):\n        if filename.endswith('.json'):\n            match = FILE_PATTERN.match(filename)\n            if match:\n                new_name = match.group(1) + '.json'\n            else:\n                new_name = filename\n            src_path = os.path.join(SOURCE_DIR, filename)\n            dst_path = os.path.join(TARGET_DIR, new_name)\n            shutil.move(src_path, dst_path)\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_incorrect_file_patterns (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 28, in test_incorrect_file_patterns\n  File \"<bigcode>\", line 11, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/os.py\", line 215, in makedirs\n    makedirs(head, exist_ok=exist_ok)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/os.py\", line 225, in makedirs\n    mkdir(name, mode)\nPermissionError: [Errno 13] Permission denied: '/target'\n\n======================================================================\nERROR: test_move_json_files (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 13, in test_move_json_files\n  File \"<bigcode>\", line 11, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/os.py\", line 215, in makedirs\n    makedirs(head, exist_ok=exist_ok)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/os.py\", line 225, in makedirs\n    mkdir(name, mode)\nPermissionError: [Errno 13] Permission denied: '/target'\n\n======================================================================\nERROR: test_no_files_to_move (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 23, in test_no_files_to_move\n  File \"<bigcode>\", line 11, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/os.py\", line 215, in makedirs\n    makedirs(head, exist_ok=exist_ok)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/os.py\", line 225, in makedirs\n    mkdir(name, mode)\nPermissionError: [Errno 13] Permission denied: '/target'\n\n======================================================================\nERROR: test_renaaccuracy (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 34, in test_renaaccuracy\n  File \"<bigcode>\", line 11, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/os.py\", line 215, in makedirs\n    makedirs(head, exist_ok=exist_ok)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/os.py\", line 225, in makedirs\n    mkdir(name, mode)\nPermissionError: [Errno 13] Permission denied: '/target'\n\n======================================================================\nERROR: test_special_cases_handling (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 43, in test_special_cases_handling\n  File \"<bigcode>\", line 11, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/os.py\", line 215, in makedirs\n    makedirs(head, exist_ok=exist_ok)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/os.py\", line 225, in makedirs\n    mkdir(name, mode)\nPermissionError: [Errno 13] Permission denied: '/target'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.006s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport numpy as np\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestRegressor\n\ndef task_func(num_samples=100, n_estimators=100, random_seed=None, cv=5):\n    if num_samples / cv < 2:\n        raise ValueError(\"num_samples / cv must be >= 2\")\n    rng = np.random.default_rng(random_seed)\n    X = rng.normal(size=(num_samples, 5))\n    noise = rng.normal(size=num_samples)\n    y = X.sum(axis=1) + noise\n    model = RandomForestRegressor(n_estimators=n_estimators, random_state=random_seed)\n    scores = cross_val_score(model, X, y, cv=cv, scoring='r2')\n    mean_score = scores.mean()\n    model.fit(X, y)\n    return mean_score, model\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\ndefault params\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 11, in test_case_1\nAssertionError: 0.5066678229475665 != 0.47332912782858 within 7 places (0.03333869511898652 difference)\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_case_3\nAssertionError: 0.10474913414713988 != 0.2316988319594362 within 7 places (0.1269496978122963 difference)\n\n----------------------------------------------------------------------\nRan 5 tests in 1.988s\n\nFAILED (failures=2)"}}
{"result": "```python\nfrom string import ascii_lowercase\nimport re\nfrom collections import Counter\n# Constants\nLETTERS_PATTERN = re.compile(r'^(.*)-[^-]*$')\nLETTERS = ascii_lowercase\ndef task_func(string):\n    m = LETTERS_PATTERN.match(string)\n    if not m:\n        return {}\n    prefix = m.group(1)\n    freq = Counter(c for c in prefix if c in LETTERS)\n    return dict(freq)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 6, in test_case_1\nAssertionError: {'a':[37 chars]f': 1} != {'a':[37 chars]f': 1, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0,[115 chars]': 0}\n- {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1}\n+ {'a': 1,\n+  'b': 1,\n+  'c': 1,\n+  'd': 1,\n+  'e': 1,\n+  'f': 1,\n+  'g': 0,\n+  'h': 0,\n+  'i': 0,\n+  'j': 0,\n+  'k': 0,\n+  'l': 0,\n+  'm': 0,\n+  'n': 0,\n+  'o': 0,\n+  'p': 0,\n+  'q': 0,\n+  'r': 0,\n+  's': 0,\n+  't': 0,\n+  'u': 0,\n+  'v': 0,\n+  'w': 0,\n+  'x': 0,\n+  'y': 0,\n+  'z': 0}\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 10, in test_case_2\nAssertionError: {} != {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, '[161 chars]': 0}\n- {}\n+ {'a': 1,\n+  'b': 1,\n+  'c': 1,\n+  'd': 1,\n+  'e': 1,\n+  'f': 1,\n+  'g': 1,\n+  'h': 1,\n+  'i': 1,\n+  'j': 1,\n+  'k': 0,\n+  'l': 0,\n+  'm': 0,\n+  'n': 0,\n+  'o': 0,\n+  'p': 0,\n+  'q': 0,\n+  'r': 0,\n+  's': 0,\n+  't': 0,\n+  'u': 0,\n+  'v': 0,\n+  'w': 0,\n+  'x': 0,\n+  'y': 0,\n+  'z': 0}\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 14, in test_case_3\nAssertionError: {'a':[13 chars]c': 2} != {'a':[13 chars]c': 2, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0,[139 chars]': 0}\n- {'a': 2, 'b': 2, 'c': 2}\n+ {'a': 2,\n+  'b': 2,\n+  'c': 2,\n+  'd': 0,\n+  'e': 0,\n+  'f': 0,\n+  'g': 0,\n+  'h': 0,\n+  'i': 0,\n+  'j': 0,\n+  'k': 0,\n+  'l': 0,\n+  'm': 0,\n+  'n': 0,\n+  'o': 0,\n+  'p': 0,\n+  'q': 0,\n+  'r': 0,\n+  's': 0,\n+  't': 0,\n+  'u': 0,\n+  'v': 0,\n+  'w': 0,\n+  'x': 0,\n+  'y': 0,\n+  'z': 0}\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 18, in test_case_4\nAssertionError: {} != {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, '[161 chars]': 0}\n- {}\n+ {'a': 0,\n+  'b': 0,\n+  'c': 0,\n+  'd': 0,\n+  'e': 0,\n+  'f': 0,\n+  'g': 0,\n+  'h': 0,\n+  'i': 0,\n+  'j': 0,\n+  'k': 0,\n+  'l': 0,\n+  'm': 0,\n+  'n': 0,\n+  'o': 0,\n+  'p': 0,\n+  'q': 0,\n+  'r': 0,\n+  's': 0,\n+  't': 0,\n+  'u': 0,\n+  'v': 0,\n+  'w': 0,\n+  'x': 0,\n+  'y': 0,\n+  'z': 0}\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 22, in test_case_5\nAssertionError: {'x': 1, 'y': 1, 'z': 1} != {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f[160 chars]': 1}\n- {'x': 1, 'y': 1, 'z': 1}\n+ {'a': 0,\n+  'b': 0,\n+  'c': 0,\n+  'd': 0,\n+  'e': 0,\n+  'f': 0,\n+  'g': 0,\n+  'h': 0,\n+  'i': 0,\n+  'j': 0,\n+  'k': 0,\n+  'l': 0,\n+  'm': 0,\n+  'n': 0,\n+  'o': 0,\n+  'p': 0,\n+  'q': 0,\n+  'r': 0,\n+  's': 0,\n+  't': 0,\n+  'u': 0,\n+  'v': 0,\n+  'w': 0,\n+  'x': 1,\n+  'y': 1,\n+  'z': 1}\n\n----------------------------------------------------------------------\nRan 5 tests in 0.003s\n\nFAILED (failures=5)"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(file_path, output_path=None, sort_key='title', linear_regression=False, x_column=None, y_column=None):\n    try:\n        df = pd.read_csv(file_path)\n    except Exception as e:\n        raise Exception(f\"Error reading the CSV file: {e}\")\n\n    try:\n        df_sorted = df.sort_values(by=sort_key)\n    except Exception as e:\n        raise Exception(f\"Error sorting the data: {e}\")\n\n    if linear_regression:\n        if x_column not in df_sorted.columns or y_column not in df_sorted.columns:\n            raise ValueError(\"Specified columns for linear regression do not exist in the dataframe\")\n        try:\n            X = df_sorted[[x_column]]\n            y = df_sorted[y_column]\n            model = LinearRegression()\n            model.fit(X, y)\n        except Exception as e:\n            raise Exception(f\"Error fitting the linear regression model: {e}\")\n        return model\n    else:\n        if output_path:\n            try:\n                df_sorted.to_csv(output_path, index=False)\n            except Exception as e:\n                raise Exception(f\"Error writing the CSV file: {e}\")\n            return output_path\n        else:\n            return df_sorted\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport os\nimport zipfile\ndef task_func(directory, pattern=r'^(.*?)-\\d+\\.zip$'):\n    extracted_dirs = []\n    regex = re.compile(pattern)\n    for filename in os.listdir(directory):\n        if filename.endswith(\".zip\"):\n            m = regex.match(filename)\n            if m:\n                prefix = m.group(1)\n                extract_path = os.path.join(directory, prefix)\n                os.makedirs(extract_path, exist_ok=True)\n                zip_path = os.path.join(directory, filename)\n                with zipfile.ZipFile(zip_path, 'r') as z:\n                    z.extractall(extract_path)\n                extracted_dirs.append(extract_path)\n    return extracted_dirs\n```", "match": {"category": "success"}}
{"result": "```python\nfrom collections import defaultdict\nfrom operator import itemgetter\nfrom itertools import groupby\n\ndef task_func(news_articles):\n    required_keys = {'title', 'title_url', 'id', 'category'}\n    for article in news_articles:\n        if set(article.keys()) != required_keys:\n            raise ValueError(\"If dictionary keys do not match the requirements.\")\n    sorted_articles = sorted(news_articles, key=itemgetter('category', 'title'))\n    grouped = defaultdict(list)\n    for category, group in groupby(sorted_articles, key=itemgetter('category')):\n        grouped[category].extend(group)\n    return grouped\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport shutil\n# Constants\nBACKUP_DIR = '/tmp/backup'\ndef get_unique_backup_dir():\n    import datetime\n    import uuid\n    timestamp = datetime.datetime.now().strftime(\"%Y%m%d%H%M%S\")\n    unique_id = uuid.uuid4().hex[:8]\n    return os.path.join(BACKUP_DIR, f\"backup_{timestamp}_{unique_id}\")\n\ndef task_func(directory):\n    errors = []\n    backup_dir = get_unique_backup_dir()\n    try:\n        os.makedirs(backup_dir, exist_ok=True)\n    except Exception as e:\n        errors.append(f\"Failed to create backup directory '{backup_dir}': {e}\")\n        return backup_dir, errors\n\n    # Copy directory contents to backup_dir\n    try:\n        # Copy all contents inside 'directory' into backup_dir\n        # Using copytree on the directory itself won't work if backup_dir exists,\n        # so we copy items inside individually\n        with os.scandir(directory) as it:\n            for entry in it:\n                src_path = entry.path\n                dst_path = os.path.join(backup_dir, entry.name)\n                try:\n                    if entry.is_dir():\n                        shutil.copytree(src_path, dst_path)\n                    else:\n                        shutil.copy2(src_path, dst_path)\n                except Exception as e:\n                    errors.append(f\"Failed to copy '{src_path}' to backup: {e}\")\n    except Exception as e:\n        errors.append(f\"Failed to scan source directory '{directory}': {e}\")\n        return backup_dir, errors\n\n    # Clean original directory (delete all contents)\n    try:\n        with os.scandir(directory) as it:\n            for entry in it:\n                path = entry.path\n                try:\n                    if entry.is_dir():\n                        shutil.rmtree(path)\n                    else:\n                        os.remove(path)\n                except Exception as e:\n                    errors.append(f\"Failed to delete '{path}': {e}\")\n    except Exception as e:\n        errors.append(f\"Failed to scan source directory for cleanup '{directory}': {e}\")\n\n    return backup_dir, errors\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_large_files_backup (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1376, in patched\n    with self.decoration_helper(patched,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/contextlib.py\", line 135, in __enter__\n    return next(self.gen)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1358, in decoration_helper\n    arg = exit_stack.enter_context(patching)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/contextlib.py\", line 492, in enter_context\n    result = _cm_type.__enter__(cm)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1447, in __enter__\n    original, local = self.get_original()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1420, in get_original\n    raise AttributeError(\nAttributeError: <module 'builtins' (built-in)> does not have the attribute 'get_unique_backup_dir'\n\n======================================================================\nFAIL: test_backup_and_clean (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 14, in test_backup_and_clean\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 908, in assert_called_once\n    raise AssertionError(msg)\nAssertionError: Expected 'copytree' to have been called once. Called 0 times.\n\n======================================================================\nFAIL: test_backup_failure (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 29, in test_backup_failure\nAssertionError: 'Copy failed' not found in [\"Failed to scan source directory '/fake/source': [Errno 2] No such file or directory: '/fake/source'\"]\n\n======================================================================\nFAIL: test_cleanup_failure (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 37, in test_cleanup_failure\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_no_files_to_move (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 20, in test_no_files_to_move\nAssertionError: 'Directory does not exist: /fake/source' not found in [\"Failed to scan source directory '/fake/source': [Errno 2] No such file or directory: '/fake/source'\"]\n\n----------------------------------------------------------------------\nRan 5 tests in 0.010s\n\nFAILED (failures=4, errors=1)"}}
{"result": "```python\nimport pandas as pd\nimport pytz\n\ndef task_func(articles, timezone):\n    # Validate input type\n    if not isinstance(articles, list) or not all(isinstance(a, dict) for a in articles):\n        raise TypeError(\"articles must be a list of dictionaries\")\n    if len(articles) == 0:\n        raise ValueError(\"articles list cannot be empty\")\n    required_keys = {\"category\", \"published_time\"}\n    for a in articles:\n        if set(a.keys()) != required_keys:\n            raise ValueError(\"Each dictionary must have exactly the keys: 'category' and 'published_time'\")\n    \n    # Validate timezone\n    try:\n        tz = pytz.timezone(timezone)\n    except Exception:\n        raise ValueError(\"Invalid timezone\")\n\n    # Create DataFrame\n    df = pd.DataFrame(articles)\n\n    # Convert published_time to datetime and then to the specified timezone\n    df['published_time'] = pd.to_datetime(df['published_time'], errors='raise', utc=True)\n    df['published_time'] = df['published_time'].dt.tz_convert(tz)\n\n    # Extract hour only\n    df['hour'] = df['published_time'].dt.hour\n\n    # Group by category and calculate statistics on hour\n    grouped = df.groupby('category')['hour'].agg(['count', 'mean', 'min', 'max'])\n\n    return grouped\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_article_timezone_conversion (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 44, in test_article_timezone_conversion\n  File \"<bigcode>\", line 14, in task_func\nValueError: Each dictionary must have exactly the keys: 'category' and 'published_time'\n\n======================================================================\nERROR: test_conversion_and_grouping (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_conversion_and_grouping\n  File \"<bigcode>\", line 14, in task_func\nValueError: Each dictionary must have exactly the keys: 'category' and 'published_time'\n\n======================================================================\nERROR: test_different_timezones_across_categories (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 60, in test_different_timezones_across_categories\n  File \"<bigcode>\", line 14, in task_func\nValueError: Each dictionary must have exactly the keys: 'category' and 'published_time'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.013s\n\nFAILED (errors=3)"}}
{"result": "```python\nimport os\nfrom datetime import datetime\ndef task_func(filepath: str) -> dict:\n    stats = os.stat(filepath)\n    size = stats.st_size\n    mod_time = datetime.fromtimestamp(stats.st_mtime).strftime('%Y-%m-%d %H:%M:%S')\n    return {'size': size, 'last_modified': mod_time}\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_large_file (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 48, in test_large_file\nAttributeError: 'int' object has no attribute 'replace'\n\n======================================================================\nFAIL: test_empty_file (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 30, in test_empty_file\nAssertionError: 0 != '0 bytes'\n\n======================================================================\nFAIL: test_file_properties (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_file_properties\nAssertionError: 1000000 != '1000000 bytes'\n\n======================================================================\nFAIL: test_permission_error (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 44, in test_permission_error\nAssertionError: 'Permission denied' not found in \"[Errno 2] No such file or directory: 'fakepath/file.txt'\"\n\n----------------------------------------------------------------------\nRan 5 tests in 0.012s\n\nFAILED (failures=3, errors=1)"}}
{"result": "```python\nimport random\nimport pandas as pd\nimport numpy as np\ndef task_func(n,\n          domain=\"samplewebsite.com\",\n          categories=['Sports', 'Technology', 'Health', 'Science', 'Business'],\n          random_seed=None):\n    if random_seed is not None:\n        random.seed(random_seed)\n        np.random.seed(random_seed)\n    ids = list(range(n))\n    titles = [f\"Article {i}\" for i in ids]\n    title_urls = [f\"{domain}/Article_{i}\" for i in ids]\n    chosen_categories = [random.choice(categories) for _ in ids]\n    views = np.random.poisson(lam=1000, size=n)\n    df = pd.DataFrame({\n        \"title\": titles,\n        \"title_url\": title_urls,\n        \"id\": ids,\n        \"category\": chosen_categories,\n        \"views\": views\n    })\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport shutil\ndef task_func(src_dir, dest_dir, extension):\n    if not os.path.exists(dest_dir):\n        os.makedirs(dest_dir)\n    files_moved = 0\n    for filename in os.listdir(src_dir):\n        if filename.endswith(extension):\n            src_path = os.path.join(src_dir, filename)\n            dest_path = os.path.join(dest_dir, filename)\n            shutil.move(src_path, dest_path)\n            files_moved += 1\n    return files_moved\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport random\nimport csv\ndef task_func(n, \n           categories=['Sports', 'Technology', 'Business', 'Politics', 'Entertainment'],\n           news_sites=['New York Times', 'USA Today', 'Apple News', 'CNN', 'BBC'],\n           likert_scale=['Strongly Disagree', 'Disagree', 'Neither Agree nor Disagree', 'Agree', 'Strongly Agree'],\n           file_path='news_survey_data.csv',\n           random_seed=None):\n    if random_seed is not None:\n        random.seed(random_seed)\n    rows = []\n    for _ in range(n):\n        site = random.choice(news_sites)\n        cat = random.choice(categories)\n        response = random.choice(likert_scale)\n        value = likert_scale.index(response) + 1\n        rows.append([site, cat, response, value])\n    with open(file_path, mode='w', newline='', encoding='utf-8') as f:\n        writer = csv.writer(f)\n        writer.writerow(['Site', 'Category', 'Response', 'Value'])\n        writer.writerows(rows)\n    df = pd.read_csv(file_path)\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport subprocess\nimport os\nimport glob\n# Constants\nARCHIVE_DIR = '/tmp/archive'\ndef task_func(pattern):\n    os.makedirs(ARCHIVE_DIR, exist_ok=True)\n    files = glob.glob(pattern)\n    if not files:\n        return None\n    archive_file = os.path.join(ARCHIVE_DIR, 'archive.tar.gz')\n    cmd = ['tar', '-czf', archive_file] + files\n    subprocess.run(cmd, check=True)\n    for f in files:\n        os.remove(f)\n    return archive_file\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_archiving_in_nonexistent_directory (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 52, in test_archiving_in_nonexistent_directory\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/genericpath.py\", line 30, in isfile\n    st = os.stat(path)\nTypeError: stat: path should be string, bytes, os.PathLike or integer, not NoneType\n\n======================================================================\nFAIL: test_no_matching_files (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 40, in test_no_matching_files\nAssertionError: None != 'No files found matching the pattern.'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.031s\n\nFAILED (failures=1, errors=1)"}}
{"result": "```python\nimport pandas as pd\nimport csv\nimport random\n\ndef task_func(\n    n, \n    countries=['USA', 'UK', 'China', 'India', 'Germany'], \n    products=['Product A', 'Product B', 'Product C', 'Product D', 'Product E'], \n    output_path=None,\n    random_seed=None):\n\n    if random_seed is not None:\n        random.seed(random_seed)\n    \n    data = {\n        'Country': [random.choice(countries) for _ in range(n)],\n        'Product': [random.choice(products) for _ in range(n)],\n        'Sales': [random.randint(1, 100) for _ in range(n)]\n    }\n\n    df = pd.DataFrame(data)\n\n    if output_path is not None:\n        df.to_csv(output_path, index=False)\n\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nfrom itertools import combinations\ndef task_func(array1, array2):\n    if len(array1) != len(array2):\n        raise ValueError(\"Input arrays must have the same length.\")\n    if len(array1) == 0:\n        return 0.0\n    points = np.array([[x, y] for x, y in zip(array1, array2)])\n    max_distance = 0.0\n    for p1, p2 in combinations(points, 2):\n        dist = np.linalg.norm(p1 - p2)\n        if dist > max_distance:\n            max_distance = dist\n    return max_distance\n```", "match": {"category": "success"}}
{"result": "```python\nimport heapq\nfrom scipy import stats\ndef task_func(df, col1, col2, N=10):\n    if col1 not in df.columns or col2 not in df.columns:\n        raise ValueError(\"Specified columns are not in the provided DataFrame.\")\n    if N <= 1:\n        raise ValueError(\"N must be greater than 1.\")\n\n    diffs = (df[col1] - df[col2]).abs()\n    if N > len(diffs):\n        N = len(diffs)\n    largest_indices = heapq.nlargest(N, range(len(diffs)), key=diffs.__getitem__)\n\n    sample1 = df.loc[largest_indices, col1]\n    sample2 = df.loc[largest_indices, col2]\n\n    _, p_value = stats.ttest_ind(sample1, sample2, equal_var=False)\n    return p_value\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n# Constants\nARRAY_LENGTH = 10\ndef task_func():\n    arr = np.random.rand(ARRAY_LENGTH)\n    scaler = MinMaxScaler()\n    scaled_array = scaler.fit_transform(arr.reshape(-1, 1)).flatten()\n    return scaled_array\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_normal_functionality (builtins.TestCases)\nTesting the basic functionality and shape of the output array.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_normal_functionality\nAssertionError: Tuples differ: (10,) != (10, 1)\n\nSecond tuple contains 1 additional elements.\nFirst extra element 1:\n1\n\n- (10,)\n+ (10, 1)\n?     ++\n : Array shape should be (10, 1)\n\n======================================================================\nFAIL: test_unchanging_output (builtins.TestCases)\nTest if multiple calls to the function give the same result due to seed setting.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_unchanging_output\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/numpy/testing/_private/utils.py\", line 934, in assert_array_equal\n    assert_array_compare(operator.__eq__, x, y, err_msg=err_msg,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/numpy/testing/_private/utils.py\", line 844, in assert_array_compare\n    raise AssertionError(msg)\nAssertionError: \nArrays are not equal\nResults should be the same on every call due to fixed seed.\nMismatched elements: 10 / 10 (100%)\nMax absolute difference: 0.67453907\nMax relative difference: 3.59819056\n x: array([0.      , 0.523569, 0.175252, 0.29756 , 0.972901, 1.      ,\n       0.051917, 0.839049, 0.56674 , 0.598337])\n y: array([0.674539, 0.328329, 0.089709, 0.940612, 0.334031, 0.665242,\n       0.      , 1.      , 0.34577 , 0.130124])\n\n----------------------------------------------------------------------\nRan 5 tests in 0.008s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport heapq\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df, col1, col2, N=10):\n    if col1 not in df.columns or col2 not in df.columns:\n        raise ValueError(\"Specified columns are not in the DataFrame\")\n    scaler = StandardScaler()\n    scaled = scaler.fit_transform(df[[col1, col2]])\n    diffs = abs(scaled[:, 0] - scaled[:, 1])\n    N = min(N, len(diffs))\n    largest = heapq.nlargest(N, range(len(diffs)), key=diffs.__getitem__)\n    return largest\n```", "match": {"category": "success"}}
{"result": "```python\nfrom collections import Counter\nimport random\nfrom itertools import cycle\n# Constants\nELEMENTS = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']\ndef task_func(l):\n    # Move first 3 elements to the end\n    l = l[3:] + l[:3]\n    # Shuffle the list\n    random.shuffle(l)\n    # Cycle through the shuffled list and take first 30 elements\n    cycled_elements = [next(cycle(l)) for _ in range(30)]\n    # Count frequency\n    counter = Counter(cycled_elements)\n    return counter\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_empty_list (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 33, in test_empty_list\n  File \"<bigcode>\", line 13, in task_func\n  File \"<bigcode>\", line 13, in <listcomp>\nStopIteration\n\n======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_case_1\nAssertionError: 1 != 10 : All unique elements should be present in the result\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_case_2\nAssertionError: 1 != 10 : All unique elements should be present in the result\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 30, in test_case_3\nAssertionError: 1 != 2 : The result should contain two unique elements for repeated input\n\n----------------------------------------------------------------------\nRan 5 tests in 0.002s\n\nFAILED (failures=3, errors=1)"}}
{"result": "```python\nimport heapq\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df, feature, target, n=10):\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"If specified columns are not in the provided DataFrame.\")\n    X = df[[feature]].values\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    y_pred = model.predict(X)\n    residuals = abs(y - y_pred)\n    # Get indices of n largest residuals\n    n = min(n, len(residuals))\n    largest_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_indices, model\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport random\n# Constants\nELEMENTS = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']\ndef task_func(l=None):\n    if l is None:\n        l = random.sample(ELEMENTS, len(ELEMENTS))\n    arr = np.array(l)\n    arr = np.concatenate((arr[3:], arr[:3]))\n    return arr\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_custom_list_input (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_custom_list_input\nAssertionError: Lists differ: ['W', 'V', 'U', 'X', 'Y', 'Z'] != ['V', 'X', 'U', 'W', 'Y', 'Z']\n\nFirst differing element 0:\n'W'\n'V'\n\n- ['W', 'V', 'U', 'X', 'Y', 'Z']\n+ ['V', 'X', 'U', 'W', 'Y', 'Z']\n\n======================================================================\nFAIL: test_default_input (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_default_input\nAssertionError: Lists differ: ['J', 'G', 'F', 'I', 'C', 'D', 'H', 'B', 'A', 'E'] != ['I', 'F', 'G', 'J', 'E', 'A', 'B', 'H', 'D', 'C']\n\nFirst differing element 0:\n'J'\n'I'\n\n- ['J', 'G', 'F', 'I', 'C', 'D', 'H', 'B', 'A', 'E']\n+ ['I', 'F', 'G', 'J', 'E', 'A', 'B', 'H', 'D', 'C']\n\n======================================================================\nFAIL: test_three_elements_list (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 40, in test_three_elements_list\nAssertionError: Lists differ: ['Y', 'X', 'Z'] != ['X', 'Y', 'Z']\n\nFirst differing element 0:\n'Y'\n'X'\n\n- ['Y', 'X', 'Z']\n+ ['X', 'Y', 'Z']\n\n----------------------------------------------------------------------\nRan 5 tests in 0.003s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport string\nimport random\ndef task_func(length, random_seed=None):\n    BRACKETS = \"(){}[]\"\n    chars = string.ascii_lowercase + BRACKETS\n    if random_seed is not None:\n        random.seed(random_seed)\n    return ''.join(random.choice(chars) for _ in range(length))\n```", "match": {"category": "success"}}
{"result": "```python\nfrom collections import deque\nimport math\ndef task_func(l):\n    dq = deque(l)\n    dq.rotate(3)\n    numeric_sum = sum(x for x in dq if isinstance(x, (int, float)))\n    if numeric_sum > 0:\n        print(\"The square root of the sum of numeric elements:\", math.sqrt(numeric_sum))\n    return dq\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport re\ndef task_func(directory):\n    BRACKET_PATTERN = r'[()\\{\\}\\[\\]]'\n    matched_files = []\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(BRACKET_PATTERN, file):\n                matched_files.append(os.path.join(root, file))\n    return matched_files\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport pandas as pd\ndef task_func(df: pd.DataFrame) -> int:\n    if not isinstance(df, pd.DataFrame):\n        raise TypeError(\"Input must be a pandas DataFrame\")\n    pattern = r'[(){}\\[\\]]'\n    count = 0\n    for col in df.columns:\n        for val in df[col].astype(str):\n            count += len(re.findall(pattern, val))\n    return count\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport shutil\n# Constants\nBACKUP_DIR = '/tmp/backup'\ndef task_func(directory):\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backup_path = os.path.join(BACKUP_DIR, os.path.basename(directory.rstrip('/')))\n    if not os.path.exists(backup_path):\n        return f'No backup found for {directory} in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        try:\n            if os.path.isfile(directory):\n                os.remove(directory)\n            else:\n                shutil.rmtree(directory)\n        except Exception as e:\n            return f'Failed to remove existing directory {directory}: {e}'\n    try:\n        shutil.copytree(backup_path, directory)\n    except Exception as e:\n        return f'Failed to restore backup from {backup_path}: {e}'\n    return directory\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_directory_does_not_exist (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 37, in test_directory_does_not_exist\nAssertionError: 'No backup found for /tmp/nonexistent in /tmp/backup. Cannot rollback update.' != '/tmp/nonexistent'\n- No backup found for /tmp/nonexistent in /tmp/backup. Cannot rollback update.\n+ /tmp/nonexistent\n\n\n======================================================================\nFAIL: test_erroneous_backup_content (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 47, in test_erroneous_backup_content\nAssertionError: Exception not raised\n\n======================================================================\nFAIL: test_no_backup_directory (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 21, in test_no_backup_directory\nAssertionError: 'No backup found for /tmp/my_data in /tmp/backup. Cannot rollback update.' != 'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n- No backup found for /tmp/my_data in /tmp/backup. Cannot rollback update.\n+ Backup directory /tmp/backup does not exist. Cannot rollback update.\n\n\n======================================================================\nFAIL: test_no_backups_in_backup_directory (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 28, in test_no_backups_in_backup_directory\nAssertionError: \"Failed to remove existing directory /tmp[57 chars]ata'\" != 'No backups found in /tmp/backup. Cannot rollback update.'\n- Failed to remove existing directory /tmp/my_data: [Errno 2] No such file or directory: '/tmp/my_data'\n+ No backups found in /tmp/backup. Cannot rollback update.\n\n\n======================================================================\nFAIL: test_successful_rollback (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 14, in test_successful_rollback\nAssertionError: 'No backup found for /tmp/my_data in /tmp/backup. Cannot rollback update.' != '/tmp/my_data'\n- No backup found for /tmp/my_data in /tmp/backup. Cannot rollback update.\n+ /tmp/my_data\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.008s\n\nFAILED (failures=5)"}}
{"result": "```python\nimport pandas as pd\nfrom random import seed, choices, sample\ndef task_func(L, num_dataframes=5, random_seed=None):\n    if not L:\n        return pd.DataFrame(), []\n    seed(random_seed)\n    col_names = choices('abcdefghijklmnopqrstuvwxyz', k=len(L[0]))\n    df_list = []\n    n_rows = 3\n    for _ in range(num_dataframes):\n        if len(L) >= n_rows:\n            rows = sample(L, n_rows)\n        else:\n            rows = [L[i % len(L)] for i in range(n_rows)]\n        df = pd.DataFrame(rows, columns=col_names)\n        df_list.append(df)\n    common = df_list[0]\n    for df in df_list[1:]:\n        common = pd.merge(common, df, how='inner')\n        if common.empty:\n            break\n    # Remove duplicate rows and reset index for output\n    common = common.drop_duplicates().reset_index(drop=True)\n    return common, df_list\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_large_number_of_rows (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 85, in test_large_number_of_rows\n  File \"<bigcode>\", line 20, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/reshape/merge.py\", line 148, in merge\n    op = _MergeOperation(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/reshape/merge.py\", line 719, in __init__\n    self.left_on, self.right_on = self._validate_left_right_on(left_on, right_on)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/reshape/merge.py\", line 1511, in _validate_left_right_on\n    raise MergeError(f\"Data columns not unique: {repr(common_cols)}\")\npandas.errors.MergeError: Data columns not unique: Index(['b', 'c', 'k', 'x'], dtype='object')\n\n======================================================================\nERROR: test_rng (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 19, in test_rng\n  File \"<bigcode>\", line 20, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/reshape/merge.py\", line 148, in merge\n    op = _MergeOperation(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/reshape/merge.py\", line 719, in __init__\n    self.left_on, self.right_on = self._validate_left_right_on(left_on, right_on)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/reshape/merge.py\", line 1511, in _validate_left_right_on\n    raise MergeError(f\"Data columns not unique: {repr(common_cols)}\")\npandas.errors.MergeError: Data columns not unique: Index(['m', 'r'], dtype='object')\n\n======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 36, in test_case_1\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1163, in assert_frame_equal\n    raise_assert_detail(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame are different\n\nDataFrame shape mismatch\n[left]:  (1, 3)\n[right]: (4, 3)\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 45, in test_case_2\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1163, in assert_frame_equal\n    raise_assert_detail(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame are different\n\nDataFrame shape mismatch\n[left]:  (0, 5)\n[right]: (5, 5)\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 54, in test_case_3\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1163, in assert_frame_equal\n    raise_assert_detail(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame are different\n\nDataFrame shape mismatch\n[left]:  (0, 4)\n[right]: (8, 4)\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 63, in test_case_4\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1171, in assert_frame_equal\n    assert_index_equal(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 322, in assert_index_equal\n    _testing.assert_almost_equal(\n  File \"pandas/_libs/testing.pyx\", line 52, in pandas._libs.testing.assert_almost_equal\n  File \"pandas/_libs/testing.pyx\", line 172, in pandas._libs.testing.assert_almost_equal\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame.index are different\n\nDataFrame.index values are different (66.66667 %)\n[left]:  RangeIndex(start=0, stop=3, step=1)\n[right]: Index([0, 2, 7], dtype='int64')\nAt positional index 1, first diff: 1 != 2\n\n======================================================================\nFAIL: test_no_common_rows (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 105, in test_no_common_rows\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1171, in assert_frame_equal\n    assert_index_equal(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 322, in assert_index_equal\n    _testing.assert_almost_equal(\n  File \"pandas/_libs/testing.pyx\", line 52, in pandas._libs.testing.assert_almost_equal\n  File \"pandas/_libs/testing.pyx\", line 172, in pandas._libs.testing.assert_almost_equal\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame.index are different\n\nDataFrame.index values are different (33.33333 %)\n[left]:  RangeIndex(start=0, stop=3, step=1)\n[right]: Index([0, 1, 3], dtype='int64')\nAt positional index 2, first diff: 2 != 3\n\n----------------------------------------------------------------------\nRan 12 tests in 0.089s\n\nFAILED (failures=5, errors=2)"}}
{"result": "```python\nimport csv\nimport os\nfrom collections import Counter\n\n# Constants\nCSV_FILE_PATH = 'match_data.csv'\n\ndef create_test_csv(filename, content):\n    os.makedirs(os.path.dirname(filename), exist_ok=True)\n    with open(filename, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerows(content)\n\n# Example usage in a test setup:\ndef setup_csv():\n    content = [\n        ['team', 'goals', 'penalties'],\n        ['Team A', '2', '1'],\n        ['Team B', '1', '2'],\n        ['Team C', '3', '0']\n    ]\n    create_test_csv('test_data/test_case_2.csv', content)\n\ndef task_func(goals, penalties, csv_file_path=CSV_FILE_PATH):\n    # Read existing data\n    rows = []\n    total_goals = 0\n    total_penalties = 0\n    if os.path.exists(csv_file_path):\n        with open(csv_file_path, newline='') as csvfile:\n            reader = csv.DictReader(csvfile)\n            for row in reader:\n                g = int(row.get('goals', 0))\n                p = int(row.get('penalties', 0))\n                total_goals += g\n                total_penalties += p\n                rows.append(row)\n    else:\n        # No file exists, start fresh\n        rows = []\n    \n    # Add provided goals and penalties to totals\n    total_goals += goals\n    total_penalties += penalties\n    \n    # Write updated totals (overwrite file with single summary row)\n    with open(csv_file_path, 'w', newline='') as csvfile:\n        fieldnames = ['goals', 'penalties']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n        writer.writeheader()\n        writer.writerow({'goals': total_goals, 'penalties': total_penalties})\n\n    count = Counter({'goals': total_goals, 'penalties': total_penalties})\n    return count\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\nTest Case 1:\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 15, in test_case_1\n  File \"<bigcode>\", line 44, in task_func\nTypeError: unsupported operand type(s) for +=: 'int' and 'dict'\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\nTest Case 2:\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_case_2\n  File \"<bigcode>\", line 44, in task_func\nTypeError: unsupported operand type(s) for +=: 'int' and 'dict'\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\nTest Case 3:\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 35, in test_case_3\n  File \"<bigcode>\", line 44, in task_func\nTypeError: unsupported operand type(s) for +=: 'int' and 'dict'\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\nTest Case 4:\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 46, in test_case_4\n  File \"<bigcode>\", line 44, in task_func\nTypeError: unsupported operand type(s) for +=: 'int' and 'dict'\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\nTest Case 5:\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 56, in test_case_5\n  File \"<bigcode>\", line 44, in task_func\nTypeError: unsupported operand type(s) for +=: 'int' and 'dict'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.002s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport collections\nimport numpy as np\ndef task_func(file_name):\n    with open(file_name, 'r', encoding='utf-8') as f:\n        lines = f.read().splitlines()\n    if not lines:\n        return {}\n    header = lines[0].split(',')\n    if len(lines) == 1:\n        return {}\n    columns = list(zip(*(line.split(',') for line in lines[1:])))\n    result = {}\n    for col_name, col_values in zip(header, columns):\n        counter = collections.Counter(col_values)\n        max_count = max(counter.values())\n        common_values = [val for val, cnt in counter.items() if cnt == max_count]\n        result[col_name] = sorted(common_values)[0]\n    return result\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_multiple_columns (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 45, in test_multiple_columns\nAssertionError: {'Name': 'Alice', 'Age': '25', 'Country': 'USA'} != {'Name': 'Alice', 'Age': 25, 'Country': 'USA'}\n- {'Age': '25', 'Country': 'USA', 'Name': 'Alice'}\n?         -  -\n\n+ {'Age': 25, 'Country': 'USA', 'Name': 'Alice'}\n\n======================================================================\nFAIL: test_single_entry (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 31, in test_single_entry\nAssertionError: {'Name': 'John', 'Age': '30'} != {'Name': 'John', 'Age': 30}\n- {'Age': '30', 'Name': 'John'}\n?         -  -\n\n+ {'Age': 30, 'Name': 'John'}\n\n----------------------------------------------------------------------\nRan 5 tests in 0.005s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport numpy as np\nimport itertools\ndef task_func(dimension, seed=42):\n    np.random.seed(seed)\n    matrix = np.random.randint(1, 101, size=(dimension, dimension))\n    flat_list = list(itertools.chain.from_iterable(matrix))\n    return (matrix, flat_list)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_zero_dimension (builtins.TestCases)\nTest Case 4: Test with a dimension of zero (invalid input)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 45, in test_zero_dimension\nAssertionError: ValueError not raised\n\n----------------------------------------------------------------------\nRan 5 tests in 0.002s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(file_name: str) -> pd.DataFrame:\n    df = pd.read_csv(file_name)\n    numeric_cols = df.select_dtypes(include=['number']).columns\n    if len(numeric_cols) == 0:\n        raise ValueError(\"If input does not have numeric columns.\")\n    scaler = MinMaxScaler()\n    df_numeric = pd.DataFrame(scaler.fit_transform(df[numeric_cols]), columns=numeric_cols, index=df.index)\n    df.update(df_numeric)\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nfrom datetime import datetime\n# Constants\nLOG_DIR = './logs'\ndef task_func(metrics, filename, log_dir=LOG_DIR):\n    try:\n        if not os.path.exists(log_dir):\n            os.makedirs(log_dir)\n        filepath = os.path.join(log_dir, filename)\n        with open(filepath, 'a') as f:\n            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n            entry = f\"{timestamp} \" + \" \".join(f\"{k}:{v}\" for k, v in metrics.items()) + \"\\n\"\n            f.write(entry)\n        return True\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return False\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_empty_metrics (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 49, in test_empty_metrics\nAssertionError: 1 != 2\n\n======================================================================\nFAIL: test_non_dictionary_metrics (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 58, in test_non_dictionary_metrics\nAssertionError: ValueError not raised\n\n======================================================================\nFAIL: test_non_string_filename (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 55, in test_non_string_filename\nAssertionError: ValueError not raised\n\n----------------------------------------------------------------------\nRan 5 tests in 0.023s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport pandas as pd\nimport random\ndef task_func(dictionary, item, seed):\n    df = pd.DataFrame(dictionary)\n    locations = [(idx, col) for idx, row in df.iterrows() for col, val in row.items() if val == item]\n    count = len(locations)\n    random.seed(seed)\n    count += random.randint(0,9)\n    return locations, count, df\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom collections import Counter\n# Constants\nSTOPWORDS = set(stopwords.words('english'))\ndef task_func(text, n=2):\n    # Lowercase and tokenize\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    # Remove stopwords and duplicates while preserving order\n    seen = set()\n    filtered_words = []\n    for w in words:\n        if w not in STOPWORDS and w not in seen:\n            seen.add(w)\n            filtered_words.append(w)\n    # Generate n-grams\n    ngrams = [tuple(filtered_words[i:i+n]) for i in range(len(filtered_words)-n+1)]\n    # Count n-grams\n    return dict(Counter(ngrams))\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_2 (builtins.TestCases)\nTest Case 2: Text with Duplicated Words\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_case_2\nAssertionError: {('simple', 'test'): 1} != Counter({('simple', 'simple'): 1, ('simple', 'test'): 1, ('test', 'test'): 1})\n\n----------------------------------------------------------------------\nRan 5 tests in 0.001s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport numpy as np\nfrom scipy.stats import norm\ndef task_func(data: np.ndarray, threshold: float = 2.0):\n    mean = np.mean(data)\n    var = np.var(data)\n    std = np.sqrt(var)\n    if std == 0:\n        return [], mean, var\n    z_scores = (data - mean) / std\n    outliers = list(np.where(np.abs(z_scores) > threshold)[0])\n    return outliers, mean, var\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom textblob import TextBlob\n# Constants\nSTOPWORDS = set(stopwords.words('english'))\ndef task_func(text):\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    filtered_words = []\n    seen = set()\n    for w in words:\n        if w not in STOPWORDS and w not in seen:\n            filtered_words.append(w)\n            seen.add(w)\n    filtered_text = ' '.join(filtered_words)\n    blob = TextBlob(filtered_text)\n    sentiment = blob.sentiment.polarity\n    print(f\"Sentiment: {sentiment}\")\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_case_3\nTypeError: 'NoneType' object is not subscriptable\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 34, in test_case_4\nTypeError: 'NoneType' object is not subscriptable\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 41, in test_case_5\nTypeError: 'NoneType' object is not subscriptable\n\n======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 10, in test_case_1\nAssertionError: None is not an instance of <class 'tuple'> : The function should return a tuple\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_case_2\nAssertionError: None != (0.0, 0.0) : The sentiment of an empty string should be (0.0, 0.0)\n\n----------------------------------------------------------------------\nRan 5 tests in 0.033s\n\nFAILED (failures=2, errors=3)"}}
{"result": "```python\nimport numpy as np\nfrom sklearn.cluster import KMeans\ndef task_func(data, n_clusters):\n    kmeans = KMeans(n_clusters=n_clusters, random_state=0).fit(data)\n    labels = kmeans.labels_\n    clusters = {}\n    for idx, label in enumerate(labels):\n        clusters.setdefault(label, []).append(idx)\n    # Convert lists to numpy arrays to match example output\n    for key in clusters:\n        clusters[key] = np.array(clusters[key])\n    return clusters\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport os\nimport subprocess\n\ndef task_func(dir_path, exe_pattern, execute_files=True):\n    pattern = re.compile(exe_pattern)\n    results = []\n    if not os.path.isdir(dir_path):\n        return results\n\n    for entry in os.listdir(dir_path):\n        full_path = os.path.join(dir_path, entry)\n        if os.path.isfile(full_path) and pattern.search(entry):\n            if execute_files:\n                try:\n                    output = subprocess.run(\n                        [full_path], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True\n                    )\n                    results.append(output.stdout)\n                except Exception as e:\n                    results.append(f\"Error executing {full_path}: {e}\")\n            else:\n                results.append(full_path)\n    return results\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_executing_files (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 36, in test_executing_files\nAssertionError: Lists differ: [] != ['Execution Result']\n\nSecond list contains 1 additional elements.\nFirst extra element 0:\n'Execution Result'\n\n- []\n+ ['Execution Result']\n\n======================================================================\nFAIL: test_finding_executable_files (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 12, in test_finding_executable_files\nAssertionError: 0 != 1\n\n======================================================================\nFAIL: test_special_characters_in_pattern (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 44, in test_special_characters_in_pattern\nAssertionError: 0 != 1\n\n----------------------------------------------------------------------\nRan 5 tests in 0.006s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport pandas as pd\nfrom random import sample, seed\ndef task_func(dictionary, item, sample_size=None, random_seed=None):\n    df = pd.DataFrame(dictionary)\n    positions = [(row, col) for row in df.index for col in df.columns if df.at[row, col] == item]\n    if random_seed is not None:\n        seed(random_seed)\n    if sample_size is not None and sample_size < len(positions):\n        positions = sample(positions, sample_size)\n    return positions, df\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nfrom pathlib import Path\nimport tarfile\n\n# Constants\nPATTERN = r\"(?<!Distillr)\\\\\\\\AcroTray\\.exe\"\nDIRECTORY = r\"C:\\\\SomeDir\\\\\"\n\ndef task_func(directory=DIRECTORY, file_pattern=PATTERN):\n    directory_path = Path(directory)\n    pattern = re.compile(file_pattern)\n\n    matched_files = []\n    for file_path in directory_path.rglob(\"*\"):\n        # Use the full path as a string with double backslashes to match the regex pattern\n        # Since raw string in regex includes \\\\, Windows paths have single backslash '\\'\n        # So converting path to string and replacing '\\' with '\\\\' to match the pattern\n        path_str = str(file_path)\n        if pattern.search(path_str.replace(\"\\\\\", \"\\\\\\\\\")) and file_path.is_file():\n            matched_files.append(file_path)\n\n    if not matched_files:\n        return \"\"\n\n    tar_path = directory_path / \"matched_files.tar\"\n    with tarfile.open(tar_path, mode=\"w\") as tar:\n        for file in matched_files:\n            # Add file with relative path to the directory\n            arcname = file.relative_to(directory_path)\n            tar.add(file, arcname=arcname)\n\n    return str(tar_path)\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_empty_directory (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 71, in test_empty_directory\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/tarfile.py\", line 1821, in open\n    raise ValueError(\"nothing to open\")\nValueError: nothing to open\n\n======================================================================\nERROR: test_file_permission_issues (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 84, in test_file_permission_issues\n  File \"<bigcode>\", line 31, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/tarfile.py\", line 2208, in add\n    with bltn_open(name, \"rb\") as f:\nPermissionError: [Errno 13] Permission denied: '/tmp/tmplarxq_r3/AcroTray.exe'\n\n======================================================================\nERROR: test_no_matches (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 48, in test_no_matches\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/tarfile.py\", line 1821, in open\n    raise ValueError(\"nothing to open\")\nValueError: nothing to open\n\n----------------------------------------------------------------------\nRan 5 tests in 0.009s\n\nFAILED (errors=3)"}}
{"result": "```python\nfrom itertools import combinations\nimport pandas as pd\ndef task_func(number_list, element):\n    if not number_list:\n        return pd.DataFrame(columns=['Combinations'])\n    unique_combos = set()\n    for combo in combinations(number_list, 3):\n        if sum(combo) == element:\n            unique_combos.add(tuple(sorted(combo)))\n    if not unique_combos:\n        return pd.DataFrame(columns=['Combinations'])\n    df = pd.DataFrame({'Combinations': list(unique_combos)})\n    df = df.sort_values(by='Combinations').reset_index(drop=True)\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 197, in test_case_2\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1224, in assert_frame_equal\n    assert_series_equal(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1014, in assert_series_equal\n    _testing.assert_almost_equal(\n  File \"pandas/_libs/testing.pyx\", line 52, in pandas._libs.testing.assert_almost_equal\n  File \"pandas/_libs/testing.pyx\", line 172, in pandas._libs.testing.assert_almost_equal\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame.iloc[:, 0] (column name=\"Combinations\") are different\n\nDataFrame.iloc[:, 0] (column name=\"Combinations\") values are different (97.28261 %)\n[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]\n[left]:  [(1, 2, 47), (1, 3, 46), (1, 4, 45), (1, 5, 44), (1, 6, 43), (1, 7, 42), (1, 8, 41), (1, 9, 40), (1, 10, 39), (1, 11, 38), (1, 12, 37), (1, 13, 36), (1, 14, 35), (1, 15, 34), (1, 16, 33), (1, 17, 32), (1, 18, 31), (1, 19, 30), (1, 20, 29), (1, 21, 28), (1, 22, 27), (1, 23, 26), (1, 24, 25), (2, 3, 45), (2, 4, 44), (2, 5, 43), (2, 6, 42), (2, 7, 41), (2, 8, 40), (2, 9, 39), (2, 10, 38), (2, 11, 37), (2, 12, 36), (2, 13, 35), (2, 14, 34), (2, 15, 33), (2, 16, 32), (2, 17, 31), (2, 18, 30), (2, 19, 29), (2, 20, 28), (2, 21, 27), (2, 22, 26), (2, 23, 25), (3, 4, 43), (3, 5, 42), (3, 6, 41), (3, 7, 40), (3, 8, 39), (3, 9, 38), (3, 10, 37), (3, 11, 36), (3, 12, 35), (3, 13, 34), (3, 14, 33), (3, 15, 32), (3, 16, 31), (3, 17, 30), (3, 18, 29), (3, 19, 28), (3, 20, 27), (3, 21, 26), (3, 22, 25), (3, 23, 24), (4, 5, 41), (4, 6, 40), (4, 7, 39), (4, 8, 38), (4, 9, 37), (4, 10, 36), (4, 11, 35), (4, 12, 34), (4, 13, 33), (4, 14, 32), (4, 15, 31), (4, 16, 30), (4, 17, 29), (4, 18, 28), (4, 19, 27), (4, 20, 26), (4, 21, 25), (4, 22, 24), (5, 6, 39), (5, 7, 38), (5, 8, 37), (5, 9, 36), (5, 10, 35), (5, 11, 34), (5, 12, 33), (5, 13, 32), (5, 14, 31), (5, 15, 30), (5, 16, 29), (5, 17, 28), (5, 18, 27), (5, 19, 26), (5, 20, 25), (5, 21, 24), (5, 22, 23), (6, 7, 37), ...]\n[right]: [(1, 12, 37), (1, 13, 36), (12, 16, 22), (3, 22, 25), (2, 14, 34), (3, 23, 24), (5, 12, 33), (5, 13, 32), (9, 10, 31), (1, 11, 38), (3, 20, 27), (3, 21, 26), (6, 19, 25), (5, 11, 34), (9, 16, 25), (2, 5, 43), (7, 20, 23), (1, 2, 47), (7, 21, 22), (6, 10, 34), (6, 17, 27), (6, 18, 26), (11, 13, 26), (2, 3, 45), (2, 4, 44), (7, 19, 24), (6, 8, 36), (10, 18, 22), (4, 13, 33), (6, 16, 28), (4, 21, 25), (3, 10, 37), (11, 19, 20), (10, 16, 24), (1, 22, 27), (4, 11, 35), (4, 12, 34), (7, 10, 33), (12, 18, 20), (4, 19, 27), (3, 8, 39), (3, 9, 38), (6, 7, 37), (1, 21, 28), (4, 10, 36), (5, 14, 31), (7, 8, 35), (7, 9, 34), (15, 16, 19), (3, 7, 40), (2, 22, 26), (9, 18, 23), (2, 23, 25), (5, 21, 24), (9, 19, 22), (1, 19, 30), (8, 15, 27), (1, 20, 29), (8, 16, 26), (4, 9, 37), (5, 19, 26), (9, 17, 24), (8, 13, 29), (2, 13, 35), (8, 14, 28), (1, 10, 39), (4, 7, 39), (12, 14, 24), (8, 12, 30), (2, 12, 36), (10, 19, 21), (1, 8, 41), (1, 9, 40), (4, 22, 24), (2, 10, 38), (3, 19, 28), (2, 11, 37), (5, 9, 36), (10, 17, 23), (2, 18, 30), (1, 7, 42), (4, 20, 26), (14, 17, 19), (3, 17, 30), (3, 18, 29), (5, 7, 38), (4, 18, 28), (7, 17, 26), (13, 18, 19), (3, 15, 32), (14, 16, 20), (3, 16, 31), (6, 14, 30), (5, 6, 39), (5, 22, 23), (11, 17, 22), (7, 15, 28), (7, 16, 27), (6, 12, 32), (6, 13, 31), ...]\nAt positional index 0, first diff: (1, 2, 47) != (1, 12, 37)\n\n----------------------------------------------------------------------\nRan 7 tests in 0.047s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport re\nimport os\nimport shutil\ndef task_func(source_dir, target_dir, file_pattern=r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b'):\n    pattern = r'(?<!Distillr)\\\\AcroTray\\.exe'\n    regex = re.compile(pattern)\n    matches = []\n    for root, _, files in os.walk(source_dir):\n        for file in files:\n            full_path = os.path.join(root, file)\n            # Normalize path with double backslashes for pattern matching\n            norm_path = full_path.replace('/', '\\\\')\n            if regex.search(norm_path):\n                matches.append(full_path)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    config_file_path = os.path.join(target_dir, 'matched_files.cfg')\n    with open(config_file_path, 'w', encoding='utf-8') as f:\n        for match in matches:\n            f.write(match + '\\n')\n    return config_file_path\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_invalid_files_not_moved (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 32, in test_invalid_files_not_moved\nAssertionError: Lists differ: ['arc[19 chars]v', 'document1.doc', 'file1.docx', 'image1.png[63 chars]txt'] != ['arc[19 chars]v', 'image1.png', 'script.js', 'test.tmp']\n\nFirst differing element 2:\n'document1.doc'\n'image1.png'\n\nFirst list contains 5 additional elements.\nFirst extra element 5:\n'notes1.docx'\n\n+ ['archive.zip', 'data.csv', 'image1.png', 'script.js', 'test.tmp']\n- ['archive.zip',\n-  'data.csv',\n-  'document1.doc',\n-  'file1.docx',\n-  'image1.png',\n-  'notes1.docx',\n-  'script.js',\n-  'test.tmp',\n-  'test1.txt',\n-  'test2.txt'] : Invalid files were moved.\n\n======================================================================\nFAIL: test_no_files_to_move (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 39, in test_no_files_to_move\nAssertionError: '/tmp/tmpqlm0z7a2/matched_files.cfg' != 0 : Files were moved when none should have.\n\n======================================================================\nFAIL: test_pattern_specificity (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 44, in test_pattern_specificity\nAssertionError: '/tmp/tmpc5aaxnsp/matched_files.cfg' != 2 : Pattern did not correctly filter files.\n\n======================================================================\nFAIL: test_target_directory_creation (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 50, in test_target_directory_creation\nAssertionError: '/tmp/tmpxrlgl7q7/matched_files.cfg' != 5 : Files were not moved correctly when target directory was initially absent.\n\n======================================================================\nFAIL: test_valid_files_moved (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_valid_files_moved\nAssertionError: '/tmp/tmpf72e72wa/matched_files.cfg' != 5 : Not all valid files were moved.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.005s\n\nFAILED (failures=5)"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\ndef task_func(test_scores, student):\n    df = pd.DataFrame(test_scores)\n    if student not in df['Student'].values:\n        raise ValueError(\"student is not present in the test_scores dataframe\")\n    student_scores = df[df['Student'] == student]['Score']\n    avg = student_scores.mean()\n    std = student_scores.std(ddof=0)\n    return np.array([avg, std]), df\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 23, in test_case_1\nAssertionError: 8.846912294289863 != 8.275528684017717 within 2 places (0.5713836102721466 difference)\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 44, in test_case_4\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 58, in test_case_5\nAssertionError: 15.21147227880618 != 14.430869689661812 within 2 places (0.7806025891443689 difference)\n\n----------------------------------------------------------------------\nRan 5 tests in 0.012s\n\nFAILED (failures=3)"}}
{"result": "```python\nfrom collections import Counter\nimport random\n# Constants\nHAND_RANKS = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']\nSUITS = ['H', 'D', 'C', 'S']\ndef task_func():\n    deck = [rank + suit for rank in HAND_RANKS for suit in SUITS]\n    hand = random.sample(deck, 5)\n    ranks_in_hand = [card[:-1] if card[:-2] != '10' else '10' for card in hand]\n    # The above line handles ranks correctly, but since '10' is two chars, slicing card[:-1] removes suit\n    # card[:-1] works correctly for all cards, including '10' because '10H'[:-1] == '10'\n    ranks_in_hand = [card[:-1] for card in hand]\n    rank_count = Counter(ranks_in_hand)\n    return hand, rank_count\n```", "match": {"category": "success"}}
{"result": "```python\nfrom collections import Counter\nimport logging\n\ndef task_func(letter_list, element, log_path):\n    log_file = log_path.rstrip('/') + '/task_func.log'\n    logging.basicConfig(\n        filename=log_file,\n        filemode='w',\n        encoding='utf-8',\n        level=logging.DEBUG,\n        format='%(levelname)s:%(message)s'\n    )\n\n    logging.info(f\"Function called with list: {letter_list} and element: {element}\")\n\n    if element not in letter_list:\n        logging.error(\"The element is not in the letter list.\")\n        logging.shutdown()\n        raise ValueError(\"The element is not in the letter list.\")\n\n    counter = Counter(letter_list)\n    element_frequency = counter[element]\n\n    logging.info(f\"Frequency of '{element}' is {element_frequency}\")\n\n    logging.shutdown()\n\n    return element_frequency\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 16, in test_case_2\nFileNotFoundError: [Errno 2] No such file or directory: '/tmp/tmpqz0xpxxt/task_func.log'\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 22, in test_case_3\nFileNotFoundError: [Errno 2] No such file or directory: '/tmp/tmpnv3_ax33/task_func.log'\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_case_4\nFileNotFoundError: [Errno 2] No such file or directory: '/tmp/tmpouy2ryxt/task_func.log'\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 34, in test_case_5\nFileNotFoundError: [Errno 2] No such file or directory: '/tmp/tmp_587ohfn/task_func.log'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.005s\n\nFAILED (errors=4)"}}
{"result": "```python\nimport re\nimport string\n# Constants\nPUNCTUATION = string.punctuation\ndef task_func(text):\n    # Replace punctuation with space, then split and lowercase\n    text_no_punct = re.sub(f\"[{re.escape(PUNCTUATION)}]\", \" \", text)\n    cleaned_words = [word.lower() for word in text_no_punct.split() if word]\n    return cleaned_words\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_empty_string (builtins.TestCases)\nTest with an empty string\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_empty_string\nAssertionError: Lists differ: [] != ['']\n\nSecond list contains 1 additional elements.\nFirst extra element 0:\n''\n\n- []\n+ ['']\n\n======================================================================\nFAIL: test_string_with_special_characters (builtins.TestCases)\nTest with a string that includes special characters\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_string_with_special_characters\nAssertionError: Lists differ: ['special', 'chars'] != ['special', 'chars', '']\n\nSecond list contains 1 additional elements.\nFirst extra element 2:\n''\n\n- ['special', 'chars']\n+ ['special', 'chars', '']\n?                    ++++\n\n\n======================================================================\nFAIL: test_string_with_whitespaces (builtins.TestCases)\nTest with a string that includes extra whitespaces between words\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 32, in test_string_with_whitespaces\nAssertionError: Lists differ: ['extra', 'whitespaces'] != ['', 'extra', 'whitespaces', '']\n\nFirst differing element 0:\n'extra'\n''\n\nSecond list contains 2 additional elements.\nFirst extra element 2:\n'whitespaces'\n\n- ['extra', 'whitespaces']\n+ ['', 'extra', 'whitespaces', '']\n?  ++++                      ++++\n\n\n----------------------------------------------------------------------\nRan 6 tests in 0.003s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport time\nimport random\ndef task_func(iterations=5, min_delay=1.0, max_delay=2.0, seed=None):\n    if not (isinstance(iterations, int) and iterations > 0):\n        raise ValueError(\"iterations must be a positive integer\")\n    if not (isinstance(min_delay, (float, int)) and min_delay > 0):\n        raise ValueError(\"min_delay must be a positive floating point value\")\n    if not (isinstance(max_delay, (float, int)) and max_delay > 0):\n        raise ValueError(\"max_delay must be a positive floating point value\")\n    \n    random.seed(seed)\n    messages = []\n    total_delay = 0.0\n    for _ in range(iterations):\n        delay = random.uniform(min_delay, max_delay)\n        time.sleep(delay)\n        total_delay += delay\n        messages.append(f\"{delay:.2f} seconds have passed\")\n    return messages, total_delay\n```", "match": {"category": "timeout", "error": "Test execution timed out after 10 seconds"}}
{"result": "```python\nimport random\nimport string\n# Constants\nLETTERS = string.ascii_letters\ndef task_func(num_words, word_length):\n    if num_words < 0 or word_length < 0:\n        raise ValueError(\"num_words and word_length must be non-negative\")\n    words = []\n    for _ in range(num_words):\n        word = ''.join(random.choices(LETTERS, k=word_length))\n        words.append(word)\n    return words\n```", "match": {"category": "success"}}
{"result": "```python\nimport time\nimport threading\n\ndef task_func(delay_time: float = 1.0, num_threads: int = 5):\n    results = [None] * num_threads\n    def worker(idx):\n        time.sleep(delay_time)\n        results[idx] = f'Delay in thread {idx} completed'\n\n    threads = []\n    for i in range(num_threads):\n        t = threading.Thread(target=worker, args=(i,))\n        threads.append(t)\n        t.start()\n    for t in threads:\n        t.join()\n    return results\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 9, in test_case_1\nAssertionError: 1.0069100856781006 != 5 within 0 places (3.9930899143218994 difference)\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_case_3\nAssertionError: 0.1045675277709961 != 1.0 within 0 places (0.8954324722290039 difference)\n\n----------------------------------------------------------------------\nRan 5 tests in 2.351s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport random\nimport string\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\ndef task_func(length, num_digits):\n    if num_digits > length:\n        raise ValueError(\"Number of digits cannot be greater than total length\")\n    password_chars = random.choices(DIGITS, k=num_digits) + random.choices(LETTERS, k=length - num_digits)\n    random.shuffle(password_chars)\n    return ''.join(password_chars)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_negative_num_digits (builtins.TestCases)\nTest Case 4: Negative Number of Digits\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 33, in test_negative_num_digits\nAssertionError: ValueError not raised : Should raise ValueError for negative num_digits\n\n----------------------------------------------------------------------\nRan 5 tests in 0.003s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport time\nimport numpy as np\ndef task_func(samples=10, delay=0.1):\n    delays = []\n    for _ in range(samples):\n        start = time.perf_counter()\n        time.sleep(delay)\n        end = time.perf_counter()\n        delays.append(end - start)\n    delays = np.array(delays)\n    return delays.mean(), delays.std()\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport string\n# Constants\nPUNCTUATION = string.punctuation\ndef task_func(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    punctuations = re.findall(f\"[{re.escape(PUNCTUATION)}]\", text)\n    return (len(words), len(punctuations))\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nfrom itertools import product\nimport string\ndef task_func(length, seed=None, alphabets=list(string.ascii_lowercase)):\n    rng = np.random.default_rng(seed)\n    all_strings = [''.join(p) for p in product(alphabets, repeat=length)]\n    chosen = rng.choice(all_strings, size=10, replace=True).tolist()\n    return chosen\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 14, in test_case_1\nAssertionError: Element counts were not equal:\n\nDiff is 659 characters long. Set self.maxDiff to None to see it.\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 22, in test_case_2\nAssertionError: Element counts were not equal:\n\nDiff is 679 characters long. Set self.maxDiff to None to see it.\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 30, in test_case_3\nAssertionError: Element counts were not equal:\nFirst has 1, Second has 2:  'yy'\nFirst has 3, Second has 1:  'xx'\nFirst has 1, Second has 0:  'zy'\nFirst has 1, Second has 0:  'yz'\nFirst has 1, Second has 0:  'zx'\nFirst has 1, Second has 2:  'yx'\nFirst has 0, Second has 1:  'xz'\nFirst has 0, Second has 2:  'zz'\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 37, in test_case_4\nAssertionError: Element counts were not equal:\nFirst has 1, Second has 0:  't'\nFirst has 1, Second has 0:  'v'\nFirst has 2, Second has 1:  'p'\nFirst has 1, Second has 0:  'l'\nFirst has 1, Second has 0:  'b'\nFirst has 1, Second has 0:  'z'\nFirst has 0, Second has 1:  'i'\nFirst has 0, Second has 1:  'y'\nFirst has 0, Second has 1:  'x'\nFirst has 0, Second has 1:  'q'\nFirst has 0, Second has 1:  'k'\nFirst has 0, Second has 1:  'u'\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 45, in test_case_5\nAssertionError: Element counts were not equal:\nFirst has 2, Second has 1:  'aaaa'\nFirst has 1, Second has 0:  'aabb'\nFirst has 1, Second has 0:  'abab'\nFirst has 1, Second has 0:  'baaa'\nFirst has 1, Second has 0:  'aaba'\nFirst has 1, Second has 2:  'baab'\nFirst has 0, Second has 1:  'abaa'\nFirst has 0, Second has 1:  'abbb'\nFirst has 0, Second has 1:  'bbaa'\nFirst has 0, Second has 1:  'bbbb'\n\n----------------------------------------------------------------------\nRan 6 tests in 0.009s\n\nFAILED (failures=5)"}}
{"result": "```python\nimport re\nimport os\nimport shutil\ndef task_func(source_dir, target_dir, file_pattern=r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b'):\n    if not os.path.isdir(source_dir):\n        raise ValueError(f\"Source directory does not exist: {source_dir}\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir, exist_ok=True)\n\n    pattern = re.compile(file_pattern)\n    moved_files_count = 0\n\n    for filename in os.listdir(source_dir):\n        if pattern.fullmatch(filename):\n            source_path = os.path.join(source_dir, filename)\n            target_path = os.path.join(target_dir, filename)\n            if os.path.isfile(source_path):\n                shutil.move(source_path, target_path)\n                moved_files_count += 1\n\n    return moved_files_count\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_directory_does_not_exist (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 42, in test_directory_does_not_exist\n  File \"<bigcode>\", line 7, in task_func\nValueError: Source directory does not exist: /tmp/tmpiov5ucsc/source\n\n----------------------------------------------------------------------\nRan 5 tests in 0.005s\n\nFAILED (errors=1)"}}
{"result": "```python\nimport math\nfrom sympy import isprime\ndef task_func(input_list):\n    primes = [num for num in input_list if isprime(num)]\n    return sorted(primes, key=lambda x: math.degrees(x))\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport errno\nimport shutil\ndef task_func(filename, dest_dir):\n    try:\n        if not os.path.exists(dest_dir):\n            os.makedirs(dest_dir)\n        elif not os.path.isdir(dest_dir):\n            raise OSError(errno.ENOTDIR, \"Not a directory\", dest_dir)\n        \n        dest_path = os.path.join(dest_dir, os.path.basename(filename))\n        shutil.copy2(filename, dest_path)\n        \n        with open(filename, 'w'):\n            pass\n        \n        return os.path.abspath(dest_path)\n    except OSError as e:\n        # Reraise OSError for directory creation or copy issues except ignored scenario\n        raise e\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom statistics import mean\n\ndef task_func(df: pd.DataFrame) -> dict:\n    if not {'Name', 'Score'}.issubset(df.columns):\n        raise ValueError(\"DataFrame must have 'Name' and 'Score' columns\")\n    \n    grouped = df.groupby('Name')['Score'].mean()\n    \n    def gen(name, avg_score):\n        while True:\n            yield (name, avg_score)\n    \n    return {name: gen(name, avg_score) for name, avg_score in grouped.items()}\n```", "match": {"category": "success"}}
{"result": "```python\nimport json\nimport os\n\ndef task_func(filename, data):\n    try:\n        with open(filename, 'w', encoding='utf-8') as f:\n            json.dump(data, f)\n        file_exists = os.path.exists(filename)\n        if not file_exists:\n            return (False, None)\n        with open(filename, 'r', encoding='utf-8') as f:\n            written_data = json.load(f)\n        success = written_data == data\n        return (success, written_data)\n    except Exception:\n        return (False, None)\n```", "match": {"category": "success"}}
{"result": "```python\nimport random\nimport math\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    random.seed(random_seed)\n    for _ in range(pairs_count):\n        num1 = random.randint(range_start, range_end)\n        num2 = random.randint(range_start, range_end)\n        diff_sqrt = math.sqrt(abs(num1 - num2))\n        yield (num1, num2, diff_sqrt)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_rng (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 10, in test_rng\nAssertionError: Tuples differ: (4, 95, 9.539392014169456) != (36, 32, 2.0)\n\nFirst differing element 0:\n4\n36\n\n- (4, 95, 9.539392014169456)\n+ (36, 32, 2.0)\n\n----------------------------------------------------------------------\nRan 5 tests in 0.002s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pickle\nimport os\ndef task_func(filename, data):\n    try:\n        dir_path = os.path.dirname(filename)\n        if dir_path and not os.path.exists(dir_path):\n            os.makedirs(dir_path)\n        with open(filename, 'wb') as f:\n            pickle.dump(data, f)\n        return True\n    except:\n        return False\n```", "match": {"category": "success"}}
{"result": "```python\nimport random\nfrom collections import Counter\nfrom statistics import mode\n\ndef task_func(list_length=1000, range_start=1, range_end=10, random_seed=None):\n    if random_seed is not None:\n        random.seed(random_seed)\n    numbers = [random.randint(range_start, range_end) for _ in range(list_length)]\n    freq = Counter(numbers)\n    m = mode(numbers)\n    def gen():\n        for num in numbers:\n            yield (num, freq[num])\n    return m, gen()\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_case_1\nAssertionError: Element counts were not equal:\nFirst has 18, Second has 1:  (2, 18)\nFirst has 22, Second has 1:  (5, 22)\nFirst has 20, Second has 1:  (1, 20)\nFirst has 14, Second has 1:  (3, 14)\nFirst has 26, Second has 1:  (4, 26)\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 19, in test_case_2\nAssertionError: Element counts were not equal:\nFirst has 9, Second has 1:  (6, 9)\nFirst has 8, Second has 1:  (5, 8)\nFirst has 12, Second has 1:  (7, 12)\nFirst has 10, Second has 1:  (4, 10)\nFirst has 11, Second has 1:  (3, 11)\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 37, in test_case_3\nAssertionError: Element counts were not equal:\nFirst has 20, Second has 1:  (11, 20)\nFirst has 21, Second has 1:  (13, 21)\nFirst has 17, Second has 1:  (14, 17)\nFirst has 20, Second has 1:  (10, 20)\nFirst has 20, Second has 1:  (17, 20)\nFirst has 16, Second has 1:  (16, 16)\nFirst has 13, Second has 1:  (20, 13)\nFirst has 29, Second has 1:  (18, 29)\nFirst has 16, Second has 1:  (15, 16)\nFirst has 15, Second has 1:  (12, 15)\nFirst has 13, Second has 1:  (19, 13)\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 43, in test_case_4\nAssertionError: Element counts were not equal:\nFirst has 486, Second has 1:  (0, 486)\nFirst has 514, Second has 1:  (1, 514)\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 48, in test_case_5\nAssertionError: Element counts were not equal:\nFirst has 10, Second has 1:  (5, 10)\n\n----------------------------------------------------------------------\nRan 7 tests in 0.008s\n\nFAILED (failures=5)"}}
{"result": "```python\nimport binascii\nimport io\nimport gzip\ndef task_func(compressed_hex):\n    try:\n        compressed_bytes = binascii.unhexlify(compressed_hex)\n        with gzip.GzipFile(fileobj=io.BytesIO(compressed_bytes)) as f:\n            decompressed_bytes = f.read()\n        decoded_string = decompressed_bytes.decode('utf-8')\n    except Exception as e:\n        decoded_string = f\"Error: {str(e)}\"\n    return decoded_string\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\ndef task_func(n_rows, remove_cols, columns=['A', 'B', 'C', 'D', 'E'], random_seed=None):\n    if random_seed is not None:\n        np.random.seed(random_seed)\n    data = np.random.randint(0, 101, size=(n_rows, len(columns)))\n    df = pd.DataFrame(data, columns=columns)\n    # Remove columns by index\n    to_remove = [columns[i] for i in remove_cols if i < len(columns)]\n    df.drop(columns=to_remove, inplace=True)\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_case_2\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1224, in assert_frame_equal\n    assert_series_equal(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1014, in assert_series_equal\n    _testing.assert_almost_equal(\n  File \"pandas/_libs/testing.pyx\", line 52, in pandas._libs.testing.assert_almost_equal\n  File \"pandas/_libs/testing.pyx\", line 172, in pandas._libs.testing.assert_almost_equal\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame.iloc[:, 0] (column name=\"X\") are different\n\nDataFrame.iloc[:, 0] (column name=\"X\") values are different (20.0 %)\n[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n[left]:  [75, 2, 76, 49, 13, 75, 76, 89, 100, 30]\n[right]: [75, 2, 76, 49, 13, 75, 76, 89, 35, 63]\nAt positional index 8, first diff: 100 != 35\n\n----------------------------------------------------------------------\nRan 5 tests in 0.014s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport os\nimport shutil\nimport csv\n\ndef task_func(target_value='332', csv_dir='./csv_files/', processed_dir='./processed_files/', simulate=False):\n    result = {}\n    if not os.path.isdir(csv_dir):\n        return result  # No directory to scan\n\n    if not simulate and not os.path.exists(processed_dir):\n        os.makedirs(processed_dir)\n\n    for filename in os.listdir(csv_dir):\n        if filename.lower().endswith('.csv'):\n            filepath = os.path.join(csv_dir, filename)\n            try:\n                with open(filepath, newline='', encoding='utf-8') as csvfile:\n                    reader = csv.reader(csvfile)\n                    for idx, row in enumerate(reader):\n                        if row and row[0] == target_value:\n                            result[filename] = idx\n                            break\n                    else:\n                        # Target not found in this file\n                        result[filename] = None\n            except Exception:\n                result[filename] = None\n\n            # Move file if not simulating and target found\n            if not simulate and result.get(filename) is not None:\n                dest_path = os.path.join(processed_dir, filename)\n                shutil.move(filepath, dest_path)\n\n    return result\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_file_with_multiple_targets (builtins.TestCases)\nTest case for files with multiple occurrences of the target value.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 50, in test_file_with_multiple_targets\nAssertionError: 'file_with_multiple_targets.csv' not found in {}\n\n======================================================================\nFAIL: test_file_with_target (builtins.TestCases)\nTest case for files with the target value.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 22, in test_file_with_target\nAssertionError: 'file_with_target.csv' not found in {}\n\n----------------------------------------------------------------------\nRan 5 tests in 0.027s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(n_rows, scale_cols, columns=['A', 'B', 'C', 'D', 'E'], random_seed=None):\n    rng = np.random.default_rng(random_seed)\n    data = {}\n    for i, col in enumerate(columns):\n        if i == 0 or i == len(columns) - 1:\n            # Integers from 0 to 99 as in example\n            data[col] = rng.integers(0, 100, size=n_rows)\n        else:\n            # Floats similar to the example between roughly -2 and +2\n            data[col] = rng.normal(0, 1, size=n_rows)\n    df = pd.DataFrame(data, columns=columns)\n    if scale_cols:\n        scaler = StandardScaler()\n        cols_to_scale = [columns[i] for i in scale_cols if i < len(columns)]\n        df[cols_to_scale] = scaler.fit_transform(df[cols_to_scale])\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_case_1\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1224, in assert_frame_equal\n    assert_series_equal(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1014, in assert_series_equal\n    _testing.assert_almost_equal(\n  File \"pandas/_libs/testing.pyx\", line 52, in pandas._libs.testing.assert_almost_equal\n  File \"pandas/_libs/testing.pyx\", line 172, in pandas._libs.testing.assert_almost_equal\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame.iloc[:, 0] (column name=\"A\") are different\n\nDataFrame.iloc[:, 0] (column name=\"A\") values are different (100.0 %)\n[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n[left]:  [-1.2107360725312915, 1.196779460744187, 0.7780811071310603, 0.010467458840328068, 0.010467458840328068, 1.4759116964862715, -1.2107360725312915, 0.9176472250021025, -0.7920377189181648, -1.175844543063531]\n[right]: [-0.20549386391116023, -1.343049181990797, 1.1155381183748696, -0.16879853106988163, -2.0402605059750907, 0.6751941242795263, 1.2256241168987054, 0.8219754556446407, 0.16145946450162582, -0.24218919675243883]\nAt positional index 0, first diff: -1.2107360725312915 != -0.20549386391116023\n\n======================================================================\nFAIL: test_custom_columns (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 71, in test_custom_columns\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1224, in assert_frame_equal\n    assert_series_equal(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1014, in assert_series_equal\n    _testing.assert_almost_equal(\n  File \"pandas/_libs/testing.pyx\", line 52, in pandas._libs.testing.assert_almost_equal\n  File \"pandas/_libs/testing.pyx\", line 172, in pandas._libs.testing.assert_almost_equal\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame.iloc[:, 0] (column name=\"test\") are different\n\nDataFrame.iloc[:, 0] (column name=\"test\") values are different (100.0 %)\n[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n[left]:  [61, 25, 97, 94, 6, 18, 19, 17, 58, 34]\n[right]: [75, 6, 3, 76, 22, 52, 13, 34, 74, 76]\nAt positional index 0, first diff: 61 != 75\n\n----------------------------------------------------------------------\nRan 7 tests in 0.043s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport re\nimport pandas as pd\nfrom nltk.stem import PorterStemmer\n\ndef task_func(text_series):\n    stemmer = PorterStemmer()\n    def process_text(text):\n        text = text.lower()\n        text = re.sub(r'[^a-z0-9\\s]', '', text)\n        words = text.split()\n        stems = [stemmer.stem(word) for word in words]\n        return ' '.join(stems)\n    return text_series.apply(process_text)\n```", "match": {"category": "success"}}
{"result": "```python\nimport csv\nimport random\nimport string\n\ndef task_func(file_path,\n          num_rows,\n          gender=['Male', 'Female', 'Non-Binary'],\n          countries=['USA', 'UK', 'Canada', 'Australia', 'India'],\n          seed=None):\n    if seed is not None:\n        random.seed(seed)\n    headers = ['Name', 'Age', 'Gender', 'Country']\n    with open(file_path, mode='w', newline='') as f:\n        writer = csv.writer(f)\n        writer.writerow(headers)\n        if num_rows > 0:\n            for _ in range(num_rows):\n                name = ''.join(random.choices(string.ascii_uppercase, k=5))\n                age = random.randint(20, 60)\n                gen = random.choice(gender)\n                country = random.choice(countries)\n                writer.writerow([name, age, gen, country])\n    return file_path\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\ndef task_func(file_path, num_rows, data_dimensions=5, random_seed=None):\n    if random_seed is not None:\n        np.random.seed(random_seed)\n    data = np.random.rand(num_rows, data_dimensions)\n    columns = [f'Feature_{i+1}' for i in range(data_dimensions)]\n    df = pd.DataFrame(data, columns=columns)\n    df.to_csv(file_path, index=False)\n    return file_path\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport json\nfrom collections import defaultdict\nimport string\ndef task_func(json_string):\n    try:\n        obj = json.loads(json_string)\n        text = obj.get(\"text\")\n        if not isinstance(text, str):\n            return {}\n    except (json.JSONDecodeError, TypeError):\n        return {}\n\n    # Convert to lowercase\n    text = text.lower()\n    # Remove all punctuation and non-alphanumeric characters except spaces\n    pattern = f\"[{re.escape(string.punctuation)}]\"\n    text = re.sub(pattern, \"\", text)  # remove punctuation\n    text = re.sub(r\"[^a-z0-9 ]\", \"\", text)  # remove any other non-alphanumeric except space\n\n    words = text.split()\n    counts = defaultdict(int)\n    for word in words:\n        counts[word] += 1\n\n    return dict(counts)\n```", "match": {"category": "success"}}
{"result": "```python\nimport sqlite3\nimport random\ndef task_func(db_path,\n          num_entries,\n          users=['Alice', 'Bob', 'Charlie', 'Dave', 'Eve'],\n          countries=['USA', 'UK', 'Canada', 'Australia', 'India'],\n          random_seed=None):\n    if random_seed is not None:\n        random.seed(random_seed)\n    conn = sqlite3.connect(db_path)\n    c = conn.cursor()\n    c.execute(\"DROP TABLE IF EXISTS users\")\n    c.execute(\"\"\"\n        CREATE TABLE users (\n            id INTEGER PRIMARY KEY,\n            name TEXT,\n            age INTEGER,\n            country TEXT\n        )\n    \"\"\")\n    for i in range(num_entries):\n        name = random.choice(users)\n        age = random.randint(20, 60)\n        country = random.choice(countries)\n        c.execute(\"INSERT INTO users (id, name, age, country) VALUES (?, ?, ?, ?)\",\n                  (i + 1, name, age, country))\n    conn.commit()\n    conn.close()\n    return db_path\n```", "match": {"category": "success"}}
{"result": "```python\nimport random\nimport re\n# Constants\nWORD_LIST = [\"sample\", \"text\", \"contains\", \"several\", \"words\", \"including\"]\ndef task_func(n_sentences):\n    sentences = []\n    for _ in range(n_sentences):\n        length = random.randint(3, 8)\n        words = random.choices(WORD_LIST, k=length)\n        sentence = ' '.join(words) + '.'\n        # remove all non-alphanumeric except spaces and periods at end\n        sentence = re.sub(r'[^A-Za-z0-9 ]', '', sentence[:-1]) + '.'  # remove punctuation except ending period\n        sentences.append(sentence.lower())\n    return ' '.join(sentences)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_sentence_length (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 31, in test_sentence_length\nAssertionError: False is not true\n\n----------------------------------------------------------------------\nRan 5 tests in 0.002s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport csv\nimport random\nfrom faker import Faker\n\ndef task_func(file_path, num_rows, random_seed=None):\n    if not (isinstance(num_rows, int) and num_rows >= 0):\n        raise ValueError(\"num_rows must be an integer >= 0\")\n    if random_seed is not None:\n        random.seed(random_seed)\n    faker = Faker()\n    if random_seed is not None:\n        Faker.seed(random_seed)\n    with open(file_path, mode='w', newline='', encoding='utf-8') as f:\n        writer = csv.writer(f)\n        writer.writerow(['Name', 'Age', 'Address', 'Email'])\n        for _ in range(num_rows):\n            name = faker.name()\n            age = random.randint(20, 60)\n            address = faker.address().replace('\\n', ', ')\n            email = faker.email()\n            writer.writerow([name, str(age), address, email])\n    return file_path\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport numpy as np\nfrom collections import Counter\nfrom Levenshtein import ratio\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\n\ndef task_func(text1, text2):\n    # Clean texts\n    t1 = ALPHANUMERIC.sub(' ', text1).lower()\n    t2 = ALPHANUMERIC.sub(' ', text2).lower()\n    \n    # Tokenize on spaces and filter empty tokens\n    tokens1 = [tok for tok in t1.split() if tok]\n    tokens2 = [tok for tok in t2.split() if tok]\n    \n    # Term frequencies\n    tf1 = Counter(tokens1)\n    tf2 = Counter(tokens2)\n    \n    # Get all unique terms\n    terms = list(set(tf1.keys()) | set(tf2.keys()))\n    \n    # Create frequency vectors\n    vec1 = np.array([tf1.get(term, 0) for term in terms], dtype=float)\n    vec2 = np.array([tf2.get(term, 0) for term in terms], dtype=float)\n    \n    # Compute cosine similarity\n    norm1 = np.linalg.norm(vec1)\n    norm2 = np.linalg.norm(vec2)\n    if norm1 == 0 or norm2 == 0:\n        cosine_sim = 0.0\n    else:\n        cosine_sim = float(np.dot(vec1, vec2) / (norm1 * norm2))\n    \n    # Compute Levenshtein ratio\n    lev_ratio = ratio(t1, t2)\n    \n    return (cosine_sim, lev_ratio)\n```", "match": {"category": "success"}}
{"result": "```python\nimport collections\nimport pandas as pd\ndef task_func(obj_list, attr):\n    values = [getattr(obj, attr, None) for obj in obj_list if hasattr(obj, attr)]\n    counter = collections.Counter(values)\n    if not counter:\n        return pd.DataFrame(columns=['attribute', 'count'])\n    df = pd.DataFrame(counter.items(), columns=['attribute', 'count'])\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport os\nimport string\nimport random\ndef task_func(input_string, directory='./text_files'):\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n    lines = input_string.splitlines()\n    file_paths = []\n    translator = str.maketrans('', '', string.punctuation)\n    for i, line in enumerate(lines):\n        cleaned_line = line.translate(translator).strip()\n        if cleaned_line:\n            filename = f\"line_{i+1}_{random.randint(1000,9999)}.txt\"\n            filepath = os.path.join(directory, filename)\n            with open(filepath, 'w', encoding='utf-8') as f:\n                f.write(cleaned_line)\n            file_paths.append(filepath)\n    return file_paths\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_empty_string (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 45, in test_empty_string\nAssertionError: 0 != 1\n\n----------------------------------------------------------------------\nRan 5 tests in 0.002s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport heapq\nimport random\ndef task_func(obj_list, attr, top_n=5, seed=None):\n    if seed is not None:\n        random.seed(seed)\n    values = [getattr(obj, attr) for obj in obj_list if hasattr(obj, attr)]\n    if not values:\n        return [], None\n    top_values = heapq.nlargest(top_n, values)\n    random_value = random.choice(values)\n    return top_values, random_value\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nfrom nltk.corpus import stopwords\nfrom collections import Counter\nSTOPWORDS = set(stopwords.words('english'))\ndef task_func(input_string):\n    lines = input_string.splitlines()\n    words = []\n    for line in lines:\n        line_words = re.findall(r'\\b\\w+\\b', line.lower())\n        filtered_words = [w for w in line_words if w not in STOPWORDS]\n        words.extend(filtered_words)\n    return dict(Counter(words))\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 6, in test_case_1\nAssertionError: {'line': 2, 'one': 1, 'two': 1} != {'This': 2, 'line': 2, 'one': 1, 'two': 1}\n- {'line': 2, 'one': 1, 'two': 1}\n+ {'This': 2, 'line': 2, 'one': 1, 'two': 1}\n?  +++++++++++\n\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 14, in test_case_3\nAssertionError: {} != {'This': 3}\n- {}\n+ {'This': 3}\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 18, in test_case_4\nAssertionError: {'test': 2} != {'This': 2, 'test': 2}\n- {'test': 2}\n+ {'This': 2, 'test': 2}\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 22, in test_case_5\nAssertionError: {'stop': 2} != {'Stop': 2}\n- {'stop': 2}\n?   ^\n\n+ {'Stop': 2}\n?   ^\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.002s\n\nFAILED (failures=4)"}}
{"result": "```python\nimport pandas as pd\nimport statistics\nimport random\ndef task_func(students, subjects, seed=None):\n    if seed is not None:\n        random.seed(seed)\n    data = []\n    for student in students:\n        grades = [random.randint(0, 100) for _ in subjects]\n        avg = statistics.mean(grades)\n        row = [student] + grades + [avg]\n        data.append(row)\n    columns = ['Student'] + subjects + ['Average Grade']\n    df = pd.DataFrame(data, columns=columns)\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport textwrap\nimport re\ndef task_func(input_string, width):\n    lines = input_string.splitlines()\n    wrapped_lines = [textwrap.fill(line, width) for line in lines]\n    return '\\n'.join(wrapped_lines)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_case_1\nAssertionError: 'Hello\\nworld\\nThis is a\\ntest\\nstring\\nHappy\\ncoding!' != 'Hello\\nworld This\\nwas a test\\nstring\\nHappy\\ncoding!'\n  Hello\n+ world This\n+ was a test\n- world\n- This is a\n- test\n  string\n  Happy\n  coding!\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 29, in test_case_4\nAssertionError: 'Hello world This is a test string Happy coding!' != 'Hello world This was a test string Happy coding!'\n- Hello world This is a test string Happy coding!\n?                  ^\n+ Hello world This was a test string Happy coding!\n?                  ^^\n\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 36, in test_case_5\nAssertionError: 'Hello,\\n@world!\\n#This$is^a\\n&test*stri\\nng' != 'Hello,\\n@world!\\n#This$was^a&test*string'\n  Hello,\n  @world!\n+ #This$was^a&test*string- #This$is^a\n- &test*stri\n- ng\n\n----------------------------------------------------------------------\nRan 5 tests in 0.004s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport random\nimport string\ndef task_func(max_length, n_samples, seed=None):\n    if max_length < 1:\n        raise ValueError(\"max_length must be at least 1\")\n    if seed is not None:\n        random.seed(seed)\n    result = []\n    for _ in range(n_samples):\n        length = random.randint(1, max_length)\n        s = ''.join(random.choices(string.ascii_lowercase, k=length))\n        result.append(s)\n    return result\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport shutil\nimport string\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    summary = {}\n    invalid_dir = os.path.join(directory_path, \"Invalid\")\n    if not os.path.exists(invalid_dir):\n        os.makedirs(invalid_dir)\n\n    for entry in os.listdir(directory_path):\n        full_path = os.path.join(directory_path, entry)\n        if os.path.isfile(full_path):\n            # Check for invalid characters in the file name (excluding extension)\n            name, ext = os.path.splitext(entry)\n            if any(char in INVALID_CHARACTERS for char in entry):\n                # Move to Invalid directory\n                dest_dir = invalid_dir\n                summary_key = \"Invalid\"\n            else:\n                # Use extension without dot as directory name, default to \"NoExtension\"\n                ext_dir = ext[1:].lower() if ext else \"NoExtension\"\n                dest_dir = os.path.join(directory_path, ext_dir)\n                if not os.path.exists(dest_dir):\n                    os.makedirs(dest_dir)\n                summary_key = ext_dir\n\n            dest_path = os.path.join(dest_dir, entry)\n            # If destination exists, add suffix to avoid overwrite\n            temp_path = dest_path\n            suffix = 1\n            while os.path.exists(temp_path):\n                name_only, ext_only = os.path.splitext(entry)\n                temp_filename = f\"{name_only}_{suffix}{ext_only}\"\n                temp_path = os.path.join(dest_dir, temp_filename)\n                suffix += 1\n            dest_path = temp_path\n\n            shutil.move(full_path, dest_path)\n            summary[summary_key] = summary.get(summary_key, 0) + 1\n\n    return summary\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_invalid_path (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 36, in test_invalid_path\nAssertionError: FileNotFoundError not raised\n\n----------------------------------------------------------------------\nRan 5 tests in 0.004s\n\nFAILED (failures=1)"}}
{"result": "```python\nfrom functools import reduce\nfrom itertools import permutations\nimport math\ndef task_func(numbers):\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list of integers.\")\n    if any(not isinstance(x, int) for x in numbers):\n        raise TypeError(\"Input must be a list of integers.\")\n    if any(x < 0 for x in numbers):\n        raise ValueError(\"Input numbers must be non-negative.\")\n    if len(numbers) == 0:\n        return [], []\n    perms = list(permutations(numbers))\n    sums = []\n    for perm in perms:\n        sums.append(sum(math.factorial(x) for x in perm))\n    return sums, perms\n```", "match": {"category": "success"}}
{"result": "```python\nimport random\nimport string\nimport collections\n# Constants\nVALID_CHARACTERS = string.ascii_letters + string.digits\ndef task_func(n_strings, string_length):\n    all_chars = []\n    for _ in range(n_strings):\n        rand_str = ''.join(random.choices(VALID_CHARACTERS, k=string_length))\n        all_chars.extend(rand_str)\n    return dict(collections.Counter(all_chars))\n```", "match": {"category": "success"}}
{"result": "```python\nfrom functools import reduce\nfrom itertools import combinations\nimport numpy as np\ndef task_func(shape=(3, 3), low=1, high=10, seed=None):\n    if high <= low:\n        raise ValueError(\"high must be greater than low\")\n    if seed is not None:\n        np.random.seed(seed)\n    mat = np.random.randint(low, high, size=shape)\n    flat = mat.flatten()\n    pairs = combinations(flat, 2)\n    total = sum(x * y for x, y in pairs)\n    return total, mat\n```", "match": {"category": "success"}}
{"result": "```python\nimport warnings\nimport os\nimport glob\nimport shutil\nimport time\ndef task_func(SOURCE_DIR, DEST_DIR, EXTENSIONS):\n    transferred_files = []\n    \n    if not os.path.exists(DEST_DIR):\n        try:\n            os.makedirs(DEST_DIR)\n        except Exception as e:\n            warnings.warn(f\"Could not create destination directory '{DEST_DIR}': {e}\")\n            return transferred_files\n\n    for ext in EXTENSIONS:\n        pattern = os.path.join(SOURCE_DIR, f\"*{ext}\")\n        for filepath in glob.glob(pattern):\n            filename = os.path.basename(filepath)\n            dest_path = os.path.join(DEST_DIR, filename)\n            try:\n                shutil.move(filepath, dest_path)\n                transferred_files.append(filename)\n                # Optionally wait a tiny bit to avoid potential file system issues\n                time.sleep(0.01)\n            except Exception as e:\n                warnings.warn(f\"Failed to transfer '{filename}': {e}\")\n\n    return transferred_files\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_exception_handling (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 50, in test_exception_handling\nAssertionError: False is not true\n\n----------------------------------------------------------------------\nRan 5 tests in 0.074s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport string\nimport random\nfrom collections import Counter\ndef task_func(n, seed=None):\n    if seed is not None:\n        random.seed(seed)\n    letters = [random.choice(string.ascii_lowercase) for _ in range(n)]\n    return Counter(letters)\n```", "match": {"category": "success"}}
{"result": "```python\nimport warnings\nimport sklearn.model_selection as model_selection\nimport sklearn.svm as svm\nimport sklearn.datasets as datasets\nimport sklearn.metrics as metrics\n\ndef task_func():\n    warnings.simplefilter('always', UserWarning)\n    iris = datasets.load_iris()\n    X_train, X_test, y_train, y_test = model_selection.train_test_split(\n        iris.data, iris.target, test_size=0.33, random_state=42)\n    clf = svm.SVC()\n    clf.fit(X_train, y_train)\n    y_pred = clf.predict(X_test)\n    accuracy = metrics.accuracy_score(y_test, y_pred)\n    warning_msg = None\n    if accuracy < 0.9:\n        warning_msg = f\"Warning: Accuracy is below 0.9 ({accuracy:.3f})\"\n        warnings.warn(warning_msg, UserWarning)\n    return (accuracy, warning_msg)\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport random\nimport string\ndef task_func(n, pattern, seed=None):\n    if seed is not None:\n        random.seed(seed)\n    s = ''.join(random.choices(string.ascii_letters + string.digits, k=n))\n    return re.findall(pattern, s)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_valid_pattern_matching (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 23, in test_valid_pattern_matching\nAssertionError: Lists differ: ['zaZsw', 'mJkhA', 'zFjSl', 'JToGR', 'nXIlK[60 chars]FzX'] != ['mrKBk', 'BqJOl', 'NJlwV', 'UfHVA', 'LGkjn[60 chars]lqL']\n\nFirst differing element 0:\n'zaZsw'\n'mrKBk'\n\n- ['zaZsw',\n-  'mJkhA',\n-  'zFjSl',\n-  'JToGR',\n-  'nXIlK',\n-  'ZjoHj',\n-  'WVwQV',\n-  'DdMuL',\n-  'mVRIe',\n-  'okrHG',\n-  'aaElL',\n-  'XfFzX']\n+ ['mrKBk',\n+  'BqJOl',\n+  'NJlwV',\n+  'UfHVA',\n+  'LGkjn',\n+  'vubDv',\n+  'GSVAa',\n+  'kXLls',\n+  'RKlVy',\n+  'vZcoh',\n+  'FnVZW',\n+  'JQlqL']\n\n----------------------------------------------------------------------\nRan 5 tests in 0.005s\n\nFAILED (failures=1)"}}
{"result": "```python\nfrom collections import Counter\nfrom random import choice, seed\n# Constants\nPOSSIBLE_ITEMS = ['apple', 'banana', 'cherry', 'date', 'elderberry']\ndef task_func(list_of_lists):\n    seed(0)\n    baskets = []\n    for lst in list_of_lists:\n        freq = len(lst)\n        items = [choice(POSSIBLE_ITEMS) for _ in range(freq)]\n        baskets.append(Counter(items))\n    return baskets\n```", "match": {"category": "success"}}
{"result": "```python\nimport random\nimport string\nfrom collections import defaultdict\ndef task_func(n, seed=None):\n    random.seed(seed)\n    letters = [random.choice(string.ascii_lowercase) for _ in range(n)]\n    d = defaultdict(list)\n    for letter in letters:\n        d[letter].append(letter)\n    return d\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport math\n# Constants\nPOSSIBLE_NUMBERS = np.arange(1, 11)\ndef task_func(list_of_lists):\n    sums = []\n    for lst in list_of_lists:\n        n = len(lst)\n        sums.append(np.sum(np.square(POSSIBLE_NUMBERS[:n])))\n    return {'sums': sums}\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 6, in test_case_1\nAssertionError: {'sums': []} != []\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 10, in test_case_2\nAssertionError: {'sums': [0, 0, 0]} != [0, 0, 0]\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 15, in test_case_3\nAssertionError: {'sums': [1, 5, 14]} != [1, 5, 14]\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 19, in test_case_4\nAssertionError: {'sums': [14, 30]} != [14, 30]\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_case_5\nAssertionError: {'sums': [385, 55]} != [385, 55]\n\n----------------------------------------------------------------------\nRan 5 tests in 0.002s\n\nFAILED (failures=5)"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\ndef task_func(fruit_data):\n    if not fruit_data:\n        return pd.DataFrame(columns=['Total Count', 'Average Count'])\n    df = pd.DataFrame(fruit_data, columns=['Fruit', 'Count'])\n    grouped = df.groupby('Fruit')['Count']\n    result = pd.DataFrame({\n        'Total Count': grouped.sum(),\n        'Average Count': grouped.mean()\n    })\n    return result\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 38, in test_case_1\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1171, in assert_frame_equal\n    assert_index_equal(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 335, in assert_index_equal\n    assert_attr_equal(\"names\", left, right, obj=obj)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 415, in assert_attr_equal\n    raise_assert_detail(obj, msg, left_attr, right_attr)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame.index are different\n\nAttribute \"names\" are different\n[left]:  ['Fruit']\n[right]: [None]\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 63, in test_case_2\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1171, in assert_frame_equal\n    assert_index_equal(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 335, in assert_index_equal\n    assert_attr_equal(\"names\", left, right, obj=obj)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 415, in assert_attr_equal\n    raise_assert_detail(obj, msg, left_attr, right_attr)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame.index are different\n\nAttribute \"names\" are different\n[left]:  ['Fruit']\n[right]: [None]\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 93, in test_case_3\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1171, in assert_frame_equal\n    assert_index_equal(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 335, in assert_index_equal\n    assert_attr_equal(\"names\", left, right, obj=obj)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 415, in assert_attr_equal\n    raise_assert_detail(obj, msg, left_attr, right_attr)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame.index are different\n\nAttribute \"names\" are different\n[left]:  ['Fruit']\n[right]: [None]\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 115, in test_case_4\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1171, in assert_frame_equal\n    assert_index_equal(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 335, in assert_index_equal\n    assert_attr_equal(\"names\", left, right, obj=obj)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 415, in assert_attr_equal\n    raise_assert_detail(obj, msg, left_attr, right_attr)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame.index are different\n\nAttribute \"names\" are different\n[left]:  ['Fruit']\n[right]: [None]\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 127, in test_case_5\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1171, in assert_frame_equal\n    assert_index_equal(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 335, in assert_index_equal\n    assert_attr_equal(\"names\", left, right, obj=obj)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 415, in assert_attr_equal\n    raise_assert_detail(obj, msg, left_attr, right_attr)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame.index are different\n\nAttribute \"names\" are different\n[left]:  ['Fruit']\n[right]: [None]\n\n----------------------------------------------------------------------\nRan 6 tests in 0.021s\n\nFAILED (failures=5)"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nfrom scipy.stats import zscore\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data):\n    df = pd.DataFrame(data, columns=['Item', 'Count', 'Weight'])\n    df['Normalized Count'] = zscore(df['Count'].astype(float))\n    scaler = MinMaxScaler()\n    df['Normalized Weight'] = scaler.fit_transform(df[['Weight']].astype(float))\n    return df[['Item', 'Normalized Count', 'Normalized Weight']]\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_return_value (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/internals/construction.py\", line 934, in _finalize_columns_and_data\n    columns = _validate_or_indexify_columns(contents, columns)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/internals/construction.py\", line 981, in _validate_or_indexify_columns\n    raise AssertionError(\nAssertionError: 3 columns passed, passed data had 4 columns\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 57, in test_return_value\n  File \"<bigcode>\", line 7, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 782, in __init__\n    arrays, columns, index = nested_data_to_arrays(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/internals/construction.py\", line 498, in nested_data_to_arrays\n    arrays, columns = to_arrays(data, columns, dtype=dtype)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/internals/construction.py\", line 840, in to_arrays\n    content, columns = _finalize_columns_and_data(arr, columns, dtype)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/internals/construction.py\", line 937, in _finalize_columns_and_data\n    raise ValueError(err) from err\nValueError: 3 columns passed, passed data had 4 columns\n\n----------------------------------------------------------------------\nRan 7 tests in 0.119s\n\nFAILED (errors=1)"}}
{"result": "```python\nimport numpy as np\nfrom sklearn.cluster import KMeans\ndef task_func(data, n_clusters=2, random_state=0):\n    coords = np.array([(x, y) for _, x, y in data])\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state)\n    kmeans.fit(coords)\n    return kmeans.labels_\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport string\ndef task_func(text1, text2):\n    pattern = '[' + re.escape(string.punctuation) + ']'\n    cleaned_text1 = re.sub(pattern, '', text1)\n    cleaned_text2 = re.sub(pattern, '', text2)\n    return cleaned_text1, cleaned_text2\n```", "match": {"category": "success"}}
{"result": "```python\nfrom itertools import cycle\nfrom random import choice, seed\ndef task_func(n_colors, colors=['Red', 'Green', 'Blue', 'Yellow', 'Purple'], rng_seed=None):\n    if n_colors <= 0:\n        return []\n    if rng_seed is not None:\n        seed(rng_seed)\n    cyclic_colors = cycle(colors)\n    pattern = []\n    for i in range(n_colors):\n        if i % 2 == 0:\n            pattern.append(next(cyclic_colors))\n        else:\n            pattern.append(choice(colors))\n    return pattern\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom itertools import cycle\nfrom random import randint, seed\n\ndef task_func(\n    n_grades,\n    students=['Alice', 'Bob', 'Charlie', 'David', 'Eve'],\n    grade_range=range(1, 11),\n    rng_seed=None\n):\n    if not students:\n        raise ValueError(\"If list of students is empty.\")\n    if rng_seed is not None:\n        seed(rng_seed)\n    student_cycle = cycle(students)\n    data = []\n    for _ in range(n_grades):\n        student = next(student_cycle)\n        grade = randint(min(grade_range), max(grade_range))\n        data.append({\"Student\": student, \"Grade\": grade})\n    return pd.DataFrame(data)\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nimport itertools\ndef task_func(data_list=[('a', 1, 2.1), ('b', 2, 3.2), ('c', 3, 4.3), ('d', 4, 5.4), ('e', 5, 6.5)]):\n    if not data_list:\n        return pd.DataFrame(columns=['Mean Value'])\n    # Determine the max length of tuples to cover all positions\n    max_len = max(len(t) for t in data_list)\n    # Collect values for each position\n    values_per_pos = [[] for _ in range(max_len)]\n    for tup in data_list:\n        for i in range(max_len):\n            if i < len(tup):\n                val = tup[i]\n                if isinstance(val, (int, float)) and not isinstance(val, bool):\n                    values_per_pos[i].append(val)\n                else:\n                    try:\n                        num = float(val)\n                        values_per_pos[i].append(num)\n                    except:\n                        continue\n    means = []\n    for vals in values_per_pos:\n        if vals:\n            means.append(np.mean(vals))\n        else:\n            means.append(np.nan)\n    index = [f'Position {i}' for i in range(max_len)]\n    return pd.DataFrame({'Mean Value': means}, index=index)\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport itertools\n\ndef task_func(data_list, file_name):\n    if not data_list:\n        with open(file_name, 'w') as f:\n            pass\n        return []\n\n    max_len = max(len(t) for t in data_list)\n    values = []\n    # Will collect numeric values for each position (starting from pos=1)\n    for pos in range(1, max_len):\n        col_vals = []\n        for t in data_list:\n            if pos < len(t):\n                val = t[pos]\n                if isinstance(val, (int, float, np.integer, np.floating)):\n                    col_vals.append(val)\n                else:\n                    col_vals.append(np.nan)\n            else:\n                col_vals.append(np.nan)\n        values.append(col_vals)\n\n    means = []\n    with open(file_name, 'w') as f:\n        for i, col_vals in enumerate(values, 1):\n            arr = np.array(col_vals, dtype=float)\n            mean_val = np.nanmean(arr)\n            means.append(mean_val)\n            f.write(f\"Position {i}: {mean_val}\\n\")\n\n    return means\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_function_with_non_numeric_data (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 35, in test_function_with_non_numeric_data\nAssertionError: Lists differ: [nan, nan] != [nan, nan]\n\nFirst differing element 0:\nnan\nnan\n\n  [nan, nan]\n\n----------------------------------------------------------------------\nRan 5 tests in 0.004s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport numpy as np\nimport itertools\ndef task_func(data_list):\n    if not data_list:\n        return []\n    max_len = max(len(t) for t in data_list)\n    padded = [t + (0,)*(max_len - len(t)) for t in data_list]\n    unzip = list(zip(*padded))\n    means = []\n    for group in unzip:\n        numeric_vals = []\n        for v in group:\n            try:\n                val = float(v)\n                numeric_vals.append(val)\n            except (ValueError, TypeError):\n                continue\n        if numeric_vals:\n            means.append(np.mean(numeric_vals))\n        else:\n            means.append(np.nan)\n    return means\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_uneven_tuples (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_uneven_tuples\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/numpy/testing/_private/utils.py\", line 583, in assert_almost_equal\n    return assert_array_almost_equal(actual, desired, decimal, err_msg)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/numpy/testing/_private/utils.py\", line 1046, in assert_array_almost_equal\n    assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/numpy/testing/_private/utils.py\", line 844, in assert_array_compare\n    raise AssertionError(msg)\nAssertionError: \nArrays are not almost equal to 7 decimals\n\nMismatched elements: 3 / 4 (75%)\nMax absolute difference: 4.8\nMax relative difference: 0.8\n x: array([nan, 2.4, 2.8, 1.2])\n y: array([      nan, 3.       , 4.6666667, 6.       ])\n\n----------------------------------------------------------------------\nRan 5 tests in 0.005s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport csv\nimport os\ndef task_func(data, file_path, headers):\n    if file_path is None:\n        raise ValueError(\"file_path cannot be None\")\n    abs_path = os.path.abspath(file_path)\n    with open(abs_path, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(headers)\n        for row in data:\n            row_padded = list(row) + [None] * (len(headers) - len(row))\n            writer.writerow(row_padded)\n    return abs_path\n```", "match": {"category": "success"}}
{"result": "```python\nfrom itertools import tee\nfrom scipy.spatial import distance\n\ndef task_func(points):\n    if len(points) < 2:\n        return []\n    # Normalize points: if a point has a single number, convert it to (num, num)\n    norm_points = [(p, p) if isinstance(p, (int, float)) else (p[0], p[1]) for p in points]\n    a, b = tee(norm_points)\n    next(b, None)\n    return [distance.euclidean(p1, p2) for p1, p2 in zip(a, b)]\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport random\ndef task_func(data, columns=['Name', 'Age', 'Occupation'], fill_missing=False, num_range=(0, 100), seed=None):\n    if seed is not None:\n        random.seed(seed)\n    rows = []\n    n_cols = len(columns)\n    for tup in data:\n        row = list(tup) + [None]*(n_cols - len(tup))\n        rows.append(row)\n    df = pd.DataFrame(rows, columns=columns)\n    if fill_missing:\n        for col in df.columns:\n            if pd.api.types.is_numeric_dtype(df[col]):\n                missing = df[col].isna()\n                n_missing = missing.sum()\n                if n_missing > 0:\n                    random_values = [random.uniform(*num_range) for _ in range(n_missing)]\n                    df.loc[missing, col] = random_values\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport collections\nimport operator\nimport os\nimport shutil\ndef task_func(data_dict, source_directory, backup_directory):\n    # 1. Update dictionary by adding a key 'a' with value 1\n    data_dict['a'] = 1\n\n    # 2. Sort dictionary by frequency of its values in descending order\n    values = list(data_dict.values())\n    freq_counter = collections.Counter(values)\n\n    # Build a list with keys and their corresponding frequency of value\n    value_frequencies = [(key, freq_counter[val]) for key, val in data_dict.items()]\n    value_frequencies.sort(key=lambda x: x[1], reverse=True)\n\n    # 3. Back up all files from source_directory to backup_directory\n    backup_status = False\n    try:\n        if not os.path.exists(backup_directory):\n            os.makedirs(backup_directory)\n        for item in os.listdir(source_directory):\n            src_path = os.path.join(source_directory, item)\n            dst_path = os.path.join(backup_directory, item)\n            if os.path.isfile(src_path):\n                shutil.copy2(src_path, dst_path)\n        backup_status = True\n    except Exception:\n        backup_status = False\n\n    return data_dict, value_frequencies, backup_status\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_normal_operation (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_normal_operation\nAssertionError: Lists differ: [('key1', 1), ('key2', 1), ('a', 1)] != [('value1', 1), ('value2', 1), (1, 1)]\n\nFirst differing element 0:\n('key1', 1)\n('value1', 1)\n\n- [('key1', 1), ('key2', 1), ('a', 1)]\n?    ^ -          ^ -         ^^^\n\n+ [('value1', 1), ('value2', 1), (1, 1)]\n?    ^^^^           ^^^^          ^\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.004s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\n\ndef task_func(data, n_components=2):\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Input data must be a pandas DataFrame.\")\n    if data.empty:\n        raise ValueError(\"Input data is empty.\")\n    if not all(pd.api.types.is_numeric_dtype(dtype) for dtype in data.dtypes):\n        raise ValueError(\"Input data contains non-numeric columns.\")\n    if n_components > data.shape[1]:\n        raise ValueError(\"n_components cannot be greater than the number of columns in the data.\")\n    \n    scaler = StandardScaler()\n    scaled_data = scaler.fit_transform(data)\n    \n    pca = PCA(n_components=n_components)\n    components = pca.fit_transform(scaled_data)\n    \n    cols = [str(i) if n_components == 1 else f\"PC{i+1}\" for i in range(n_components)]\n    result = pd.DataFrame(components, index=data.index, columns=cols)\n    if n_components == 1:\n        result = result.iloc[:, 0]\n    return result\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_varying_components (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_varying_components\nAssertionError: Tuples differ: (5,) != (5, 1)\n\nSecond tuple contains 1 additional elements.\nFirst extra element 1:\n1\n\n- (5,)\n+ (5, 1)\n?    ++\n\n\n----------------------------------------------------------------------\nRan 6 tests in 0.039s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\n\ndef task_func(data, target, test_size=0.2, random_state=None):\n    df = pd.DataFrame(data)\n    if df.empty:\n        raise ValueError(\"Input DataFrame is empty.\")\n    if target not in df.columns:\n        raise ValueError(f\"Target column '{target}' is not in the DataFrame.\")\n    \n    X = df.drop(columns=[target])\n    y = df[target]\n    \n    X_train, X_test, y_train, y_test = train_test_split(\n        X, y, test_size=test_size, random_state=random_state\n    )\n    \n    model = RandomForestRegressor(random_state=random_state)\n    model.fit(X_train, y_train)\n    \n    preds = model.predict(X_test)\n    mse = mean_squared_error(y_test, preds)\n    \n    return mse, model, df\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nfrom scipy.stats import chi2_contingency\n\ndef task_func(data, col1, col2):\n    if data.empty:\n        raise ValueError(\"Input DataFrame is empty.\")\n    if col1 not in data.columns or col2 not in data.columns:\n        raise ValueError(f\"Columns '{col1}' and/or '{col2}' not found in DataFrame.\")\n    # Check if the columns are categorical dtype or object with limited categories\n    for col in [col1, col2]:\n        if not (pd.api.types.is_categorical_dtype(data[col]) or pd.api.types.is_object_dtype(data[col])):\n            raise TypeError(f\"Column '{col}' must be categorical data (categorical dtype or object dtype with categories).\")\n    # Check number of unique categories\n    unique_col1 = data[col1].dropna().unique()\n    unique_col2 = data[col2].dropna().unique()\n    if len(unique_col1) < 2 or len(unique_col2) < 2:\n        raise ValueError(\"Both columns must have at least two categories.\")\n    # Construct contingency table\n    contingency = pd.crosstab(data[col1], data[col2])\n    # Check if any expected frequency < 5 (chi-square assumption)\n    chi2, p, dof, expected = chi2_contingency(contingency)\n    if (expected < 5).any():\n        raise ValueError(\"Some categories have less than 5 expected observations, violating chi-square test assumptions.\")\n    return p\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\n\ndef task_func(data, n_clusters=3, seed=None):\n    if not all(pd.api.types.is_numeric_dtype(dtype) for dtype in data.dtypes):\n        raise ValueError(\"Input DataFrame contains non-numeric entries.\")\n    model = KMeans(n_clusters=n_clusters, n_init=10, random_state=seed)\n    labels = model.fit_predict(data)\n    return labels, model\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport random\n\ndef task_func(csv_file, column_name='data', pattern=r'\\d+[xX]', sample_size=None, seed=42):\n    df = pd.read_csv(csv_file)\n    matches = df[df[column_name].astype(str).str.contains(pattern, regex=True, na=False)]\n    if sample_size is not None and sample_size > 0 and sample_size < len(matches):\n        random.seed(seed)\n        indices = random.sample(list(matches.index), sample_size)\n        return matches.loc[indices]\n    return matches\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_zero_sample_size (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 51, in test_zero_sample_size\nAssertionError: False is not true\n\n----------------------------------------------------------------------\nRan 7 tests in 0.020s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport sqlite3\nimport pandas as pd\nimport os\nimport re\n\ndef task_func(db_file, table_name, column_name, pattern='\\d+[xX]'):\n    if not os.path.exists(db_file):\n        raise ValueError(\"db_file does not exist.\")\n    conn = sqlite3.connect(db_file)\n    try:\n        query = f\"SELECT {column_name} FROM {table_name}\"\n        df = pd.read_sql_query(query, conn)\n        # Extract all matches from each entry in the column\n        matches = df[column_name].apply(lambda x: re.findall(pattern, x) if isinstance(x, str) else [])\n        # Convert the series of lists into a flat list of matches with their row indexes\n        df_matches = matches.explode().dropna().reset_index()\n        df_matches.columns = ['index', 'match']\n        return df_matches\n    finally:\n        conn.close()\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_non_existent_column (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/sql.py\", line 2202, in execute\n    cur.execute(sql, *args)\nsqlite3.OperationalError: no such column: fake_column\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 47, in test_non_existent_column\n  File \"<bigcode>\", line 13, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/sql.py\", line 469, in read_sql_query\n    return pandas_sql.read_query(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/sql.py\", line 2266, in read_query\n    cursor = self.execute(sql, params)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/sql.py\", line 2214, in execute\n    raise ex from exc\npandas.errors.DatabaseError: Execution failed on sql 'SELECT fake_column FROM test_table': no such column: fake_column\n\n======================================================================\nFAIL: test_different_pattern (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 58, in test_different_pattern\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1185, in assert_frame_equal\n    assert_index_equal(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 322, in assert_index_equal\n    _testing.assert_almost_equal(\n  File \"pandas/_libs/testing.pyx\", line 52, in pandas._libs.testing.assert_almost_equal\n  File \"pandas/_libs/testing.pyx\", line 172, in pandas._libs.testing.assert_almost_equal\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame.columns are different\n\nDataFrame.columns values are different (100.0 %)\n[left]:  Index(['index', 'match'], dtype='object')\n[right]: Index(['id', 'test_column'], dtype='object')\nAt positional index 0, first diff: index != id\n\n======================================================================\nFAIL: test_regular_expression_match (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 35, in test_regular_expression_match\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1185, in assert_frame_equal\n    assert_index_equal(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 322, in assert_index_equal\n    _testing.assert_almost_equal(\n  File \"pandas/_libs/testing.pyx\", line 52, in pandas._libs.testing.assert_almost_equal\n  File \"pandas/_libs/testing.pyx\", line 172, in pandas._libs.testing.assert_almost_equal\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame.columns are different\n\nDataFrame.columns values are different (100.0 %)\n[left]:  Index(['index', 'match'], dtype='object')\n[right]: Index(['id', 'test_column'], dtype='object')\nAt positional index 0, first diff: index != id\n\n----------------------------------------------------------------------\nRan 5 tests in 0.016s\n\nFAILED (failures=2, errors=1)"}}
{"result": "```python\nimport pandas as pd\nfrom statsmodels.tsa.stattools import adfuller\ndef task_func(df: pd.DataFrame, column_a: str, column_b: str, column_c: str) -> bool:\n    filtered = df[(df[column_b] > 50) & (df[column_c] == 900)]\n    series = filtered[column_a]\n    if series.empty or series.nunique() == 1:\n        return True\n    result = adfuller(series.dropna())\n    return result[1] < 0.05\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom scipy.stats import chi2_contingency\ndef task_func(df, columns=['A', 'B', 'C'], larger=50, equal=900):\n    if len(columns) != 3:\n        raise ValueError(\"The number of specified columns is not 3.\")\n    if not all(col in df.columns for col in columns):\n        raise ValueError(\"The specified columns are not contained in df.\")\n    filtered = df[(df[columns[1]] > larger) & (df[columns[2]] == equal)]\n    if filtered.empty:\n        raise ValueError(\"Insufficient data for the test (no rows meeting the criteria).\")\n    contingency = pd.crosstab(filtered[columns[0]], filtered[columns[1]])\n    if contingency.size == 0:\n        raise ValueError(\"Insufficient data for the test after filtering.\")\n    _, p_value, _, _ = chi2_contingency(contingency)\n    return p_value\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\n\ndef task_func(df, col_a='A', col_b='B', col_c='C', seed=None):\n    if df.empty:\n        return None\n    # Check if required columns exist\n    if not all(col in df.columns for col in [col_a, col_b, col_c]):\n        return None\n    # Filter on conditions\n    filtered_df = df[(df[col_b] > 50) & (df[col_c] == 900)]\n    if filtered_df.empty:\n        return None\n    # Check for numeric data in selected columns\n    if not (pd.api.types.is_numeric_dtype(filtered_df[col_a]) and \n            pd.api.types.is_numeric_dtype(filtered_df[col_b])):\n        return None\n    X = filtered_df[[col_a]].to_numpy()\n    y = filtered_df[col_b].to_numpy()\n    if len(X) < 2:\n        # Not enough data to train and test\n        return None\n    try:\n        X_train, X_test, y_train, y_test = train_test_split(\n            X, y, test_size=0.2, random_state=seed)\n        model = LinearRegression()\n        model.fit(X_train, y_train)\n        predictions = model.predict(X_test)\n        return predictions, model\n    except Exception:\n        return None\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom collections import Counter\ndef task_func(data):\n    required_keys = {'Name', 'Age', 'Scores'}\n    if not required_keys.issubset(data.keys()):\n        raise ValueError(\"Input dictionary must have keys: 'Name', 'Age', 'Scores'\")\n    \n    names = data['Name']\n    ages = data['Age']\n    scores_list = data['Scores']\n    \n    if not (len(names) == len(ages) == len(scores_list)):\n        raise ValueError(\"All input lists must be the same length\")\n    \n    df = pd.DataFrame({'Name': names, 'Age': ages, 'Scores': scores_list})\n    df_sorted = df.sort_values(['Name', 'Age'], ascending=[True, True]).reset_index(drop=True)\n    \n    avg_scores = pd.Series(\n        [sum(scores)/len(scores) if scores else float('nan') for scores in df['Scores']],\n        index=df['Name']\n    )\n    \n    if len(ages) == 0:\n        most_common_age = None\n    else:\n        count = Counter(ages)\n        most_common_age = count.most_common(1)[0][0]\n    \n    return df_sorted, avg_scores, most_common_age\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_all_same_age (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 39, in test_all_same_age\n  File \"<bigcode>\", line 7, in task_func\nValueError: Input dictionary must have keys: 'Name', 'Age', 'Scores'\n\n======================================================================\nERROR: test_correct_processing (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_correct_processing\n  File \"<bigcode>\", line 7, in task_func\nValueError: Input dictionary must have keys: 'Name', 'Age', 'Scores'\n\n======================================================================\nERROR: test_duplicate_names_different_ages (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 57, in test_duplicate_names_different_ages\n  File \"<bigcode>\", line 7, in task_func\nValueError: Input dictionary must have keys: 'Name', 'Age', 'Scores'\n\n======================================================================\nERROR: test_empty_data (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_empty_data\n  File \"<bigcode>\", line 7, in task_func\nValueError: Input dictionary must have keys: 'Name', 'Age', 'Scores'\n\n======================================================================\nERROR: test_no_common_age (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 48, in test_no_common_age\n  File \"<bigcode>\", line 7, in task_func\nValueError: Input dictionary must have keys: 'Name', 'Age', 'Scores'\n\n----------------------------------------------------------------------\nRan 6 tests in 0.002s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nimport itertools\ndef task_func(T1, row_num=50, seed=None):\n    flat_elements = list(itertools.chain.from_iterable(T1))\n    integers = []\n    for el in flat_elements:\n        try:\n            integers.append(int(el))\n        except:\n            integers.append(0)\n    n_cols = sum(integers)\n    rng = np.random.default_rng(seed)\n    data = rng.integers(1, 101, size=(row_num, n_cols))\n    col_names = [f\"Col_{i+1}\" for i in range(n_cols)]\n    df = pd.DataFrame(data, columns=col_names)\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_non_int (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 43, in test_non_int\nAssertionError: Exception not raised by task_func\n\n----------------------------------------------------------------------\nRan 7 tests in 0.013s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pandas as pd\nimport os\ndef task_func(data_dir: str, csv_files: list) -> pd.DataFrame:\n    if not csv_files:\n        return pd.DataFrame()\n    dfs = []\n    for file in csv_files:\n        file_path = os.path.join(data_dir, file)\n        if os.path.isfile(file_path):\n            dfs.append(pd.read_csv(file_path))\n    if dfs:\n        return pd.concat(dfs, ignore_index=True)\n    else:\n        return pd.DataFrame()\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_with_nonexistent_file (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 53, in test_with_nonexistent_file\nAssertionError: FileNotFoundError not raised\n\n----------------------------------------------------------------------\nRan 5 tests in 0.038s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport os\nimport pandas as pd\nimport numpy as np\ndef task_func(data_dir: str, csv_file: str) -> pd.DataFrame:\n    file_path = os.path.join(data_dir, csv_file)\n    if not os.path.isfile(file_path):\n        raise FileNotFoundError(f\"No such file: '{file_path}'\")\n    df = pd.read_csv(file_path)\n    if df.empty:\n        return pd.DataFrame()\n    numeric_cols = df.select_dtypes(include=[np.number]).columns\n    for col in numeric_cols:\n        mean_val = df[col].mean()\n        df[col].fillna(mean_val, inplace=True)\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_empty_csv (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_empty_csv\n  File \"<bigcode>\", line 9, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/parsers/readers.py\", line 912, in read_csv\n    return _read(filepath_or_buffer, kwds)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/parsers/readers.py\", line 577, in _read\n    parser = TextFileReader(filepath_or_buffer, **kwds)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/parsers/readers.py\", line 1407, in __init__\n    self._engine = self._make_engine(f, self.engine)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/parsers/readers.py\", line 1679, in _make_engine\n    return mapping[engine](f, **self.options)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/parsers/c_parser_wrapper.py\", line 93, in __init__\n    self._reader = parsers.TextReader(src, **kwds)\n  File \"pandas/_libs/parsers.pyx\", line 557, in pandas._libs.parsers.TextReader.__cinit__\npandas.errors.EmptyDataError: No columns to parse from file\n\n----------------------------------------------------------------------\nRan 6 tests in 0.026s\n\nFAILED (errors=1)"}}
{"result": "```python\nimport os\nimport random\nimport pandas as pd\n\ndef task_func(data_dir,\n              csv_files=['file1.csv', 'file2.csv', 'file3.csv'],\n              seed=None):\n    if seed is not None:\n        random.seed(seed)\n    \n    selected_file = random.choice(csv_files)\n    file_path = os.path.join(data_dir, selected_file)\n    \n    if not os.path.isfile(file_path):\n        return selected_file, pd.DataFrame()\n    \n    df = pd.read_csv(file_path)\n    if df.empty:\n        return selected_file, pd.DataFrame()\n    \n    n = random.randint(1, len(df))\n    sampled_df = df.sample(n=n, random_state=seed).reset_index(drop=True)\n    \n    return selected_file, sampled_df\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_empty_file (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 45, in test_empty_file\n  File \"<bigcode>\", line 18, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/parsers/readers.py\", line 912, in read_csv\n    return _read(filepath_or_buffer, kwds)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/parsers/readers.py\", line 577, in _read\n    parser = TextFileReader(filepath_or_buffer, **kwds)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/parsers/readers.py\", line 1407, in __init__\n    self._engine = self._make_engine(f, self.engine)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/parsers/readers.py\", line 1679, in _make_engine\n    return mapping[engine](f, **self.options)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/parsers/c_parser_wrapper.py\", line 93, in __init__\n    self._reader = parsers.TextReader(src, **kwds)\n  File \"pandas/_libs/parsers.pyx\", line 557, in pandas._libs.parsers.TextReader.__cinit__\npandas.errors.EmptyDataError: No columns to parse from file\n\n======================================================================\nFAIL: test_no_file_matches (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 55, in test_no_file_matches\nAssertionError: FileNotFoundError not raised\n\n----------------------------------------------------------------------\nRan 5 tests in 0.040s\n\nFAILED (failures=1, errors=1)"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\n\ndef task_func(csv_file_path, attribute, test_size=0.2, random_state=42):\n    # Load data\n    df = pd.read_csv(csv_file_path)\n    \n    # Separate features and target\n    X = df.drop(columns=[attribute])\n    y = df[attribute]\n    \n    # Split into train and test sets\n    X_train, X_test, y_train, _ = train_test_split(X, y, test_size=test_size, random_state=random_state)\n    \n    # Train linear regression model\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n    \n    # Predict on test set\n    predictions = model.predict(X_test)\n    \n    return model, predictions\n```", "match": {"category": "success"}}
{"result": "```python\nimport random\nfrom collections import Counter\ndef task_func(strings: list, pattern: str = \"pattern\") -> dict:\n    counter = Counter()\n    for s in strings:\n        count = s.count(pattern)\n        if count > 0:\n            counter[s] = count\n    return dict(counter)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 7, in test_case_1\nAssertionError: 0 != 10\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_case_2\nAssertionError: 0 != 10\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 19, in test_case_3\nAssertionError: 0 != 10\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_case_5\nAssertionError: 0 != 10\n\n----------------------------------------------------------------------\nRan 5 tests in 0.002s\n\nFAILED (failures=4)"}}
{"result": "```python\nimport re\nfrom datetime import time\n\ndef task_func(logs: list):\n    error_times = []\n    time_pattern = re.compile(r'(\\d{2}):(\\d{2}):(\\d{2})')\n    \n    for log in logs:\n        if 'error' in log.lower():\n            match = time_pattern.search(log)\n            if match:\n                h, m, s = map(int, match.groups())\n                error_times.append(time(h, m, s))\n    \n    if not error_times:\n        return [], None\n    \n    # Convert times to seconds for averaging\n    total_seconds = sum(t.hour * 3600 + t.minute * 60 + t.second for t in error_times)\n    avg_seconds = total_seconds // len(error_times)\n    \n    avg_h = avg_seconds // 3600\n    avg_m = (avg_seconds % 3600) // 60\n    avg_s = avg_seconds % 60\n    \n    avg_time = time(avg_h, avg_m, avg_s)\n    return error_times, avg_time\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_case_3\nAssertionError: Tuples differ: ([], None) != ([], datetime.time(0, 0))\n\nFirst differing element 1:\nNone\ndatetime.time(0, 0)\n\n- ([], None)\n+ ([], datetime.time(0, 0))\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_case_4\nAssertionError: Tuples differ: ([], None) != ([], datetime.time(0, 0))\n\nFirst differing element 1:\nNone\ndatetime.time(0, 0)\n\n- ([], None)\n+ ([], datetime.time(0, 0))\n\n======================================================================\nFAIL: test_case_invalid_format (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 37, in test_case_invalid_format\nAssertionError: Tuples differ: ([], None) != ([], datetime.time(0, 0))\n\nFirst differing element 1:\nNone\ndatetime.time(0, 0)\n\n- ([], None)\n+ ([], datetime.time(0, 0))\n\n----------------------------------------------------------------------\nRan 6 tests in 0.004s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nARRAY_SIZE = 10000\ndef task_func():\n    arr = np.random.randint(1, 101, ARRAY_SIZE)\n    mean = np.mean(arr)\n    std = np.std(arr)\n\n    fig, ax = plt.subplots()\n    ax.hist(arr, bins=range(1, 102), edgecolor='black')\n    ax.set_title(\"Histogram of Random Integers\")\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Frequency\")\n\n    ax.axvline(mean, color='red', linestyle='--', label='Mean')\n    ax.axvline(mean - std, color='purple', linestyle='--', label='Mean \u00b1 Std Dev')\n    ax.axvline(mean + std, color='purple', linestyle='--')\n\n    ax.legend()\n    return arr, mean, std, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_case_1\nAssertionError: 50.1663 != 49.6135\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 18, in test_case_3\nAssertionError: 50.5362 != 50.0717\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 23, in test_case_4\nAssertionError: 50.6733 != 50.2223\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_case_5\nAssertionError: 50.4106 != 49.8636\n\n----------------------------------------------------------------------\nRan 5 tests in 0.326s\n\nFAILED (failures=4)"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nARRAY_SIZE = 10000\ndef task_func():\n    arr = np.random.randint(1, 101, ARRAY_SIZE)\n    mean = np.mean(arr)\n    std = np.std(arr)\n\n    fig, ax = plt.subplots()\n    ax.hist(arr, bins=range(1, 103), edgecolor='black', alpha=0.7)\n    ax.set_title(\"Histogram of Random Values\")\n    ax.set_xlabel(\"Val\")\n    ax.set_ylabel(\"Freq\")\n\n    ax.axvline(mean, color='red', linestyle='--', label='Mean')\n    ax.axvline(mean - std, color='purple', linestyle='--', label='Std Dev')\n    ax.axvline(mean + std, color='purple', linestyle='--')\n\n    ax.legend()\n    return (arr, mean, std, ax)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_case_1\nAssertionError: 50.1663 != 250.7154\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 18, in test_case_3\nAssertionError: 52 != 103\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 26, in test_case_4\nAssertionError: 22 != 278\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 33, in test_case_5\nAssertionError: 78 != 367\n\n----------------------------------------------------------------------\nRan 5 tests in 0.292s\n\nFAILED (failures=4)"}}
{"result": "```python\nfrom collections import Counter\nimport random\nimport itertools\ndef task_func(length, count, seed=0):\n    random.seed(seed)\n    letters = ['a', 'b', 'c', 'd', 'e']\n    generated_strings = [''.join(random.choices(letters, k=length)) for _ in range(count)]\n    all_letters = itertools.chain.from_iterable(generated_strings)\n    return Counter(all_letters)\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport random\n# Constants\nNUMBERS = list(range(1, 7))  # Adjusting for dice rolls (1 to 6)\ndef task_func(rolls, seed=None):\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    results = [random.choice(NUMBERS) for _ in range(rolls)]\n    freq = np.array([results.count(i) for i in NUMBERS])\n    \n    fig, ax = plt.subplots()\n    ax.bar(NUMBERS, freq, tick_label=NUMBERS)\n    ax.set_title(\"Histogram of Dice Rolls\")\n    ax.set_xlabel(\"Dice Value\")\n    ax.set_ylabel(\"Frequency\")\n    \n    return freq, ax\n```", "match": {"category": "success"}}
{"result": "```python\nfrom collections import Counter\nimport random\nLETTERS = ['a', 'b', 'c', 'd', 'e']\ndef task_func(count, seed=0):\n    random.seed(seed)\n    pairs = [random.choice(LETTERS) + random.choice(LETTERS) for _ in range(count)]\n    return Counter(pairs)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 11, in test_case_1\nAssertionError: Counter({'ae': 2, 'aa': 1, 'cb': 1, 'bb': 1}) != Counter({('d', 'a'): 1, ('b', 'b'): 1, ('d', 'd'):[29 chars]: 1})\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 23, in test_case_4\nAssertionError: Counter({'dc': 2, 'eb': 2, 'dd': 1, 'ac': 1, 'ed':[26 chars]: 1}) != Counter({('c', 'c'): 2, ('d', 'b'): 2, ('e', 'e'):[59 chars]: 1})\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_case_5\nAssertionError: Counter({'be': 1, 'ac': 1, 'ad': 1, 'dd': 1, 'db': 1}) != Counter({('a', 'e'): 1, ('d', 'b'): 1, ('c', 'c'):[29 chars]: 1})\n\n----------------------------------------------------------------------\nRan 5 tests in 0.002s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport numpy as np\nimport random\ndef task_func(length=10000, seed=0):\n    if length < 0:\n        raise ValueError(\"length must be non-negative\")\n    random.seed(seed)\n    steps = [random.choice([-1, 1]) for _ in range(length)]\n    positions = np.zeros(length + 1, dtype=int)\n    positions[1:] = np.cumsum(steps)\n    return positions\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_output_type (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 19, in test_output_type\nAssertionError: Lists differ: [0, -1, -2, -1, -2, -3] != [0, 1, 0, -1, -2, -1]\n\nFirst differing element 1:\n-1\n1\n\n- [0, -1, -2, -1, -2, -3]\n+ [0, 1, 0, -1, -2, -1]\n\n----------------------------------------------------------------------\nRan 5 tests in 0.008s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\ndef task_func(d):\n    if not isinstance(d, list) or not all(isinstance(i, dict) for i in d):\n        raise ValueError(\"Input must be a list of dictionaries.\")\n    \n    df = pd.DataFrame(d)\n    for key in ['x', 'y', 'z']:\n        if key not in df.columns:\n            df[key] = np.nan\n    \n    result = {}\n    for key in ['x', 'y', 'z']:\n        series = df[key].dropna()\n        result[key] = {\n            'mean': series.mean(),\n            'sum': series.sum(),\n            'max': series.max(),\n            'min': series.min(),\n            'std': series.std(ddof=0)\n        }\n    return result\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_all_keys_missing (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 23, in test_all_keys_missing\nAssertionError: {'x': {'mean': nan, 'sum': 0.0, 'max': nan, 'mi[152 chars]nan}} != {'x': None, 'y': None, 'z': None}\n+ {'x': None, 'y': None, 'z': None}\n- {'x': {'max': nan, 'mean': nan, 'min': nan, 'std': nan, 'sum': 0.0},\n-  'y': {'max': nan, 'mean': nan, 'min': nan, 'std': nan, 'sum': 0.0},\n-  'z': {'max': nan, 'mean': nan, 'min': nan, 'std': nan, 'sum': 0.0}}\n\n======================================================================\nFAIL: test_empty_list (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 5, in test_empty_list\nAssertionError: {'x': {'mean': nan, 'sum': 0.0, 'max': nan, 'mi[152 chars]nan}} != {'x': None, 'y': None, 'z': None}\n+ {'x': None, 'y': None, 'z': None}\n- {'x': {'max': nan, 'mean': nan, 'min': nan, 'std': nan, 'sum': 0.0},\n-  'y': {'max': nan, 'mean': nan, 'min': nan, 'std': nan, 'sum': 0.0},\n-  'z': {'max': nan, 'mean': nan, 'min': nan, 'std': nan, 'sum': 0.0}}\n\n----------------------------------------------------------------------\nRan 5 tests in 0.011s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n# Updated function to handle empty input list\ndef task_func(d):\n    if not d:\n        return pd.DataFrame()\n    df = pd.DataFrame(d)\n    scaler = MinMaxScaler()\n    df[['x','y','z']] = scaler.fit_transform(df[['x','y','z']])\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_case_3\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1163, in assert_frame_equal\n    raise_assert_detail(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame are different\n\nDataFrame shape mismatch\n[left]:  (0, 0)\n[right]: (0, 3)\n\n----------------------------------------------------------------------\nRan 5 tests in 0.018s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pandas as pd\nfrom collections import Counter\ndef task_func(d):\n    c_x = Counter()\n    c_y = Counter()\n    c_z = Counter()\n    for dic in d:\n        if 'x' in dic:\n            c_x.update([dic['x']])\n        if 'y' in dic:\n            c_y.update([dic['y']])\n        if 'z' in dic:\n            c_z.update([dic['z']])\n    return {'x': c_x, 'y': c_y, 'z': c_z}\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\ndef task_func(d, target='z'):\n    df = pd.DataFrame(d)\n    X = df.drop(columns=[target])\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    return model\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(d, keys=['x', 'y', 'z']):\n    df = pd.DataFrame(d)\n    if not all(k in df.columns for k in keys):\n        raise ValueError(\"Some keys are not in the data dictionaries\")\n    fig, ax = plt.subplots()\n    for i, key in enumerate(keys[1:], start=1):\n        ax.plot(df[keys[0]], df[key], label=key)\n    ax.set_xlabel(keys[0])\n    ax.set_ylabel(', '.join(keys[1:]))\n    ax.legend()\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_empty_data_list (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_empty_data_list\n  File \"<bigcode>\", line 7, in task_func\nValueError: Some keys are not in the data dictionaries\n\n======================================================================\nERROR: test_single_key_data (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 31, in test_single_key_data\n  File \"<bigcode>\", line 7, in task_func\nValueError: Some keys are not in the data dictionaries\n\n======================================================================\nFAIL: test_basic_input (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 9, in test_basic_input\nAssertionError: Items in the second set but not the first:\n'x'\n\n======================================================================\nFAIL: test_custom_keys (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_custom_keys\nAssertionError: Items in the second set but not the first:\n'a'\n\n======================================================================\nFAIL: test_missing_keys_in_data (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 15, in test_missing_keys_in_data\nAssertionError: Items in the second set but not the first:\n'x'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.058s\n\nFAILED (failures=3, errors=2)"}}
{"result": "```python\nimport os\nimport glob\nimport csv\ndef task_func(directory_path, file_extension='.csv'):\n    result = {}\n    pattern = os.path.join(directory_path, f'*{file_extension}')\n    for filepath in glob.glob(pattern):\n        filename = os.path.splitext(os.path.basename(filepath))[0]\n        with open(filepath, newline='', encoding='utf-8') as f:\n            reader = csv.reader(f)\n            rows = [row for row in reader]\n        result[filename] = rows\n    return result\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 6, in setUp\nFileExistsError: [Errno 17] File exists: 'test_1'\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 6, in setUp\nFileExistsError: [Errno 17] File exists: 'test_1'\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 6, in setUp\nFileExistsError: [Errno 17] File exists: 'test_1'\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 6, in setUp\nFileExistsError: [Errno 17] File exists: 'test_1'\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 6, in setUp\nFileExistsError: [Errno 17] File exists: 'test_1'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.001s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport zipfile\nimport os\nimport re\nimport shutil\ndef task_func(source_dir: str, target_dir: str, archive_name: str = 'archive.zip') -> str:\n    if not os.path.isdir(source_dir):\n        raise ValueError(f\"Source directory does not exist: {source_dir}\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir, exist_ok=True)\n\n    processed_pattern = re.compile(r'_processed(\\.[^.]*)?$')\n    files_to_archive = []\n\n    for root, _, files in os.walk(source_dir):\n        for file in files:\n            if processed_pattern.search(file):\n                full_path = os.path.join(root, file)\n                files_to_archive.append(full_path)\n\n    if not files_to_archive:\n        raise FileNotFoundError(\"No processed files found to archive.\")\n\n    archive_path = os.path.join(target_dir, archive_name)\n\n    with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as archive:\n        for file_path in files_to_archive:\n            arcname = os.path.relpath(file_path, start=source_dir)\n            archive.write(file_path, arcname)\n            os.remove(file_path)\n\n    return archive_path\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 45, in test_case_2\n  File \"<bigcode>\", line 22, in task_func\nFileNotFoundError: No processed files found to archive.\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 53, in test_case_3\n  File \"<bigcode>\", line 22, in task_func\nFileNotFoundError: No processed files found to archive.\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 74, in test_case_5\n  File \"<bigcode>\", line 22, in task_func\nFileNotFoundError: No processed files found to archive.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.007s\n\nFAILED (errors=3)"}}
{"result": "```python\nimport os\nimport re\ndef task_func(pattern: str, replacement: str, directory: str) -> bool:\n    try:\n        compiled_pattern = re.compile(pattern)\n        for filename in os.listdir(directory):\n            if compiled_pattern.search(filename):\n                new_name = compiled_pattern.sub(replacement, filename)\n                old_path = os.path.join(directory, filename)\n                new_path = os.path.join(directory, new_name)\n                os.rename(old_path, new_path)\n        return True\n    except Exception:\n        return False\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport pandas as pd\nimport re\nimport matplotlib.pyplot as plt\n\ndef task_func(directory: str, pattern: str) -> list:\n    axes_list = []\n    regex = re.compile(pattern)\n    for filename in os.listdir(directory):\n        if filename.lower().endswith('.csv') and regex.search(filename):\n            filepath = os.path.join(directory, filename)\n            df = pd.read_csv(filepath)\n            fig, ax = plt.subplots()\n            ax.plot(df['Month'], df['Sales'], marker='o')\n            ax.set_title(f\"Sales Data from {filename}\")\n            ax.set_xlabel(\"Month\")\n            ax.set_ylabel(\"Sales\")\n            axes_list.append(ax)\n    return axes_list\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_plot_titles (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 30, in test_plot_titles\nAssertionError: Items in the first set but not the second:\n'Sales Data from sales_data_2022.csv'\n'Sales Data from sales_data_2021.csv'\nItems in the second set but not the first:\n'sales_data_2021.csv'\n'sales_data_2022.csv' : Plot titles should match the CSV filenames\n\n----------------------------------------------------------------------\nRan 5 tests in 0.116s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pandas as pd\nimport itertools\nfrom random import shuffle\ndef task_func(letters=['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'], categories=['Category 1', 'Category 2', 'Category 3']):\n    # Extend categories to match or exceed length of letters by repeating\n    repeated_categories = list(itertools.islice(itertools.cycle(categories), len(letters)))\n    shuffle(repeated_categories)\n    df = pd.DataFrame({'Letter': letters, 'Category': repeated_categories})\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 17, in test_case_3\n  File \"<bigcode>\", line 9, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 709, in __init__\n    mgr = dict_to_mgr(data, index, columns, dtype=dtype, copy=copy, typ=manager)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/internals/construction.py\", line 481, in dict_to_mgr\n    return arrays_to_mgr(arrays, columns, index, dtype=dtype, typ=typ, consolidate=copy)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/internals/construction.py\", line 115, in arrays_to_mgr\n    index = _extract_index(arrays)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/internals/construction.py\", line 655, in _extract_index\n    raise ValueError(\"All arrays must be of the same length\")\nValueError: All arrays must be of the same length\n\n======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_case_1\nAssertionError: 9 != 27\n\n----------------------------------------------------------------------\nRan 5 tests in 0.006s\n\nFAILED (failures=1, errors=1)"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(letters, repetitions, colors):\n    if not letters or not colors:\n        raise ValueError(\"Input lists cannot be empty.\")\n    if len(colors) != repetitions:\n        raise ValueError(\"Length of colors must match number of repetitions.\")\n\n    # Calculate frequency of each letter multiplied by repetitions\n    from collections import Counter\n\n    # Count letters in one repetition\n    base_count = Counter(letters)\n    unique_letters = sorted(base_count.keys())\n\n    fig, ax = plt.subplots()\n\n    # Positions for bars\n    x = np.arange(len(unique_letters))\n\n    # For stacked bars: build frequencies per repetition\n    # Each repetition contributes the frequency of letters once\n    heights_per_rep = []\n    for _ in range(repetitions):\n        heights_per_rep.append([base_count[l] for l in unique_letters])\n\n    bottoms = np.zeros(len(unique_letters))\n    for rep_i in range(repetitions):\n        ax.bar(x, heights_per_rep[rep_i], bottom=bottoms, color=colors[rep_i])\n        bottoms += heights_per_rep[rep_i]\n\n    ax.set_xticks(x)\n    ax.set_xticklabels(unique_letters)\n    ax.set_xlabel(\"Letters\")\n    ax.set_ylabel(\"Frequency\")\n    ax.set_title(\"Frequency of Letters\")\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_basic_input (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 5, in test_basic_input\n  File \"<bigcode>\", line 8, in task_func\nValueError: Length of colors must match number of repetitions.\n\n======================================================================\nERROR: test_multiple_repetitions (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 35, in test_multiple_repetitions\n  File \"<bigcode>\", line 8, in task_func\nValueError: Length of colors must match number of repetitions.\n\n======================================================================\nERROR: test_single_letter (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 26, in test_single_letter\n  File \"<bigcode>\", line 8, in task_func\nValueError: Length of colors must match number of repetitions.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.001s\n\nFAILED (errors=3)"}}
{"result": "```python\nfrom functools import reduce\nimport operator\nimport string\ndef task_func(letters):\n    mapping = {ch: idx+1 for idx, ch in enumerate(string.ascii_uppercase)}\n    return reduce(operator.mul, (mapping[ch] for ch in letters), 1)\n```", "match": {"category": "success"}}
{"result": "```python\nfrom collections import Counter\nimport itertools\ndef task_func(letters: list, repetitions: int) -> dict:\n    repeated_letters = itertools.chain.from_iterable(itertools.repeat(letters, repetitions))\n    return dict(Counter(repeated_letters))\n```", "match": {"category": "success"}}
{"result": "```python\nfrom typing import List, Union\nimport numpy as np\nimport scipy.fft\nfrom collections import Counter\n\ndef task_func(data: List[Union[int, str]], repetitions: int = 1):\n    if not data or repetitions <= 0:\n        return {'mode': np.array([]), 'count': np.array([]), 'fft': np.array([])}\n    \n    repeated_data = data * repetitions\n    counts = Counter(repeated_data)\n    \n    max_count = max(counts.values())\n    modes = sorted([k for k, v in counts.items() if v == max_count])\n    counts_modes = np.array([max_count]*len(modes))\n\n    modes_array = np.array(modes)\n    fft_result = scipy.fft.fft(np.array(repeated_data, dtype=np.float64))\n\n    return {'mode': modes_array, 'count': counts_modes, 'fft': fft_result}\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_multiple_modes_repeated (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 16, in test_multiple_modes_repeated\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/numpy/testing/_private/utils.py\", line 934, in assert_array_equal\n    assert_array_compare(operator.__eq__, x, y, err_msg=err_msg,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/numpy/testing/_private/utils.py\", line 763, in assert_array_compare\n    raise AssertionError(msg)\nAssertionError: \nArrays are not equal\n\n(shapes (6,), (2,) mismatch)\n x: array([ 3.-0.j,  0.+0.j,  0.+0.j, -3.-0.j,  0.-0.j,  0.-0.j])\n y: array([ 1.+0.j, -1.+0.j])\n\n----------------------------------------------------------------------\nRan 5 tests in 0.003s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df):\n    # Ensure the index is datetime\n    df = df.copy()\n    df.index = pd.to_datetime(df.index)\n    df = df.sort_index()\n    \n    # Prepare the data for regression\n    # Convert datetime index to integer timestamps (seconds)\n    X = df.index.astype(np.int64) // 10**9  # convert nanoseconds to seconds\n    y = df['Close'].values\n\n    X = X.reshape(-1,1)\n    \n    # Fit linear regression\n    model = LinearRegression()\n    model.fit(X, y)\n    \n    # Predict for next 7 days\n    last_timestamp = X[-1,0]\n    seconds_in_day = 24*60*60\n    future_timestamps = np.array([last_timestamp + (i+1)*seconds_in_day for i in range(7)]).reshape(-1,1)\n    predicted_prices = model.predict(future_timestamps)\n    \n    # Convert future timestamps back to datetime for plotting\n    future_dates = pd.to_datetime(future_timestamps.flatten(), unit='s')\n    \n    # Plot\n    fig, ax = plt.subplots(figsize=(10,6))\n    ax.plot(df.index, y, label='Historical Close Price', marker='o')\n    ax.plot(future_dates, predicted_prices, label='Predicted Close Price', marker='x', linestyle='--')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Closing Price')\n    ax.set_title('Stock Closing Price Prediction for Next 7 Days')\n    ax.legend()\n    ax.grid(True)\n    \n    return (predicted_prices.tolist(), ax)\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Close'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 9, in test_case_1\n  File \"<bigcode>\", line 16, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Close'\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Close'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 17, in test_case_2\n  File \"<bigcode>\", line 16, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Close'\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Close'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_case_3\n  File \"<bigcode>\", line 16, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Close'\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Close'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 33, in test_case_4\n  File \"<bigcode>\", line 16, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Close'\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Close'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 41, in test_case_5\n  File \"<bigcode>\", line 16, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Close'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.014s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import zscore\n\ndef task_func(df, z_threshold=2):\n    z_scores = zscore(df['closing_price'])\n    outlier_mask = np.abs(z_scores) > z_threshold\n    outliers_df = df.loc[outlier_mask]\n\n    fig, ax = plt.subplots()\n    ax.plot(df.index, df['closing_price'], 'b.', label='Data')\n    ax.plot(outliers_df.index, outliers_df['closing_price'], 'ro', label='Outliers')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Closing Price')\n    ax.set_title('Outliers in Closing Prices')\n    ax.legend()\n\n    return outliers_df, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Z_score'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_case_2\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Z_score'\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Z_score'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 29, in test_case_3\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Z_score'\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Z_score'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 36, in test_case_4\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Z_score'\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Z_score'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 44, in test_case_5\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Z_score'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.099s\n\nFAILED (errors=4)"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(df: pd.DataFrame) -> tuple:\n    fig, axes = plt.subplots(2, 1, figsize=(8, 8))\n\n    sns.boxplot(x=df['Close'], ax=axes[0])\n    axes[0].set_title('Box Plot of Closing Prices')\n\n    sns.histplot(df['Close'], bins=30, kde=False, ax=axes[1])\n    axes[1].set_title('Histogram of Closing Prices')\n\n    plt.tight_layout()\n    return axes[0], axes[1]\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Close'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_case_1\n  File \"<bigcode>\", line 8, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Close'\n\n======================================================================\nERROR: test_empty_df (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Close'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_empty_df\n  File \"<bigcode>\", line 8, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Close'\n\n======================================================================\nERROR: test_large_values_df (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Close'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 46, in test_large_values_df\n  File \"<bigcode>\", line 8, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Close'\n\n======================================================================\nERROR: test_single_value_df (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Close'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 38, in test_single_value_df\n  File \"<bigcode>\", line 8, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Close'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.104s\n\nFAILED (errors=4)"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom typing import List, Tuple\n\ndef task_func(df: pd.DataFrame) -> Tuple[List[float], Axes]:\n    # Assume df has a 'Close' column with closing prices and is sorted by date ascending\n    series = df['Close']\n\n    # Fit ARIMA model (The order (5,1,0) is a common starting point, adjust if needed)\n    model = ARIMA(series, order=(5,1,0))\n    model_fit = model.fit()\n\n    # Forecast next 7 days\n    forecast_result = model_fit.get_forecast(steps=7)\n    forecast_values = forecast_result.predicted_mean.tolist()\n\n    # Prepare plot\n    fig, ax = plt.subplots(figsize=(10,5))\n    # Plot historical closing prices\n    ax.plot(df.index, series, label='Historical Close')\n    # Plot forecasted prices - using new x values continuing after last index\n    last_date = df.index[-1]\n    if isinstance(last_date, pd.Timestamp):\n        forecast_index = pd.date_range(start=last_date + pd.Timedelta(days=1), periods=7, freq='D')\n    else:\n        forecast_index = range(df.index[-1] + 1, df.index[-1] + 1 + 7)\n\n    ax.plot(forecast_index, forecast_values, label='7-day Forecast', linestyle='--', marker='o')\n    ax.set_title('Share Closing Price Forecast using ARIMA')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Closing Price')\n    ax.legend()\n    ax.grid(True)\n\n    return forecast_values, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Close'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 15, in test_case_1\n  File \"<bigcode>\", line 10, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Close'\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Close'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 36, in test_case_2\n  File \"<bigcode>\", line 10, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Close'\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Close'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 56, in test_case_3\n  File \"<bigcode>\", line 10, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Close'\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Close'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 77, in test_case_4\n  File \"<bigcode>\", line 10, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Close'\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Close'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 97, in test_case_5\n  File \"<bigcode>\", line 10, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Close'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.009s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport pandas as pd\nimport re\n# Function to replace acronyms in DataFrame\ndef task_func(data, mapping):\n    pattern = re.compile(r'\\b(' + '|'.join(map(re.escape, mapping.keys())) + r')\\b')\n    def replace_acronyms(text):\n        if not isinstance(text, str):\n            return text\n        return pattern.sub(lambda x: mapping[x.group()], text)\n    return data.applymap(replace_acronyms)\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_acronyms_multiple_columns (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 15, in test_acronyms_multiple_columns\n  File \"<bigcode>\", line 11, in task_func\nAttributeError: 'dict' object has no attribute 'applymap'\n\n======================================================================\nERROR: test_acronyms_single_column (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_acronyms_single_column\n  File \"<bigcode>\", line 11, in task_func\nAttributeError: 'dict' object has no attribute 'applymap'\n\n======================================================================\nERROR: test_empty_dataframe (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 36, in test_empty_dataframe\n  File \"<bigcode>\", line 11, in task_func\nAttributeError: 'dict' object has no attribute 'applymap'\n\n======================================================================\nERROR: test_no_acronyms (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 22, in test_no_acronyms\n  File \"<bigcode>\", line 11, in task_func\nAttributeError: 'dict' object has no attribute 'applymap'\n\n======================================================================\nERROR: test_non_string_types (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 29, in test_non_string_types\n  File \"<bigcode>\", line 11, in task_func\nAttributeError: 'dict' object has no attribute 'applymap'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.009s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data, column):\n    CATEGORIES = ['A', 'B', 'C', 'D', 'E']\n    df = pd.DataFrame(data)\n    counts = df[column].value_counts().reindex(CATEGORIES, fill_value=0)\n    fig, ax = plt.subplots()\n    counts.plot(kind='bar', ax=ax)\n    ax.set_xlabel('Category')\n    ax.set_ylabel('Count')\n    ax.set_title(f'Distribution of {column}')\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef task_func(data):\n    corr = data.corr()\n    fig, ax = plt.subplots()\n    sns.heatmap(corr, annot=True, fmt=\".2f\", cmap=\"coolwarm\", ax=ax)\n    ax.set_title('Correlation Matrix')\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_case_1\n  File \"<bigcode>\", line 7, in task_func\nAttributeError: 'dict' object has no attribute 'corr'\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 14, in test_case_2\n  File \"<bigcode>\", line 7, in task_func\nAttributeError: 'dict' object has no attribute 'corr'\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_case_3\n  File \"<bigcode>\", line 7, in task_func\nAttributeError: 'dict' object has no attribute 'corr'\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 26, in test_case_4\n  File \"<bigcode>\", line 7, in task_func\nAttributeError: 'dict' object has no attribute 'corr'\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 32, in test_case_5\n  File \"<bigcode>\", line 7, in task_func\nAttributeError: 'dict' object has no attribute 'corr'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.001s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data, columns):\n    scaler = MinMaxScaler()\n    df = data.copy()\n    df[columns] = scaler.fit_transform(df[columns])\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 14, in test_case_1\n  File \"<bigcode>\", line 7, in task_func\nTypeError: unhashable type: 'list'\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_case_2\n  File \"<bigcode>\", line 7, in task_func\nTypeError: unhashable type: 'list'\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_case_3\n  File \"<bigcode>\", line 7, in task_func\nTypeError: unhashable type: 'list'\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 35, in test_case_4\n  File \"<bigcode>\", line 7, in task_func\nTypeError: unhashable type: 'list'\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 42, in test_case_5\n  File \"<bigcode>\", line 7, in task_func\nTypeError: unhashable type: 'list'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.005s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport pandas as pd\nimport re\n# Constants\nSTOPWORDS = set([\n    \"i\", \"me\", \"my\", \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \"you\", \"your\", \"yours\", \"yourself\",\n    \"yourselves\", \"he\", \"him\", \"his\", \"himself\", \"she\", \"her\", \"hers\", \"herself\", \"it\", \"its\", \"itself\",\n    \"they\", \"them\", \"their\", \"theirs\", \"themselves\", \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\",\n    \"these\", \"those\", \"am\", \"is\", \"are\", \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \"has\", \"had\",\n    \"having\", \"do\", \"does\", \"did\", \"doing\", \"a\", \"an\", \"the\", \"and\", \"but\", \"if\", \"or\", \"because\",\n    \"as\", \"until\", \"while\", \"of\", \"at\", \"by\", \"for\", \"with\", \"about\", \"against\", \"between\", \"into\",\n    \"through\", \"during\", \"before\", \"after\", \"above\", \"below\", \"to\", \"from\", \"up\", \"down\", \"in\", \"out\",\n    \"on\", \"off\", \"over\", \"under\", \"again\", \"further\", \"then\", \"once\", \"here\", \"there\", \"when\", \"where\",\n    \"why\", \"how\", \"all\", \"any\", \"both\", \"each\", \"few\", \"more\", \"most\", \"other\", \"some\", \"such\", \"no\",\n    \"nor\", \"not\", \"only\", \"own\", \"same\", \"so\", \"than\", \"too\", \"very\", \"s\", \"t\", \"can\", \"will\", \"just\",\n    \"don\", \"should\", \"now\"\n])\n\ndef task_func(data, column):\n    def remove_stopwords(text):\n        if pd.isna(text):\n            return text\n        # Tokenize by words using regex; keep only word characters\n        words = re.findall(r'\\b\\w+\\b', text.lower())\n        filtered_words = [word for word in words if word not in STOPWORDS]\n        return \" \".join(filtered_words)\n    data = data.copy()\n    data[column] = data[column].apply(remove_stopwords)\n    return data\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_case_1\n  File \"<bigcode>\", line 28, in task_func\nAttributeError: 'list' object has no attribute 'apply'\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_case_2\n  File \"<bigcode>\", line 28, in task_func\nAttributeError: 'list' object has no attribute 'apply'\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 18, in test_case_3\n  File \"<bigcode>\", line 28, in task_func\nAttributeError: 'list' object has no attribute 'apply'\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 23, in test_case_4\n  File \"<bigcode>\", line 28, in task_func\nAttributeError: 'list' object has no attribute 'apply'\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_case_5\n  File \"<bigcode>\", line 28, in task_func\nAttributeError: 'list' object has no attribute 'apply'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.006s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport pandas as pd\nimport random\nimport re\ndef task_func(person_names, email_domains, num_records=5):\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of names provided is less than the number of records requested\")\n    if not email_domains:\n        raise ValueError(\"No email domains provided\")\n\n    selected_names = random.sample(person_names, num_records)\n    emails = []\n    for name in selected_names:\n        username = re.sub(r'\\W+', '', name).lower()\n        domain = random.choice(email_domains)\n        email = f\"{username}@{domain}\"\n        cleaned_email = email.replace(\"@\", \"[at]\")\n        emails.append(cleaned_email)\n\n    df = pd.DataFrame({\n        \"Name\": selected_names,\n        \"Email\": emails\n    })\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport os\nimport sys\ndef task_func(file_path: str, column_name: str) -> pd.DataFrame:\n    df = pd.read_csv(file_path)\n    if column_name in df.columns:\n        df[column_name] = df[column_name].astype(str).str.replace(r'\\n', '<br>', regex=True)\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\ndef task_func(data_size=1000, column_names=['A', 'B', 'C', 'D', 'E'], seed=0):\n    np.random.seed(seed)\n    df = pd.DataFrame(\n        np.random.randint(1, 101, size=(data_size, len(column_names))),\n        columns=column_names\n    )\n    df[df < 10] = -1\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport sqlite3\n\ndef task_func(db_path: str, table_name: str, column_name: str) -> pd.DataFrame:\n    with sqlite3.connect(db_path) as conn:\n        df = pd.read_sql_query(f\"SELECT * FROM {table_name}\", conn)\n    if column_name in df.columns:\n        df[column_name] = df[column_name].astype(str).str.replace('\\n', '<br>', regex=False)\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_invalid_column_name (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 44, in test_invalid_column_name\nAssertionError: KeyError not raised\n\n----------------------------------------------------------------------\nRan 5 tests in 0.021s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\n\ndef task_func(file_path: str, column_name: str) -> pd.DataFrame:\n    df = pd.read_csv(file_path)\n    df[column_name] = df[column_name].str.replace('\\\\n', '<br>', regex=False)\n    le = LabelEncoder()\n    df[column_name] = le.fit_transform(df[column_name])\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nfrom collections import Counter\nimport itertools\nimport string\ndef task_func(word: str) -> dict:\n    pairs = [''.join(p) for p in itertools.product(string.ascii_lowercase, repeat=2)]\n    counter = Counter(word[i:i+2] for i in range(len(word)-1))\n    return {pair: counter.get(pair, 0) for pair in pairs}\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nfrom scipy import stats\n\ndef task_func(word: str) -> (np.ndarray, float):\n    arr = np.array([ord(word[i+1]) - ord(word[i]) for i in range(len(word)-1)])\n    if len(arr) == 0:\n        entropy = 0.0\n    else:\n        values, counts = np.unique(arr, return_counts=True)\n        probs = counts / counts.sum()\n        entropy = stats.entropy(probs, base=2)\n    return arr, entropy\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 7, in test_case_1\nAssertionError: 0.0 != 1.6094379124341005\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_case_2\nAssertionError: 1.584962500721156 != -inf\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 31, in test_case_5\nAssertionError: 3.41829583405449 != -inf\n\n======================================================================\nFAIL: test_case_7 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 42, in test_case_7\nAssertionError: 1.9182958340544896 != -inf\n\n----------------------------------------------------------------------\nRan 7 tests in 0.003s\n\nFAILED (failures=4)"}}
{"result": "```python\nimport random\nimport string\nPOSSIBLE_LETTERS = ['a', 'b', 'c']\ndef task_func(word):\n    if any(ch not in string.ascii_letters for ch in word):\n        raise ValueError(\"Input contains non-letter characters\")\n    length = len(POSSIBLE_LETTERS)\n    if len(word) < 2:\n        return [''] * length\n    pairs = [word[i:i+2] for i in range(len(word)-1)]\n    return random.choices(pairs, k=length)\n```", "match": {"category": "success"}}
{"result": "```python\nfrom collections import defaultdict\nimport re\ndef task_func(word: str) -> dict:\n    sanitized = re.sub(r'[^a-zA-Z]', '', word)\n    counts = defaultdict(int)\n    for i in range(len(sanitized) - 1):\n        pair = sanitized[i:i+2]\n        counts[pair] += 1\n    return counts\n```", "match": {"category": "success"}}
{"result": "```python\nfrom collections import Counter\nimport re\ndef task_func(word: str) -> list:\n    cleaned = re.sub(r'[^a-z]', '', word.lower())\n    if len(cleaned) < 2:\n        return []\n    pairs = [cleaned[i:i+2] for i in range(len(cleaned)-1)]\n    counter = Counter(pairs)\n    most_common_pair, freq = counter.most_common(1)[0]\n    return [(most_common_pair, freq)]\n```", "match": {"category": "success"}}
{"result": "```python\nimport string\nimport wordninja\ndef task_func(word):\n    alphabet = string.ascii_lowercase\n    split_words = wordninja.split(word)\n    result = []\n    for w in split_words:\n        for letter in w.lower():\n            if letter in alphabet:\n                result.append((letter, alphabet.index(letter) + 1))\n    return result\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_basic_word (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 5, in test_basic_word\nAssertionError: [('a', 1), ('b', 2), ('c', 3)] != ([('a', 1), ('b', 2), ('c', 3)], ['abc'])\n\n======================================================================\nFAIL: test_empty_string (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 17, in test_empty_string\nAssertionError: [] != ([], [])\n\n======================================================================\nFAIL: test_long_word (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 23, in test_long_word\nAssertionError: [('a', 1), ('b', 2), ('c', 3), ('d', 4), [231 chars] 26)] != ([('a', 1), ('b', 2), ('c', 3), ('d', 4),[305 chars]yz'])\n\n======================================================================\nFAIL: test_non_consecutive_letters (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_non_consecutive_letters\nAssertionError: [('i', 9), ('h', 8), ('a', 1), ('t', 20),[36 chars] 13)] != ([('i', 9), ('h', 8), ('a', 1), ('t', 20)[60 chars]im'])\n\n======================================================================\nFAIL: test_repeated_letters (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 14, in test_repeated_letters\nAssertionError: [('a', 1), ('a', 1)] != ([('a', 1), ('a', 1)], ['a', 'a'])\n\n======================================================================\nFAIL: test_single_letter (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 11, in test_single_letter\nAssertionError: [('h', 8), ('e', 5), ('l', 12), ('l', 12)[60 chars] 15)] != ([('h', 8), ('e', 5), ('l', 12), ('l', 12[82 chars]lo'])\n\n======================================================================\nFAIL: test_word_with_uppercase_should_fail (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 26, in test_word_with_uppercase_should_fail\nAssertionError: ValueError not raised\n\n----------------------------------------------------------------------\nRan 7 tests in 0.003s\n\nFAILED (failures=7)"}}
{"result": "```python\nfrom collections import Counter\nimport hashlib\ndef task_func(word: str) -> dict:\n    pairs = [word[i:i+2] for i in range(len(word)-1)]\n    counts = Counter(pairs)\n    # Generate the MD5 hash of the counts dictionary string representation\n    hash_input = ''.join(f'{k}{v}' for k, v in sorted(counts.items()))\n    md5_hash = hashlib.md5(hash_input.encode()).hexdigest()\n    print(md5_hash)\n    return dict(counts)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 7, in test_case_1\nAssertionError: {'ab': 2, 'br': 2, 'ra': 2, 'ac': 1, 'ca': 1, 'ad': 1, 'da': 1} != 'bc9af285d87b312e61ab3661e66b741b'\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_case_2\nAssertionError: {'he': 1, 'el': 1, 'll': 1, 'lo': 1} != 'dd5dec1a853625e2dc48f3d42665c337'\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 17, in test_case_3\nAssertionError: {'py': 1, 'yt': 1, 'th': 1, 'ho': 1, 'on': 1} != '2ef1af06ae4aa496eaa8e963bde5514e'\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 22, in test_case_4\nAssertionError: {} != '99914b932bd37a50b983c5e7c90ae93b'\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_case_5\nAssertionError: {} != '99914b932bd37a50b983c5e7c90ae93b'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.003s\n\nFAILED (failures=5)"}}
{"result": "```python\nimport pandas as pd\nimport string\ndef task_func(word):\n    if not word.isalpha() or not word.islower():\n        raise ValueError(\"Input must be a lowercase alphabetic word.\")\n    alphabet = string.ascii_lowercase\n    positions = [alphabet.index(letter) + 1 for letter in word]\n    df = pd.DataFrame({'Letter': list(word), 'Position': positions})\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_empty_string (builtins.TestCases)\nTest with an empty string, expecting an empty DataFrame.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_empty_string\n  File \"<bigcode>\", line 6, in task_func\nValueError: Input must be a lowercase alphabetic word.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.007s\n\nFAILED (errors=1)"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport string\n# Constants\nALPHABET = list(string.ascii_lowercase)\ndef task_func(word):\n    word = word.lower()\n    positions = np.array([ALPHABET.index(ch) + 1 for ch in word if ch in ALPHABET])\n    fig, ax = plt.subplots()\n    ax.bar(list(word), positions)\n    ax.set_xlabel('Letters')\n    ax.set_ylabel('Position in Alphabet')\n    ax.set_title('Positions of letters in word')\n    plt.close(fig)\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nfrom collections import Counter\ndef task_func(input_str):\n    cleaned = re.sub(r'[^a-zA-Z0-9]', '', input_str).lower()\n    return dict(Counter(cleaned))\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport pandas as pd\ndef task_func(input_df):\n    def clean_text(text):\n        return re.sub(r'[^A-Za-z0-9]', '', str(text))\n    input_df['clean_text'] = input_df['text'].apply(clean_text)\n    input_df['text_length'] = input_df['clean_text'].str.len()\n    return input_df\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_clean_text_and_calculate_length (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 9, in test_clean_text_and_calculate_length\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1014, in assert_series_equal\n    _testing.assert_almost_equal(\n  File \"pandas/_libs/testing.pyx\", line 52, in pandas._libs.testing.assert_almost_equal\n  File \"pandas/_libs/testing.pyx\", line 172, in pandas._libs.testing.assert_almost_equal\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: Series are different\n\nSeries values are different (16.66667 %)\n[index]: [0, 1, 2, 3, 4, 5]\n[left]:  [hello, world, Specialcharactersspaces888323, HelloWorld, , None]\n[right]: [hello, world, Specialcharactersspaces888323, HelloWorld, , ]\nAt positional index 5, first diff: None != \n\n======================================================================\nFAIL: test_empty_and_none (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 29, in test_empty_and_none\nAssertionError: 'None' != ''\n- None\n+ \n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.014s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport re\nimport os\nimport glob\ndef task_func(dir_path: str) -> list:\n    files = glob.glob(os.path.join(dir_path, '*'))\n    new_names = []\n    for filepath in files:\n        dirname = os.path.dirname(filepath)\n        basename = os.path.basename(filepath)\n        # Split extension\n        name, ext = os.path.splitext(basename)\n        # Remove all non-alphanumeric characters from name\n        new_name_only = re.sub(r'[^a-zA-Z0-9]', '', name)\n        new_basename = new_name_only + ext\n        new_path = os.path.join(dirname, new_basename)\n        # Rename file if name changed and target does not conflict or override\n        if new_basename != basename:\n            # To avoid overwrite, add suffix if needed\n            counter = 1\n            while os.path.exists(new_path):\n                new_basename = f\"{new_name_only}_{counter}{ext}\"\n                new_path = os.path.join(dirname, new_basename)\n                counter += 1\n            os.rename(filepath, new_path)\n        else:\n            new_path = filepath\n        new_names.append(os.path.basename(new_path))\n    return new_names\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_alphanumeric_names (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 31, in test_alphanumeric_names\nAssertionError: Lists differ: ['file1.txt', 'file2.txt', 'file3.txt'] != ['file1txt', 'file2txt', 'file3txt']\n\nFirst differing element 0:\n'file1.txt'\n'file1txt'\n\n- ['file1.txt', 'file2.txt', 'file3.txt']\n?        -            -            -\n\n+ ['file1txt', 'file2txt', 'file3txt']\n\n======================================================================\nFAIL: test_mixed_characters (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 57, in test_mixed_characters\nAssertionError: Lists differ: ['file1.txt', 'file2.txt', 'file3.txt'] != ['file1txt', 'file2txt', 'file3txt']\n\nFirst differing element 0:\n'file1.txt'\n'file1txt'\n\n- ['file1.txt', 'file2.txt', 'file3.txt']\n?        -            -            -\n\n+ ['file1txt', 'file2txt', 'file3txt']\n\n======================================================================\nFAIL: test_only_special_characters (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 47, in test_only_special_characters\nAssertionError: Lists differ: ['.txt', '_1.txt', '_2.txt'] != ['txt', 'txt', 'txt']\n\nFirst differing element 0:\n'.txt'\n'txt'\n\n- ['.txt', '_1.txt', '_2.txt']\n?   -       ---       ---\n\n+ ['txt', 'txt', 'txt']\n\n======================================================================\nFAIL: test_special_characters_removal (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_special_characters_removal\nAssertionError: Lists differ: ['file1.txt', 'file2.txt', 'file3.txt'] != ['file1txt', 'file2txt', 'file3txt']\n\nFirst differing element 0:\n'file1.txt'\n'file1txt'\n\n- ['file1.txt', 'file2.txt', 'file3.txt']\n?        -            -            -\n\n+ ['file1txt', 'file2txt', 'file3txt']\n\n----------------------------------------------------------------------\nRan 5 tests in 0.005s\n\nFAILED (failures=4)"}}
{"result": "```python\nimport re\nfrom nltk import word_tokenize\nfrom collections import Counter\n\ndef task_func(input_str):\n    # Remove all special characters, punctuation marks and spaces\n    cleaned_str = re.sub(r'[^A-Za-z0-9]+', '', input_str)\n    # Tokenize the cleaned string (will be a single token if no spaces)\n    tokens = word_tokenize(cleaned_str)\n    # Count frequency of each token\n    freq = dict(Counter(tokens))\n    return freq\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 6, in test_case_1\nAssertionError: {'Specialcharactersspaces888323': 1} != {'Special': 1, 'characters': 1, 'spaces': 1, '888323': 1}\n- {'Specialcharactersspaces888323': 1}\n+ {'888323': 1, 'Special': 1, 'characters': 1, 'spaces': 1}\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 10, in test_case_2\nAssertionError: {'Hellohelloworld': 1} != {'Hello': 1, 'hello': 1, 'world': 1}\n- {'Hellohelloworld': 1}\n+ {'Hello': 1, 'hello': 1, 'world': 1}\n?        +++++++     +++++++\n\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 18, in test_case_4\nAssertionError: {'123123456': 1} != {'123': 2, '456': 1}\n- {'123123456': 1}\n?      ^ ^\n\n+ {'123': 2, '456': 1}\n?      ^^^ ^^^\n\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 22, in test_case_5\nAssertionError: {'Hello123123': 1} != {'Hello123': 1, '123': 1}\n- {'Hello123123': 1}\n+ {'123': 1, 'Hello123': 1}\n\n----------------------------------------------------------------------\nRan 5 tests in 0.009s\n\nFAILED (failures=4)"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(start_date: str, periods: int, freq: str, random_seed: int = 0) -> (pd.DataFrame, plt.Axes):\n    np.random.seed(random_seed)\n    dates = pd.date_range(start=start_date, periods=periods, freq=freq)\n    # Create a simple sales forecast with a trend plus noise\n    trend = np.linspace(50, 50 + periods*5, periods)\n    noise = np.random.normal(loc=0, scale=10, size=periods)\n    sales = trend + noise\n    df = pd.DataFrame({'Date': dates, 'Sales': sales})\n    \n    fig, ax = plt.subplots(figsize=(10,5))\n    ax.plot(df['Date'], df['Sales'], marker='o', linestyle='-')\n    ax.set_title('Sales Forecast')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Sales')\n    ax.grid(True)\n    plt.tight_layout()\n    \n    return df, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_basic_forecast (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 9, in test_basic_forecast\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/ops/common.py\", line 81, in new_method\n    return method(self, other)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/arraylike.py\", line 40, in __eq__\n    return self._cmp_method(other, operator.eq)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 6779, in _cmp_method\n    result = ops.comp_method_OBJECT_ARRAY(op, self._values, other)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/ops/array_ops.py\", line 79, in comp_method_OBJECT_ARRAY\n    raise ValueError(\"Shapes must match\", x.shape, y.shape)\nValueError: ('Shapes must match', (2,), (1,))\n\n======================================================================\nERROR: test_monthly_forecast (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 14, in test_monthly_forecast\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/ops/common.py\", line 81, in new_method\n    return method(self, other)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/arraylike.py\", line 40, in __eq__\n    return self._cmp_method(other, operator.eq)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 6779, in _cmp_method\n    result = ops.comp_method_OBJECT_ARRAY(op, self._values, other)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/ops/array_ops.py\", line 79, in comp_method_OBJECT_ARRAY\n    raise ValueError(\"Shapes must match\", x.shape, y.shape)\nValueError: ('Shapes must match', (2,), (1,))\n\n======================================================================\nERROR: test_quarterly_forecast (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 18, in test_quarterly_forecast\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/ops/common.py\", line 81, in new_method\n    return method(self, other)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/arraylike.py\", line 40, in __eq__\n    return self._cmp_method(other, operator.eq)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 6779, in _cmp_method\n    result = ops.comp_method_OBJECT_ARRAY(op, self._values, other)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/ops/array_ops.py\", line 79, in comp_method_OBJECT_ARRAY\n    raise ValueError(\"Shapes must match\", x.shape, y.shape)\nValueError: ('Shapes must match', (2,), (1,))\n\n----------------------------------------------------------------------\nRan 5 tests in 0.220s\n\nFAILED (errors=3)"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Constants\nSTART_DATE = '2016-01-01'\nPERIODS = 13\nFREQ = 'WOM-2FRI'\nCATEGORIES = ['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports']\n\ndef task_func(start_date=START_DATE, periods=PERIODS, freq=FREQ, categories=CATEGORIES):\n    # Generate date range\n    dates = pd.date_range(start=start_date, periods=periods, freq=freq)\n    \n    # Create empty list to collect data rows\n    data = []\n    \n    # Seed for reproducibility\n    np.random.seed(42)\n    \n    # Generate sales data per category per date\n    for date in dates:\n        for category in categories:\n            # Simulate sales: base varies by category + some noise\n            base = {\n                'Electronics': 1200,\n                'Fashion': 800,\n                'Home & Kitchen': 1000,\n                'Automotive': 600,\n                'Sports': 750\n            }[category]\n            sales = np.random.normal(base, base * 0.15)\n            sales = max(0, round(sales, 2))  # No negative sales, round to 2 decimals\n            data.append({'Date': date, 'Category': category, 'Sales': sales})\n    \n    df = pd.DataFrame(data)\n    \n    # Pivot data for plotting\n    pivot_df = df.pivot(index='Date', columns='Category', values='Sales')\n    \n    # Plot sales trends by category\n    fig, ax = plt.subplots(figsize=(10, 6))\n    pivot_df.plot(ax=ax, marker='o')\n    ax.set_title('Sales Report by Category Over Time')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Sales')\n    ax.grid(True)\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    \n    return df, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_3 (builtins.TestCases)\nTest with a different frequency and custom categories.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 22, in test_case_3\n  File \"<bigcode>\", line 26, in task_func\nKeyError: 'Books'\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\nTest with all parameters customized.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_case_4\n  File \"<bigcode>\", line 26, in task_func\nKeyError: 'Food'\n\n======================================================================\nFAIL: test_case_1 (builtins.TestCases)\nTest with default parameters.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 11, in test_case_1\nAssertionError: 'Sales Report by Category Over Time' != 'Category-wise Sales Trends'\n- Sales Report by Category Over Time\n+ Category-wise Sales Trends\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.229s\n\nFAILED (failures=1, errors=2)"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n\ndef task_func(start_date='2016-01-01', periods=24, freq='M', model='additive'):\n    # generate date range\n    idx = pd.date_range(start=start_date, periods=periods, freq=freq)\n    \n    # create trend component (linearly increasing)\n    trend = np.linspace(10, 50, periods)\n    \n    # create seasonal component with yearly seasonality (freq='M', so 12 months per year)\n    seasonality_period = 12\n    seasonal_pattern = np.sin(2 * np.pi * np.arange(periods) / seasonality_period) + 1.5\n    \n    # create residual component\n    np.random.seed(0)\n    residual = np.random.normal(0, 0.2, periods)\n    \n    # create series based on model\n    if model == 'multiplicative':\n        data = trend * seasonal_pattern * (1 + residual)\n        # ensure no zero or negative values\n        data = np.maximum(data, 1e-3)\n    else:\n        data = trend + seasonal_pattern + residual\n    \n    series = pd.Series(data, index=idx)\n    \n    # decompose the time series\n    decomposed = seasonal_decompose(series, model=model, period=seasonality_period)\n    \n    return {\n        'trend': decomposed.trend.dropna(),\n        'seasonal': decomposed.seasonal.dropna(),\n        'residual': decomposed.resid.dropna()\n    }\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_insufficient_periods_error (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 23, in test_insufficient_periods_error\n  File \"<bigcode>\", line 32, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/statsmodels/tsa/seasonal.py\", line 171, in seasonal_decompose\n    raise ValueError(\nValueError: x must have 2 complete cycles requires 24 observations. x only has 12 observation(s)\n\n======================================================================\nFAIL: test_additive_decomposition_properties (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 31, in test_additive_decomposition_properties\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_custom_parameters (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 14, in test_custom_parameters\nAssertionError: 24 != 36\n\n----------------------------------------------------------------------\nRan 6 tests in 0.013s\n\nFAILED (failures=2, errors=1)"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', seed=0):\n    np.random.seed(seed)\n    dates = pd.date_range(start=start_date, periods=periods, freq=freq)\n    prices = np.random.uniform(100, 500, size=periods)\n    df = pd.DataFrame({'Date': dates, 'Price': prices})\n\n    fig, ax = plt.subplots()\n    ax.plot(df['Date'], df['Price'], marker='o', linestyle='-')\n    ax.set_title('Share Prices Over Time')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Price')\n    ax.grid(True)\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n\n    return df, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_default_parameters (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 14, in test_default_parameters\nAssertionError: 'Share Prices Over Time' != 'Stock Prices'\n- Share Prices Over Time\n+ Stock Prices\n : Plot title should be 'Stock Prices'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.362s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', sales_data=None):\n    # Generate date range\n    dates = pd.date_range(start=start_date, periods=periods, freq=freq)\n    \n    # Generate sales data if not provided\n    if sales_data is None:\n        # For example, generate some sales data with a trend + noise\n        np.random.seed(0)\n        sales_data = 50 + np.arange(periods) * 2 + np.random.normal(0, 5, periods)\n    else:\n        sales_data = np.array(sales_data)\n        if len(sales_data) != periods:\n            raise ValueError(\"Length of sales_data must be equal to periods\")\n    \n    # Prepare data for regression: use time index as X\n    # We'll encode dates as ordinal integers for regression\n    X = np.arange(periods).reshape(-1, 1)\n    y = sales_data\n    \n    # Fit linear regression model\n    model = LinearRegression()\n    model.fit(X, y)\n    \n    # Forecast future sales for next 'periods' time points\n    X_future = np.arange(periods, 2*periods).reshape(-1, 1)\n    y_future = model.predict(X_future)\n    \n    return y_future\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_forecasted_values_increasing (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 26, in test_forecasted_values_increasing\nAssertionError: True is not false\n\n----------------------------------------------------------------------\nRan 5 tests in 0.008s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\nimport random\n\ndef task_func(rows=3, cols=2, min_val=0, max_val=100, seed=0):\n    random.seed(seed)\n    data = [[random.randint(min_val, max_val) for _ in range(cols)] for _ in range(rows)]\n    df = pd.DataFrame(data)\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_case_2\nAssertionError: Lists differ: [49, 33, 100, 74, 36] != [49, 33, 38, 27, 17]\n\nFirst differing element 2:\n100\n38\n\n- [49, 33, 100, 74, 36]\n+ [49, 33, 38, 27, 17]\n\n----------------------------------------------------------------------\nRan 5 tests in 0.007s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport numpy as np\nimport random\nfrom datetime import datetime, timedelta\n\ndef task_func(rows=3, columns=2, start_date=datetime(2021, 1, 1), end_date=datetime(2021, 12, 31), seed=0):\n    random.seed(seed)\n    total_needed = rows * columns\n    delta_days = (end_date - start_date).days + 1\n    \n    if total_needed > delta_days:\n        raise ValueError(\"Range between start_date and end_date is too small for the requested unique dates.\")\n        \n    all_dates = [start_date + timedelta(days=i) for i in range(delta_days)]\n    selected_dates = random.sample(all_dates, total_needed)\n    arr = np.array(selected_dates).reshape(rows, columns)\n    return arr\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 10, in test_case_1\nTypeError: int() argument must be a string, a bytes-like object or a real number, not 'datetime.timedelta'\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 15, in test_case_2\nTypeError: int() argument must be a string, a bytes-like object or a real number, not 'datetime.timedelta'\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_case_3\nTypeError: int() argument must be a string, a bytes-like object or a real number, not 'datetime.timedelta'\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 30, in test_case_5\nTypeError: int() argument must be a string, a bytes-like object or a real number, not 'datetime.timedelta'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.006s\n\nFAILED (errors=4)"}}
{"result": "```python\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(rows=3, columns=2, seed=42):\n    np.random.seed(seed)\n    data = np.random.randint(0, 10, size=(rows, columns)).astype(float)\n    scaler = MinMaxScaler()\n    scaled = scaler.fit_transform(data)\n    return scaled\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\ndef task_func(rows, columns, seed=None):\n    if seed is not None:\n        np.random.seed(seed)\n    data = np.random.rand(rows, columns)\n    return pd.DataFrame(data)\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nfrom scipy.linalg import svd\ndef task_func(rows=3, columns=2, seed=0):\n    np.random.seed(seed)\n    A = np.random.rand(rows, columns)\n    U, s, Vh = svd(A, full_matrices=False)\n    return U, s, Vh\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_case_1\nAssertionError: Tuples differ: (3, 2) != (3, 3)\n\nFirst differing element 1:\n2\n3\n\n- (3, 2)\n?     ^\n\n+ (3, 3)\n?     ^\n\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 26, in test_case_3\nAssertionError: Tuples differ: (2, 3) != (3, 3)\n\nFirst differing element 0:\n2\n3\n\n- (2, 3)\n?  ^\n\n+ (3, 3)\n?  ^\n\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 40, in test_case_5\nAssertionError: Tuples differ: (4, 3) != (4, 4)\n\nFirst differing element 1:\n3\n4\n\n- (4, 3)\n?     ^\n\n+ (4, 4)\n?     ^\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.004s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nimport random\nfrom random import randint, seed\n# Constants\nCATEGORIES = ['Electronics', 'Clothing', 'Home & Kitchen', 'Books', 'Toys & Games']\ndef task_func(mystrings, n_products, seed=0):\n    seed(seed)\n    np.random.seed(seed)\n    product_names = []\n    categories = []\n    prices = []\n    for _ in range(n_products):\n        pname = random.choice(mystrings).replace(' ', '_')\n        cat = random.choice(CATEGORIES)\n        price = np.random.normal(50, 10)\n        prices.append(price)\n        product_names.append(pname)\n        categories.append(cat)\n    df = pd.DataFrame({\n        'Product Name': product_names,\n        'Category': categories,\n        'Price': prices\n    })\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 7, in test_case_1\n  File \"<bigcode>\", line 9, in task_func\nTypeError: 'int' object is not callable\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 14, in test_case_2\n  File \"<bigcode>\", line 9, in task_func\nTypeError: 'int' object is not callable\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_case_3\n  File \"<bigcode>\", line 9, in task_func\nTypeError: 'int' object is not callable\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 26, in test_case_4\n  File \"<bigcode>\", line 9, in task_func\nTypeError: 'int' object is not callable\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 31, in test_case_5\n  File \"<bigcode>\", line 9, in task_func\nTypeError: 'int' object is not callable\n\n----------------------------------------------------------------------\nRan 5 tests in 0.001s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport pandas as pd\nimport random\nfrom datetime import datetime\ndef task_func(\n    task_list,\n    n_tasks,\n    employees=[\"John Doe\", \"Jane Smith\", \"James Brown\", \"Mary Johnson\", \"Robert Davis\"],\n    seed=None,\n):\n    if n_tasks < 0:\n        raise ValueError(\"n_tasks cannot be negative\")\n    if seed is not None:\n        random.seed(seed)\n    available_tasks = [task.replace(\" \", \"_\") for task in task_list]\n    if n_tasks > len(available_tasks):\n        n_tasks = len(available_tasks)\n    chosen_tasks = random.sample(available_tasks, n_tasks)\n    assignments = []\n    current_date = datetime.now().date()\n    for task in chosen_tasks:\n        assigned_to = random.choice(employees)\n        assignments.append({\"Task Name\": task, \"Assigned To\": assigned_to, \"Due Date\": current_date})\n    return pd.DataFrame(assignments)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 16, in test_case_1\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 32, in test_case_3\nAssertionError: 3 != 10\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 41, in test_case_5\nAssertionError: Items in the second set but not the first:\n'Task Name'\n'Due Date'\n'Assigned To'\n\n----------------------------------------------------------------------\nRan 10 tests in 0.012s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\ndef task_func(mystrings, folder_path, seed=None):\n    if seed is not None:\n        np.random.seed(seed)\n    # Deduplicate while maintaining order\n    seen = set()\n    unique_names = []\n    for s in mystrings:\n        if s not in seen:\n            seen.add(s)\n            unique_names.append(s)\n    # Check/create directory\n    if not os.path.exists(folder_path):\n        try:\n            os.makedirs(folder_path)\n        except Exception as e:\n            raise FileNotFoundError(f\"Cannot create directory: {folder_path}\") from e\n    filenames = []\n    for name in unique_names:\n        data = np.random.rand(10)\n        plt.figure()\n        plt.bar(range(1, 11), data)\n        plt.title(name)\n        fname = name.replace(' ', '_') + \".png\"\n        full_path = os.path.join(folder_path, fname)\n        plt.savefig(full_path)\n        plt.close()\n        filenames.append(fname)\n    return filenames\n```", "match": {"category": "success"}}
{"result": "```python\nimport random\nimport re\ndef task_func(target_words, n_sentences, vocabulary):\n    if n_sentences < 0 or not vocabulary:\n        raise ValueError(\"Invalid input: n_sentences must be non-negative and vocabulary must not be empty.\")\n    # Prepare a pattern with target words, ignoring case, and escaping for regex\n    # Sort target_words by length descending to avoid partial overlaps\n    sorted_targets = sorted(target_words, key=len, reverse=True)\n    # Create a pattern that matches any of the target phrases with spaces between words\n    # We want to find any of the target words/phrases in the sentence ignoring case\n    # Replace the spaces within matched target phrase by underscores\n    # Build regex that matches any target phrase ignoring case\n    # Use capturing groups to handle replacement\n    pattern = re.compile(\n        r'(' + '|'.join(re.escape(tw) for tw in sorted_targets) + r')',\n        re.IGNORECASE\n    )\n    sentences = []\n    for _ in range(n_sentences):\n        words = [random.choice(vocabulary) for __ in range(10)]\n        sentence = ' '.join(words)\n        # Replace target words with underscores inside (replace spaces in matched phrase with underscores)\n        def repl(m):\n            return m.group(0).replace(' ', '_')\n        replaced_sentence = pattern.sub(repl, sentence)\n        sentences.append(replaced_sentence.lower())\n    return sentences\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport re\nfrom collections import Counter\n\ndef task_func(mystrings, text):\n    if not text.strip():\n        raise ValueError(\"Input text is empty\")\n    # Convert to lower case for case insensitivity\n    text_lower = text.lower()\n    # Extract words as given by mystrings but here we consider text only, so split by whitespace\n    # But instructions say \"given words\" - assuming mystrings is list of words relevant for replacement\n    # However, task states \"Replace spaces in given words\", so replacing spaces with underscores in each word in mystrings\n    # Then count frequency of these modified words from the input text\n    # So first modify words in mystrings by replacing spaces by underscores\n    # Then extract words from text and match after transformation\n    \n    # Replace spaces with underscores in mystrings \n    modified_words = [w.lower().replace(' ', '_') for w in mystrings]\n\n    # Extract all words from text ignoring case - split on non-word boundaries\n    words_in_text = re.findall(r'\\b\\w+\\b', text_lower)\n    \n    # We need to replace spaces inside words but words here have no spaces, so presumably mystrings can have spaces\n    # We have to count frequency of these modified words in the text, so we match by replacing spaces with underscores in words in text?\n    # But words in text do not have spaces.\n    # The prompt probably means mystrings are the words we want to count frequency of in the text, but after the replacement in mystrings\n    # So probably, if mystrings have multi-word strings, replace spaces with underscores\n    # But the text will have these words separated? So no direct match unless text includes those multi-word sequences\n\n    # Maybe the task is: \n    # 1) For each word in text, replace spaces with underscores (which does nothing since word is single word)\n    # 2) Count frequency of each unique word after replacement\n    # So we can just replace spaces with underscores in text (which does nothing)\n    # But the problem says \"Replace spaces in given words with underscores\", then plot frequency of unique words after modification\n    # So mystrings is the list of words to consider, text is the corpus string\n\n    # Let's clarify: The function takes mystrings (list of strings that can have spaces) and text (string)\n    # Replace spaces with underscores in each element of mystrings to get a list of modified words\n    # Then count frequency of the modified words in text by counting the occurrences of each modified word in text (case-insensitive)\n    # Since text is a string, and modified words may have underscores, we should replace spaces in text with underscores to count occurrences properly\n\n    # So we can convert text's all spaces to underscores: text_lower_us = text_lower.replace(' ', '_')\n    # Then count occurrences of each modified word in text_lower_us\n\n    text_lower_us = text_lower.replace(' ', '_')\n    frequencies = []\n    for mw in modified_words:\n        # Use regex to count occurrences of mw as a whole word in text_lower_us\n        # \\b doesn't apply on underscore boundaries, so match exact substring counts\n        freq = len(re.findall(r'(?<!\\w)'+re.escape(mw)+r'(?!\\w)', text_lower_us))\n        frequencies.append(freq)\n\n    # Plot frequency\n    fig, ax = plt.subplots()\n    ax.bar(modified_words, frequencies)\n    ax.set_xlabel(\"Words\")\n    ax.set_ylabel(\"Frequency\")\n    ax.set_title(\"Frequency of each unique modified word\")\n    plt.xticks(rotation=45, ha=\"right\")\n    plt.tight_layout()\n\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 10, in test_case_1\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_case_10 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 67, in test_case_10\nAssertionError: 0 != 3\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 16, in test_case_2\nAssertionError: 'hello_world' != 'hello_world!'\n- hello_world\n+ hello_world!\n?            +\n\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 23, in test_case_3\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 32, in test_case_4\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 37, in test_case_5\nAssertionError: 'hello_world!' not found in ['hello_world']\n\n======================================================================\nFAIL: test_case_6 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 44, in test_case_6\nAssertionError: 'Hello_World!' not found in ['hello_world']\n\n======================================================================\nFAIL: test_case_7 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 51, in test_case_7\nAssertionError: 'not_in_text' unexpectedly found in ['not_in_text']\n\n----------------------------------------------------------------------\nRan 10 tests in 0.329s\n\nFAILED (failures=8)"}}
{"result": "```python\nimport re\nimport string\nimport random\ndef task_func(text: str, seed=None) -> str:\n    if seed is not None:\n        random.seed(seed)\n    # Remove punctuation\n    text = re.sub(f\"[{re.escape(string.punctuation)}]\", \"\", text)\n    # Replace tabs and newlines first to avoid partial replacement issues\n    text = text.replace('\\n', '___').replace('\\t', '__').replace(' ', '_')\n    # Randomize casing\n    def random_case(c):\n        return c.upper() if random.random() < 0.5 else c.lower()\n    return ''.join(random_case(c) if c.isalpha() else c for c in text)\n```", "match": {"category": "success"}}
{"result": "```python\nimport string\nimport re\ndef task_func(text: str) -> tuple:\n    words = text.split()\n    word_count = len(words)\n    cleaned_text = re.sub(r'[\\s'+re.escape(string.punctuation)+']', '', text)\n    char_count = len(cleaned_text)\n    unique_char_count = len(set(cleaned_text))\n    return (word_count, char_count, unique_char_count)\n```", "match": {"category": "success"}}
{"result": "```python\nimport random\nimport re\ndef task_func(text, seed=None):\n    if seed is not None:\n        random.seed(seed)\n    def scramble_word(match):\n        word = match.group(0)\n        if len(word) <= 3:\n            return word\n        middle = list(word[1:-1])\n        random.shuffle(middle)\n        return word[0] + ''.join(middle) + word[-1]\n    return re.sub(r'\\b\\w+\\b', scramble_word, text)\n```", "match": {"category": "success"}}
{"result": "```python\nimport string\nimport random\ndef task_func(text, seed=None):\n    if seed is not None:\n        random.seed(seed)\n    result = []\n    for ch in text:\n        if ch.isalpha():\n            if ch.isupper():\n                result.append(random.choice(string.ascii_uppercase))\n            else:\n                result.append(random.choice(string.ascii_lowercase))\n        else:\n            result.append(ch)\n    return ''.join(result)\n```", "match": {"category": "success"}}
{"result": "```python\nimport string\nimport random\ndef task_func(text, seed=None):\n    if not text:\n        raise ValueError(\"Input text is empty\")\n    if seed is not None:\n        random.seed(seed)\n    result = []\n    for ch in text:\n        if ch.isalpha():\n            result.append(random.choice(string.ascii_lowercase))\n        elif ch.isdigit():\n            result.append(random.choice(string.digits))\n        elif ch == ' ':\n            if random.random() < 0.5:\n                result.append(random.choice(string.digits))\n            else:\n                result.append(random.choice(string.ascii_lowercase))\n        else:\n            result.append(ch)\n    return ''.join(result)\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport glob\nfrom collections import Counter\ndef task_func(directory, extensions=[\".txt\", \".docx\", \".xlsx\", \".csv\"], keep_zero=True):\n    if not os.path.isdir(directory):\n        raise OSError(f\"Directory does not exist: {directory}\")\n    counts = Counter({ext:0 for ext in extensions})\n    for root, _, files in os.walk(directory):\n        for file in files:\n            for ext in extensions:\n                if file.endswith(ext):\n                    counts[ext] += 1\n                    break\n    if not keep_zero:\n        counts = Counter({ext: cnt for ext, cnt in counts.items() if cnt > 0})\n    return counts\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nfrom pathlib import Path\nimport glob\nimport shutil\ndef task_func(source_directory: str, target_directory: str):\n    source_path = Path(source_directory)\n    if not source_path.exists() or not source_path.is_dir():\n        raise FileNotFoundError(f\"Source directory '{source_directory}' does not exist.\")\n    target_path = Path(target_directory)\n    target_path.mkdir(parents=True, exist_ok=True)\n    extensions = {\".txt\", \".docx\", \".xlsx\", \".csv\"}\n    moved_count = 0\n    for file_path in source_path.rglob(\"*\"):\n        if file_path.is_file() and file_path.suffix.lower() in extensions:\n            dest_file = target_path / file_path.name\n            if dest_file.exists():\n                stem = file_path.stem\n                suffix = file_path.suffix\n                n = 1\n                while True:\n                    new_name = f\"{stem}-{n}{suffix}\"\n                    dest_file = target_path / new_name\n                    if not dest_file.exists():\n                        break\n                    n += 1\n            shutil.move(str(file_path), str(dest_file))\n            moved_count += 1\n    return moved_count\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport glob\nfrom pathlib import Path\nimport zipfile\ndef task_func(source_directory, target_directory, zip_name):\n    valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n    source_path = Path(source_directory)\n    target_path = Path(target_directory)\n    \n    if not source_path.exists() or not source_path.is_dir():\n        raise OSError(f\"Source directory does not exist: {source_directory}\")\n    \n    target_path.mkdir(parents=True, exist_ok=True)\n    zip_file_path = target_path / f\"{zip_name}.zip\"\n    \n    with zipfile.ZipFile(zip_file_path, mode='w', compression=zipfile.ZIP_DEFLATED) as zipf:\n        for ext in valid_extensions:\n            for file_path in source_path.rglob(f\"*{ext}\"):\n                if file_path.is_file():\n                    # Add file to zip with relative path to source_directory\n                    zipf.write(file_path, file_path.relative_to(source_path))\n    \n    return str(zip_file_path)\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nfrom pathlib import Path\nimport pandas as pd\nimport docx\nimport csv\nimport openpyxl\n\ndef task_func(source_directory: str, target_directory: str) -> int:\n    source_path = Path(source_directory)\n    target_path = Path(target_directory)\n\n    if not source_path.exists() or not source_path.is_dir():\n        raise FileNotFoundError(f\"Source directory '{source_directory}' does not exist.\")\n\n    target_path.mkdir(parents=True, exist_ok=True)\n\n    supported_extensions = {'.txt', '.docx', '.xlsx', '.csv'}\n    converted_count = 0\n\n    for file_path in source_path.iterdir():\n        if file_path.suffix.lower() not in supported_extensions or not file_path.is_file():\n            continue\n\n        try:\n            # Extract text based on extension\n            text = \"\"\n            if file_path.suffix.lower() == '.txt':\n                text = file_path.read_text(encoding='utf-8', errors='ignore')\n\n            elif file_path.suffix.lower() == '.docx':\n                doc = docx.Document(str(file_path))\n                paragraphs = [para.text for para in doc.paragraphs]\n                text = \"\\n\".join(paragraphs)\n\n            elif file_path.suffix.lower() == '.xlsx':\n                wb = openpyxl.load_workbook(file_path, read_only=True, data_only=True)\n                all_texts = []\n                for sheet in wb.worksheets:\n                    for row in sheet.iter_rows(values_only=True):\n                        row_text = [str(cell) if cell is not None else '' for cell in row]\n                        all_texts.append(\"\\t\".join(row_text))\n                text = \"\\n\".join(all_texts)\n\n            elif file_path.suffix.lower() == '.csv':\n                df = pd.read_csv(file_path, dtype=str, na_filter=False)\n                # convert to a string representation of rows joined by tabs\n                lines = df.apply(lambda row: \"\\t\".join(row.values), axis=1).tolist()\n                text = \"\\n\".join(lines)\n\n            # Prepare dataframe\n            df_out = pd.DataFrame({'Text': [text]})\n            out_file = target_path / (file_path.stem + '.csv')\n\n            df_out.to_csv(out_file, index=False)\n            converted_count += 1\n\n        except Exception:\n            # skip files that raise errors during processing\n            continue\n\n    return converted_count\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_9 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 89, in test_case_9\nAssertionError: 0 != 1\n\n----------------------------------------------------------------------\nRan 9 tests in 0.132s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport os\nimport re\nimport shutil\ndef task_func(source_directory: str, target_directory: str, pattern: str = r\"\\d{4}\") -> int:\n    if not os.path.isdir(source_directory):\n        return 0\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n    regex = re.compile(pattern)\n    moved_count = 0\n    for filename in os.listdir(source_directory):\n        if regex.search(filename):\n            src_path = os.path.join(source_directory, filename)\n            if os.path.isfile(src_path):\n                dst_path = os.path.join(target_directory, filename)\n                shutil.move(src_path, dst_path)\n                moved_count += 1\n    return moved_count\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef task_func(df: pd.DataFrame):\n    if df.empty:\n        raise ValueError(\"Input DataFrame is empty\")\n    if not all(pd.api.types.is_numeric_dtype(dtype) for dtype in df.dtypes):\n        raise ValueError(\"DataFrame contains non-numeric data\")\n    \n    # Compute cumulative sum ignoring NaNs (treat NaN as zero in summation)\n    cumsum_df = df.fillna(0).cumsum()\n    \n    fig, ax = plt.subplots()\n    cumsum_df.plot(kind='bar', ax=ax)\n    ax.set_title('Cumulative Sum per Column')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Sum')\n    ax.legend(title='Columns')\n    fig.tight_layout()\n    \n    return cumsum_df, fig\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 43, in test_case_5\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1224, in assert_frame_equal\n    assert_series_equal(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1014, in assert_series_equal\n    _testing.assert_almost_equal(\n  File \"pandas/_libs/testing.pyx\", line 52, in pandas._libs.testing.assert_almost_equal\n  File \"pandas/_libs/testing.pyx\", line 172, in pandas._libs.testing.assert_almost_equal\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame.iloc[:, 0] (column name=\"A\") are different\n\nDataFrame.iloc[:, 0] (column name=\"A\") values are different (33.33333 %)\n[index]: [0, 1, 2]\n[left]:  [1.0, 1.0, 4.0]\n[right]: [1.0, nan, 4.0]\nAt positional index 1, first diff: 1.0 != nan\n\n----------------------------------------------------------------------\nRan 7 tests in 0.316s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport numpy as np\nfrom scipy import integrate\nimport matplotlib.pyplot as plt\ndef task_func(func, x_range=(-2, 2), num_points=1000):\n    x = np.linspace(x_range[0], x_range[1], num_points)\n    y = func(x)\n    cumulative_integral = integrate.cumtrapz(y, x, initial=0)\n    \n    fig, ax = plt.subplots()\n    ax.plot(x, y, label=f'{func.__name__}(x)')\n    ax.plot(x, cumulative_integral, label=f'Integral of {func.__name__}(x)')\n    ax.set_xlabel('x')\n    ax.set_ylabel(f'Function and Integral values of {func.__name__}')\n    ax.legend()\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef task_func(data):\n    df = pd.DataFrame(data)\n    if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n    numeric_df = df.select_dtypes(include='number')\n    if numeric_df.empty:\n        raise ValueError(\"No numeric columns present\")\n    cumsum_df = numeric_df.cumsum()\n    ax = sns.heatmap(cumsum_df.transpose())\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_cumsum_correctness (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 14, in test_cumsum_correctness\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/numpy/testing/_private/utils.py\", line 934, in assert_array_equal\n    assert_array_compare(operator.__eq__, x, y, err_msg=err_msg,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/numpy/testing/_private/utils.py\", line 844, in assert_array_compare\n    raise AssertionError(msg)\nAssertionError: \nArrays are not equal\nCumulative sum calculation is incorrect\nMismatched elements: 4 / 6 (66.7%)\nMax absolute difference: 5\nMax relative difference: 1.25\n x: array([ 1,  4,  3,  9,  6, 15])\n y: array([ 1,  3,  6,  4,  9, 15])\n\n======================================================================\nFAIL: test_non_numeric_columns_ignored (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 23, in test_non_numeric_columns_ignored\nAssertionError: 3 != 1 : Non-numeric columns should be ignored\n\n----------------------------------------------------------------------\nRan 8 tests in 0.285s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\ndef task_func(df: pd.DataFrame) -> pd.DataFrame:\n    if df.empty:\n        raise ValueError(\"DataFrame is empty.\")\n    if df.isnull().values.any():\n        raise ValueError(\"DataFrame contains NaN values.\")\n    if not all(np.issubdtype(dt, np.number) for dt in df.dtypes):\n        raise TypeError(\"DataFrame contains non-numeric data types.\")\n    \n    cumsum_df = df.cumsum()\n    scaler = MinMaxScaler()\n    normalized = scaler.fit_transform(cumsum_df)\n    return pd.DataFrame(normalized, columns=df.columns, index=df.index)\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data: np.ndarray) -> plt.Axes:\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    if np.isnan(data).any():\n        raise ValueError(\"Input array contains NaNs.\")\n    if (data < 0).any():\n        raise ValueError(\"Input array contains negative numbers.\")\n    \n    n = len(data)\n    if n == 0:\n        fig, ax = plt.subplots()\n        ax.set_title(\"Cumulative Probability Plot\")\n        ax.set_xlabel(\"Index\")\n        ax.set_ylabel(\"Cumulative Probability\")\n        return ax\n    \n    sorted_data = np.sort(data)\n    total_sum = sorted_data.sum()\n    \n    if total_sum == 0:\n        cumulative_probs = np.zeros(n)\n    else:\n        cumulative_probs = np.cumsum(sorted_data) / total_sum\n    \n    fig, ax = plt.subplots()\n    ax.plot(np.arange(n), cumulative_probs, marker='o', linestyle='-')\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nfrom pathlib import Path\nfrom datetime import datetime, timezone\n\ndef task_func(directory_path: str):\n    dir_path = Path(directory_path)\n    if not dir_path.exists() or not dir_path.is_dir():\n        raise ValueError(\"The provided directory does not exist.\")\n    \n    result = []\n    for entry in dir_path.iterdir():\n        if entry.is_file():\n            stat = entry.stat()\n            size = stat.st_size\n            # Use st_ctime as creation time, noting platform differences\n            creation_time = datetime.fromtimestamp(stat.st_ctime, tz=timezone.utc).isoformat()\n            modification_time = datetime.fromtimestamp(stat.st_mtime, tz=timezone.utc).isoformat()\n            result.append((entry.name, size, creation_time, modification_time))\n    return result\n```", "match": {"category": "success"}}
{"result": "```python\nimport pathlib\nimport os\ndef task_func(path: str, delimiter: str = os.path.sep) -> list:\n    invalid_chars = set('<>:\"|?*')\n    # Convert backslashes to forward slashes\n    normalized_path = path.replace('\\\\', '/')\n    # Check for invalid characters\n    if any(char in invalid_chars for char in normalized_path):\n        raise ValueError(\"The path contains invalid characters.\")\n    # Split by delimiter after converting delimiter to '/'\n    # Because path is normalized with '/'\n    effective_delimiter = delimiter.replace('\\\\', '/')\n    components = normalized_path.split(effective_delimiter)\n    # Filter out empty components (e.g. leading '/' or multiple delimiters)\n    return [comp for comp in components if comp]\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_case_4\n  File \"<bigcode>\", line 10, in task_func\nValueError: The path contains invalid characters.\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 23, in test_case_5\n  File \"<bigcode>\", line 10, in task_func\nValueError: The path contains invalid characters.\n\n----------------------------------------------------------------------\nRan 7 tests in 0.002s\n\nFAILED (errors=2)"}}
{"result": "```python\nimport os\nimport shutil\ndef task_func(path, delimiter=\"/\"):\n    if not isinstance(path, str) or not path:\n        raise ValueError(\"Path must be a non-empty string.\")\n    \n    components = path.split(delimiter)\n    if any(not comp or any(c in comp for c in ('\\0', '/', '\\\\')) for comp in components):\n        raise ValueError(\"Path contains invalid components.\")\n    \n    cumulative_path = \"\"\n    result = []\n    \n    for comp in components:\n        cumulative_path = os.path.join(cumulative_path, comp) if cumulative_path else comp\n        if not os.path.exists(cumulative_path):\n            raise FileNotFoundError(f\"Path does not exist: {cumulative_path}\")\n        usage = shutil.disk_usage(cumulative_path)\n        usage_dict = {\n            'total': usage.total,\n            'used': usage.used,\n            'free': usage.free\n        }\n        result.append((comp, usage_dict))\n    return result\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_nonexist_path (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 30, in test_nonexist_path\n  File \"<bigcode>\", line 10, in task_func\nValueError: Path contains invalid components.\n\n======================================================================\nERROR: test_path_with_trailing_delimiter (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 114, in test_path_with_trailing_delimiter\n  File \"<bigcode>\", line 10, in task_func\nValueError: Path contains invalid components.\n\n----------------------------------------------------------------------\nRan 7 tests in 0.008s\n\nFAILED (errors=2)"}}
{"result": "```python\nimport shutil\nimport pathlib\n\ndef task_func(source_path, destination_path):\n    src = pathlib.Path(source_path)\n    dest = pathlib.Path(destination_path)\n    if not src.exists() or not src.is_dir():\n        raise ValueError(\"source_path does not exist or is not a directory\")\n    \n    dest.mkdir(parents=True, exist_ok=True)\n    \n    copied_files = []\n    for item in src.iterdir():\n        if item.is_file():\n            shutil.copy2(item, dest / item.name)\n            copied_files.append(item.name)\n    \n    return (src.name, copied_files)\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\ndef task_func(rows, columns=[\"A\", \"B\", \"C\", \"D\", \"E\"], seed=0) -> pd.DataFrame:\n    np.random.seed(seed)\n    unique_sorted_cols = sorted(set(columns))\n    data = np.random.rand(rows, len(unique_sorted_cols))\n    df = pd.DataFrame(data, columns=unique_sorted_cols)\n    shuffled_cols = np.random.permutation(unique_sorted_cols)\n    return df[shuffled_cols]\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(records: np.ndarray, random_seed: int = 0) -> pd.DataFrame:\n    if records.ndim != 2:\n        raise ValueError(\"records must be 2D\")\n    \n    np.random.seed(random_seed)\n    \n    # Shuffle features (columns)\n    shuffled_indices = np.random.permutation(records.shape[1])\n    records_shuffled = records[:, shuffled_indices]\n    \n    # Normalize data (zero mean, unit variance)\n    scaler = StandardScaler()\n    records_normalized = scaler.fit_transform(records_shuffled)\n    \n    # Create shuffled feature names\n    n_features = records.shape[1]\n    feature_names = [f\"f{i+1}\" for i in range(n_features)]\n    shuffled_names = np.array(feature_names)[shuffled_indices]\n    \n    return pd.DataFrame(records_normalized, columns=shuffled_names)\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(array, features=None, seed=None):\n    if not isinstance(array, np.ndarray):\n        raise ValueError(\"Input must be a numpy array.\")\n    if array.ndim != 2 or array.size == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n\n    n_cols = array.shape[1]\n\n    if features is not None:\n        if len(features) != n_cols:\n            raise ValueError(\"Length of features does not match number of columns in array.\")\n        labels = features\n    else:\n        labels = [str(i) for i in range(1, n_cols + 1)]\n\n    rng = np.random.default_rng(seed)\n    perm = rng.permutation(n_cols)\n    shuffled_array = array[:, perm]\n    shuffled_labels = [labels[i] for i in perm]\n\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, xticklabels=shuffled_labels)\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_custom_features (builtins.TestCases)\nTest heatmap with custom features.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_custom_features\nAssertionError: Lists differ: ['A', 'D', 'E', 'C', 'B'] != ['A', 'B', 'C', 'D', 'E']\n\nFirst differing element 1:\n'D'\n'B'\n\n- ['A', 'D', 'E', 'C', 'B']\n+ ['A', 'B', 'C', 'D', 'E']\n\n======================================================================\nFAIL: test_default_features (builtins.TestCases)\nTest heatmap with default features.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_default_features\nAssertionError: Lists differ: ['2', '5', '4', '3', '1'] != ['1', '2', '3', '4', '5']\n\nFirst differing element 0:\n'2'\n'1'\n\n- ['2', '5', '4', '3', '1']\n+ ['1', '2', '3', '4', '5']\n\n----------------------------------------------------------------------\nRan 5 tests in 0.399s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndef task_func(array, seed=None):\n    if not isinstance(array, np.ndarray) or array.ndim != 2:\n        raise ValueError(\"Input array must be 2D.\")\n    if array.size == 0 or array.shape[1] == 0:\n        return pd.DataFrame(columns=['PC1', 'PC2'])\n    rng = np.random.default_rng(seed)\n    permuted_cols = rng.permutation(array.shape[1])\n    shuffled_array = array[:, permuted_cols]\n    n_components = 2 if array.shape[1] >= 2 else array.shape[1]\n    pca = PCA(n_components=n_components)\n    pcs = pca.fit_transform(shuffled_array)\n    df = pd.DataFrame(pcs, columns=[f'PC{i+1}' for i in range(n_components)])\n    if n_components == 1:\n        df['PC2'] = np.nan\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_with_5x1_array (builtins.TestCases)\nTest PCA on a 5x1 array.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_with_5x1_array\nAssertionError: Tuples differ: (5, 2) != (5, 1)\n\nFirst differing element 1:\n2\n1\n\n- (5, 2)\n?     ^\n\n+ (5, 1)\n?     ^\n : DataFrame shape should be (5, 1) for a single component.\n\n----------------------------------------------------------------------\nRan 6 tests in 0.013s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\n\ndef task_func(\n    feature_array,\n    target_array,\n    feature_names=[\"f1\", \"f2\", \"f3\", \"f4\", \"f5\"],\n    target_name=\"target\",\n    seed=None,\n):\n    rng = np.random.default_rng(seed)\n    df = pd.DataFrame(feature_array, columns=feature_names)\n    shuffled_columns = rng.permutation(df.columns)\n    df_shuffled = df[shuffled_columns]\n\n    clf = RandomForestClassifier(random_state=seed)\n    clf.fit(df_shuffled, target_array)\n    return clf\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\n\ndef task_func(df):\n    if df.empty:\n        raise ValueError(\"The DataFrame is empty.\")\n    numeric_df = df.select_dtypes(include=[np.number])\n    if numeric_df.empty:\n        raise ValueError(\"No numeric columns are present in the DataFrame.\")\n    \n    corr_matrix = numeric_df.corr()\n    fig, ax = plt.subplots(figsize=(8, 6))\n    sns.heatmap(corr_matrix, annot=True, fmt=\".2f\", cmap=\"coolwarm\", ax=ax)\n    ax.set_title(\"Correlation Matrix Heatmap\")\n    \n    scaler = StandardScaler()\n    standardized_array = scaler.fit_transform(numeric_df)\n    standardized_df = pd.DataFrame(standardized_array, index=numeric_df.index, columns=numeric_df.columns)\n    \n    return standardized_df, fig\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_7 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 48, in test_case_7\nAssertionError: False is not true\n\n----------------------------------------------------------------------\nRan 7 tests in 0.276s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pandas as pd\nfrom datetime import datetime\nimport random\nimport matplotlib.pyplot as plt\n\ndef task_func(start_date, end_date, num_series, seed=None):\n    if num_series < 1:\n        raise ValueError(\"num_series must be at least 1\")\n    start = pd.to_datetime(start_date)\n    end = pd.to_datetime(end_date)\n    if start > end:\n        raise ValueError(\"start_date cannot be later than end_date\")\n    if seed is not None:\n        random.seed(seed)\n\n    dates = pd.date_range(start=start, end=end)\n    data = {}\n    for i in range(1, num_series + 1):\n        data[f\"series_{i}\"] = [random.randint(0, 100) for _ in range(len(dates))]\n    df = pd.DataFrame(data, index=dates)\n\n    ax = df.plot(title=\"Random Time Series\")\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Value\")\n    return df, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\n\ndef task_func(df, column, bins=30, density=True, alpha=0.6, color=\"g\", seed=None):\n    if seed is not None:\n        np.random.seed(seed)\n    data = df[column].dropna()\n    mu, std = norm.fit(data)\n    \n    fig, ax = plt.subplots()\n    # Plot histogram\n    n, bins_, patches = ax.hist(data, bins=bins, density=density, alpha=alpha, color=color, edgecolor='black')\n\n    # Plot the PDF.\n    xmin, xmax = plt.xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = norm.pdf(x, mu, std)\n    if density:\n        ax.plot(x, p, 'k', linewidth=2)\n    else:\n        # Scale p to counts if not density\n        scale = len(data) * (bins_[1] - bins_[0])\n        ax.plot(x, p * scale, 'k', linewidth=2)\n    \n    ax.set_title(f\"Histogram and Normal fit for '{column}'\\nMean = {mu:.2f}, Std = {std:.2f}\")\n    ax.set_xlabel(column)\n    ax.set_ylabel('Density' if density else 'Count')\n    \n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    if df.empty:\n        raise ValueError(\"The DataFrame is empty.\")\n    if not all(np.issubdtype(dtype, np.number) for dtype in df.dtypes):\n        raise TypeError(\"The DataFrame contains non-numeric data types.\")\n    covariance_df = df.cov()\n    pair_plot = sns.pairplot(df)\n    plt.close(pair_plot.fig)  # To prevent automatic display when running in some environments\n    return covariance_df, pair_plot\n```", "match": {"category": "success"}}
{"result": "```python\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\n\ndef task_func(df, x_column, y_column):\n    fig, ax = plt.subplots()\n    X = df[[x_column]].values\n    y = df[y_column].values\n\n    ax.scatter(X, y)\n\n    model = LinearRegression()\n    model.fit(X, y)\n    x_fit = np.linspace(X.min(), X.max(), 100).reshape(-1, 1)\n    y_fit = model.predict(x_fit)\n\n    ax.plot(x_fit, y_fit, color='red')\n    ax.set_xlabel(x_column)\n    ax.set_ylabel(y_column)\n\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_with_categorical_data (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 68, in test_with_categorical_data\n  File \"<bigcode>\", line 11, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/__init__.py\", line 1442, in inner\n    return func(ax, *map(sanitize_sequence, args), **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/axes/_axes.py\", line 4578, in scatter\n    x, y = self._process_unit_info([(\"x\", x), (\"y\", y)], kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/axes/_base.py\", line 2551, in _process_unit_info\n    axis.update_units(data)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/axis.py\", line 1670, in update_units\n    default = self.converter.default_units(data, self)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/category.py\", line 105, in default_units\n    axis.set_units(UnitData(data))\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/category.py\", line 181, in __init__\n    self.update(data)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/matplotlib/category.py\", line 214, in update\n    for val in OrderedDict.fromkeys(data):\nTypeError: unhashable type: 'numpy.ndarray'\n\n----------------------------------------------------------------------\nRan 8 tests in 0.075s\n\nFAILED (errors=1)"}}
{"result": "```python\nimport pandas as pd\nimport json\nimport os\nimport math\n\ndef task_func(json_data, output_dir=\".\", file_name=\"country_population_report.csv\"):\n    # Parse and validate JSON input\n    try:\n        data = json.loads(json_data)\n    except Exception:\n        raise ValueError(\"Malformed JSON data\")\n    if not isinstance(data, dict) or len(data) == 0:\n        raise ValueError(\"JSON data is empty or not a JSON object\")\n    \n    countries = []\n    populations = []\n    for country, population in data.items():\n        if not isinstance(country, str):\n            raise ValueError(\"Country names must be strings\")\n        if not (isinstance(population, int) or isinstance(population, float)):\n            raise ValueError(\"Population values must be numeric\")\n        if population < 0:\n            raise ValueError(\"Population values must be non-negative\")\n        # Round down float populations\n        population = math.floor(population)\n        countries.append(country)\n        populations.append(population)\n    \n    df = pd.DataFrame({\"Country\": countries, \"Population\": populations})\n    \n    # Prepare output path\n    full_path = os.path.join(output_dir, file_name)\n    try:\n        df.to_csv(full_path, index=False)\n    except Exception as e:\n        raise IOError(f\"Cannot write to file {full_path}: {e}\")\n    \n    return full_path, df\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 19, in test_case_1\n  File \"<bigcode>\", line 22, in task_func\nValueError: Population values must be numeric\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 48, in test_case_4\n  File \"<bigcode>\", line 22, in task_func\nValueError: Population values must be numeric\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 56, in test_case_5\n  File \"<bigcode>\", line 22, in task_func\nValueError: Population values must be numeric\n\n======================================================================\nERROR: test_case_6 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 64, in test_case_6\n  File \"<bigcode>\", line 22, in task_func\nValueError: Population values must be numeric\n\n======================================================================\nERROR: test_case_8 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 88, in test_case_8\n  File \"<bigcode>\", line 22, in task_func\nValueError: Population values must be numeric\n\n======================================================================\nERROR: test_case_9 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 98, in test_case_9\n  File \"<bigcode>\", line 22, in task_func\nValueError: Population values must be numeric\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 37, in test_case_3\nAssertionError: ValueError not raised\n\n----------------------------------------------------------------------\nRan 9 tests in 0.008s\n\nFAILED (failures=1, errors=6)"}}
{"result": "```python\nimport json\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\ndef task_func(json_data: str, key_path: list):\n    # parse json\n    try:\n        data = json.loads(json_data)\n    except Exception as e:\n        raise ValueError(\"Input JSON data is corrupted or invalid.\") from e\n\n    # traverse keys\n    current = data\n    for key in key_path:\n        if not isinstance(current, dict) or key not in current:\n            raise KeyError(f\"Key '{key}' not found.\")\n        current = current[key]\n\n    # current should be the target data\n    # support list, nested list, or single numeric values\n    def extract_numbers(obj):\n        if isinstance(obj, (int, float, np.number)):\n            return [float(obj)]\n        if isinstance(obj, str):\n            # try converting string numbers separated by comma or space\n            s = obj.strip()\n            if s == \"\":\n                raise ValueError(\"Data string is empty.\")\n            try:\n                # try parsing as single float\n                return [float(s)]\n            except:\n                # try splitting by comma or space\n                parts = s.replace(',', ' ').split()\n                if not parts:\n                    raise ValueError(\"Data string is empty or corrupted.\")\n                nums = []\n                for p in parts:\n                    try:\n                        nums.append(float(p))\n                    except:\n                        raise ValueError(\"Data string contains non-numeric values.\")\n                return nums\n        if isinstance(obj, (list, tuple, np.ndarray)):\n            nums = []\n            for item in obj:\n                nums.extend(extract_numbers(item))\n            return nums\n        raise ValueError(\"Data is not numeric or cannot be extracted as numeric.\")\n\n    numbers = extract_numbers(current)\n    if len(numbers) == 0:\n        raise ValueError(\"No numeric data found.\")\n\n    # create dataframe for seaborn boxplot\n    df = pd.DataFrame({'values': numbers})\n\n    fig, ax = plt.subplots()\n    sns.boxplot(x='values', data=df, ax=ax)\n    ax.set_title(\"Boxplot of Extracted Data Values\")\n    return fig\n```", "match": {"category": "success"}}
{"result": "```python\nimport json\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\ndef task_func(json_data: str, data_key: str):\n    # Parse JSON string\n    data_dict = json.loads(json_data)\n\n    # Navigate nested keys if needed, support dot notation in data_key\n    keys = data_key.split('.')\n    current = data_dict\n    for k in keys:\n        if k not in current:\n            raise KeyError(f\"Key '{k}' not found in the data\")\n        current = current[k]\n\n    # Load data as pd.Series of float64\n    # Assume current is list-like of numbers\n    original_data = pd.Series(current, dtype='float64')\n\n    if original_data.empty:\n        return original_data, None, None\n\n    # Min-Max scaling\n    scaler = MinMaxScaler()\n    normalized_values = scaler.fit_transform(original_data.values.reshape(-1,1)).flatten()\n    normalized_data = pd.Series(normalized_values, dtype='float64')\n\n    # Plot\n    fig, ax = plt.subplots()\n    ax.plot(original_data.index, original_data.values, label=\"Original Data\")\n    ax.plot(normalized_data.index, normalized_data.values, label=\"Normalized Data\")\n    ax.set_title(\"Comparison of Original and Normalized Data\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Value\")\n    ax.legend()\n\n    return original_data, normalized_data, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport re\nfrom pathlib import Path\n\ndef task_func(dir_path: str, predicates: list) -> dict:\n    # Validate directory\n    p = Path(dir_path)\n    if not p.exists() or not p.is_dir():\n        raise FileNotFoundError(f\"{dir_path} does not exist or is not a directory\")\n\n    # Deduplicate predicates and keep only callables\n    unique_preds = list({pred for pred in predicates if callable(pred)})\n\n    if not unique_preds:\n        raise ValueError(\"No valid predicates provided\")\n\n    result = {}\n    for item in os.listdir(dir_path):\n        # Evaluate all predicates with the item name (no path)\n        checks = [pred(item) for pred in unique_preds]\n        result[item] = all(checks)\n\n    return result\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_deduplicate_predicates (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 108, in test_deduplicate_predicates\n  File \"<bigcode>\", line 16, in task_func\nValueError: No valid predicates provided\n\n======================================================================\nERROR: test_dir_is_dir (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 57, in test_dir_is_dir\n  File \"<bigcode>\", line 16, in task_func\nValueError: No valid predicates provided\n\n======================================================================\nERROR: test_dir_is_not_file (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 65, in test_dir_is_not_file\n  File \"<bigcode>\", line 16, in task_func\nValueError: No valid predicates provided\n\n======================================================================\nERROR: test_file_is_file (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 41, in test_file_is_file\n  File \"<bigcode>\", line 16, in task_func\nValueError: No valid predicates provided\n\n======================================================================\nERROR: test_file_is_not_dir (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 49, in test_file_is_not_dir\n  File \"<bigcode>\", line 16, in task_func\nValueError: No valid predicates provided\n\n======================================================================\nERROR: test_has_no_special_char (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 83, in test_has_no_special_char\n  File \"<bigcode>\", line 16, in task_func\nValueError: No valid predicates provided\n\n======================================================================\nERROR: test_has_numbers (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 92, in test_has_numbers\n  File \"<bigcode>\", line 16, in task_func\nValueError: No valid predicates provided\n\n======================================================================\nERROR: test_has_special_char (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 74, in test_has_special_char\n  File \"<bigcode>\", line 16, in task_func\nValueError: No valid predicates provided\n\n======================================================================\nERROR: test_multiple_predicates (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 99, in test_multiple_predicates\n  File \"<bigcode>\", line 16, in task_func\nValueError: No valid predicates provided\n\n----------------------------------------------------------------------\nRan 12 tests in 0.006s\n\nFAILED (errors=9)"}}
{"result": "```python\nimport random\nimport string\ndef task_func(length: int, predicates: list, seed: int = None):\n    if length < 0:\n        raise ValueError(\"Length cannot be negative\")\n    allowed_preds = {\n        \"has_upper\": lambda s: any(c.isupper() for c in s),\n        \"has_lower\": lambda s: any(c.islower() for c in s),\n        \"has_digit\": lambda s: any(c.isdigit() for c in s),\n        \"has_punct\": lambda s: any(c in string.punctuation for c in s),\n        \"all_upper\": lambda s: all(c.isupper() for c in s if c.isalpha()),\n        \"all_lower\": lambda s: all(c.islower() for c in s if c.isalpha()),\n        \"is_alnum\": lambda s: all(c.isalnum() for c in s),\n        \"has_alpha\": lambda s: any(c.isalpha() for c in s),\n    }\n    if seed is not None:\n        random.seed(seed)\n    text = ''.join(random.choices(string.ascii_letters + string.digits + string.punctuation, k=length))\n    res = {}\n    if predicates:\n        unique_preds = set(predicates)\n        for pred in unique_preds:\n            if pred not in allowed_preds:\n                raise KeyError(f\"Predicate '{pred}' not recognized\")\n            res[pred] = allowed_preds[pred](text)\n    return text, res\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_deduplicate_predicates (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 47, in test_deduplicate_predicates\n  File \"<bigcode>\", line 25, in task_func\nKeyError: \"Predicate 'has_uppercase' not recognized\"\n\n======================================================================\nERROR: test_empty_string (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 32, in test_empty_string\n  File \"<bigcode>\", line 25, in task_func\nKeyError: \"Predicate 'has_numbers' not recognized\"\n\n======================================================================\nERROR: test_random_seed_reproducibility (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 50, in test_random_seed_reproducibility\n  File \"<bigcode>\", line 25, in task_func\nKeyError: \"Predicate 'has_numbers' not recognized\"\n\n======================================================================\nERROR: test_result_correctness (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 18, in test_result_correctness\n  File \"<bigcode>\", line 25, in task_func\nKeyError: \"Predicate 'has_special_chars' not recognized\"\n\n======================================================================\nERROR: test_valid_length_and_predicates (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 5, in test_valid_length_and_predicates\n  File \"<bigcode>\", line 25, in task_func\nKeyError: \"Predicate 'has_special_chars' not recognized\"\n\n----------------------------------------------------------------------\nRan 8 tests in 0.003s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport binascii\nimport base64\nimport urllib.parse\nimport codecs\ndef task_func(hex_string):\n    bytes_data = binascii.unhexlify(hex_string)\n    utf8_str = bytes_data.decode('utf-8')\n    res = {}\n    res['hex'] = hex_string.lower()\n    res['base64'] = base64.b64encode(utf8_str.encode('utf-8')).decode('ascii')\n    res['utf-8'] = utf8_str\n    # UTF-16 and UTF-32 decoding to string removes BOM if present\n    res['utf-16'] = utf8_str.encode('utf-8').decode('utf-16', errors='ignore')\n    if not res['utf-16']:\n        # fallback to utf-16 with BOM\n        res['utf-16'] = utf8_str\n    res['utf-32'] = utf8_str.encode('utf-8').decode('utf-32', errors='ignore')\n    if not res['utf-32']:\n        res['utf-32'] = utf8_str\n    try:\n        ascii_str = utf8_str.encode('ascii').decode('ascii')\n    except UnicodeEncodeError:\n        ascii_str = 'Not representable in ASCII'\n    res['ASCII'] = ascii_str\n    res['URL'] = urllib.parse.quote(utf8_str)\n    res['ROT13'] = codecs.encode(utf8_str, 'rot_13')\n    return res\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_hex_string_1 (builtins.TestCases)\nTest a hex string with a mix of letters and numbers.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 23, in test_hex_string_1\nAssertionError: '\u6568\u6c6c' != 'hello'\n- \u6568\u6c6c\n+ hello\n\n\n======================================================================\nFAIL: test_hex_string_2 (builtins.TestCases)\nTest a hex string with a mix of letters and numbers.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 35, in test_hex_string_2\nAssertionError: '\u6f77\u6c72' != 'world'\n- \u6f77\u6c72\n+ world\n\n\n======================================================================\nFAIL: test_hex_string_3 (builtins.TestCases)\nTest a hex string with a mix of letters and numbers.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 47, in test_hex_string_3\nAssertionError: '\u6261' != 'abc'\n- \u6261\n+ abc\n\n\n======================================================================\nFAIL: test_hex_string_4 (builtins.TestCases)\nTest a hex string with a mix of letters and numbers.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 59, in test_hex_string_4\nAssertionError: '\u3231' != '123'\n- \u3231\n+ 123\n\n\n======================================================================\nFAIL: test_hex_string_non_ascii (builtins.TestCases)\nTest a hex string with non-ASCII characters.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 71, in test_hex_string_non_ascii\nAssertionError: '\ua9c3' != '\u00e9'\n- \ua9c3\n+ \u00e9\n\n\n======================================================================\nFAIL: test_hex_string_sample (builtins.TestCases)\nTest the sample input from the problem description.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 11, in test_hex_string_sample\nAssertionError: '\u4b4a' != 'JKL'\n- \u4b4a\n+ JKL\n\n\n----------------------------------------------------------------------\nRan 6 tests in 0.004s\n\nFAILED (failures=6)"}}
{"result": "```python\nimport binascii\nimport string\nimport random\ndef task_func(length):\n    hex_chars = '0123456789abcdef'\n    hex_str = ''.join(random.choice(hex_chars) for _ in range(length))\n    try:\n        ascii_bytes = binascii.unhexlify(hex_str)\n        ascii_str = ascii_bytes.decode('ascii', errors='ignore')\n    except binascii.Error:\n        ascii_str = ''\n    return ascii_str\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_correct_length (builtins.TestCases)\nTest the length of the hexadecimal string before decoding.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 15, in test_correct_length\nAssertionError: 'a]' != ']'\n- a]\n? -\n+ ]\n\n\n======================================================================\nFAIL: test_non_empty_string_positive_length (builtins.TestCases)\nTest the output for a positive length.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_non_empty_string_positive_length\nAssertionError: '/\\x04' != '\\x10'\n- /\u0004\n+ \u0010\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.003s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport sys\nimport sqlite3\n# Constants\nPATH_TO_APPEND = \"path/to/whatever\"\nDATABASE = \"path/to/database.db\"\n\ndef task_func(path_to_append=PATH_TO_APPEND, database=DATABASE):\n    if path_to_append not in sys.path:\n        sys.path.append(path_to_append)\n\n    conn = sqlite3.connect(database)\n    try:\n        cursor = conn.cursor()\n        cursor.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS paths (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                path TEXT UNIQUE NOT NULL\n            )\n        \"\"\")\n        cursor.execute(\"INSERT OR IGNORE INTO paths (path) VALUES (?)\", (path_to_append,))\n        conn.commit()\n    finally:\n        conn.close()\n\n    return path_to_append\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_basic_path_insertion (builtins.TestCases)\nTest the function when a path is provided.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 23, in test_basic_path_insertion\nAssertionError: 1 != 'path/to/test/path'\n\n======================================================================\nFAIL: test_database_creation (builtins.TestCases)\nTest the function when the database doesn't exist.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 66, in test_database_creation\nAssertionError: 1 != 'path/to/new'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.011s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport re\nfrom scipy.stats import gaussian_kde\nfrom scipy import linalg\nimport matplotlib.pyplot as plt\n\ndef task_func(text):\n    # Extract words using regex\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Calculate word lengths\n    lengths = [len(word) for word in words]\n    \n    fig, ax = plt.subplots()\n    # Plot the histogram of word lengths\n    counts, bins, patches = ax.hist(lengths, bins=range(1, max(lengths)+2), density=True, alpha=0.6, color='g', edgecolor='black', align='left')\n    \n    # Only plot KDE if we have at least two unique length values\n    unique_lengths = set(lengths)\n    if len(unique_lengths) > 1:\n        # KDE requires float array\n        data = [float(l) for l in lengths]\n        kde = gaussian_kde(data)\n        \n        # Generate points for KDE curve over the range of lengths\n        x_grid = range(1, max(lengths)+1)\n        x_grid_f = [float(x) for x in x_grid]\n        y_kde = kde(x_grid_f)\n        \n        ax.plot(x_grid, y_kde, color='r', lw=2, label='KDE')\n    \n    ax.set_xlabel('Word Length')\n    ax.set_ylabel('Density')\n    ax.set_title('Distribution of Word Lengths')\n    ax.legend()\n    \n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_empty_string (builtins.TestCases)\nTest an empty string\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 19, in test_empty_string\n  File \"<bigcode>\", line 15, in task_func\nValueError: max() arg is an empty sequence\n\n----------------------------------------------------------------------\nRan 5 tests in 0.163s\n\nFAILED (errors=1)"}}
{"result": "```python\nimport requests\nimport pandas as pd\nfrom bs4 import BeautifulSoup\n\ndef task_func(url: str, csv_file_path: str) -> list:\n    try:\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching URL: {e}\")\n\n    soup = BeautifulSoup(response.text, \"html.parser\")\n    containers = soup.find_all(\"div\", class_=\"container\")\n\n    data = []\n    for container in containers:\n        title_tag = container.find(\"h1\")\n        date_tag = container.find(\"span\", class_=\"date\")\n        author_tag = container.find(\"span\", class_=\"author\")\n\n        title = title_tag.get_text(strip=True) if title_tag else \"No Title\"\n        date = date_tag.get_text(strip=True) if date_tag else \"No Date\"\n        author = author_tag.get_text(strip=True) if author_tag else \"No Author\"\n        data.append((title, date, author))\n\n    df = pd.DataFrame(data, columns=[\"Title\", \"Date\", \"Author\"])\n    df.to_csv(csv_file_path, index=False)\n\n    return data\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(file_path: str, plot_path: str) -> (float, float, str):\n    if not os.path.isfile(file_path):\n        raise FileNotFoundError(f\"No such file: '{file_path}'\")\n    \n    # Read CSV\n    df = pd.read_csv(file_path)\n    \n    # Flatten all values into a single series, drop NaNs, keep numeric only\n    data = pd.to_numeric(df.values.flatten(), errors='coerce')\n    data = pd.Series(data).dropna()\n    \n    if data.empty:\n        mean_val = float('nan')\n        median_val = float('nan')\n    else:\n        mean_val = float(data.mean())\n        median_val = float(data.median())\n    \n    # Plot\n    plt.figure()\n    plt.plot(range(len(data)), data, marker='o', linestyle='-')\n    plt.title(\"Data Visualization\")\n    plt.xlabel(\"Index\")\n    plt.ylabel(\"Value\")\n    plt.savefig(plot_path)\n    plt.close()\n    \n    return (mean_val, median_val, plot_path)\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_empty_file (builtins.TestCases)\nTest that the function returns NaN for mean and median when the file is empty.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 59, in test_empty_file\n  File \"<bigcode>\", line 11, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/parsers/readers.py\", line 912, in read_csv\n    return _read(filepath_or_buffer, kwds)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/parsers/readers.py\", line 577, in _read\n    parser = TextFileReader(filepath_or_buffer, **kwds)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/parsers/readers.py\", line 1407, in __init__\n    self._engine = self._make_engine(f, self.engine)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/parsers/readers.py\", line 1679, in _make_engine\n    return mapping[engine](f, **self.options)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/parsers/c_parser_wrapper.py\", line 93, in __init__\n    self._reader = parsers.TextReader(src, **kwds)\n  File \"pandas/_libs/parsers.pyx\", line 557, in pandas._libs.parsers.TextReader.__cinit__\npandas.errors.EmptyDataError: No columns to parse from file\n\n----------------------------------------------------------------------\nRan 8 tests in 0.763s\n\nFAILED (errors=1)"}}
{"result": "```python\nimport requests\nimport json\nfrom bs4 import BeautifulSoup\ndef task_func(url: str, file_name: str = \"Output.txt\") -> str:\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n        soup = BeautifulSoup(response.text, 'html.parser')\n        title_tag = soup.title\n        title_text = title_tag.string if title_tag and title_tag.string is not None else None\n    except Exception:\n        title_text = None\n\n    with open(file_name, 'a', encoding='utf-8') as f:\n        json.dump({\"title\": title_text}, f, ensure_ascii=False)\n        f.write('\\n')\n\n    return file_name\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_append_to_existing_file (builtins.TestCases)\nTest that data is appended to an existing file\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 74, in test_append_to_existing_file\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 929, in assert_called_with\n    raise AssertionError(_error_message()) from cause\nAssertionError: expected call not found.\nExpected: write('{\"title\": \"New Title\"}\\n')\nActual: write('\\n')\n\n======================================================================\nFAIL: test_invalid_url (builtins.TestCases)\nTest that an exception is raised when the URL is invalid\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 34, in test_invalid_url\nAssertionError: RequestException not raised\n\n======================================================================\nFAIL: test_page_without_title (builtins.TestCases)\nTest that 'None' is saved as the title when the web page does not have a title\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 45, in test_page_without_title\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 940, in assert_called_once_with\n    raise AssertionError(msg)\nAssertionError: Expected 'write' to be called once. Called 6 times.\nCalls: [call('{'), call('\"title\"'), call(': '), call('null'), call('}'), call('\\n')].\n\n======================================================================\nFAIL: test_scrape_title_page_1 (builtins.TestCases)\nTest that the title is scraped from a web page and saved to a file\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 16, in test_scrape_title_page_1\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 940, in assert_called_once_with\n    raise AssertionError(msg)\nAssertionError: Expected 'write' to be called once. Called 6 times.\nCalls: [call('{'),\n call('\"title\"'),\n call(': '),\n call('\"Test Page 1\"'),\n call('}'),\n call('\\n')].\n\n======================================================================\nFAIL: test_scrape_title_page_2 (builtins.TestCases)\nTest that the title is scraped from a web page and saved to a file\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 28, in test_scrape_title_page_2\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 940, in assert_called_once_with\n    raise AssertionError(msg)\nAssertionError: Expected 'write' to be called once. Called 6 times.\nCalls: [call('{'),\n call('\"title\"'),\n call(': '),\n call('\"Test Page 2\"'),\n call('}'),\n call('\\n')].\n\n======================================================================\nFAIL: test_very_long_title (builtins.TestCases)\nTest that a very long title is saved correctly\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 58, in test_very_long_title\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 940, in assert_called_once_with\n    raise AssertionError(msg)\nAssertionError: Expected 'write' to be called once. Called 6 times.\nCalls: [call('{'),\n call('\"title\"'),\n call(': '),\n calln call('}'),\n call('\\n')].\n\n----------------------------------------------------------------------\nRan 6 tests in 0.038s\n\nFAILED (failures=6)"}}
{"result": "```python\nimport urllib.request\nimport os\nimport zipfile\n# Constants\nTARGET_DIR = \"downloaded_files\"\nTARGET_ZIP_FILE = \"downloaded_files.zip\"\ndef task_func(url):\n    if not os.path.exists(TARGET_DIR):\n        os.makedirs(TARGET_DIR)\n    urllib.request.urlretrieve(url, TARGET_ZIP_FILE)\n    with zipfile.ZipFile(TARGET_ZIP_FILE, 'r') as zip_ref:\n        zip_ref.extractall(TARGET_DIR)\n    os.remove(TARGET_ZIP_FILE)\n    return TARGET_DIR\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_cleanup (builtins.TestCases)\nTest that the function deletes the downloaded zip file after extraction.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 43, in test_cleanup\n  File \"<bigcode>\", line 14, in task_func\nFileNotFoundError: [Errno 2] No such file or directory: 'downloaded_files.zip'\n\n======================================================================\nERROR: test_directory_creation (builtins.TestCases)\nTest that the function creates a directory to store the extracted files.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 51, in test_directory_creation\n  File \"<bigcode>\", line 14, in task_func\nFileNotFoundError: [Errno 2] No such file or directory: 'downloaded_files.zip'\n\n======================================================================\nERROR: test_valid_zip_file (builtins.TestCases)\nTest that the function returns the correct directory path.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 18, in test_valid_zip_file\n  File \"<bigcode>\", line 14, in task_func\nFileNotFoundError: [Errno 2] No such file or directory: 'downloaded_files.zip'\n\n======================================================================\nERROR: test_zip_extraction_content (builtins.TestCases)\nTest that the function extracts the contents of the zip file.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 61, in test_zip_extraction_content\n  File \"<bigcode>\", line 14, in task_func\nFileNotFoundError: [Errno 2] No such file or directory: 'downloaded_files.zip'\n\n----------------------------------------------------------------------\nRan 7 tests in 0.011s\n\nFAILED (errors=4)"}}
{"result": "```python\nimport urllib.request\nimport os\nimport hashlib\nimport tarfile\n# Constants\nTARGET_TAR_FILE = \"downloaded_files.tar.gz\"\nEXPECTED_MD5_CHECKSUM = \"d41d8cd98f00b204e9800998ecf8427e\"\ndef task_func(url):\n    try:\n        # Download the file\n        urllib.request.urlretrieve(url, TARGET_TAR_FILE)\n    except Exception:\n        return False\n\n    # Compute MD5 checksum\n    md5_hash = hashlib.md5()\n    try:\n        with open(TARGET_TAR_FILE, \"rb\") as f:\n            for chunk in iter(lambda: f.read(4096), b\"\"):\n                md5_hash.update(chunk)\n    except Exception:\n        if os.path.exists(TARGET_TAR_FILE):\n            os.remove(TARGET_TAR_FILE)\n        return False\n\n    if md5_hash.hexdigest() != EXPECTED_MD5_CHECKSUM:\n        if os.path.exists(TARGET_TAR_FILE):\n            os.remove(TARGET_TAR_FILE)\n        return False\n\n    # Extract tar.gz file\n    try:\n        with tarfile.open(TARGET_TAR_FILE, \"r:gz\") as tar:\n            tar.extractall()\n    except Exception:\n        if os.path.exists(TARGET_TAR_FILE):\n            os.remove(TARGET_TAR_FILE)\n        return False\n\n    return True\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_valid_file (builtins.TestCases)\nTest that a valid file is downloaded, its checksum is validated, and it is extracted.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_valid_file\nAssertionError: True is not false\n\n----------------------------------------------------------------------\nRan 5 tests in 0.010s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport urllib.request\nimport os\nimport csv\nimport collections\ndef task_func(url, column_name, csv_file_path):\n    try:\n        urllib.request.urlretrieve(url, csv_file_path)\n    except Exception as e:\n        if os.path.exists(csv_file_path):\n            os.remove(csv_file_path)\n        raise e\n\n    try:\n        with open(csv_file_path, newline='', encoding='utf-8') as csvfile:\n            reader = csv.DictReader(csvfile)\n            if column_name not in reader.fieldnames:\n                raise ValueError(f\"The provided column_name '{column_name}' does not exist in the CSV file.\")\n            counter = collections.Counter()\n            for row in reader:\n                value = row.get(column_name)\n                if value is not None:\n                    counter[value] += 1\n            return dict(counter)\n    finally:\n        if os.path.exists(csv_file_path):\n            os.remove(csv_file_path)\n```", "match": {"category": "success"}}
{"result": "```python\nimport urllib.request\nimport os\nimport json\nimport pandas as pd\n# Constants\nTARGET_JSON_FILE = \"downloaded_file.json\"\ndef task_func(url):\n    urllib.request.urlretrieve(url, TARGET_JSON_FILE)\n    try:\n        with open(TARGET_JSON_FILE, 'r', encoding='utf-8') as f:\n            data = json.load(f)\n        df = pd.DataFrame(data)\n    finally:\n        if os.path.exists(TARGET_JSON_FILE):\n            os.remove(TARGET_JSON_FILE)\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_sample_1 (builtins.TestCases)\nTest that the function returns the correct DataFrame for a given JSON file.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 23, in test_sample_1\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 940, in assert_called_once_with\n    raise AssertionError(msg)\nAssertionError: Expected 'remove' to be called once. Called 0 times.\n\n======================================================================\nFAIL: test_sample_2 (builtins.TestCases)\nTest that the function returns the correct DataFrame for a given JSON file.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 42, in test_sample_2\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 940, in assert_called_once_with\n    raise AssertionError(msg)\nAssertionError: Expected 'remove' to be called once. Called 0 times.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.035s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef task_func(csv_file_path: str):\n    df = pd.read_csv(csv_file_path)\n    norm_col = (df['column1'] - df['column1'].min()) / (df['column1'].max() - df['column1'].min())\n\n    fig, ax = plt.subplots()\n    ax.plot(norm_col)\n\n    ax.set_title(f\"{'Plot Title':<20}:{'Normalized Column 1':<20}\")\n    ax.set_xlabel(f\"{'Index':<20}:{'Normalized Value':<20}\")\n    ax.set_ylabel(f\"{'Frequency':<20}:{'Normalized Value':<20}\")\n\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_title_format (builtins.TestCases)\nTest that the function returns the correct title.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 15, in test_title_format\nAssertionError: 'Plot Title          :Normalized Column 1 ' != '          Plot Title :  Normalized Column 1'\n- Plot Title          :Normalized Column 1 \n+           Plot Title :  Normalized Column 1\n\n\n======================================================================\nFAIL: test_xlabel_format (builtins.TestCases)\nTest that the function returns the correct xlabel.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 23, in test_xlabel_format\nAssertionError: 'Index               :Normalized Value    ' != '               Index :     Normalized Value'\n- Index               :Normalized Value    \n+                Index :     Normalized Value\n\n\n======================================================================\nFAIL: test_ylabel_format (builtins.TestCases)\nTest that the function returns the correct ylabel.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 31, in test_ylabel_format\nAssertionError: 'Frequency           :Normalized Value    ' != '           Frequency :     Normalized Value'\n- Frequency           :Normalized Value    \n+            Frequency :     Normalized Value\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.188s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data, column_name=\"target_column\"):\n    df = pd.DataFrame(data)\n    if column_name not in df.columns:\n        raise ValueError(f\"Column '{column_name}' does not exist in DataFrame.\")\n    if not pd.api.types.is_numeric_dtype(df[column_name]):\n        df[column_name] = df[column_name].astype('category').cat.codes\n    fig, ax = plt.subplots()\n    df[column_name].plot(kind='hist', ax=ax)\n    ax.set_title(f'Histogram of {column_name}')\n    ax.set_xlabel(column_name)\n    return df, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport urllib.request\nfrom lxml import etree\nimport pandas as pd\ndef task_func(url):\n    try:\n        with urllib.request.urlopen(url) as response:\n            xml_data = response.read()\n    except Exception:\n        raise ValueError(\"Failed to fetch XML from the URL\")\n    try:\n        root = etree.fromstring(xml_data)\n    except etree.XMLSyntaxError:\n        raise ValueError(\"Invalid XML syntax\")\n    if root.tag != 'root':\n        raise ValueError(\"XML structure does not match expected format\")\n    items = root.findall('item')\n    if not items:\n        raise ValueError(\"XML structure does not match expected format\")\n    records = []\n    columns = None\n    for item in items:\n        record = {}\n        for child in item:\n            if not isinstance(child.tag, str):\n                raise ValueError(\"XML structure does not match expected format\")\n            record[child.tag] = child.text\n        if columns is None:\n            columns = list(record.keys())\n        else:\n            if set(record.keys()) != set(columns):\n                raise ValueError(\"XML structure does not match expected format\")\n        records.append(record)\n    df = pd.DataFrame(records, columns=columns)\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport urllib.request\nimport re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n\ndef task_func(url):\n    # Download the text from the URL\n    with urllib.request.urlopen(url) as response:\n        text = response.read().decode('utf-8')\n\n    # Find words using a basic regex (case-sensitive)\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Count the frequency of each word\n    word_counts = Counter(words)\n\n    # Get the 10 most common words and their counts\n    most_common = word_counts.most_common(10)\n    words_top10, counts_top10 = zip(*most_common) if most_common else ([], [])\n\n    # Plot the bar chart\n    fig, ax = plt.subplots()\n    ax.bar(words_top10, counts_top10)\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Top 10 Most Frequent Words')\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n\n    return word_counts, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport urllib.request\nimport zipfile\nimport os\nimport urllib.error\n\ndef task_func(\n    url: str,\n    save_path: str = \"downloaded_file.zip\",\n    extract_path: str = \"extracted_files\",\n) -> str:\n    try:\n        # Download the file from the URL\n        urllib.request.urlretrieve(url, save_path)\n    except urllib.error.URLError as e:\n        return f\"URL Error: {e.reason}\"\n    except Exception as e:\n        return f\"Unexpected error during download: {str(e)}\"\n\n    try:\n        # Ensure the extract directory exists\n        os.makedirs(extract_path, exist_ok=True)\n        # Open the downloaded zip file\n        with zipfile.ZipFile(save_path, 'r') as zip_ref:\n            # Extract all contents\n            zip_ref.extractall(extract_path)\n    except zipfile.BadZipFile:\n        return \"Error: The downloaded file is not a valid ZIP file or is corrupted.\"\n    except PermissionError:\n        return \"Error: Permission denied while extracting files.\"\n    except OSError as e:\n        return f\"File I/O error during extraction: {str(e)}\"\n    except Exception as e:\n        return f\"Unexpected error during extraction: {str(e)}\"\n\n    try:\n        # Delete the zip file after extraction\n        os.remove(save_path)\n    except FileNotFoundError:\n        # If the file is already deleted, no problem\n        pass\n    except PermissionError:\n        return \"Error: Permission denied while deleting the ZIP file.\"\n    except OSError as e:\n        return f\"File I/O error during deleting ZIP file: {str(e)}\"\n\n    return extract_path\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport requests\nfrom zipfile import ZipFile, BadZipFile\n\ndef task_func(url, download_path=\"mnt/data/downloads/\"):\n    try:\n        os.makedirs(download_path, exist_ok=True)\n        local_zip_path = os.path.join(download_path, \"downloaded.zip\")\n\n        # Download the file\n        try:\n            response = requests.get(url, stream=True, timeout=10)\n            response.raise_for_status()\n        except requests.RequestException:\n            return \"Error: Unable to download the file from the provided URL.\"\n\n        content_type = response.headers.get('Content-Type', '')\n        if content_type != 'application/zip':\n            return \"Error: The URL does not point to a ZIP file.\"\n\n        with open(local_zip_path, \"wb\") as f:\n            for chunk in response.iter_content(chunk_size=8192):\n                f.write(chunk)\n\n        # Extract the ZIP file\n        try:\n            with ZipFile(local_zip_path, 'r') as zip_ref:\n                zip_ref.extractall(download_path)\n        except BadZipFile:\n            return \"Error: The downloaded file is not a valid ZIP file.\"\n\n        return download_path\n\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n```", "match": {"category": "success"}}
{"result": "```python\nimport requests\nimport pandas as pd\n\ndef task_func(url: str) -> pd.DataFrame:\n    try:\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()\n        data = response.json()\n        df = pd.DataFrame(data)\n        return df\n    except requests.RequestException as e:\n        raise SystemError(f\"Network-related error occurred: {e}\") from e\n    except (ValueError, TypeError) as e:\n        raise ValueError(f\"Data is not in a valid JSON format for DataFrame conversion: {e}\") from e\n```", "match": {"category": "success"}}
{"result": "```python\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nfrom io import StringIO\ndef task_func(url, table_id):\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n    except requests.exceptions.HTTPError as e:\n        raise e\n    \n    soup = BeautifulSoup(response.text, 'html.parser')\n    table = soup.find('table', {'id': table_id})\n    if table is None:\n        raise ValueError(\"Table with the specified ID not found.\")\n    \n    rows = table.find_all('tr')\n    if not rows:\n        return pd.DataFrame()\n    \n    # Extract headers if present\n    headers = []\n    header_row = table.find('thead')\n    if header_row:\n        header_cells = header_row.find_all('th')\n        if header_cells:\n            headers = [cell.get_text(strip=True) for cell in header_cells]\n    else:\n        # Try to get headers from the first row if it contains th\n        first_row_ths = rows[0].find_all('th')\n        if first_row_ths:\n            headers = [cell.get_text(strip=True) for cell in first_row_ths]\n            rows = rows[1:]\n        else:\n            headers = None\n    \n    data = []\n    for row in rows:\n        # Skip rows with no cells\n        cells = row.find_all(['td','th'])\n        if not cells:\n            continue\n        data.append([cell.get_text(strip=True) for cell in cells])\n    \n    if not data:\n        return pd.DataFrame()\n    \n    df = pd.DataFrame(data, columns=headers)\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport xml.etree.ElementTree as ET\nimport csv\n\ndef task_func(xml_content, output_csv_path):\n    try:\n        root = ET.fromstring(xml_content)\n    except ET.ParseError as e:\n        raise ET.ParseError(f\"XML parsing error: {e}\")\n    \n    # Extract rows from XML assuming each child of root is a row\n    rows = []\n    for elem in root:\n        row = {}\n        # Use tag names as keys and text as values\n        for child in elem:\n            row[child.tag] = child.text if child.text is not None else ''\n        rows.append(row)\n\n    # Collect all column headers from keys in all rows\n    headers = set()\n    for row in rows:\n        headers.update(row.keys())\n    headers = list(headers)\n\n    try:\n        with open(output_csv_path, mode='w', newline='', encoding='utf-8') as f:\n            writer = csv.DictWriter(f, fieldnames=headers)\n            writer.writeheader()\n            for row in rows:\n                writer.writerow(row)\n    except IOError as e:\n        raise IOError(f\"IO error when writing to file: {e}\")\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_empty_xml (builtins.TestCases)\nTest with an empty XML.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 42, in test_empty_xml\n  File \"<string>\", line 24, in check_csv_content\nAssertionError: Lists differ: [['root', '']] != [[]]\n\nFirst differing element 0:\n['root', '']\n[]\n\n- [['root', '']]\n+ [[]]\n\n======================================================================\nFAIL: test_large_xml (builtins.TestCases)\nTest with a larger XML file.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 58, in test_large_xml\n  File \"<string>\", line 24, in check_csv_content\nAssertionError: Lists differ: [['root', ''], ['element', '0'], ['element'[1856 chars]99']] != [[], [], [], [], [], [], [], [], [], [], [][356 chars], []]\n\nFirst differing element 0:\n['root', '']\n[]\n\nDiff is 2914 characters long. Set self.maxDiff to None to see it.\n\n======================================================================\nFAIL: test_nested_xml (builtins.TestCases)\nTest with nested XML content.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 36, in test_nested_xml\n  File \"<string>\", line 24, in check_csv_content\nAssertionError: Lists differ: [['root', ''], ['parent', ''], ['child', 'data']] != [['child'], ['data']]\n\nFirst differing element 0:\n['root', '']\n['child']\n\nFirst list contains 1 additional elements.\nFirst extra element 2:\n['child', 'data']\n\n- [['root', ''], ['parent', ''], ['child', 'data']]\n+ [['child'], ['data']]\n\n======================================================================\nFAIL: test_simple_xml (builtins.TestCases)\nTest with simple XML content.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 30, in test_simple_xml\n  File \"<string>\", line 24, in check_csv_content\nAssertionError: Lists differ: [['root', ''], ['element', 'data']] != [[], []]\n\nFirst differing element 0:\n['root', '']\n[]\n\n- [['root', ''], ['element', 'data']]\n+ [[], []]\n\n======================================================================\nFAIL: test_xml_with_attributes (builtins.TestCases)\nTest with an XML that contains elements with attributes.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 48, in test_xml_with_attributes\n  File \"<string>\", line 24, in check_csv_content\nAssertionError: Lists differ: [['root', ''], ['element', 'data']] != [[], []]\n\nFirst differing element 0:\n['root', '']\n[]\n\n- [['root', ''], ['element', 'data']]\n+ [[], []]\n\n----------------------------------------------------------------------\nRan 7 tests in 0.014s\n\nFAILED (failures=5)"}}
{"result": "```python\nimport requests\nfrom PIL import Image\nimport io\n\ndef task_func(url):\n    try:\n        response = requests.get(url, timeout=5, allow_redirects=False)\n    except Exception as e:\n        raise ValueError from e\n\n    if not (200 <= response.status_code <= 299):\n        raise ValueError(f\"HTTP status code {response.status_code} indicates failure.\")\n\n    try:\n        image = Image.open(io.BytesIO(response.content))\n        image.verify()  # Verify image to ensure it is valid\n        image = Image.open(io.BytesIO(response.content))  # Reopen after verify\n    except Exception as e:\n        raise ValueError(\"Downloaded content is not a valid image.\") from e\n\n    return image\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_image_mode (builtins.TestCases)\nTest task_func function with a known image and check its mode.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 51, in test_image_mode\n  File \"<bigcode>\", line 12, in task_func\nTypeError: '<=' not supported between instances of 'int' and 'MagicMock'\n\n======================================================================\nERROR: test_image_properties (builtins.TestCases)\nTest task_func function with a known image and check its properties.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 43, in test_image_properties\n  File \"<bigcode>\", line 12, in task_func\nTypeError: '<=' not supported between instances of 'int' and 'MagicMock'\n\n======================================================================\nERROR: test_valid_image_url (builtins.TestCases)\nTest task_func function with a valid image URL.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 24, in test_valid_image_url\n  File \"<bigcode>\", line 12, in task_func\nTypeError: '<=' not supported between instances of 'int' and 'MagicMock'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.023s\n\nFAILED (errors=3)"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(csv_file_path, col1_name=\"column1\", col2_name=\"column2\"):\n    df = pd.read_csv(csv_file_path)\n    grouped_means = df.groupby(col1_name)[col2_name].mean()\n    fig, ax = plt.subplots()\n    grouped_means.plot(kind='bar', ax=ax)\n    ax.set_title(f\"Mean of {col2_name} Grouped by {col1_name}\")\n    ax.set_xlabel(col1_name)\n    ax.set_ylabel(f\"Mean of {col2_name}\")\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport requests\nfrom pathlib import Path\nimport zipfile\n# Constants\nDOWNLOAD_DIR = Path(\"downloads\")\nZIP_DIR = Path(\"unzipped_files\")\ndef task_func(url, filename):\n    try:\n        DOWNLOAD_DIR.mkdir(parents=True, exist_ok=True)\n        ZIP_DIR.mkdir(parents=True, exist_ok=True)\n        zip_path = DOWNLOAD_DIR / filename\n\n        # Download the file\n        response = requests.get(url, stream=True)\n        response.raise_for_status()\n        with open(zip_path, 'wb') as f:\n            for chunk in response.iter_content(chunk_size=8192):\n                f.write(chunk)\n\n        # Extract the zip file\n        with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n            zip_ref.extractall(ZIP_DIR)\n\n        # Get list of extracted filenames\n        extracted_files = [str(path.relative_to(ZIP_DIR)) for path in ZIP_DIR.rglob('*') if path.is_file()]\n        return (\"Success\", extracted_files)\n    except (requests.RequestException, OSError, zipfile.BadZipFile) as e:\n        return (f\"Error: {e}\", [])\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_invalid_url (builtins.TestCases)\nTest an invalid URL.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 20, in test_invalid_url\nAssertionError: 'Download failed' not found in 'Error: File is not a zip file'\n\n======================================================================\nFAIL: test_non_200_http_response (builtins.TestCases)\nTest a non-200 HTTP response.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 27, in test_non_200_http_response\nAssertionError: 'Download failed' not found in 'Error: File is not a zip file'\n\n======================================================================\nFAIL: test_successful_download_and_extraction (builtins.TestCases)\nTest a successful download and extraction.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_successful_download_and_extraction\nAssertionError: 'Download and extraction successful' not found in 'Success'\n\n----------------------------------------------------------------------\nRan 6 tests in 2.325s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport requests\nfrom urllib.parse import urljoin\nfrom bs4 import BeautifulSoup\nimport csv\ndef task_func(\n    url: str,\n    base_url: str = \"https://www.example.com\",\n    csv_file: str = \"scraped_data.csv\",\n) -> int:\n    response = requests.get(url)\n    response.raise_for_status()\n    soup = BeautifulSoup(response.text, \"html.parser\")\n    links = set()\n    for a_tag in soup.find_all(\"a\", href=True):\n        abs_url = urljoin(base_url, a_tag['href'])\n        links.add(abs_url)\n    with open(csv_file, \"w\", newline='', encoding=\"utf-8\") as f:\n        writer = csv.writer(f)\n        for link in sorted(links):\n            writer.writerow([link])\n    return len(links)\n```", "match": {"category": "success"}}
{"result": "```python\nimport requests\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef task_func(api_url):\n    if not isinstance(api_url, str):\n        raise TypeError(\"The api_url must be a string.\")\n    try:\n        response = requests.get(api_url)\n        response.raise_for_status()\n    except requests.HTTPError as e:\n        raise e\n    data = response.json()\n    df = pd.DataFrame(data)\n    if df.empty:\n        return df, None\n    fig, ax = plt.subplots()\n    df.plot(ax=ax)\n    return df, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport requests\nfrom lxml import html\nimport pandas as pd\nimport sqlite3\n\ndef task_func(webpage_url: str, database_name: str = \"my_database.db\") -> int:\n    try:\n        if webpage_url.startswith(\"http://\") or webpage_url.startswith(\"https://\"):\n            response = requests.get(webpage_url)\n            response.raise_for_status()\n            content = response.content\n        else:\n            with open(webpage_url, \"rb\") as f:\n                content = f.read()\n    except requests.RequestException:\n        raise\n\n    tree = html.fromstring(content)\n    tables = tree.xpath('//table')\n    if not tables:\n        return 0\n\n    # Use pandas to read the html table\n    # pandas.read_html expects a string or bytes, so convert content to string\n    try:\n        dfs = pd.read_html(content)\n    except ValueError:\n        # No tables found by pandas\n        return 0\n\n    if not dfs:\n        return 0\n\n    df = dfs[0]\n    if df.empty:\n        return 0\n\n    try:\n        conn = sqlite3.connect(database_name)\n        cursor = conn.cursor()\n        cursor.execute(\"DROP TABLE IF EXISTS my_table\")\n        conn.commit()\n        df.to_sql(\"my_table\", conn, index=False)\n        row_count = len(df)\n        conn.close()\n        return row_count\n    except sqlite3.DatabaseError:\n        raise\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_empty_table (builtins.TestCases)\nTest handling an HTML page with an empty table.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 49, in test_empty_table\n  File \"<bigcode>\", line 27, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/html.py\", line 1212, in read_html\n    return _parse(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/html.py\", line 977, in _parse\n    parser = _parser_dispatch(flav)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/io/html.py\", line 930, in _parser_dispatch\n    bs4 = import_optional_dependency(\"bs4\")  # noqa:F841\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/compat/_optional.py\", line 171, in import_optional_dependency\n    raise ImportError(msg)\nImportError: Pandas requires version '4.9.3' or newer of 'bs4' (version '4.8.2' currently installed).\n\n----------------------------------------------------------------------\nRan 5 tests in 0.092s\n\nFAILED (errors=1)"}}
{"result": "```python\nimport requests\nfrom PIL import Image\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(url: str) -> \"matplotlib.axes._axes.Axes\":\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        raise ValueError(f\"Error downloading the image: {e}\")\n    try:\n        img = Image.open(BytesIO(response.content))\n        gray_img = img.convert(\"L\")\n    except Exception as e:\n        raise IOError(f\"Error processing the image: {e}\")\n    gray_array = np.array(gray_img)\n    fig, ax = plt.subplots()\n    ax.hist(gray_array.flatten(), bins=256, range=(0, 255), color='black')\n    ax.set_title(\"Histogram of Grayscale Values\")\n    ax.set_xlabel(\"Grayscale value\")\n    ax.set_ylabel(\"Frequency\")\n    return ax\n\nfrom io import BytesIO\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_histogram_bins (builtins.TestCases)\nTest if the histogram generated by the function contains the correct number of bins.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<bigcode>\", line 13, in task_func\nTypeError: a bytes-like object is required, not 'Mock'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 53, in test_histogram_bins\n  File \"<bigcode>\", line 16, in task_func\nOSError: Error processing the image: a bytes-like object is required, not 'Mock'\n\n======================================================================\nERROR: test_histogram_data_range (builtins.TestCases)\nTest if the data range of the histogram is appropriate for a grayscale image (0 to 255).\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<bigcode>\", line 13, in task_func\nTypeError: a bytes-like object is required, not 'Mock'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 64, in test_histogram_data_range\n  File \"<bigcode>\", line 16, in task_func\nOSError: Error processing the image: a bytes-like object is required, not 'Mock'\n\n======================================================================\nERROR: test_valid_image_url (builtins.TestCases)\nTest if the function correctly processes a valid image URL and returns a matplotlib Axes object with the correct title.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<bigcode>\", line 13, in task_func\nTypeError: a bytes-like object is required, not 'Mock'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 26, in test_valid_image_url\n  File \"<bigcode>\", line 16, in task_func\nOSError: Error processing the image: a bytes-like object is required, not 'Mock'\n\n======================================================================\nFAIL: test_ioerror_image_processing (builtins.TestCases)\nTest if the function raises an IOError when there is an error in processing the image.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 90, in test_ioerror_image_processing\nAssertionError: \"Error processing the image: a bytes-like object is required, not 'MagicMock'\" != 'Error processing the image: Mocked IOError'\n- Error processing the image: a bytes-like object is required, not 'MagicMock'\n+ Error processing the image: Mocked IOError\n\n\n----------------------------------------------------------------------\nRan 6 tests in 0.010s\n\nFAILED (failures=1, errors=3)"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report\n\ndef task_func(csv_file_path, target_column=\"target\", test_size=0.2, n_estimators=100):\n    df = pd.read_csv(csv_file_path)\n    if target_column not in df.columns:\n        raise ValueError(f\"The specified target_column '{target_column}' is not found in the CSV file.\")\n    \n    X = df.drop(columns=[target_column])\n    y = df[target_column]\n\n    # Convert categorical columns to numeric if necessary\n    X = pd.get_dummies(X, drop_first=True)\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=42)\n\n    clf = RandomForestClassifier(n_estimators=n_estimators, random_state=42)\n    clf.fit(X_train, y_train)\n\n    y_pred = clf.predict(X_test)\n\n    report = classification_report(y_test, y_pred)\n    return report\n```", "match": {"category": "success"}}
{"result": "```python\nfrom bs4 import BeautifulSoup\nimport requests\n\n# Constants\nURL = \"http://example.com\"\n\ndef task_func(url=URL, from_encoding=\"cp1251\", use_lxml=False):\n    if not url:\n        return None\n    try:\n        response = requests.get(url, timeout=10)\n        if response.status_code != 200:\n            return None\n        content = response.content.decode(from_encoding)\n        parser = 'lxml' if use_lxml else 'html.parser'\n        return BeautifulSoup(content, parser)\n    except (requests.RequestException, UnicodeDecodeError):\n        return None\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_incorrect_encoding_handling (builtins.TestCases)\nTest how the function handles incorrect or unsupported encodings.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 34, in test_incorrect_encoding_handling\n  File \"<bigcode>\", line 15, in task_func\nLookupError: unknown encoding: invalid_encoding\n\n----------------------------------------------------------------------\nRan 6 tests in 0.004s\n\nFAILED (errors=1)"}}
{"result": "```python\nfrom PIL import Image\nimport codecs\nimport pytesseract\nIMAGE_PATH = \"image.png\"\ndef task_func(filename=IMAGE_PATH, from_encoding=\"cp1251\", to_encoding=\"utf8\"):\n    try:\n        # Check if encodings are valid\n        codecs.lookup(from_encoding)\n        codecs.lookup(to_encoding)\n    except LookupError as e:\n        raise ValueError(\"Incorrect encoding provided\") from e\n\n    def convert_text(text):\n        # Convert text by encoding and decoding between specified encodings\n        try:\n            # Encode from from_encoding to bytes, then decode bytes to to_encoding string\n            bytes_text = text.encode(from_encoding)\n            converted = bytes_text.decode(to_encoding)\n            return converted\n        except (UnicodeDecodeError, LookupError) as e:\n            raise ValueError from e\n\n    comment = \"\"\n    try:\n        # Open image and extract text using OCR\n        with Image.open(filename) as img:\n            extracted_text = pytesseract.image_to_string(img)\n        if extracted_text.strip():\n            comment = convert_text(extracted_text)\n            return comment\n    except Exception:\n        # OCR extraction failed or other issue, fallback to comment approach\n        pass\n\n    try:\n        # Try to read image comment (PNG text chunk)\n        with Image.open(filename) as img:\n            comment_bytes = img.info.get('comment', b'')\n            if not comment_bytes:\n                # No comment found\n                return \"\"\n            if isinstance(comment_bytes, bytes):\n                # Convert bytes from from_encoding to to_encoding\n                comment = comment_bytes.decode(from_encoding)\n                comment = comment.encode(from_encoding).decode(to_encoding)\n            elif isinstance(comment_bytes, str):\n                # If already str, convert encoding via encode/decode\n                comment = comment_bytes.encode(from_encoding).decode(to_encoding)\n            else:\n                # Unexpected type\n                return \"\"\n            return comment\n    except (UnicodeDecodeError, LookupError) as e:\n        raise ValueError from e\n    except Exception:\n        # If comment reading fails for any other reason, return empty string\n        return \"\"\n    return \"\"\n```", "match": {"category": "success"}}
{"result": "```python\nimport json\nimport requests\nimport chardet\n# Constants\nAPI_URL = \"http://api.example.com/data\"\ndef task_func(url=API_URL, from_encoding=None, to_encoding=\"utf8\"):\n    response = requests.get(url, timeout=5)\n    content = response.content\n    if not content:\n        return {}\n\n    if from_encoding is None:\n        detected = chardet.detect(content)\n        from_encoding = detected.get(\"encoding\")\n        if not from_encoding:\n            raise ValueError(\"Unable to detect encoding for non-empty content\")\n\n    text = content.decode(from_encoding)\n    reencoded_bytes = text.encode(to_encoding)\n    decoded_text = reencoded_bytes.decode(to_encoding)\n    return json.loads(decoded_text)\n```", "match": {"category": "success"}}
{"result": "```python\nimport binascii\nimport hashlib\ndef task_func(input_string, verify_hash=None):\n    if not isinstance(input_string, str):\n        raise TypeError(\"input_string must be a string\")\n    if verify_hash is not None and not isinstance(verify_hash, str):\n        raise TypeError(\"verify_hash must be a string or None\")\n    \n    sha256_hash = hashlib.sha256(input_string.encode('utf-8')).hexdigest()\n    if verify_hash is not None:\n        return sha256_hash, (sha256_hash == verify_hash)\n    return sha256_hash\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_verify_hash_incorrect (builtins.TestCases)\nTest that the function returns False when verify_hash is incorrect.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 46, in test_verify_hash_incorrect\nAssertionError: ('dffd6021bb2bd5b0af676290809ec3a53191dd81c7f70a4b28688a362182986f', False) is not false\n\n----------------------------------------------------------------------\nRan 10 tests in 0.002s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pandas as pd\nimport os\nfrom datetime import datetime\nfrom pandas.errors import EmptyDataError\ndef task_func(csv_file_path, column_name, date_format=\"%Y-%m-%d\"):\n    if not os.path.isfile(csv_file_path):\n        raise FileNotFoundError(f\"The file '{csv_file_path}' does not exist.\")\n    try:\n        df = pd.read_csv(csv_file_path)\n    except EmptyDataError:\n        return pd.DataFrame()\n    if column_name not in df.columns:\n        raise ValueError(f\"The column '{column_name}' is not present in the CSV file.\")\n    # Convert the date column to datetime objects\n    df[column_name] = pd.to_datetime(df[column_name], format=date_format, errors='coerce')\n    # Filter rows where the date is on or after today\n    today = datetime.now().date()\n    df_filtered = df[df[column_name].dt.date >= today]\n    # Sort by the date column in ascending order\n    df_filtered_sorted = df_filtered.sort_values(by=column_name).reset_index(drop=True)\n    return df_filtered_sorted\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(dataframe):\n    if dataframe.empty:\n        raise ValueError(\"Input DataFrame is empty.\")\n    if dataframe.shape[1] < 2:\n        raise ValueError(\"DataFrame must have at least two columns.\")\n    if not all(np.issubdtype(dtype, np.number) for dtype in dataframe.dtypes):\n        raise TypeError(\"All columns in the DataFrame must be numeric.\")\n\n    corr = dataframe.corr()\n    # Set diagonal and lower triangle to 0 to avoid picking them as max correlation\n    corr_values = corr.abs().where(np.triu(np.ones(corr.shape), k=1).astype(bool))\n    max_idx = np.unravel_index(np.nanargmax(corr_values.values), corr_values.shape)\n    col1, col2 = corr.columns[max_idx[0]], corr.columns[max_idx[1]]\n\n    fig, ax = plt.subplots()\n    ax.scatter(dataframe[col1], dataframe[col2])\n    ax.set_xlabel(col1)\n    ax.set_ylabel(col2)\n    ax.set_title(f'Scatter plot of {col1} vs {col2} (corr={corr.loc[col1,col2]:.2f})')\n\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_high_correlation (builtins.TestCases)\nTest if the function correctly identifies and plots the pair of columns with the highest positive correlation.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_high_correlation\nAssertionError: Tuples differ: ('A', 'B') != ('A', 'A')\n\nFirst differing element 1:\n'B'\n'A'\n\n- ('A', 'B')\n?        ^\n\n+ ('A', 'A')\n?        ^\n\n\n======================================================================\nFAIL: test_negative_correlation (builtins.TestCases)\nTest if the function correctly identifies and plots the pair of columns with the highest absolute correlation,\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 58, in test_negative_correlation\nAssertionError: Tuples differ: ('A', 'C') != ('A', 'A')\n\nFirst differing element 1:\n'C'\n'A'\n\n- ('A', 'C')\n?        ^\n\n+ ('A', 'A')\n?        ^\n\n\n----------------------------------------------------------------------\nRan 6 tests in 0.066s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Constants\nPLOT_TITLE = \"Value Distribution\"\n\ndef task_func(data_dict):\n    # Create DataFrame and drop None values\n    df = pd.DataFrame({'value': list(data_dict.values())})\n    df = df.dropna()\n\n    # Check if DataFrame is empty or all values are identical\n    if df.empty or df['value'].nunique() == 1:\n        return df, None\n\n    # Calculate min, max, and number of bins\n    vmin = df['value'].min()\n    vmax = df['value'].max()\n    n_points = len(df)\n    n_bins = min(11, max(2, n_points // 2))\n\n    # Generate bin edges evenly spaced between min and max\n    bins = np.linspace(vmin, vmax, n_bins + 1)\n\n    # Create histogram plot with seaborn\n    plt.figure()\n    ax = sns.histplot(df['value'], bins=bins, kde=False)\n    ax.set_title(PLOT_TITLE)\n\n    return df, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_dataframe_creation (builtins.TestCases)\nTest if the function correctly creates a DataFrame from the input dictionary.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 10, in test_dataframe_creation\n  File \"<bigcode>\", line 16, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/base.py\", line 1068, in nunique\n    uniqs = self.unique()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/series.py\", line 2194, in unique\n    return super().unique()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/base.py\", line 1030, in unique\n    result = algorithms.unique1d(values)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/algorithms.py\", line 390, in unique\n    return unique_with_mask(values)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/algorithms.py\", line 429, in unique_with_mask\n    uniques = table.unique(values)\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7247, in pandas._libs.hashtable.PyObjectHashTable.unique\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7194, in pandas._libs.hashtable.PyObjectHashTable._unique\nTypeError: unhashable type: 'list'\n\n======================================================================\nERROR: test_dataframe_without_none (builtins.TestCases)\nTest if the function correctly removes rows with None values from the DataFrame.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 41, in test_dataframe_without_none\n  File \"<bigcode>\", line 16, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/base.py\", line 1068, in nunique\n    uniqs = self.unique()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/series.py\", line 2194, in unique\n    return super().unique()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/base.py\", line 1030, in unique\n    result = algorithms.unique1d(values)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/algorithms.py\", line 390, in unique\n    return unique_with_mask(values)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/algorithms.py\", line 429, in unique_with_mask\n    uniques = table.unique(values)\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7247, in pandas._libs.hashtable.PyObjectHashTable.unique\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7194, in pandas._libs.hashtable.PyObjectHashTable._unique\nTypeError: unhashable type: 'list'\n\n======================================================================\nERROR: test_distribution_plot (builtins.TestCases)\nTest if the function correctly creates a distribution plot with the correct title and non-empty bars.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 18, in test_distribution_plot\n  File \"<bigcode>\", line 16, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/base.py\", line 1068, in nunique\n    uniqs = self.unique()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/series.py\", line 2194, in unique\n    return super().unique()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/base.py\", line 1030, in unique\n    result = algorithms.unique1d(values)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/algorithms.py\", line 390, in unique\n    return unique_with_mask(values)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/algorithms.py\", line 429, in unique_with_mask\n    uniques = table.unique(values)\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7247, in pandas._libs.hashtable.PyObjectHashTable.unique\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7194, in pandas._libs.hashtable.PyObjectHashTable._unique\nTypeError: unhashable type: 'list'\n\n======================================================================\nERROR: test_number_of_bins (builtins.TestCases)\nTest if the function dynamically calculates the number of bins for the plot based on the data.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 34, in test_number_of_bins\n  File \"<bigcode>\", line 16, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/base.py\", line 1068, in nunique\n    uniqs = self.unique()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/series.py\", line 2194, in unique\n    return super().unique()\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/base.py\", line 1030, in unique\n    result = algorithms.unique1d(values)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/algorithms.py\", line 390, in unique\n    return unique_with_mask(values)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/algorithms.py\", line 429, in unique_with_mask\n    uniques = table.unique(values)\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7247, in pandas._libs.hashtable.PyObjectHashTable.unique\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7194, in pandas._libs.hashtable.PyObjectHashTable._unique\nTypeError: unhashable type: 'list'\n\n======================================================================\nFAIL: test_empty_dictionary (builtins.TestCases)\nTest if the function correctly handles an empty dictionary, returning an empty DataFrame and no plot.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_empty_dictionary\nAssertionError: Tuples differ: (0, 1) != (0, 0)\n\nFirst differing element 1:\n1\n0\n\n- (0, 1)\n?     ^\n\n+ (0, 0)\n?     ^\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.010s\n\nFAILED (failures=1, errors=4)"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler\n# Constants\nPLOT_TITLE = \"Scaled Values\"\ndef task_func(data_dict):\n    df = pd.DataFrame(data_dict)\n    scaler = MinMaxScaler()\n    scaled_array = scaler.fit_transform(df)\n    scaled_df = pd.DataFrame(scaled_array, columns=df.columns)\n    \n    ax = scaled_df.plot(kind='line')\n    ax.set_title(PLOT_TITLE)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Scaled Value\")\n    plt.tight_layout()\n    \n    return scaled_df, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_empty_data (builtins.TestCases)\nTest with an empty dictionary. Should return an empty DataFrame and a plot object.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 9, in test_empty_data\n  File \"<bigcode>\", line 10, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/utils/_set_output.py\", line 157, in wrapped\n    data_to_wrap = f(self, X, *args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 916, in fit_transform\n    return self.fit(X, **fit_params).transform(X)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/preprocessing/_data.py\", line 435, in fit\n    return self.partial_fit(X, y)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 1152, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/preprocessing/_data.py\", line 473, in partial_fit\n    X = self._validate_data(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 605, in _validate_data\n    out = check_array(X, input_name=\"X\", **check_params)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 795, in check_array\n    dtype_orig = np.result_type(*dtypes_orig)\n  File \"<__array_function__ internals>\", line 5, in result_type\nValueError: at least one array or dtype is required\n\n======================================================================\nFAIL: test_all_none_data (builtins.TestCases)\nTest with a dictionary where all values are None. Should return an empty DataFrame and a plot object.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 18, in test_all_none_data\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_with_missing_values (builtins.TestCases)\nTest data with some missing values. Missing values should be dropped, and scaled data should be returned.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 36, in test_with_missing_values\nAssertionError: Tuples differ: (3, 2) != (1, 2)\n\nFirst differing element 0:\n3\n1\n\n- (3, 2)\n?  ^\n\n+ (1, 2)\n?  ^\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.247s\n\nFAILED (failures=2, errors=1)"}}
{"result": "```python\nimport numpy as np\nfrom scipy.stats import ttest_ind\nimport matplotlib.pyplot as plt\n\ndef task_func(kwargs):\n    group1 = np.array(kwargs.get('group1'))\n    group2 = np.array(kwargs.get('group2'))\n    \n    # Remove NaNs\n    g1 = group1[~np.isnan(group1)]\n    g2 = group2[~np.isnan(group2)]\n    \n    # Check for empty or insufficient data\n    if g1.size < 2 or g2.size < 2:\n        raise ValueError(\"Each group must have at least two non-NaN values.\")\n    \n    # Check variance threshold\n    var1 = np.var(g1, ddof=1)\n    var2 = np.var(g2, ddof=1)\n    if var1 < 1e-8 or var2 < 1e-8:\n        raise ValueError(\"Variance in one or both groups is below threshold.\")\n    \n    # Descriptive stats\n    g1_mean = np.mean(g1)\n    g1_std = np.std(g1, ddof=1)\n    g2_mean = np.mean(g2)\n    g2_std = np.std(g2, ddof=1)\n    \n    # Perform t-test with nan_policy='omit' (safe but we've removed NaNs)\n    t_stat, p_val = ttest_ind(g1, g2, nan_policy='omit')\n    \n    significant = p_val < 0.05\n    \n    # Plot boxplot\n    fig1, ax_boxplot = plt.subplots()\n    ax_boxplot.boxplot([g1, g2], labels=['group1', 'group2'])\n    ax_boxplot.set_title('Boxplot of Group1 and Group2')\n    ax_boxplot.set_ylabel('Values')\n    \n    # Plot histograms\n    fig2, ax_histogram = plt.subplots()\n    bins = 'auto'\n    ax_histogram.hist(g1, bins=bins, alpha=0.5, label='group1', color='blue')\n    ax_histogram.hist(g2, bins=bins, alpha=0.5, label='group2', color='orange')\n    ax_histogram.set_title('Histograms of Group1 and Group2')\n    ax_histogram.set_xlabel('Values')\n    ax_histogram.set_ylabel('Frequency')\n    ax_histogram.legend()\n    \n    return {\n        'significant': significant,\n        'group1_stats': {'mean': g1_mean, 'std': g1_std},\n        'group2_stats': {'mean': g2_mean, 'std': g2_std},\n        'ax_boxplot': ax_boxplot,\n        'ax_histogram': ax_histogram\n    }\n```", "match": {"category": "success"}}
{"result": "```python\nimport binascii\nimport urllib.parse\ndef task_func(url):\n    parsed_url = urllib.parse.urlparse(url)\n    query_params = urllib.parse.parse_qs(parsed_url.query)\n    q_values = query_params.get('q')\n    if not q_values:\n        return None\n    hex_str = q_values[0]\n    try:\n        decoded_bytes = binascii.unhexlify(hex_str)\n        decoded_str = decoded_bytes.decode('utf-8')\n        return decoded_str\n    except (binascii.Error, UnicodeDecodeError):\n        return None\n```", "match": {"category": "success"}}
{"result": "```python\nimport subprocess\nimport time\nimport json\nimport platform\n\nLOGFILE_PATH = \"logfile.log\"\n\ndef task_func(interval, duration):\n    if interval <= 0 or duration <= 0:\n        raise ValueError(\"Both 'interval' and 'duration' must be greater than zero.\")\n\n    data = []\n    start_time = time.time()\n    end_time = start_time + duration\n    system = platform.system()\n\n    def get_cpu_usage():\n        if system == 'Windows':\n            # Use typeperf command and parse output for CPU usage\n            try:\n                output = subprocess.check_output(\n                    ['wmic', 'cpu', 'get', 'loadpercentage'],\n                    stderr=subprocess.DEVNULL,\n                    universal_newlines=True\n                ).strip().split('\\n')\n                for line in output:\n                    if line.strip().isdigit():\n                        return float(line.strip())\n                return None\n            except Exception:\n                return None\n        else:\n            # Unix/Linux: run top in batch mode to get CPU idleness %\n            try:\n                output = subprocess.check_output(\n                    ['top', '-b', '-n', '1'],\n                    stderr=subprocess.DEVNULL,\n                    universal_newlines=True\n                )\n                for line in output.split('\\n'):\n                    if '%Cpu(s)' in line or 'Cpu(s)' in line:\n                        # Example line:\n                        # %Cpu(s):  2.3 us,  1.0 sy,  0.0 ni, 96.5 id,  0.0 wa,  0.2 hi,  0.0 si,  0.0 st\n                        part = line.split(':')[1]\n                        parts = part.split(',')\n                        for p in parts:\n                            if 'id' in p:\n                                idle = float(p.strip().split(' ')[0])\n                                usage = 100.0 - idle\n                                return usage\n                return None\n            except Exception:\n                return None\n\n    try:\n        while True:\n            current_time = time.time()\n            if current_time >= end_time:\n                break\n\n            cpu_usage = get_cpu_usage()\n            timestamp = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(current_time))\n            if cpu_usage is not None:\n                data.append({'timestamp': timestamp, 'cpu_usage_percent': cpu_usage})\n\n            time_remaining = interval - (time.time() - current_time)\n            if time_remaining > 0:\n                time.sleep(time_remaining)\n    except Exception:\n        # In case of unexpected exception during monitoring, just proceed to save what we have\n        pass\n\n    try:\n        with open(LOGFILE_PATH, 'w', encoding='utf-8') as f:\n            json.dump(data, f, indent=4)\n        return LOGFILE_PATH\n    except IOError:\n        return None\n```", "match": {"category": "timeout", "error": "Test execution timed out after 10 seconds"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\n\ndef task_func(rows=100, columns=3):\n    cols = [chr(ord('a') + i) for i in range(columns)]\n    data = np.random.choice(list('abcdefghijklmnopqrstuvwxyz'), size=(rows, columns))\n    df = pd.DataFrame(data, columns=cols)\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport itertools\nimport string\nimport pandas as pd\ndef task_func():\n    combos = itertools.combinations_with_replacement(string.ascii_lowercase, 3)\n    df = pd.DataFrame(combos, columns=['Letter1', 'Letter2', 'Letter3'])\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_columns (builtins.TestCases)\nTest if the DataFrame has the correct column names.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_columns\nAssertionError: Lists differ: ['Letter1', 'Letter2', 'Letter3'] != ['Letter 1', 'Letter 2', 'Letter 3']\n\nFirst differing element 0:\n'Letter1'\n'Letter 1'\n\n- ['Letter1', 'Letter2', 'Letter3']\n+ ['Letter 1', 'Letter 2', 'Letter 3']\n?         +           +           +\n : Column names are not correct.\n\n======================================================================\nFAIL: test_combinations (builtins.TestCases)\nTest if the function generates the correct combinations with replacement.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 14, in test_combinations\nAssertionError: Lists differ: [('a'[445 chars]b', 'b'), ('a', 'b', 'c'), ('a', 'b', 'd'), ('[55191 chars]'z')] != [('a'[445 chars]b', 'a'), ('a', 'b', 'b'), ('a', 'b', 'c'), ('[298291 chars]'z')]\n\nFirst differing element 26:\n('a', 'b', 'b')\n('a', 'b', 'a')\n\nSecond list contains 14300 additional elements.\nFirst extra element 3276:\n('e', 'w', 'a')\n\nDiff is 351520 characters long. Set self.maxDiff to None to see it. : The combinations are not correct.\n\n======================================================================\nFAIL: test_shape (builtins.TestCases)\nTest if the shape of the DataFrame is correct.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 34, in test_shape\nAssertionError: Tuples differ: (3276, 3) != (17576, 3)\n\nFirst differing element 0:\n3276\n17576\n\n- (3276, 3)\n+ (17576, 3) : Shape of the DataFrame is not correct.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.186s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport random\nimport string\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef task_func(n_rows=1000):\n    if n_rows <= 0:\n        raise ValueError(\"n_rows must be greater than 0\")\n    \n    # Generate random 3-letter strings\n    random_strings = [\n        ''.join(random.choices(string.ascii_lowercase, k=3))\n        for _ in range(n_rows)\n    ]\n    \n    # Count frequencies using pandas\n    series = pd.Series(random_strings)\n    top30 = series.value_counts().head(30)\n    \n    # Plot histogram\n    fig, ax = plt.subplots(figsize=(12, 6))\n    top30.plot(kind='bar', ax=ax)\n    ax.set_xlabel('3-letter String')\n    ax.set_ylabel('Frequency')\n    ax.set_title(f'Top 30 Most Frequent 3-Letter Strings ({n_rows} samples)')\n    plt.tight_layout()\n    \n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport matplotlib.pyplot as plt\nimport random\nimport string\nimport pandas as pd\nimport seaborn as sns\n\n# Constants\nLETTERS = list(string.ascii_lowercase)\n\ndef task_func(rows=1000, string_length=3):\n    if rows == 0:\n        print(\"No data to generate heatmap.\")\n        return None\n    \n    # Generate DataFrame of random strings\n    data = [''.join(random.choices(LETTERS, k=string_length)) for _ in range(rows)]\n    df = pd.DataFrame(data, columns=['random_string'])\n    \n    if df.empty:\n        print(\"No data to generate heatmap.\")\n        return None\n    \n    # Create one-hot encoding for each letter in each string\n    # We turn each string into a list of letters then explode them into rows\n    exploded = df['random_string'].apply(list).explode()\n    \n    one_hot_df = pd.get_dummies(exploded)\n    \n    # Group by original index and sum the one hot encoding per string\n    letter_counts_per_string = one_hot_df.groupby(level=0).sum()\n    \n    # Calculate correlation matrix of letter frequency across strings\n    corr = letter_counts_per_string.corr()\n    \n    # Plot heatmap\n    plt.figure(figsize=(12, 10))\n    ax = sns.heatmap(corr, cmap='coolwarm', vmin=-1, vmax=1, square=True, cbar_kws={\"shrink\": .8})\n    ax.set_title(\"Correlation Heatmap of Letter Frequencies in Random Strings\")\n    \n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport itertools\nimport string\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef task_func():\n    letters = string.ascii_lowercase\n    combos = list(itertools.product(letters, repeat=3))\n    df = pd.DataFrame(combos, columns=['L1', 'L2', 'L3'])\n    df['first_letter'] = df['L1']\n    \n    fig, ax = plt.subplots()\n    df['first_letter'].value_counts().sort_index().plot(kind='bar', ax=ax)\n    ax.set_xlabel('First Letter')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Frequency of First Letters in 3-Letter Combinations')\n    \n    return df, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_first_column_values (builtins.TestCases)\nTest if the first column of the DataFrame contains only lowercase letters\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'a'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 31, in test_first_column_values\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'a'\n\n======================================================================\nFAIL: test_dataframe_columns (builtins.TestCases)\nTest if the DataFrame has the correct column names (a, b, c)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 19, in test_dataframe_columns\nAssertionError: Lists differ: ['L1', 'L2', 'L3', 'first_letter'] != ['a', 'b', 'c']\n\nFirst differing element 0:\n'L1'\n'a'\n\nFirst list contains 1 additional elements.\nFirst extra element 3:\n'first_letter'\n\n- ['L1', 'L2', 'L3', 'first_letter']\n+ ['a', 'b', 'c']\n\n======================================================================\nFAIL: test_dataframe_shape (builtins.TestCases)\nTest if the DataFrame has the correct shape (17576 rows, 3 columns)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_dataframe_shape\nAssertionError: Tuples differ: (17576, 4) != (17576, 3)\n\nFirst differing element 1:\n4\n3\n\n- (17576, 4)\n?         ^\n\n+ (17576, 3)\n?         ^\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.254s\n\nFAILED (failures=2, errors=1)"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nCATEGORIES = [\"Electronics\", \"Clothing\", \"Home Decor\", \"Automotive\", \"Books\"]\n\ndef task_func(s1, s2):\n    # Ensure the series have the right categories and in order\n    s1_filtered = s1.reindex(CATEGORIES)\n    s2_filtered = s2.reindex(CATEGORIES)\n    \n    # Filter categories where both stores have sales > 200\n    mask = (s1_filtered > 200) & (s2_filtered > 200)\n    \n    # If no such categories exist, return None and 0.0\n    if not mask.any():\n        return None, 0.0\n    \n    s1_sel = s1_filtered[mask]\n    s2_sel = s2_filtered[mask]\n    \n    # Compute Euclidean distance\n    euclidean_distance = np.linalg.norm(s1_sel.values - s2_sel.values)\n    \n    # Plot bar chart\n    fig, ax = plt.subplots()\n    width = 0.35\n    x = np.arange(len(s1_sel))\n    \n    ax.bar(x - width/2, s1_sel.values, width, label='Store 1')\n    ax.bar(x + width/2, s2_sel.values, width, label='Store 2')\n    \n    ax.set_xticks(x)\n    ax.set_xticklabels(s1_sel.index)\n    ax.set_ylabel('Sales')\n    ax.set_title('Sales Comparison for Categories with Sales > 200')\n    ax.legend()\n    plt.tight_layout()\n    \n    return ax, euclidean_distance\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_sales_above_threshold (builtins.TestCases)\nTest that the function returns a plot when sales exceed the threshold\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 22, in test_sales_above_threshold\nAssertionError: 'Sales Comparison for Categories with Sales > 200' != 'Sales Comparison Above Threshold in Categories'\n- Sales Comparison for Categories with Sales > 200\n+ Sales Comparison Above Threshold in Categories\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.181s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(feature: pd.Series, target: pd.Series) -> (np.ndarray, plt.Axes):\n    # reshape feature to 2D array for sklearn\n    X = feature.values.reshape(-1, 1)\n    y = target.values\n\n    # split the data\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42, stratify=y)\n\n    # train logistic regression model\n    model = LogisticRegression()\n    model.fit(X_train, y_train)\n\n    # predict on test set\n    y_pred = model.predict(X_test)\n\n    # compute confusion matrix\n    cm = confusion_matrix(y_test, y_pred)\n\n    # plot confusion matrix\n    fig, ax = plt.subplots()\n    disp = ConfusionMatrixDisplay(confusion_matrix=cm)\n    disp.plot(ax=ax)\n    plt.close(fig)  # prevent double displaying if in notebook\n\n    return cm, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef task_func(s1, s2):\n    # Prepare a DataFrame for plotting\n    df = pd.DataFrame({\n        'value': pd.concat([s1, s2], ignore_index=True),\n        'series': ['s1']*len(s1) + ['s2']*len(s2)\n    })\n    plt.figure(figsize=(8,4))\n    ax = sns.swarmplot(x='series', y='value', data=df)\n\n    # Identify unique intersection values\n    intersect_vals = sorted(set(s1).intersection(set(s2)))\n    intersection_count = len(intersect_vals)\n\n    # Plot red dashed lines at intersecting points\n    for val in intersect_vals:\n        ax.axhline(y=val, color='red', linestyle='dashed', alpha=0.5)\n\n    ax.set_title('Swarm plot with intersection highlights')\n    return ax, intersection_count\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_empty_series (builtins.TestCases)\nTest that the function works when one of the series is empty.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_empty_series\nAssertionError: 'Swarm plot with intersection highlights' != 'Overlap Between Series1 and Series2'\n- Swarm plot with intersection highlights\n+ Overlap Between Series1 and Series2\n\n\n======================================================================\nFAIL: test_identical_series (builtins.TestCases)\nTest that the function works when the two series are identical.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 38, in test_identical_series\nAssertionError: 'Swarm plot with intersection highlights' != 'Overlap Between Series1 and Series2'\n- Swarm plot with intersection highlights\n+ Overlap Between Series1 and Series2\n\n\n======================================================================\nFAIL: test_intersection_exists (builtins.TestCases)\nTest that the function works when the two series have an intersection.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 10, in test_intersection_exists\nAssertionError: 'Swarm plot with intersection highlights' != 'Overlap Between Series1 and Series2'\n- Swarm plot with intersection highlights\n+ Overlap Between Series1 and Series2\n\n\n======================================================================\nFAIL: test_no_intersection (builtins.TestCases)\nTest that the function works when the two series have no intersection.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 17, in test_no_intersection\nAssertionError: 'Swarm plot with intersection highlights' != 'Overlap Between Series1 and Series2'\n- Swarm plot with intersection highlights\n+ Overlap Between Series1 and Series2\n\n\n======================================================================\nFAIL: test_partial_intersection (builtins.TestCases)\nTest that the function works when the two series have a partial intersection.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 31, in test_partial_intersection\nAssertionError: 'Swarm plot with intersection highlights' != 'Overlap Between Series1 and Series2'\n- Swarm plot with intersection highlights\n+ Overlap Between Series1 and Series2\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.330s\n\nFAILED (failures=5)"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(s1, s2, n_clusters=3):\n    if not (isinstance(s1, pd.Series) and isinstance(s2, pd.Series)):\n        raise ValueError(\"s1 and s2 must be pandas Series\")\n    if len(s1) != len(s2):\n        raise ValueError(\"s1 and s2 must have the same length\")\n    data = pd.DataFrame({'x': s1, 'y': s2}).values\n    kmeans = KMeans(n_clusters=n_clusters, random_state=0).fit(data)\n    labels = kmeans.labels_\n\n    fig, ax = plt.subplots()\n    scatter = ax.scatter(data[:, 0], data[:, 1], c=labels, cmap='viridis', alpha=0.7)\n    ax.set_title(\"K-Means Clustering\")\n    # Create legend from scatter plot\n    handles = []\n    unique_labels = sorted(set(labels))\n    for label in unique_labels:\n        handles.append(plt.Line2D([0], [0], marker='o', color='w',\n                                  markerfacecolor=plt.cm.viridis(label / (n_clusters - 1)),\n                                  markersize=8, label=f'Cluster {label}'))\n    ax.legend(handles=handles, title=\"Clusters\")\n    return labels, ax\n```", "match": {"category": "success"}}
{"result": "```python\nfrom datetime import datetime\nimport json\nSERVER_ADDRESS = \"localhost\"\nBUFFER_SIZE = 1024\ndef task_func(client_socket):\n    current_time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    response = {\n        \"greeting\": \"Hello, client!\",\n        \"server_time\": current_time\n    }\n    message = json.dumps(response)\n    client_socket.sendall(message.encode('utf-8'))\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_response_format (builtins.TestCases)\nTest if the response format from the server is correct.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 65, in test_response_format\nAssertionError: 'time' not found in {'greeting': 'Hello, client!', 'server_time': '2025-05-24 22:40:06'}\n\n----------------------------------------------------------------------\nRan 5 tests in 0.005s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport ssl\nimport os\nimport hashlib\n\ndef task_func(client_socket, cert_file, key_file, buffer_size=1024):\n    try:\n        context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)\n        context.load_cert_chain(certfile=cert_file, keyfile=key_file)\n\n        with context.wrap_socket(client_socket, server_side=True) as ssl_sock:\n            file_path = b''\n            while True:\n                data = ssl_sock.recv(buffer_size)\n                if not data:\n                    break\n                file_path += data\n                if b'\\n' in data:\n                    break\n            file_path = file_path.strip().decode('utf-8')\n\n            if not os.path.isfile(file_path):\n                return 'File not found'\n\n            sha256_hash = hashlib.sha256()\n            with open(file_path, 'rb') as f:\n                for chunk in iter(lambda: f.read(buffer_size), b''):\n                    sha256_hash.update(chunk)\n            return sha256_hash.hexdigest()\n\n    except Exception as e:\n        return f'Error: {str(e)}'\n```", "match": {"category": "timeout", "error": "Test execution timed out after 10 seconds"}}
{"result": "```python\nimport socket\nimport select\nimport queue\nfrom datetime import datetime, timedelta\n\ndef task_func(\n    server_address=\"localhost\", server_port=12345, buffer_size=1024, run_duration=5\n):\n    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server.setblocking(False)\n    server.bind((server_address, server_port))\n    server.listen()\n\n    inputs = [server]\n    outputs = []\n    message_queues = {}\n\n    start_time = datetime.now()\n    end_time = start_time + timedelta(seconds=run_duration)\n\n    try:\n        while datetime.now() < end_time:\n            readable, writable, exceptional = select.select(inputs, outputs, inputs, 1)\n            for s in readable:\n                if s is server:\n                    try:\n                        conn, addr = server.accept()\n                        conn.setblocking(False)\n                        inputs.append(conn)\n                        message_queues[conn] = queue.Queue()\n                    except Exception:\n                        continue\n                else:\n                    try:\n                        data = s.recv(buffer_size)\n                        if data:\n                            timestamp = datetime.now().strftime(\"[%Y-%m-%d %H:%M:%S]\")\n                            response = data + b\" \" + timestamp.encode()\n                            message_queues[s].put(response)\n                            if s not in outputs:\n                                outputs.append(s)\n                        else:\n                            if s in outputs:\n                                outputs.remove(s)\n                            inputs.remove(s)\n                            s.close()\n                            del message_queues[s]\n                    except Exception:\n                        if s in outputs:\n                            outputs.remove(s)\n                        if s in inputs:\n                            inputs.remove(s)\n                        s.close()\n                        if s in message_queues:\n                            del message_queues[s]\n\n            for s in writable:\n                try:\n                    if not message_queues[s].empty():\n                        next_msg = message_queues[s].get_nowait()\n                        s.send(next_msg)\n                    else:\n                        outputs.remove(s)\n                except Exception:\n                    if s in outputs:\n                        outputs.remove(s)\n                    if s in inputs:\n                        inputs.remove(s)\n                    s.close()\n                    if s in message_queues:\n                        del message_queues[s]\n\n            for s in exceptional:\n                if s in outputs:\n                    outputs.remove(s)\n                if s in inputs:\n                    inputs.remove(s)\n                s.close()\n                if s in message_queues:\n                    del message_queues[s]\n    finally:\n        for s in inputs:\n            s.close()\n        for s in outputs:\n            s.close()\n        server.close()\n\n    elapsed = (datetime.now() - start_time).total_seconds()\n    return f\"Server ran for {elapsed:.2f} seconds on {server_address}:{server_port}.\"\n```", "match": {"category": "timeout", "error": "Test execution timed out after 10 seconds"}}
{"result": "```python\nimport re\nimport os\ndef task_func(request):\n    # Match GET request line, capturing the requested path\n    match = re.match(r'^GET\\s+(/[^ ]*)\\s+HTTP/1\\.[01]\\r?\\n', request)\n    if not match:\n        return \"HTTP/1.1 400 Bad Request\\r\\n\\r\\nInvalid request format.\"\n    path = match.group(1)\n\n    # Disallow directory traversal attempts\n    if '..' in path or path.endswith('/'):\n        return \"HTTP/1.1 400 Bad Request\\r\\n\\r\\nInvalid filename.\"\n\n    # Remove leading slash to get relative filepath\n    filename = path.lstrip('/')\n    if not filename:\n        return \"HTTP/1.1 400 Bad Request\\r\\n\\r\\nNo filename specified.\"\n\n    # Check if file exists and is a regular file\n    if not os.path.isfile(filename):\n        return \"HTTP/1.1 404 Not Found\\r\\n\\r\\nFile not found.\"\n\n    try:\n        with open(filename, 'rb') as f:\n            content = f.read()\n    except Exception:\n        return \"HTTP/1.1 500 Internal Server Error\\r\\n\\r\\nError reading file.\"\n\n    # Build HTTP response for 200 OK including Content-Length header\n    response = (\n        \"HTTP/1.1 200 OK\\r\\n\"\n        f\"Content-Length: {len(content)}\\r\\n\"\n        \"\\r\\n\"\n    ).encode('utf-8') + content\n\n    return response.decode('latin1')\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_bad_request (builtins.TestCases)\nTest the response for a badly formatted request.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 30, in test_bad_request\nAssertionError: 'HTTP/1.1 400 Bad Request\\r\\n\\r\\nInvalid request format.' != 'HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request'\n- HTTP/1.1 400 Bad Request\r\n+ HTTP/1.1 400 BAD REQUEST\r\n  \r\n- Invalid request format.+ Bad Request\n\n======================================================================\nFAIL: test_empty_request (builtins.TestCases)\nTest the response for an empty request.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 35, in test_empty_request\nAssertionError: 'HTTP/1.1 400 Bad Request\\r\\n\\r\\nInvalid request format.' != 'HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request'\n- HTTP/1.1 400 Bad Request\r\n+ HTTP/1.1 400 BAD REQUEST\r\n  \r\n- Invalid request format.+ Bad Request\n\n======================================================================\nFAIL: test_file_found (builtins.TestCases)\nTest the response when the requested file is found.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_file_found\nAssertionError: 'HTTP/1.1 400 Bad Request\\r\\n\\r\\nInvalid request format.' != 'HTTP/1.1 200 OK\\r\\nContent-Length: 20\\r\\n\\r\\nThis is a test file.'\n- HTTP/1.1 400 Bad Request\r\n+ HTTP/1.1 200 OK\r\n+ Content-Length: 20\r\n  \r\n- Invalid request format.+ This is a test file.\n\n======================================================================\nFAIL: test_file_not_found (builtins.TestCases)\nTest the response when the requested file is not found.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_file_not_found\nAssertionError: 'HTTP/1.1 400 Bad Request\\r\\n\\r\\nInvalid request format.' != 'HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found'\n- HTTP/1.1 400 Bad Request\r\n+ HTTP/1.1 404 NOT FOUND\r\n  \r\n- Invalid request format.+ File Not Found\n\n======================================================================\nFAIL: test_internal_server_error (builtins.TestCases)\nTest the response when there's an internal server error (e.g., file read error).\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 49, in test_internal_server_error\nAssertionError: 'HTTP/1.1 400 Bad Request\\r\\n\\r\\nInvalid request format.' != 'HTTP/1.1 500 INTERNAL SERVER ERROR\\r\\n\\r\\nInternal Server Error'\n- HTTP/1.1 400 Bad Request\r\n+ HTTP/1.1 500 INTERNAL SERVER ERROR\r\n  \r\n- Invalid request format.+ Internal Server Error\n\n======================================================================\nFAIL: test_invalid_method_request (builtins.TestCases)\nTest the response for a request with an invalid HTTP method.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 40, in test_invalid_method_request\nAssertionError: 'HTTP/1.1 400 Bad Request\\r\\n\\r\\nInvalid request format.' != 'HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request'\n- HTTP/1.1 400 Bad Request\r\n+ HTTP/1.1 400 BAD REQUEST\r\n  \r\n- Invalid request format.+ Bad Request\n\n----------------------------------------------------------------------\nRan 6 tests in 0.017s\n\nFAILED (failures=6)"}}
{"result": "```python\nimport smtplib\nfrom email.message import EmailMessage\nimport getpass\nSERVER_ADDRESS = \"localhost\"\nSERVER_PORT = 25\nBUFFER_SIZE = 1024\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\ndef task_func(client_socket):\n    # Receive message from client socket\n    data = b\"\"\n    while True:\n        part = client_socket.recv(BUFFER_SIZE)\n        if not part:\n            break\n        data += part\n    message_content = data.decode('utf-8')\n\n    # Get email details from user\n    sender_email = input(\"Enter sender's email address: \")\n    recipient_email = input(\"Enter recipient's email address: \")\n    sender_password = getpass.getpass(\"Enter sender's email password: \")\n\n    # Create email message\n    msg = EmailMessage()\n    msg.set_content(message_content)\n    msg['Subject'] = 'Message from Client Socket'\n    msg['From'] = sender_email\n    msg['To'] = recipient_email\n\n    # Send email via SMTP server\n    try:\n        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:\n            server.starttls()\n            server.login(sender_email, sender_password)\n            server.send_message(msg)\n    except Exception as e:\n        print(f\"Failed to send email: {e}\")\n```", "match": {"category": "timeout", "error": "Test execution timed out after 10 seconds"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\n# Constants\nCATEGORIES = [\"A\", \"B\", \"C\", \"D\", \"E\"]\ndef task_func(data_list):\n    if not data_list:\n        raise ValueError(\"The data list is empty.\")\n    \n    category_counts = pd.Series(data_list).value_counts()\n    predefined_counts = category_counts.reindex(CATEGORIES, fill_value=0)\n    \n    # Check if predefined distribution is uniform (all counts equal)\n    if len(predefined_counts) > 0:\n        counts = predefined_counts.values\n        if not all(count == counts[0] for count in counts):\n            print(\"The distribution of predefined categories is not uniform.\")\n    \n    extra_categories = [cat for cat in category_counts.index if cat not in CATEGORIES]\n    all_categories = CATEGORIES + extra_categories\n    \n    fig, ax = plt.subplots()\n    ax.bar(all_categories, category_counts.reindex(all_categories, fill_value=0), width=0.8, align=\"center\")\n    ax.set_xlabel(\"Categories\")\n    ax.set_ylabel(\"Counts\")\n    ax.set_title(\"Category Distribution\")\n    \n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    # Validate date string format and convert to date object\n    try:\n        date_obj = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n    except ValueError:\n        raise ValueError(\"date_str must be a valid date in yyyy-mm-dd format\")\n    \n    # Check if date is in the past\n    today = datetime.today().date()\n    if date_obj < today:\n        raise ValueError(\"date_str refers to a past date\")\n    \n    # Determine booking status for each room on the specified date\n    status_list = []\n    for room in ROOMS:\n        # booking_data assumed to be dict or DataFrame with info on booked dates per room\n        # Check if room exists in booking_data and if date is booked\n        booked_dates = booking_data.get(room, []) if isinstance(booking_data, dict) else booking_data.get(room, pd.Series(dtype='datetime64[ns]'))\n        \n        # Normalize booked_dates to set for quick lookup if dict; if DataFrame series convert to set/datetime.date\n        if isinstance(booked_dates, (list, set)):\n            booked_dates_set = set()\n            for bd in booked_dates:\n                if isinstance(bd, datetime):\n                    booked_dates_set.add(bd.date())\n                elif isinstance(bd, str):\n                    try:\n                        bd_date = datetime.strptime(bd, \"%Y-%m-%d\").date()\n                        booked_dates_set.add(bd_date)\n                    except Exception:\n                        continue\n                elif isinstance(bd, pd.Timestamp):\n                    booked_dates_set.add(bd.date())\n            is_booked = date_obj in booked_dates_set\n        elif hasattr(booked_dates, 'dt'):  # pandas Series of datetime\n            booked_dates_set = set(booked_dates.dt.date.dropna().unique())\n            is_booked = date_obj in booked_dates_set\n        else:\n            is_booked = False\n        \n        status_list.append((room, \"Booked\" if is_booked else \"Free\"))\n    \n    # Create DataFrame for booking statuses\n    df_status = pd.DataFrame(status_list, columns=[\"Room\", \"Status\"])\n    \n    # Plot bar plot of booking statuses\n    ax = df_status[\"Status\"].value_counts().reindex([\"Booked\", \"Free\"]).fillna(0).plot(kind=\"bar\", color=[\"red\", \"green\"])\n    ax.set_title(f\"Room Booking Status on {date_str}\")\n    ax.set_ylabel(\"Number of Rooms\")\n    ax.set_xlabel(\"Booking Status\")\n    ax.set_ylim(0, len(ROOMS))\n    ax.grid(axis='y', linestyle='--', alpha=0.7)\n    \n    return df_status, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_booking_data_for_nonexistent_room (builtins.TestCases)\nTest task_func with booking data for a room not in the ROOMS constant.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Booking Status'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 39, in test_booking_data_for_nonexistent_room\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Booking Status'\n\n======================================================================\nERROR: test_future_date_valid_booking_data (builtins.TestCases)\nTest task_func with a future date and valid booking data.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Booking Status'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 15, in test_future_date_valid_booking_data\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Booking Status'\n\n======================================================================\nERROR: test_no_booking_data (builtins.TestCases)\nTest task_func with no booking data provided.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Booking Status'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<string>\", line 47, in test_no_booking_data\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Booking Status'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.188s\n\nFAILED (errors=3)"}}
{"result": "```python\nfrom datetime import datetime\nimport numpy as np\nfrom dateutil.parser import parse\nLEAP_SECONDS = np.array(\n    [\n        1972,\n        1973,\n        1974,\n        1975,\n        1976,\n        1977,\n        1978,\n        1979,\n        1980,\n        1981,\n        1982,\n        1983,\n        1985,\n        1988,\n        1990,\n        1993,\n        1994,\n        1997,\n        1999,\n        2006,\n        2009,\n        2012,\n        2015,\n        2016,\n        2020,\n    ]\n)\ndef task_func(date_str):\n    start_date = parse(date_str)\n    now = datetime.utcnow()\n    # Calculate basic elapsed seconds\n    elapsed_seconds = int((now - start_date).total_seconds())\n    # Count leap seconds that occurred after start_date and before now\n    start_year = start_date.year\n    end_year = now.year\n    # Leap seconds are added typically at end of June or December,\n    # but we approximate by year since data is sparse.\n    # We count leap seconds for years strictly greater than start_date year\n    # if start_date is after the day leap second was added, that would be complex,\n    # so we count leap seconds for years greater than or equal to start_year+1 and less or equal end_year\n    # This approach assumes leap seconds added once per year in that year.\n    count_leap_seconds = np.sum((LEAP_SECONDS > start_year) & (LEAP_SECONDS <= end_year))\n    # If start_date is earlier than first leap second in its year, count that one\n    # but since we don't have exact leap second dates here, this is the best approximation\n    return elapsed_seconds + count_leap_seconds\n```", "match": {"category": "success"}}
{"result": "```python\nfrom datetime import datetime, timedelta\nimport pandas as pd\nfrom itertools import product\n# Constants\nEMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"Dave\"]\ndef task_func(date_str):\n    start_date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    dates = [start_date + timedelta(days=i) for i in range(10)]\n    pairs = product(EMPLOYEES, dates)\n    df = pd.DataFrame(pairs, columns=[\"Employee\", \"Date\"])\n    df[\"Date\"] = df[\"Date\"].dt.date\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_date_range (builtins.TestCases)\nTest if the function generates the correct date range for 10 days.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_date_range\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/ops/common.py\", line 81, in new_method\n    return method(self, other)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/arraylike.py\", line 52, in __le__\n    return self._cmp_method(other, operator.le)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/series.py\", line 6096, in _cmp_method\n    res_values = ops.comparison_op(lvalues, rvalues, op)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/ops/array_ops.py\", line 293, in comparison_op\n    res_values = comp_method_OBJECT_ARRAY(op, lvalues, rvalues)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/ops/array_ops.py\", line 82, in comp_method_OBJECT_ARRAY\n    result = libops.scalar_compare(x.ravel(), y, op)\n  File \"pandas/_libs/ops.pyx\", line 107, in pandas._libs.ops.scalar_compare\n  File \"pandas/_libs/tslibs/timestamps.pyx\", line 373, in pandas._libs.tslibs.timestamps._Timestamp.__richcmp__\nTypeError: Cannot compare Timestamp with datetime.date. Use ts == pd.Timestamp(date) or ts.date() == date instead.\n\n======================================================================\nFAIL: test_leap_year (builtins.TestCases)\nTest if the function correctly handles the date range for a leap year.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 33, in test_leap_year\nAssertionError: Timestamp('2024-03-08 00:00:00') not found in array([datetime.date(2024, 2, 28), datetime.date(2024, 2, 29),\n       datetime.date(2024, 3, 1), datetime.date(2024, 3, 2),\n       datetime.date(2024, 3, 3), datetime.date(2024, 3, 4),\n       datetime.date(2024, 3, 5), datetime.date(2024, 3, 6),\n       datetime.date(2024, 3, 7), datetime.date(2024, 3, 8),\n       datetime.date(2024, 2, 28), datetime.date(2024, 2, 29),\n       datetime.date(2024, 3, 1), datetime.date(2024, 3, 2),\n       datetime.date(2024, 3, 3), datetime.date(2024, 3, 4),\n       datetime.date(2024, 3, 5), datetime.date(2024, 3, 6),\n       datetime.date(2024, 3, 7), datetime.date(2024, 3, 8),\n       datetime.date(2024, 2, 28), datetime.date(2024, 2, 29),\n       datetime.date(2024, 3, 1), datetime.date(2024, 3, 2),\n       datetime.date(2024, 3, 3), datetime.date(2024, 3, 4),\n       datetime.date(2024, 3, 5), datetime.date(2024, 3, 6),\n       datetime.date(2024, 3, 7), datetime.date(2024, 3, 8),\n       datetime.date(2024, 2, 28), datetime.date(2024, 2, 29),\n       datetime.date(2024, 3, 1), datetime.date(2024, 3, 2),\n       datetime.date(2024, 3, 3), datetime.date(2024, 3, 4),\n       datetime.date(2024, 3, 5), datetime.date(2024, 3, 6),\n       datetime.date(2024, 3, 7), datetime.date(2024, 3, 8),\n       datetime.date(2024, 2, 28), datetime.date(2024, 2, 29),\n       datetime.date(2024, 3, 1), datetime.date(2024, 3, 2),\n       datetime.date(2024, 3, 3), datetime.date(2024, 3, 4),\n       datetime.date(2024, 3, 5), datetime.date(2024, 3, 6),\n       datetime.date(2024, 3, 7), datetime.date(2024, 3, 8)], dtype=object)\n\n----------------------------------------------------------------------\nRan 5 tests in 0.013s\n\nFAILED (failures=1, errors=1)"}}
{"result": "```python\nfrom datetime import datetime\nimport random\nimport matplotlib.pyplot as plt\ndef task_func(date_str):\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    count = date.day\n    data = [random.randint(0, 100) for _ in range(count)]\n    fig, ax = plt.subplots()\n    ax.plot(range(1, count + 1), data)\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nfrom datetime import datetime\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(date_str):\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    freq = date.day\n    x = np.linspace(0, 2 * np.pi, 400)\n    y = np.sin(freq * x)\n    fig, ax = plt.subplots()\n    ax.plot(x, y)\n    ax.set_title(f\"Sine wave with frequency = {freq}\")\n    ax.set_xlabel(\"x\")\n    ax.set_ylabel(\"sin(frequency * x)\")\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport pandas as pd\ndef task_func(input_string: str) -> pd.DataFrame:\n    lines = input_string.splitlines()\n    processed_lines = [line.replace('\\t', ' ') for line in lines if line.strip()]\n    return pd.DataFrame({'Text': processed_lines})\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_empty_string (builtins.TestCases)\nTest with an empty string.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 18, in test_empty_string\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1224, in assert_frame_equal\n    assert_series_equal(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 931, in assert_series_equal\n    assert_attr_equal(\"dtype\", left, right, obj=f\"Attributes of {obj}\")\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 415, in assert_attr_equal\n    raise_assert_detail(obj, msg, left_attr, right_attr)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: Attributes of DataFrame.iloc[:, 0] (column name=\"Text\") are different\n\nAttribute \"dtype\" are different\n[left]:  float64\n[right]: object\n\n======================================================================\nFAIL: test_string_with_only_tabs (builtins.TestCases)\nTest with a string that contains only tabs.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 32, in test_string_with_only_tabs\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1224, in assert_frame_equal\n    assert_series_equal(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 931, in assert_series_equal\n    assert_attr_equal(\"dtype\", left, right, obj=f\"Attributes of {obj}\")\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 415, in assert_attr_equal\n    raise_assert_detail(obj, msg, left_attr, right_attr)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: Attributes of DataFrame.iloc[:, 0] (column name=\"Text\") are different\n\nAttribute \"dtype\" are different\n[left]:  float64\n[right]: object\n\n----------------------------------------------------------------------\nRan 5 tests in 0.011s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport os\nimport hashlib\n# Constants\nDIRECTORY = \"./hashed_files\"\ndef task_func(input_string):\n    if not os.path.exists(DIRECTORY):\n        os.makedirs(DIRECTORY)\n    file_paths = []\n    for line in input_string.splitlines():\n        line = line.strip()\n        if not line:\n            continue\n        h = hashlib.sha256(line.encode('utf-8')).hexdigest()\n        filename = h[:10] + \".txt\"\n        filepath = os.path.join(DIRECTORY, filename)\n        with open(filepath, \"w\", encoding=\"utf-8\") as f:\n            f.write(h)\n        file_paths.append(filepath)\n    return file_paths\n```", "match": {"category": "success"}}
{"result": "```python\nimport collections\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data_dict):\n    if not data_dict:\n        fig, ax = plt.subplots()\n        ax.text(0.5, 0.5, \"Empty Distribution\", ha='center', va='center')\n        ax.set_xticks([])\n        ax.set_yticks([])\n        return None, \"The distribution is uniform.\"\n    counts = np.array(list(data_dict.values()), dtype=float)\n    avg_count = np.mean(counts)\n    uniform = all(abs(c - avg_count) <= 1e-5 for c in counts)\n    message = \"The distribution is uniform.\" if uniform else \"The distribution is not uniform.\"\n    unique_counts = np.unique(counts)\n    bins = min(10, len(unique_counts))\n    fig, ax = plt.subplots()\n    ax.hist(counts, bins=bins, edgecolor='black')\n    ax.set_xlabel(\"Counts\")\n    ax.set_ylabel(\"Frequency\")\n    ax.set_title(\"Histogram of Counts per Category\")\n    category_names = list(data_dict.keys())\n    ax.set_xticks(np.arange(len(category_names)))\n    ax.set_xticklabels(category_names, rotation=45, ha='right', fontsize='small')\n    plt.tight_layout()\n    return ax, message\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport matplotlib.pyplot as plt\n# Constants\nSTOP_WORDS = [\"a\", \"an\", \"the\", \"in\", \"on\", \"at\", \"and\", \"or\"]\n\ndef task_func(file_path, save_path=None):\n    try:\n        df = pd.read_csv(file_path)\n    except Exception as e:\n        print(f\"Error reading file: {e}\")\n        return None\n\n    if df.empty:\n        print(\"Input file is empty.\")\n        return None\n\n    # Determine which columns are text columns - assume first text column or first column if only one\n    text_cols = df.select_dtypes(include=['object']).columns\n    if len(text_cols) == 0:\n        print(\"No text columns found in the input file.\")\n        return None\n\n    # Combine all text columns into one series of strings\n    texts = df[text_cols].astype(str).apply(lambda x: ' '.join(x), axis=1)\n\n    if texts.empty or texts.str.strip().eq('').all():\n        print(\"Input file contains no valid text.\")\n        return None\n\n    vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n    try:\n        X = vectorizer.fit_transform(texts)\n    except Exception as e:\n        print(f\"Vectorization error: {e}\")\n        return None\n\n    word_counts = X.sum(axis=0).A1\n    words = vectorizer.get_feature_names_out()\n\n    if len(words) == 0:\n        print(\"Input contains only stop words or no valid words.\")\n        return None\n\n    # Get top 10 most common words\n    top_indices = word_counts.argsort()[::-1][:10]\n    top_words = words[top_indices]\n    top_counts = word_counts[top_indices]\n\n    if top_counts.sum() == 0:\n        print(\"No valid words found after excluding stop words.\")\n        return None\n\n    fig, ax = plt.subplots(figsize=(10,6))\n    ax.bar(top_words, top_counts, color='skyblue')\n    ax.set_title(\"Top 10 Most Common Words\")\n    ax.set_ylabel(\"Frequency\")\n    ax.set_xlabel(\"Words\")\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n\n    if save_path:\n        try:\n            fig.savefig(save_path)\n            plt.close(fig)\n            return None\n        except Exception as e:\n            print(f\"Error saving plot: {e}\")\n            plt.close(fig)\n            return None\n    else:\n        plt.show()\n        return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_save_plot (builtins.TestCases)\nTest the functionality of saving the plot to a file.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 43, in test_save_plot\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 920, in assert_called_with\n    raise AssertionError(error_message)\nAssertionError: expected call not found.\nExpected: savefig('output.png')\nActual: not called.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.278s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport matplotlib.pyplot as plt\n\n# Constants\nSTOP_WORDS = [\"a\", \"an\", \"the\", \"in\", \"on\", \"at\", \"and\", \"or\"]\n\ndef task_func(file_path, save_path=None):\n    try:\n        # Try reading with header first\n        try:\n            df = pd.read_csv(file_path)\n            if 'Text' not in df.columns:\n                # No 'Text' header found, read without header and assume first column\n                df = pd.read_csv(file_path, header=None, names=['Text'])\n        except pd.errors.ParserError:\n            # fallback: read without header\n            df = pd.read_csv(file_path, header=None, names=['Text'])\n        \n        # Check if text data column exists\n        if df.empty or 'Text' not in df.columns:\n            raise ValueError(\"CSV file does not contain a text column.\")\n\n        # Extract text data as a list of strings\n        text_data = df['Text'].dropna().astype(str).tolist()\n\n        # Create CountVectorizer with English stop words plus predefined STOP_WORDS\n        # Note: Pass STOP_WORDS to stop_words param of CountVectorizer (ignore English default,\n        # since we have custom stopwords)\n        vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n\n        # Fit and transform the text data into a word count matrix\n        word_counts = vectorizer.fit_transform(text_data)\n\n        # Sum counts for each word\n        sums = word_counts.sum(axis=0)\n        word_freq = [(word, sums[0, idx]) for word, idx in vectorizer.vocabulary_.items()]\n        word_freq.sort(key=lambda x: x[1], reverse=True)\n\n        top_words = word_freq[:10]\n        words = [w for w, c in top_words]\n        counts = [c for w, c in top_words]\n\n        # Plot histogram\n        fig, ax = plt.subplots(figsize=(10,6))\n        ax.bar(words, counts, color='skyblue')\n        ax.set_title(\"Top 10 Most Common Words\")\n        ax.set_xlabel(\"Words\")\n        ax.set_ylabel(\"Frequency\")\n        ax.tick_params(axis='x', rotation=45)\n\n        plt.tight_layout()\n\n        if save_path:\n            fig.savefig(save_path)\n            plt.close(fig)\n            return None\n        else:\n            return ax\n\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"The file '{file_path}' was not found.\")\n    except Exception as e:\n        print(f\"Error processing file '{file_path}': {e}\")\n        return None\n```", "match": {"category": "success"}}
{"result": "```python\nimport csv\nimport numpy as np\nimport scipy.stats as stats\nimport matplotlib.pyplot as plt\n\ndef task_func(file_path):\n    try:\n        with open(file_path, newline='') as csvfile:\n            reader = csv.reader(csvfile)\n            population = []\n            for row in reader:\n                if row:\n                    population.append(float(row[0]))\n            population = np.array(population)\n    except Exception as e:\n        raise IOError(f\"Error reading the CSV file: {e}\")\n\n    if len(population) < 30:\n        raise ValueError(\"Population must contain at least 30 individuals for sampling.\")\n\n    sample = np.random.choice(population, size=30, replace=False)\n    sample_mean = np.mean(sample)\n    sample_std = np.std(sample, ddof=1)\n\n    fig, ax = plt.subplots()\n\n    counts, bins, patches = ax.hist(sample, bins='auto', density=True, alpha=0.6, color='b')\n\n    # Normal distribution curve parameters\n    xmin, xmax = bins[0], bins[-1]\n    x = np.linspace(xmin, xmax, 1000)\n    pdf = stats.norm.pdf(x, loc=sample_mean, scale=sample_std)\n\n    ax.plot(x, pdf, 'r-', lw=2)\n\n    ax.set_title(\"Sample Histogram with Normal Distribution Curve\")\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Density\")\n\n    return sample_mean, sample_std, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_csv_with_non_numeric_data (builtins.TestCases)\nTest with a CSV file containing non-numeric data.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<bigcode>\", line 14, in task_func\nValueError: could not convert string to float: 'a'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"<string>\", line 33, in test_csv_with_non_numeric_data\n  File \"<bigcode>\", line 17, in task_func\nOSError: Error reading the CSV file: could not convert string to float: 'a'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.025s\n\nFAILED (errors=1)"}}
{"result": "```python\nimport pandas as pd\nimport itertools\nimport random\ndef task_func(colors, states):\n    combinations = [f\"{c}:{s}\" for c, s in itertools.product(colors, states)]\n    random.shuffle(combinations)\n    num_cols = min(len(colors), len(states))\n    rows = (len(combinations) + num_cols - 1) // num_cols\n    cols_data = []\n    for i in range(num_cols):\n        col = combinations[i*rows:(i+1)*rows]\n        cols_data.append(col)\n    df = pd.DataFrame(cols_data).T\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_empty_lists (builtins.TestCases)\nTest with empty color and state lists.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_empty_lists\n  File \"<bigcode>\", line 9, in task_func\nZeroDivisionError: integer division or modulo by zero\n\n======================================================================\nERROR: test_multiple_colors_single_state (builtins.TestCases)\nTest with multiple colors and a single state.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_multiple_colors_single_state\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/range.py\", line 349, in get_loc\n    raise KeyError(key)\nKeyError: 'Color:State 1'\n\n======================================================================\nERROR: test_single_color_multiple_states (builtins.TestCases)\nTest with a single color and multiple states.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_single_color_multiple_states\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/range.py\", line 349, in get_loc\n    raise KeyError(key)\nKeyError: 'Color:State 1'\n\n======================================================================\nFAIL: test_single_color_and_state (builtins.TestCases)\nTest with one color and one state.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 14, in test_single_color_and_state\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 1185, in assert_frame_equal\n    assert_index_equal(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 263, in assert_index_equal\n    _check_types(left, right, obj=obj)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 241, in _check_types\n    assert_attr_equal(\"inferred_type\", left, right, obj=obj)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 415, in assert_attr_equal\n    raise_assert_detail(obj, msg, left_attr, right_attr)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/_testing/asserters.py\", line 599, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame.columns are different\n\nAttribute \"inferred_type\" are different\n[left]:  integer\n[right]: string\n\n----------------------------------------------------------------------\nRan 5 tests in 0.010s\n\nFAILED (failures=1, errors=3)"}}
{"result": "```python\nimport numpy as np\nimport random\nimport matplotlib.pyplot as plt\n# Constants\nLETTERS = list(\"abcdefghijklmnopqrstuvwxyz\")\nNUMBERS = list(range(1, 27))\ndef task_func(n_pairs=26):\n    if not (1 <= n_pairs <= 26):\n        raise ValueError(\"n_pairs must be in the range 1 to 26 inclusive.\")\n    \n    pairs = [f\"{LETTERS[i]}:{NUMBERS[i]}\" for i in range(26)]\n    random.shuffle(pairs)\n    selected_pairs = pairs[:n_pairs]\n    counts = [random.randint(1, 9) for _ in range(n_pairs)]\n    \n    fig, ax = plt.subplots()\n    bars = ax.bar(selected_pairs, counts)\n    ax.set_title(\"Random Letter:Number Pairs Chart\")\n    ax.set_xlabel(\"Letter:Number Pairs\")\n    ax.set_ylabel(\"Counts\")\n    plt.xticks(rotation=45, ha='right')\n    plt.tight_layout()\n    plt.show()\n    return bars\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_valid_pairs (builtins.TestCases)\nVerify that the pairs generated are valid and correspond to the expected letter:number format.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 51, in test_valid_pairs\nAssertionError: 'a:1' not found in ['_nolegend_', '_nolegend_', '_nolegend_', '_nolegend_', '_nolegend_'] : Expected pair a:1 not found in plotted pairs.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.249s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pandas as pd\nimport itertools\nimport numpy as np\n\ndef task_func(animals=None, foods=None):\n    default_animals = ['cat', 'dog', 'bird']\n    default_foods = ['fish', 'meat', 'seeds']\n\n    # Handle None by setting to empty list for easier checks\n    animals = [] if animals is None else animals\n    foods = [] if foods is None else foods\n\n    # If both empty, return empty DataFrame\n    if not animals and not foods:\n        return pd.DataFrame()\n\n    # Use default lists if one of them is empty\n    if not animals:\n        animals = default_animals\n    if not foods:\n        foods = default_foods\n\n    # Prepare product and shuffle\n    combinations = list(itertools.product(animals, foods))\n    np.random.shuffle(combinations)\n\n    # Create a mapping to fill the DataFrame\n    # Create empty DataFrame with animals as index and foods as columns\n    df = pd.DataFrame(index=animals, columns=foods, dtype=object)\n    for animal, food in combinations:\n        df.at[animal, food] = f\"{animal}:{food}\"\n\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_default_input (builtins.TestCases)\nTest with default inputs for animals and foods.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 11, in test_default_input\nAssertionError: Tuples differ: (0, 0) != (10, 7)\n\nFirst differing element 0:\n0\n10\n\n- (0, 0)\n?     ^\n\n+ (10, 7)\n?  +   ^\n : The shape of the DataFrame with default inputs is not as expected.\n\n======================================================================\nFAIL: test_partial_default (builtins.TestCases)\nTest with a custom list of animals and default list of foods.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 68, in test_partial_default\nAssertionError: Tuples differ: (3, 3) != (3, 7)\n\nFirst differing element 1:\n3\n7\n\n- (3, 3)\n?     ^\n\n+ (3, 7)\n?     ^\n : The shape of the DataFrame with partial default inputs is not as expected.\n\n----------------------------------------------------------------------\nRan 5 tests in 0.008s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport itertools\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Constants\nSHAPES = [\n    \"Circle\",\n    \"Square\",\n    \"Triangle\",\n    \"Rectangle\",\n    \"Pentagon\",\n    \"Hexagon\",\n    \"Heptagon\",\n    \"Octagon\",\n    \"Nonagon\",\n    \"Decagon\",\n]\nCOLORS = [\n    \"Red\",\n    \"Blue\",\n    \"Green\",\n    \"Yellow\",\n    \"Black\",\n    \"White\",\n    \"Purple\",\n    \"Orange\",\n    \"Pink\",\n    \"Brown\",\n]\n\ndef task_func(num_pairs=10):\n    # Generate all possible pairs (shape, color)\n    all_pairs = list(itertools.product(SHAPES, COLORS))\n    \n    # Select the requested number of pairs, limited by the total available\n    selected_pairs = all_pairs[:num_pairs]\n    \n    # Create a DataFrame for plotting\n    df = pd.DataFrame(selected_pairs, columns=[\"Shape\", \"Color\"])\n    \n    # Create a combined column for shape-color pairs\n    df[\"Shape-Color\"] = df[\"Shape\"] + \" - \" + df[\"Color\"]\n    df[\"Count\"] = 1  # each pair counted once\n    \n    # Plot countplot (here count corresponds to 1 for each pair, we just want bars representing pairs)\n    plt.figure(figsize=(10, 6))\n    ax = sns.barplot(x=\"Shape-Color\", y=\"Count\", data=df)\n    ax.set_ylabel(\"Count\")\n    ax.set_xlabel(\"Shape-Color Pair\")\n    ax.set_title(f\"Countplot of {num_pairs} Unique Shape-Color Pairs\")\n    ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right')\n    plt.tight_layout()\n    plt.show()\n    \n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_valid_pairs (builtins.TestCases)\nEnsure displayed shape-color pairs are valid combinations.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 26, in test_valid_pairs\nValueError: not enough values to unpack (expected 2, got 1)\n\n----------------------------------------------------------------------\nRan 5 tests in 0.498s\n\nFAILED (errors=1)"}}
{"result": "```python\nimport numpy as np\nimport random\nimport itertools\nimport pandas as pd\n# Constants\nPLANETS = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n]\nELEMENTS = [\n    \"Hydrogen\",\n    \"Helium\",\n    \"Oxygen\",\n    \"Carbon\",\n    \"Nitrogen\",\n    \"Magnesium\",\n    \"Silicon\",\n    \"Iron\",\n    \"Nickel\",\n]\ndef task_func():\n    num_planets = len(PLANETS)\n    num_elements = len(ELEMENTS)\n    # Create DataFrame with random planet-element pairs per row\n    data = []\n    for _ in range(num_planets):\n        planets_shuffled = random.sample(PLANETS, num_elements)\n        row = [f\"{p}:{e}\" for p, e in zip(planets_shuffled, ELEMENTS)]\n        data.append(row)\n    df = pd.DataFrame(data, columns=ELEMENTS, index=PLANETS)\n    return df\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_basic_structure (builtins.TestCases)\nTest the basic structure of the table.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 10, in test_basic_structure\n  File \"<bigcode>\", line 34, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/random.py\", line 482, in sample\n    raise ValueError(\"Sample larger than population or is negative\")\nValueError: Sample larger than population or is negative\n\n======================================================================\nERROR: test_data_format (builtins.TestCases)\nTest the format of the elements in the table.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 34, in test_data_format\n  File \"<bigcode>\", line 34, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/random.py\", line 482, in sample\n    raise ValueError(\"Sample larger than population or is negative\")\nValueError: Sample larger than population or is negative\n\n======================================================================\nERROR: test_data_type (builtins.TestCases)\nTest the data type of the table and its elements.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_data_type\n  File \"<bigcode>\", line 34, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/random.py\", line 482, in sample\n    raise ValueError(\"Sample larger than population or is negative\")\nValueError: Sample larger than population or is negative\n\n======================================================================\nERROR: test_pair_existence (builtins.TestCases)\nTest the existence of planet-element pairs.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 17, in test_pair_existence\n  File \"<bigcode>\", line 34, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/random.py\", line 482, in sample\n    raise ValueError(\"Sample larger than population or is negative\")\nValueError: Sample larger than population or is negative\n\n======================================================================\nERROR: test_uniqueness (builtins.TestCases)\nTest the uniqueness of the pairs.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 45, in test_uniqueness\n  File \"<bigcode>\", line 34, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/random.py\", line 482, in sample\n    raise ValueError(\"Sample larger than population or is negative\")\nValueError: Sample larger than population or is negative\n\n----------------------------------------------------------------------\nRan 5 tests in 0.002s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df: pd.DataFrame, column_name: str) -> (str, plt.Axes):\n    fig, ax = plt.subplots()\n    if df.empty or column_name not in df.columns or df[column_name].dropna().empty:\n        ax.set_title(f\"Distribution of values in {column_name} (No Data)\")\n        ax.set_xlabel(\"Values\")\n        ax.set_ylabel(\"Frequency\")\n        return \"The DataFrame is empty or the specified column has no data.\", ax\n    data = df[column_name].dropna()\n    value_counts = data.value_counts()\n    freqs = value_counts.values\n    is_uniform = (freqs == freqs[0]).all()\n    msg = \"The distribution of values is uniform.\" if is_uniform else \"The distribution of values is not uniform.\"\n    unique_vals = value_counts.index\n    ax.hist(data, bins=len(unique_vals), edgecolor='black', alpha=0.7)\n    ax.set_xlabel(\"Values\")\n    ax.set_ylabel(\"Frequency\")\n    ax.set_title(f\"Distribution of values in {column_name}\")\n    return msg, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\ndef task_func(arr: np.ndarray) -> (plt.Axes, np.ndarray):\n    row_sums = arr.sum(axis=1)\n    mean = row_sums.mean()\n    std = row_sums.std()\n    if std == 0:\n        normalized = np.zeros_like(row_sums)\n    else:\n        normalized = (row_sums - mean) / std\n\n    fig, ax = plt.subplots()\n    ax.hist(normalized, bins=30, density=True, color='green', alpha=0.6)\n\n    x = np.linspace(norm.ppf(0.005), norm.ppf(0.995), 500)\n    y = norm.pdf(x)\n    ax.plot(x, y, 'r-', lw=2)\n    ax.set_title(\"Histogram of Normalized Data with Standard Normal PDF\")\n\n    return ax, normalized\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n\ndef task_func(arr):\n    fig, ax = plt.subplots()\n    if arr.size == 0:\n        ax.set_title('Time Series of Row Sums')\n        return ax\n    row_sums = arr.sum(axis=1)\n    dates = pd.date_range(start='2020-01-01', periods=len(row_sums))\n    df = pd.DataFrame({'RowSum': row_sums}, index=dates)\n    df.plot(ax=ax, legend=False)\n    ax.set_title('Time Series of Row Sums')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Sum of Row Elements')\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nfrom matplotlib import pyplot as plt\nfrom sklearn.decomposition import PCA\nimport numpy as np\n\ndef task_func(arr):\n    row_sums = arr.sum(axis=1).reshape(-1, 1)\n    pca = PCA(n_components=1)\n    pca.fit(row_sums)\n    explained_variance_ratio = pca.explained_variance_ratio_\n    \n    fig, ax = plt.subplots()\n    ax.bar([1], explained_variance_ratio, tick_label=[\"PC1\"])\n    ax.set_ylim(0, 1)\n    ax.set_ylabel('Explained Variance Ratio')\n    ax.set_title(\"Explained Variance Ratio of Principal Components\")\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef task_func(arr):\n    row_sums = np.sum(arr, axis=1)\n    for i, s in enumerate(row_sums):\n        print(f\"Sum of row {i}: {s}\")\n    vmin, vmax = arr.min(), arr.max()\n    fig, ax = plt.subplots()\n    sns.heatmap(arr, ax=ax, vmin=vmin, vmax=vmax, cbar=True)\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_scenario_1 (builtins.TestCases)\nScenario 1: Testing with a 2D array created by adding row and column indices.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_scenario_1\nAssertionError: '' != 'Heatmap of the 2D Array'\n+ Heatmap of the 2D Array\n\n======================================================================\nFAIL: test_scenario_2 (builtins.TestCases)\nScenario 2: Testing with a 2D array where each column has identical values based on the column index.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_scenario_2\nAssertionError: '' != 'Heatmap of the 2D Array'\n+ Heatmap of the 2D Array\n\n======================================================================\nFAIL: test_scenario_3 (builtins.TestCases)\nScenario 3: Testing with a 2D array where each row has identical values based on the row index.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 27, in test_scenario_3\nAssertionError: '' != 'Heatmap of the 2D Array'\n+ Heatmap of the 2D Array\n\n======================================================================\nFAIL: test_scenario_4 (builtins.TestCases)\nScenario 4: Testing with a 2D array of zeros.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 34, in test_scenario_4\nAssertionError: '' != 'Heatmap of the 2D Array'\n+ Heatmap of the 2D Array\n\n======================================================================\nFAIL: test_scenario_5 (builtins.TestCases)\nScenario 5: Testing with a 2D array of ones.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 43, in test_scenario_5\nAssertionError: '' != 'Heatmap of the 2D Array'\n+ Heatmap of the 2D Array\n\n----------------------------------------------------------------------\nRan 5 tests in 0.405s\n\nFAILED (failures=5)"}}
{"result": "```python\nfrom scipy import fftpack\nfrom matplotlib import pyplot as plt\n\ndef task_func(arr):\n    row_sums = arr.sum(axis=1)\n    fft_coeffs = fftpack.fft(row_sums)\n    abs_fft = abs(fft_coeffs)\n    fig, ax = plt.subplots()\n    ax.plot(abs_fft)\n    ax.set_title('Absolute Values of FFT Coefficients')\n    ax.set_xlabel('Frequency Index')\n    ax.set_ylabel('Magnitude')\n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_plot_title (builtins.TestCases)\nTest that the plot title is correct.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 10, in test_plot_title\nAssertionError: 'Absolute Values of FFT Coefficients' != 'Absolute values of FFT coefficients'\n- Absolute Values of FFT Coefficients\n?          ^             ^\n+ Absolute values of FFT coefficients\n?          ^             ^\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.039s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    # Generate normally distributed data\n    normal_data = np.random.normal(loc=0, scale=1, size=num_samples)\n    \n    # Artificially introduce outliers far from the normal distribution\n    outliers_artificial = np.random.uniform(low=8, high=12, size=num_outliers)\n    \n    # Combine the data\n    combined_data = np.concatenate([normal_data, outliers_artificial])\n    \n    # Detect outliers using IQR on the normal data only\n    Q1 = np.percentile(normal_data, 25)\n    Q3 = np.percentile(normal_data, 75)\n    IQR = Q3 - Q1\n    lower_bound = Q1 - 1.5 * IQR\n    upper_bound = Q3 + 1.5 * IQR\n    \n    # Outliers detected based on normal data only\n    outliers_detected = normal_data[(normal_data < lower_bound) | (normal_data > upper_bound)]\n    \n    # Plot histogram of combined data\n    fig, ax = plt.subplots()\n    ax.hist(combined_data, bins=30, alpha=0.7, color='blue', label='Combined Data')\n    ax.axvline(lower_bound, color='red', linestyle='--', label='IQR Lower Bound')\n    ax.axvline(upper_bound, color='red', linestyle='--', label='IQR Upper Bound')\n    ax.legend()\n    ax.set_title('Histogram of Combined Data with IQR Bounds')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    \n    return combined_data, outliers_detected, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_only_outliers (builtins.TestCases)\nTest the function with only outliers.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 36, in test_only_outliers\n  File \"<bigcode>\", line 19, in task_func\n  File \"<__array_function__ internals>\", line 5, in percentile\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/numpy/lib/function_base.py\", line 3867, in percentile\n    return _quantile_unchecked(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/numpy/lib/function_base.py\", line 3986, in _quantile_unchecked\n    r, k = _ureduce(a, func=_quantile_ureduce_func, q=q, axis=axis, out=out,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/numpy/lib/function_base.py\", line 3564, in _ureduce\n    r = func(a, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/numpy/lib/function_base.py\", line 4098, in _quantile_ureduce_func\n    n = np.isnan(ap[-1])\nIndexError: index -1 is out of bounds for axis 0 with size 0\n\n======================================================================\nFAIL: test_custom_values (builtins.TestCases)\nTest the function with custom values.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_custom_values\nAssertionError: 0 != 10\n\n----------------------------------------------------------------------\nRan 5 tests in 0.107s\n\nFAILED (failures=1, errors=1)"}}
{"result": "```python\nimport requests\nimport logging\n\ndef task_func(repo_url: str) -> dict:\n    try:\n        response = requests.get(repo_url)\n        response.raise_for_status()\n    except requests.exceptions.HTTPError as http_err:\n        if response.status_code == 403:\n            # Check if the rate limit was exceeded\n            try:\n                error_data = response.json()\n                if 'rate limit' in error_data.get('message', '').lower():\n                    logging.error(\"GitHub API rate limit exceeded.\")\n                    raise\n            except Exception:\n                pass\n        raise\n    except requests.exceptions.RequestException:\n        raise\n\n    repo_data = response.json()\n    open_issues_count = repo_data.get('open_issues_count', 0)\n\n    if open_issues_count > 100:\n        logging.warning(f\"Warning: Repository has a large number of open issues: {open_issues_count}\")\n\n    return repo_data\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_api_rate_limit_exceeded (builtins.TestCases)\nTest task_func handling API rate limit exceeded error.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 40, in test_api_rate_limit_exceeded\nAssertionError: Exception not raised\n\n======================================================================\nFAIL: test_http_error (builtins.TestCases)\nTest task_func handling HTTP errors.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 53, in test_http_error\nAssertionError: '404 Client Error' not found in \"local variable 'response' referenced before assignment\"\n\n======================================================================\nFAIL: test_response_with_more_than_10000_issues (builtins.TestCases)\nTest task_func with a response indicating more than 10000 open issues.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 30, in test_response_with_more_than_10000_issues\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 941, in assert_called_once_with\n    return self.assert_called_with(*args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 929, in assert_called_with\n    raise AssertionError(_error_message()) from cause\nAssertionError: expected call not found.\nExpected: warning('The repository has more than 10000 open issues.')\nActual: warning('Warning: Repository has a large number of open issues: 15000')\n\n----------------------------------------------------------------------\nRan 5 tests in 0.006s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport warnings\nimport sqlite3\nimport pandas as pd\ndef task_func(db_path, query, warn_large_dataset=True):\n    try:\n        conn = sqlite3.connect(db_path)\n        df = pd.read_sql_query(query, conn)\n        conn.close()\n        if warn_large_dataset and len(df) > 10000:\n            warnings.warn(\"The data contains more than 10000 rows.\")\n        return df\n    except Exception as e:\n        raise Exception(f\"Error fetching data from the database: {e}\")\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_successful_query (builtins.TestCases)\nTest task_func function for successful query execution.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 23, in test_successful_query\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 929, in assert_called_with\n    raise AssertionError(_error_message()) from cause\nAssertionError: expected call not found.\nExpected: read_sql_query('SELECT * FROM table_name', <MagicMock name='connect().__enter__()' id='132643232962144'>)\nActual: read_sql_query('SELECT * FROM table_name', <MagicMock name='connect()' id='132649642463328'>)\n\n----------------------------------------------------------------------\nRan 5 tests in 0.019s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom typing import List\nfrom scipy.stats import chisquare\n\ndef task_func(data_dict) -> List[plt.Axes]:\n    df = data_dict['df']\n    axes_list = []\n    for col in df.columns:\n        counts = df[col].value_counts()\n        observed = counts.values\n        expected = [observed.sum()/len(observed)] * len(observed)\n        chi2, p = chisquare(observed, f_exp=expected)\n        ax = df[col].hist(bins=30, alpha=0.7)\n        axes_list.append(ax)\n        if p < 0.05:\n            print(f\"Column '{col}' does not have a uniform distribution (p={p:.4f}).\")\n    return axes_list\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_empty_dataframe (builtins.TestCases)\nTest for empty dataframe.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 39, in test_empty_dataframe\n  File \"<bigcode>\", line 8, in task_func\nKeyError: 'df'\n\n======================================================================\nERROR: test_multiple_categories (builtins.TestCases)\nTest for multiple categories.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 34, in test_multiple_categories\n  File \"<bigcode>\", line 8, in task_func\nKeyError: 'df'\n\n======================================================================\nERROR: test_non_uniform_distribution (builtins.TestCases)\nTest for non-uniform distribution.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 19, in test_non_uniform_distribution\n  File \"<bigcode>\", line 8, in task_func\nKeyError: 'df'\n\n======================================================================\nERROR: test_single_column (builtins.TestCases)\nTest for single column.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 26, in test_single_column\n  File \"<bigcode>\", line 8, in task_func\nKeyError: 'df'\n\n======================================================================\nERROR: test_uniform_distribution (builtins.TestCases)\nTest for uniform distribution.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 11, in test_uniform_distribution\n  File \"<bigcode>\", line 8, in task_func\nKeyError: 'df'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.001s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport pandas as pd\nfrom random import shuffle\n# Constants\nPOSSIBLE_VALUES = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"]\ndef task_func(list_of_lists):\n    result = []\n    for sublist in list_of_lists:\n        shuffled = POSSIBLE_VALUES[:]\n        shuffle(shuffled)\n        data = {col: shuffled for col in sublist}\n        df = pd.DataFrame(data)\n        result.append(df)\n    return result\n```", "match": {"category": "success"}}
{"result": "```python\nimport matplotlib.pyplot as plt\nfrom itertools import cycle\nimport numpy as np\nfrom random import shuffle\nCOLORS = [\"b\", \"g\", \"r\", \"c\", \"m\", \"y\", \"k\"]\ndef task_func(list_of_lists):\n    fig, ax = plt.subplots()\n    colors = cycle(COLORS)\n    for lst in list_of_lists:\n        if not lst:\n            continue\n        y = lst[:]\n        shuffle(y)\n        x = range(1, len(y) + 1)\n        ax.plot(x, y, color=next(colors))\n    return fig, ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_color_cycle (builtins.TestCases)\nCheck that the colors of the plotted lines follow the specified cycle.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 39, in test_color_cycle\nAssertionError: Lists differ: ['b', 'g', 'r', 'c', 'm', 'y', 'k', 'b'] != [(0.0, 0.0, 1.0, 1), (0.0, 0.5, 0.0, 1), ([119 chars], 1)]\n\nFirst differing element 0:\n'b'\n(0.0, 0.0, 1.0, 1)\n\n- ['b', 'g', 'r', 'c', 'm', 'y', 'k', 'b']\n+ [(0.0, 0.0, 1.0, 1),\n+  (0.0, 0.5, 0.0, 1),\n+  (1.0, 0.0, 0.0, 1),\n+  (0.0, 0.75, 0.75, 1),\n+  (0.75, 0.0, 0.75, 1),\n+  (0.75, 0.75, 0.0, 1),\n+  (0.0, 0.0, 0.0, 1),\n+  (0.0, 0.0, 1.0, 1)] : The colors of the plotted lines should follow the specified cycle.\n\n======================================================================\nFAIL: test_y_values (builtins.TestCases)\nCheck that the y-values are shuffled.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 49, in test_y_values\nAssertionError: False is not true : The y-values should be shuffled numbers from the range [1, len(list)].\n\n----------------------------------------------------------------------\nRan 5 tests in 0.095s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\ndef task_func(list_of_lists):\n    series_list = []\n    for sub_list in list_of_lists:\n        values = np.arange(1, len(sub_list) + 1)\n        np.random.shuffle(values)\n        series = pd.Series(values, index=sub_list)\n        series_list.append(series)\n    return series_list\n```", "match": {"category": "success"}}
{"result": "```python\nimport time\nimport matplotlib.pyplot as plt\n\ndef task_func(time_strings, time_format=\"%d/%m/%Y %H:%M:%S.%f\"):\n    seconds = []\n    try:\n        for tstr in time_strings:\n            parsed_time = time.strptime(tstr, time_format)\n            seconds.append(parsed_time.tm_sec)\n    except ValueError as e:\n        raise e\n        return None\n\n    fig, ax = plt.subplots()\n    ax.hist(seconds, bins=range(0, 61), edgecolor='black', align='left')\n    ax.set_xlabel('Seconds')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Histogram of Seconds Component')\n    ax.set_xticks(range(0, 60, 5))\n    ax.set_xlim(-0.5,59.5)\n    \n    return ax\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_invalid_time_format (builtins.TestCases)\nTest with an invalid time format.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 43, in test_invalid_time_format\n  File \"<bigcode>\", line 12, in task_func\n  File \"<bigcode>\", line 9, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/_strptime.py\", line 562, in _strptime_time\n    tt = _strptime(data_string, format)[0]\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/_strptime.py\", line 352, in _strptime\n    raise ValueError(\"unconverted data remains: %s\" %\nValueError: unconverted data remains: .123\n\n======================================================================\nFAIL: test_histogram_title (builtins.TestCases)\nTest the title of the histogram.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 21, in test_histogram_title\nAssertionError: 'Histogram of Seconds Component' != ''\n- Histogram of Seconds Component\n+ \n\n\n======================================================================\nFAIL: test_histogram_yaxis (builtins.TestCases)\nTest the y-axis label of the histogram.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 31, in test_histogram_yaxis\nAssertionError: 'Frequency' != ''\n- Frequency\n+ \n\n\n----------------------------------------------------------------------\nRan 6 tests in 0.259s\n\nFAILED (failures=2, errors=1)"}}
{"result": "```python\nimport pytz\nfrom dateutil.parser import parse\n# Constants\nTIME_FORMAT = \"%d/%m/%y %H:%M:%S.%f\"\n\ndef task_func(time_string, from_tz, to_tz):\n    # Parse the input time string into a naive datetime\n    dt_naive = parse(time_string)\n    \n    # Get timezone objects\n    tz_from = pytz.timezone(from_tz)\n    tz_to = pytz.timezone(to_tz)\n    \n    # Localize naive datetime to source timezone considering DST\n    dt_from = tz_from.localize(dt_naive, is_dst=None)\n    \n    # Convert time to target timezone\n    dt_to = dt_from.astimezone(tz_to)\n    \n    # Format output with milliseconds (3 digits of microseconds)\n    formatted = dt_to.strftime(TIME_FORMAT)\n    # Truncate microseconds to milliseconds (3 digits)\n    formatted = formatted[:-3]\n    return formatted\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_est_to_utc (builtins.TestCases)\nTest conversion from Eastern Standard Time to UTC.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 17, in test_est_to_utc\nAssertionError: '30/03/09 16:31:32.123' != '30/03/09 16:31:32.123000'\n- 30/03/09 16:31:32.123\n+ 30/03/09 16:31:32.123000\n?                      +++\n\n\n======================================================================\nFAIL: test_ist_to_utc (builtins.TestCases)\nTest conversion from Indian Standard Time to UTC.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 31, in test_ist_to_utc\nAssertionError: '04/01/09 00:00:00.000' != '01/04/09 00:00:00.000000'\n- 04/01/09 00:00:00.000\n?     ---\n+ 01/04/09 00:00:00.000000\n? +++                  +++\n\n\n======================================================================\nFAIL: test_utc_to_est (builtins.TestCases)\nTest conversion from UTC to Eastern Standard Time.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 10, in test_utc_to_est\nAssertionError: '30/03/09 12:31:32.123' != '30/03/09 12:31:32.123000'\n- 30/03/09 12:31:32.123\n+ 30/03/09 12:31:32.123000\n?                      +++\n\n\n======================================================================\nFAIL: test_utc_to_gmt (builtins.TestCases)\nTest conversion from UTC to GMT (should be the same).\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 38, in test_utc_to_gmt\nAssertionError: '15/04/09 10:30:00.000' != '15/04/09 10:30:00.000000'\n- 15/04/09 10:30:00.000\n+ 15/04/09 10:30:00.000000\n?                      +++\n\n\n======================================================================\nFAIL: test_utc_to_ist (builtins.TestCases)\nTest conversion from UTC to Indian Standard Time.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_utc_to_ist\nAssertionError: '04/01/09 05:30:00.000' != '01/04/09 05:30:00.000000'\n- 04/01/09 05:30:00.000\n?     ---\n+ 01/04/09 05:30:00.000000\n? +++                  +++\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.010s\n\nFAILED (failures=5)"}}
{"result": "```python\nimport datetime\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nTIME_FORMAT = \"%d/%m/%y %H:%M:%S.%f\"\ndef task_func(time_strings):\n    # Parse datetime strings to datetime objects\n    datetimes = [datetime.datetime.strptime(ts, TIME_FORMAT) for ts in time_strings]\n    # Compute differences in seconds as integers\n    diffs = [(datetimes[i+1] - datetimes[i]).total_seconds() for i in range(len(datetimes)-1)]\n    diffs = np.array(diffs, dtype=int)\n    # Plot bar chart\n    fig, ax = plt.subplots()\n    ax.bar(range(len(diffs)), diffs)\n    ax.set_xlabel(\"Interval Index\")\n    ax.set_ylabel(\"Difference (seconds)\")\n    ax.set_title(\"Differences Between Consecutive DateTimes\")\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nfrom datetime import datetime\nimport pandas as pd\n# For Python versions lower than 3.9, use 'pytz' instead of 'zoneinfo'\ntry:\n    from zoneinfo import ZoneInfo\nexcept ImportError:\n    from pytz import timezone as ZoneInfo\nTIME_FORMAT = \"%d/%m/%y %H:%M:%S.%f\"\ndef task_func(time_strings, target_tz):\n    utc_tz = ZoneInfo(\"UTC\")\n    target_zone = ZoneInfo(target_tz)\n    original_times = []\n    converted_times = []\n    for time_str in time_strings:\n        # Parse the string as a naive datetime object\n        dt_naive = datetime.strptime(time_str, TIME_FORMAT)\n        # Localize to UTC\n        dt_utc = dt_naive.replace(tzinfo=utc_tz)\n        # Convert to target timezone\n        dt_converted = dt_utc.astimezone(target_zone)\n        original_times.append(time_str)\n        converted_times.append(dt_converted.strftime(TIME_FORMAT))\n    return pd.DataFrame({'Original Time': original_times, 'Converted Time': converted_times})\n```", "match": {"category": "success"}}
{"result": "```python\nfrom datetime import datetime\nimport pytz\nimport numpy as np\ndef task_func(time_strings, timezone):\n    if len(time_strings) < 2:\n        return 0.0\n    \n    tz = pytz.timezone(timezone)\n    times = []\n    for ts in time_strings:\n        dt = datetime.fromisoformat(ts)\n        if dt.tzinfo is None:\n            dt = pytz.UTC.localize(dt)\n        dt_tz = dt.astimezone(tz)\n        times.append(dt_tz)\n    \n    diffs = []\n    for i in range(1, len(times)):\n        diff = abs((times[i] - times[i-1]).total_seconds())\n        diffs.append(diff)\n    if not diffs:\n        return 0.0\n    return float(np.mean(diffs))\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_different_timezones (builtins.TestCases)\nTest different timezones.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 19, in test_different_timezones\n  File \"<bigcode>\", line 12, in task_func\nValueError: Invalid isoformat string: '01/04/21 12:00:00.000'\n\n======================================================================\nERROR: test_example_case (builtins.TestCases)\nTest the example case.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 11, in test_example_case\n  File \"<bigcode>\", line 12, in task_func\nValueError: Invalid isoformat string: '30/03/09 16:31:32.123'\n\n======================================================================\nERROR: test_out_of_order_strings (builtins.TestCases)\nTest out of order strings.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 44, in test_out_of_order_strings\n  File \"<bigcode>\", line 12, in task_func\nValueError: Invalid isoformat string: '01/04/21 12:02:02.000'\n\n======================================================================\nERROR: test_span_across_days (builtins.TestCases)\nTest span across days.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 36, in test_span_across_days\n  File \"<bigcode>\", line 12, in task_func\nValueError: Invalid isoformat string: '31/03/21 23:59:00.000'\n\n======================================================================\nERROR: test_varying_differences (builtins.TestCases)\nTest varying differences.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_varying_differences\n  File \"<bigcode>\", line 12, in task_func\nValueError: Invalid isoformat string: '01/04/21 12:00:00.000'\n\n----------------------------------------------------------------------\nRan 6 tests in 0.012s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(arr):\n    unique, counts = np.unique(arr, return_counts=True)\n    uniform_distribution = np.all(counts == counts[0])\n    bins = np.arange(len(unique) + 1) - 0.5\n    fig, ax = plt.subplots()\n    ax.hist(arr, bins=bins, edgecolor='black')\n    ax.set_xticks(unique)\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Value Distribution Histogram')\n    return uniform_distribution, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    # Extract price strings and convert to float after removing commas\n    prices = [float(p.replace(',', '')) for p in data['Price_String']]\n    prices_array = np.array(prices)\n\n    # Calculate statistics\n    mean = np.mean(prices_array)\n    median = np.median(prices_array)\n    std_dev = np.std(prices_array, ddof=1)  # sample std dev\n\n    # Create histogram plot\n    fig, ax = plt.subplots()\n    ax.hist(prices_array, bins='auto', color='blue', alpha=0.7, rwidth=0.85)\n    ax.set_title('Histogram of Product Prices')\n    ax.set_xlabel('Price')\n    ax.set_ylabel('Frequency')\n\n    return {'mean': mean, 'median': median, 'std_dev': std_dev}, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nDATA = {\n    \"Area_String\": [\"1,000\", \"2,000\", \"3,000\", \"4,000\", \"5,000\"],\n    \"Price\": [100, 200, 300, 400, 500],\n}\ndef task_func(area_string, data=DATA):\n    df = pd.DataFrame(data)\n    # Remove commas and convert to int\n    df['Area'] = df['Area_String'].str.replace(',', '').astype(int)\n    X = df[['Area']]\n    y = df['Price']\n    model = LinearRegression()\n    model.fit(X, y)\n    # Convert input area_string to int\n    area_val = int(area_string.replace(',', ''))\n    pred = model.predict([[area_val]])\n    return float(pred[0])\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef task_func(data=None):\n    if data is None:\n        data = {\n            'Weight_String': ['70.5', '65.2', '80.1', '55.3', '90.4'],\n            'Height': [175, 168, 180, 160, 185]\n        }\n    # Validate Weight_String values are all strings\n    if not all(isinstance(w, str) for w in data['Weight_String']):\n        raise ValueError(\"All values in 'Weight_String' must be strings.\")\n    \n    # Convert Weight_String to floats\n    weights = [float(w) for w in data['Weight_String']]\n    \n    # Create DataFrame\n    df = pd.DataFrame({\n        'Weight': weights,\n        'Height': data['Height']\n    })\n    \n    # Plot scatter plot\n    ax = sns.scatterplot(data=df, x='Weight', y='Height')\n    ax.set_title(\"Weight vs Height\")\n    ax.set_xlabel(\"Weight\")\n    ax.set_ylabel(\"Height\")\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom scipy.stats import pearsonr\ndef task_func(data):\n    if len(data) < 2:\n        return float('nan')\n    # Convert scores from string to float\n    scores = data['scores'].astype(float)\n    # Define the rank order for grades and encode them\n    rank_order = ['F', 'D', 'C', 'B', 'A']\n    grade_map = {grade: i for i, grade in enumerate(rank_order)}\n    grades_encoded = data['grades'].map(grade_map)\n    # Handle missing or unknown grades by dropping them along with corresponding scores\n    valid = grades_encoded.notna() & scores.notna()\n    if valid.sum() < 2:\n        return float('nan')\n    corr, _ = pearsonr(scores[valid], grades_encoded[valid])\n    return corr\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_empty_input (builtins.TestCases)\nTest the function with empty input.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 17, in test_empty_input\n  File \"<bigcode>\", line 8, in task_func\nKeyError: 'scores'\n\n======================================================================\nERROR: test_invalid_score_format (builtins.TestCases)\nTest the function with invalid score format.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_invalid_score_format\n  File \"<bigcode>\", line 8, in task_func\nKeyError: 'scores'\n\n======================================================================\nERROR: test_mismatched_lengths (builtins.TestCases)\nTest the function with mismatched lengths of scores and grades.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 32, in test_mismatched_lengths\n  File \"<bigcode>\", line 8, in task_func\nKeyError: 'scores'\n\n======================================================================\nERROR: test_non_ordinal_grades (builtins.TestCases)\nTest the function with non-ordinal grade inputs.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 41, in test_non_ordinal_grades\n  File \"<bigcode>\", line 8, in task_func\nKeyError: 'scores'\n\n======================================================================\nERROR: test_normal_operation (builtins.TestCases)\nTest normal operation with valid input.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 10, in test_normal_operation\n  File \"<bigcode>\", line 8, in task_func\nKeyError: 'scores'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.001s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\n\ndef task_func(data):\n    required_keys = {'Salary_String', 'Experience'}\n    if not required_keys.issubset(data.keys()):\n        raise ValueError(f\"Input dictionary must contain keys: {required_keys}\")\n\n    df = pd.DataFrame(data)\n\n    fig, ax = plt.subplots()\n    ax.set_xlabel(\"Experience\")\n    ax.set_ylabel(\"Normalized Salary\")\n\n    if df.empty:\n        return ax\n\n    try:\n        df['Salary'] = df['Salary_String'].str.replace(',', '').astype(float)\n    except ValueError as e:\n        raise ValueError(\"Salary conversion from string to float failed.\") from e\n\n    scaler = MinMaxScaler()\n    df['Normalized_Salary'] = scaler.fit_transform(df[['Salary']])\n\n    ax.scatter(df['Experience'], df['Normalized_Salary'])\n    return ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy.stats import f_oneway\ndef task_func(data_file_path: str):\n    # Read CSV\n    df = pd.read_csv(data_file_path)\n\n    # Convert commas in strings to floats\n    def to_float(val):\n        if isinstance(val, str):\n            return float(val.replace(',', ''))\n        return float(val)\n\n    for col in df.columns:\n        df[col] = df[col].map(to_float)\n\n    # Calculate means and std devs\n    means = df.mean()\n    std_devs = df.std()\n\n    # Generate histograms\n    axes = []\n    for col in df.columns:\n        fig, ax = plt.subplots()\n        ax.hist(df[col], bins=20, edgecolor='black')\n        ax.set_title(f'Histogram of {col}')\n        ax.set_xlabel(col)\n        ax.set_ylabel('Frequency')\n        axes.append(ax)\n\n    # Perform ANOVA per pair of columns (if at least two columns)\n    anova_results = None\n    if len(df.columns) > 1:\n        pairs = []\n        f_values = []\n        p_values = []\n        cols = df.columns.tolist()\n        for i in range(len(cols)):\n            for j in range(i+1, len(cols)):\n                col1 = cols[i]\n                col2 = cols[j]\n                fval, pval = f_oneway(df[col1], df[col2])\n                pairs.append(f\"{col1} vs {col2}\")\n                f_values.append(fval)\n                p_values.append(pval)\n        anova_results = pd.DataFrame({\n            'Pair': pairs,\n            'F-value': f_values,\n            'P-value': p_values\n        })\n\n    return means, std_devs, axes, anova_results\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_multiple_columns (builtins.TestCases)\nTest the function with a CSV file having multiple numerical columns.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3653, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 147, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 176, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'ANOVA Results'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 39, in test_multiple_columns\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/frame.py\", line 3761, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/indexes/base.py\", line 3655, in get_loc\n    raise KeyError(key) from err\nKeyError: 'ANOVA Results'\n\n======================================================================\nERROR: test_numerical_and_non_numerical_columns (builtins.TestCases)\nTest the function with a mix of numerical and non-numerical columns.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 48, in test_numerical_and_non_numerical_columns\n  File \"<bigcode>\", line 16, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/series.py\", line 4397, in map\n    new_values = self._map_values(arg, na_action=na_action)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/pandas/core/base.py\", line 924, in _map_values\n    new_values = map_f(values, mapper)\n  File \"pandas/_libs/lib.pyx\", line 2834, in pandas._libs.lib.map_infer\n  File \"<bigcode>\", line 12, in to_float\nValueError: could not convert string to float: 'a'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.071s\n\nFAILED (errors=2)"}}
{"result": "```python\nimport re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n\ndef task_func(text):\n    # Lowercase the text\n    text = text.lower()\n    # Remove punctuation\n    text = re.sub(r'[^\\w\\s]', '', text)\n    # Split into words\n    words = text.split()\n    # Count word frequencies\n    counter = Counter(words)\n    # Get the 10 most common words\n    common = counter.most_common(10)\n    # Prepare data for plotting\n    words, counts = zip(*common) if common else ([], [])\n    # Create bar plot\n    fig, ax = plt.subplots()\n    ax.bar(words, counts)\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Top 10 Most Common Words')\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    return common, ax\n```", "match": {"category": "success"}}
{"result": "```python\nimport string\nimport random\nimport pandas as pd\nimport numpy as np\n# Constants\nNUM_SAMPLES = 1000  # Number of samples\ndef task_func():\n    # Generate random strings\n    strings = [''.join(random.choices(string.ascii_letters, k=10)) for _ in range(NUM_SAMPLES)]\n    # Generate random floats\n    floats = np.random.uniform(0, 10000, NUM_SAMPLES)\n    # Format floats with comma as thousands separator and two decimal places\n    floats_formatted = [f\"{x:,.2f}\" for x in floats]\n    # Create DataFrame\n    df = pd.DataFrame({\n        'String Field': strings,\n        'Float Field': floats_formatted\n    })\n    return df\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\ndef task_func(mean=123456.908, std_dev=1.2, save_plots=False):\n    # Generate random sample\n    sample = np.random.normal(loc=mean, scale=std_dev, size=1000)\n    \n    # Calculate skewness and kurtosis (Fisher's definition, subtracting 3)\n    skewness = stats.skew(sample)\n    kurtosis = stats.kurtosis(sample)  # excess kurtosis\n    \n    paths = []\n    if save_plots:\n        # Histogram\n        plt.figure(figsize=(8, 5))\n        plt.hist(sample, bins=30, color='skyblue', edgecolor='black', alpha=0.7)\n        plt.title('Histogram of Normal Sample')\n        plt.xlabel('Value')\n        plt.ylabel('Frequency')\n        hist_path = 'histogram.png'\n        plt.savefig(hist_path)\n        paths.append(hist_path)\n        plt.close()\n        \n        # QQ plot\n        plt.figure(figsize=(6, 6))\n        stats.probplot(sample, dist=\"norm\", plot=plt)\n        plt.title('QQ Plot')\n        qq_path = 'qqplot.png'\n        plt.savefig(qq_path)\n        paths.append(qq_path)\n        plt.close()\n    \n    return skewness, kurtosis, paths\n```", "match": {"category": "success"}}
{"result": "```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(data=None):\n    df = pd.DataFrame(data)\n    df = df.mask(df < 0.5, 0)\n    scaler = StandardScaler()\n    scaled_data = scaler.fit_transform(df)\n    return pd.DataFrame(scaled_data, columns=df.columns)\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_default_dataset (builtins.TestCases)\nTest the function with default dataset.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 9, in test_default_dataset\n  File \"<bigcode>\", line 9, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/utils/_set_output.py\", line 157, in wrapped\n    data_to_wrap = f(self, X, *args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 916, in fit_transform\n    return self.fit(X, **fit_params).transform(X)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/preprocessing/_data.py\", line 839, in fit\n    return self.partial_fit(X, y, sample_weight)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 1152, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/preprocessing/_data.py\", line 875, in partial_fit\n    X = self._validate_data(\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 605, in _validate_data\n    out = check_array(X, input_name=\"X\", **check_params)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 795, in check_array\n    dtype_orig = np.result_type(*dtypes_orig)\n  File \"<__array_function__ internals>\", line 5, in result_type\nValueError: at least one array or dtype is required\n\n----------------------------------------------------------------------\nRan 5 tests in 0.017s\n\nFAILED (errors=1)"}}
{"result": "```python\nimport numpy as np\nfrom collections import Counter\ndef task_func(list_of_tuples):\n    values = [t[0] for t in list_of_tuples]\n    categories = [t[1] for t in list_of_tuples]\n    total_sum = np.sum(values)\n    category_counts = Counter(categories)\n    return total_sum, dict(category_counts)\n```", "match": {"category": "success"}}
{"result": "```python\nimport ast\nimport json\nfrom collections import Counter\ndef task_func(file_pointer):\n    data = json.load(file_pointer)\n    counter = Counter()\n    \n    for item in data:\n        if isinstance(item, dict):\n            counter.update(item.keys())\n        elif isinstance(item, str):\n            try:\n                d = ast.literal_eval(item)\n                if isinstance(d, dict):\n                    counter.update(d.keys())\n            except (ValueError, SyntaxError):\n                continue\n    \n    return counter\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_invalid_json_structure (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 63, in test_invalid_json_structure\nAssertionError: SyntaxError not raised\n\n----------------------------------------------------------------------\nRan 8 tests in 0.002s\n\nFAILED (failures=1)"}}
{"result": "```python\nimport ast\nimport os\nimport glob\n# Constants\nDIRECTORY = 'data'\ndef task_func(directory):\n    dicts = []\n    files = glob.glob(os.path.join(directory, '*.txt'))\n    for file_path in files:\n        with open(file_path, 'r', encoding='utf-8') as f:\n            content = f.read()\n            try:\n                parsed = ast.literal_eval(content)\n                if not isinstance(parsed, dict):\n                    raise ValueError(f\"File {file_path} does not contain a dictionary.\")\n                dicts.append(parsed)\n            except (ValueError, SyntaxError) as e:\n                raise ValueError(f\"Invalid dictionary representation in file {file_path}: {e}\")\n    return dicts\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<bigcode>\", line 14, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/ast.py\", line 64, in literal_eval\n    node_or_string = parse(node_or_string.lstrip(\" \\t\"), mode='eval')\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/ast.py\", line 50, in parse\n    return compile(source, filename, mode, flags,\n  File \"<unknown>\", line 2\n    {'key2': 'value2'}\n    ^\nSyntaxError: invalid syntax\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"<string>\", line 79, in test_case_5\n  File \"<bigcode>\", line 19, in task_func\nValueError: Invalid dictionary representation in file testdir_task_func/multi_line_directory/1.txt: invalid syntax (<unknown>, line 2)\n\n----------------------------------------------------------------------\nRan 5 tests in 0.007s\n\nFAILED (errors=1)"}}
{"result": "```python\nimport ast\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef task_func(url):\n    try:\n        response = requests.get(url, timeout=10)\n        response.raise_for_status()\n    except (requests.RequestException, requests.Timeout):\n        return []\n    soup = BeautifulSoup(response.text, \"html.parser\")\n    dicts = []\n    for script in soup.find_all(\"script\"):\n        if script.string:\n            content = script.string.strip()\n            try:\n                obj = ast.literal_eval(content)\n                if isinstance(obj, dict):\n                    dicts.append(obj)\n            except (SyntaxError, ValueError):\n                continue\n    return dicts\n```", "match": {"category": "success"}}
{"result": "```python\nimport ast\nimport re\ndef task_func(text_file: str) -> list:\n    with open(text_file, 'r', encoding='utf-8') as f:\n        text = f.read()\n    pattern = r\"\\{(?:[^{}]|(?R))*\\}\"\n    matches = re.findall(pattern, text)\n    dicts = []\n    for match in matches:\n        try:\n            d = ast.literal_eval(match)\n            if isinstance(d, dict):\n                dicts.append(d)\n        except Exception:\n            continue\n    return dicts\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 29, in test_case_1\n  File \"<bigcode>\", line 8, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/re.py\", line 240, in findall\n    return _compile(pattern, flags).findall(string)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/re.py\", line 303, in _compile\n    p = sre_compile.compile(pattern, flags)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/sre_compile.py\", line 788, in compile\n    p = sre_parse.parse(p, flags)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/sre_parse.py\", line 955, in parse\n    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/sre_parse.py\", line 444, in _parse_sub\n    itemsappend(_parse(source, state, verbose, nested + 1,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/sre_parse.py\", line 841, in _parse\n    p = _parse_sub(source, state, sub_verbose, nested + 1)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/sre_parse.py\", line 444, in _parse_sub\n    itemsappend(_parse(source, state, verbose, nested + 1,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/sre_parse.py\", line 830, in _parse\n    raise source.error(\"unknown extension ?\" + char,\nre.error: unknown extension ?R at position 12\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 34, in test_case_2\n  File \"<bigcode>\", line 8, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/re.py\", line 240, in findall\n    return _compile(pattern, flags).findall(string)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/re.py\", line 303, in _compile\n    p = sre_compile.compile(pattern, flags)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/sre_compile.py\", line 788, in compile\n    p = sre_parse.parse(p, flags)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/sre_parse.py\", line 955, in parse\n    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/sre_parse.py\", line 444, in _parse_sub\n    itemsappend(_parse(source, state, verbose, nested + 1,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/sre_parse.py\", line 841, in _parse\n    p = _parse_sub(source, state, sub_verbose, nested + 1)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/sre_parse.py\", line 444, in _parse_sub\n    itemsappend(_parse(source, state, verbose, nested + 1,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/sre_parse.py\", line 830, in _parse\n    raise source.error(\"unknown extension ?\" + char,\nre.error: unknown extension ?R at position 12\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 39, in test_case_3\n  File \"<bigcode>\", line 8, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/re.py\", line 240, in findall\n    return _compile(pattern, flags).findall(string)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/re.py\", line 303, in _compile\n    p = sre_compile.compile(pattern, flags)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/sre_compile.py\", line 788, in compile\n    p = sre_parse.parse(p, flags)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/sre_parse.py\", line 955, in parse\n    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/sre_parse.py\", line 444, in _parse_sub\n    itemsappend(_parse(source, state, verbose, nested + 1,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/sre_parse.py\", line 841, in _parse\n    p = _parse_sub(source, state, sub_verbose, nested + 1)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/sre_parse.py\", line 444, in _parse_sub\n    itemsappend(_parse(source, state, verbose, nested + 1,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/sre_parse.py\", line 830, in _parse\n    raise source.error(\"unknown extension ?\" + char,\nre.error: unknown extension ?R at position 12\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 42, in test_case_4\n  File \"<bigcode>\", line 8, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/re.py\", line 240, in findall\n    return _compile(pattern, flags).findall(string)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/re.py\", line 303, in _compile\n    p = sre_compile.compile(pattern, flags)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/sre_compile.py\", line 788, in compile\n    p = sre_parse.parse(p, flags)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/sre_parse.py\", line 955, in parse\n    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/sre_parse.py\", line 444, in _parse_sub\n    itemsappend(_parse(source, state, verbose, nested + 1,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/sre_parse.py\", line 841, in _parse\n    p = _parse_sub(source, state, sub_verbose, nested + 1)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/sre_parse.py\", line 444, in _parse_sub\n    itemsappend(_parse(source, state, verbose, nested + 1,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/sre_parse.py\", line 830, in _parse\n    raise source.error(\"unknown extension ?\" + char,\nre.error: unknown extension ?R at position 12\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 45, in test_case_5\n  File \"<bigcode>\", line 8, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/re.py\", line 240, in findall\n    return _compile(pattern, flags).findall(string)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/re.py\", line 303, in _compile\n    p = sre_compile.compile(pattern, flags)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/sre_compile.py\", line 788, in compile\n    p = sre_parse.parse(p, flags)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/sre_parse.py\", line 955, in parse\n    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/sre_parse.py\", line 444, in _parse_sub\n    itemsappend(_parse(source, state, verbose, nested + 1,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/sre_parse.py\", line 841, in _parse\n    p = _parse_sub(source, state, sub_verbose, nested + 1)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/sre_parse.py\", line 444, in _parse_sub\n    itemsappend(_parse(source, state, verbose, nested + 1,\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/sre_parse.py\", line 830, in _parse\n    raise source.error(\"unknown extension ?\" + char,\nre.error: unknown extension ?R at position 12\n\n----------------------------------------------------------------------\nRan 5 tests in 0.005s\n\nFAILED (errors=5)"}}
{"result": "```python\nfrom nltk.tokenize import RegexpTokenizer\nfrom collections import Counter\ndef task_func(text):\n    tokenizer = RegexpTokenizer(r'\\$\\w+')\n    tokens = tokenizer.tokenize(text)\n    filtered_tokens = [token[1:] for token in tokens if len(token) > 1 and any(c.isalnum() for c in token[1:])]\n    counter = Counter(filtered_tokens)\n    return counter.most_common(5)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 22, in test_case_4\nAssertionError: Lists differ: [] != [('$$', 4)]\n\nSecond list contains 1 additional elements.\nFirst extra element 0:\n('$$', 4)\n\n- []\n+ [('$$', 4)]\n\n----------------------------------------------------------------------\nRan 5 tests in 0.001s\n\nFAILED (failures=1)"}}
{"result": "```python\nfrom nltk.tokenize import RegexpTokenizer\nfrom string import punctuation\nimport os\n\ndef task_func(text, output_filename):\n    tokenizer = RegexpTokenizer(r'\\S+')\n    tokens = tokenizer.tokenize(text)\n    filtered_words = []\n    for token in tokens:\n        if token.startswith('$'):\n            word_body = token[1:]\n            if word_body and any(ch.isalnum() for ch in word_body):\n                filtered_words.append(token)\n    with open(output_filename, 'w', encoding='utf-8') as f:\n        for word in filtered_words:\n            f.write(word + '\\n')\n    return os.path.abspath(output_filename)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 42, in test_case_3\nAssertionError: Lists differ: ['$abc$', '$def'] != ['$abc', '$def']\n\nFirst differing element 0:\n'$abc$'\n'$abc'\n\n- ['$abc$', '$def']\n?       -\n\n+ ['$abc', '$def']\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 52, in test_case_4\nAssertionError: Lists differ: ['$hello', '$world!', '$test.'] != ['$hello', '$world', '$test']\n\nFirst differing element 1:\n'$world!'\n'$world'\n\n- ['$hello', '$world!', '$test.']\n?                   -         -\n\n+ ['$hello', '$world', '$test']\n\n======================================================================\nFAIL: test_save_dollar_prefixed_words_to_file (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 80, in test_save_dollar_prefixed_words_to_file\nAssertionError: '$example\\n$valid\\n$!invalid\\n$1234\\n' != '$example\\n$valid\\n$1234\\n'\n  $example\n  $valid\n- $!invalid\n  $1234\n\n\n----------------------------------------------------------------------\nRan 6 tests in 0.003s\n\nFAILED (failures=3)"}}
{"result": "```python\nfrom nltk.tokenize import RegexpTokenizer\nfrom string import punctuation\nimport csv\nimport os\nPUNCTUATION = set(punctuation)\ndef task_func(text, filename):\n    tokenizer = RegexpTokenizer(r'\\S+')\n    words = tokenizer.tokenize(text)\n    filtered_words = []\n    for w in words:\n        if w.startswith('$'):\n            # Check if all chars after '$' are punctuation\n            if len(w) > 1 and not all(ch in PUNCTUATION for ch in w[1:]):\n                filtered_words.append(w)\n    abs_path = os.path.abspath(filename)\n    with open(abs_path, 'w', newline='', encoding='utf-8') as f:\n        writer = csv.writer(f)\n        writer.writerow(['Word'])\n        for word in filtered_words:\n            writer.writerow([word])\n    return abs_path\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nfrom string import punctuation\n# Predefined list of common stopwords\nPREDEFINED_STOPWORDS = {\n    \"i\", \"me\", \"my\", \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \"you\", \"your\", \"yours\", \n    \"yourself\", \"yourselves\", \"he\", \"him\", \"his\", \"himself\", \"she\", \"her\", \"hers\", \n    \"herself\", \"it\", \"its\", \"itself\", \"they\", \"them\", \"their\", \"theirs\", \"themselves\", \n    \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\", \"these\", \"those\", \"am\", \"is\", \"are\", \n    \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \"has\", \"had\", \"having\", \"do\", \"does\", \n    \"did\", \"doing\", \"a\", \"an\", \"the\", \"and\", \"but\", \"if\", \"or\", \"because\", \"as\", \"until\", \n    \"while\", \"of\", \"at\", \"by\", \"for\", \"with\", \"about\", \"against\", \"between\", \"into\", \n    \"through\", \"during\", \"before\", \"after\", \"above\", \"below\", \"to\", \"from\", \"up\", \"down\", \n    \"in\", \"out\", \"on\", \"off\", \"over\", \"under\", \"again\", \"further\", \"then\", \"once\", \"more\"\n}\ndef task_func(text):\n    # Remove URLs\n    text_no_urls = re.sub(r'https?://\\S+|www\\.\\S+', '', text)\n\n    # Remove punctuation\n    text_no_punct = text_no_urls.translate(str.maketrans('', '', punctuation))\n\n    # Tokenize and remove stopwords\n    tokens = text_no_punct.lower().split()\n    filtered_tokens = [word for word in tokens if word not in PREDEFINED_STOPWORDS]\n\n    return ' '.join(filtered_tokens)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 7, in test_case_1\nAssertionError: 'visit info love eat apples oranges' != 'Visit info love eat apples oranges'\n- visit info love eat apples oranges\n? ^\n+ Visit info love eat apples oranges\n? ^\n\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_case_2\nAssertionError: 'check also' != 'Check also'\n- check also\n? ^\n+ Check also\n? ^\n\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 17, in test_case_3\nAssertionError: 'hello world how today' != 'Hello world How today'\n- hello world how today\n? ^           ^\n+ Hello world How today\n? ^           ^\n\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 22, in test_case_4\nAssertionError: 'machine learning ai' != 'Machine learning AI'\n- machine learning ai\n? ^                ^^\n+ Machine learning AI\n? ^                ^^\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.003s\n\nFAILED (failures=4)"}}
{"result": "```python\nimport re\nfrom collections import Counter\ndef task_func(text, top_n):\n    # Remove URLs starting with http or https\n    text_no_urls = re.sub(r'https?://\\S+', '', text)\n    # Find words (consider words as sequences of alphanumeric characters and apostrophes)\n    words = re.findall(r\"\\b\\w+'\\w+|\\b\\w+\\b\", text_no_urls.lower())\n    # Count frequencies\n    counter = Counter(words)\n    # Return the top_n most common words with their counts\n    return counter.most_common(top_n)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 6, in test_case_1\nAssertionError: Lists differ: [('python', 2), ('is', 1)] != [('Python', 2), ('is', 1)]\n\nFirst differing element 0:\n('python', 2)\n('Python', 2)\n\n- [('python', 2), ('is', 1)]\n?    ^\n\n+ [('Python', 2), ('is', 1)]\n?    ^\n\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 10, in test_case_2\nAssertionError: Lists differ: [('python', 2), ('visit', 1)] != [('Python', 2), ('Visit', 1)]\n\nFirst differing element 0:\n('python', 2)\n('Python', 2)\n\n- [('python', 2), ('visit', 1)]\n?    ^              ^\n\n+ [('Python', 2), ('Visit', 1)]\n?    ^              ^\n\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 15, in test_case_3\nAssertionError: Lists differ: [('python', 2), ('visit', 1)] != [('Python', 2), ('Visit', 1)]\n\nFirst differing element 0:\n('python', 2)\n('Python', 2)\n\n- [('python', 2), ('visit', 1)]\n?    ^              ^\n\n+ [('Python', 2), ('Visit', 1)]\n?    ^              ^\n\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 23, in test_case_5\nAssertionError: Lists differ: [('hello', 1), ('world', 1)] != [('Hello', 1), ('world', 1)]\n\nFirst differing element 0:\n('hello', 1)\n('Hello', 1)\n\n- [('hello', 1), ('world', 1)]\n?    ^\n\n+ [('Hello', 1), ('world', 1)]\n?    ^\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.005s\n\nFAILED (failures=4)"}}
{"result": "```python\nimport re\nfrom collections import Counter\n# Predefined list of common stopwords\nPREDEFINED_STOPWORDS = {\n    \"i\", \"me\", \"my\", \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \"you\", \"your\", \"yours\", \n    \"yourself\", \"yourselves\", \"he\", \"him\", \"his\", \"himself\", \"she\", \"her\", \"hers\", \n    \"herself\", \"it\", \"its\", \"itself\", \"they\", \"them\", \"their\", \"theirs\", \"themselves\", \n    \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\", \"these\", \"those\", \"am\", \"is\", \"are\", \n    \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \"has\", \"had\", \"having\", \"do\", \"does\", \n    \"did\", \"doing\", \"a\", \"an\", \"the\", \"and\", \"but\", \"if\", \"or\", \"because\", \"as\", \"until\", \n    \"while\", \"of\", \"at\", \"by\", \"for\", \"with\", \"about\", \"against\", \"between\", \"into\", \n    \"through\", \"during\", \"before\", \"after\", \"above\", \"below\", \"to\", \"from\", \"up\", \"down\", \n    \"in\", \"out\", \"on\", \"off\", \"over\", \"under\", \"again\", \"further\", \"then\", \"once\", \"more\"\n}\ndef task_func(text):\n    # Remove URLs starting with http or https\n    text_no_url = re.sub(r\"https?://\\S+\", \"\", text)\n    # Split text into words (preserving original case)\n    words = re.findall(r\"\\b\\w+\\b\", text_no_url)\n    # Filter words that are in stopwords list (case-sensitive match)\n    stopword_counts = Counter(w for w in words if w in PREDEFINED_STOPWORDS)\n    # Convert to list of tuples\n    return list(stopword_counts.items())\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\ndef task_func(texts):\n    # Regular expression to remove URLs\n    url_pattern = re.compile(r'https?://\\S+|www\\.\\S+')\n\n    # Remove URLs from each document\n    cleaned_texts = [url_pattern.sub('', text) for text in texts]\n\n    # Create TF-IDF vectorizer\n    vectorizer = TfidfVectorizer()\n    tfidf_matrix = vectorizer.fit_transform(cleaned_texts)\n\n    # Get feature names (unique words)\n    features = vectorizer.get_feature_names_out()\n\n    # Convert tfidf_matrix to list of tuples rounded to 8 decimals\n    tfidf_scores = []\n    for row in tfidf_matrix.toarray():\n        rounded_scores = tuple(round(score, 8) for score in row)\n        tfidf_scores.append(rounded_scores)\n\n    return (tfidf_scores, list(features))\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 42, in test_case_5\n  File \"<bigcode>\", line 14, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/feature_extraction/text.py\", line 2139, in fit_transform\n    X = super().fit_transform(raw_documents)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/base.py\", line 1152, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/feature_extraction/text.py\", line 1389, in fit_transform\n    vocabulary, X = self._count_vocab(raw_documents, self.fixed_vocabulary_)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/site-packages/sklearn/feature_extraction/text.py\", line 1295, in _count_vocab\n    raise ValueError(\nValueError: empty vocabulary; perhaps the documents only contain stop words\n\n----------------------------------------------------------------------\nRan 5 tests in 0.011s\n\nFAILED (errors=1)"}}
{"result": "```python\nimport subprocess\nimport os\nimport glob\nimport time\ndef task_func(test_dir):\n    times = {}\n    py_files = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_file in py_files:\n        start = time.time()\n        try:\n            subprocess.run([\"python\", py_file], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n            elapsed = time.time() - start\n        except subprocess.CalledProcessError:\n            elapsed = None\n        times[os.path.basename(py_file)] = elapsed\n    return times\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 48, in test_case_1\nTypeError: '>=' not supported between instances of 'NoneType' and 'int'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.092s\n\nFAILED (errors=1)"}}
{"result": "```python\nimport subprocess\nimport shlex\nfrom datetime import datetime\ndef task_func(script_path: str) -> dict:\n    start_time = datetime.now()\n    cmd = f\"Rscript {shlex.quote(script_path)}\"\n    proc = subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    end_time = datetime.now()\n    return {\n        \"start_time\": start_time,\n        \"end_time\": end_time,\n        \"stdout\": proc.stdout.decode(\"utf-8\"),\n        \"stderr\": proc.stderr.decode(\"utf-8\"),\n    }\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 10, in test_case_1\n  File \"<bigcode>\", line 8, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/subprocess.py\", line 503, in run\n    with Popen(*popenargs, **kwargs) as process:\nAttributeError: __enter__\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 23, in test_case_2\n  File \"<bigcode>\", line 8, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/subprocess.py\", line 503, in run\n    with Popen(*popenargs, **kwargs) as process:\nAttributeError: __enter__\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 36, in test_case_3\n  File \"<bigcode>\", line 8, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/subprocess.py\", line 503, in run\n    with Popen(*popenargs, **kwargs) as process:\nAttributeError: __enter__\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 48, in test_case_4\n  File \"<bigcode>\", line 8, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/subprocess.py\", line 503, in run\n    with Popen(*popenargs, **kwargs) as process:\nAttributeError: __enter__\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 61, in test_case_5\n  File \"<bigcode>\", line 8, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/subprocess.py\", line 503, in run\n    with Popen(*popenargs, **kwargs) as process:\nAttributeError: __enter__\n\n----------------------------------------------------------------------\nRan 5 tests in 0.006s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport subprocess\nimport shutil\nimport os\ndef task_func(script_path: str, temp_dir: str) -> str:\n    try:\n        # Ensure temp_dir exists and is empty\n        if os.path.exists(temp_dir):\n            shutil.rmtree(temp_dir)\n        os.makedirs(temp_dir)\n        \n        # Copy the script to the temp_dir\n        script_name = os.path.basename(script_path)\n        temp_script_path = os.path.join(temp_dir, script_name)\n        shutil.copy(script_path, temp_script_path)\n        \n        # Run the script in temp_dir\n        result = subprocess.run(\n            ['python', script_name],\n            cwd=temp_dir,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            text=True\n        )\n        \n        if result.returncode == 0:\n            return \"Script executed successfully!\"\n        else:\n            return \"Script execution failed!\"\n    except Exception:\n        return \"Script execution failed!\"\n```", "match": {"category": "timeout", "error": "Test execution timed out after 10 seconds"}}
{"result": "```python\nimport subprocess\nimport os\nimport threading\ndef task_func(script_path: str, timeout: int = 60) -> str:\n    if not os.path.isfile(script_path):\n        raise FileNotFoundError(f\"No such file: '{script_path}'\")\n    proc = subprocess.Popen(['python', script_path])\n    timer = threading.Timer(timeout, proc.terminate)\n    timer.start()\n    proc.wait()\n    timer.cancel()\n    if proc.returncode == -15 or proc.returncode == -9:  # terminated by signal (15 is SIGTERM, 9 is SIGKILL)\n        return \"Terminating process due to timeout.\"\n    return \"Script executed successfully.\"\n```", "match": {"category": "timeout", "error": "Test execution timed out after 10 seconds"}}
{"result": "```python\nimport subprocess\nimport os\nimport time\nimport glob\ndef task_func(r_script_path: str, output_path: str, duration: int) -> (bool, str):\n    try:\n        # Start the R script\n        proc = subprocess.Popen(['Rscript', r_script_path], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    except Exception as e:\n        return (False, f\"Failed to start R script: {e}\")\n\n    start_time = time.time()\n    while time.time() - start_time < duration:\n        if os.path.exists(output_path):\n            return (True, 'File generated successfully within the specified duration.')\n        time.sleep(0.5)\n\n    # Optionally check one last time after waiting\n    if os.path.exists(output_path):\n        return (True, 'File generated successfully within the specified duration.')\n\n    return (False, 'File not generated within the specified duration.')\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 30, in test_case_1\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 38, in test_case_2\nAssertionError: \"Failed to start R script: [Errno 2] No such file or directory: 'Rscript'\" != 'File not generated within the specified duration.'\n- Failed to start R script: [Errno 2] No such file or directory: 'Rscript'\n+ File not generated within the specified duration.\n\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 46, in test_case_3\nAssertionError: \"Failed to start R script: [Errno 2] No such file or directory: 'Rscript'\" != 'File not generated within the specified duration.'\n- Failed to start R script: [Errno 2] No such file or directory: 'Rscript'\n+ File not generated within the specified duration.\n\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 56, in test_case_4\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 65, in test_case_5\nAssertionError: \"Failed to start R script: [Errno 2] No such file or directory: 'Rscript'\" != 'File not generated within the specified duration.'\n- Failed to start R script: [Errno 2] No such file or directory: 'Rscript'\n+ File not generated within the specified duration.\n\n\n----------------------------------------------------------------------\nRan 5 tests in 2.023s\n\nFAILED (failures=5)"}}
{"result": "```python\nfrom datetime import datetime\nimport os\nfrom pathlib import Path\n# Constants\nDATE_FORMAT = '%Y-%m-%d %H:%M:%S'\ndef task_func(file_path):\n    path = Path(file_path)\n    if not path.exists():\n        raise FileNotFoundError(f\"No such file: {file_path}\")\n    if os.name == 'nt':\n        # On Windows, use st_ctime as creation time\n        ctime = path.stat().st_ctime\n    else:\n        # On Unix, try to get birth_time if available, else fallback to st_ctime\n        stat = path.stat()\n        if hasattr(stat, 'st_birthtime'):\n            ctime = stat.st_birthtime\n        else:\n            ctime = stat.st_ctime\n    return datetime.fromtimestamp(ctime).strftime(DATE_FORMAT)\n```", "match": {"category": "success"}}
{"result": "```python\nfrom datetime import datetime\nimport pytz\n# Constants\nDATE_FORMAT = '%Y-%m-%d %H:%M:%S'\ndef task_func(unix_timestamp, target_timezone):\n    utc_dt = datetime.utcfromtimestamp(unix_timestamp).replace(tzinfo=pytz.utc)\n    target_tz = pytz.timezone(target_timezone)\n    target_dt = utc_dt.astimezone(target_tz)\n    return target_dt.strftime(DATE_FORMAT)\n```", "match": {"category": "success"}}
{"result": "```python\nfrom collections import Counter\nimport re\ndef task_func(result):\n    urls = [d.get('url') for d in result if 'url' in d]\n    counts = Counter(urls)\n    return dict(counts)\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 6, in test_case_1\nAssertionError: {} != {0: 2}\n- {}\n+ {0: 2}\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 10, in test_case_2\nAssertionError: {} != {2: 2}\n- {}\n+ {2: 2}\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 14, in test_case_3\nAssertionError: {} != {5: 1}\n- {}\n+ {5: 1}\n\n----------------------------------------------------------------------\nRan 5 tests in 0.002s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport os\nfrom nltk import word_tokenize\n\ndef task_func(file_path='File.txt'):\n    tokens = []\n    if os.path.exists(file_path):\n        with open(file_path, 'r', encoding='utf-8') as file:\n            for line in file:\n                tokens.extend(word_tokenize(line))\n    return tokens\n```", "match": {"category": "success"}}
{"result": "```python\nfrom collections import Counter\nfrom operator import itemgetter\nimport itertools\ndef task_func(word_dict):\n    return dict(Counter(itertools.chain.from_iterable(word_dict.keys())))\n```", "match": {"category": "success"}}
{"result": "```python\nfrom collections import Counter\nfrom operator import itemgetter\nimport itertools\n#CONSTANT\nANIMAL = ['cat', 'camel', 'cow', 'dog', 'elephant', 'fox', 'giraffe', 'hippo', 'iguana', 'jaguar']\ndef task_func(animal_dict):\n    filtered = {k:v for k,v in animal_dict.items() if k in ANIMAL}\n    letters = list(itertools.chain.from_iterable(filtered.values()))\n    freq = Counter(letters)\n    sorted_freq = dict(sorted(freq.items(), key=itemgetter(1), reverse=True))\n    return sorted_freq\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_case_1\nAssertionError: {'c': 1, 'd': 1, 'e': 1, 'f': 1} != {'c': 1, 'a': 2, 't': 2, 'd': 1, 'o': 2, 'g': 1, 'e[48 chars]': 1}\n- {'c': 1, 'd': 1, 'e': 1, 'f': 1}\n+ {'a': 2,\n+  'c': 1,\n+  'd': 1,\n+  'e': 2,\n+  'f': 1,\n+  'g': 1,\n+  'h': 1,\n+  'l': 1,\n+  'n': 1,\n+  'o': 2,\n+  'p': 1,\n+  't': 2,\n+  'x': 1}\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 18, in test_case_3\nAssertionError: {'c': 1} != {'c': 1, 'a': 1, 't': 1}\n- {'c': 1}\n+ {'a': 1, 'c': 1, 't': 1}\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 23, in test_case_4\nAssertionError: {'c': 3} != {'c': 3, 'a': 2, 't': 1, 'm': 1, 'e': 1, 'l': 1, 'o': 1, 'w': 1}\n- {'c': 3}\n+ {'a': 2, 'c': 3, 'e': 1, 'l': 1, 'm': 1, 'o': 1, 't': 1, 'w': 1}\n\n----------------------------------------------------------------------\nRan 5 tests in 0.004s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport csv\nimport random\nfrom datetime import datetime\n\n# Constants\nDATA = ['Temperature', 'Humidity', 'Pressure']\nRANGE = {\n    'Temperature': (-50, 50),\n    'Humidity': (0, 100),\n    'Pressure': (980, 1040)\n}\n\ndef task_func(file_name=\"data.csv\"):\n    hours = [f\"{h:02d}:00\" for h in range(24)]\n    with open(file_name, mode='w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        # Write header with hours\n        writer.writerow([''] + hours)\n        # Write data rows\n        for param in DATA:\n            row = [param]\n            low, high = RANGE[param]\n            for _ in hours:\n                if param == 'Humidity':\n                    val = random.randint(low, high)\n                else:\n                    val = round(random.uniform(low, high), 2)\n                row.append(val)\n            writer.writerow(row)\n    return file_name\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 33, in test_case_3\nAssertionError: Lists differ: ['', '00:00', '01:00', '02:00', '03:00', '0[172 chars]:00'] != ['Time', 'Temperature', 'Humidity', 'Pressure']\n\nFirst differing element 0:\n''\n'Time'\n\nFirst list contains 21 additional elements.\nFirst extra element 4:\n'03:00'\n\n+ ['Time', 'Temperature', 'Humidity', 'Pressure']\n- ['',\n-  '00:00',\n-  '01:00',\n-  '02:00',\n-  '03:00',\n-  '04:00',\n-  '05:00',\n-  '06:00',\n-  '07:00',\n-  '08:00',\n-  '09:00',\n-  '10:00',\n-  '11:00',\n-  '12:00',\n-  '13:00',\n-  '14:00',\n-  '15:00',\n-  '16:00',\n-  '17:00',\n-  '18:00',\n-  '19:00',\n-  '20:00',\n-  '21:00',\n-  '22:00',\n-  '23:00']\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 46, in test_case_4\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 55, in test_case_5\nAssertionError: 4 != 25\n\n----------------------------------------------------------------------\nRan 5 tests in 0.005s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport csv\nimport collections\ndef task_func(csv_file, emp_prefix='EMP$$'):\n    counter = collections.Counter()\n    with open(csv_file, newline='', encoding='utf-8') as f:\n        reader = csv.DictReader(f)\n        for row in reader:\n            for key, value in row.items():\n                if value.startswith(emp_prefix):\n                    counter[value] += 1\n    return dict(counter)\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 49, in test_case_3\n  File \"<bigcode>\", line 6, in task_func\nFileNotFoundError: [Errno 2] No such file or directory: '/path/to/non_existent_file.csv'\n\n======================================================================\nFAIL: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 41, in test_case_1\nAssertionError: {'EMP$$002': 3, 'EMP$$001': 4, 'EMP$$003': 1} != {'EMP$$001': 5, 'EMP$$002': 3, 'EMP$$003': 1}\n- {'EMP$$001': 4, 'EMP$$002': 3, 'EMP$$003': 1}\n?              ^\n\n+ {'EMP$$001': 5, 'EMP$$002': 3, 'EMP$$003': 1}\n?              ^\n\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 46, in test_case_2\nAssertionError: {'EMP$$005': 1, 'EMP$$004': 1, 'EMP$$006': 1} != {'EMP$$004': 2, 'EMP$$005': 1, 'EMP$$006': 1}\n- {'EMP$$004': 1, 'EMP$$005': 1, 'EMP$$006': 1}\n?              ^\n\n+ {'EMP$$004': 2, 'EMP$$005': 1, 'EMP$$006': 1}\n?              ^\n\n\n----------------------------------------------------------------------\nRan 5 tests in 0.005s\n\nFAILED (failures=2, errors=1)"}}
{"result": "```python\nfrom collections import defaultdict\nfrom random import randint\ndef task_func(dict1):\n    result = defaultdict(list)\n    for dept, employees in dict1.items():\n        if dept.startswith('EMP$$'):\n            salaries = [emp.get('salary', 0) for emp in employees]\n            result[dept].extend(salaries)\n    return dict(result)\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 7, in test_case_1\n  File \"<bigcode>\", line 8, in task_func\nTypeError: 'int' object is not iterable\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 17, in test_case_2\n  File \"<bigcode>\", line 8, in task_func\nTypeError: 'int' object is not iterable\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 30, in test_case_4\n  File \"<bigcode>\", line 8, in task_func\nTypeError: 'int' object is not iterable\n\n----------------------------------------------------------------------\nRan 5 tests in 0.001s\n\nFAILED (errors=3)"}}
{"result": "```python\nimport random\nfrom string import ascii_uppercase\ndef task_func(dict1):\n    ids = []\n    used = set()\n    for dept, count in dict1.items():\n        for _ in range(count):\n            while True:\n                rand_str = ''.join(random.choices(ascii_uppercase, k=5))\n                emp_id = dept + rand_str\n                if emp_id not in used:\n                    used.add(emp_id)\n                    ids.append(emp_id)\n                    break\n    return ids\n```", "match": {"category": "success"}}
{"result": "```python\nimport random\nimport statistics\n# Constants\nAGE_RANGE = (22, 60)\ndef task_func(dict1):\n    employees = dict1.get(\"EMP$$\", [])\n    n = len(employees)\n    if n == 0:\n        return (None, None, [])\n    ages = [random.randint(AGE_RANGE[0], AGE_RANGE[1]) for _ in employees]\n    mean_age = statistics.mean(ages)\n    median_age = statistics.median(ages)\n    try:\n        mode_age = statistics.mode(ages)\n        modes = [mode_age]\n    except statistics.StatisticsError:\n        # Multiple modes or no unique mode\n        freq = {}\n        for age in ages:\n            freq[age] = freq.get(age, 0) + 1\n        max_count = max(freq.values())\n        modes = [age for age, count in freq.items() if count == max_count]\n    return (mean_age, median_age, modes)\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 8, in test_case_1\n  File \"<bigcode>\", line 8, in task_func\nTypeError: object of type 'int' has no len()\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 19, in test_case_2\n  File \"<bigcode>\", line 8, in task_func\nTypeError: object of type 'int' has no len()\n\n======================================================================\nERROR: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 41, in test_case_4\n  File \"<bigcode>\", line 8, in task_func\nTypeError: object of type 'int' has no len()\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 52, in test_case_5\n  File \"<bigcode>\", line 8, in task_func\nTypeError: object of type 'int' has no len()\n\n======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 33, in test_case_3\nAssertionError: None != 0\n\n----------------------------------------------------------------------\nRan 5 tests in 0.001s\n\nFAILED (failures=1, errors=4)"}}
{"result": "```python\nimport collections\nimport random\nimport json\n# Constants\nPREFICES = ['EMP$$', 'MAN$$', 'DEV$$', 'HR$$']\nLEVELS = ['Junior', 'Mid', 'Senior']\n\ndef task_func(department_data):\n    \"\"\"\n    department_data: dict with keys as department codes (those in PREFICES)\n                     and values as integer counts of employees in that department.\n    Returns a JSON string where each department code maps to a list of employee levels,\n    randomly assigned.\n    \"\"\"\n    result = {}\n    for dept_code, count in department_data.items():\n        if dept_code in PREFICES and isinstance(count, int) and count > 0:\n            employees = [random.choice(LEVELS) for _ in range(count)]\n            result[dept_code] = employees\n        else:\n            # If dept_code not recognized or count invalid, assign empty list\n            result[dept_code] = []\n    return json.dumps(result)\n```", "match": {"category": "success"}}
{"result": "```python\nimport json\nimport csv\nimport requests\nfrom io import StringIO\n# Constants\nCSV_URL = 'https://example.com/data.csv'\nJSON_FILE = 'data.json'\ndef task_func(csv_url=CSV_URL, json_file_path=JSON_FILE):\n    # Download CSV content\n    response = requests.get(csv_url)\n    response.raise_for_status()\n\n    # Parse CSV content\n    csv_content = StringIO(response.text)\n    reader = csv.DictReader(csv_content)\n    data = list(reader)\n\n    # Write JSON file\n    with open(json_file_path, 'w', encoding='utf-8') as f:\n        json.dump(data, f, ensure_ascii=False, indent=4)\n    return json_file_path\n```", "match": {"category": "success"}}
{"result": "```python\nimport codecs\nimport random\nimport string\nimport hashlib\ndef task_func(password_length=10, salt=\"salty\"):\n    chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(chars) for _ in range(password_length))\n    mixed = salt + password + salt[::-1]\n    hashed = hashlib.sha256(mixed.encode()).hexdigest()\n    return hashed\n```", "match": {"category": "success"}}
{"result": "```python\nimport re\nimport urllib.parse\nimport requests\nimport json\n\ndef task_func(myString, API_KEY):\n    # Extract all URLs from the string\n    url_pattern = re.compile(r'https?://[^\\s\"\\']+')\n    urls = url_pattern.findall(myString)\n\n    # Extract domains from URLs\n    domains = set()\n    for url in urls:\n        parsed = urllib.parse.urlparse(url)\n        domain = parsed.netloc.lower()\n        # Remove port if present\n        if ':' in domain:\n            domain = domain.split(':')[0]\n        domains.add(domain)\n\n    # Query the IP API for each domain and return results in a dictionary\n    # Assuming the API is: http://ip-api.com/json/{domain}?key={API_KEY} (Note: ip-api.com doesn't require a key, but we follow instructions)\n    results = {}\n    for domain in domains:\n        try:\n            response = requests.get(f\"http://ip-api.com/json/{domain}?key={API_KEY}\", timeout=5)\n            if response.status_code == 200:\n                data = response.json()\n                results[domain] = data\n            else:\n                results[domain] = None\n        except Exception:\n            results[domain] = None\n\n    return results\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_api_failure_handling (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 72, in test_api_failure_handling\nAssertionError: Exception not raised\n\n======================================================================\nFAIL: test_repeated_urls (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 69, in test_repeated_urls\nAssertionError: 2 != 1\n\n----------------------------------------------------------------------\nRan 6 tests in 0.006s\n\nFAILED (failures=2)"}}
{"result": "```python\nimport re\nimport urllib.parse\nimport requests\nimport json\ndef task_func(myString, API_KEY):\n    # Extract URLs using regex\n    url_pattern = re.compile(\n        r'\\b((?:https?://|www\\d?\\.)[^\\s()<>]+(?:\\([\\w\\d]+\\)|([^[:punct:]\\s]|/)))',\n        re.IGNORECASE)\n    urls = url_pattern.findall(myString)\n    # urls is list of tuples; first element is the URL string\n    urls = [u[0] for u in urls]\n\n    # Extract unique domains\n    domains = set()\n    for url in urls:\n        if not url.lower().startswith(('http://', 'https://')):\n            url = 'http://' + url  # Add schema to parse properly\n        try:\n            parts = urllib.parse.urlparse(url)\n            domain = parts.hostname\n            if domain:\n                domains.add(domain.lower())\n        except Exception:\n            continue\n\n    # Query IP API for each domain\n    # API: http://ip-api.com/json/{query}?fields=status,country,regionName,city,... (limited free usage)\n    # But instructions say to use API_KEY so assuming the API key is to be put as a header or param.\n    # Using https://ipgeolocation.abstractapi.com/v1/?api_key=API_KEY&ip_address=domain\n    # As no specific IP API endpoint is given, we will assume the caller is using IP Geolocation from ip-api.com\n    # ip-api.com does not require API key but we will assume param added for generality.\n    # So request to: http://ip-api.com/json/{domain}\n\n    results = {}\n    for domain in domains:\n        url_api = f\"http://ip-api.com/json/{domain}\"\n        try:\n            resp = requests.get(url_api, timeout=5)\n            if resp.status_code == 200:\n                data = resp.json()\n                results[domain] = data\n            else:\n                results[domain] = None\n        except Exception:\n            results[domain] = None\n\n    return results\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_single_valid_url (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 52, in test_single_valid_url\nKeyError: 'www.google.com'\n\n======================================================================\nFAIL: test_api_failure_handling (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 72, in test_api_failure_handling\nAssertionError: Exception not raised\n\n======================================================================\nFAIL: test_multiple_valid_urls (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 56, in test_multiple_valid_urls\nAssertionError: 'www.python.org' not found in {}\n\n======================================================================\nFAIL: test_repeated_urls (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 69, in test_repeated_urls\nAssertionError: 0 != 1\n\n----------------------------------------------------------------------\nRan 6 tests in 0.006s\n\nFAILED (failures=3, errors=1)"}}
{"result": "```python\nimport re\nimport socket\nimport urllib.parse\ndef task_func(myString):\n    urls = re.findall(r'https?://[^\\s\"\\'>]+', myString)\n    domains = set()\n    for url in urls:\n        parsed = urllib.parse.urlparse(url)\n        if parsed.hostname:\n            domains.add(parsed.hostname)\n    result = {}\n    for domain in domains:\n        try:\n            ip = socket.gethostbyname(domain)\n            result[domain] = ip\n        except socket.gaierror:\n            result[domain] = None\n            raise\n    return result\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_6 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 36, in test_case_6\n  File \"<bigcode>\", line 15, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1114, in __call__\n    return self._mock_call(*args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1118, in _mock_call\n    return self._execute_mock_call(*args, **kwargs)\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1173, in _execute_mock_call\n    raise effect\nsocket.gaierror\n\n======================================================================\nFAIL: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 15, in test_case_2\nAssertionError: {'www.google.com,': '192.0.2.1', 'www.python.org': '192.0.2.2'} != {'www.google.com': '192.0.2.1', 'www.python.org': '192.0.2.2'}\n- {'www.google.com,': '192.0.2.1', 'www.python.org': '192.0.2.2'}\n?                 -\n\n+ {'www.google.com': '192.0.2.1', 'www.python.org': '192.0.2.2'}\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 31, in test_case_5\nAssertionError: {'www.google.com,': '192.0.2.1'} != {'www.google.com': '192.0.2.1'}\n- {'www.google.com,': '192.0.2.1'}\n?                 -\n\n+ {'www.google.com': '192.0.2.1'}\n\n----------------------------------------------------------------------\nRan 6 tests in 0.007s\n\nFAILED (failures=2, errors=1)"}}
{"result": "```python\nimport re\nimport urllib.parse\nimport ssl\nimport socket\ndef task_func(myString):\n    # Regex to find URLs (simplified, including http and https)\n    url_pattern = re.compile(r'https?://[^\\s\\'\"<>]+')\n    urls = url_pattern.findall(myString)\n    results = {}\n    for url in urls:\n        parsed = urllib.parse.urlparse(url)\n        if parsed.scheme.lower() != 'https':\n            continue\n        domain = parsed.hostname\n        if not domain:\n            continue\n        try:\n            # Connect and get SSL cert\n            context = ssl.create_default_context()\n            with socket.create_connection((domain, 443), timeout=5) as sock:\n                with context.wrap_socket(sock, server_hostname=domain) as ssock:\n                    cert = ssock.getpeercert()\n            # Extract expiry date (format: 'notAfter')\n            not_after_str = cert.get('notAfter')\n            if not not_after_str:\n                continue\n            # Parse date format: e.g. 'Jun  1 12:00:00 2024 GMT'\n            expiry = ssl.cert_time_to_seconds(not_after_str)\n            from datetime import datetime, timezone\n            expiry_dt = datetime.utcfromtimestamp(expiry).replace(tzinfo=timezone.utc)\n            results[domain] = expiry_dt.isoformat()\n        except (ssl.SSLError, ssl.CertificateError, socket.timeout, socket.error):\n            # Ignore SSL and socket errors\n            continue\n    return results\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_basic_https_functionality (builtins.TestCases)\nTest extracting SSL expiry from properly formatted HTTPS URLs.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/ssl.py\", line 1502, in cert_time_to_seconds\n    month_number = months.index(cert_time[:3].title()) + 1\nValueError: tuple.index(x): x not in tuple\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"<string>\", line 31, in test_basic_https_functionality\n  File \"<bigcode>\", line 29, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/ssl.py\", line 1504, in cert_time_to_seconds\n    raise ValueError('time data %r does not match '\nValueError: time data '2023-06-15 12:00:00' does not match format \"%b %d %H:%M:%S %Y GMT\"\n\n======================================================================\nERROR: test_https_with_ssl_errors (builtins.TestCases)\nTest multiple HTTPS URLs where one has SSL errors, expecting only the valid SSL data to be returned.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/ssl.py\", line 1502, in cert_time_to_seconds\n    month_number = months.index(cert_time[:3].title()) + 1\nValueError: tuple.index(x): x not in tuple\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"<string>\", line 63, in test_https_with_ssl_errors\n  File \"<bigcode>\", line 29, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/ssl.py\", line 1504, in cert_time_to_seconds\n    raise ValueError('time data %r does not match '\nValueError: time data '2023-07-20 12:00:00' does not match format \"%b %d %H:%M:%S %Y GMT\"\n\n======================================================================\nERROR: test_mixed_url_schemes (builtins.TestCases)\nTest input with mixed HTTP and HTTPS URLs; only HTTPS URLs are processed.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/ssl.py\", line 1502, in cert_time_to_seconds\n    month_number = months.index(cert_time[:3].title()) + 1\nValueError: tuple.index(x): x not in tuple\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"<string>\", line 50, in test_mixed_url_schemes\n  File \"<bigcode>\", line 29, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/ssl.py\", line 1504, in cert_time_to_seconds\n    raise ValueError('time data %r does not match '\nValueError: time data '2023-06-15 12:00:00' does not match format \"%b %d %H:%M:%S %Y GMT\"\n\n======================================================================\nERROR: test_urls_with_ports_and_queries (builtins.TestCases)\nTest HTTPS URLs that include port numbers and query strings.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/ssl.py\", line 1502, in cert_time_to_seconds\n    month_number = months.index(cert_time[:3].title()) + 1\nValueError: tuple.index(x): x not in tuple\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"<string>\", line 38, in test_urls_with_ports_and_queries\n  File \"<bigcode>\", line 29, in task_func\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/ssl.py\", line 1504, in cert_time_to_seconds\n    raise ValueError('time data %r does not match '\nValueError: time data '2023-06-15 12:00:00' does not match format \"%b %d %H:%M:%S %Y GMT\"\n\n----------------------------------------------------------------------\nRan 6 tests in 0.021s\n\nFAILED (errors=4)"}}
{"result": "```python\nimport re\nfrom urllib.parse import urlparse\nfrom bs4 import BeautifulSoup\nimport requests\n\ndef task_func(myString):\n    # Regex to find URLs (http or https)\n    url_pattern = re.compile(r'(https?://[^\\s]+)')\n    match = url_pattern.search(myString)\n    if not match:\n        return \"No valid URL found in the provided string.\"\n    \n    url = match.group(0)\n    # Validate URL structure\n    parsed = urlparse(url)\n    if not parsed.scheme or not parsed.netloc:\n        return \"No valid URL found in the provided string.\"\n    \n    try:\n        response = requests.get(url, timeout=10)\n        if response.status_code != 200:\n            return f\"Unable to fetch the content of the URL: {url}\"\n    except Exception:\n        return f\"Unable to fetch the content of the URL: {url}\"\n    \n    soup = BeautifulSoup(response.content, 'html.parser')\n    title_tag = soup.find('title')\n    if title_tag and title_tag.string:\n        return title_tag.string.strip()\n    else:\n        return \"No title tag found in the webpage.\"\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_multiple_urls_in_string (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 31, in test_multiple_urls_in_string\nAssertionError: 'Unable to fetch the content of the URL: https://www.google.com' != 'Google'\n- Unable to fetch the content of the URL: https://www.google.com\n+ Google\n\n\n======================================================================\nFAIL: test_url_with_no_title_tag (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 37, in test_url_with_no_title_tag\nAssertionError: 'Unable to fetch the content of the URL: https://www.notitle.com' != 'No title tag found in the webpage.'\n- Unable to fetch the content of the URL: https://www.notitle.com\n+ No title tag found in the webpage.\n\n\n======================================================================\nFAIL: test_valid_url_with_title (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 17, in test_valid_url_with_title\nAssertionError: 'Unable to fetch the content of the URL: https://www.google.com' != 'Google'\n- Unable to fetch the content of the URL: https://www.google.com\n+ Google\n\n\n----------------------------------------------------------------------\nRan 6 tests in 0.004s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport re\nimport json\nimport requests\ndef task_func(myString, token):\n    url_match = re.search(r'https?://[^\\s]+', myString)\n    if not url_match:\n        return {\"error\": \"No URL found in the input string.\"}\n    extracted_url = url_match.group(0)\n    api_url = \"https://api.example.com/endpoint\"  # Replace with the actual API endpoint URL\n    headers = {\n        \"Authorization\": f\"Bearer {token}\",\n        \"Content-Type\": \"application/json\"\n    }\n    payload = {\"url\": extracted_url}\n    response = requests.post(api_url, headers=headers, json=payload)\n    try:\n        return response.json()\n    except json.JSONDecodeError:\n        return {\"error\": \"Response is not in JSON format\", \"response_text\": response.text}\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 30, in test_case_3\nAssertionError: AttributeError not raised\n\n======================================================================\nFAIL: test_case_4 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 35, in test_case_4\nAssertionError: AttributeError not raised\n\n======================================================================\nFAIL: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 43, in test_case_5\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 929, in assert_called_with\n    raise AssertionError(_error_message()) from cause\nAssertionError: expected call not found.\nExpected: post('https://api.example.com/urls', headers={'Authorization': 'Bearer test_token_5'}, data='{\"url\": \"https://www.google.com\"}')\nActual: post('https://api.example.com/endpoint', headers={'Authorization': 'Bearer test_token_5', 'Content-Type': 'application/json'}, json={'url': 'https://www.google.com'})\n\n----------------------------------------------------------------------\nRan 7 tests in 0.006s\n\nFAILED (failures=3)"}}
{"result": "```python\nimport re\nimport hashlib\ndef task_func(input_str):\n    cleaned = re.sub(r'[^a-zA-Z0-9]', '', input_str)\n    return hashlib.sha256(cleaned.encode()).hexdigest()\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport re\nimport hashlib\ndef task_func(path, delimiter):\n    # Escape delimiter for regex if needed\n    esc_delim = re.escape(delimiter)\n    # Split path but keep delimiters\n    parts = re.split(f'({esc_delim})', path)\n    result = []\n    # Reconstruct parts with delimiters attached to preceding part except first if delimiter is a path separator\n    combined_parts = []\n    if delimiter in ['/', '\\\\']:\n        # Attach delimiter to preceding part except first if path starts without delimiter\n        temp = ''\n        for part in parts:\n            if part == delimiter:\n                temp += part\n            else:\n                if temp:\n                    combined_parts.append(temp + part)\n                    temp = ''\n                else:\n                    combined_parts.append(part)\n        if temp:\n            combined_parts.append(temp)\n    else:\n        # For other delimiters just alternate parts and delimiter separately, join pairs\n        combined_parts = []\n        for i in range(0,len(parts),2):\n            component = parts[i]\n            if (i+1) < len(parts):\n                component += parts[i+1]\n            combined_parts.append(component)\n\n    for component in combined_parts:\n        # Strip trailing delimiters for file check\n        comp_stripped = component.rstrip(delimiter)\n        if os.path.isfile(comp_stripped):\n            # Compute hash of file contents\n            h = hashlib.sha256()\n            try:\n                with open(comp_stripped, 'rb') as f:\n                    for chunk in iter(lambda: f.read(8192), b''):\n                        h.update(chunk)\n                result.append((component, h.hexdigest()))\n            except Exception:\n                # If file can't be read, treat hash as None\n                result.append((component, None))\n        else:\n            result.append((component, None))\n    return result\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_complex_path_with_no_files (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 33, in test_complex_path_with_no_files\nAssertionError: Lists differ: [('Dir1', None), ('/file1', None), ('/Dir2', None), ('/file2.txt', None)] != [('Dir1', None), ('/', None), ('file1', None), ('/', None), ([43 chars]one)]\n\nFirst differing element 1:\n('/file1', None)\n('/', None)\n\nSecond list contains 3 additional elements.\nFirst extra element 4:\n('Dir2', None)\n\n- [('Dir1', None), ('/file1', None), ('/Dir2', None), ('/file2.txt', None)]\n+ [('Dir1', None),\n+  ('/', None),\n+  ('file1', None),\n+  ('/', None),\n+  ('Dir2', None),\n+  ('/', None),\n+  ('file2.txt', None)]\n\n======================================================================\nFAIL: test_empty_path (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 43, in test_empty_path\nAssertionError: Lists differ: [('', None)] != []\n\nFirst list contains 1 additional elements.\nFirst extra element 0:\n('', None)\n\n- [('', None)]\n+ []\n\n======================================================================\nFAIL: test_path_with_existing_files (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 53, in test_path_with_existing_files\nAssertionError: Lists differ: [('/t[19 chars]1.txt####', 'a591a6d40bf420404a011733cfb7b190d[129 chars]e7')] != [('/t[19 chars]1.txt', 'a591a6d40bf420404a011733cfb7b190d62c6[141 chars]e7')]\n\nFirst differing element 0:\n('/tm[18 chars]1.txt####', 'a591a6d40bf420404a011733cfb7b190d[28 chars]46e')\n('/tm[18 chars]1.txt', 'a591a6d40bf420404a011733cfb7b190d62c6[24 chars]46e')\n\nSecond list contains 1 additional elements.\nFirst extra element 2:\n('/tmp/tmp687475vz/file2.txt', 'c96724127af2d6f56bbc3898632b101167242f02519a99e5ab3f1cab9ff995e7')\n\n- [('/tmp/tmp687475vz/file1.txt####',\n?                              ----\n\n+ [('/tmp/tmp687475vz/file1.txt',\n    'a591a6d40bf420404a011733cfb7b190d62c65bf0bcda32b57b277d9ad9f146e'),\n+  ('####', None),\n   ('/tmp/tmp687475vz/file2.txt',\n    'c96724127af2d6f56bbc3898632b101167242f02519a99e5ab3f1cab9ff995e7')]\n\n======================================================================\nFAIL: test_path_with_file_but_no_hashing (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_path_with_file_but_no_hashing\nAssertionError: Lists differ: [('Docs', None), ('/src', None), ('/file.txt', None)] != [('Docs', None), ('/', None), ('src', None), ('/', None), ('file.txt', None)]\n\nFirst differing element 1:\n('/src', None)\n('/', None)\n\nSecond list contains 2 additional elements.\nFirst extra element 3:\n('/', None)\n\n- [('Docs', None), ('/src', None), ('/file.txt', None)]\n?                     ---\n\n+ [('Docs', None), ('/', None), ('src', None), ('/', None), ('file.txt', None)]\n?                               +++++++++++++++   ++++++++++++\n\n\n======================================================================\nFAIL: test_path_with_non_standard_delimiter (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 38, in test_path_with_non_standard_delimiter\nAssertionError: Lists differ: [('Dir1-', None), ('file1-', None), ('/tmp/tmp8z[104 chars]one)] != [('Dir1', None), ('-', None), ('file1', None), ([140 chars]one)]\n\nFirst differing element 0:\n('Dir1-', None)\n('Dir1', None)\n\nSecond list contains 3 additional elements.\nFirst extra element 4:\n('/tmp/tmp8zch_5zu/file1.txt', 'a591a6d40bf420404a011733cfb7b190d62c65bf0bcda32b57b277d9ad9f146e')\n\n- [('Dir1-', None),\n?        -\n\n+ [('Dir1', None),\n+  ('-', None),\n-  ('file1-', None),\n?         -\n\n+  ('file1', None),\n+  ('-', None),\n-  ('/tmp/tmp8zch_5zu/file1.txt-',\n?                              -\n\n+  ('/tmp/tmp8zch_5zu/file1.txt',\n    'a591a6d40bf420404a011733cfb7b190d62c65bf0bcda32b57b277d9ad9f146e'),\n+  ('-', None),\n   ('file2.txt', None)]\n\n======================================================================\nFAIL: test_simple_path_without_files (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 23, in test_simple_path_without_files\nAssertionError: Lists differ: [('Docs', None), ('/src', None), ('/', None)] != [('Docs', None), ('/', None), ('src', None), ('/', None)]\n\nFirst differing element 1:\n('/src', None)\n('/', None)\n\nSecond list contains 1 additional elements.\nFirst extra element 3:\n('/', None)\n\n- [('Docs', None), ('/src', None), ('/', None)]\n?                     ---\n\n+ [('Docs', None), ('/', None), ('src', None), ('/', None)]\n?                               +++++++++++++++\n\n\n----------------------------------------------------------------------\nRan 6 tests in 0.008s\n\nFAILED (failures=6)"}}
{"result": "```python\nimport json\nimport os\nimport hashlib\nimport base64\nimport time\ndef task_func(file_path, unknown_key):\n    with open(file_path, 'r', encoding='utf-8') as f:\n        data = json.load(f)\n    value = data['A'][unknown_key]['maindata'][0]['Info']\n    sha256_hash = hashlib.sha256(value.encode('utf-8')).digest()\n    b64_hash = base64.b64encode(sha256_hash).decode('utf-8')\n    timestamp = int(time.time())\n    dir_path = os.path.abspath(os.path.dirname(file_path))\n    out_file = os.path.join(dir_path, f\"hash_{timestamp}.txt\")\n    with open(out_file, 'w', encoding='utf-8') as f:\n        f.write(b64_hash)\n    return out_file\n```", "match": {"category": "success"}}
{"result": "```python\nimport json\nimport requests\nimport os\nfrom datetime import datetime\ndef task_func(json_data, unknown_key, save_dir=None):\n    data = json.loads(json_data)\n    url = data.get(unknown_key)\n    if not url:\n        raise ValueError(f\"Key '{unknown_key}' not found or has no associated URL in the JSON data.\")\n    if save_dir is None:\n        save_dir = os.getcwd()\n    os.makedirs(save_dir, exist_ok=True)\n    timestamp = datetime.now().strftime('%Y%m%d%H%M%S%f')\n    filename = f\"{unknown_key}_{timestamp}.txt\"\n    filepath = os.path.join(save_dir, filename)\n    response = requests.get(url)\n    response.raise_for_status()\n    with open(filepath, 'wb') as f:\n        f.write(response.content)\n    return os.path.abspath(filepath)\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_download_to_default_directory (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 47, in test_download_to_default_directory\n  File \"<bigcode>\", line 18, in task_func\nAttributeError: 'MockResponse' object has no attribute 'raise_for_status'\n\n======================================================================\nERROR: test_download_with_direct_key (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 22, in test_download_with_direct_key\n  File \"<bigcode>\", line 18, in task_func\nAttributeError: 'MockResponse' object has no attribute 'raise_for_status'\n\n======================================================================\nERROR: test_download_with_incorrect_key (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 32, in test_download_with_incorrect_key\n  File \"<bigcode>\", line 10, in task_func\nValueError: Key 'nonexistent' not found or has no associated URL in the JSON data.\n\n======================================================================\nERROR: test_download_with_specified_directory (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 38, in test_download_with_specified_directory\n  File \"<bigcode>\", line 18, in task_func\nAttributeError: 'MockResponse' object has no attribute 'raise_for_status'\n\n======================================================================\nERROR: test_multiple_downloads (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 58, in test_multiple_downloads\n  File \"<bigcode>\", line 18, in task_func\nAttributeError: 'MockResponse' object has no attribute 'raise_for_status'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.006s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport os\nimport hashlib\nimport json\nfrom pathlib import Path\ndef task_func(directory: str) -> str:\n    directory_path = Path(directory).resolve()\n    hashes = {}\n    for root, _, files in os.walk(directory_path):\n        for file in files:\n            file_path = Path(root) / file\n            hasher = hashlib.sha256()\n            try:\n                with open(file_path, \"rb\") as f:\n                    for chunk in iter(lambda: f.read(8192), b\"\"):\n                        hasher.update(chunk)\n                rel_path = file_path.relative_to(directory_path).as_posix()\n                hashes[rel_path] = hasher.hexdigest()\n            except Exception:\n                continue\n    output_file = directory_path / \"hashes.json\"\n    with open(output_file, \"w\", encoding=\"utf-8\") as f:\n        json.dump(hashes, f, indent=4)\n    return str(output_file)\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_correct_hash (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 75, in test_correct_hash\nKeyError: '/tmp/tmpor43vzix/file5.txt'\n\n======================================================================\nFAIL: test_multiple_files (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 50, in test_multiple_files\nAssertionError: '/tmp/tmp5_5_ude9/file2.txt' not found in dict_keys(['file2.txt', 'file3.txt'])\n\n======================================================================\nFAIL: test_nested_directories (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 62, in test_nested_directories\nAssertionError: '/tmp/tmpdbf7endq/sub_dir/file4.txt' not found in dict_keys(['sub_dir/file4.txt'])\n\n======================================================================\nFAIL: test_single_file (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 35, in test_single_file\nAssertionError: '/tmp/tmp6st9n1z7/file1.txt' not found in dict_keys(['file1.txt'])\n\n----------------------------------------------------------------------\nRan 5 tests in 0.005s\n\nFAILED (failures=3, errors=1)"}}
{"result": "```python\nimport hashlib\nimport binascii\ndef task_func(salt, cursor):\n    if not isinstance(salt, str):\n        raise TypeError(\"Salt must be a string\")\n    cursor.execute(\"SELECT id, password FROM user\")\n    rows = cursor.fetchall()\n    count = 0\n    for user_id, password in rows:\n        # Hash the password with the given salt using SHA256\n        to_hash = (password + salt).encode('utf-8')\n        hashed = hashlib.sha256(to_hash).hexdigest()\n        cursor.execute(\"UPDATE user SET password = ? WHERE id = ?\", (hashed, user_id))\n        count += 1\n    return count\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_empty_database (builtins.TestCases)\nCheck behavior with an empty user table.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 57, in test_empty_database\n  File \"<bigcode>\", line 7, in task_func\nsqlite3.OperationalError: no such table: user\n\n======================================================================\nERROR: test_hash_correctness (builtins.TestCases)\nVerify that hash correctness.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 30, in test_hash_correctness\n  File \"<bigcode>\", line 7, in task_func\nsqlite3.OperationalError: no such table: user\n\n======================================================================\nERROR: test_the_password_len_and_type (builtins.TestCases)\nVerify that hash type and len.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 48, in test_the_password_len_and_type\n  File \"<bigcode>\", line 7, in task_func\nsqlite3.OperationalError: no such table: user\n\n======================================================================\nERROR: test_updated_passwords (builtins.TestCases)\nVerify that the number of updated passwords matches the number of users.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 25, in test_updated_passwords\n  File \"<bigcode>\", line 7, in task_func\nsqlite3.OperationalError: no such table: user\n\n======================================================================\nERROR: test_varied_salts (builtins.TestCases)\nEnsure different salts produce different hashes for the same password.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 64, in test_varied_salts\n  File \"<bigcode>\", line 7, in task_func\nsqlite3.OperationalError: no such table: user\n\n----------------------------------------------------------------------\nRan 6 tests in 0.003s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport os\nimport hashlib\nimport base64\ndef task_func(password, PREFIX=\"ME\", SALT_LENGTH=16):\n    if SALT_LENGTH < 0:\n        raise ValueError(\"SALT_LENGTH cannot be negative\")\n    salt = os.urandom(SALT_LENGTH)\n    combined = (PREFIX + password).encode() + salt\n    hash_digest = hashlib.sha256(combined).digest()\n    return base64.b64encode(hash_digest).decode()\n```", "match": {"category": "test_failure", "error": "======================================================================\nFAIL: test_deterministic_output_with_fixed_salt (builtins.TestCases)\nVerify that the same salt and input always produces the same hash\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 79, in test_deterministic_output_with_fixed_salt\nAssertionError: 'HpsTNjX6EZqiGo6wC/XN+2vNJNfIhBvOGp8F8AkBhbQ=' != 'aO4uv7LG2VDNU60XGvUJnTfoq/ocFHQgvHq/KBUmAus='\n- HpsTNjX6EZqiGo6wC/XN+2vNJNfIhBvOGp8F8AkBhbQ=\n+ aO4uv7LG2VDNU60XGvUJnTfoq/ocFHQgvHq/KBUmAus=\n\n\n======================================================================\nFAIL: test_empty_password (builtins.TestCases)\nTest hashing an empty string\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 47, in test_empty_password\nAssertionError: 'd8IOOSky8JX26aoePtSfqL7SSeCXekpJvtyvbLm2voU=' != '9AqqcQhEF+LTOE5dH8MeWZ/LoxNo0FV22w+vylb4Sto='\n- d8IOOSky8JX26aoePtSfqL7SSeCXekpJvtyvbLm2voU=\n+ 9AqqcQhEF+LTOE5dH8MeWZ/LoxNo0FV22w+vylb4Sto=\n\n\n======================================================================\nFAIL: test_long_password (builtins.TestCases)\nTest with an unusually long password\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 61, in test_long_password\nAssertionError: 'O7tqKRTkwthh9IdSt/Xt7uYQGPjmNUngbLDB8Q+KK6I=' != 'CG9Xg2uIVzk0jAF184OE0DnGljdWasmECP5nSD29Op4='\n- O7tqKRTkwthh9IdSt/Xt7uYQGPjmNUngbLDB8Q+KK6I=\n+ CG9Xg2uIVzk0jAF184OE0DnGljdWasmECP5nSD29Op4=\n\n\n======================================================================\nFAIL: test_special_characters_in_password (builtins.TestCases)\nTest passwords that include special characters\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 54, in test_special_characters_in_password\nAssertionError: 'FFqkl4bcXjToqLK8hsokX14e/KaudMia7vvPrr3J4KM=' != 'tvohx6XTROez0q3g4CfgFoTFSdKzY8cIyVrnCc1XcHw='\n- FFqkl4bcXjToqLK8hsokX14e/KaudMia7vvPrr3J4KM=\n+ tvohx6XTROez0q3g4CfgFoTFSdKzY8cIyVrnCc1XcHw=\n\n\n----------------------------------------------------------------------\nRan 9 tests in 0.007s\n\nFAILED (failures=4)"}}
{"result": "```python\nimport json\nimport requests\ndef task_func(API_URL, endpoint, PREFIX):\n    try:\n        response = requests.get(f\"{API_URL}/{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n        filename = f\"{PREFIX}{endpoint}.json\"\n        with open(filename, 'w', encoding='utf-8') as f:\n            json.dump(data, f, ensure_ascii=False, indent=4)\n        return filename\n    except Exception as e:\n        raise RuntimeError(\"Error fetching data or writing to file\") from e\n```", "match": {"category": "success"}}
{"result": "```python\nimport os\nimport glob\nimport hashlib\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    os.makedirs(target_dir, exist_ok=True)\n    created_files = []\n    for filepath in glob.glob(os.path.join(source_dir, '*')):\n        if os.path.isfile(filepath):\n            with open(filepath, 'rb') as f:\n                content = f.read()\n            md5_hash = hashlib.md5(content).hexdigest()\n            new_content = (prefix + md5_hash + '\\n').encode() + content\n            target_path = os.path.join(target_dir, os.path.basename(filepath))\n            with open(target_path, 'wb') as f:\n                f.write(new_content)\n            created_files.append(target_path)\n    return created_files\n```", "match": {"category": "success"}}
{"result": "```python\nimport collections\nimport json\nimport requests\ndef task_func(user, API_URL = 'https://api.github.com/users/'):\n    url = f\"{API_URL}{user}/repos\"\n    repos = []\n    page = 1\n    while True:\n        response = requests.get(url, params={'page': page, 'per_page': 100})\n        if response.status_code != 200:\n            break\n        data = response.json()\n        if not data:\n            break\n        for repo in data:\n            repos.append((repo['name'], repo['created_at']))\n        page += 1\n    repos.sort(key=lambda x: x[1])\n    return [name for name, _ in repos]\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_case_1 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 18, in test_case_1\n  File \"<bigcode>\", line 16, in task_func\nTypeError: 'Mock' object is not iterable\n\n======================================================================\nERROR: test_case_2 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 24, in test_case_2\n  File \"<bigcode>\", line 16, in task_func\nTypeError: 'Mock' object is not iterable\n\n======================================================================\nERROR: test_case_3 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 30, in test_case_3\n  File \"<bigcode>\", line 16, in task_func\nTypeError: 'Mock' object is not iterable\n\n======================================================================\nERROR: test_case_5 (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/yewei/miniconda3/envs/llm/lib/python3.10/unittest/mock.py\", line 1379, in patched\n    return func(*newargs, **newkeywargs)\n  File \"<string>\", line 42, in test_case_5\n  File \"<bigcode>\", line 16, in task_func\nTypeError: 'Mock' object is not iterable\n\n----------------------------------------------------------------------\nRan 5 tests in 0.007s\n\nFAILED (errors=4)"}}
{"result": "```python\nimport bs4\nimport requests\nimport re\nimport csv\ndef task_func(url=\"http://example.com\", csv_path=\"emails.csv\", \n          regex=r\"\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,7}\\b\", \n          headers={'User-Agent': 'Mozilla/5.0'}):\n    response = requests.get(url, headers=headers)\n    response.raise_for_status()\n    soup = bs4.BeautifulSoup(response.text, 'html.parser')\n    text = soup.get_text()\n    emails = re.findall(regex, text)\n    emails = list(set(emails))\n    with open(csv_path, 'w', newline='', encoding='utf-8') as f:\n        writer = csv.writer(f)\n        writer.writerow([\"Emails\"])\n        for email in emails:\n            writer.writerow([email])\n    return csv_path\n```", "match": {"category": "success"}}
{"result": "```python\nimport bs4\nimport requests\nimport re\nimport json\n\ndef task_func(url: str, output_path: str) -> list:\n    if url.startswith(('http://', 'https://')):\n        response = requests.get(url)\n        content = response.text\n    else:\n        with open(url, 'r', encoding='utf-8') as f:\n            content = f.read()\n\n    soup = bs4.BeautifulSoup(content, 'html.parser')\n    text = soup.get_text(separator=' ')\n\n    # Regex pattern to match common phone number formats\n    phone_pattern = re.compile(\n        r'(\\+?\\d{1,3}[-.\\s]?)?'\n        r'(\\(?\\d{3}\\)?[-.\\s]?)?'\n        r'\\d{3}[-.\\s]?\\d{4}'\n    )\n\n    matches = phone_pattern.findall(text)\n    # Flatten tuples and join parts to reconstruct numbers\n    phone_numbers = []\n    for match in matches:\n        number = ''.join(match)\n        number = re.sub(r'[\\s-().]', '', number)\n        if number:\n            phone_numbers.append(number)\n    # Deduplicate while preserving order\n    seen = set()\n    phone_numbers = [x for x in phone_numbers if not (x in seen or seen.add(x))]\n\n    with open(output_path, 'w', encoding='utf-8') as f:\n        json.dump(phone_numbers, f, indent=2)\n\n    return phone_numbers\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_phone_numbers_page_1 (builtins.TestCases)\nTest extraction from test_page_1 with a single phone number\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 28, in test_phone_numbers_page_1\n  File \"<string>\", line 53, in run_test_case\n  File \"<bigcode>\", line 12, in task_func\nFileNotFoundError: [Errno 2] No such file or directory: 'file:///tmp/tmpr597a9of/test_page_1.html'\n\n======================================================================\nERROR: test_phone_numbers_page_2 (builtins.TestCases)\nTest extraction from test_page_2 with multiple phone numbers\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 33, in test_phone_numbers_page_2\n  File \"<string>\", line 53, in run_test_case\n  File \"<bigcode>\", line 12, in task_func\nFileNotFoundError: [Errno 2] No such file or directory: 'file:///tmp/tmpqddsf2fw/test_page_2.html'\n\n======================================================================\nERROR: test_phone_numbers_page_3 (builtins.TestCases)\nTest extraction from test_page_3 where no phone numbers are present\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 38, in test_phone_numbers_page_3\n  File \"<string>\", line 53, in run_test_case\n  File \"<bigcode>\", line 12, in task_func\nFileNotFoundError: [Errno 2] No such file or directory: 'file:///tmp/tmpn8055a0m/test_page_3.html'\n\n======================================================================\nERROR: test_phone_numbers_page_4 (builtins.TestCases)\nTest extraction from test_page_4 with one phone number\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 43, in test_phone_numbers_page_4\n  File \"<string>\", line 53, in run_test_case\n  File \"<bigcode>\", line 12, in task_func\nFileNotFoundError: [Errno 2] No such file or directory: 'file:///tmp/tmpn966dw58/test_page_4.html'\n\n======================================================================\nERROR: test_phone_numbers_page_5 (builtins.TestCases)\nTest extraction from test_page_5 with multiple phone numbers\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 48, in test_phone_numbers_page_5\n  File \"<string>\", line 53, in run_test_case\n  File \"<bigcode>\", line 12, in task_func\nFileNotFoundError: [Errno 2] No such file or directory: 'file:///tmp/tmp28gebm1b/test_page_5.html'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.003s\n\nFAILED (errors=5)"}}
{"result": "```python\nimport numpy as np\nimport itertools\ndef task_func(matrix):\n    sorted_array = np.sort(matrix.flatten())\n    combinations = list(itertools.combinations(sorted_array, 2))\n    return (sorted_array, combinations)\n```", "match": {"category": "success"}}
{"result": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndef task_func(data):\n    X = data[['Hours']]\n    y = data['Scores']\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    mse = np.mean((y_test - y_pred) ** 2)\n    return mse\n```", "match": {"category": "test_failure", "error": "======================================================================\nERROR: test_with_empty_data (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 58, in test_with_empty_data\n  File \"<bigcode>\", line 7, in task_func\nTypeError: unhashable type: 'list'\n\n======================================================================\nERROR: test_with_minimum_data (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 50, in test_with_minimum_data\n  File \"<bigcode>\", line 7, in task_func\nTypeError: unhashable type: 'list'\n\n======================================================================\nERROR: test_with_specific_known_value (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 67, in test_with_specific_known_value\n  File \"<bigcode>\", line 7, in task_func\nTypeError: unhashable type: 'list'\n\n======================================================================\nERROR: test_with_typical_data (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 30, in test_with_typical_data\n  File \"<bigcode>\", line 7, in task_func\nTypeError: unhashable type: 'list'\n\n======================================================================\nERROR: test_with_varied_data_size (builtins.TestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 40, in test_with_varied_data_size\n  File \"<bigcode>\", line 7, in task_func\nTypeError: unhashable type: 'list'\n\n----------------------------------------------------------------------\nRan 5 tests in 0.001s\n\nFAILED (errors=5)"}}

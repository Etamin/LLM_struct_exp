
{"result": "SELECT COUNT(*) AS number_of_singers FROM singer;", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(*) AS total_singers FROM singer;", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT Name, Country, Age \nFROM singer \nORDER BY Age DESC;", "match": {"match": true, "result": [["Joe Sharp", "Netherlands", 52], ["John Nizinik", "France", 43], ["Rose White", "France", 41], ["Timbaland", "United States", 32], ["Justin Brown", "France", 29], ["Tribal King", "France", 25]]}}
{"result": "```sql\nSELECT Name, Country, Age\nFROM singer\nORDER BY Age DESC;\n```", "match": {"match": true, "result": [["Joe Sharp", "Netherlands", 52], ["John Nizinik", "France", 43], ["Rose White", "France", 41], ["Timbaland", "United States", 32], ["Justin Brown", "France", 29], ["Tribal King", "France", 25]]}}
{"result": "SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age\nFROM singer\nWHERE Country = 'France';", "match": {"match": true, "result": [[34.5, 25, 43]]}}
{"result": "SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age\nFROM singer\nWHERE Country = 'France';", "match": {"match": true, "result": [[34.5, 25, 43]]}}
{"result": "```sql\nSELECT Name, Song_release_year\nFROM singer\nWHERE Age = (SELECT MIN(Age) FROM singer);\n```", "match": {"match": false, "result": [["Tribal King", "2016"]], "gt": [["Love", "2016"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name, Song_release_year \nFROM singer \nWHERE Age = (SELECT MIN(Age) FROM singer);", "match": {"match": false, "result": [["Tribal King", "2016"]], "gt": [["Love", "2016"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT Country\nFROM singer\nWHERE Age > 20;", "match": {"match": true, "result": [["Netherlands"], ["United States"], ["France"]]}}
{"result": "SELECT DISTINCT Country\nFROM singer\nWHERE Age > 20;", "match": {"match": true, "result": [["Netherlands"], ["United States"], ["France"]]}}
{"result": "SELECT Country, COUNT(*) AS Number_of_Singers\nFROM singer\nGROUP BY Country;", "match": {"match": true, "result": [["France", 4], ["Netherlands", 1], ["United States", 1]]}}
{"result": "SELECT Country, COUNT(*) AS NumberOfSingers\nFROM singer\nGROUP BY Country;", "match": {"match": true, "result": [["France", 4], ["Netherlands", 1], ["United States", 1]]}}
{"result": "```sql\nSELECT Song_Name\nFROM singer\nWHERE Age > (SELECT AVG(Age) FROM singer);\n```", "match": {"match": true, "result": [["You"], ["Sun"], ["Gentleman"]]}}
{"result": "SELECT Song_Name\nFROM singer\nWHERE Age > (SELECT AVG(Age) FROM singer);", "match": {"match": true, "result": [["You"], ["Sun"], ["Gentleman"]]}}
{"result": "```sql\nSELECT Location, Name\nFROM stadium\nWHERE Capacity BETWEEN 5000 AND 10000;\n```", "match": {"match": true, "result": []}}
{"result": "SELECT Location, Name \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000;", "match": {"match": true, "result": []}}
{"result": "SELECT MAX(Capacity) AS Max_Capacity, AVG(Capacity) AS Avg_Capacity FROM stadium;", "match": {"match": false, "result": [[52500, 10621.666666666666]], "gt": [[52500, 730]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(Capacity) AS Average_Capacity, MAX(Capacity) AS Maximum_Capacity FROM stadium;", "match": {"match": true, "result": [[10621.666666666666, 52500]]}}
{"result": "```sql\nSELECT Name, Capacity\nFROM stadium\nORDER BY Average DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [["Stark's Park", 10104]]}}
{"result": "SELECT Name, Capacity\nFROM stadium\nWHERE Average = (SELECT MAX(Average) FROM stadium);", "match": {"match": true, "result": [["Stark's Park", 10104]]}}
{"result": "SELECT COUNT(*) \nFROM concert \nWHERE Year = '2014' OR Year = '2015';", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(*) \nFROM concert \nWHERE Year IN ('2014', '2015');", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT s.Name AS Stadium_Name, COUNT(c.concert_ID) AS Number_of_Concerts\nFROM stadium s\nLEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID\nGROUP BY s.Stadium_ID, s.Name;", "match": {"match": false, "result": [["Stark's Park", 1], ["Somerset Park", 2], ["Bayview Stadium", 0], ["Hampden Park", 0], ["Forthbank Stadium", 0], ["Gayfield Park", 0], ["Recreation Park", 1], ["Balmoor", 1], ["Glebe Park", 1]], "gt": [["Stark's Park", 1], ["Glebe Park", 1], ["Somerset Park", 2], ["Recreation Park", 1], ["Balmoor", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Stadium_ID, COUNT(concert_ID) AS Number_of_Concerts\nFROM concert\nGROUP BY Stadium_ID;", "match": {"match": false, "result": [["1", 1], ["10", 1], ["2", 2], ["7", 1], ["9", 1]], "gt": [["Stark's Park", 1], ["Glebe Park", 1], ["Somerset Park", 2], ["Recreation Park", 1], ["Balmoor", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.Name, s.Capacity\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE CAST(c.Year AS INTEGER) >= 2014\nGROUP BY s.Stadium_ID, s.Name, s.Capacity\nORDER BY COUNT(c.concert_ID) DESC\nLIMIT 1;", "match": {"match": true, "result": [["Somerset Park", 11998]]}}
{"result": "SELECT s.Name, s.Capacity\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.Year > '2013'\nGROUP BY s.Stadium_ID, s.Name, s.Capacity\nORDER BY COUNT(c.concert_ID) DESC\nLIMIT 1;", "match": {"match": true, "result": [["Somerset Park", 11998]]}}
{"result": "SELECT Year, COUNT(*) AS concert_count\nFROM concert\nGROUP BY Year\nORDER BY concert_count DESC\nLIMIT 1;", "match": {"match": false, "result": [["2015", 3]], "gt": [["2015"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Year\nFROM concert\nGROUP BY Year\nORDER BY COUNT(concert_ID) DESC\nLIMIT 1;", "match": {"match": true, "result": [["2015"]]}}
{"result": "SELECT Name \nFROM stadium \nWHERE Stadium_ID NOT IN (\n    SELECT DISTINCT Stadium_ID \n    FROM concert \n    WHERE Stadium_ID IS NOT NULL\n);", "match": {"match": true, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"]]}}
{"result": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Stadium_ID IS NOT NULL);", "match": {"match": true, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"]]}}
{"result": "SELECT DISTINCT s1.Country\nFROM singer s1\nJOIN singer s2 ON s1.Country = s2.Country\nWHERE s1.Age > 40 AND s2.Age < 30;", "match": {"match": true, "result": [["France"]]}}
{"result": "SELECT Name \nFROM stadium \nWHERE Stadium_ID NOT IN (\n    SELECT Stadium_ID \n    FROM concert \n    WHERE Year = '2014'\n);", "match": {"match": false, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"], ["Recreation Park"], ["Balmoor"]], "gt": [["Balmoor"], ["Bayview Stadium"], ["Forthbank Stadium"], ["Gayfield Park"], ["Hampden Park"], ["Recreation Park"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name \nFROM stadium \nWHERE Stadium_ID NOT IN (\n    SELECT Stadium_ID \n    FROM concert \n    WHERE Year = '2014'\n);", "match": {"match": false, "result": [["Bayview Stadium"], ["Hampden Park"], ["Forthbank Stadium"], ["Gayfield Park"], ["Recreation Park"], ["Balmoor"]], "gt": [["Balmoor"], ["Bayview Stadium"], ["Forthbank Stadium"], ["Gayfield Park"], ["Hampden Park"], ["Recreation Park"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT c.concert_Name, c.Theme, COUNT(sic.Singer_ID) AS Number_of_Singers\nFROM concert c\nLEFT JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID\nGROUP BY c.concert_ID, c.concert_Name, c.Theme;\n```", "match": {"match": true, "result": [["Auditions", "Free choice", 3], ["Super bootcamp", "Free choice 2", 2], ["Home Visits", "Bleeding Love", 1], ["Week 1", "Wide Awake", 1], ["Week 1", "Happy Tonight", 2], ["Week 2", "Party All Night", 1]]}}
{"result": "SELECT c.concert_Name, c.Theme, COUNT(sic.Singer_ID) AS number_of_singers\nFROM concert c\nLEFT JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID\nGROUP BY c.concert_ID, c.concert_Name, c.Theme;", "match": {"match": true, "result": [["Auditions", "Free choice", 3], ["Super bootcamp", "Free choice 2", 2], ["Home Visits", "Bleeding Love", 1], ["Week 1", "Wide Awake", 1], ["Week 1", "Happy Tonight", 2], ["Week 2", "Party All Night", 1]]}}
{"result": "SELECT s.Name, COUNT(sc.concert_ID) AS Number_of_Concerts\nFROM singer s\nLEFT JOIN singer_in_concert sc ON s.Singer_ID = sc.Singer_ID\nGROUP BY s.Name;", "match": {"match": false, "result": [["Joe Sharp", 0], ["John Nizinik", 2], ["Justin Brown", 3], ["Rose White", 1], ["Timbaland", 2], ["Tribal King", 2]], "gt": [["Timbaland", 2], ["Justin Brown", 3], ["Rose White", 1], ["John Nizinik", 2], ["Tribal King", 2]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT s.Name, COUNT(sic.concert_ID) AS Number_of_Concerts\nFROM singer s\nLEFT JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID\nGROUP BY s.Name;\n```", "match": {"match": false, "result": [["Joe Sharp", 0], ["John Nizinik", 2], ["Justin Brown", 3], ["Rose White", 1], ["Timbaland", 2], ["Tribal King", 2]], "gt": [["Timbaland", 2], ["Justin Brown", 3], ["Rose White", 1], ["John Nizinik", 2], ["Tribal King", 2]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT s.Name\nFROM singer s\nJOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID\nJOIN concert c ON sic.concert_ID = c.concert_ID\nWHERE c.Year = '2014';\n```", "match": {"match": true, "result": [["Timbaland"], ["Justin Brown"], ["John Nizinik"], ["Justin Brown"], ["Tribal King"], ["Rose White"]]}}
{"result": "```sql\nSELECT s.Name\nFROM singer s\nJOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID\nJOIN concert c ON sic.concert_ID = c.concert_ID\nWHERE c.Year = '2014';\n```", "match": {"match": true, "result": [["Timbaland"], ["Justin Brown"], ["John Nizinik"], ["Justin Brown"], ["Tribal King"], ["Rose White"]]}}
{"result": "SELECT Name, Country\nFROM singer\nWHERE Song_Name LIKE '%Hey%';", "match": {"match": true, "result": [["Justin Brown", "France"]]}}
{"result": "SELECT Name, Country\nFROM singer\nWHERE Song_Name LIKE '%Hey%';", "match": {"match": true, "result": [["Justin Brown", "France"]]}}
{"result": "```sql\nSELECT DISTINCT s.Name, s.Location\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.Year IN ('2014', '2015')\nGROUP BY s.Stadium_ID, s.Name, s.Location\nHAVING COUNT(DISTINCT c.Year) = 2;\n```", "match": {"match": true, "result": [["Somerset Park", "Ayr United"]]}}
{"result": "```sql\nSELECT s.Name, s.Location\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.Year IN ('2014', '2015')\nGROUP BY s.Stadium_ID, s.Name, s.Location\nHAVING COUNT(DISTINCT c.Year) = 2;\n```", "match": {"match": true, "result": [["Somerset Park", "Ayr United"]]}}
{"result": "SELECT COUNT(*) \nFROM concert \nWHERE Stadium_ID = (\n    SELECT Stadium_ID \n    FROM stadium \n    ORDER BY Capacity DESC \n    LIMIT 1\n);", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(*) \nFROM concert \nWHERE Stadium_ID = (\n    SELECT Stadium_ID \n    FROM stadium \n    ORDER BY Capacity DESC \n    LIMIT 1\n);", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(*) \nFROM Pets \nWHERE weight > 10;", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(*) \nFROM Pets\nWHERE weight > 10;", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT weight\nFROM Pets\nWHERE PetType = 'dog'\nORDER BY pet_age ASC\nLIMIT 1;", "match": {"match": true, "result": [[9.3]]}}
{"result": "SELECT weight\nFROM Pets\nWHERE PetType = 'dog'\nORDER BY pet_age\nLIMIT 1;", "match": {"match": true, "result": [[9.3]]}}
{"result": "SELECT PetType, MAX(weight) AS max_weight\nFROM Pets\nGROUP BY PetType;", "match": {"match": false, "result": [["cat", 12.0], ["dog", 13.4]], "gt": [[12.0, "cat"], [13.4, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT PetType, MAX(weight) AS MaxWeight\nFROM Pets\nGROUP BY PetType;\n```", "match": {"match": false, "result": [["cat", 12.0], ["dog", 13.4]], "gt": [[12.0, "cat"], [13.4, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) \nFROM Has_Pet HP \nJOIN Student S ON HP.StuID = S.StuID \nWHERE S.Age > 20;", "match": {"match": true, "result": [[0]]}}
{"result": "select count(*) \nfrom Has_Pet hp\njoin Student s on hp.StuID = s.StuID\nwhere s.Age > 20;", "match": {"match": true, "result": [[0]]}}
{"result": "```sql\nSELECT COUNT(*) \nFROM Has_Pet hp\nJOIN Student s ON hp.StuID = s.StuID\nJOIN Pets p ON hp.PetID = p.PetID\nWHERE s.Sex = 'F' AND p.PetType = 'dog';\n```", "match": {"match": true, "result": [[2]]}}
{"result": "```sql\nSELECT COUNT(*) \nFROM Has_Pet HP\nJOIN Pets P ON HP.PetID = P.PetID\nJOIN Student S ON HP.StuID = S.StuID\nWHERE P.PetType = 'dog' AND S.Sex = 'F';\n```", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(DISTINCT PetType) AS distinct_pet_types FROM Pets;", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(DISTINCT PetType) AS NumberOfPetTypes FROM Pets;", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT DISTINCT S.Fname\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nJOIN Pets P ON HP.PetID = P.PetID\nWHERE P.PetType IN ('cat', 'dog');", "match": {"match": true, "result": [["Linda"], ["Tracy"]]}}
{"result": "SELECT DISTINCT S.Fname\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nJOIN Pets P ON HP.PetID = P.PetID\nWHERE P.PetType IN ('cat', 'dog');", "match": {"match": true, "result": [["Linda"], ["Tracy"]]}}
{"result": "```sql\nSELECT DISTINCT s.Fname\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nJOIN Pets p ON hp.PetID = p.PetID\nWHERE p.PetType IN ('cat', 'dog')\nGROUP BY s.StuID, s.Fname\nHAVING COUNT(DISTINCT p.PetType) = 2;\n```", "match": {"match": true, "result": []}}
{"result": "```sql\nSELECT DISTINCT S.Fname\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nJOIN Pets P ON HP.PetID = P.PetID\nWHERE P.PetType = 'cat'\nAND S.StuID IN (\n    SELECT HP2.StuID\n    FROM Has_Pet HP2\n    JOIN Pets P2 ON HP2.PetID = P2.PetID\n    WHERE P2.PetType = 'dog'\n);\n```", "match": {"match": true, "result": []}}
{"result": "SELECT Major, Age\nFROM Student\nWHERE StuID NOT IN (\n    SELECT StuID\n    FROM Has_Pet\n    JOIN Pets ON Has_Pet.PetID = Pets.PetID\n    WHERE PetType = 'cat'\n);", "match": {"match": true, "result": [[600, 19], [600, 21], [600, 20], [600, 26], [600, 18], [600, 18], [600, 20], [600, 19], [600, 17], [600, 22], [600, 20], [600, 18], [600, 16], [600, 17], [600, 27], [600, 20], [600, 18], [520, 22], [520, 19], [540, 17], [520, 20], [540, 18], [520, 18], [520, 19], [520, 18], [550, 20], [100, 17], [550, 21], [550, 20], [550, 20], [550, 18], [50, 18], [50, 26]]}}
{"result": "SELECT Major, Age\nFROM Student\nWHERE StuID NOT IN (\n    SELECT StuID\n    FROM Has_Pet\n    JOIN Pets ON Has_Pet.PetID = Pets.PetID\n    WHERE PetType = 'cat'\n);", "match": {"match": true, "result": [[600, 19], [600, 21], [600, 20], [600, 26], [600, 18], [600, 18], [600, 20], [600, 19], [600, 17], [600, 22], [600, 20], [600, 18], [600, 16], [600, 17], [600, 27], [600, 20], [600, 18], [520, 22], [520, 19], [540, 17], [520, 20], [540, 18], [520, 18], [520, 19], [520, 18], [550, 20], [100, 17], [550, 21], [550, 20], [550, 20], [550, 18], [50, 18], [50, 26]]}}
{"result": "SELECT StuID\nFROM Student\nWHERE StuID NOT IN (\n    SELECT StuID\n    FROM Has_Pet\n    JOIN Pets ON Has_Pet.PetID = Pets.PetID\n    WHERE PetType = 'cat'\n);", "match": {"match": true, "result": [[1002], [1003], [1004], [1005], [1006], [1007], [1008], [1009], [1010], [1011], [1012], [1014], [1015], [1016], [1017], [1018], [1019], [1020], [1021], [1022], [1023], [1024], [1025], [1026], [1027], [1028], [1029], [1030], [1031], [1032], [1033], [1034], [1035]]}}
{"result": "```sql\nSELECT StuID\nFROM Student\nWHERE StuID NOT IN (\n    SELECT StuID\n    FROM Has_Pet\n    JOIN Pets ON Has_Pet.PetID = Pets.PetID\n    WHERE PetType = 'cat'\n);\n```", "match": {"match": true, "result": [[1002], [1003], [1004], [1005], [1006], [1007], [1008], [1009], [1010], [1011], [1012], [1014], [1015], [1016], [1017], [1018], [1019], [1020], [1021], [1022], [1023], [1024], [1025], [1026], [1027], [1028], [1029], [1030], [1031], [1032], [1033], [1034], [1035]]}}
{"result": "```sql\nSELECT DISTINCT S.Fname, S.Age\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nJOIN Pets P ON HP.PetID = P.PetID\nWHERE P.PetType = 'dog'\nAND S.StuID NOT IN (\n    SELECT HP2.StuID\n    FROM Has_Pet HP2\n    JOIN Pets P2 ON HP2.PetID = P2.PetID\n    WHERE P2.PetType = 'cat'\n);\n```", "match": {"match": false, "result": [["Tracy", 19]], "gt": [["Tracy", 19], ["Tracy", 19]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT S.Fname\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nJOIN Pets P ON HP.PetID = P.PetID\nWHERE P.PetType = 'dog'\nAND S.StuID NOT IN (\n    SELECT HP2.StuID\n    FROM Has_Pet HP2\n    JOIN Pets P2 ON HP2.PetID = P2.PetID\n    WHERE P2.PetType = 'cat'\n);", "match": {"match": false, "result": [["Tracy"]], "gt": [["Tracy", 19], ["Tracy", 19]], "error": "Query result does not match ground truth."}}
{"result": "SELECT PetType, weight\nFROM Pets\nWHERE pet_age = (SELECT MIN(pet_age) FROM Pets);", "match": {"match": true, "result": [["dog", 9.3]]}}
{"result": "SELECT PetType, weight\nFROM Pets\nORDER BY pet_age ASC\nLIMIT 1;", "match": {"match": true, "result": [["dog", 9.3]]}}
{"result": "```sql\nSELECT PetID, weight\nFROM Pets\nWHERE pet_age > 1;\n```", "match": {"match": true, "result": [[2001, 12.0], [2002, 13.4]]}}
{"result": "SELECT PetID, weight\nFROM Pets\nWHERE pet_age > 1;", "match": {"match": true, "result": [[2001, 12.0], [2002, 13.4]]}}
{"result": "```sql\nSELECT PetType, AVG(pet_age) AS average_age, MAX(pet_age) AS maximum_age\nFROM Pets\nGROUP BY PetType;\n```", "match": {"match": false, "result": [["cat", 3.0, 3], ["dog", 1.5, 2]], "gt": [[3.0, 3, "cat"], [1.5, 2, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT PetType, AVG(pet_age) AS Average_Age, MAX(pet_age) AS Maximum_Age\nFROM Pets\nGROUP BY PetType;", "match": {"match": false, "result": [["cat", 3.0, 3], ["dog", 1.5, 2]], "gt": [[3.0, 3, "cat"], [1.5, 2, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT PetType, AVG(weight) AS avg_weight\nFROM Pets\nGROUP BY PetType;\n```", "match": {"match": false, "result": [["cat", 12.0], ["dog", 11.350000000000001]], "gt": [[12.0, "cat"], [11.350000000000001, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT PetType, AVG(weight) AS avg_weight\nFROM Pets\nGROUP BY PetType;\n```", "match": {"match": false, "result": [["cat", 12.0], ["dog", 11.350000000000001]], "gt": [[12.0, "cat"], [11.350000000000001, "dog"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT DISTINCT S.Fname, S.Age\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID;\n```", "match": {"match": true, "result": [["Linda", 18], ["Tracy", 19]]}}
{"result": "```sql\nSELECT DISTINCT S.Fname, S.Age\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID;\n```", "match": {"match": true, "result": [["Linda", 18], ["Tracy", 19]]}}
{"result": "SELECT Has_Pet.PetID\nFROM Has_Pet\nJOIN Student ON Has_Pet.StuID = Student.StuID\nWHERE Student.LName = 'Smith';", "match": {"match": true, "result": [[2001]]}}
{"result": "select PetID\nfrom Has_Pet\njoin Student on Has_Pet.StuID = Student.StuID\nwhere Student.LName = 'Smith';", "match": {"match": true, "result": [[2001]]}}
{"result": "```sql\nSELECT StuID, COUNT(PetID) AS NumberOfPets\nFROM Has_Pet\nGROUP BY StuID;\n```", "match": {"match": false, "result": [[1001, 1], [1002, 2]], "gt": [[1, 1001], [2, 1002]], "error": "Query result does not match ground truth."}}
{"result": "SELECT StuID, COUNT(PetID) AS NumPets\nFROM Has_Pet\nGROUP BY StuID;", "match": {"match": false, "result": [[1001, 1], [1002, 2]], "gt": [[1, 1001], [2, 1002]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT S.Fname, S.Sex\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nGROUP BY S.StuID, S.Fname, S.Sex\nHAVING COUNT(HP.PetID) > 1;\n```", "match": {"match": true, "result": [["Tracy", "F"]]}}
{"result": "SELECT S.Fname, S.Sex\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nGROUP BY S.StuID, S.Fname, S.Sex\nHAVING COUNT(HP.PetID) > 1;", "match": {"match": true, "result": [["Tracy", "F"]]}}
{"result": "```sql\nSELECT DISTINCT S.LName\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nJOIN Pets P ON HP.PetID = P.PetID\nWHERE P.PetType = 'cat' AND P.pet_age = 3;\n```", "match": {"match": true, "result": [["Smith"]]}}
{"result": "```sql\nSELECT S.LName\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nJOIN Pets P ON HP.PetID = P.PetID\nWHERE P.PetType = 'cat' AND P.pet_age = 3;\n```", "match": {"match": true, "result": [["Smith"]]}}
{"result": "SELECT AVG(Age) \nFROM Student \nWHERE StuID NOT IN (SELECT StuID FROM Has_Pet);", "match": {"match": true, "result": [[19.625]]}}
{"result": "SELECT AVG(Age) AS AverageAge\nFROM Student\nWHERE StuID NOT IN (SELECT StuID FROM Has_Pet);", "match": {"match": true, "result": [[19.625]]}}
{"result": "SELECT COUNT(*) FROM employee;", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT COUNT(*) AS Number_of_employees FROM employee;", "match": {"match": true, "result": [[10]]}}
{"result": "```sql\nSELECT Name FROM employee ORDER BY Age ASC;\n```", "match": {"match": true, "result": [["George Chuter"], ["Andrew Sheridan"], ["Lee Mears"], ["Tim Payne"], ["Matt Stevens"], ["Jason Hobson"], ["Steve Borthwick"], ["Louis Deacon"], ["Phil Vickery"], ["Mark Regan"]]}}
{"result": "SELECT Name FROM employee ORDER BY Age ASC;", "match": {"match": true, "result": [["George Chuter"], ["Andrew Sheridan"], ["Lee Mears"], ["Tim Payne"], ["Matt Stevens"], ["Jason Hobson"], ["Steve Borthwick"], ["Louis Deacon"], ["Phil Vickery"], ["Mark Regan"]]}}
{"result": "SELECT City, COUNT(*) AS Number_of_Employees\nFROM employee\nGROUP BY City;", "match": {"match": false, "result": [["Bath", 3], ["Bristol", 3], ["Leicester", 1], ["Sale", 1], ["Wasps", 2]], "gt": [[3, "Bath"], [3, "Bristol"], [1, "Leicester"], [1, "Sale"], [2, "Wasps"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT City, COUNT(Employee_ID) AS Employee_Count\nFROM employee\nGROUP BY City;", "match": {"match": false, "result": [["Bath", 3], ["Bristol", 3], ["Leicester", 1], ["Sale", 1], ["Wasps", 2]], "gt": [[3, "Bath"], [3, "Bristol"], [1, "Leicester"], [1, "Sale"], [2, "Wasps"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT City\nFROM employee\nWHERE Age < 30\nGROUP BY City\nHAVING COUNT(*) > 1;", "match": {"match": true, "result": [["Bath"]]}}
{"result": "```sql\nSELECT City\nFROM employee\nWHERE Age < 30\nGROUP BY City\nHAVING COUNT(Employee_ID) > 1;\n```", "match": {"match": true, "result": [["Bath"]]}}
{"result": "SELECT Location, COUNT(*) AS Number_of_shops\nFROM shop\nGROUP BY Location;", "match": {"match": false, "result": [["Espoo", 1], ["Helsinki", 1], ["Jakobstad", 1], ["Kotka", 1], ["Kuopio", 1], ["Lahti", 1], ["Mariehamn", 1], ["Turku", 1], ["Valkeakoski", 1]], "gt": [[1, "Espoo"], [1, "Helsinki"], [1, "Jakobstad"], [1, "Kotka"], [1, "Kuopio"], [1, "Lahti"], [1, "Mariehamn"], [1, "Turku"], [1, "Valkeakoski"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Location, COUNT(*) AS Number_of_Shops\nFROM shop\nGROUP BY Location;", "match": {"match": false, "result": [["Espoo", 1], ["Helsinki", 1], ["Jakobstad", 1], ["Kotka", 1], ["Kuopio", 1], ["Lahti", 1], ["Mariehamn", 1], ["Turku", 1], ["Valkeakoski", 1]], "gt": [[1, "Espoo"], [1, "Helsinki"], [1, "Jakobstad"], [1, "Kotka"], [1, "Kuopio"], [1, "Lahti"], [1, "Mariehamn"], [1, "Turku"], [1, "Valkeakoski"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Manager_name, District\nFROM shop\nWHERE Number_products = (SELECT MAX(Number_products) FROM shop);", "match": {"match": true, "result": [["Ilkka M\u00e4kel\u00e4", "Lahden Stadion"]]}}
{"result": "SELECT Manager_name, District\nFROM shop\nORDER BY Number_products DESC\nLIMIT 1;", "match": {"match": true, "result": [["Ilkka M\u00e4kel\u00e4", "Lahden Stadion"]]}}
{"result": "SELECT MIN(Number_products) AS Min_Products, MAX(Number_products) AS Max_Products FROM shop;", "match": {"match": true, "result": [[1600, 15000]]}}
{"result": "SELECT MIN(Number_products) AS Min_Products, MAX(Number_products) AS Max_Products FROM shop;", "match": {"match": true, "result": [[1600, 15000]]}}
{"result": "SELECT Name, Location, District\nFROM shop\nORDER BY Number_products DESC;", "match": {"match": true, "result": [["FC Lahti", "Lahti", "Lahden Stadion"], ["HJK", "Helsinki", "Finnair Stadium"], ["FC Inter", "Turku", "Veritas Stadion"], ["FC Honka", "Espoo", "Tapiolan Urheilupuisto"], ["FF Jaro", "Jakobstad", "Jakobstads Centralplan"], ["FC KooTeePee", "Kotka", "Arto Tolsa Areena"], ["FC Haka", "Valkeakoski", "Tehtaan kentt\u00e4"], ["KuPS", "Kuopio", "Magnum Areena"], ["IFK Mariehamn", "Mariehamn", "Wikl\u00f6f Holding Arena"]]}}
{"result": "SELECT Name, Location, District\nFROM shop\nORDER BY Number_products DESC;", "match": {"match": true, "result": [["FC Lahti", "Lahti", "Lahden Stadion"], ["HJK", "Helsinki", "Finnair Stadium"], ["FC Inter", "Turku", "Veritas Stadion"], ["FC Honka", "Espoo", "Tapiolan Urheilupuisto"], ["FF Jaro", "Jakobstad", "Jakobstads Centralplan"], ["FC KooTeePee", "Kotka", "Arto Tolsa Areena"], ["FC Haka", "Valkeakoski", "Tehtaan kentt\u00e4"], ["KuPS", "Kuopio", "Magnum Areena"], ["IFK Mariehamn", "Mariehamn", "Wikl\u00f6f Holding Arena"]]}}
{"result": "SELECT Name \nFROM shop \nWHERE Number_products > (SELECT AVG(Number_products) FROM shop);", "match": {"match": true, "result": [["HJK"], ["FC Inter"], ["FC Lahti"]]}}
{"result": "SELECT Name\nFROM shop\nWHERE Number_products > (SELECT AVG(Number_products) FROM shop);", "match": {"match": true, "result": [["HJK"], ["FC Inter"], ["FC Lahti"]]}}
{"result": "SELECT e.Name\nFROM employee e\nJOIN evaluation ev ON e.Employee_ID = ev.Employee_ID\nGROUP BY e.Employee_ID, e.Name\nORDER BY COUNT(ev.Year_awarded) DESC\nLIMIT 1;", "match": {"match": true, "result": [["George Chuter"]]}}
{"result": "SELECT e.Name\nFROM employee e\nJOIN evaluation ev ON e.Employee_ID = ev.Employee_ID\nGROUP BY e.Employee_ID, e.Name\nORDER BY COUNT(ev.Year_awarded) DESC\nLIMIT 1;", "match": {"match": true, "result": [["George Chuter"]]}}
{"result": "SELECT e.Name\nFROM employee e\nJOIN evaluation ev ON e.Employee_ID = ev.Employee_ID\nWHERE ev.Bonus = (\n    SELECT MAX(Bonus) FROM evaluation\n);", "match": {"match": true, "result": [["Louis Deacon"]]}}
{"result": "SELECT e.Name\nFROM employee e\nJOIN evaluation ev ON e.Employee_ID = ev.Employee_ID\nORDER BY ev.Bonus DESC\nLIMIT 1;", "match": {"match": true, "result": [["Louis Deacon"]]}}
{"result": "```sql\nSELECT Name\nFROM employee\nWHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);\n```", "match": {"match": true, "result": [["Mark Regan"], ["Tim Payne"], ["Andrew Sheridan"], ["Phil Vickery"], ["Steve Borthwick"]]}}
{"result": "```sql\nSELECT Name \nFROM employee \nWHERE Employee_ID NOT IN (\n    SELECT Employee_ID \n    FROM evaluation\n);\n```", "match": {"match": true, "result": [["Mark Regan"], ["Tim Payne"], ["Andrew Sheridan"], ["Phil Vickery"], ["Steve Borthwick"]]}}
{"result": "SELECT s.Name\nFROM shop s\nJOIN hiring h ON s.Shop_ID = h.Shop_ID\nGROUP BY s.Shop_ID, s.Name\nORDER BY COUNT(h.Employee_ID) DESC\nLIMIT 1;", "match": {"match": true, "result": [["FC Haka"]]}}
{"result": "SELECT s.Name\nFROM shop s\nJOIN hiring h ON s.Shop_ID = h.Shop_ID\nGROUP BY s.Shop_ID, s.Name\nORDER BY COUNT(h.Employee_ID) DESC\nLIMIT 1;", "match": {"match": true, "result": [["FC Haka"]]}}
{"result": "SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring);", "match": {"match": true, "result": [["FC Honka"], ["KuPS"], ["IFK Mariehamn"]]}}
{"result": "SELECT Name \nFROM shop \nWHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring);", "match": {"match": true, "result": [["FC Honka"], ["KuPS"], ["IFK Mariehamn"]]}}
{"result": "SELECT s.Name, COUNT(h.Employee_ID) AS Number_of_Employees\nFROM shop s\nLEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID\nGROUP BY s.Name;", "match": {"match": false, "result": [["FC Haka", 2], ["FC Honka", 0], ["FC Inter", 1], ["FC KooTeePee", 1], ["FC Lahti", 1], ["FF Jaro", 1], ["HJK", 1], ["IFK Mariehamn", 0], ["KuPS", 0]], "gt": [[2, "FC Haka"], [1, "FC Inter"], [1, "FC KooTeePee"], [1, "FC Lahti"], [1, "FF Jaro"], [1, "HJK"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.Name, COUNT(h.Employee_ID) AS Number_of_Employees\nFROM shop s\nLEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID\nGROUP BY s.Name;", "match": {"match": false, "result": [["FC Haka", 2], ["FC Honka", 0], ["FC Inter", 1], ["FC KooTeePee", 1], ["FC Lahti", 1], ["FF Jaro", 1], ["HJK", 1], ["IFK Mariehamn", 0], ["KuPS", 0]], "gt": [[2, "FC Haka"], [1, "FC Inter"], [1, "FC KooTeePee"], [1, "FC Lahti"], [1, "FF Jaro"], [1, "HJK"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT SUM(Bonus) AS TotalBonus FROM evaluation;", "match": {"match": true, "result": [[19500.0]]}}
{"result": "SELECT SUM(Bonus) AS Total_Bonus FROM evaluation;", "match": {"match": true, "result": [[19500.0]]}}
{"result": "SELECT * FROM hiring;", "match": {"match": true, "result": [[1, 1, "2009", "T"], [1, 2, "2003", "T"], [8, 3, "2011", "F"], [4, 4, "2012", "T"], [5, 5, "2013", "T"], [2, 6, "2010", "F"], [6, 7, "2008", "T"]]}}
{"result": "SELECT * FROM hiring;", "match": {"match": true, "result": [[1, 1, "2009", "T"], [1, 2, "2003", "T"], [8, 3, "2011", "F"], [4, 4, "2012", "T"], [5, 5, "2013", "T"], [2, 6, "2010", "F"], [6, 7, "2008", "T"]]}}
{"result": "SELECT District\nFROM shop\nGROUP BY District\nHAVING \n    SUM(CASE WHEN Number_products < 3000 THEN 1 ELSE 0 END) > 0\n    AND SUM(CASE WHEN Number_products > 10000 THEN 1 ELSE 0 END) > 0;", "match": {"match": true, "result": []}}
{"result": "SELECT DISTINCT s1.District\nFROM shop s1\nJOIN shop s2 ON s1.District = s2.District\nWHERE s1.Number_products < 3000\n  AND s2.Number_products > 10000;", "match": {"match": true, "result": []}}
{"result": "SELECT COUNT(DISTINCT Location) AS Number_of_locations FROM shop;", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(DISTINCT Location) AS distinct_location_count FROM shop;", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(*) AS Document_Count FROM Documents;", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) AS Document_Count FROM Documents;", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT Document_ID, Document_Name, Document_Description\nFROM Documents;", "match": {"match": true, "result": [[0, "Introduction of OS", "n"], [1, "Understanding DB", "y"], [3, "Summer Show", "u"], [76, "Robbin CV", "y"], [80, "Welcome to NY", "h"], [82, "Data base", "w"], [2394, "Customer reviews", "y"], [3830, "Do not panic", "k"], [33930, "How Google people work", "z"], [50123, "Learning French", "r"], [651512, "How to write a CV", "f"], [801801, "How to read a book", "w"], [3540024, "Palm reading", "y"], [16514113, "A history of Arts", "h"], [385906526, "About Korea", "b"]]}}
{"result": "SELECT Document_ID, Document_Name, Document_Description FROM Documents;", "match": {"match": true, "result": [[0, "Introduction of OS", "n"], [1, "Understanding DB", "y"], [3, "Summer Show", "u"], [76, "Robbin CV", "y"], [80, "Welcome to NY", "h"], [82, "Data base", "w"], [2394, "Customer reviews", "y"], [3830, "Do not panic", "k"], [33930, "How Google people work", "z"], [50123, "Learning French", "r"], [651512, "How to write a CV", "f"], [801801, "How to read a book", "w"], [3540024, "Palm reading", "y"], [16514113, "A history of Arts", "h"], [385906526, "About Korea", "b"]]}}
{"result": "SELECT Document_Name, Template_ID\nFROM Documents\nWHERE Document_Description LIKE '%w%';", "match": {"match": true, "result": [["Data base", 11], ["How to read a book", 4]]}}
{"result": "SELECT Document_Name, Template_ID\nFROM Documents\nWHERE Document_Description LIKE '%w%';", "match": {"match": true, "result": [["Data base", 11], ["How to read a book", 4]]}}
{"result": "SELECT Document_ID, Template_ID, Document_Description\nFROM Documents\nWHERE Document_Name = 'Robbin CV';", "match": {"match": true, "result": [[76, 20, "y"]]}}
{"result": "```sql\nSELECT Document_ID, Template_ID, Document_Description\nFROM Documents\nWHERE Document_Name = 'Robbin CV';\n```", "match": {"match": true, "result": [[76, 20, "y"]]}}
{"result": "SELECT COUNT(DISTINCT Template_ID) AS NumberOfDifferentTemplatesUsedByDocuments\nFROM Documents\nWHERE Template_ID IS NOT NULL;", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT COUNT(DISTINCT Template_ID) AS NumberOfDifferentTemplatesUsedForDocuments\nFROM Documents\nWHERE Template_ID IS NOT NULL;", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT COUNT(*) \nFROM Documents d\nJOIN Templates t ON d.Template_ID = t.Template_ID\nWHERE t.Template_Type_Code = 'PPT';", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(DISTINCT d.Document_ID)\nFROM Documents d\nJOIN Templates t ON d.Template_ID = t.Template_ID\nWHERE t.Template_Type_Code = 'PPT';", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Template_ID, COUNT(Document_ID) AS Number_of_Documents\nFROM Documents\nGROUP BY Template_ID;", "match": {"match": true, "result": [[1, 1], [4, 1], [6, 1], [7, 1], [8, 1], [10, 1], [11, 2], [14, 2], [20, 1], [21, 1], [22, 1], [25, 2]]}}
{"result": "SELECT Template_ID, COUNT(*) AS Usage_Count\nFROM Documents\nWHERE Template_ID IS NOT NULL\nGROUP BY Template_ID;", "match": {"match": true, "result": [[1, 1], [4, 1], [6, 1], [7, 1], [8, 1], [10, 1], [11, 2], [14, 2], [20, 1], [21, 1], [22, 1], [25, 2]]}}
{"result": "SELECT t.Template_ID, t.Template_Type_Code\nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID\nGROUP BY t.Template_ID, t.Template_Type_Code\nORDER BY COUNT(d.Document_ID) DESC\nLIMIT 1;", "match": {"match": false, "result": [[11, "BK"]], "gt": [[25, "PP"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Template_ID, Template_Type_Code\nFROM Templates\nWHERE Template_ID = (\n    SELECT Template_ID\n    FROM Documents\n    GROUP BY Template_ID\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n);", "match": {"match": true, "result": [[25, "PP"]]}}
{"result": "SELECT Template_ID\nFROM Documents\nGROUP BY Template_ID\nHAVING COUNT(DISTINCT Document_ID) > 1;", "match": {"match": true, "result": [[11], [14], [25]]}}
{"result": "SELECT Template_ID\nFROM Documents\nGROUP BY Template_ID\nHAVING COUNT(DISTINCT Document_ID) > 1;", "match": {"match": true, "result": [[11], [14], [25]]}}
{"result": "SELECT Template_ID\nFROM Templates\nWHERE Template_ID NOT IN (SELECT DISTINCT Template_ID FROM Documents WHERE Template_ID IS NOT NULL);", "match": {"match": true, "result": [[0], [9], [15], [16], [18], [19], [23], [24]]}}
{"result": "SELECT Template_ID\nFROM Templates\nWHERE Template_ID NOT IN (SELECT DISTINCT Template_ID FROM Documents WHERE Template_ID IS NOT NULL);", "match": {"match": true, "result": [[0], [9], [15], [16], [18], [19], [23], [24]]}}
{"result": "SELECT COUNT(*) AS Template_Count FROM Templates;", "match": {"match": true, "result": [[20]]}}
{"result": "SELECT COUNT(*) AS Template_Count FROM Templates;", "match": {"match": true, "result": [[20]]}}
{"result": "SELECT Template_ID, Version_Number, Template_Type_Code\nFROM Templates;", "match": {"match": true, "result": [[0, 5, "PP"], [1, 9, "PP"], [4, 4, "BK"], [6, 2, "PPT"], [7, 8, "PPT"], [8, 3, "BK"], [9, 2, "BK"], [10, 1, "PPT"], [11, 6, "BK"], [14, 7, "AD"], [15, 9, "CV"], [16, 5, "CV"], [18, 5, "PP"], [19, 7, "AD"], [20, 6, "BK"], [21, 9, "AD"], [22, 0, "PP"], [23, 2, "BK"], [24, 8, "PP"], [25, 5, "PP"]]}}
{"result": "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;", "match": {"match": true, "result": [[0, 5, "PP"], [1, 9, "PP"], [4, 4, "BK"], [6, 2, "PPT"], [7, 8, "PPT"], [8, 3, "BK"], [9, 2, "BK"], [10, 1, "PPT"], [11, 6, "BK"], [14, 7, "AD"], [15, 9, "CV"], [16, 5, "CV"], [18, 5, "PP"], [19, 7, "AD"], [20, 6, "BK"], [21, 9, "AD"], [22, 0, "PP"], [23, 2, "BK"], [24, 8, "PP"], [25, 5, "PP"]]}}
{"result": "SELECT DISTINCT Template_Type_Code\nFROM Templates;", "match": {"match": true, "result": [["PP"], ["BK"], ["PPT"], ["AD"], ["CV"]]}}
{"result": "SELECT Template_Type_Code FROM Ref_Template_Types;", "match": {"match": false, "result": [["AD"], ["BK"], ["CV"], ["PP"], ["PPT"]], "gt": [["PP"], ["BK"], ["PPT"], ["AD"], ["CV"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Template_ID\nFROM Templates\nWHERE Template_Type_Code IN ('PP', 'PPT');", "match": {"match": true, "result": [[0], [1], [6], [7], [10], [18], [22], [24], [25]]}}
{"result": "SELECT Template_ID\nFROM Templates\nWHERE Template_Type_Code IN ('PP', 'PPT');", "match": {"match": true, "result": [[0], [1], [6], [7], [10], [18], [22], [24], [25]]}}
{"result": "SELECT COUNT(*) \nFROM Templates \nWHERE Template_Type_Code = 'CV';", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(*) \nFROM Templates \nWHERE Template_Type_Code = 'CV';", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT Version_Number, Template_Type_Code\nFROM Templates\nWHERE Version_Number > 5;", "match": {"match": true, "result": [[9, "PP"], [8, "PPT"], [6, "BK"], [7, "AD"], [9, "CV"], [7, "AD"], [6, "BK"], [9, "AD"], [8, "PP"]]}}
{"result": "SELECT Version_Number, Template_Type_Code\nFROM Templates\nWHERE Version_Number > 5;", "match": {"match": true, "result": [[9, "PP"], [8, "PPT"], [6, "BK"], [7, "AD"], [9, "CV"], [7, "AD"], [6, "BK"], [9, "AD"], [8, "PP"]]}}
{"result": "SELECT Template_Type_Code, COUNT(*) AS Number_of_Templates\nFROM Templates\nGROUP BY Template_Type_Code;", "match": {"match": true, "result": [["AD", 3], ["BK", 6], ["CV", 2], ["PP", 6], ["PPT", 3]]}}
{"result": "SELECT Template_Type_Code, COUNT(*) AS Template_Count\nFROM Templates\nGROUP BY Template_Type_Code;", "match": {"match": true, "result": [["AD", 3], ["BK", 6], ["CV", 2], ["PP", 6], ["PPT", 3]]}}
{"result": "SELECT Template_Type_Code\nFROM Templates\nGROUP BY Template_Type_Code\nORDER BY COUNT(*) DESC\nLIMIT 1;", "match": {"match": true, "result": [["PP"]]}}
{"result": "SELECT Template_Type_Code\nFROM Templates\nGROUP BY Template_Type_Code\nORDER BY COUNT(*) DESC\nLIMIT 1;", "match": {"match": true, "result": [["PP"]]}}
{"result": "SELECT Template_Type_Code\nFROM Templates\nGROUP BY Template_Type_Code\nHAVING COUNT(*) < 3;", "match": {"match": true, "result": [["CV"]]}}
{"result": "SELECT Template_Type_Code\nFROM Templates\nGROUP BY Template_Type_Code\nHAVING COUNT(*) < 3;", "match": {"match": true, "result": [["CV"]]}}
{"result": "SELECT MIN(Version_Number) AS Smallest_Version_Number, Template_Type_Code\nFROM Templates\nGROUP BY Template_Type_Code\nORDER BY Smallest_Version_Number\nLIMIT 1;", "match": {"match": true, "result": [[0, "PP"]]}}
{"result": "SELECT MIN(Version_Number) AS Lowest_Version_Number, Template_Type_Code\nFROM Templates\nGROUP BY Template_Type_Code;", "match": {"match": false, "result": [[7, "AD"], [2, "BK"], [5, "CV"], [0, "PP"], [1, "PPT"]], "gt": [[0, "PP"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.Template_Type_Code\nFROM Documents D\nJOIN Templates T ON D.Template_ID = T.Template_ID\nWHERE D.Document_Name = 'Data base';", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT t.Template_Type_Code\nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID\nWHERE d.Document_Name = 'Data base';", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT Document_Name\nFROM Documents d\nJOIN Templates t ON d.Template_ID = t.Template_ID\nWHERE t.Template_Type_Code = 'BK';", "match": {"match": true, "result": [["Robbin CV"], ["Data base"], ["How to read a book"], ["Palm reading"], ["About Korea"]]}}
{"result": "SELECT Document_Name\nFROM Documents d\nJOIN Templates t ON d.Template_ID = t.Template_ID\nWHERE t.Template_Type_Code = 'BK';", "match": {"match": true, "result": [["Robbin CV"], ["Data base"], ["How to read a book"], ["Palm reading"], ["About Korea"]]}}
{"result": "SELECT \n    r.Template_Type_Code, \n    COUNT(d.Document_ID) AS Number_of_Documents\nFROM \n    Ref_Template_Types r\nLEFT JOIN \n    Templates t ON r.Template_Type_Code = t.Template_Type_Code\nLEFT JOIN \n    Documents d ON t.Template_ID = d.Template_ID\nGROUP BY \n    r.Template_Type_Code;", "match": {"match": false, "result": [["AD", 3], ["BK", 5], ["CV", 0], ["PP", 4], ["PPT", 3]], "gt": [["AD", 3], ["BK", 5], ["PP", 4], ["PPT", 3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT r.Template_Type_Code, COUNT(d.Document_ID) AS Document_Count\nFROM Ref_Template_Types r\nLEFT JOIN Templates t ON r.Template_Type_Code = t.Template_Type_Code\nLEFT JOIN Documents d ON t.Template_ID = d.Template_ID\nGROUP BY r.Template_Type_Code;", "match": {"match": false, "result": [["AD", 3], ["BK", 5], ["CV", 0], ["PP", 4], ["PPT", 3]], "gt": [["AD", 3], ["BK", 5], ["PP", 4], ["PPT", 3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT t.Template_Type_Code\nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID\nGROUP BY t.Template_Type_Code\nORDER BY COUNT(d.Document_ID) DESC\nLIMIT 1;", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT t.Template_Type_Code\nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID\nGROUP BY t.Template_Type_Code\nORDER BY COUNT(*) DESC\nLIMIT 1;", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT Template_Type_Code\nFROM Ref_Template_Types\nWHERE Template_Type_Code NOT IN (\n    SELECT DISTINCT T.Template_Type_Code\n    FROM Templates T\n    JOIN Documents D ON T.Template_ID = D.Template_ID\n);", "match": {"match": true, "result": [["CV"]]}}
{"result": "SELECT Template_Type_Code\nFROM Ref_Template_Types\nWHERE Template_Type_Code NOT IN (\n    SELECT DISTINCT Template_Type_Code\n    FROM Templates\n    WHERE Template_ID IN (\n        SELECT DISTINCT Template_ID FROM Documents WHERE Template_ID IS NOT NULL\n    )\n);", "match": {"match": true, "result": [["CV"]]}}
{"result": "SELECT Template_Type_Code, Template_Type_Description\nFROM Ref_Template_Types;", "match": {"match": true, "result": [["PPT", "Presentation"], ["CV", "CV"], ["AD", "Advertisement"], ["PP", "Paper"], ["BK", "Book"]]}}
{"result": "SELECT Template_Type_Code, Template_Type_Description\nFROM Ref_Template_Types;", "match": {"match": true, "result": [["PPT", "Presentation"], ["CV", "CV"], ["AD", "Advertisement"], ["PP", "Paper"], ["BK", "Book"]]}}
{"result": "SELECT Template_Type_Description \nFROM Ref_Template_Types \nWHERE Template_Type_Code = 'AD';", "match": {"match": true, "result": [["Advertisement"]]}}
{"result": "SELECT Template_Type_Description\nFROM Ref_Template_Types\nWHERE Template_Type_Code = 'AD';", "match": {"match": true, "result": [["Advertisement"]]}}
{"result": "SELECT Template_Type_Code\nFROM Ref_Template_Types\nWHERE Template_Type_Description = 'Book';", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT Template_Type_Code\nFROM Ref_Template_Types\nWHERE Template_Type_Description = 'Book';", "match": {"match": true, "result": [["BK"]]}}
{"result": "SELECT DISTINCT r.Template_Type_Description\nFROM Ref_Template_Types r\nJOIN Templates t ON r.Template_Type_Code = t.Template_Type_Code\nJOIN Documents d ON t.Template_ID = d.Template_ID;", "match": {"match": true, "result": [["Presentation"], ["Paper"], ["Book"], ["Advertisement"]]}}
{"result": "SELECT DISTINCT r.Template_Type_Description\nFROM Ref_Template_Types r\nJOIN Templates t ON r.Template_Type_Code = t.Template_Type_Code\nJOIN Documents d ON t.Template_ID = d.Template_ID\nWHERE d.Template_ID IS NOT NULL;", "match": {"match": true, "result": [["Presentation"], ["Paper"], ["Book"], ["Advertisement"]]}}
{"result": "SELECT Template_ID\nFROM Templates\nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Ref_Template_Types.Template_Type_Description = 'Presentation';", "match": {"match": true, "result": [[6], [7], [10]]}}
{"result": "SELECT Template_ID\nFROM Templates t\nJOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code\nWHERE rtt.Template_Type_Description = 'Presentation';", "match": {"match": true, "result": [[6], [7], [10]]}}
{"result": "SELECT COUNT(*) AS Total_Paragraphs FROM Paragraphs;", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) AS Paragraph_Count FROM Paragraphs;", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) \nFROM Paragraphs p\nJOIN Documents d ON p.Document_ID = d.Document_ID\nWHERE d.Document_Name = 'Summer Show';", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(*) \nFROM Paragraphs p\nJOIN Documents d ON p.Document_ID = d.Document_ID\nWHERE d.Document_Name = 'Summer Show';", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea ';", "match": {"match": false, "result": [], "gt": [[null], [null]], "error": "Query result does not match ground truth."}}
{"result": "SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea %';", "match": {"match": false, "result": [], "gt": [[null], [null]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Paragraph_ID, Paragraph_Text\nFROM Paragraphs\nWHERE Document_ID = (\n    SELECT Document_ID\n    FROM Documents\n    WHERE Document_Name = 'Welcome to NY'\n);", "match": {"match": true, "result": [[16615, "Japan"], [608931827, "Micronesia"]]}}
{"result": "SELECT Paragraph_ID, Paragraph_Text\nFROM Paragraphs p\nJOIN Documents d ON p.Document_ID = d.Document_ID\nWHERE d.Document_Name = 'Welcome to NY';", "match": {"match": true, "result": [[16615, "Japan"], [608931827, "Micronesia"]]}}
{"result": "SELECT Paragraph_Text\nFROM Paragraphs p\nJOIN Documents d ON p.Document_ID = d.Document_ID\nWHERE d.Document_Name = 'Customer reviews';", "match": {"match": true, "result": [["Korea"], ["Ukraine"], ["Korea"]]}}
{"result": "SELECT Paragraph_Text\nFROM Paragraphs p\nJOIN Documents d ON p.Document_ID = d.Document_ID\nWHERE d.Document_Name = 'Customer reviews';", "match": {"match": true, "result": [["Korea"], ["Ukraine"], ["Korea"]]}}
{"result": "SELECT Document_ID, COUNT(Paragraph_ID) AS Paragraph_Count\nFROM Paragraphs\nGROUP BY Document_ID\nORDER BY Document_ID;", "match": {"match": true, "result": [[3, 1], [80, 2], [2394, 3], [3830, 1], [33930, 1], [50123, 1], [651512, 2], [3540024, 1], [16514113, 2], [385906526, 1]]}}
{"result": "SELECT Document_ID, COUNT(Paragraph_ID) AS Number_Of_Paragraphs\nFROM Paragraphs\nGROUP BY Document_ID\nORDER BY Document_ID;", "match": {"match": true, "result": [[3, 1], [80, 2], [2394, 3], [3830, 1], [33930, 1], [50123, 1], [651512, 2], [3540024, 1], [16514113, 2], [385906526, 1]]}}
{"result": "SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS Number_of_Paragraphs\nFROM Documents d\nLEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID, d.Document_Name;", "match": {"match": false, "result": [[0, "Introduction of OS", 0], [1, "Understanding DB", 0], [3, "Summer Show", 1], [76, "Robbin CV", 0], [80, "Welcome to NY", 2], [82, "Data base", 0], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [801801, "How to read a book", 0], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "gt": [[3, "Summer Show", 1], [80, "Welcome to NY", 2], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS Number_of_Paragraphs\nFROM Documents d\nLEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID, d.Document_Name;", "match": {"match": false, "result": [[0, "Introduction of OS", 0], [1, "Understanding DB", 0], [3, "Summer Show", 1], [76, "Robbin CV", 0], [80, "Welcome to NY", 2], [82, "Data base", 0], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [801801, "How to read a book", 0], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "gt": [[3, "Summer Show", 1], [80, "Welcome to NY", 2], [2394, "Customer reviews", 3], [3830, "Do not panic", 1], [33930, "How Google people work", 1], [50123, "Learning French", 1], [651512, "How to write a CV", 2], [3540024, "Palm reading", 1], [16514113, "A history of Arts", 2], [385906526, "About Korea", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Document_ID\nFROM Paragraphs\nGROUP BY Document_ID\nHAVING COUNT(*) >= 2;", "match": {"match": true, "result": [[80], [2394], [651512], [16514113]]}}
{"result": "SELECT Document_ID\nFROM Paragraphs\nGROUP BY Document_ID\nHAVING COUNT(Paragraph_ID) >= 2;", "match": {"match": true, "result": [[80], [2394], [651512], [16514113]]}}
{"result": "SELECT d.Document_ID, d.Document_Name\nFROM Documents d\nJOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID, d.Document_Name\nORDER BY COUNT(p.Paragraph_ID) DESC\nLIMIT 1;", "match": {"match": true, "result": [[2394, "Customer reviews"]]}}
{"result": "SELECT d.Document_ID, d.Document_Name\nFROM Documents d\nJOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID, d.Document_Name\nORDER BY COUNT(p.Paragraph_ID) DESC\nLIMIT 1;", "match": {"match": true, "result": [[2394, "Customer reviews"]]}}
{"result": "SELECT Document_ID\nFROM Paragraphs\nGROUP BY Document_ID\nORDER BY COUNT(Paragraph_ID) ASC\nLIMIT 1;", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Document_ID\nFROM Documents\nLEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID\nORDER BY COUNT(Paragraphs.Paragraph_ID) ASC\nLIMIT 1;", "match": {"match": false, "error": "Query execution failed with error: ambiguous column name: Document_ID"}}
{"result": "SELECT Document_ID\nFROM Paragraphs\nGROUP BY Document_ID\nHAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2;", "match": {"match": true, "result": [[3], [80], [3830], [33930], [50123], [651512], [3540024], [16514113], [385906526]]}}
{"result": "SELECT Document_ID\nFROM Paragraphs\nGROUP BY Document_ID\nHAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2;", "match": {"match": true, "result": [[3], [80], [3830], [33930], [50123], [651512], [3540024], [16514113], [385906526]]}}
{"result": "SELECT p1.Document_ID\nFROM Paragraphs p1\nJOIN Paragraphs p2 ON p1.Document_ID = p2.Document_ID\nWHERE p1.Paragraph_Text = 'Brazil'\n  AND p2.Paragraph_Text = 'Ireland';", "match": {"match": true, "result": [[16514113]]}}
{"result": "SELECT DISTINCT d.Document_ID\nFROM Documents d\nJOIN Paragraphs p1 ON d.Document_ID = p1.Document_ID AND p1.Paragraph_Text = 'Brazil'\nJOIN Paragraphs p2 ON d.Document_ID = p2.Document_ID AND p2.Paragraph_Text = 'Ireland';", "match": {"match": true, "result": [[16514113]]}}
{"result": "SELECT COUNT(*) AS teacher_count FROM teacher;", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT COUNT(*) AS total_teachers FROM teacher;", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT Name \nFROM teacher \nORDER BY CAST(Age AS INTEGER) ASC;", "match": {"match": true, "result": [["Vicente Carretero"], ["Gustaaf Deloor"], ["Joseph Huts"], ["John Deloor"], ["Lucy Wong"], ["Anne Walker"], ["Kearsley Brown"]]}}
{"result": "SELECT Name \nFROM teacher \nORDER BY CAST(Age AS INTEGER) ASC;", "match": {"match": true, "result": [["Vicente Carretero"], ["Gustaaf Deloor"], ["Joseph Huts"], ["John Deloor"], ["Lucy Wong"], ["Anne Walker"], ["Kearsley Brown"]]}}
{"result": "SELECT Age, Hometown FROM teacher;", "match": {"match": true, "result": [["32", "Blackrod Urban District"], ["29", "Bolton County Borough"], ["26", "Farnworth Municipal Borough"], ["33", "Horwich Urban District"], ["45", "Kearsley Urban District"], ["41", "Little Lever Urban District"], ["39", "Turton Urban District"]]}}
{"result": "SELECT Age, Hometown FROM teacher;", "match": {"match": true, "result": [["32", "Blackrod Urban District"], ["29", "Bolton County Borough"], ["26", "Farnworth Municipal Borough"], ["33", "Horwich Urban District"], ["45", "Kearsley Urban District"], ["41", "Little Lever Urban District"], ["39", "Turton Urban District"]]}}
{"result": "SELECT Name\nFROM teacher\nWHERE Hometown <> 'Little Lever Urban District';", "match": {"match": false, "result": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Lucy Wong"]], "gt": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Anne Walker"], ["Lucy Wong"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District';", "match": {"match": false, "result": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Lucy Wong"]], "gt": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Anne Walker"], ["Lucy Wong"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT Name\nFROM teacher\nWHERE Age IN ('32', '33');\n```", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "```sql\nSELECT Name\nFROM teacher\nWHERE Age IN ('32', '33');\n```", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT Hometown \nFROM teacher \nORDER BY CAST(Age AS INTEGER) ASC \nLIMIT 1;", "match": {"match": true, "result": [["Farnworth Municipal Borough"]]}}
{"result": "SELECT Hometown \nFROM teacher \nORDER BY CAST(Age AS INTEGER) ASC \nLIMIT 1;", "match": {"match": true, "result": [["Farnworth Municipal Borough"]]}}
{"result": "SELECT Hometown, COUNT(*) AS Number_of_Teachers\nFROM teacher\nGROUP BY Hometown;", "match": {"match": true, "result": [["Blackrod Urban District", 1], ["Bolton County Borough", 1], ["Farnworth Municipal Borough", 1], ["Horwich Urban District", 1], ["Kearsley Urban District", 1], ["Little Lever Urban District", 1], ["Turton Urban District", 1]]}}
{"result": "SELECT Hometown, COUNT(*) AS Teacher_Count\nFROM teacher\nGROUP BY Hometown;", "match": {"match": true, "result": [["Blackrod Urban District", 1], ["Bolton County Borough", 1], ["Farnworth Municipal Borough", 1], ["Horwich Urban District", 1], ["Kearsley Urban District", 1], ["Little Lever Urban District", 1], ["Turton Urban District", 1]]}}
{"result": "SELECT Hometown, COUNT(*) AS Count\nFROM teacher\nGROUP BY Hometown\nORDER BY Count DESC\nLIMIT 1;", "match": {"match": false, "result": [["Turton Urban District", 1]], "gt": [["Turton Urban District"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Hometown, COUNT(*) AS Count\nFROM teacher\nGROUP BY Hometown\nORDER BY Count DESC\nLIMIT 1;", "match": {"match": false, "result": [["Turton Urban District", 1]], "gt": [["Turton Urban District"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Hometown\nFROM teacher\nGROUP BY Hometown\nHAVING COUNT(*) >= 2;", "match": {"match": true, "result": []}}
{"result": "```sql\nSELECT Hometown\nFROM teacher\nGROUP BY Hometown\nHAVING COUNT(*) >= 2;\n```", "match": {"match": true, "result": []}}
{"result": "SELECT teacher.Name, course.Course\nFROM teacher\nJOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID\nJOIN course ON course_arrange.Course_ID = course.Course_ID;", "match": {"match": true, "result": [["Kearsley Brown", "Math"], ["Vicente Carretero", "Math"], ["Gustaaf Deloor", "Science"], ["Anne Walker", "History"], ["Anne Walker", "Bible"], ["Lucy Wong", "Music"]]}}
{"result": "SELECT teacher.Name, course.Course\nFROM teacher\nJOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID\nJOIN course ON course_arrange.Course_ID = course.Course_ID;", "match": {"match": true, "result": [["Kearsley Brown", "Math"], ["Vicente Carretero", "Math"], ["Gustaaf Deloor", "Science"], ["Anne Walker", "History"], ["Anne Walker", "Bible"], ["Lucy Wong", "Music"]]}}
{"result": "```sql\nSELECT t.Name, c.Course\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nJOIN course c ON ca.Course_ID = c.Course_ID\nORDER BY t.Name ASC;\n```", "match": {"match": true, "result": [["Anne Walker", "History"], ["Anne Walker", "Bible"], ["Gustaaf Deloor", "Science"], ["Kearsley Brown", "Math"], ["Lucy Wong", "Music"], ["Vicente Carretero", "Math"]]}}
{"result": "SELECT t.Name, c.Course\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nJOIN course c ON ca.Course_ID = c.Course_ID\nORDER BY t.Name ASC;", "match": {"match": true, "result": [["Anne Walker", "History"], ["Anne Walker", "Bible"], ["Gustaaf Deloor", "Science"], ["Kearsley Brown", "Math"], ["Lucy Wong", "Music"], ["Vicente Carretero", "Math"]]}}
{"result": "SELECT t.Name \nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nJOIN course c ON ca.Course_ID = c.Course_ID\nWHERE c.Course = 'math';", "match": {"match": false, "result": [], "gt": [["Kearsley Brown"], ["Vicente Carretero"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT DISTINCT teacher.Name\nFROM teacher\nJOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID\nJOIN course ON course_arrange.Course_ID = course.Course_ID\nWHERE course.Course LIKE '%math%'\n```", "match": {"match": true, "result": [["Kearsley Brown"], ["Vicente Carretero"]]}}
{"result": "SELECT t.Name, COUNT(ca.Course_ID) AS NumberOfCourses\nFROM teacher t\nLEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nGROUP BY t.Name;", "match": {"match": false, "result": [["Anne Walker", 2], ["Gustaaf Deloor", 1], ["John Deloor", 0], ["Joseph Huts", 0], ["Kearsley Brown", 1], ["Lucy Wong", 1], ["Vicente Carretero", 1]], "gt": [["Anne Walker", 2], ["Gustaaf Deloor", 1], ["Kearsley Brown", 1], ["Lucy Wong", 1], ["Vicente Carretero", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT t.Name, COUNT(ca.Course_ID) AS Number_of_Courses\nFROM teacher t\nLEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nGROUP BY t.Name;", "match": {"match": false, "result": [["Anne Walker", 2], ["Gustaaf Deloor", 1], ["John Deloor", 0], ["Joseph Huts", 0], ["Kearsley Brown", 1], ["Lucy Wong", 1], ["Vicente Carretero", 1]], "gt": [["Anne Walker", 2], ["Gustaaf Deloor", 1], ["Kearsley Brown", 1], ["Lucy Wong", 1], ["Vicente Carretero", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name\nFROM teacher\nWHERE Teacher_ID IN (\n    SELECT Teacher_ID\n    FROM course_arrange\n    GROUP BY Teacher_ID\n    HAVING COUNT(DISTINCT Course_ID) >= 2\n);", "match": {"match": true, "result": [["Anne Walker"]]}}
{"result": "SELECT Name\nFROM teacher\nWHERE Teacher_ID IN (\n    SELECT Teacher_ID\n    FROM course_arrange\n    GROUP BY Teacher_ID\n    HAVING COUNT(DISTINCT Course_ID) >= 2\n);", "match": {"match": true, "result": [["Anne Walker"]]}}
{"result": "SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange);", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT Name \nFROM teacher \nWHERE Teacher_ID NOT IN (\n    SELECT DISTINCT Teacher_ID \n    FROM course_arrange\n);", "match": {"match": true, "result": [["Joseph Huts"], ["John Deloor"]]}}
{"result": "SELECT COUNT(*) \nFROM visitor \nWHERE Age < 30;", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Name \nFROM visitor \nWHERE Level_of_membership > 4 \nORDER BY Level_of_membership DESC;", "match": {"match": true, "result": [["Gonzalo Higua\u00edn "], ["Fernando Gago"], ["Guti Midfielder"]]}}
{"result": "SELECT AVG(Age) \nFROM visitor \nWHERE Level_of_membership <= 4;", "match": {"match": true, "result": [[36.0]]}}
{"result": "```sql\nSELECT Name, Level_of_membership\nFROM visitor\nWHERE Level_of_membership > 4\nORDER BY Age DESC;\n```", "match": {"match": true, "result": [["Fernando Gago", 6], ["Gonzalo Higua\u00edn ", 8], ["Guti Midfielder", 5]]}}
{"result": "SELECT Museum_ID, Name\nFROM museum\nORDER BY Num_of_Staff DESC\nLIMIT 1;", "match": {"match": true, "result": [[1, "Plaza Museum"]]}}
{"result": "SELECT AVG(Num_of_Staff) \nFROM museum \nWHERE Open_Year < '2009';", "match": {"match": true, "result": [[31.333333333333332]]}}
{"result": "SELECT Open_Year, Num_of_Staff\nFROM museum\nWHERE Name = 'Plaza Museum';", "match": {"match": false, "result": [["2000", 62]], "gt": [[62, "2000"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT Name\nFROM museum\nWHERE Num_of_Staff > (\n    SELECT MIN(Num_of_Staff)\n    FROM museum\n    WHERE Open_Year > '2010'\n);\n```", "match": {"match": true, "result": [["Plaza Museum"], ["Capital Plaza Museum"], ["Jefferson Development Museum"]]}}
{"result": "SELECT v.ID, v.Name, v.Age\nFROM visitor v\nJOIN visit vi ON v.ID = vi.visitor_ID\nWHERE vi.Num_of_Ticket > 1;", "match": {"match": false, "result": [[5, "Fernando Gago", 36], [5, "Fernando Gago", 36], [3, "Arjen Robben", 27], [3, "Arjen Robben", 27], [6, "Rafael van der Vaart", 25], [6, "Rafael van der Vaart", 25]], "gt": [[3, "Arjen Robben", 27], [5, "Fernando Gago", 36], [6, "Rafael van der Vaart", 25]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT v.ID, v.Name, v.Level_of_membership\nFROM visitor v\nJOIN (\n    SELECT visitor_ID, SUM(Total_spent) AS total_spent\n    FROM visit\n    GROUP BY visitor_ID\n) vs ON v.ID = vs.visitor_ID\nWHERE vs.total_spent = (\n    SELECT MAX(total_sum) FROM (\n        SELECT SUM(Total_spent) AS total_sum\n        FROM visit\n        GROUP BY visitor_ID\n    ) sub\n)\n```", "match": {"match": false, "result": [[3, "Arjen Robben", 1]], "gt": [["3", "Arjen Robben", 1]], "error": "Query result does not match ground truth."}}
{"result": "SELECT m.Museum_ID, m.Name\nFROM museum m\nJOIN visit v ON m.Museum_ID = v.Museum_ID\nGROUP BY m.Museum_ID, m.Name\nORDER BY SUM(v.Num_of_Ticket) DESC\nLIMIT 1;", "match": {"match": true, "result": [[2, "Capital Plaza Museum"]]}}
{"result": "SELECT Name \nFROM museum \nWHERE Museum_ID NOT IN (\n    SELECT DISTINCT Museum_ID \n    FROM visit\n);", "match": {"match": true, "result": [["Jefferson Development Museum"], ["RiverPark Museum"], ["Place Tower Museum"], ["Central City District Residential Museum"]]}}
{"result": "SELECT v.Name, v.Age\nFROM visitor v\nJOIN visit vi ON v.ID = vi.visitor_ID\nORDER BY vi.Num_of_Ticket DESC\nLIMIT 1;", "match": {"match": true, "result": [["Arjen Robben", 27]]}}
{"result": "SELECT AVG(Num_of_Ticket) AS average_tickets, MAX(Num_of_Ticket) AS max_tickets FROM visit;", "match": {"match": true, "result": [[10.5, 24]]}}
{"result": "SELECT SUM(v.Total_spent)\nFROM visit v\nJOIN visitor vi ON v.visitor_ID = vi.ID\nWHERE vi.Level_of_membership = 1;", "match": {"match": true, "result": [[570.84]]}}
{"result": "SELECT v.Name\nFROM visitor v\nWHERE EXISTS (\n    SELECT 1\n    FROM visit vi\n    JOIN museum m ON vi.Museum_ID = m.Museum_ID\n    WHERE vi.visitor_ID = v.ID AND CAST(m.Open_Year AS INTEGER) < 2009\n)\nAND EXISTS (\n    SELECT 1\n    FROM visit vi\n    JOIN museum m ON vi.Museum_ID = m.Museum_ID\n    WHERE vi.visitor_ID = v.ID AND CAST(m.Open_Year AS INTEGER) > 2011\n);", "match": {"match": true, "result": [["Fernando Gago"]]}}
{"result": "WITH RecentMuseums AS (\n    SELECT Museum_ID\n    FROM museum\n    WHERE Open_Year > '2010'\n),\nVisitorsWithRecentVisits AS (\n    SELECT DISTINCT visitor_ID\n    FROM visit\n    WHERE Museum_ID IN (SELECT Museum_ID FROM RecentMuseums)\n)\nSELECT COUNT(*) \nFROM visitor\nWHERE ID NOT IN (SELECT visitor_ID FROM VisitorsWithRecentVisits);", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(*) \nFROM museum \nWHERE CAST(Open_Year AS INTEGER) > 2013 OR CAST(Open_Year AS INTEGER) < 2008;", "match": {"match": true, "result": [[1]]}}
{"result": "SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';", "match": {"match": true, "result": [[4]]}}
{"result": "SELECT name, tonnage\nFROM ship\nORDER BY name DESC;", "match": {"match": true, "result": [["Three Brothers", "t"], ["Mary", "t"], ["Lettice", "t"], ["HMS Avon", "391"], ["HMS Atalanta", "225"], ["Bon Accord", "t"], ["Bacchus", "t"]]}}
{"result": "SELECT name, date, result FROM battle;", "match": {"match": false, "result": [["Battle of Adrianople", "14 April 1205", "Bulgarian victory"], ["Battle of Serres", "June 1205", "Bulgarian victory"], ["Battle of Rusion", "31 January 1206", "Bulgarian victory"], ["Battle of Rodosto", "February 1206", "Bulgarian victory"], ["Battle of Messinopolis", "4 September 1207", "Bulgarian victory"], ["Battle of Boruy", "June 1205", "Bulgarian victory"], ["Battle of Philippopolis", "31 June 1208", "Latin victory"], ["Siege of Constantinople", "1235", "Two Year Truce"]], "gt": [["Battle of Adrianople", "14 April 1205"], ["Battle of Serres", "June 1205"], ["Battle of Rusion", "31 January 1206"], ["Battle of Rodosto", "February 1206"], ["Battle of Messinopolis", "4 September 1207"], ["Battle of Boruy", "June 1205"], ["Battle of Philippopolis", "31 June 1208"], ["Siege of Constantinople", "1235"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(killed) AS max_death_toll, MIN(killed) AS min_death_toll FROM death;", "match": {"match": true, "result": [[29, 0]]}}
{"result": "SELECT AVG(injured) AS average_injuries FROM death;", "match": {"match": true, "result": [[1.0769230769230769]]}}
{"result": "SELECT killed, injured, note\nFROM death d\nJOIN ship s ON d.caused_by_ship_id = s.id\nWHERE s.tonnage = 't';", "match": {"match": false, "result": [[8, 0, "Dantewada, Chhattisgarh"], [3, 0, "Dantewada, Chhattisgarh"], [25, 0, "Erraboru, Chhattisgarh"], [2, 0, "East Champaran, Bihar"], [0, 0, "Dantewada, Chhattisgarh"], [4, 5, "Dantewada, Chhattisgarh"], [0, 0, "Kanker, Chhattisgarh"], [29, 0, "Dantewada, Chhattisgarh"], [0, 0, "WestMidnapore, West Bengal"], [0, 0, "Bastar, Chattisgarh"], [14, 0, "Bokaro, Jharkhand"]], "gt": [[8, 0], [3, 0], [25, 0], [2, 0], [0, 0], [4, 5], [0, 0], [29, 0], [0, 0], [0, 0], [14, 0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name, result \nFROM battle \nWHERE bulgarian_commander <> 'Boril';", "match": {"match": true, "result": [["Battle of Adrianople", "Bulgarian victory"], ["Battle of Serres", "Bulgarian victory"], ["Battle of Rusion", "Bulgarian victory"], ["Battle of Rodosto", "Bulgarian victory"], ["Battle of Messinopolis", "Bulgarian victory"], ["Siege of Constantinople", "Two Year Truce"]]}}
{"result": "```sql\nSELECT DISTINCT b.id, b.name\nFROM battle b\nJOIN ship s ON b.id = s.lost_in_battle\nWHERE s.ship_type = 'Brig';\n```", "match": {"match": true, "result": [[8, "Siege of Constantinople"], [7, "Battle of Philippopolis"], [6, "Battle of Boruy"], [5, "Battle of Messinopolis"], [4, "Battle of Rodosto"]]}}
{"result": "```sql\nSELECT b.id, b.name\nFROM battle b\nJOIN ship s ON b.id = s.lost_in_battle\nJOIN death d ON s.id = d.caused_by_ship_id\nGROUP BY b.id, b.name\nHAVING SUM(d.killed) > 10;\n```", "match": {"match": true, "result": [[5, "Battle of Messinopolis"], [6, "Battle of Boruy"], [8, "Siege of Constantinople"]]}}
{"result": "SELECT ship.id, ship.name\nFROM ship\nJOIN death ON ship.id = death.caused_by_ship_id\nGROUP BY ship.id, ship.name\nORDER BY SUM(death.injured) DESC\nLIMIT 1;", "match": {"match": false, "result": [[4, "HMS Avon"]], "gt": [[5, "Three Brothers"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT name \nFROM battle \nWHERE bulgarian_commander = 'Kaloyan' \n  AND latin_commander = 'Baldwin I';", "match": {"match": true, "result": [["Battle of Adrianople"]]}}
{"result": "SELECT COUNT(DISTINCT result) FROM battle;", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(*) \nFROM battle b\nWHERE NOT EXISTS (\n    SELECT 1 \n    FROM ship s \n    WHERE s.lost_in_battle = b.id AND s.tonnage = '225'\n);", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT b.name, b.date\nFROM battle b\nJOIN ship s1 ON b.id = s1.lost_in_battle AND s1.name = 'Lettice'\nJOIN ship s2 ON b.id = s2.lost_in_battle AND s2.name = 'HMS Atalanta';", "match": {"match": true, "result": [["Siege of Constantinople", "1235"]]}}
{"result": "SELECT b.name, b.result, b.bulgarian_commander\nFROM battle b\nLEFT JOIN ship s ON s.lost_in_battle = b.id AND s.location = 'English Channel'\nWHERE s.id IS NULL;", "match": {"match": false, "result": [["Battle of Adrianople", "Bulgarian victory", "Kaloyan"], ["Battle of Serres", "Bulgarian victory", "Kaloyan"], ["Battle of Rusion", "Bulgarian victory", "Kaloyan"]], "gt": [["Battle of Adrianople", "Bulgarian victory", "Kaloyan"], ["Battle of Rusion", "Bulgarian victory", "Kaloyan"], ["Battle of Serres", "Bulgarian victory", "Kaloyan"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT note FROM death WHERE note LIKE '%East%';", "match": {"match": true, "result": [["East Champaran, Bihar"]]}}
{"result": "SELECT address_id, line_1, line_2 FROM Addresses;", "match": {"match": false, "result": [[1, "2294 Grant Square Apt. 235", "Apt. 370"], [2, "3999 Aufderhar Ways Suite 593", "Apt. 388"], [3, "67942 Carlotta Ferry Apt. 686", "Apt. 583"], [4, "0144 Lamar Plaza Apt. 346", "Suite 703"], [5, "858 Peggie Bypass Suite 212", "Apt. 335"], [6, "16998 Mraz Lodge", "Apt. 689"], [7, "193 Marlin Brook", "Apt. 406"], [8, "202 Hessel Views Apt. 468", "Apt. 305"], [9, "0643 Muller Vista", "Suite 383"], [10, "7081 Eda Center", "Suite 830"], [11, "9283 Schulist Falls Apt. 037", "Suite 239"], [12, "979 Haag Shores Suite 656", "Apt. 468"], [13, "492 Wilkinson Route", "Suite 865"], [14, "186 Evan Motorway Apt. 409", "Suite 079"], [15, "74046 Metz Walk Apt. 113", "Suite 674"]], "gt": [["2294 Grant Square Apt. 235", "Apt. 370"], ["3999 Aufderhar Ways Suite 593", "Apt. 388"], ["67942 Carlotta Ferry Apt. 686", "Apt. 583"], ["0144 Lamar Plaza Apt. 346", "Suite 703"], ["858 Peggie Bypass Suite 212", "Apt. 335"], ["16998 Mraz Lodge", "Apt. 689"], ["193 Marlin Brook", "Apt. 406"], ["202 Hessel Views Apt. 468", "Apt. 305"], ["0643 Muller Vista", "Suite 383"], ["7081 Eda Center", "Suite 830"], ["9283 Schulist Falls Apt. 037", "Suite 239"], ["979 Haag Shores Suite 656", "Apt. 468"], ["492 Wilkinson Route", "Suite 865"], ["186 Evan Motorway Apt. 409", "Suite 079"], ["74046 Metz Walk Apt. 113", "Suite 674"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT line_1, line_2 FROM Addresses;", "match": {"match": true, "result": [["2294 Grant Square Apt. 235", "Apt. 370"], ["3999 Aufderhar Ways Suite 593", "Apt. 388"], ["67942 Carlotta Ferry Apt. 686", "Apt. 583"], ["0144 Lamar Plaza Apt. 346", "Suite 703"], ["858 Peggie Bypass Suite 212", "Apt. 335"], ["16998 Mraz Lodge", "Apt. 689"], ["193 Marlin Brook", "Apt. 406"], ["202 Hessel Views Apt. 468", "Apt. 305"], ["0643 Muller Vista", "Suite 383"], ["7081 Eda Center", "Suite 830"], ["9283 Schulist Falls Apt. 037", "Suite 239"], ["979 Haag Shores Suite 656", "Apt. 468"], ["492 Wilkinson Route", "Suite 865"], ["186 Evan Motorway Apt. 409", "Suite 079"], ["74046 Metz Walk Apt. 113", "Suite 674"]]}}
{"result": "SELECT COUNT(*) AS total_courses FROM Courses;", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) AS total_courses FROM Courses;", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT course_description FROM Courses WHERE course_name LIKE '%math%';", "match": {"match": true, "result": [["q"]]}}
{"result": "```sql\nSELECT course_description\nFROM Courses\nWHERE course_name LIKE '%math%'\nOR course_name LIKE '%Math%'\nOR course_name LIKE '%MATH%';\n```", "match": {"match": true, "result": [["q"]]}}
{"result": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';", "match": {"match": true, "result": [["148"]]}}
{"result": "SELECT zip_postcode \nFROM Addresses \nWHERE city = 'Port Chelsea';", "match": {"match": true, "result": [["148"]]}}
{"result": "SELECT D.department_id, D.department_name\nFROM Departments D\nJOIN Degree_Programs DP ON D.department_id = DP.department_id\nGROUP BY D.department_id, D.department_name\nORDER BY COUNT(DP.degree_program_id) DESC\nLIMIT 1;", "match": {"match": false, "result": [[8, "statistics"]], "gt": [["statistics", 8]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT d.department_id, d.department_name\nFROM Departments d\nJOIN Degree_Programs dp ON d.department_id = dp.department_id\nGROUP BY d.department_id, d.department_name\nORDER BY COUNT(dp.degree_program_id) DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [[8, "statistics"]], "gt": [["statistics", 8]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;", "match": {"match": true, "result": [[10]]}}
{"result": "SELECT COUNT(DISTINCT department_id) AS department_count FROM Degree_Programs;", "match": {"match": true, "result": [[10]]}}
{"result": "```sql\nSELECT COUNT(DISTINCT degree_summary_name) AS different_degree_names_count\nFROM Degree_Programs;\n```", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(*) AS number_of_degrees FROM Degree_Programs;", "match": {"match": false, "result": [[15]], "gt": [[3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) \nFROM Degree_Programs dp\nJOIN Departments d ON dp.department_id = d.department_id\nWHERE d.department_name = 'engineering';", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT COUNT(*) \nFROM Degree_Programs dp\nJOIN Departments d ON dp.department_id = d.department_id\nWHERE d.department_name = 'engineering';", "match": {"match": true, "result": [[0]]}}
{"result": "SELECT section_name, section_description FROM Sections;", "match": {"match": true, "result": [["a", "non"], ["b", "voluptatem"], ["c", "qui"], ["d", "voluptas"], ["e", "ex"], ["f", "doloremque"], ["g", "provident"], ["h", "et"], ["j", "quis"], ["k", "nesciunt"], ["l", "ad"], ["o", "et"], ["p", "facilis"], ["u", "reprehenderit"], ["y", "qui"]]}}
{"result": "SELECT section_name, section_description FROM Sections;", "match": {"match": true, "result": [["a", "non"], ["b", "voluptatem"], ["c", "qui"], ["d", "voluptas"], ["e", "ex"], ["f", "doloremque"], ["g", "provident"], ["h", "et"], ["j", "quis"], ["k", "nesciunt"], ["l", "ad"], ["o", "et"], ["p", "facilis"], ["u", "reprehenderit"], ["y", "qui"]]}}
{"result": "```sql\nSELECT c.course_id, c.course_name\nFROM Courses c\nLEFT JOIN Sections s ON c.course_id = s.course_id\nGROUP BY c.course_id, c.course_name\nHAVING COUNT(s.section_id) <= 2;\n```", "match": {"match": false, "result": [[1, "ds"], [2, "math"], [3, "os"], [4, "en"], [5, "fr"], [6, "la"], [7, "cal"], [8, "nlp"], [9, "dl"], [10, "ml"], [11, "ai"], [12, "db"], [13, "rs"], [14, "pl"], [15, "oop"]], "gt": [["ds", 1], ["math", 2], ["en", 4], ["fr", 5], ["la", 6], ["cal", 7], ["nlp", 8], ["dl", 9], ["ml", 10], ["db", 12], ["pl", 14]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT c.course_id, c.course_name\nFROM Courses c\nLEFT JOIN Sections s ON c.course_id = s.course_id\nGROUP BY c.course_id, c.course_name\nHAVING COUNT(s.section_id) < 2;\n```", "match": {"match": false, "result": [[2, "math"], [3, "os"], [4, "en"], [6, "la"], [7, "cal"], [9, "dl"], [10, "ml"], [11, "ai"], [12, "db"], [13, "rs"], [15, "oop"]], "gt": [["ds", 1], ["math", 2], ["en", 4], ["fr", 5], ["la", 6], ["cal", 7], ["nlp", 8], ["dl", 9], ["ml", 10], ["db", 12], ["pl", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT section_name FROM Sections ORDER BY section_name DESC;", "match": {"match": true, "result": [["y"], ["u"], ["p"], ["o"], ["l"], ["k"], ["j"], ["h"], ["g"], ["f"], ["e"], ["d"], ["c"], ["b"], ["a"]]}}
{"result": "SELECT section_name\nFROM Sections\nORDER BY section_name DESC;", "match": {"match": true, "result": [["y"], ["u"], ["p"], ["o"], ["l"], ["k"], ["j"], ["h"], ["g"], ["f"], ["e"], ["d"], ["c"], ["b"], ["a"]]}}
{"result": "SELECT s.semester_id, s.semester_name\nFROM Semesters s\nJOIN Student_Enrolment se ON s.semester_id = se.semester_id\nGROUP BY s.semester_id, s.semester_name\nORDER BY COUNT(se.student_enrolment_id) DESC\nLIMIT 1;", "match": {"match": false, "result": [[2, "summer 2010"]], "gt": [["summer 2010", 2]], "error": "Query result does not match ground truth."}}
{"result": "WITH StudentCounts AS (\n  SELECT\n    se.semester_id,\n    s.semester_name,\n    COUNT(DISTINCT se.student_id) AS student_count\n  FROM Student_Enrolment se\n  JOIN Semesters s ON se.semester_id = s.semester_id\n  GROUP BY se.semester_id, s.semester_name\n),\nMaxCounts AS (\n  SELECT MAX(student_count) AS max_count\n  FROM StudentCounts\n)\nSELECT semester_id, semester_name\nFROM StudentCounts\nWHERE student_count = (SELECT max_count FROM MaxCounts);", "match": {"match": false, "result": [[2, "summer 2010"], [13, "fall 2018"]], "gt": [["summer 2010", 2]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT department_description\nFROM Departments\nWHERE department_name LIKE '%the computer%'\n```", "match": {"match": false, "result": [], "gt": [["error"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT department_description\nFROM Departments\nWHERE department_name LIKE '%computer%';", "match": {"match": true, "result": [["error"]]}}
{"result": "SELECT s.student_id, s.first_name, s.middle_name, s.last_name\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nGROUP BY s.student_id, s.first_name, s.middle_name, s.last_name, se.semester_id\nHAVING COUNT(DISTINCT se.degree_program_id) = 2;", "match": {"match": false, "result": [[7, "Frida", "Aisha", "Huel"]], "gt": [["Jarvis", "Aaliyah", "Carroll", 4], ["Reva", "Golda", "Osinski", 9], ["Jordy", "Osborne", "Rempel", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.student_id, s.first_name, s.middle_name, s.last_name\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nGROUP BY s.student_id, s.first_name, s.middle_name, s.last_name, se.semester_id\nHAVING COUNT(DISTINCT se.degree_program_id) = 2;", "match": {"match": false, "result": [[7, "Frida", "Aisha", "Huel"]], "gt": [["Jarvis", "Aaliyah", "Carroll", 4], ["Reva", "Golda", "Osinski", 9], ["Jordy", "Osborne", "Rempel", 14]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT s.first_name, s.middle_name, s.last_name\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nWHERE dp.degree_summary_name LIKE '%Bachelor%';", "match": {"match": true, "result": [["Reva", "Golda", "Osinski"], ["Frida", "Aisha", "Huel"], ["Jarvis", "Aaliyah", "Carroll"], ["Milton", "Vaughn", "Christiansen"], ["Stanford", "Mona", "Rogahn"]]}}
{"result": "SELECT s.first_name, s.middle_name, s.last_name\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nWHERE dp.degree_summary_name LIKE '%Bachelors%';", "match": {"match": false, "result": [], "gt": [["Reva", "Golda", "Osinski"], ["Frida", "Aisha", "Huel"], ["Jarvis", "Aaliyah", "Carroll"], ["Milton", "Vaughn", "Christiansen"], ["Stanford", "Mona", "Rogahn"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT dp.degree_summary_name\nFROM Student_Enrolment se\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nGROUP BY dp.degree_summary_name\nORDER BY COUNT(DISTINCT se.student_id) DESC\nLIMIT 1;", "match": {"match": false, "result": [["Master"]], "gt": [["Bachelor"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT degree_summary_name\nFROM Degree_Programs\nJOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id\nGROUP BY Degree_Programs.degree_program_id, degree_summary_name\nORDER BY COUNT(DISTINCT student_id) DESC\nLIMIT 1;", "match": {"match": true, "result": [["Bachelor"]]}}
{"result": "SELECT degree_program_id, degree_summary_name\nFROM Degree_Programs\nWHERE degree_program_id = (\n    SELECT degree_program_id\n    FROM Student_Enrolment\n    GROUP BY degree_program_id\n    ORDER BY COUNT(student_id) DESC\n    LIMIT 1\n);", "match": {"match": true, "result": [[9, "Bachelor"]]}}
{"result": "SELECT degree_program_id, degree_summary_name\nFROM Degree_Programs\nWHERE degree_program_id = (\n    SELECT degree_program_id\n    FROM Student_Enrolment\n    GROUP BY degree_program_id\n    ORDER BY COUNT(student_id) DESC\n    LIMIT 1\n);", "match": {"match": true, "result": [[9, "Bachelor"]]}}
{"result": "SELECT \n    s.student_id, \n    s.first_name, \n    s.middle_name, \n    s.last_name, \n    COUNT(se.student_enrolment_id) AS enrollment_count\nFROM \n    Students s\nJOIN \n    Student_Enrolment se ON s.student_id = se.student_id\nGROUP BY \n    s.student_id, s.first_name, s.middle_name, s.last_name\nORDER BY \n    enrollment_count DESC\nLIMIT 1;", "match": {"match": false, "result": [[6, "Stanford", "Mona", "Rogahn", 3]], "gt": [[7, "Frida", "Aisha", "Huel", 3, 7]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_enrolment_id) AS number_of_enrollments\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nGROUP BY s.student_id, s.first_name, s.middle_name, s.last_name\nORDER BY number_of_enrollments DESC\nLIMIT 1;", "match": {"match": false, "result": [[6, "Stanford", "Mona", "Rogahn", 3]], "gt": [[7, "Frida", "Aisha", "Huel", 3, 7]], "error": "Query result does not match ground truth."}}
{"result": "SELECT semester_name\nFROM Semesters s\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM Student_Enrolment se\n    WHERE se.semester_id = s.semester_id\n);", "match": {"match": true, "result": [["fall 2010"], ["spring 2013"], ["spring 2014"], ["spring 2016"], ["spring 2017"], ["winter 2018"]]}}
{"result": "SELECT semester_name\nFROM Semesters\nWHERE semester_id NOT IN (\n    SELECT DISTINCT semester_id\n    FROM Student_Enrolment\n);", "match": {"match": true, "result": [["fall 2010"], ["spring 2013"], ["spring 2014"], ["spring 2016"], ["spring 2017"], ["winter 2018"]]}}
{"result": "SELECT DISTINCT c.course_name\nFROM Courses c\nJOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id;", "match": {"match": true, "result": [["la"], ["pl"], ["ai"], ["math"], ["ml"], ["os"], ["en"], ["nlp"], ["rs"], ["db"]]}}
{"result": "```sql\nSELECT DISTINCT c.course_name\nFROM Courses c\nJOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id;\n```", "match": {"match": true, "result": [["la"], ["pl"], ["ai"], ["math"], ["ml"], ["os"], ["en"], ["nlp"], ["rs"], ["db"]]}}
{"result": "SELECT c.course_name\nFROM Courses c\nJOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id\nGROUP BY c.course_id, c.course_name\nORDER BY COUNT(sec.student_course_id) DESC\nLIMIT 1;", "match": {"match": false, "result": [["math"]], "gt": [["rs"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT c.course_name\nFROM Courses c\nJOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id\nGROUP BY c.course_id, c.course_name\nORDER BY COUNT(DISTINCT sec.student_enrolment_id) DESC\nLIMIT 1;", "match": {"match": false, "result": [["math"]], "gt": [["rs"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT s.last_name\nFROM Students s\nLEFT JOIN Student_Enrolment se ON s.student_id = se.student_id\nJOIN Addresses a ON s.current_address_id = a.address_id\nWHERE a.state_province_county = 'North Carolina'\nAND se.student_id IS NULL;\n```", "match": {"match": false, "result": [], "gt": [["Gleichner"], ["Weimann"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT last_name\nFROM Students s\nJOIN Addresses a ON s.current_address_id = a.address_id\nWHERE a.state_province_county = 'North Carolina'\n  AND NOT EXISTS (\n    SELECT 1\n    FROM Student_Enrolment se\n    WHERE se.student_id = s.student_id\n  );", "match": {"match": false, "result": [], "gt": [["Gleichner"], ["Weimann"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.transcript_id, T.transcript_date\nFROM Transcripts T\nJOIN Transcript_Contents TC ON T.transcript_id = TC.transcript_id\nGROUP BY T.transcript_id, T.transcript_date\nHAVING COUNT(TC.student_course_id) >= 2;", "match": {"match": false, "result": [[5, "2013-06-30 13:01:40"], [6, "2010-12-13 10:55:15"], [8, "1975-05-06 12:04:47"], [15, "1998-11-22 12:18:29"]], "gt": [["2013-06-30 13:01:40", 5], ["2010-12-13 10:55:15", 6], ["1975-05-06 12:04:47", 8], ["1998-11-22 12:18:29", 15]], "error": "Query result does not match ground truth."}}
{"result": "SELECT t.transcript_id, t.transcript_date\nFROM Transcripts t\nJOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id\nGROUP BY t.transcript_id, t.transcript_date\nHAVING COUNT(tc.student_course_id) >= 2;", "match": {"match": false, "result": [[5, "2013-06-30 13:01:40"], [6, "2010-12-13 10:55:15"], [8, "1975-05-06 12:04:47"], [15, "1998-11-22 12:18:29"]], "gt": [["2013-06-30 13:01:40", 5], ["2010-12-13 10:55:15", 6], ["1975-05-06 12:04:47", 8], ["1998-11-22 12:18:29", 15]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT cell_mobile_number\nFROM Students\nWHERE first_name = 'Timmothy' AND last_name = 'Ward';\n```", "match": {"match": true, "result": [["(096)889-8954x524"]]}}
{"result": "SELECT cell_mobile_number\nFROM Students\nWHERE first_name = 'Timmothy' AND last_name = 'Ward';", "match": {"match": false, "result": [["(096)889-8954x524"]], "gt": [], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT first_name, middle_name, last_name\nFROM Students\nORDER BY date_first_registered\nLIMIT 1;\n```", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT first_name, middle_name, last_name\nFROM Students\nORDER BY date_first_registered\nLIMIT 1;", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT first_name, middle_name, last_name\nFROM Students\nWHERE date_left IS NOT NULL\nORDER BY date_left ASC\nLIMIT 1;", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT first_name, middle_name, last_name\nFROM Students\nWHERE date_left IS NOT NULL\nORDER BY date_left ASC\nLIMIT 1;", "match": {"match": true, "result": [["Timmothy", "Anna", "Ward"]]}}
{"result": "SELECT first_name\nFROM Students\nWHERE permanent_address_id <> current_address_id;", "match": {"match": true, "result": [["Timmothy"], ["Hobart"], ["Warren"], ["Jarvis"], ["Stanford"], ["Frida"], ["Delaney"], ["Reva"], ["Helga"], ["Gregg"], ["Orrin"], ["Deon"], ["Jordy"], ["Jett"]]}}
{"result": "SELECT first_name\nFROM Students\nWHERE current_address_id <> permanent_address_id;", "match": {"match": true, "result": [["Timmothy"], ["Hobart"], ["Warren"], ["Jarvis"], ["Stanford"], ["Frida"], ["Delaney"], ["Reva"], ["Helga"], ["Gregg"], ["Orrin"], ["Deon"], ["Jordy"], ["Jett"]]}}
{"result": "SELECT \n    a.address_id, \n    a.line_1, \n    a.line_2, \n    a.line_3, \n    a.city, \n    a.zip_postcode, \n    a.state_province_county, \n    a.country, \n    a.other_address_details\nFROM \n    Addresses a\nJOIN \n    Students s ON a.address_id = s.current_address_id\nGROUP BY \n    a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country, a.other_address_details\nORDER BY \n    COUNT(s.student_id) DESC\nLIMIT 1;", "match": {"match": false, "result": [[9, "0643 Muller Vista", "Suite 383", null, "Port Elvisfurt", "777", "NorthCarolina", "Gabon", null]], "gt": [[9, "0643 Muller Vista", "Suite 383"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT a.address_id, a.line_1, a.line_2\nFROM Addresses a\nJOIN (\n    SELECT current_address_id AS address_id, COUNT(*) AS student_count\n    FROM Students\n    GROUP BY current_address_id\n    UNION ALL\n    SELECT permanent_address_id AS address_id, COUNT(*) AS student_count\n    FROM Students\n    GROUP BY permanent_address_id\n) AS addr_counts ON a.address_id = addr_counts.address_id\nGROUP BY a.address_id, a.line_1, a.line_2\nORDER BY SUM(addr_counts.student_count) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [[9, "0643 Muller Vista", "Suite 383"]]}}
{"result": "SELECT AVG(JULIANDAY(transcript_date)) AS avg_transcript_print_date_julian,\n       DATETIME(AVG(JULIANDAY(transcript_date)), 'start of day') AS avg_transcript_print_date\nFROM Transcripts;", "match": {"match": false, "result": [[2448053.8884891975, "1990-06-11 00:00:00"]], "gt": [[1989.9333333333334]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(CAST(strftime('%s', transcript_date) AS INTEGER)) AS avg_transcript_date_seconds\nFROM Transcripts;", "match": {"match": false, "result": [[645095965.4666667]], "gt": [[1989.9333333333334]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT transcript_date, other_details\nFROM Transcripts\nORDER BY transcript_date\nLIMIT 1;\n```", "match": {"match": true, "result": [["1975-05-06 12:04:47", null]]}}
{"result": "```sql\nSELECT MIN(transcript_date) AS earliest_transcript_date, other_details\nFROM Transcripts\nWHERE transcript_date = (SELECT MIN(transcript_date) FROM Transcripts);\n```", "match": {"match": true, "result": [["1975-05-06 12:04:47", null]]}}
{"result": "SELECT COUNT(*) AS total_transcripts FROM Transcripts;", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT COUNT(*) AS transcript_count FROM Transcripts;", "match": {"match": true, "result": [[15]]}}
{"result": "SELECT MAX(transcript_date) AS last_transcript_release_date FROM Transcripts;", "match": {"match": true, "result": [["2013-06-30 13:01:40"]]}}
{"result": "SELECT MAX(transcript_date) AS last_transcript_date FROM Transcripts;", "match": {"match": true, "result": [["2013-06-30 13:01:40"]]}}
{"result": "SELECT student_course_id, COUNT(DISTINCT transcript_id) AS transcript_count\nFROM Transcript_Contents\nGROUP BY student_course_id\nORDER BY transcript_count DESC\nLIMIT 1;", "match": {"match": false, "result": [[0, 4]], "gt": [[4, 0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT sec.student_course_id, COUNT(tc.transcript_id) AS transcript_count\nFROM Student_Enrolment_Courses sec\nJOIN Transcript_Contents tc ON sec.student_course_id = tc.student_course_id\nGROUP BY sec.student_course_id\nORDER BY transcript_count DESC\nLIMIT 1;", "match": {"match": false, "result": [[0, 4]], "gt": [[4, 0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT transcript_id, transcript_date\nFROM Transcripts\nWHERE transcript_id = (\n    SELECT transcript_id\n    FROM Transcript_Contents\n    GROUP BY transcript_id\n    ORDER BY COUNT(student_course_id)\n    LIMIT 1\n);", "match": {"match": false, "result": [[2, "1975-10-28 15:16:51"]], "gt": [["1975-10-28 15:16:51", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT transcript_id, transcript_date\nFROM Transcripts\nWHERE transcript_id = (\n    SELECT transcript_id\n    FROM (\n        SELECT transcript_id, COUNT(student_course_id) AS course_count\n        FROM Transcript_Contents\n        GROUP BY transcript_id\n        ORDER BY course_count ASC\n        LIMIT 1\n    ) AS subquery\n);", "match": {"match": false, "result": [[2, "1975-10-28 15:16:51"]], "gt": [["1975-10-28 15:16:51", 2]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT s.semester_id, sem.semester_name\nFROM Student_Enrolment s\nJOIN Degree_Programs d ON s.degree_program_id = d.degree_program_id\nJOIN Semesters sem ON s.semester_id = sem.semester_id\nWHERE d.degree_summary_name LIKE '%Master%'\nAND s.semester_id IN (\n    SELECT s2.semester_id\n    FROM Student_Enrolment s2\n    JOIN Degree_Programs d2 ON s2.degree_program_id = d2.degree_program_id\n    WHERE d2.degree_summary_name LIKE '%Bachelor%'\n);", "match": {"match": false, "result": [[13, "fall 2018"]], "gt": [[13]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT se1.semester_id\nFROM Student_Enrolment se1\nJOIN Degree_Programs dp1 ON se1.degree_program_id = dp1.degree_program_id\nJOIN Student_Enrolment se2 ON se1.semester_id = se2.semester_id\nJOIN Degree_Programs dp2 ON se2.degree_program_id = dp2.degree_program_id\nWHERE dp1.degree_summary_name LIKE '%Masters%'\n  AND dp2.degree_summary_name LIKE '%Bachelors%';", "match": {"match": false, "result": [], "gt": [[13]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT current_address_id) AS different_current_addresses FROM Students;", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT DISTINCT \n    a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country, a.other_address_details\nFROM Addresses a\nJOIN Students s ON a.address_id = s.current_address_id\nUNION\nSELECT DISTINCT \n    a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country, a.other_address_details\nFROM Addresses a\nJOIN Students s ON a.address_id = s.permanent_address_id;", "match": {"match": false, "result": [[1, "2294 Grant Square Apt. 235", "Apt. 370", null, "Port Chelsea", "148", "Virginia", "Iceland", null], [2, "3999 Aufderhar Ways Suite 593", "Apt. 388", null, "Lake Laishafurt", "943", "Kentucky", "Burundi", null], [3, "67942 Carlotta Ferry Apt. 686", "Apt. 583", null, "Goodwinhaven", "541", "Kansas", "Saudi Arabia", null], [4, "0144 Lamar Plaza Apt. 346", "Suite 703", null, "Port Evanston", "847", "Washington", "Angola", null], [5, "858 Peggie Bypass Suite 212", "Apt. 335", null, "Michelleburgh", "446", "Hawaii", "Haiti", null], [6, "16998 Mraz Lodge", "Apt. 689", null, "North Omer", "902", "Kentucky", "Gibraltar", null], [7, "193 Marlin Brook", "Apt. 406", null, "Herzoghaven", "068", "Arkansas", "Cook Islands", null], [8, "202 Hessel Views Apt. 468", "Apt. 305", null, "Mariliehaven", "638", "Idaho", "Croatia", null], [9, "0643 Muller Vista", "Suite 383", null, "Port Elvisfurt", "777", "NorthCarolina", "Gabon", null], [10, "7081 Eda Center", "Suite 830", null, "Rutherfordtown", "839", "Delaware", "Kyrgyz Republic", null], [11, "9283 Schulist Falls Apt. 037", "Suite 239", null, "South Palma", "400", "WestVirginia", "Bermuda", null], [12, "979 Haag Shores Suite 656", "Apt. 468", null, "Prohaskafort", "590", "SouthDakota", "Lesotho", null], [14, "186 Evan Motorway Apt. 409", "Suite 079", null, "Lake Careyberg", "895", "Kentucky", "New Caledonia", null], [15, "74046 Metz Walk Apt. 113", "Suite 674", null, "Port Oceane", "669", "Wyoming", "Norfolk Island", null]], "gt": [[9]], "error": "Query result does not match ground truth."}}
{"result": "SELECT * FROM Students ORDER BY last_name DESC, first_name DESC, middle_name DESC;", "match": {"match": false, "result": [[13, 9, 8, "Deon", "Brooklyn", "Weimann", "(213)445-0399x85208", "jhuel@example.com", "68095", "1986-02-24 21:12:23", "2014-05-30 23:32:02", "assumenda"], [1, 10, 15, "Timmothy", "Anna", "Ward", "(096)889-8954x524", "erwin.zboncak@example.com", "965", "1971-02-05 07:28:23", "1971-05-17 19:28:49", "quia"], [11, 14, 4, "Gregg", "Mossie", "Schuppe", "(462)246-7921", "nbruen@example.org", "494", "1989-05-24 23:31:29", "1975-10-09 00:49:27", "omnis"], [6, 6, 3, "Stanford", "Mona", "Rogahn", "436.613.7683", "skassulke@example.net", "248", "1997-03-20 16:47:25", "2016-04-09 12:27:04", "qui"], [14, 12, 11, "Jordy", "Osborne", "Rempel", "(605)919-3594x3661", "gracie29@example.com", "34458427", "2004-12-24 12:36:46", "1999-08-24 00:07:10", "et"], [9, 2, 15, "Reva", "Golda", "Osinski", "(507)365-8405", "qo'kon@example.com", "39", "2017-01-04 08:10:25", "1990-09-01 05:03:27", "nesciunt"], [10, 15, 14, "Helga", "Cleve", "Mohr", "677.401.9382", "nya.lesch@example.net", "43", "2009-09-25 00:14:25", "2017-07-09 21:38:43", "rerum"], [12, 14, 9, "Orrin", "Neal", "Kemmer", "(982)153-1469x1733", "beth42@example.org", "6274274", "2005-12-15 08:42:10", "2006-08-04 17:26:49", "non"], [15, 2, 9, "Jett", "Alberta", "Jaskolski", "877.549.9067x8723", "mya88@example.org", "156", "1982-06-19 13:15:18", "1982-06-11 00:25:39", "omnis"], [7, 15, 3, "Frida", "Aisha", "Huel", "1-879-796-8987x164", "baumbach.lucious@example.org", "668", "2018-03-13 09:56:22", "1997-11-16 08:54:33", "dolorum"], [3, 9, 5, "Warren", "Violet", "Gleichner", "07661787471", "johns.unique@example.net", "3", "2007-08-29 23:25:41", "2007-03-31 09:53:19", "facilis"], [5, 9, 9, "Milton", "Vaughn", "Christiansen", "171-642-5684", "lhartmann@example.org", "", "1973-05-19 19:12:46", "2007-11-28 12:50:21", "laborum"], [4, 7, 11, "Jarvis", "Aaliyah", "Carroll", "09700166582", "jillian26@example.net", "141072406", "2014-03-28 05:48:23", "2007-08-02 04:12:58", "atque"], [2, 12, 5, "Hobart", "Lorenz", "Balistreri", "1-009-710-5151", "swift.kolby@example.com", "304246", "1976-10-26 02:33:06", "2013-10-05 17:41:28", "autem"], [8, 1, 5, "Delaney", "Judd", "Ankunding", "03174364122", "dell43@example.net", "402", "1982-02-14 08:46:35", "2004-12-08 05:29:11", "voluptatem"]], "gt": [["voluptatem"], ["rerum"], ["quia"], ["qui"], ["omnis"], ["omnis"], ["non"], ["nesciunt"], ["laborum"], ["facilis"], ["et"], ["dolorum"], ["autem"], ["atque"], ["assumenda"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT other_student_details FROM Students ORDER BY last_name DESC, first_name DESC, middle_name DESC;", "match": {"match": false, "result": [["assumenda"], ["quia"], ["omnis"], ["qui"], ["et"], ["nesciunt"], ["rerum"], ["non"], ["omnis"], ["dolorum"], ["facilis"], ["laborum"], ["atque"], ["autem"], ["voluptatem"]], "gt": [["voluptatem"], ["rerum"], ["quia"], ["qui"], ["omnis"], ["omnis"], ["non"], ["nesciunt"], ["laborum"], ["facilis"], ["et"], ["dolorum"], ["autem"], ["atque"], ["assumenda"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT * FROM Sections WHERE section_name = 'h';", "match": {"match": false, "result": [[8, 14, "h", "et", null]], "gt": [["et"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT section_description FROM Sections WHERE section_name = 'h';", "match": {"match": true, "result": [["et"]]}}
{"result": "SELECT first_name\nFROM Students\nJOIN Addresses ON Students.permanent_address_id = Addresses.address_id\nWHERE Addresses.country = 'Haiti'\n   OR Students.cell_mobile_number = '09700166582';", "match": {"match": false, "result": [["Hobart"], ["Warren"], ["Jarvis"], ["Delaney"]], "gt": [["Jarvis"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT first_name\nFROM Students\nJOIN Addresses ON Students.permanent_address_id = Addresses.address_id\nWHERE Addresses.country = 'Haiti' OR cell_mobile_number = '09700166582';", "match": {"match": false, "result": [["Hobart"], ["Warren"], ["Jarvis"], ["Delaney"]], "gt": [["Jarvis"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Title FROM Cartoon ORDER BY Title ASC;", "match": {"match": true, "result": [["Dawn of the Dead Man!"], ["Day of the Dark Knight!"], ["Deep Cover for Batman!"], ["Enter the Outsiders!"], ["Evil Under the Sea!"], ["Fall of the Blue Beetle!"], ["Invasion of the Secret Santas!"], ["Journey to the Center of the Bat!"], ["Return of the Fearsome Fangs!"], ["Terror on Dinosaur Island!"], ["The Eyes of Despero!"], ["The Rise of the Blue Beetle!"]]}}
{"result": "SELECT Title FROM Cartoon ORDER BY Title ASC;", "match": {"match": true, "result": [["Dawn of the Dead Man!"], ["Day of the Dark Knight!"], ["Deep Cover for Batman!"], ["Enter the Outsiders!"], ["Evil Under the Sea!"], ["Fall of the Blue Beetle!"], ["Invasion of the Secret Santas!"], ["Journey to the Center of the Bat!"], ["Return of the Fearsome Fangs!"], ["Terror on Dinosaur Island!"], ["The Eyes of Despero!"], ["The Rise of the Blue Beetle!"]]}}
{"result": "SELECT * FROM Cartoon WHERE Directed_by = 'Ben Jones';", "match": {"match": false, "result": [[1.0, "The Rise of the Blue Beetle!", "Ben Jones", "Michael Jelenic", "November14,2008", 101.0, "700"], [4.0, "Day of the Dark Knight!", "Ben Jones", "J. M. DeMatteis", "January2,2009", 104.0, "704"], [7.0, "Dawn of the Dead Man!", "Ben Jones", "Steven Melching", "January16,2009", 107.0, "707"], [10.0, "The Eyes of Despero!", "Ben Jones", "J. M. DeMatteis", "February6,2009", 110.0, "728"]], "gt": [["The Rise of the Blue Beetle!"], ["Day of the Dark Knight!"], ["Dawn of the Dead Man!"], ["The Eyes of Despero!"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Day of the Dark Knight!"], ["Dawn of the Dead Man!"], ["The Eyes of Despero!"]]}}
{"result": "SELECT COUNT(*) \nFROM Cartoon \nWHERE Written_by = 'Joseph Kuhr';", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(*) \nFROM Cartoon \nWHERE Written_by = 'Joseph Kuhr';", "match": {"match": true, "result": [[2]]}}
{"result": "```sql\nSELECT Title, Directed_by\nFROM Cartoon\nORDER BY Original_air_date;\n```", "match": {"match": true, "result": [["Invasion of the Secret Santas!", "Brandon Vietti"], ["Evil Under the Sea!", "Michael Chang"], ["Return of the Fearsome Fangs!", "Brandon Vietti"], ["Deep Cover for Batman!", "Michael Chang"], ["The Eyes of Despero!", "Ben Jones"], ["Dawn of the Dead Man!", "Ben Jones"], ["Day of the Dark Knight!", "Ben Jones"], ["Fall of the Blue Beetle!", "Brandon Vietti"], ["Journey to the Center of the Bat!", "Michael Chang"], ["Enter the Outsiders!", "Michael Chang"], ["The Rise of the Blue Beetle!", "Ben Jones"], ["Terror on Dinosaur Island!", "Brandon Vietti"]]}}
{"result": "SELECT Title, Directed_by \nFROM Cartoon \nORDER BY Original_air_date;", "match": {"match": true, "result": [["Invasion of the Secret Santas!", "Brandon Vietti"], ["Evil Under the Sea!", "Michael Chang"], ["Return of the Fearsome Fangs!", "Brandon Vietti"], ["Deep Cover for Batman!", "Michael Chang"], ["The Eyes of Despero!", "Ben Jones"], ["Dawn of the Dead Man!", "Ben Jones"], ["Day of the Dark Knight!", "Ben Jones"], ["Fall of the Blue Beetle!", "Brandon Vietti"], ["Journey to the Center of the Bat!", "Michael Chang"], ["Enter the Outsiders!", "Michael Chang"], ["The Rise of the Blue Beetle!", "Ben Jones"], ["Terror on Dinosaur Island!", "Brandon Vietti"]]}}
{"result": "```sql\nSELECT Title \nFROM Cartoon \nWHERE Directed_by IN ('Ben Jones', 'Brandon Vietti');\n```", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Terror on Dinosaur Island!"], ["Day of the Dark Knight!"], ["Invasion of the Secret Santas!"], ["Dawn of the Dead Man!"], ["Fall of the Blue Beetle!"], ["The Eyes of Despero!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT Title \nFROM Cartoon \nWHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Terror on Dinosaur Island!"], ["Day of the Dark Knight!"], ["Invasion of the Secret Santas!"], ["Dawn of the Dead Man!"], ["Fall of the Blue Beetle!"], ["The Eyes of Despero!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT Country, COUNT(*) AS Number_of_TV_Channels\nFROM TV_Channel\nGROUP BY Country\nORDER BY Number_of_TV_Channels DESC\nLIMIT 1;", "match": {"match": true, "result": [["Italy", 12]]}}
{"result": "SELECT Country, COUNT(*) AS channel_count\nFROM TV_Channel\nGROUP BY Country\nORDER BY channel_count DESC\nLIMIT 1;", "match": {"match": true, "result": [["Italy", 12]]}}
{"result": "SELECT COUNT(DISTINCT series_name) AS number_of_series_names, COUNT(DISTINCT Content) AS number_of_contents FROM TV_Channel;", "match": {"match": true, "result": [[15, 1]]}}
{"result": "SELECT \n    COUNT(DISTINCT series_name) AS distinct_series_count,\n    COUNT(DISTINCT Content) AS distinct_content_count\nFROM TV_Channel;", "match": {"match": true, "result": [[15, 1]]}}
{"result": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';", "match": {"match": true, "result": [["music"]]}}
{"result": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';", "match": {"match": true, "result": [["music"]]}}
{"result": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';", "match": {"match": true, "result": [["Sky Famiglia"]]}}
{"result": "SELECT Package_Option \nFROM TV_Channel \nWHERE series_name = 'Sky Radio';", "match": {"match": true, "result": [["Sky Famiglia"]]}}
{"result": "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT Language, COUNT(id) AS Number_of_TV_Channel\nFROM TV_Channel\nGROUP BY Language\nORDER BY Number_of_TV_Channel ASC\nLIMIT 1;", "match": {"match": true, "result": [["English", 3]]}}
{"result": "SELECT Language, COUNT(id) AS channel_count\nFROM TV_Channel\nGROUP BY Language\nHAVING COUNT(id) = (\n    SELECT MIN(language_count) FROM (\n        SELECT COUNT(id) AS language_count\n        FROM TV_Channel\n        GROUP BY Language\n    ) sub\n);", "match": {"match": true, "result": [["English", 3]]}}
{"result": "SELECT Language, COUNT(*) AS Number_of_Channels\nFROM TV_Channel\nGROUP BY Language;", "match": {"match": true, "result": [["English", 3], ["Italian", 12]]}}
{"result": "SELECT Language, COUNT(*) AS Number_of_TV_Channels\nFROM TV_Channel\nGROUP BY Language;", "match": {"match": true, "result": [["English", 3], ["Italian", 12]]}}
{"result": "SELECT TV_Channel.series_name\nFROM TV_Channel\nJOIN Cartoon ON TV_Channel.id = Cartoon.Channel\nWHERE Cartoon.Title = 'The Rise of the Blue Beetle!';", "match": {"match": true, "result": [["Sky Radio"]]}}
{"result": "SELECT TV_Channel.series_name\nFROM TV_Channel\nJOIN Cartoon ON TV_Channel.id = Cartoon.Channel\nWHERE Cartoon.Title = 'The Rise of the Blue Beetle';", "match": {"match": false, "result": [], "gt": [["Sky Radio"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT Cartoon.Title\nFROM Cartoon\nJOIN TV_Channel ON Cartoon.Channel = TV_Channel.id\nWHERE TV_Channel.series_name = 'Sky Radio';\n```", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT Cartoon.Title\nFROM Cartoon\nJOIN TV_Channel ON Cartoon.Channel = TV_Channel.id\nWHERE TV_Channel.series_name = 'Sky Radio';", "match": {"match": true, "result": [["The Rise of the Blue Beetle!"], ["Return of the Fearsome Fangs!"]]}}
{"result": "SELECT Episode\nFROM TV_series\nORDER BY Rating;", "match": {"match": true, "result": [["The Hanged Man"], ["Double Down"], ["Home By Another Way"], ["Keepers"], ["Emily"], ["Blowback"], ["The Legend of Dylan McCleen"], ["Winterland"], ["The Year of the Rabbit"], ["Game Three"], ["Friendly Skies"], ["A Love of a Lifetime"]]}}
{"result": "SELECT * FROM TV_series ORDER BY CAST(Rating AS FLOAT);", "match": {"match": false, "result": [[12.0, "The Hanged Man", "December 17, 2007", "3.0", 5.0, "1.5/4", "4.24", 65.0, "714"], [7.0, "Double Down", "November 5, 2007", "3.4", 6.0, "2.1/5", "5.13", 80.0, "708"], [11.0, "Home By Another Way", "December 10, 2007", "3.5", 6.0, "1.7/5", "5.28", 62.0, "728"], [6.0, "Keepers", "October 29, 2007", "3.7", 6.0, "2.2/6", "5.75", 71.0, "700"], [9.0, "Emily", "November 19, 2007", "3.7", 6.0, "2.2/6", "5.61", 66.0, "717"], [10.0, "Blowback", "November 26, 2007", "3.7", 6.0, "2.4/6", "6.05", 68.0, "719"], [5.0, "The Legend of Dylan McCleen", "October 22, 2007", "3.8", 6.0, "2.4/6", "6.06", 72.0, "714"], [8.0, "Winterland", "November 12, 2007", "4.0", 7.0, "2.4/6", "6.09", 70.0, "707"], [4.0, "The Year of the Rabbit", "October 15, 2007", "4.3", 7.0, "2.7/7", "6.75", 67.0, "713"], [3.0, "Game Three", "October 8, 2007", "4.4", 7.0, "2.9/7", "6.94", 61.0, "707"], [2.0, "Friendly Skies", "October 1, 2007", "5.3", 9.0, "3.2/8", "8.23", 50.0, "701"], [1.0, "A Love of a Lifetime", "September 24, 2007", "5.8", 9.0, "3.5/9", "9.16", 43.0, "700"]], "gt": [["The Hanged Man"], ["Double Down"], ["Home By Another Way"], ["Keepers"], ["Emily"], ["Blowback"], ["The Legend of Dylan McCleen"], ["Winterland"], ["The Year of the Rabbit"], ["Game Three"], ["Friendly Skies"], ["A Love of a Lifetime"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Episode, Rating \nFROM TV_series \nORDER BY CAST(Rating AS FLOAT) DESC \nLIMIT 3;", "match": {"match": true, "result": [["A Love of a Lifetime", "5.8"], ["Friendly Skies", "5.3"], ["Game Three", "4.4"]]}}
{"result": "SELECT Episode, Rating\nFROM TV_series\nORDER BY CAST(Rating AS REAL) DESC\nLIMIT 3;", "match": {"match": true, "result": [["A Love of a Lifetime", "5.8"], ["Friendly Skies", "5.3"], ["Game Three", "4.4"]]}}
{"result": "SELECT MIN(Share) AS Min_Share, MAX(Share) AS Max_Share FROM TV_series;", "match": {"match": false, "result": [[5.0, 9.0]], "gt": [[9.0, 5.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(Share) AS max_share, MIN(Share) AS min_share FROM TV_series;", "match": {"match": true, "result": [[9.0, 5.0]]}}
{"result": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';", "match": {"match": true, "result": [["September 24, 2007"]]}}
{"result": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';", "match": {"match": true, "result": [["September 24, 2007"]]}}
{"result": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';", "match": {"match": true, "result": [[43.0]]}}
{"result": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';", "match": {"match": true, "result": [[43.0]]}}
{"result": "SELECT TV_Channel.series_name \nFROM TV_Channel \nJOIN TV_series ON TV_Channel.id = TV_series.Channel \nWHERE TV_series.Episode = 'A Love of a Lifetime';", "match": {"match": true, "result": [["Sky Radio"]]}}
{"result": "SELECT series_name \nFROM TV_Channel \nWHERE id = (\n    SELECT Channel \n    FROM TV_series \n    WHERE Episode = 'A Love of a Lifetime'\n);", "match": {"match": true, "result": [["Sky Radio"]]}}
{"result": "SELECT Episode \nFROM TV_series \nWHERE Channel IN (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio');", "match": {"match": true, "result": [["A Love of a Lifetime"], ["Keepers"]]}}
{"result": "SELECT Episode FROM TV_series WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio');", "match": {"match": true, "result": [["A Love of a Lifetime"], ["Keepers"]]}}
{"result": "SELECT Directed_by, COUNT(*) AS Number_of_Cartoons\nFROM Cartoon\nGROUP BY Directed_by;", "match": {"match": false, "result": [["Ben Jones", 4], ["Brandon Vietti", 4], ["Michael Chang", 4]], "gt": [[4, "Ben Jones"], [4, "Brandon Vietti"], [4, "Michael Chang"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Directed_by, COUNT(*) AS Cartoon_Count\nFROM Cartoon\nGROUP BY Directed_by;", "match": {"match": false, "result": [["Ben Jones", 4], ["Brandon Vietti", 4], ["Michael Chang", 4]], "gt": [[4, "Ben Jones"], [4, "Brandon Vietti"], [4, "Michael Chang"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT Production_code, Channel\nFROM Cartoon\nORDER BY Original_air_date DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [[102.0, "701"]]}}
{"result": "SELECT Production_code, Channel\nFROM Cartoon\nORDER BY Original_air_date DESC\nLIMIT 1;", "match": {"match": true, "result": [[102.0, "701"]]}}
{"result": "SELECT Package_Option, series_name\nFROM TV_Channel\nWHERE Hight_definition_TV = 'Yes';", "match": {"match": false, "result": [], "gt": [["Sky Famiglia + Sky HD", "MTV Live HD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Package_Option, series_name \nFROM TV_Channel \nWHERE Hight_definition_TV = 'Yes';", "match": {"match": false, "result": [], "gt": [["Sky Famiglia + Sky HD", "MTV Live HD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT TV_Channel.Country\nFROM TV_Channel\nJOIN Cartoon ON TV_Channel.id = Cartoon.Channel\nWHERE Cartoon.Written_by = 'Todd Casey';", "match": {"match": true, "result": [["United Kingdom"], ["Italy"]]}}
{"result": "SELECT DISTINCT TV_Channel.Country\nFROM Cartoon\nJOIN TV_Channel ON Cartoon.Channel = TV_Channel.id\nWHERE Cartoon.Written_by = 'Todd Casey';", "match": {"match": true, "result": [["United Kingdom"], ["Italy"]]}}
{"result": "SELECT DISTINCT Country\nFROM TV_Channel\nWHERE id NOT IN (\n    SELECT Channel\n    FROM Cartoon\n    WHERE Written_by = 'Todd Casey'\n);", "match": {"match": false, "result": [["Italy"], ["United Kingdom"], ["Poland"]], "gt": [["Poland"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT Country\nFROM TV_Channel\nWHERE id NOT IN (\n  SELECT Channel\n  FROM Cartoon\n  WHERE Written_by = 'Todd Casey'\n);", "match": {"match": false, "result": [["Italy"], ["United Kingdom"], ["Poland"]], "gt": [["Poland"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT TV_Channel.series_name, TV_Channel.Country\nFROM TV_Channel\nJOIN Cartoon ON TV_Channel.id = Cartoon.Channel\nWHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang');", "match": {"match": false, "result": [["Sky Radio", "Italy"], ["Music Box Italia", "Italy"], ["MTV Hits", "Italy"], ["MTV Rocks", "United Kingdom"], ["MTV Dance", "United Kingdom"], ["Classica", "Italy"]], "gt": [["MTV Dance", "United Kingdom"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT tc.series_name, tc.Country\nFROM TV_Channel tc\nJOIN Cartoon c ON tc.id = c.Channel\nWHERE c.Directed_by IN ('Ben Jones', 'Michael Chang')\nGROUP BY tc.series_name, tc.Country\nHAVING COUNT(DISTINCT c.Directed_by) = 2;", "match": {"match": true, "result": [["MTV Dance", "United Kingdom"]]}}
{"result": "SELECT Pixel_aspect_ratio_PAR, Country \nFROM TV_Channel \nWHERE Language <> 'English';", "match": {"match": true, "result": [["4:3", "Italy"], ["4:3", "Italy"], ["4:3 / 16:9", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3", "Italy"], ["4:3", "Italy"]]}}
{"result": "SELECT Pixel_aspect_ratio_PAR, Country\nFROM TV_Channel\nWHERE Language <> 'English';", "match": {"match": true, "result": [["4:3", "Italy"], ["4:3", "Italy"], ["4:3 / 16:9", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3", "Italy"], ["4:3", "Italy"]]}}
{"result": "SELECT id\nFROM TV_Channel\nWHERE Country IN (\n    SELECT Country\n    FROM TV_Channel\n    GROUP BY Country\n    HAVING COUNT(*) > 2\n);", "match": {"match": false, "result": [["700"], ["701"], ["703"], ["704"], ["705"], ["708"], ["713"], ["714"], ["715"], ["717"], ["719"], ["728"]], "gt": [["700"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT id FROM TV_Channel\nGROUP BY id\nHAVING COUNT(id) > 2;", "match": {"match": false, "result": [], "gt": [["700"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT id \nFROM TV_Channel \nWHERE id NOT IN (\n    SELECT Channel \n    FROM Cartoon \n    WHERE Directed_by = 'Ben Jones'\n);\n```", "match": {"match": true, "result": [["701"], ["703"], ["705"], ["706"], ["708"], ["709"], ["713"], ["714"], ["715"], ["717"], ["719"]]}}
{"result": "SELECT id \nFROM TV_Channel \nWHERE id NOT IN (\n    SELECT DISTINCT Channel \n    FROM Cartoon \n    WHERE Directed_by = 'Ben Jones'\n);", "match": {"match": true, "result": [["701"], ["703"], ["705"], ["706"], ["708"], ["709"], ["713"], ["714"], ["715"], ["717"], ["719"]]}}
{"result": "SELECT Package_Option\nFROM TV_Channel\nWHERE id NOT IN (\n    SELECT Channel\n    FROM Cartoon\n    WHERE Directed_by = 'Ben Jones'\n);", "match": {"match": true, "result": [["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["no ( FTV )"], ["Sky Famiglia + Sky HD"], ["no ( FTV )"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"]]}}
{"result": "SELECT DISTINCT Package_Option\nFROM TV_Channel\nWHERE id NOT IN (\n    SELECT DISTINCT Channel\n    FROM Cartoon\n    WHERE Directed_by = 'Ben Jones'\n);", "match": {"match": false, "result": [["Sky Famiglia"], ["no ( FTV )"], ["Sky Famiglia + Sky HD"]], "gt": [["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["no ( FTV )"], ["Sky Famiglia + Sky HD"], ["no ( FTV )"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"], ["Sky Famiglia"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) FROM poker_player;", "match": {"match": true, "result": [[5]]}}
{"result": "SELECT COUNT(*) FROM poker_player;", "match": {"match": true, "result": [[5]]}}
{"result": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC;", "match": {"match": true, "result": [[596462.0], [476090.0], [189233.0], [142800.0], [104871.0]]}}
{"result": "SELECT Earnings\nFROM poker_player\nORDER BY Earnings DESC;", "match": {"match": true, "result": [[596462.0], [476090.0], [189233.0], [142800.0], [104871.0]]}}
{"result": "SELECT Final_Table_Made, Best_Finish FROM poker_player;", "match": {"match": true, "result": [[42.0, 1.0], [10.0, 2.0], [21.0, 1.0], [19.0, 2.0], [26.0, 3.0]]}}
{"result": "SELECT Final_Table_Made, Best_Finish FROM poker_player;", "match": {"match": true, "result": [[42.0, 1.0], [10.0, 2.0], [21.0, 1.0], [19.0, 2.0], [26.0, 3.0]]}}
{"result": "SELECT AVG(Earnings) AS Average_Earnings FROM poker_player;", "match": {"match": true, "result": [[301891.2]]}}
{"result": "SELECT AVG(Earnings) AS Average_Earnings\nFROM poker_player;", "match": {"match": true, "result": [[301891.2]]}}
{"result": "SELECT Money_Rank\nFROM poker_player\nWHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);", "match": {"match": true, "result": [[58.0]]}}
{"result": "SELECT Money_Rank\nFROM poker_player\nWHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);", "match": {"match": true, "result": [[58.0]]}}
{"result": "SELECT MAX(Final_Table_Made) \nFROM poker_player \nWHERE Earnings < 200000;", "match": {"match": true, "result": [[26.0]]}}
{"result": "SELECT MAX(Final_Table_Made) \nFROM poker_player \nWHERE Earnings < 200000;", "match": {"match": true, "result": [[26.0]]}}
{"result": "SELECT p.Name\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID;", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Teodor Salparov"], ["Yevgeni Sivozhelez"], ["Maksim Botin"], ["Semen Poltavskiy"]]}}
{"result": "SELECT p.Name\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID;", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Teodor Salparov"], ["Yevgeni Sivozhelez"], ["Maksim Botin"], ["Semen Poltavskiy"]]}}
{"result": "```sql\nSELECT p.Name\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nWHERE pp.Earnings > 300000;\n```", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Maksim Botin"]]}}
{"result": "SELECT p.Name\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nWHERE pp.Earnings > 300000;", "match": {"match": true, "result": [["Aleksey Ostapenko"], ["Maksim Botin"]]}}
{"result": "SELECT p.Name\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nORDER BY pp.Final_Table_Made ASC;", "match": {"match": true, "result": [["Teodor Salparov"], ["Maksim Botin"], ["Yevgeni Sivozhelez"], ["Semen Poltavskiy"], ["Aleksey Ostapenko"]]}}
{"result": "SELECT p.Name\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nORDER BY pp.Final_Table_Made ASC;", "match": {"match": true, "result": [["Teodor Salparov"], ["Maksim Botin"], ["Yevgeni Sivozhelez"], ["Semen Poltavskiy"], ["Aleksey Ostapenko"]]}}
{"result": "SELECT p.Birth_Date\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nORDER BY pp.Earnings ASC\nLIMIT 1;", "match": {"match": true, "result": [["August 8, 1986"]]}}
{"result": "SELECT p.Birth_Date\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nORDER BY pp.Earnings ASC\nLIMIT 1;", "match": {"match": true, "result": [["August 8, 1986"]]}}
{"result": "SELECT p.Money_Rank\nFROM poker_player p\nJOIN people pe ON p.People_ID = pe.People_ID\nORDER BY pe.Height DESC\nLIMIT 1;", "match": {"match": true, "result": [[68.0]]}}
{"result": "```sql\nSELECT p.Money_Rank\nFROM poker_player p\nJOIN people pe ON p.People_ID = pe.People_ID\nORDER BY pe.Height DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [[68.0]]}}
{"result": "SELECT AVG(Earnings) \nFROM poker_player \nJOIN people ON poker_player.People_ID = people.People_ID \nWHERE Height > 200;", "match": {"match": true, "result": [[309445.0]]}}
{"result": "SELECT AVG(p.Earnings) AS Average_Earnings\nFROM poker_player p\nJOIN people pe ON p.People_ID = pe.People_ID\nWHERE pe.Height > 200;", "match": {"match": true, "result": [[309445.0]]}}
{"result": "SELECT p.Name\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nORDER BY pp.Earnings DESC;", "match": {"match": true, "result": [["Maksim Botin"], ["Aleksey Ostapenko"], ["Teodor Salparov"], ["Semen Poltavskiy"], ["Yevgeni Sivozhelez"]]}}
{"result": "SELECT people.Name\nFROM poker_player\nJOIN people ON poker_player.People_ID = people.People_ID\nORDER BY poker_player.Earnings DESC;", "match": {"match": true, "result": [["Maksim Botin"], ["Aleksey Ostapenko"], ["Teodor Salparov"], ["Semen Poltavskiy"], ["Yevgeni Sivozhelez"]]}}
{"result": "SELECT Nationality, COUNT(*) AS Number_of_People\nFROM people\nGROUP BY Nationality;", "match": {"match": true, "result": [["Bulgaria", 1], ["Russia", 6]]}}
{"result": "SELECT Nationality, COUNT(*) AS Number_of_People\nFROM people\nGROUP BY Nationality;", "match": {"match": true, "result": [["Bulgaria", 1], ["Russia", 6]]}}
{"result": "SELECT Nationality, COUNT(*) AS Count\nFROM people\nGROUP BY Nationality\nORDER BY Count DESC\nLIMIT 1;", "match": {"match": false, "result": [["Russia", 6]], "gt": [["Russia"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Nationality\nFROM people\nGROUP BY Nationality\nORDER BY COUNT(*) DESC\nLIMIT 1;", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Nationality\nFROM people\nGROUP BY Nationality\nHAVING COUNT(*) >= 2;", "match": {"match": true, "result": [["Russia"]]}}
{"result": "SELECT Nationality\nFROM people\nGROUP BY Nationality\nHAVING COUNT(*) >= 2;", "match": {"match": true, "result": [["Russia"]]}}
{"result": "```sql\nSELECT Name, Birth_Date\nFROM people\nORDER BY Name ASC;\n```", "match": {"match": true, "result": [["Aleksey Ostapenko", "May 26, 1986"], ["Maksim Botin", "July 14, 1983"], ["Roman Bragin", "April 17, 1987"], ["Semen Poltavskiy", "February 8, 1981"], ["Sergey Grankin", "January 22, 1987"], ["Teodor Salparov", "August 16, 1982"], ["Yevgeni Sivozhelez", "August 8, 1986"]]}}
{"result": "```sql\nSELECT Name, Birth_Date\nFROM people\nORDER BY Name ASC;\n```", "match": {"match": true, "result": [["Aleksey Ostapenko", "May 26, 1986"], ["Maksim Botin", "July 14, 1983"], ["Roman Bragin", "April 17, 1987"], ["Semen Poltavskiy", "February 8, 1981"], ["Sergey Grankin", "January 22, 1987"], ["Teodor Salparov", "August 16, 1982"], ["Yevgeni Sivozhelez", "August 8, 1986"]]}}
{"result": "SELECT Name FROM people WHERE Nationality <> 'Russia';", "match": {"match": true, "result": [["Teodor Salparov"]]}}
{"result": "SELECT Name FROM people WHERE Nationality <> 'Russia';", "match": {"match": true, "result": [["Teodor Salparov"]]}}
{"result": "SELECT Name \nFROM people \nWHERE People_ID NOT IN (SELECT People_ID FROM poker_player);", "match": {"match": true, "result": [["Roman Bragin"], ["Sergey Grankin"]]}}
{"result": "SELECT Name\nFROM people\nWHERE People_ID NOT IN (SELECT People_ID FROM poker_player);", "match": {"match": true, "result": [["Roman Bragin"], ["Sergey Grankin"]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) FROM people;", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) AS NumberOfNationalities FROM people;", "match": {"match": true, "result": [[2]]}}
{"result": "SELECT COUNT(*) AS Number_of_Conductors FROM conductor;", "match": {"match": true, "result": [[12]]}}
{"result": "SELECT COUNT(*) FROM conductor;", "match": {"match": true, "result": [[12]]}}
{"result": "```sql\nSELECT Name \nFROM conductor \nORDER BY Age ASC;\n```", "match": {"match": true, "result": [["Antal Dor\u00e1ti"], ["Igor Stravinsky"], ["Colin Davis"], ["Michael Tilson Thomas"], ["Paul Jorgensen"], ["Antal Brown"], ["Charles Dutoit"], ["Seiji Ozawa"], ["Valeri Gergiev"], ["Pierre Boulez"], ["Gerard Schwarz"], ["Robert Craft"]]}}
{"result": "SELECT Name FROM conductor ORDER BY Age;", "match": {"match": true, "result": [["Antal Dor\u00e1ti"], ["Igor Stravinsky"], ["Colin Davis"], ["Michael Tilson Thomas"], ["Paul Jorgensen"], ["Antal Brown"], ["Charles Dutoit"], ["Seiji Ozawa"], ["Valeri Gergiev"], ["Pierre Boulez"], ["Gerard Schwarz"], ["Robert Craft"]]}}
{"result": "SELECT Name FROM conductor WHERE Nationality <> 'USA';", "match": {"match": true, "result": [["Igor Stravinsky"], ["Paul Jorgensen"], ["Charles Dutoit"], ["Pierre Boulez"], ["Robert Craft"], ["Michael Tilson Thomas"]]}}
{"result": "```sql\nSELECT Name \nFROM conductor \nWHERE Nationality <> 'USA';\n```", "match": {"match": true, "result": [["Igor Stravinsky"], ["Paul Jorgensen"], ["Charles Dutoit"], ["Pierre Boulez"], ["Robert Craft"], ["Michael Tilson Thomas"]]}}
{"result": "SELECT Record_Company \nFROM orchestra \nORDER BY Year_of_Founded DESC;", "match": {"match": true, "result": [["Columbia Masterworks"], ["Philips"], ["Philips Classics Records"], ["RCA"], ["EMI"], ["Koch Records / Naxos Records"], ["Decca Records"], ["Mercury Records"], ["Deutsche Grammophon"], ["Kultur"], ["Decca Records"], ["Delos Records"]]}}
{"result": "SELECT Record_Company\nFROM orchestra\nORDER BY Year_of_Founded DESC;", "match": {"match": true, "result": [["Columbia Masterworks"], ["Philips"], ["Philips Classics Records"], ["RCA"], ["EMI"], ["Koch Records / Naxos Records"], ["Decca Records"], ["Mercury Records"], ["Deutsche Grammophon"], ["Kultur"], ["Decca Records"], ["Delos Records"]]}}
{"result": "SELECT AVG(Attendance) AS Average_Attendance FROM show;", "match": {"match": true, "result": [[1326.4]]}}
{"result": "SELECT AVG(Attendance) AS Average_Attendance\nFROM show;", "match": {"match": true, "result": [[1326.4]]}}
{"result": "SELECT MAX(CAST(Share AS numeric)) AS Max_Share, MIN(CAST(Share AS numeric)) AS Min_Share\nFROM performance\nWHERE Type <> 'Live final';", "match": {"match": false, "result": [[44.7, 22.7]], "gt": [["44.7%", "22.7%"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(CAST(Share AS FLOAT)) AS Max_Share, MIN(CAST(Share AS FLOAT)) AS Min_Share\nFROM performance\nWHERE Type <> 'Live final';", "match": {"match": false, "result": [[44.7, 22.7]], "gt": [["44.7%", "22.7%"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(DISTINCT Nationality) AS Different_Nationalities FROM conductor;", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT COUNT(DISTINCT Nationality) AS Number_of_Nationalities FROM conductor;", "match": {"match": true, "result": [[3]]}}
{"result": "```sql\nSELECT Name\nFROM conductor\nORDER BY Year_of_Work DESC;\n```", "match": {"match": true, "result": [["Robert Craft"], ["Antal Brown"], ["Gerard Schwarz"], ["Valeri Gergiev"], ["Charles Dutoit"], ["Michael Tilson Thomas"], ["Igor Stravinsky"], ["Paul Jorgensen"], ["Pierre Boulez"], ["Antal Dor\u00e1ti"], ["Seiji Ozawa"], ["Colin Davis"]]}}
{"result": "```sql\nSELECT Name\nFROM conductor\nORDER BY Year_of_Work DESC;\n```", "match": {"match": true, "result": [["Robert Craft"], ["Antal Brown"], ["Gerard Schwarz"], ["Valeri Gergiev"], ["Charles Dutoit"], ["Michael Tilson Thomas"], ["Igor Stravinsky"], ["Paul Jorgensen"], ["Pierre Boulez"], ["Antal Dor\u00e1ti"], ["Seiji Ozawa"], ["Colin Davis"]]}}
{"result": "SELECT Name\nFROM conductor\nWHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor);", "match": {"match": true, "result": [["Robert Craft"]]}}
{"result": "```sql\nSELECT Name \nFROM conductor \nORDER BY Year_of_Work DESC \nLIMIT 1;\n```", "match": {"match": true, "result": [["Robert Craft"]]}}
{"result": "SELECT c.Name, o.Orchestra\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;", "match": {"match": true, "result": [["Antal Dor\u00e1ti", "London Symphony Orchestra"], ["Igor Stravinsky", "Columbia Symphony Orchestra"], ["Colin Davis", "Royal Concertgebouw Orchestra"], ["Paul Jorgensen", "Royal Danish Orchestra"], ["Antal Brown", "Detroit Symphony Orchestra"], ["Charles Dutoit", "Montreal Symphony Orchestra"], ["Gerard Schwarz", "Seattle Symphony Orchestra"], ["Pierre Boulez", "Chicago Symphony Orchestra"], ["Valeri Gergiev", "Kirov Orchestra"], ["Robert Craft", "Philharmonia Orchestra"], ["Seiji Ozawa", "Orchestre de Paris"], ["Michael Tilson Thomas", "San Francisco Symphony Orchestra"]]}}
{"result": "SELECT c.Name, o.Orchestra\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;", "match": {"match": true, "result": [["Antal Dor\u00e1ti", "London Symphony Orchestra"], ["Igor Stravinsky", "Columbia Symphony Orchestra"], ["Colin Davis", "Royal Concertgebouw Orchestra"], ["Paul Jorgensen", "Royal Danish Orchestra"], ["Antal Brown", "Detroit Symphony Orchestra"], ["Charles Dutoit", "Montreal Symphony Orchestra"], ["Gerard Schwarz", "Seattle Symphony Orchestra"], ["Pierre Boulez", "Chicago Symphony Orchestra"], ["Valeri Gergiev", "Kirov Orchestra"], ["Robert Craft", "Philharmonia Orchestra"], ["Seiji Ozawa", "Orchestre de Paris"], ["Michael Tilson Thomas", "San Francisco Symphony Orchestra"]]}}
{"result": "SELECT Name\nFROM conductor\nWHERE Conductor_ID IN (\n    SELECT Conductor_ID\n    FROM orchestra\n    GROUP BY Conductor_ID\n    HAVING COUNT(Orchestra_ID) > 1\n);", "match": {"match": true, "result": []}}
{"result": "SELECT Name\nFROM conductor\nWHERE Conductor_ID IN (\n    SELECT Conductor_ID\n    FROM orchestra\n    GROUP BY Conductor_ID\n    HAVING COUNT(Orchestra_ID) > 1\n);", "match": {"match": true, "result": []}}
{"result": "SELECT Name\nFROM conductor\nWHERE Conductor_ID = (\n    SELECT Conductor_ID\n    FROM orchestra\n    GROUP BY Conductor_ID\n    ORDER BY COUNT(Orchestra_ID) DESC\n    LIMIT 1\n);", "match": {"match": true, "result": [["Michael Tilson Thomas"]]}}
{"result": "SELECT Name\nFROM conductor\nWHERE Conductor_ID = (\n    SELECT Conductor_ID\n    FROM orchestra\n    GROUP BY Conductor_ID\n    ORDER BY COUNT(Orchestra_ID) DESC\n    LIMIT 1\n);", "match": {"match": true, "result": [["Michael Tilson Thomas"]]}}
{"result": "SELECT DISTINCT c.Name\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nWHERE o.Year_of_Founded > 2008;", "match": {"match": true, "result": [["Igor Stravinsky"]]}}
{"result": "SELECT DISTINCT c.Name\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nWHERE o.Year_of_Founded > 2008;", "match": {"match": true, "result": [["Igor Stravinsky"]]}}
{"result": "SELECT Record_Company, COUNT(Orchestra_ID) AS Number_of_Orchestras\nFROM orchestra\nGROUP BY Record_Company;", "match": {"match": true, "result": [["Columbia Masterworks", 1], ["Decca Records", 2], ["Delos Records", 1], ["Deutsche Grammophon", 1], ["EMI", 1], ["Koch Records / Naxos Records", 1], ["Kultur", 1], ["Mercury Records", 1], ["Philips", 1], ["Philips Classics Records", 1], ["RCA", 1]]}}
{"result": "SELECT Record_Company, COUNT(Orchestra_ID) AS Number_of_Orchestras\nFROM orchestra\nGROUP BY Record_Company;", "match": {"match": true, "result": [["Columbia Masterworks", 1], ["Decca Records", 2], ["Delos Records", 1], ["Deutsche Grammophon", 1], ["EMI", 1], ["Koch Records / Naxos Records", 1], ["Kultur", 1], ["Mercury Records", 1], ["Philips", 1], ["Philips Classics Records", 1], ["RCA", 1]]}}
{"result": "SELECT Major_Record_Format, COUNT(*) AS Format_Count\nFROM orchestra\nGROUP BY Major_Record_Format\nORDER BY Format_Count ASC;", "match": {"match": false, "result": [["CD / LP", 1], ["DVD", 1], ["CD", 10]], "gt": [["CD / LP"], ["DVD"], ["CD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Major_Record_Format, COUNT(*) AS frequency\nFROM orchestra\nGROUP BY Major_Record_Format\nORDER BY frequency DESC;", "match": {"match": false, "result": [["CD", 10], ["DVD", 1], ["CD / LP", 1]], "gt": [["CD / LP"], ["DVD"], ["CD"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Record_Company\nFROM orchestra\nGROUP BY Record_Company\nORDER BY COUNT(Orchestra_ID) DESC\nLIMIT 1;", "match": {"match": true, "result": [["Decca Records"]]}}
{"result": "SELECT Record_Company\nFROM orchestra\nGROUP BY Record_Company\nORDER BY COUNT(Orchestra_ID) DESC\nLIMIT 1;", "match": {"match": true, "result": [["Decca Records"]]}}
{"result": "SELECT Orchestra\nFROM orchestra\nWHERE Orchestra_ID NOT IN (\n    SELECT DISTINCT Orchestra_ID\n    FROM performance\n);", "match": {"match": true, "result": [["San Francisco Symphony Orchestra"]]}}
{"result": "SELECT o.Orchestra \nFROM orchestra o\nLEFT JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID\nWHERE p.Performance_ID IS NULL;", "match": {"match": true, "result": [["San Francisco Symphony Orchestra"]]}}
{"result": "SELECT DISTINCT o1.Record_Company\nFROM orchestra o1\nJOIN orchestra o2 ON o1.Record_Company = o2.Record_Company\nWHERE o1.Year_of_Founded < 2003 AND o2.Year_of_Founded > 2003;", "match": {"match": true, "result": [["Decca Records"]]}}
{"result": "SELECT DISTINCT Record_Company\nFROM orchestra\nWHERE Year_of_Founded < 2003\nAND Record_Company IN (\n    SELECT Record_Company\n    FROM orchestra\n    WHERE Year_of_Founded > 2003\n);", "match": {"match": true, "result": [["Decca Records"]]}}
{"result": "SELECT COUNT(*)\nFROM orchestra\nWHERE Major_Record_Format IN ('CD', 'DVD');", "match": {"match": true, "result": [[11]]}}
{"result": "SELECT COUNT(*) \nFROM orchestra \nWHERE Major_Record_Format IN ('CD', 'DVD');", "match": {"match": true, "result": [[11]]}}
{"result": "```sql\nSELECT Year_of_Founded\nFROM orchestra\nWHERE Orchestra_ID IN (\n    SELECT Orchestra_ID\n    FROM performance\n    GROUP BY Orchestra_ID\n    HAVING COUNT(*) > 1\n);\n```", "match": {"match": true, "result": []}}
{"result": "SELECT Year_of_Founded\nFROM orchestra\nWHERE Orchestra_ID IN (\n    SELECT Orchestra_ID\n    FROM performance\n    GROUP BY Orchestra_ID\n    HAVING COUNT(*) > 1\n);", "match": {"match": true, "result": []}}
{"result": "SELECT COUNT(*) FROM Highschooler;", "match": {"match": true, "result": [[16]]}}
{"result": "```sql\nSELECT COUNT(*) FROM Highschooler;\n```", "match": {"match": true, "result": [[16]]}}
{"result": "```sql\nSELECT name, grade FROM Highschooler;\n```", "match": {"match": true, "result": [["Jordan", 9], ["Gabriel", 9], ["Tiffany", 9], ["Cassandra", 9], ["Haley", 10], ["Andrew", 10], ["Kris", 10], ["Brittany", 10], ["Alexis", 11], ["Austin", 11], ["Gabriel", 11], ["Jessica", 11], ["Jordan", 12], ["John", 12], ["Kyle", 12], ["Logan", 12]]}}
{"result": "```sql\nSELECT name, grade FROM Highschooler;\n```", "match": {"match": true, "result": [["Jordan", 9], ["Gabriel", 9], ["Tiffany", 9], ["Cassandra", 9], ["Haley", 10], ["Andrew", 10], ["Kris", 10], ["Brittany", 10], ["Alexis", 11], ["Austin", 11], ["Gabriel", 11], ["Jessica", 11], ["Jordan", 12], ["John", 12], ["Kyle", 12], ["Logan", 12]]}}
{"result": "select distinct grade from Highschooler;", "match": {"match": false, "result": [[9], [10], [11], [12]], "gt": [[9], [9], [9], [9], [10], [10], [10], [10], [11], [11], [11], [11], [12], [12], [12], [12]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT ID, grade\nFROM Highschooler;\n```", "match": {"match": false, "result": [[1510, 9], [1689, 9], [1381, 9], [1709, 9], [1101, 10], [1782, 10], [1468, 10], [1641, 10], [1247, 11], [1316, 11], [1911, 11], [1501, 11], [1304, 12], [1025, 12], [1934, 12], [1661, 12]], "gt": [[9], [9], [9], [9], [10], [10], [10], [10], [11], [11], [11], [11], [12], [12], [12], [12]], "error": "Query result does not match ground truth."}}
{"result": "select grade from Highschooler where name = 'Kyle';", "match": {"match": true, "result": [[12]]}}
{"result": "```sql\nSELECT grade \nFROM Highschooler \nWHERE name = 'Kyle';\n```", "match": {"match": true, "result": [[12]]}}
{"result": "```sql\nSELECT name\nFROM Highschooler\nWHERE grade = 10;\n```", "match": {"match": true, "result": [["Haley"], ["Andrew"], ["Kris"], ["Brittany"]]}}
{"result": "```sql\nselect name from Highschooler where grade = 10;\n```", "match": {"match": true, "result": [["Haley"], ["Andrew"], ["Kris"], ["Brittany"]]}}
{"result": "```sql\nSELECT ID FROM Highschooler WHERE name = 'Kyle';\n```", "match": {"match": true, "result": [[1934]]}}
{"result": "SELECT ID FROM Highschooler WHERE name = 'Kyle';", "match": {"match": true, "result": [[1934]]}}
{"result": "select count(*) \nfrom Highschooler \nwhere grade in (9, 10);", "match": {"match": true, "result": [[8]]}}
{"result": "```sql\nSELECT COUNT(*) \nFROM Highschooler \nWHERE grade IN (9, 10);\n```", "match": {"match": true, "result": [[8]]}}
{"result": "```sql\nSELECT grade, COUNT(*) AS number_of_highschoolers\nFROM Highschooler\nGROUP BY grade;\n```", "match": {"match": true, "result": [[9, 4], [10, 4], [11, 4], [12, 4]]}}
{"result": "```sql\nSELECT grade, COUNT(*) AS count\nFROM Highschooler\nGROUP BY grade;\n```", "match": {"match": true, "result": [[9, 4], [10, 4], [11, 4], [12, 4]]}}
{"result": "select grade\nfrom Highschooler\ngroup by grade\norder by count(*) desc\nlimit 1;", "match": {"match": true, "result": [[12]]}}
{"result": "select grade\nfrom Highschooler\ngroup by grade\norder by count(*) desc\nlimit 1;", "match": {"match": true, "result": [[12]]}}
{"result": "```sql\nSELECT grade\nFROM Highschooler\nGROUP BY grade\nHAVING COUNT(*) >= 4;\n```", "match": {"match": true, "result": [[9], [10], [11], [12]]}}
{"result": "SELECT grade\nFROM Highschooler\nGROUP BY grade\nHAVING COUNT(ID) >= 4;", "match": {"match": true, "result": [[9], [10], [11], [12]]}}
{"result": "select student_id, count(friend_id) as number_of_friends\nfrom Friend\ngroup by student_id;", "match": {"match": true, "result": [[1101, 1], [1247, 2], [1304, 1], [1316, 1], [1381, 1], [1468, 2], [1501, 1], [1510, 2], [1661, 1], [1689, 2], [1709, 1], [1782, 3], [1911, 1], [1934, 1]]}}
{"result": "select student_id, count(friend_id) as num_friends\nfrom Friend\ngroup by student_id;", "match": {"match": true, "result": [[1101, 1], [1247, 2], [1304, 1], [1316, 1], [1381, 1], [1468, 2], [1501, 1], [1510, 2], [1661, 1], [1689, 2], [1709, 1], [1782, 3], [1911, 1], [1934, 1]]}}
{"result": "select h.name, count(f.friend_id) as number_of_friends\nfrom Highschooler h\nleft join Friend f on h.ID = f.student_id\ngroup by h.ID, h.name;", "match": {"match": false, "result": [["John", 0], ["Haley", 1], ["Alexis", 2], ["Jordan", 1], ["Austin", 1], ["Tiffany", 1], ["Kris", 2], ["Jessica", 1], ["Jordan", 2], ["Brittany", 0], ["Logan", 1], ["Gabriel", 2], ["Cassandra", 1], ["Andrew", 3], ["Gabriel", 1], ["Kyle", 1]], "gt": [["Haley", 1], ["Alexis", 2], ["Jordan", 1], ["Austin", 1], ["Tiffany", 1], ["Kris", 2], ["Jessica", 1], ["Jordan", 2], ["Logan", 1], ["Gabriel", 2], ["Cassandra", 1], ["Andrew", 3], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "select H.name, count(F.friend_id) as friend_count\nfrom Highschooler H\nleft join Friend F on H.ID = F.student_id\ngroup by H.ID, H.name;", "match": {"match": false, "result": [["John", 0], ["Haley", 1], ["Alexis", 2], ["Jordan", 1], ["Austin", 1], ["Tiffany", 1], ["Kris", 2], ["Jessica", 1], ["Jordan", 2], ["Brittany", 0], ["Logan", 1], ["Gabriel", 2], ["Cassandra", 1], ["Andrew", 3], ["Gabriel", 1], ["Kyle", 1]], "gt": [["Haley", 1], ["Alexis", 2], ["Jordan", 1], ["Austin", 1], ["Tiffany", 1], ["Kris", 2], ["Jessica", 1], ["Jordan", 2], ["Logan", 1], ["Gabriel", 2], ["Cassandra", 1], ["Andrew", 3], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT name\nFROM Highschooler\nWHERE ID = (\n    SELECT student_id\n    FROM Friend\n    GROUP BY student_id\n    ORDER BY COUNT(friend_id) DESC\n    LIMIT 1\n)\n```", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "select name\nfrom Highschooler h\njoin (\n    select student_id, count(friend_id) as friend_count\n    from Friend\n    group by student_id\n    order by friend_count desc\n    limit 1\n) f on h.ID = f.student_id;", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "select h.name\nfrom Highschooler h\njoin Friend f on h.ID = f.student_id\ngroup by h.ID, h.name\nhaving count(f.friend_id) >= 3;", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "select name\nfrom Highschooler h\njoin Friend f on h.ID = f.student_id\ngroup by h.ID, h.name\nhaving count(f.friend_id) >= 3;", "match": {"match": true, "result": [["Andrew"]]}}
{"result": "select h.name\nfrom Highschooler h\njoin Friend f on h.ID = f.friend_id\njoin Highschooler k on k.ID = f.student_id\nwhere k.name = 'Kyle';", "match": {"match": true, "result": [["Jordan"]]}}
{"result": "```sql\nselect h.name\nfrom Highschooler h\njoin Friend f on h.ID = f.friend_id\njoin Highschooler k on k.ID = f.student_id\nwhere k.name = 'Kyle'\n```", "match": {"match": true, "result": [["Jordan"]]}}
{"result": "select count(*) \nfrom Friend f\njoin Highschooler h on f.student_id = h.ID\nwhere h.name = 'Kyle';", "match": {"match": true, "result": [[1]]}}
{"result": "select count(*) \nfrom Friend f \njoin Highschooler h on f.student_id = h.ID \nwhere h.name = 'Kyle';", "match": {"match": true, "result": [[1]]}}
{"result": "select ID from Highschooler\nwhere ID not in (select student_id from Friend) and ID not in (select friend_id from Friend);", "match": {"match": false, "result": [], "gt": [[1025], [1641]], "error": "Query result does not match ground truth."}}
{"result": "select ID from Highschooler\nwhere ID not in (select student_id from Friend) and ID not in (select friend_id from Friend);", "match": {"match": false, "result": [], "gt": [[1025], [1641]], "error": "Query result does not match ground truth."}}
{"result": "select name from Highschooler h\nwhere not exists (\n    select 1 from Friend f where f.student_id = h.ID or f.friend_id = h.ID\n);", "match": {"match": false, "result": [], "gt": [["Brittany"], ["John"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT name \nFROM Highschooler \nWHERE ID NOT IN (SELECT student_id FROM Friend) \nAND ID NOT IN (SELECT friend_id FROM Friend);", "match": {"match": false, "result": [], "gt": [["Brittany"], ["John"]], "error": "Query result does not match ground truth."}}
{"result": "select distinct h.ID\nfrom Highschooler h\njoin Friend f on h.ID = f.student_id\njoin Likes l on h.ID = l.liked_id;", "match": {"match": true, "result": [[1101], [1247], [1304], [1468], [1501], [1689], [1709], [1934]]}}
{"result": "select distinct h.ID\nfrom Highschooler h\njoin Friend f on h.ID = f.student_id\njoin Likes l on h.ID = l.liked_id;", "match": {"match": true, "result": [[1101], [1247], [1304], [1468], [1501], [1689], [1709], [1934]]}}
{"result": "select distinct h.name\nfrom Highschooler h\njoin Friend f on h.ID = f.student_id\njoin Likes l on h.ID = l.liked_id\nwhere l.student_id <> h.ID;", "match": {"match": false, "result": [["Cassandra"], ["Gabriel"], ["Alexis"], ["Kris"], ["Jordan"], ["Kyle"], ["Jessica"], ["Haley"]], "gt": [["Alexis"], ["Cassandra"], ["Gabriel"], ["Haley"], ["Jessica"], ["Jordan"], ["Kris"], ["Kyle"]], "error": "Query result does not match ground truth."}}
{"result": "select distinct h.name\nfrom Highschooler h\njoin Friend f on h.ID = f.student_id\njoin Likes l on h.ID = l.liked_id;", "match": {"match": false, "result": [["Cassandra"], ["Gabriel"], ["Alexis"], ["Kris"], ["Jordan"], ["Kyle"], ["Jessica"], ["Haley"]], "gt": [["Alexis"], ["Cassandra"], ["Gabriel"], ["Haley"], ["Jessica"], ["Jordan"], ["Kris"], ["Kyle"]], "error": "Query result does not match ground truth."}}
{"result": "select liked_id, count(*) as like_count\nfrom Likes\ngroup by liked_id;", "match": {"match": false, "result": [[1101, 1], [1247, 1], [1304, 1], [1468, 2], [1501, 1], [1689, 1], [1709, 2], [1934, 1]], "gt": [[1025, 1], [1247, 1], [1316, 1], [1501, 1], [1641, 1], [1689, 1], [1709, 1], [1782, 1], [1911, 1], [1934, 1]], "error": "Query result does not match ground truth."}}
{"result": "select student_id, count(*) as like_count\nfrom Likes\ngroup by student_id;", "match": {"match": true, "result": [[1025, 1], [1247, 1], [1316, 1], [1501, 1], [1641, 1], [1689, 1], [1709, 1], [1782, 1], [1911, 1], [1934, 1]]}}
{"result": "select h.name, count(l.liked_id) as likes_count\nfrom Highschooler h\njoin Likes l on h.ID = l.student_id\ngroup by h.name;", "match": {"match": false, "result": [["Alexis", 1], ["Andrew", 1], ["Austin", 1], ["Brittany", 1], ["Cassandra", 1], ["Gabriel", 2], ["Jessica", 1], ["John", 1], ["Kyle", 1]], "gt": [["John", 1], ["Alexis", 1], ["Austin", 1], ["Jessica", 1], ["Brittany", 1], ["Gabriel", 1], ["Cassandra", 1], ["Andrew", 1], ["Gabriel", 1], ["Kyle", 1]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT H.name, COUNT(L.liked_id) AS likes_count\nFROM Highschooler H\nJOIN Likes L ON H.ID = L.student_id\nGROUP BY H.ID, H.name;\n```", "match": {"match": true, "result": [["John", 1], ["Alexis", 1], ["Austin", 1], ["Jessica", 1], ["Brittany", 1], ["Gabriel", 1], ["Cassandra", 1], ["Andrew", 1], ["Gabriel", 1], ["Kyle", 1]]}}
{"result": "select name\nfrom Highschooler\nwhere ID = (\n    select student_id\n    from (\n        select liked_id as student_id, count(*) as likes_count\n        from Likes\n        group by liked_id\n        order by likes_count desc\n        limit 1\n    ) as sub\n);", "match": {"match": false, "result": [["Cassandra"]], "gt": [["John"]], "error": "Query result does not match ground truth."}}
{"result": "select name\nfrom Highschooler\nwhere ID = (\n    select liked_id\n    from Likes\n    group by liked_id\n    order by count(*) desc\n    limit 1\n);", "match": {"match": false, "result": [["Cassandra"]], "gt": [["John"]], "error": "Query result does not match ground truth."}}
{"result": "select h.name\nfrom Highschooler h\njoin Likes l on h.ID = l.liked_id\ngroup by h.ID, h.name\nhaving count(l.student_id) >= 2;", "match": {"match": false, "result": [["Kris"], ["Cassandra"]], "gt": [], "error": "Query result does not match ground truth."}}
{"result": "select h.name\nfrom Highschooler h\njoin Likes l on h.ID = l.liked_id\ngroup by h.ID, h.name\nhaving count(*) >= 2;", "match": {"match": false, "result": [["Kris"], ["Cassandra"]], "gt": [], "error": "Query result does not match ground truth."}}
{"result": "SELECT H.name\nFROM Highschooler H\nJOIN Friend F ON H.ID = F.student_id\nWHERE H.grade > 5\nGROUP BY H.ID, H.name\nHAVING COUNT(F.friend_id) >= 2;", "match": {"match": true, "result": [["Alexis"], ["Kris"], ["Jordan"], ["Gabriel"], ["Andrew"]]}}
{"result": "```sql\nSELECT H.name\nFROM Highschooler H\nJOIN Friend F ON H.ID = F.student_id\nWHERE H.grade > 5\nGROUP BY H.ID, H.name\nHAVING COUNT(F.friend_id) >= 2;\n```", "match": {"match": true, "result": [["Alexis"], ["Kris"], ["Jordan"], ["Gabriel"], ["Andrew"]]}}
{"result": "select count(*) \nfrom Likes \njoin Highschooler on Likes.student_id = Highschooler.ID \nwhere Highschooler.name = 'Kyle';", "match": {"match": true, "result": [[1]]}}
{"result": "select count(*) \nfrom Likes\njoin Highschooler on Likes.student_id = Highschooler.ID\nwhere Highschooler.name = 'Kyle';", "match": {"match": true, "result": [[1]]}}
{"result": "select avg(grade) \nfrom Highschooler \nwhere ID in (select distinct student_id from Friend);", "match": {"match": true, "result": [[10.428571428571429]]}}
{"result": "select avg(grade) \nfrom Highschooler \nwhere ID in (select distinct student_id from Friend) or ID in (select distinct friend_id from Friend);", "match": {"match": false, "result": [[10.5]], "gt": [[10.428571428571429]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT MIN(grade) \nFROM Highschooler \nWHERE ID NOT IN (SELECT student_id FROM Friend);\n```", "match": {"match": true, "result": [[10]]}}
{"result": "select min(grade) \nfrom Highschooler h \nwhere not exists (\n    select 1 \n    from Friend f \n    where f.student_id = h.ID or f.friend_id = h.ID\n);", "match": {"match": false, "result": [[null]], "gt": [[10]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT DISTINCT o.state\nFROM Owners o\nJOIN Professionals p ON o.state = p.state\nWHERE o.state IS NOT NULL AND p.state IS NOT NULL;\n```", "match": {"match": false, "result": [["Wisconsin"], ["Indiana"], ["Mississippi"]], "gt": [["Indiana"], ["Mississippi"], ["Wisconsin"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT o.state\nFROM Owners o\nINNER JOIN Professionals p ON o.state = p.state;", "match": {"match": false, "result": [["Wisconsin"], ["Indiana"], ["Mississippi"]], "gt": [["Indiana"], ["Mississippi"], ["Wisconsin"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT AVG(CAST(age AS DECIMAL)) AS average_age\nFROM Dogs\nWHERE dog_id IN (SELECT DISTINCT dog_id FROM Treatments)\nAND age IS NOT NULL;", "match": {"match": true, "result": [[5.111111111111111]]}}
{"result": "SELECT AVG(CAST(age AS DECIMAL)) AS average_age\nFROM Dogs\nWHERE dog_id IN (SELECT dog_id FROM Treatments);", "match": {"match": true, "result": [[5.111111111111111]]}}
{"result": "```sql\nSELECT DISTINCT p.professional_id, p.last_name, p.cell_number\nFROM Professionals p\nLEFT JOIN Treatments t ON p.professional_id = t.professional_id\nGROUP BY p.professional_id, p.last_name, p.cell_number, p.state\nHAVING p.state = 'Indiana' OR COUNT(t.treatment_id) > 2;\n```", "match": {"match": true, "result": [[1, "Braun", "(275)939-2435x80863"], [8, "Hyatt", "328.842.3792"], [9, "Kshlerin", "962-983-8109x3509"]]}}
{"result": "SELECT professional_id, last_name, cell_number\nFROM Professionals\nWHERE state = 'Indiana'\n   OR professional_id IN (\n       SELECT professional_id\n       FROM Treatments\n       GROUP BY professional_id\n       HAVING COUNT(treatment_id) > 2\n   );", "match": {"match": true, "result": [[1, "Braun", "(275)939-2435x80863"], [8, "Hyatt", "328.842.3792"], [9, "Kshlerin", "962-983-8109x3509"]]}}
{"result": "SELECT d.name\nFROM Dogs d\nLEFT JOIN Treatments t ON d.dog_id = t.dog_id\nGROUP BY d.dog_id, d.name\nHAVING COALESCE(SUM(t.cost_of_treatment), 0) <= 1000;", "match": {"match": true, "result": [["Kacey"], ["Hipolito"], ["Mavis"], ["Houston"], ["Jeffrey"], ["Merritt"], ["Narciso"], ["George"], ["Bessie"], ["Betty"], ["Holden"], ["Jesus"]]}}
{"result": "SELECT Dogs.name\nFROM Dogs\nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id\nGROUP BY Dogs.dog_id, Dogs.name\nHAVING SUM(Treatments.cost_of_treatment) <= 1000;", "match": {"match": false, "result": [["Kacey"], ["Hipolito"], ["Houston"], ["Narciso"], ["Holden"], ["Jesus"]], "gt": [["Kacey"], ["Hipolito"], ["Mavis"], ["Houston"], ["Jeffrey"], ["Merritt"], ["Narciso"], ["George"], ["Bessie"], ["Betty"], ["Holden"], ["Jesus"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT first_name\nFROM (\n    SELECT first_name FROM Professionals\n    UNION\n    SELECT first_name FROM Owners\n) AS people\nWHERE first_name NOT IN (\n    SELECT DISTINCT name FROM Dogs WHERE name IS NOT NULL\n);", "match": {"match": true, "result": [["Adelle"], ["Brady"], ["Cindy"], ["Danny"], ["Domenica"], ["Emelie"], ["Ericka"], ["Gay"], ["Heather"], ["Jaclyn"], ["Jayson"], ["Johann"], ["Kade"], ["Karley"], ["Lesly"], ["Lorenz"], ["Melisa"], ["Monte"], ["Nora"], ["Olaf"], ["Orlando"], ["Rachelle"], ["Rolando"], ["Ruben"], ["Sigurd"], ["Taryn"], ["Tre"], ["Velva"], ["Vernice"], ["Winfield"]]}}
{"result": "SELECT DISTINCT first_name\nFROM (\n    SELECT first_name FROM Professionals\n    UNION\n    SELECT first_name FROM Owners\n) AS po\nWHERE first_name NOT IN (SELECT name FROM Dogs WHERE name IS NOT NULL);", "match": {"match": true, "result": [["Adelle"], ["Brady"], ["Cindy"], ["Danny"], ["Domenica"], ["Emelie"], ["Ericka"], ["Gay"], ["Heather"], ["Jaclyn"], ["Jayson"], ["Johann"], ["Kade"], ["Karley"], ["Lesly"], ["Lorenz"], ["Melisa"], ["Monte"], ["Nora"], ["Olaf"], ["Orlando"], ["Rachelle"], ["Rolando"], ["Ruben"], ["Sigurd"], ["Taryn"], ["Tre"], ["Velva"], ["Vernice"], ["Winfield"]]}}
{"result": "```sql\nSELECT professional_id, role_code, email_address\nFROM Professionals\nWHERE professional_id NOT IN (\n    SELECT DISTINCT professional_id\n    FROM Treatments\n);\n```", "match": {"match": true, "result": [[1, "Employee", "deanna.schuster@example.com"], [2, "Employee", "lucile.shanahan@example.org"], [3, "Employee", "uboehm@example.org"], [11, "Employee", "west.eula@example.net"], [12, "Veterenarian", "marquardt.furman@example.org"], [13, "Veterenarian", "delphine29@example.com"], [15, "Employee", "jeichmann@example.com"]]}}
{"result": "SELECT professional_id, role_code, email_address\nFROM Professionals\nWHERE professional_id NOT IN (\n    SELECT DISTINCT professional_id\n    FROM Treatments\n);", "match": {"match": true, "result": [[1, "Employee", "deanna.schuster@example.com"], [2, "Employee", "lucile.shanahan@example.org"], [3, "Employee", "uboehm@example.org"], [11, "Employee", "west.eula@example.net"], [12, "Veterenarian", "marquardt.furman@example.org"], [13, "Veterenarian", "delphine29@example.com"], [15, "Employee", "jeichmann@example.com"]]}}
{"result": "SELECT owner_id, first_name, last_name\nFROM Owners\nWHERE owner_id = (\n    SELECT owner_id\n    FROM Dogs\n    GROUP BY owner_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n);", "match": {"match": true, "result": [[14, "Rachelle", "Funk"]]}}
{"result": "```sql\nSELECT o.owner_id, o.first_name, o.last_name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nGROUP BY o.owner_id, o.first_name, o.last_name\nORDER BY COUNT(d.dog_id) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [[14, "Rachelle", "Funk"]]}}
{"result": "SELECT professional_id, role_code, first_name\nFROM Professionals\nWHERE professional_id IN (\n    SELECT professional_id\n    FROM Treatments\n    GROUP BY professional_id\n    HAVING COUNT(treatment_id) >= 2\n);", "match": {"match": true, "result": [[4, "Veterenarian", "Vernice"], [6, "Veterenarian", "Ruben"], [8, "Employee", "Karley"], [9, "Veterenarian", "Monte"], [10, "Employee", "Domenica"], [14, "Employee", "Sigurd"]]}}
{"result": "```sql\nSELECT p.professional_id, p.role_code, p.first_name\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nGROUP BY p.professional_id, p.role_code, p.first_name\nHAVING COUNT(t.treatment_id) >= 2;\n```", "match": {"match": true, "result": [[4, "Veterenarian", "Vernice"], [6, "Veterenarian", "Ruben"], [8, "Employee", "Karley"], [9, "Veterenarian", "Monte"], [10, "Employee", "Domenica"], [14, "Employee", "Sigurd"]]}}
{"result": "```sql\nSELECT b.breed_name\nFROM Breeds b\nJOIN Dogs d ON b.breed_code = d.breed_code\nGROUP BY b.breed_code, b.breed_name\nORDER BY COUNT(d.dog_id) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [["Bulldog"]]}}
{"result": "SELECT b.breed_name\nFROM Dogs d\nJOIN Breeds b ON d.breed_code = b.breed_code\nGROUP BY b.breed_name\nORDER BY COUNT(d.dog_id) DESC\nLIMIT 1;", "match": {"match": true, "result": [["Bulldog"]]}}
{"result": "```sql\nSELECT o.owner_id, o.last_name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nJOIN Treatments t ON d.dog_id = t.dog_id\nGROUP BY o.owner_id, o.last_name\nORDER BY COUNT(t.treatment_id) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [[14, "Funk"]]}}
{"result": "SELECT o.owner_id, o.last_name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nJOIN Treatments t ON d.dog_id = t.dog_id\nGROUP BY o.owner_id, o.last_name\nORDER BY SUM(t.cost_of_treatment) DESC\nLIMIT 1;", "match": {"match": false, "result": [[3, "Stoltenberg"]], "gt": [[14, "Funk"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT treatment_type_description\nFROM Treatment_Types\nWHERE treatment_type_code = (\n    SELECT treatment_type_code\n    FROM Treatments\n    GROUP BY treatment_type_code\n    ORDER BY SUM(cost_of_treatment)\n    LIMIT 1\n);\n```", "match": {"match": true, "result": [["Take for a Walk"]]}}
{"result": "SELECT treatment_type_description\nFROM Treatment_Types tt\nJOIN (\n    SELECT treatment_type_code, SUM(cost_of_treatment) AS total_cost\n    FROM Treatments\n    GROUP BY treatment_type_code\n    ORDER BY total_cost\n    LIMIT 1\n) t ON tt.treatment_type_code = t.treatment_type_code;", "match": {"match": true, "result": [["Take for a Walk"]]}}
{"result": "```sql\nSELECT o.owner_id, o.zip_code\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nJOIN Treatments t ON d.dog_id = t.dog_id\nGROUP BY o.owner_id, o.zip_code\nORDER BY SUM(t.cost_of_treatment) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [[3, "02647"]]}}
{"result": "```sql\nSELECT o.owner_id, o.zip_code\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nJOIN Treatments t ON d.dog_id = t.dog_id\nGROUP BY o.owner_id, o.zip_code\nORDER BY SUM(t.cost_of_treatment) DESC\nLIMIT 1;\n```", "match": {"match": true, "result": [[3, "02647"]]}}
{"result": "SELECT professional_id, cell_number\nFROM Treatments\nGROUP BY professional_id\nHAVING COUNT(DISTINCT treatment_type_code) >= 2;", "match": {"match": false, "error": "Query execution failed with error: no such column: cell_number"}}
{"result": "```sql\nSELECT professional_id, cell_number\nFROM Treatments\nGROUP BY professional_id, cell_number\nHAVING COUNT(DISTINCT treatment_type_code) >= 2;\n```", "match": {"match": false, "error": "Query execution failed with error: no such column: cell_number"}}
{"result": "SELECT DISTINCT p.first_name, p.last_name\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nWHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);", "match": {"match": false, "result": [["Domenica", "Jacobs"], ["Vernice", "Tillman"], ["Karley", "Hyatt"], ["Ruben", "O'Reilly"], ["Monte", "Kshlerin"]], "gt": [["Taryn", "Braun"], ["Jayson", "Ullrich"], ["Olaf", "Watsica"], ["Vernice", "Tillman"], ["Danny", "Considine"], ["Ruben", "O'Reilly"], ["Velva", "Hayes"], ["Karley", "Hyatt"], ["Monte", "Kshlerin"], ["Domenica", "Jacobs"], ["Brady", "Pouros"], ["Winfield", "Christiansen"], ["Ericka", "Murazik"], ["Sigurd", "Frami"], ["Lesly", "Walter"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT DISTINCT p.first_name, p.last_name\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nWHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);\n```", "match": {"match": false, "result": [["Domenica", "Jacobs"], ["Vernice", "Tillman"], ["Karley", "Hyatt"], ["Ruben", "O'Reilly"], ["Monte", "Kshlerin"]], "gt": [["Taryn", "Braun"], ["Jayson", "Ullrich"], ["Olaf", "Watsica"], ["Vernice", "Tillman"], ["Danny", "Considine"], ["Ruben", "O'Reilly"], ["Velva", "Hayes"], ["Karley", "Hyatt"], ["Monte", "Kshlerin"], ["Domenica", "Jacobs"], ["Brady", "Pouros"], ["Winfield", "Christiansen"], ["Ericka", "Murazik"], ["Sigurd", "Frami"], ["Lesly", "Walter"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT T.date_of_treatment, P.first_name\nFROM Treatments T\nJOIN Professionals P ON T.professional_id = P.professional_id;", "match": {"match": true, "result": [["2018-03-19 04:39:54", "Monte"], ["2018-03-15 20:25:34", "Domenica"], ["2018-03-08 05:26:23", "Vernice"], ["2018-03-01 04:14:46", "Karley"], ["2018-03-23 13:52:10", "Sigurd"], ["2018-03-11 04:23:15", "Vernice"], ["2018-03-10 11:45:58", "Sigurd"], ["2018-03-24 22:25:58", "Ruben"], ["2018-03-14 19:10:40", "Domenica"], ["2018-02-28 17:09:43", "Velva"], ["2018-03-13 12:22:58", "Danny"], ["2018-03-16 10:27:36", "Monte"], ["2018-02-26 09:08:53", "Karley"], ["2018-03-04 20:33:43", "Monte"], ["2018-03-15 19:10:02", "Ruben"]]}}
{"result": "```sql\nSELECT T.date_of_treatment, P.first_name\nFROM Treatments T\nJOIN Professionals P ON T.professional_id = P.professional_id;\n```", "match": {"match": true, "result": [["2018-03-19 04:39:54", "Monte"], ["2018-03-15 20:25:34", "Domenica"], ["2018-03-08 05:26:23", "Vernice"], ["2018-03-01 04:14:46", "Karley"], ["2018-03-23 13:52:10", "Sigurd"], ["2018-03-11 04:23:15", "Vernice"], ["2018-03-10 11:45:58", "Sigurd"], ["2018-03-24 22:25:58", "Ruben"], ["2018-03-14 19:10:40", "Domenica"], ["2018-02-28 17:09:43", "Velva"], ["2018-03-13 12:22:58", "Danny"], ["2018-03-16 10:27:36", "Monte"], ["2018-02-26 09:08:53", "Karley"], ["2018-03-04 20:33:43", "Monte"], ["2018-03-15 19:10:02", "Ruben"]]}}
{"result": "SELECT T.cost_of_treatment, TT.treatment_type_description\nFROM Treatments T\nJOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code;", "match": {"match": true, "result": [[567, "Take for a Walk"], [147, "Vaccination"], [429, "Physical examination"], [266, "Vaccination"], [668, "Vaccination"], [313, "Physical examination"], [852, "Physical examination"], [407, "Physical examination"], [139, "Take for a Walk"], [681, "Take for a Walk"], [514, "Vaccination"], [428, "Physical examination"], [945, "Vaccination"], [349, "Take for a Walk"], [656, "Take for a Walk"]]}}
{"result": "```sql\nSELECT cost_of_treatment, treatment_type_description\nFROM Treatments\nJOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;\n```", "match": {"match": true, "result": [[567, "Take for a Walk"], [147, "Vaccination"], [429, "Physical examination"], [266, "Vaccination"], [668, "Vaccination"], [313, "Physical examination"], [852, "Physical examination"], [407, "Physical examination"], [139, "Take for a Walk"], [681, "Take for a Walk"], [514, "Vaccination"], [428, "Physical examination"], [945, "Vaccination"], [349, "Take for a Walk"], [656, "Take for a Walk"]]}}
{"result": "```sql\nSELECT O.first_name, O.last_name, S.size_description\nFROM Owners O\nJOIN Dogs D ON O.owner_id = D.owner_id\nJOIN Sizes S ON D.size_code = S.size_code;\n```", "match": {"match": false, "result": [["Jaclyn", "Stoltenberg", "Large"], ["Gay", "Feil", "Large"], ["Nora", "Haley", "Medium"], ["Rachelle", "Funk", "Large"], ["Emelie", "Mertz", "Medium"], ["Johann", "Fisher", "Medium"], ["Jaclyn", "Stoltenberg", "Medium"], ["Rachelle", "Funk", "Small"], ["Melisa", "DuBuque", "Medium"], ["Kade", "Rippin", "Medium"], ["Cindy", "Schmitt", "Large"], ["Orlando", "Price", "Medium"], ["Rolando", "Prohaska", "Small"], ["Rachelle", "Funk", "Medium"], ["Lorenz", "Nicolas", "Medium"]], "gt": [["Jaclyn", "Stoltenberg", "LGE"], ["Gay", "Feil", "LGE"], ["Nora", "Haley", "MED"], ["Rachelle", "Funk", "LGE"], ["Emelie", "Mertz", "MED"], ["Johann", "Fisher", "MED"], ["Jaclyn", "Stoltenberg", "MED"], ["Rachelle", "Funk", "SML"], ["Melisa", "DuBuque", "MED"], ["Kade", "Rippin", "MED"], ["Cindy", "Schmitt", "LGE"], ["Orlando", "Price", "MED"], ["Rolando", "Prohaska", "SML"], ["Rachelle", "Funk", "MED"], ["Lorenz", "Nicolas", "MED"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Owners.first_name, Owners.last_name, Sizes.size_description\nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id\nJOIN Sizes ON Dogs.size_code = Sizes.size_code;", "match": {"match": false, "result": [["Jaclyn", "Stoltenberg", "Large"], ["Gay", "Feil", "Large"], ["Nora", "Haley", "Medium"], ["Rachelle", "Funk", "Large"], ["Emelie", "Mertz", "Medium"], ["Johann", "Fisher", "Medium"], ["Jaclyn", "Stoltenberg", "Medium"], ["Rachelle", "Funk", "Small"], ["Melisa", "DuBuque", "Medium"], ["Kade", "Rippin", "Medium"], ["Cindy", "Schmitt", "Large"], ["Orlando", "Price", "Medium"], ["Rolando", "Prohaska", "Small"], ["Rachelle", "Funk", "Medium"], ["Lorenz", "Nicolas", "Medium"]], "gt": [["Jaclyn", "Stoltenberg", "LGE"], ["Gay", "Feil", "LGE"], ["Nora", "Haley", "MED"], ["Rachelle", "Funk", "LGE"], ["Emelie", "Mertz", "MED"], ["Johann", "Fisher", "MED"], ["Jaclyn", "Stoltenberg", "MED"], ["Rachelle", "Funk", "SML"], ["Melisa", "DuBuque", "MED"], ["Kade", "Rippin", "MED"], ["Cindy", "Schmitt", "LGE"], ["Orlando", "Price", "MED"], ["Rolando", "Prohaska", "SML"], ["Rachelle", "Funk", "MED"], ["Lorenz", "Nicolas", "MED"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Owners.first_name, Dogs.name\nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id;", "match": {"match": true, "result": [["Jaclyn", "Kacey"], ["Gay", "Hipolito"], ["Nora", "Mavis"], ["Rachelle", "Houston"], ["Emelie", "Jeffrey"], ["Johann", "Merritt"], ["Jaclyn", "Narciso"], ["Rachelle", "George"], ["Melisa", "Bessie"], ["Kade", "Troy"], ["Cindy", "Betty"], ["Orlando", "Holden"], ["Rolando", "Jesus"], ["Rachelle", "Lyric"], ["Lorenz", "Evangeline"]]}}
{"result": "```sql\nSELECT o.first_name AS owner_first_name, d.name AS dog_name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id;\n```", "match": {"match": true, "result": [["Jaclyn", "Kacey"], ["Gay", "Hipolito"], ["Nora", "Mavis"], ["Rachelle", "Houston"], ["Emelie", "Jeffrey"], ["Johann", "Merritt"], ["Jaclyn", "Narciso"], ["Rachelle", "George"], ["Melisa", "Bessie"], ["Kade", "Troy"], ["Cindy", "Betty"], ["Orlando", "Holden"], ["Rolando", "Jesus"], ["Rachelle", "Lyric"], ["Lorenz", "Evangeline"]]}}
{"result": "WITH BreedCounts AS (\n    SELECT breed_code, COUNT(*) AS breed_count\n    FROM Dogs\n    GROUP BY breed_code\n),\nRarestBreed AS (\n    SELECT breed_code\n    FROM BreedCounts\n    WHERE breed_count = (\n        SELECT MIN(breed_count)\n        FROM BreedCounts\n    )\n)\nSELECT d.name, t.date_of_treatment\nFROM Dogs d\nJOIN RarestBreed rb ON d.breed_code = rb.breed_code\nLEFT JOIN Treatments t ON d.dog_id = t.dog_id\nORDER BY d.name, t.date_of_treatment;", "match": {"match": false, "result": [["George", null], ["Holden", "2018-03-23 13:52:10"], ["Houston", "2018-03-15 20:25:34"], ["Jesus", "2018-03-16 10:27:36"], ["Kacey", "2018-03-15 19:10:02"], ["Lyric", "2018-03-08 05:26:23"], ["Lyric", "2018-03-14 19:10:40"], ["Lyric", "2018-03-19 04:39:54"], ["Merritt", null], ["Troy", "2018-02-28 17:09:43"], ["Troy", "2018-03-04 20:33:43"], ["Troy", "2018-03-11 04:23:15"]], "gt": [["Lyric", "2018-03-19 04:39:54"], ["Houston", "2018-03-15 20:25:34"], ["Lyric", "2018-03-08 05:26:23"], ["Lyric", "2018-03-14 19:10:40"], ["Kacey", "2018-03-15 19:10:02"]], "error": "Query result does not match ground truth."}}
{"result": "WITH BreedCounts AS (\n  SELECT breed_code, COUNT(*) AS breed_count\n  FROM Dogs\n  GROUP BY breed_code\n),\nRarestBreeds AS (\n  SELECT breed_code\n  FROM BreedCounts\n  WHERE breed_count = (SELECT MIN(breed_count) FROM BreedCounts)\n)\nSELECT d.name, t.date_of_treatment\nFROM Dogs d\nJOIN RarestBreeds rb ON d.breed_code = rb.breed_code\nLEFT JOIN Treatments t ON d.dog_id = t.dog_id;", "match": {"match": false, "result": [["Kacey", "2018-03-15 19:10:02"], ["Houston", "2018-03-15 20:25:34"], ["Merritt", null], ["George", null], ["Troy", "2018-02-28 17:09:43"], ["Troy", "2018-03-04 20:33:43"], ["Troy", "2018-03-11 04:23:15"], ["Holden", "2018-03-23 13:52:10"], ["Jesus", "2018-03-16 10:27:36"], ["Lyric", "2018-03-08 05:26:23"], ["Lyric", "2018-03-14 19:10:40"], ["Lyric", "2018-03-19 04:39:54"]], "gt": [["Lyric", "2018-03-19 04:39:54"], ["Houston", "2018-03-15 20:25:34"], ["Lyric", "2018-03-08 05:26:23"], ["Lyric", "2018-03-14 19:10:40"], ["Kacey", "2018-03-15 19:10:02"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT o.first_name, d.name\nFROM Dogs d\nJOIN Owners o ON d.owner_id = o.owner_id\nWHERE o.state = 'Virginia';\n```", "match": {"match": true, "result": [["Melisa", "Bessie"]]}}
{"result": "SELECT Owners.first_name, Dogs.name\nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id\nWHERE Owners.state = 'Virginia';", "match": {"match": true, "result": [["Melisa", "Bessie"]]}}
{"result": "SELECT DISTINCT d.date_arrived, d.date_departed\nFROM Dogs d\nJOIN Treatments t ON d.dog_id = t.dog_id;", "match": {"match": true, "result": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]]}}
{"result": "SELECT DISTINCT date_arrived, date_departed\nFROM Dogs\nWHERE dog_id IN (SELECT dog_id FROM Treatments);", "match": {"match": false, "result": [["2017-09-08 20:10:13", "2018-03-25 06:58:44"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"]], "gt": [["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-09-08 20:10:13", "2018-03-25 06:58:44"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT o.last_name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nORDER BY d.date_of_birth DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [["Mertz"]], "gt": [["Feil"], ["Fisher"], ["Rippin"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT o.last_name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nORDER BY d.date_of_birth DESC\nLIMIT 1;\n```", "match": {"match": false, "result": [["Mertz"]], "gt": [["Feil"], ["Fisher"], ["Rippin"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT email_address\nFROM Professionals\nWHERE state IN ('Hawaii', 'Wisconsin');\n```", "match": {"match": true, "result": [["uboehm@example.org"], ["mekhi.little@example.org"]]}}
{"result": "```sql\nSELECT email_address \nFROM Professionals \nWHERE state IN ('Hawaii', 'Wisconsin');\n```", "match": {"match": true, "result": [["uboehm@example.org"], ["mekhi.little@example.org"]]}}
{"result": "SELECT date_arrived, date_departed FROM Dogs;", "match": {"match": true, "result": [["2017-09-08 20:10:13", "2018-03-25 06:58:44"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-25 10:14:05", "2018-03-25 10:25:46"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-10-25 00:55:34", "2018-03-25 04:50:22"], ["2017-04-15 09:25:31", "2018-03-25 13:07:04"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-10-16 20:06:21", "2018-03-25 02:47:40"], ["2018-01-17 11:44:16", "2018-03-25 06:46:07"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-07-25 15:19:07", "2018-03-25 15:05:16"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"]]}}
{"result": "```sql\nSELECT date_arrived, date_departed FROM Dogs;\n```", "match": {"match": true, "result": [["2017-09-08 20:10:13", "2018-03-25 06:58:44"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-25 10:14:05", "2018-03-25 10:25:46"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-10-25 00:55:34", "2018-03-25 04:50:22"], ["2017-04-15 09:25:31", "2018-03-25 13:07:04"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-10-16 20:06:21", "2018-03-25 02:47:40"], ["2018-01-17 11:44:16", "2018-03-25 06:46:07"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-07-25 15:19:07", "2018-03-25 15:05:16"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"]]}}
{"result": "SELECT COUNT(DISTINCT dog_id) AS number_of_dogs_treated\nFROM Treatments;", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(DISTINCT dog_id) AS number_of_dogs_treated\nFROM Treatments;", "match": {"match": true, "result": [[9]]}}
{"result": "SELECT COUNT(DISTINCT professional_id) FROM Treatments;", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT COUNT(DISTINCT professional_id) FROM Treatments;", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT role_code, street, city, state\nFROM Professionals\nWHERE city LIKE '%West%';", "match": {"match": true, "result": [["Employee", "6915 Oberbrunner Point Suite 491\nGleasonville, LA ", "West Heidi", "Indiana"]]}}
{"result": "SELECT role_code, street, city, state\nFROM Professionals\nWHERE city LIKE '%West%';", "match": {"match": true, "result": [["Employee", "6915 Oberbrunner Point Suite 491\nGleasonville, LA ", "West Heidi", "Indiana"]]}}
{"result": "```sql\nSELECT first_name, last_name, email_address\nFROM Owners\nWHERE state LIKE '%North%'\n```", "match": {"match": true, "result": [["Johann", "Fisher", "zboncak.madonna@example.net"], ["Cindy", "Schmitt", "wpfeffer@example.net"]]}}
{"result": "```sql\nSELECT first_name, last_name, email_address\nFROM Owners\nWHERE state LIKE '%North%'\n```", "match": {"match": true, "result": [["Johann", "Fisher", "zboncak.madonna@example.net"], ["Cindy", "Schmitt", "wpfeffer@example.net"]]}}
{"result": "SELECT COUNT(*) \nFROM Dogs \nWHERE CAST(age AS UNSIGNED) < (\n    SELECT AVG(CAST(age AS UNSIGNED)) \n    FROM Dogs \n    WHERE age REGEXP '^[0-9]+$'\n)\nAND age REGEXP '^[0-9]+$';", "match": {"match": false, "error": "Query execution failed with error: no such function: REGEXP"}}
{"result": "SELECT COUNT(*) \nFROM Dogs \nWHERE CAST(age AS UNSIGNED) < (\n    SELECT AVG(CAST(age AS UNSIGNED)) \n    FROM Dogs \n    WHERE age REGEXP '^[0-9]+$'\n) AND age REGEXP '^[0-9]+$';", "match": {"match": false, "error": "Query execution failed with error: no such function: REGEXP"}}
{"result": "SELECT cost_of_treatment\nFROM Treatments\nORDER BY date_of_treatment DESC\nLIMIT 1;", "match": {"match": true, "result": [[407]]}}
{"result": "SELECT cost_of_treatment \nFROM Treatments \nORDER BY date_of_treatment DESC \nLIMIT 1;", "match": {"match": true, "result": [[407]]}}
{"result": "SELECT COUNT(*) \nFROM Dogs d\nLEFT JOIN Treatments t ON d.dog_id = t.dog_id\nWHERE t.treatment_id IS NULL;", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(*) AS num_dogs_without_treatment\nFROM Dogs d\nLEFT JOIN Treatments t ON d.dog_id = t.dog_id\nWHERE t.treatment_id IS NULL;", "match": {"match": true, "result": [[6]]}}
{"result": "SELECT COUNT(*) AS owners_without_dogs\nFROM Owners o\nLEFT JOIN Dogs d ON o.owner_id = d.owner_id AND d.date_departed IS NULL\nWHERE d.dog_id IS NULL;", "match": {"match": false, "result": [[15]], "gt": [[3]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) \nFROM Owners o\nLEFT JOIN Dogs d ON o.owner_id = d.owner_id AND d.date_adopted IS NOT NULL AND (d.date_departed IS NULL OR d.date_departed > NOW())\nWHERE d.dog_id IS NULL;", "match": {"match": false, "error": "Query execution failed with error: no such function: NOW"}}
{"result": "SELECT COUNT(*) \nFROM Professionals p\nLEFT JOIN Treatments t ON p.professional_id = t.professional_id\nWHERE t.treatment_id IS NULL;", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT COUNT(*) \nFROM Professionals p\nLEFT JOIN Treatments t ON p.professional_id = t.professional_id\nWHERE t.treatment_id IS NULL;", "match": {"match": true, "result": [[7]]}}
{"result": "SELECT name, age, weight\nFROM Dogs\nWHERE abandoned_yn = '1';", "match": {"match": true, "result": [["Kacey", "6", "7.57"], ["Lyric", "4", "4.36"], ["Evangeline", "1", "4.01"]]}}
{"result": "SELECT name, age, weight\nFROM Dogs\nWHERE abandoned_yn = '1';", "match": {"match": true, "result": [["Kacey", "6", "7.57"], ["Lyric", "4", "4.36"], ["Evangeline", "1", "4.01"]]}}
{"result": "SELECT AVG(CAST(age AS DECIMAL)) AS average_age FROM Dogs WHERE age IS NOT NULL;", "match": {"match": true, "result": [[5.066666666666666]]}}
{"result": "SELECT AVG(CAST(age AS DECIMAL)) AS average_age FROM Dogs WHERE age IS NOT NULL;", "match": {"match": true, "result": [[5.066666666666666]]}}
{"result": "SELECT MAX(CAST(age AS UNSIGNED)) AS oldest_age FROM Dogs;", "match": {"match": false, "result": [[9]], "gt": [["9"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT MAX(CAST(age AS UNSIGNED)) AS oldest_age FROM Dogs;", "match": {"match": false, "result": [[9]], "gt": [["9"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT charge_type, charge_amount\nFROM Charges;", "match": {"match": true, "result": [["Daily Accommodation", 98], ["Drugs", 322], ["Health Check", 640]]}}
{"result": "SELECT charge_type, charge_amount FROM Charges;", "match": {"match": true, "result": [["Daily Accommodation", 98], ["Drugs", 322], ["Health Check", 640]]}}
{"result": "SELECT MAX(charge_amount) AS max_charge_amount\nFROM Charges;", "match": {"match": true, "result": [[640]]}}
{"result": "```sql\nSELECT MAX(charge_amount) AS max_charge_amount\nFROM Charges;\n```", "match": {"match": true, "result": [[640]]}}
{"result": "```sql\nSELECT email_address, cell_number, home_phone \nFROM Professionals;\n```", "match": {"match": true, "result": [["deanna.schuster@example.com", "(275)939-2435x80863", "+71(6)2898266914"], ["lucile.shanahan@example.org", "889-940-2676", "+02(1)0259033559"], ["uboehm@example.org", "(369)908-7311x065", "325-155-0801x7005"], ["lourdes.lowe@example.net", "00230569697", "312.216.3352"], ["mekhi.little@example.org", "011.193.9081x3186", "1-609-566-2752x25197"], ["jacynthe.mclaughlin@example.net", "139-321-7313", "+43(5)1132733868"], ["lambert62@example.org", "499-434-0215x1628", "022.529.0550x1319"], ["goyette.roosevelt@example.net", "328.842.3792", "891.475.2256"], ["schneider.kathryne@example.org", "962-983-8109x3509", "320-508-6023"], ["jerrod.bahringer@example.org", "461-801-2600", "(230)338-3342x585"], ["west.eula@example.net", "609-405-2990", "(920)304-4499x59146"], ["marquardt.furman@example.org", "1-181-670-9466", "246-951-0080x76716"], ["delphine29@example.com", "880-659-7577x736", "346.594.3739"], ["cole.margarita@example.org", "1-185-137-1945x409", "971.048.3763x9404"], ["jeichmann@example.com", "1-258-285-4707x8020", "1-138-287-3775"]]}}
{"result": "SELECT email_address, cell_number, home_phone\nFROM Professionals;", "match": {"match": true, "result": [["deanna.schuster@example.com", "(275)939-2435x80863", "+71(6)2898266914"], ["lucile.shanahan@example.org", "889-940-2676", "+02(1)0259033559"], ["uboehm@example.org", "(369)908-7311x065", "325-155-0801x7005"], ["lourdes.lowe@example.net", "00230569697", "312.216.3352"], ["mekhi.little@example.org", "011.193.9081x3186", "1-609-566-2752x25197"], ["jacynthe.mclaughlin@example.net", "139-321-7313", "+43(5)1132733868"], ["lambert62@example.org", "499-434-0215x1628", "022.529.0550x1319"], ["goyette.roosevelt@example.net", "328.842.3792", "891.475.2256"], ["schneider.kathryne@example.org", "962-983-8109x3509", "320-508-6023"], ["jerrod.bahringer@example.org", "461-801-2600", "(230)338-3342x585"], ["west.eula@example.net", "609-405-2990", "(920)304-4499x59146"], ["marquardt.furman@example.org", "1-181-670-9466", "246-951-0080x76716"], ["delphine29@example.com", "880-659-7577x736", "346.594.3739"], ["cole.margarita@example.org", "1-185-137-1945x409", "971.048.3763x9404"], ["jeichmann@example.com", "1-258-285-4707x8020", "1-138-287-3775"]]}}
{"result": "SELECT B.breed_name, S.size_description\nFROM Breeds B\nCROSS JOIN Sizes S;", "match": {"match": false, "result": [["Eskimo", "Small"], ["Eskimo", "Medium"], ["Eskimo", "Large"], ["Husky", "Small"], ["Husky", "Medium"], ["Husky", "Large"], ["Bulldog", "Small"], ["Bulldog", "Medium"], ["Bulldog", "Large"]], "gt": [["ESK", "LGE"], ["BUL", "LGE"], ["BUL", "MED"], ["HUS", "MED"], ["ESK", "SML"], ["HUS", "SML"], ["ESK", "MED"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT DISTINCT b.breed_name, s.size_description\nFROM Dogs d\nJOIN Breeds b ON d.breed_code = b.breed_code\nJOIN Sizes s ON d.size_code = s.size_code;", "match": {"match": false, "result": [["Eskimo", "Large"], ["Bulldog", "Large"], ["Bulldog", "Medium"], ["Husky", "Medium"], ["Eskimo", "Small"], ["Husky", "Small"], ["Eskimo", "Medium"]], "gt": [["ESK", "LGE"], ["BUL", "LGE"], ["BUL", "MED"], ["HUS", "MED"], ["ESK", "SML"], ["HUS", "SML"], ["ESK", "MED"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT P.first_name, Tt.treatment_type_description\nFROM Professionals P\nJOIN Treatments Tr ON P.professional_id = Tr.professional_id\nJOIN Treatment_Types Tt ON Tr.treatment_type_code = Tt.treatment_type_code;\n```", "match": {"match": false, "result": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Vernice", "Physical examination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Karley", "Vaccination"], ["Monte", "Take for a Walk"], ["Ruben", "Take for a Walk"]], "gt": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Ruben", "Take for a Walk"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT p.first_name, tt.treatment_type_description\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nJOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;\n```", "match": {"match": false, "result": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Vernice", "Physical examination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Karley", "Vaccination"], ["Monte", "Take for a Walk"], ["Ruben", "Take for a Walk"]], "gt": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Ruben", "Take for a Walk"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT COUNT(*) AS NumberOfSingers FROM singer;", "match": {"match": true, "result": [[8]]}}
{"result": "SELECT COUNT(*) FROM singer;", "match": {"match": true, "result": [[8]]}}
{"result": "```sql\nSELECT Name\nFROM singer\nORDER BY Net_Worth_Millions ASC;\n```", "match": {"match": true, "result": [["Abigail Johnson"], ["Susanne Klatten"], ["Gina Rinehart"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Alice Walton"], ["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "SELECT Name\nFROM singer\nORDER BY Net_Worth_Millions ASC;", "match": {"match": true, "result": [["Abigail Johnson"], ["Susanne Klatten"], ["Gina Rinehart"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Alice Walton"], ["Christy Walton"], ["Liliane Bettencourt"]]}}
{"result": "```sql\nSELECT Birth_Year, Citizenship FROM singer;\n```", "match": {"match": true, "result": [[1944.0, "France"], [1948.0, "United States"], [1949.0, "United States"], [1942.0, "Chile"], [1940.0, "United States"], [1953.0, "Australia"], [1962.0, "Germany"], [1961.0, "United States"]]}}
{"result": "SELECT Birth_Year, Citizenship FROM singer;", "match": {"match": true, "result": [[1944.0, "France"], [1948.0, "United States"], [1949.0, "United States"], [1942.0, "Chile"], [1940.0, "United States"], [1953.0, "Australia"], [1962.0, "Germany"], [1961.0, "United States"]]}}
{"result": "SELECT Name \nFROM singer \nWHERE Citizenship <> 'France';", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]]}}
{"result": "SELECT Name FROM singer WHERE Citizenship <> 'French';", "match": {"match": false, "result": [["Liliane Bettencourt"], ["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]], "gt": [["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT Name\nFROM singer\nWHERE Birth_Year IN (1948, 1949);", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"]]}}
{"result": "```sql\nSELECT Name\nFROM singer\nWHERE Birth_Year IN (1948, 1949);\n```", "match": {"match": true, "result": [["Christy Walton"], ["Alice Walton"]]}}
{"result": "SELECT Name \nFROM singer \nORDER BY Net_Worth_Millions DESC \nLIMIT 1;", "match": {"match": true, "result": [["Liliane Bettencourt"]]}}
{"result": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;", "match": {"match": true, "result": [["Liliane Bettencourt"]]}}
{"result": "SELECT Citizenship, COUNT(*) AS Number_of_Singers\nFROM singer\nGROUP BY Citizenship;", "match": {"match": true, "result": [["Australia", 1], ["Chile", 1], ["France", 1], ["Germany", 1], ["United States", 4]]}}
{"result": "SELECT Citizenship, COUNT(*) AS Number_of_Singers\nFROM singer\nGROUP BY Citizenship;", "match": {"match": true, "result": [["Australia", 1], ["Chile", 1], ["France", 1], ["Germany", 1], ["United States", 4]]}}
{"result": "SELECT Citizenship\nFROM singer\nGROUP BY Citizenship\nORDER BY COUNT(*) DESC\nLIMIT 1;", "match": {"match": true, "result": [["United States"]]}}
{"result": "SELECT Citizenship, COUNT(*) AS count\nFROM singer\nGROUP BY Citizenship\nORDER BY count DESC\nLIMIT 1;", "match": {"match": false, "result": [["United States", 4]], "gt": [["United States"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth\nFROM singer\nGROUP BY Citizenship;\n```", "match": {"match": true, "result": [["Australia", 17.0], ["Chile", 17.4], ["France", 30.0], ["Germany", 14.3], ["United States", 28.8]]}}
{"result": "SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth\nFROM singer\nGROUP BY Citizenship;", "match": {"match": true, "result": [["Australia", 17.0], ["Chile", 17.4], ["France", 30.0], ["Germany", 14.3], ["United States", 28.8]]}}
{"result": "SELECT song.Title, singer.Name\nFROM song\nJOIN singer ON song.Singer_ID = singer.Singer_ID;", "match": {"match": true, "result": [["Do They Know It's Christmas", "Liliane Bettencourt"], ["F**k It (I Don't Want You Back)", "Liliane Bettencourt"], ["Cha Cha Slide", "Christy Walton"], ["Call on Me", "Iris Fontbona"], ["Yeah", "Christy Walton"], ["All This Time", "Gina Rinehart"], ["Left Outside Alone", "Jacqueline Mars"], ["Mysterious Girl", "Susanne Klatten"]]}}
{"result": "SELECT song.Title, singer.Name\nFROM song\nJOIN singer ON song.Singer_ID = singer.Singer_ID;", "match": {"match": true, "result": [["Do They Know It's Christmas", "Liliane Bettencourt"], ["F**k It (I Don't Want You Back)", "Liliane Bettencourt"], ["Cha Cha Slide", "Christy Walton"], ["Call on Me", "Iris Fontbona"], ["Yeah", "Christy Walton"], ["All This Time", "Gina Rinehart"], ["Left Outside Alone", "Jacqueline Mars"], ["Mysterious Girl", "Susanne Klatten"]]}}
{"result": "SELECT DISTINCT s.Name\nFROM singer s\nJOIN song so ON s.Singer_ID = so.Singer_ID\nWHERE so.Sales > 300000;", "match": {"match": true, "result": [["Liliane Bettencourt"], ["Christy Walton"], ["Iris Fontbona"]]}}
{"result": "SELECT DISTINCT s.Name\nFROM singer s\nJOIN song so ON s.Singer_ID = so.Singer_ID\nWHERE so.Sales > 300000;", "match": {"match": true, "result": [["Liliane Bettencourt"], ["Christy Walton"], ["Iris Fontbona"]]}}
{"result": "SELECT s.Name\nFROM singer s\nJOIN song so ON s.Singer_ID = so.Singer_ID\nGROUP BY s.Singer_ID, s.Name\nHAVING COUNT(so.Song_ID) > 1;", "match": {"match": false, "result": [["Liliane Bettencourt"], ["Christy Walton"]], "gt": [["Christy Walton"], ["Liliane Bettencourt"]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.Name\nFROM singer s\nJOIN song so ON s.Singer_ID = so.Singer_ID\nGROUP BY s.Singer_ID, s.Name\nHAVING COUNT(so.Song_ID) > 1;", "match": {"match": false, "result": [["Liliane Bettencourt"], ["Christy Walton"]], "gt": [["Christy Walton"], ["Liliane Bettencourt"]], "error": "Query result does not match ground truth."}}
{"result": "```sql\nSELECT s.Name, COALESCE(SUM(so.Sales), 0) AS Total_Sales\nFROM singer s\nLEFT JOIN song so ON s.Singer_ID = so.Singer_ID\nGROUP BY s.Name;\n```", "match": {"match": false, "result": [["Abigail Johnson", 0], ["Alice Walton", 0], ["Christy Walton", 651421.0], ["Gina Rinehart", 292000.0], ["Iris Fontbona", 335000.0], ["Jacqueline Mars", 275000.0], ["Liliane Bettencourt", 1646407.0], ["Susanne Klatten", 261000.0]], "gt": [["Christy Walton", 651421.0], ["Gina Rinehart", 292000.0], ["Iris Fontbona", 335000.0], ["Jacqueline Mars", 275000.0], ["Liliane Bettencourt", 1646407.0], ["Susanne Klatten", 261000.0]], "error": "Query result does not match ground truth."}}
{"result": "SELECT s.Name, SUM(song.Sales) AS Total_Sales\nFROM singer s\nJOIN song ON s.Singer_ID = song.Singer_ID\nGROUP BY s.Name;", "match": {"match": true, "result": [["Christy Walton", 651421.0], ["Gina Rinehart", 292000.0], ["Iris Fontbona", 335000.0], ["Jacqueline Mars", 275000.0], ["Liliane Bettencourt", 1646407.0], ["Susanne Klatten", 261000.0]]}}
{"result": "SELECT Name\nFROM singer s\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM song so\n    WHERE so.Singer_ID = s.Singer_ID\n);", "match": {"match": true, "result": [["Alice Walton"], ["Abigail Johnson"]]}}
{"result": "SELECT Name AS sname\nFROM singer\nWHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song);", "match": {"match": true, "result": [["Alice Walton"], ["Abigail Johnson"]]}}
{"result": "SELECT Citizenship\nFROM singer\nWHERE Birth_Year < 1945\nINTERSECT\nSELECT Citizenship\nFROM singer\nWHERE Birth_Year > 1955;", "match": {"match": true, "result": [["United States"]]}}
{"result": "```sql\nSELECT Citizenship\nFROM singer\nWHERE Birth_Year < 1945\n\nINTERSECT\n\nSELECT Citizenship\nFROM singer\nWHERE Birth_Year > 1955;\n```", "match": {"match": true, "result": [["United States"]]}}
{"result": "SELECT COUNT(*) AS total_available_features FROM Other_Available_Features;", "match": {"match": true, "result": [[3]]}}
{"result": "SELECT rft.feature_type_name\nFROM Other_Available_Features oaf\nJOIN Ref_Feature_Types rft ON oaf.feature_type_code = rft.feature_type_code\nWHERE oaf.feature_name = 'AirCon';", "match": {"match": true, "result": [["Amenity, eg Pool."]]}}
{"result": "SELECT property_type_description\nFROM Ref_Property_Types\nWHERE property_type_code = ?;", "match": {"match": false, "error": "Query execution failed with error: Incorrect number of bindings supplied. The current statement uses 1, and there are 0 supplied."}}
{"result": "```sql\nSELECT property_name\nFROM Properties\nWHERE (property_type_code = 'hse' OR property_type_code = 'apt')\n  AND room_count > 1;\n```", "match": {"match": false, "result": [], "gt": [["longacre"], ["parc coliseum"], ["parc east"], ["park"], ["renoir"], ["ten tower"], ["the cole"], ["vogue"]], "error": "Query result does not match ground truth."}}
